:NoRecursiveTypes
:GeneralizeCurriedFunctions
:ConstrainedTypes
:DontDistributeForalls



type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ Defined type alias ChurchInt



// * === Explicitly Annotated ===


def zero: forall 'a. ('a -> 'a) -> ('a -> 'a)
def zero f x = x
//│ zero: ('a -> 'a) -> 'a -> 'a
//│     = <missing implementation>
//│ anything -> (forall 'a. 'a -> 'a)
//│   <:  zero:
//│ ('a -> 'a) -> 'a -> 'a
//│     = [Function: zero]

def zero: ChurchInt
def zero f x = x
//│ zero: ChurchInt
//│     = <missing implementation>
//│ anything -> (forall 'a. 'a -> 'a)
//│   <:  zero:
//│ ChurchInt
//│     = [Function: zero1]


def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ succ: (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = <missing implementation>

:e // * Since "sound extrusion"
def succ n f x = f (n f x)
//│ 'a -> (forall 'b. 'b -> (forall 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'b <: 'd -> 'e
//│     'a <: 'b -> 'c -> 'd)))
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.40: 	def succ n f x = f (n f x)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.35: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                                           ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.35: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                                           ^^
//│ ╟── from quantified type variable:
//│ ║  l.35: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ╙──      	                  ^^
//│     = [Function: succ1]

def succ: ChurchInt -> ChurchInt
//│ succ: ChurchInt -> ChurchInt
//│     = <missing implementation>

:e // * Since "sound extrusion"
def succ n f x = f (n f x)
//│ 'a -> (forall 'b. 'b -> (forall 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'b <: 'd -> 'e
//│     'a <: 'b -> 'c -> 'd)))
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.66: 	def succ n f x = f (n f x)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                        ^^
//│     = [Function: succ2]


def succD: forall 'M. ChurchInt -> ('M -> 'M) -> ('M -> 'M)
def succD n f x = f (n f x)
//│ succD: ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│      = <missing implementation>
//│ 'a -> (forall 'b. 'b -> (forall 'c, 'd, 'e. ('e -> 'd
//│   where
//│     'b <: 'c -> 'd
//│     'a <: 'b -> 'e -> 'c)))
//│   <:  succD:
//│ ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│      = [Function: succD]

succD = succ
//│ ChurchInt -> ChurchInt
//│   <:  succD:
//│ ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│      = [Function: succ2]

// * This does not hold without distrobutivity
:e
succ = succD
//│ ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.105: 	succ = succD
//│ ║         	^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── from quantified type variable:
//│ ║  l.85: 	def succD: forall 'M. ChurchInt -> ('M -> 'M) -> ('M -> 'M)
//│ ╙──      	                  ^^
//│     = [Function: succ2]



// * === Usages ===


n1 = succ zero
//│ n1: ChurchInt
//│   = [Function (anonymous)]

n2 = succ (succ zero)
//│ n2: ChurchInt
//│   = [Function (anonymous)]

n3 = succ (succ (succ zero))
//│ n3: ChurchInt
//│   = [Function (anonymous)]


wrap x = { x }
//│ wrap: 'a -> {x: 'a}
//│     = [Function: wrap]

n1w = n1 wrap
//│ n1w: 'N -> 'N
//│   where
//│     'N :> {x: 'N}
//│    = [Function (anonymous)]

n1w 0
//│ res: 'a
//│   where
//│     'a :> 0 | {x: 'a}
//│    = { x: 0 }

n1 wrap 0
//│ res: 'a
//│   where
//│     'a :> 0 | {x: 'a}
//│    = { x: 0 }

:e
res.x + 1
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.164: 	res.x + 1
//│ ║         	^^^^^
//│ ╟── integer literal of type `0` does not have field 'x'
//│ ║  l.157: 	n1 wrap 0
//│ ║         	        ^
//│ ╟── but it flows into reference with expected type `{x: ?x}`
//│ ║  l.164: 	res.x + 1
//│ ╙──       	^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.164: 	res.x + 1
//│ ║         	^^^^^^^
//│ ╟── record literal of type `{x: ?a}` is not an instance of type `int`
//│ ║  l.141: 	wrap x = { x }
//│ ║         	         ^^^^^
//│ ╟── but it flows into field selection with expected type `int`
//│ ║  l.164: 	res.x + 1
//│ ╙──       	^^^^^
//│ res: error
//│    = 1

n2 wrap 0
//│ res: 'a
//│   where
//│     'a :> 0 | {x: 'a}
//│    = { x: { x: 0 } }

:e
res.x.x + 1
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.193: 	res.x.x + 1
//│ ║         	^^^^^
//│ ╟── integer literal of type `0` does not have field 'x'
//│ ║  l.186: 	n2 wrap 0
//│ ║         	        ^
//│ ╟── but it flows into reference with expected type `{x: ?x}`
//│ ║  l.193: 	res.x.x + 1
//│ ╙──       	^^^
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.193: 	res.x.x + 1
//│ ║         	^^^^^^^
//│ ╟── integer literal of type `0` does not have field 'x'
//│ ║  l.186: 	n2 wrap 0
//│ ║         	        ^
//│ ╟── but it flows into field selection with expected type `{x: ?x}`
//│ ║  l.193: 	res.x.x + 1
//│ ╙──       	^^^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.193: 	res.x.x + 1
//│ ║         	^^^^^^^^^
//│ ╟── record literal of type `{x: ?a}` is not an instance of type `int`
//│ ║  l.141: 	wrap x = { x }
//│ ║         	         ^^^^^
//│ ╟── but it flows into field selection with expected type `int`
//│ ║  l.193: 	res.x.x + 1
//│ ╙──       	^^^^^^^
//│ res: error
//│    = 1


def wrap_ty: 'a -> {x: 'a}
//│ wrap_ty: 'a -> {x: 'a}
//│        = <missing implementation>

wrap_ty = wrap
//│ 'a -> {x: 'a}
//│   <:  wrap_ty:
//│ 'a -> {x: 'a}
//│        = [Function: wrap]

n1w = n1 wrap_ty
//│ n1w: 'N -> 'N
//│   where
//│     'N :> {x: 'N}
//│    = [Function (anonymous)]

n1w 0
//│ res: 'a
//│   where
//│     'a :> 0 | {x: 'a}
//│    = { x: 0 }

:e
res.x + 1
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.248: 	res.x + 1
//│ ║         	^^^^^
//│ ╟── integer literal of type `0` does not have field 'x'
//│ ║  l.241: 	n1w 0
//│ ║         	    ^
//│ ╟── but it flows into reference with expected type `{x: ?x}`
//│ ║  l.248: 	res.x + 1
//│ ╙──       	^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.248: 	res.x + 1
//│ ║         	^^^^^^^
//│ ╟── type `{x: ?a}` is not an instance of type `int`
//│ ║  l.225: 	def wrap_ty: 'a -> {x: 'a}
//│ ║         	                   ^^^^^^^
//│ ╟── but it flows into field selection with expected type `int`
//│ ║  l.248: 	res.x + 1
//│ ╙──       	^^^^^
//│ res: error
//│    = 1

  

// * === Unannotated (More Powerful) ===


def z f x = x
//│ z: anything -> (forall 'a. 'a -> 'a)
//│  = [Function: z]

def s n f x = f (n f x)
//│ s: 'a -> (forall 'b. 'b -> (forall 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e)))
//│  = [Function: s]

zero = z
//│ anything -> (forall 'a. 'a -> 'a)
//│   <:  zero:
//│ ChurchInt
//│     = [Function: z]

:e // * Since "sound extrusion"
succ = s
//│ 'a -> (forall 'b. 'b -> (forall 'c, 'd, 'e. ('e -> 'd
//│   where
//│     'b <: 'c -> 'd
//│     'a <: 'b -> 'e -> 'c)))
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.293: 	succ = s
//│ ║         	^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                        ^^
//│     = [Function: s]

:stats
z: ChurchInt
//│ res: ChurchInt
//│    = [Function: z]
//│ constrain calls  : 15
//│ annoying  calls  : 0
//│ subtyping calls  : 27

:e // * Since "sound extrusion"
:stats
s: ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.321: 	s: ChurchInt -> ChurchInt
//│ ║         	^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                        ^^
//│ res: ChurchInt -> ChurchInt
//│    = [Function: s]
//│ constrain calls  : 52
//│ annoying  calls  : 0
//│ subtyping calls  : 121



// * === Usages ===


n1 = s z
//│ n1: 'a -> (forall 'b, 'c, 'd. ('b -> 'd
//│   where
//│     anything -> (forall 'e. 'e -> 'e) <: 'a -> 'b -> 'c
//│     'a <: 'c -> 'd))
//│   = [Function (anonymous)]

n2 = s (s z)
//│ n2: 'a -> (forall 'b, 'c, 'd. ('b -> 'd
//│   where
//│     'a <: 'c -> 'd
//│     forall 'e. 'e -> (forall 'f, 'g, 'h. ('f -> 'h
//│   where
//│     'e <: 'g -> 'h
//│     anything -> (forall 'i. 'i -> 'i) <: 'e -> 'f -> 'g)) <: 'a -> 'b -> 'c))
//│   = [Function (anonymous)]

n3 = s (s (s z))
//│ n3: 'a -> (forall 'b, 'c, 'd. ('b -> 'd
//│   where
//│     'a <: 'c -> 'd
//│     forall 'e. 'e -> (forall 'f, 'g, 'h. ('f -> 'h
//│   where
//│     forall 'i. 'i -> (forall 'j, 'k, 'l. ('j -> 'l
//│   where
//│     'i <: 'k -> 'l
//│     anything -> (forall 'm. 'm -> 'm) <: 'i -> 'j -> 'k)) <: 'e -> 'f -> 'g
//│     'e <: 'g -> 'h)) <: 'a -> 'b -> 'c))
//│   = [Function (anonymous)]


wrap x = { x }
//│ wrap: 'a -> {x: 'a}
//│     = [Function: wrap1]

n1w = n1 wrap
//│ n1w: 'a -> 'b
//│   where
//│     forall 'c. 'c -> {x: 'c} <: 'd -> 'b
//│     anything -> (forall 'e. 'e -> 'e) <: (forall 'c. 'c -> {x: 'c}) -> 'a -> 'd
//│    = [Function (anonymous)]

n1w 0
//│ res: {x: 0}
//│    = { x: 0 }

n1 wrap 0
//│ res: {x: 0}
//│    = { x: 0 }

res.x + 1
//│ res: int
//│    = 1

n2 wrap 0
//│ res: {x: {x: 0}}
//│    = { x: { x: 0 } }

res.x.x + 1
//│ res: int
//│    = 1

n3 wrap 0
//│ res: {x: {x: {x: 0}}}
//│    = { x: { x: { x: 0 } } }

res.x.x.x + 1
//│ res: int
//│    = 1


def wrap_ty: 'a -> {x: 'a}
//│ wrap_ty: 'a -> {x: 'a}
//│        = <missing implementation>

wrap_ty = wrap
//│ 'a -> {x: 'a}
//│   <:  wrap_ty:
//│ 'a -> {x: 'a}
//│        = [Function: wrap1]

n1w = n1 wrap_ty
//│ n1w: 'b -> 'c
//│   where
//│     forall 'a. 'a -> {x: 'a} <: 'd -> 'c
//│     anything -> (forall 'e. 'e -> 'e) <: (forall 'a. 'a -> {x: 'a}) -> 'b -> 'd
//│    = [Function (anonymous)]

n1w 0
//│ res: {x: 0}
//│    = { x: 0 }

res.x + 1
//│ res: int
//│    = 1

n2 wrap_ty 0
//│ res: {x: {x: 0}}
//│    = { x: { x: 0 } }

res.x.x + 1
//│ res: int
//│    = 1

n3 wrap_ty 0
//│ res: {x: {x: {x: 0}}}
//│    = { x: { x: { x: 0 } } }

res.x.x.x + 1
//│ res: int
//│    = 1



// * === Other Usages ===


sz = s zero
//│ sz: 'a -> (forall 'b, 'c, 'd. ('b -> 'd
//│   where
//│     ChurchInt <: 'a -> 'b -> 'c
//│     'a <: 'c -> 'd))
//│   = [Function (anonymous)]

:ns
sz
//│ res: forall 'a, 'b. 'a
//│   where
//│     'a :> forall 'c. 'c -> (forall 'd, 'e, 'f, 'g. ('e -> 'g
//│   where
//│     'c <: 'f -> 'g
//│     'b <: 'c -> 'd))
//│     'd <: 'e -> 'f
//│     'b :> ChurchInt
//│    = [Function (anonymous)]

sz: ChurchInt
//│ res: ChurchInt
//│    = [Function (anonymous)]

:e // * Since "sound extrusion"
s zero : ChurchInt
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.483: 	s zero : ChurchInt
//│ ║         	^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                        ^^
//│ res: ChurchInt
//│    = [Function (anonymous)]

// * Error delayed by inconsistent constrained types
// * Notice the unsatisfiable constraint `1 <: 'c -> 'b`
sz1 = sz 1
//│ sz1: 'a -> 'b
//│   where
//│     1 <: 'c -> 'b
//│     ChurchInt <: 1 -> 'a -> 'c
//│    = [Function (anonymous)]

:ns
sz1
//│ res: forall 'a, 'b, 'c. 'a
//│   where
//│     'a :> forall 'd, 'e, 'f, 'g. ('e -> 'g
//│   where
//│     'c <: 'f -> 'g
//│     'b <: 'c -> 'd)
//│     'd <: 'e -> 'f
//│     'b :> ChurchInt
//│     'c :> 1
//│    = [Function (anonymous)]

:e  // * Since inconsistent constrained types (delayed error from above)
sz1 2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.519: 	sz1 2
//│ ║         	^^^^^
//│ ╟── integer literal of type `1` is not a function
//│ ║  l.498: 	sz1 = sz 1
//│ ║         	         ^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                            ^^^^^^^^^^
//│ res: error
//│ Runtime error:
//│   TypeError: f is not a function



// * === Conversions (Using Annotated Defs) ===


rec def to_church n =
  if n == 0 then zero
  else succ (to_church (n - 1))
//│ to_church: 'to_church
//│   where
//│     'to_church :> int -> ChurchInt
//│   where
//│     'to_church <: int -> ChurchInt
//│          = [Function: to_church]

def to_church_ty: int -> ChurchInt
//│ to_church_ty: int -> ChurchInt
//│             = <missing implementation>

:e // * Since the removal of "recursive definition hacks"
to_church_ty = to_church
//│ 'to_church
//│   where
//│     'to_church :> int -> ChurchInt
//│   where
//│     'to_church <: int -> ChurchInt
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition; a type annotation may be required
//│ ║  l.553: 	to_church_ty = to_church
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  to_church1087_1117#  <:  ((α1095_1126,) -> α1096_1127)    TypeVariable  FunctionType
//│ ╙──  ... looks like:  to_church1087'#  <:  ((α1095_1118'',) -> α1096_1119'')
//│             = [Function: to_church]

// * Non-recursive def emulates annotated recursive def
def to_church_ty n =
  if n == 0 then zero
  else succ (to_church_ty (n - 1))
//│ int -> ChurchInt
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_ty1]



// * === Conversions (Using Unannotated Defs) ===

rec def to_ch_s n =
  if n == 0 then z
  else s (to_ch_s (n - 1))
//│ to_ch_s: 'to_ch_s
//│   where
//│     'to_ch_s :> forall 'a. (int -> (forall 'b. 'b -> (forall 'c, 'd, 'e, 'f, 'b. (('d & 'f) -> ('d | 'c)
//│   where
//│     'a <: 'b -> 'f -> 'e
//│     'b <: 'e -> 'c)))
//│   where
//│     'to_ch_s <: int -> 'a)
//│        = [Function: to_ch_s]

rec def to_ch n =
  if n == 0 then z
  else s (to_ch (n - 1))
//│ to_ch: 'to_ch
//│   where
//│     'to_ch :> forall 'a. (int -> (forall 'b. 'b -> (forall 'c, 'd, 'e, 'b, 'f. (('e & 'f) -> ('e | 'd)
//│   where
//│     'b <: 'c -> 'd
//│     'a <: 'b -> 'f -> 'c)))
//│   where
//│     'to_ch <: int -> 'a)
//│      = [Function: to_ch]

:e // * Needs distrib (see below)
to_church_ty = to_ch
//│ 'to_ch
//│   where
//│     'to_ch :> forall 'a. (int -> (forall 'b. 'b -> (forall 'b, 'c, 'd, 'e, 'f. (('c & 'f) -> ('c | 'e)
//│   where
//│     'a <: 'b -> 'f -> 'd
//│     'b <: 'd -> 'e)))
//│   where
//│     'to_ch <: int -> 'a)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition; a type annotation may be required
//│ ║  l.609: 	to_church_ty = to_ch
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  to_ch1202_1284#  <:  ((α1210_1305,) -> α1211_1306)    TypeVariable  FunctionType
//│ ╙──  ... looks like:  to_ch1202'#  <:  ((α1210_1285'',) -> α1211_1286'')
//│             = [Function: to_ch]

rec def to_ch_simplif n = s (to_ch_simplif n)
//│ to_ch_simplif: 'to_ch_simplif
//│   where
//│     'to_ch_simplif :> forall 'a, 'b. ('a -> (forall 'c. 'c -> (forall 'd, 'e, 'f. ('d -> 'f
//│   where
//│     'b <: 'c -> 'd -> 'e
//│     'c <: 'e -> 'f)))
//│   where
//│     'to_ch_simplif <: 'a -> 'b)
//│              = [Function: to_ch_simplif]

:e
to_church_ty = to_ch_simplif
//│ 'to_ch_simplif
//│   where
//│     'to_ch_simplif :> forall 'a, 'b. ('a -> (forall 'c. 'c -> (forall 'd, 'e, 'f. ('d -> 'f
//│   where
//│     'c <: 'e -> 'f
//│     'b <: 'c -> 'd -> 'e)))
//│   where
//│     'to_ch_simplif <: 'a -> 'b)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition; a type annotation may be required
//│ ║  l.640: 	to_church_ty = to_ch_simplif
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  to_ch_simplif1315_1382#  <:  ((α1316_1401,) -> α1317_1402)    TypeVariable  FunctionType
//│ ╙──  ... looks like:  to_ch_simplif1315'#  <:  ((α1316_1383'',) -> α1317_1384'')
//│             = [Function: to_ch_simplif]


// * This annotation now helps (since removal of "recursive definition hacks")
rec def to_ch_A1 n =
  if n == 0 then z
  else s (to_ch_A1 (n - 1) : ChurchInt)
//│ to_ch_A1: 'to_ch_A1
//│   where
//│     'to_ch_A1 :> int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e. (('b & 'e) -> ('b | 'c)
//│   where
//│     'a <: 'd -> 'c
//│     ChurchInt <: 'a -> 'e -> 'd)))
//│   where
//│     'to_ch_A1 <: int -> ChurchInt
//│         = [Function: to_ch_A1]

// * But we can't check the corresponding type
:e
to_church_ty = to_ch_A1
//│ 'to_ch_A1
//│   where
//│     'to_ch_A1 :> int -> (forall 'a. 'a -> (forall 'b, 'c, 'a, 'd, 'e. (('c & 'd) -> ('c | 'b)
//│   where
//│     ChurchInt <: 'a -> 'd -> 'e
//│     'a <: 'e -> 'b)))
//│   where
//│     'to_ch_A1 <: int -> ChurchInt
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition; a type annotation may be required
//│ ║  l.676: 	to_church_ty = to_ch_A1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  to_ch_A11410_1488#  <:  ((α1418_1509,) -> α1419_1510)    TypeVariable  FunctionType
//│ ╙──  ... looks like:  to_ch_A11410'#  <:  ((α1418_1489'',) -> α1419_1490'')
//│             = [Function: to_ch_A1]

// * This annotation now helps too (since "recursive definition hacks" removal)
rec def to_ch_A2 n = (
    if n == 0 then z
    else s (to_ch_A2 (n - 1))
  ) : ChurchInt
//│ to_ch_A2: 'to_ch_A2
//│   where
//│     'to_ch_A2 :> int -> ChurchInt
//│   where
//│     'to_ch_A2 <: int -> (nothing -> anything) -> anything -> nothing
//│         = [Function: to_ch_A2]

:e // * Since the removal of "recursive definition hacks"
to_church_ty = to_ch_A2
//│ 'to_ch_A2
//│   where
//│     'to_ch_A2 :> int -> ChurchInt
//│   where
//│     'to_ch_A2 <: int -> (nothing -> anything) -> anything -> nothing
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition; a type annotation may be required
//│ ║  l.708: 	to_church_ty = to_ch_A2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  to_ch_A21519_1584#  <:  ((α1527_1601,) -> α1528_1602)    TypeVariable  FunctionType
//│ ╙──  ... looks like:  to_ch_A21519'#  <:  ((α1527_1585'',) -> α1528_1586'')
//│             = [Function: to_ch_A2]


:e // * Since the removal of "recursive definition hacks"
// * Uses `to_church` as the rec call
def to_church_mix n =
  if n == 0 then z
  else s (to_church (n - 1))
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.729: 	  else s (to_church (n - 1))
//│ ║         	          ^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  to_church1087_1618''#  <:  ((α1095_1631'',) -> α1096_1632'')    TypeVariable  FunctionType
//│ ╙──  ... looks like:  to_church1087'#  <:  ((α1095_1623''',) -> α1096_1624''')
//│ to_church_mix: int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e. (('e & 'd) -> ('e | 'c)
//│   where
//│     error <: 'a -> 'd -> 'b
//│     'a <: 'b -> 'c)))
//│              = [Function: to_church_mix]

to_church_ty = to_church_mix
//│ int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e. (('c & 'b) -> ('c | 'e)
//│   where
//│     error <: 'a -> 'b -> 'd
//│     'a <: 'd -> 'e)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_mix]


// * It would seem we need to distribute back (in the other direction) here, but it works:
rec def to_chD n =
  succD (to_chD n)
//│ to_chD: 'to_chD
//│   where
//│     'to_chD :> forall 'a, 'M. ('a -> ('M -> 'M) -> 'M -> 'M
//│   where
//│     'to_chD <: 'a -> ChurchInt)
//│       = [Function: to_chD]



// * === With Distributivity ===


:DistributeForalls


// * Now everything Just Works!


// * Now works
succ = s
//│ 'a -> (forall 'b. 'b -> (forall 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'b <: 'd -> 'e
//│     'a <: 'b -> 'c -> 'd)))
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│     = [Function: s]

// * Now works
succ = succD
//│ ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│     = [Function: succ2]

// * Now works
rec def to_chD n =
  succD (to_chD n)
//│ to_chD: 'to_chD
//│   where
//│     'to_chD :> forall 'a. ('a -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│   where
//│     'to_chD <: 'a -> ChurchInt)
//│       = [Function: to_chD1]

:e // * Since the removal of "recursive definition hacks"
to_church_ty = to_ch
//│ 'to_ch
//│   where
//│     'to_ch :> forall 'a. (int -> (forall 'b. 'b -> (forall 'c, 'd, 'b, 'e, 'f. (('c & 'd) -> ('c | 'e)
//│   where
//│     'a <: 'b -> 'd -> 'f
//│     'b <: 'f -> 'e)))
//│   where
//│     'to_ch <: int -> 'a)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition; a type annotation may be required
//│ ║  l.801: 	to_church_ty = to_ch
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  to_ch1202_1820'#  <:  ((α1210_1841',) -> α1211_1842')    TypeVariable  FunctionType
//│ ╙──  ... looks like:  to_ch1202'#  <:  ((α1210_1821'',) -> α1211_1822'')
//│             = [Function: to_ch]

:e // * Since the removal of "recursive definition hacks"
to_church_ty = to_ch_simplif
//│ 'to_ch_simplif
//│   where
//│     'to_ch_simplif :> forall 'a, 'b. ('a -> (forall 'c. 'c -> (forall 'd, 'e, 'f. ('d -> 'f
//│   where
//│     'c <: 'e -> 'f
//│     'b <: 'c -> 'd -> 'e)))
//│   where
//│     'to_ch_simplif <: 'a -> 'b)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition; a type annotation may be required
//│ ║  l.821: 	to_church_ty = to_ch_simplif
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  to_ch_simplif1315_1876'#  <:  ((α1316_1895',) -> α1317_1896')    TypeVariable  FunctionType
//│ ╙──  ... looks like:  to_ch_simplif1315'#  <:  ((α1316_1877'',) -> α1317_1878'')
//│             = [Function: to_ch_simplif]

// * Redefinition in the context of distrib, just for the record (still infers but doesn't check)
rec def to_ch_simplif n = s (to_ch_simplif n)
//│ to_ch_simplif: 'to_ch_simplif
//│   where
//│     'to_ch_simplif :> forall 'a, 'b. ('a -> (forall 'c. 'c -> (forall 'd, 'e, 'f. ('d -> 'f
//│   where
//│     'c <: 'e -> 'f
//│     'b <: 'c -> 'd -> 'e)))
//│   where
//│     'to_ch_simplif <: 'a -> 'b)
//│              = [Function: to_ch_simplif1]

:e // * Since the removal of "recursive definition hacks"
to_church_ty = to_ch_simplif
//│ 'to_ch_simplif
//│   where
//│     'to_ch_simplif :> forall 'a, 'b. ('a -> (forall 'c. 'c -> (forall 'd, 'e, 'f. ('d -> 'f
//│   where
//│     'c <: 'e -> 'f
//│     'b <: 'c -> 'd -> 'e)))
//│   where
//│     'to_ch_simplif <: 'a -> 'b)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition; a type annotation may be required
//│ ║  l.853: 	to_church_ty = to_ch_simplif
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  to_ch_simplif1904_1972'#  <:  ((α1905_1991',) -> α1906_1992')    TypeVariable  FunctionType
//│ ╙──  ... looks like:  to_ch_simplif1904'#  <:  ((α1905_1973'',) -> α1906_1974'')
//│             = [Function: to_ch_simplif1]

// * Still doesn't work (Same with the full definition)
:e
to_church_ty = to_ch_A1
//│ 'to_ch_A1
//│   where
//│     'to_ch_A1 :> int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e. (('b & 'e) -> ('b | 'c)
//│   where
//│     ChurchInt <: 'a -> 'e -> 'd
//│     'a <: 'd -> 'c)))
//│   where
//│     'to_ch_A1 <: int -> ChurchInt
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition; a type annotation may be required
//│ ║  l.874: 	to_church_ty = to_ch_A1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  to_ch_A11410_2026'#  <:  ((α1418_2047',) -> α1419_2048')    TypeVariable  FunctionType
//│ ╙──  ... looks like:  to_ch_A11410'#  <:  ((α1418_2027'',) -> α1419_2028'')
//│             = [Function: to_ch_A1]

// * Now works
to_church_ty = to_church_mix
//│ int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e. (('c & 'b) -> ('c | 'd)
//│   where
//│     'a <: 'e -> 'd
//│     error <: 'a -> 'b -> 'e)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_mix]



