:NoRecursiveTypes
:GeneralizeCurriedFunctions
:ConstrainedTypes
:DontDistributeForalls



type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ Defined type alias ChurchInt



// * === Explicitly Annotated ===


def zero: forall 'a. ('a -> 'a) -> ('a -> 'a)
def zero f x = x
//│ zero: ('a -> 'a) -> 'a -> 'a
//│     = <missing implementation>
//│ 'a -> (forall 'b. 'b -> 'b)
//│   <:  zero:
//│ ('a -> 'a) -> 'a -> 'a
//│     = [Function: zero]

def zero: ChurchInt
def zero f x = x
//│ zero: ChurchInt
//│     = <missing implementation>
//│ 'a -> (forall 'b. 'b -> 'b)
//│   <:  zero:
//│ ChurchInt
//│     = [Function: zero1]


def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ succ: (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = <missing implementation>

:e // * Since "sound extrusion"
def succ n f x = f (n f x)
//│ 'a -> (forall 'b. 'b -> (forall 'a, 'c, 'b, 'd, 'e, 'f. ('e -> 'c
//│   where
//│     'b <: 'f -> 'c
//│     'a <: 'b -> ('e -> 'f & 'd))))
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.40: 	def succ n f x = f (n f x)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.35: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                                           ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.35: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                                           ^^
//│ ╟── from quantified type variable:
//│ ║  l.35: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ╙──      	                  ^^
//│     = [Function: succ1]

def succ: ChurchInt -> ChurchInt
//│ succ: ChurchInt -> ChurchInt
//│     = <missing implementation>

:e // * Since "sound extrusion"
def succ n f x = f (n f x)
//│ 'a -> (forall 'b. 'b -> (forall 'c, 'd, 'e, 'a, 'f, 'b. ('d -> 'e
//│   where
//│     'a <: 'b -> ('d -> 'c & 'f)
//│     'b <: 'c -> 'e)))
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.66: 	def succ n f x = f (n f x)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                        ^^
//│     = [Function: succ2]


def succD: forall 'M. ChurchInt -> ('M -> 'M) -> ('M -> 'M)
def succD n f x = f (n f x)
//│ succD: ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│      = <missing implementation>
//│ 'a -> (forall 'b. 'b -> (forall 'c, 'b, 'd, 'e, 'f, 'a. ('c -> 'd
//│   where
//│     'a <: 'b -> ('c -> 'f & 'e)
//│     'b <: 'f -> 'd)))
//│   <:  succD:
//│ ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│      = [Function: succD]

succD = succ
//│ ChurchInt -> ChurchInt
//│   <:  succD:
//│ ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│      = [Function: succ2]

// * This does not hold without distrobutivity
:e
succ = succD
//│ ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.105: 	succ = succD
//│ ║         	^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── from quantified type variable:
//│ ║  l.85: 	def succD: forall 'M. ChurchInt -> ('M -> 'M) -> ('M -> 'M)
//│ ╙──      	                  ^^
//│     = [Function: succ2]



// * === Usages ===


n1 = succ zero
//│ n1: ChurchInt
//│   = [Function (anonymous)]

n2 = succ (succ zero)
//│ n2: ChurchInt
//│   = [Function (anonymous)]

n3 = succ (succ (succ zero))
//│ n3: ChurchInt
//│   = [Function (anonymous)]


wrap x = { x }
//│ wrap: 'a -> {x: 'a}
//│     = [Function: wrap]

n1w = n1 wrap
//│ n1w: 'N -> 'N
//│   where
//│     'N :> {x: 'N}
//│    = [Function (anonymous)]

n1w 0
//│ res: 'a
//│   where
//│     'a :> 0 | {x: 'a}
//│    = { x: 0 }

n1 wrap 0
//│ res: 'a
//│   where
//│     'a :> 0 | {x: 'a}
//│    = { x: 0 }

:e
res.x + 1
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.164: 	res.x + 1
//│ ║         	^^^^^
//│ ╟── integer literal of type `0` does not have field 'x'
//│ ║  l.157: 	n1 wrap 0
//│ ║         	        ^
//│ ╟── but it flows into reference with expected type `{x: ?x}`
//│ ║  l.164: 	res.x + 1
//│ ╙──       	^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.164: 	res.x + 1
//│ ║         	^^^^^^^
//│ ╟── record literal of type `{x: ?a}` is not an instance of type `int`
//│ ║  l.141: 	wrap x = { x }
//│ ║         	         ^^^^^
//│ ╟── but it flows into field selection with expected type `int`
//│ ║  l.164: 	res.x + 1
//│ ╙──       	^^^^^
//│ res: error
//│    = 1

n2 wrap 0
//│ res: 'a
//│   where
//│     'a :> 0 | {x: 'a}
//│    = { x: { x: 0 } }

:e
res.x.x + 1
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.193: 	res.x.x + 1
//│ ║         	^^^^^
//│ ╟── integer literal of type `0` does not have field 'x'
//│ ║  l.186: 	n2 wrap 0
//│ ║         	        ^
//│ ╟── but it flows into reference with expected type `{x: ?x}`
//│ ║  l.193: 	res.x.x + 1
//│ ╙──       	^^^
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.193: 	res.x.x + 1
//│ ║         	^^^^^^^
//│ ╟── integer literal of type `0` does not have field 'x'
//│ ║  l.186: 	n2 wrap 0
//│ ║         	        ^
//│ ╟── but it flows into field selection with expected type `{x: ?x}`
//│ ║  l.193: 	res.x.x + 1
//│ ╙──       	^^^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.193: 	res.x.x + 1
//│ ║         	^^^^^^^^^
//│ ╟── record literal of type `{x: ?a}` is not an instance of type `int`
//│ ║  l.141: 	wrap x = { x }
//│ ║         	         ^^^^^
//│ ╟── but it flows into field selection with expected type `int`
//│ ║  l.193: 	res.x.x + 1
//│ ╙──       	^^^^^^^
//│ res: error
//│    = 1


def wrap_ty: 'a -> {x: 'a}
//│ wrap_ty: 'a -> {x: 'a}
//│        = <missing implementation>

wrap_ty = wrap
//│ 'a -> {x: 'a}
//│   <:  wrap_ty:
//│ 'a -> {x: 'a}
//│        = [Function: wrap]

n1w = n1 wrap_ty
//│ n1w: 'N -> 'N
//│   where
//│     'N :> {x: 'N}
//│    = [Function (anonymous)]

n1w 0
//│ res: 'a
//│   where
//│     'a :> 0 | {x: 'a}
//│    = { x: 0 }

:e
res.x + 1
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.248: 	res.x + 1
//│ ║         	^^^^^
//│ ╟── integer literal of type `0` does not have field 'x'
//│ ║  l.241: 	n1w 0
//│ ║         	    ^
//│ ╟── but it flows into reference with expected type `{x: ?x}`
//│ ║  l.248: 	res.x + 1
//│ ╙──       	^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.248: 	res.x + 1
//│ ║         	^^^^^^^
//│ ╟── type `{x: ?a}` is not an instance of type `int`
//│ ║  l.225: 	def wrap_ty: 'a -> {x: 'a}
//│ ║         	                   ^^^^^^^
//│ ╟── but it flows into field selection with expected type `int`
//│ ║  l.248: 	res.x + 1
//│ ╙──       	^^^^^
//│ res: error
//│    = 1

  

// * === Unannotated (More Powerful) ===


def z f x = x
//│ z: 'a -> (forall 'b. 'b -> 'b)
//│  = [Function: z]

def s n f x = f (n f x)
//│ s: 'a -> (forall 'b. 'b -> (forall 'c, 'd, 'b, 'e, 'a, 'f. ('c -> 'd
//│   where
//│     'b <: 'f -> 'd
//│     'a <: 'b -> ('c -> 'f & 'e))))
//│  = [Function: s]

zero = z
//│ 'a -> (forall 'b. 'b -> 'b)
//│   <:  zero:
//│ ChurchInt
//│     = [Function: z]

:e // * Since "sound extrusion"
succ = s
//│ 'a -> (forall 'b. 'b -> (forall 'c, 'd, 'e, 'a, 'f, 'b. ('d -> 'e
//│   where
//│     'b <: 'c -> 'e
//│     'a <: 'b -> ('d -> 'c & 'f))))
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.293: 	succ = s
//│ ║         	^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                        ^^
//│     = [Function: s]

:stats
z: ChurchInt
//│ res: ChurchInt
//│    = [Function: z]
//│ constrain calls  : 15
//│ annoying  calls  : 0
//│ subtyping calls  : 0

:e // * Since "sound extrusion"
:stats
s: ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.321: 	s: ChurchInt -> ChurchInt
//│ ║         	^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                        ^^
//│ res: ChurchInt -> ChurchInt
//│    = [Function: s]
//│ constrain calls  : 52
//│ annoying  calls  : 0
//│ subtyping calls  : 0



// * === Usages ===


n1 = s z
//│ n1: 'a -> (forall 'b, 'c, 'a, 'd, 'e. ('b -> 'c
//│   where
//│     'a <: 'e -> 'c
//│     forall 'f. 'f -> (forall 'g. 'g -> 'g) <: 'a -> ('b -> 'e & 'd)))
//│   = [Function (anonymous)]

n2 = s (s z)
//│ n2: 'a -> (forall 'b, 'c, 'a, 'd, 'e. ('c -> 'e
//│   where
//│     'a <: 'd -> 'e
//│     forall 'f. 'f -> (forall 'g, 'f, 'h, 'i, 'j. ('i -> 'j
//│   where
//│     forall 'k. 'k -> (forall 'l. 'l -> 'l) <: 'f -> ('i -> 'h & 'g)
//│     'f <: 'h -> 'j)) <: 'a -> ('c -> 'd & 'b)))
//│   = [Function (anonymous)]

n3 = s (s (s z))
//│ n3: 'a -> (forall 'b, 'c, 'd, 'e, 'a. ('e -> 'b
//│   where
//│     'a <: 'd -> 'b
//│     forall 'f. 'f -> (forall 'g, 'h, 'i, 'j, 'f. ('j -> 'g
//│   where
//│     forall 'k. 'k -> (forall 'l, 'm, 'n, 'k, 'o. ('o -> 'n
//│   where
//│     forall 'p. 'p -> (forall 'q. 'q -> 'q) <: 'k -> ('o -> 'l & 'm)
//│     'k <: 'l -> 'n)) <: 'f -> ('j -> 'i & 'h)
//│     'f <: 'i -> 'g)) <: 'a -> ('e -> 'd & 'c)))
//│   = [Function (anonymous)]


wrap x = { x }
//│ wrap: 'a -> {x: 'a}
//│     = [Function: wrap1]

n1w = n1 wrap
//│ n1w: 'a -> 'b
//│   where
//│     forall 'c. 'c -> (forall 'd. 'd -> 'd) <: (forall 'e. 'e -> {x: 'e}) -> ('a -> 'f & 'g)
//│     forall 'e. 'e -> {x: 'e} <: 'f -> 'b
//│    = [Function (anonymous)]

n1w 0
//│ res: {x: 0}
//│    = { x: 0 }

n1 wrap 0
//│ res: {x: 0}
//│    = { x: 0 }

res.x + 1
//│ res: int
//│    = 1

n2 wrap 0
//│ res: {x: {x: 0}}
//│    = { x: { x: 0 } }

res.x.x + 1
//│ res: int
//│    = 1

n3 wrap 0
//│ res: {x: {x: {x: 0}}}
//│    = { x: { x: { x: 0 } } }

res.x.x.x + 1
//│ res: int
//│    = 1


def wrap_ty: 'a -> {x: 'a}
//│ wrap_ty: 'a -> {x: 'a}
//│        = <missing implementation>

wrap_ty = wrap
//│ 'a -> {x: 'a}
//│   <:  wrap_ty:
//│ 'a -> {x: 'a}
//│        = [Function: wrap1]

n1w = n1 wrap_ty
//│ n1w: 'b -> 'c
//│   where
//│     forall 'd. 'd -> (forall 'e. 'e -> 'e) <: (forall 'a. 'a -> {x: 'a}) -> ('b -> 'f & 'g)
//│     forall 'a. 'a -> {x: 'a} <: 'f -> 'c
//│    = [Function (anonymous)]

n1w 0
//│ res: {x: 0}
//│    = { x: 0 }

res.x + 1
//│ res: int
//│    = 1

n2 wrap_ty 0
//│ res: {x: {x: 0}}
//│    = { x: { x: 0 } }

res.x.x + 1
//│ res: int
//│    = 1

n3 wrap_ty 0
//│ res: {x: {x: {x: 0}}}
//│    = { x: { x: { x: 0 } } }

res.x.x.x + 1
//│ res: int
//│    = 1



// * === Other Usages ===


sz = s zero
//│ sz: 'a -> (forall 'b, 'c, 'a, 'd, 'e. ('d -> 'e
//│   where
//│     ChurchInt <: 'a -> ('d -> 'c & 'b)
//│     'a <: 'c -> 'e))
//│   = [Function (anonymous)]

:ns
sz
//│ res: forall 'a, 'b. 'a
//│   where
//│     'a :> forall 'c. 'c -> (forall 'd, 'e, 'f, 'g. ('e -> 'g
//│   where
//│     'b <: 'c -> 'd
//│     'c <: 'f -> 'g))
//│     'd <: 'e -> 'f
//│     'b :> ChurchInt
//│    = [Function (anonymous)]

sz: ChurchInt
//│ res: ChurchInt
//│    = [Function (anonymous)]

:e // * Since "sound extrusion"
s zero : ChurchInt
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.483: 	s zero : ChurchInt
//│ ║         	^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                        ^^
//│ res: ChurchInt
//│    = [Function (anonymous)]

// * Error delayed by inconsistent constrained types
// * Notice the unsatisfiable constraint `1 <: 'c -> 'b`
sz1 = sz 1
//│ sz1: 'a -> 'b
//│   where
//│     1 <: 'c -> 'b
//│     ChurchInt <: 1 -> ('a -> 'c & 'd)
//│    = [Function (anonymous)]

:ns
sz1
//│ res: forall 'a, 'b, 'c. 'a
//│   where
//│     'a :> forall 'd, 'e, 'f, 'g. ('g -> 'e
//│   where
//│     'b <: 'c -> 'f
//│     'c <: 'd -> 'e)
//│     'f <: 'g -> 'd
//│     'c :> 1
//│     'b :> ChurchInt
//│    = [Function (anonymous)]

:e  // * Since inconsistent constrained types (delayed error from above)
sz1 2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.519: 	sz1 2
//│ ║         	^^^^^
//│ ╟── integer literal of type `1` is not a function
//│ ║  l.498: 	sz1 = sz 1
//│ ║         	         ^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                            ^^^^^^^^^^
//│ res: error
//│ Runtime error:
//│   TypeError: f is not a function



// * === Conversions (Using Annotated Defs) ===


rec def to_church n =
  if n == 0 then zero
  else succ (to_church (n - 1))
//│ to_church: 'to_church
//│   where
//│     'to_church :> forall 'a, 'b, 'c, 'to_church, 'd. ((int & 'a) -> (ChurchInt | 'd)
//│   where
//│     'to_church <: (int | 'c) -> (ChurchInt & 'b))
//│          = [Function: to_church]

def to_church_ty: int -> ChurchInt
//│ to_church_ty: int -> ChurchInt
//│             = <missing implementation>

:e // * Since the removal of "recursive definition hacks"
to_church_ty = to_church
//│ 'to_church
//│   where
//│     'to_church :> forall 'a, 'b, 'c, 'to_church, 'd. ((int & 'a) -> (ChurchInt | 'd)
//│   where
//│     'to_church <: (int | 'c) -> (ChurchInt & 'b))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition; a type annotation may be required
//│ ║  l.553: 	to_church_ty = to_church
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  to_church1135_1181#  <:  ((α1143_1190,) -> α1144_1191)    TypeVariable  FunctionType
//│ ╙──  ... looks like:  to_church1135'#  <:  ((α1143_1182'',) -> α1144_1183'')
//│             = [Function: to_church]

// * Non-recursive def emulates annotated recursive def
def to_church_ty n =
  if n == 0 then zero
  else succ (to_church_ty (n - 1))
//│ (int & 'a) -> (ChurchInt | 'b)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_ty1]



// * === Conversions (Using Unannotated Defs) ===

rec def to_ch_s n =
  if n == 0 then z
  else s (to_ch_s (n - 1))
//│ to_ch_s: 'to_ch_s
//│   where
//│     'to_ch_s :> forall 'to_ch_s, 'a, 'b, 'c, 'd. ((int & 'b) -> (forall 'e, 'f, 'g. ('f & 'g) -> (forall 'g, 'h, 'i, 'j, 'd, 'k, 'l. (('l & 'k) -> ('l | 'h)
//│   where
//│     'g <: 'j -> 'h
//│     'd <: 'g -> ('k -> 'j & 'i))) | 'e)
//│   where
//│     'to_ch_s <: (int | 'a) -> ('c & 'd))
//│        = [Function: to_ch_s]

rec def to_ch n =
  if n == 0 then z
  else s (to_ch (n - 1))
//│ to_ch: 'to_ch
//│   where
//│     'to_ch :> forall 'a, 'b, 'c, 'd, 'to_ch. ((int & 'd) -> (forall 'e, 'f, 'g. ('f & 'g) -> (forall 'g, 'h, 'i, 'j, 'k, 'c, 'l. (('h & 'j) -> ('h | 'k)
//│   where
//│     'c <: 'g -> ('j -> 'l & 'i)
//│     'g <: 'l -> 'k)) | 'e)
//│   where
//│     'to_ch <: (int | 'a) -> ('b & 'c))
//│      = [Function: to_ch]

:e // * Needs distrib (see below)
to_church_ty = to_ch
//│ 'to_ch
//│   where
//│     'to_ch :> forall 'a, 'b, 'to_ch, 'c, 'd. ((int & 'a) -> (forall 'e, 'f, 'g. ('e & 'f) -> (forall 'h, 'i, 'j, 'f, 'k, 'l, 'd. (('h & 'j) -> ('h | 'k)
//│   where
//│     'd <: 'f -> ('j -> 'i & 'l)
//│     'f <: 'i -> 'k)) | 'g)
//│   where
//│     'to_ch <: (int | 'c) -> ('b & 'd))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition; a type annotation may be required
//│ ║  l.609: 	to_church_ty = to_ch
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  to_ch1282_1388#  <:  ((α1290_1409,) -> α1291_1410)    TypeVariable  FunctionType
//│ ╙──  ... looks like:  to_ch1282'#  <:  ((α1290_1389'',) -> α1291_1390'')
//│             = [Function: to_ch]

rec def to_ch_simplif n = s (to_ch_simplif n)
//│ to_ch_simplif: 'to_ch_simplif
//│   where
//│     'to_ch_simplif :> forall 'to_ch_simplif, 'a, 'b, 'c, 'd. ('d -> (forall 'e. 'e -> (forall 'e, 'f, 'a, 'g, 'h, 'i. ('i -> 'g
//│   where
//│     'a <: 'e -> ('i -> 'h & 'f)
//│     'e <: 'h -> 'g)) | 'c)
//│   where
//│     'to_ch_simplif <: 'd -> ('b & 'a))
//│              = [Function: to_ch_simplif]

:e
to_church_ty = to_ch_simplif
//│ 'to_ch_simplif
//│   where
//│     'to_ch_simplif :> forall 'a, 'b, 'to_ch_simplif, 'c, 'd. ('b -> (forall 'e. 'e -> (forall 'f, 'g, 'e, 'h, 'c, 'i. ('g -> 'h
//│   where
//│     'e <: 'f -> 'h
//│     'c <: 'e -> ('g -> 'f & 'i))) | 'a)
//│   where
//│     'to_ch_simplif <: 'b -> ('d & 'c))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition; a type annotation may be required
//│ ║  l.640: 	to_church_ty = to_ch_simplif
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  to_ch_simplif1419_1498#  <:  ((α1420_1517,) -> α1421_1518)    TypeVariable  FunctionType
//│ ╙──  ... looks like:  to_ch_simplif1419'#  <:  ((α1420_1499'',) -> α1421_1500'')
//│             = [Function: to_ch_simplif]


// * This annotation now helps (since removal of "recursive definition hacks")
rec def to_ch_A1 n =
  if n == 0 then z
  else s (to_ch_A1 (n - 1) : ChurchInt)
//│ to_ch_A1: 'to_ch_A1
//│   where
//│     'to_ch_A1 :> forall 'to_ch_A1, 'a, 'b, 'c. ((int & 'c) -> (forall 'd, 'e, 'f. ('d & 'e) -> (forall 'g, 'h, 'i, 'j, 'k, 'e, 'l. (('h & 'i) -> ('h | 'l)
//│   where
//│     ChurchInt | 'g <: 'e -> ('i -> 'j & 'k)
//│     'e <: 'j -> 'l)) | 'f)
//│   where
//│     'to_ch_A1 <: (int | 'a) -> (ChurchInt & 'b))
//│         = [Function: to_ch_A1]

// * But we can't check the corresponding type
:e
to_church_ty = to_ch_A1
//│ 'to_ch_A1
//│   where
//│     'to_ch_A1 :> forall 'to_ch_A1, 'a, 'b, 'c. ((int & 'c) -> (forall 'd, 'e, 'f. ('d & 'e) -> (forall 'g, 'e, 'h, 'i, 'j, 'k, 'l. (('i & 'j) -> ('i | 'k)
//│   where
//│     'e <: 'h -> 'k
//│     ChurchInt | 'l <: 'e -> ('j -> 'h & 'g))) | 'f)
//│   where
//│     'to_ch_A1 <: (int | 'a) -> (ChurchInt & 'b))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition; a type annotation may be required
//│ ║  l.676: 	to_church_ty = to_ch_A1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  to_ch_A11526_1632#  <:  ((α1534_1653,) -> α1535_1654)    TypeVariable  FunctionType
//│ ╙──  ... looks like:  to_ch_A11526'#  <:  ((α1534_1633'',) -> α1535_1634'')
//│             = [Function: to_ch_A1]

// * This annotation now helps too (since "recursive definition hacks" removal)
rec def to_ch_A2 n = (
    if n == 0 then z
    else s (to_ch_A2 (n - 1))
  ) : ChurchInt
//│ to_ch_A2: 'to_ch_A2
//│   where
//│     'to_ch_A2 :> forall 'a, 'b, 'to_ch_A2, 'c, 'd, 'e, 'f. ((int & 'c) -> ChurchInt
//│   where
//│     'to_ch_A2 <: (int | 'f) -> ((nothing -> anything | 'e) -> (anything -> nothing & 'd) & 'b & 'a))
//│         = [Function: to_ch_A2]

:e // * Since the removal of "recursive definition hacks"
to_church_ty = to_ch_A2
//│ 'to_ch_A2
//│   where
//│     'to_ch_A2 :> forall 'a, 'b, 'c, 'd, 'e, 'f, 'to_ch_A2. ((int & 'c) -> ChurchInt
//│   where
//│     'to_ch_A2 <: (int | 'a) -> ((nothing -> anything | 'b) -> (anything -> nothing & 'e) & 'f & 'd))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition; a type annotation may be required
//│ ║  l.708: 	to_church_ty = to_ch_A2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  to_ch_A21663_1756#  <:  ((α1671_1773,) -> α1672_1774)    TypeVariable  FunctionType
//│ ╙──  ... looks like:  to_ch_A21663'#  <:  ((α1671_1757'',) -> α1672_1758'')
//│             = [Function: to_ch_A2]


:e // * Since the removal of "recursive definition hacks"
// * Uses `to_church` as the rec call
def to_church_mix n =
  if n == 0 then z
  else s (to_church (n - 1))
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.729: 	  else s (to_church (n - 1))
//│ ║         	          ^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  to_church1135_1790''#  <:  ((α1143_1803'',) -> α1144_1804'')    TypeVariable  FunctionType
//│ ╙──  ... looks like:  to_church1135'#  <:  ((α1143_1795''',) -> α1144_1796''')
//│ to_church_mix: (int & 'a) -> (forall 'b, 'c, 'd. ('b & 'c) -> (forall 'e, 'f, 'g, 'h, 'c, 'i, 'j. (('g & 'f) -> ('g | 'e)
//│   where
//│     error | 'h <: 'c -> ('f -> 'j & 'i)
//│     'c <: 'j -> 'e)) | 'd)
//│              = [Function: to_church_mix]

to_church_ty = to_church_mix
//│ (int & 'a) -> (forall 'b, 'c, 'd. ('b & 'c) -> (forall 'e, 'c, 'f, 'g, 'h, 'i, 'j. (('h & 'g) -> ('h | 'j)
//│   where
//│     'c <: 'f -> 'j
//│     error | 'i <: 'c -> ('g -> 'f & 'e))) | 'd)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_mix]


// * It would seem we need to distribute back (in the other direction) here, but it works:
rec def to_chD n =
  succD (to_chD n)
//│ to_chD: 'to_chD
//│   where
//│     'to_chD :> forall 'a, 'b, 'to_chD, 'c, 'M. ('b -> (('M -> 'M) -> 'M -> 'M | 'a)
//│   where
//│     'to_chD <: 'b -> (ChurchInt & 'c))
//│       = [Function: to_chD]



// * === With Distributivity ===


:DistributeForalls


// * Now everything Just Works!


// * Now works
succ = s
//│ 'a -> (forall 'b. 'b -> (forall 'c, 'd, 'e, 'f, 'a, 'b. ('c -> 'f
//│   where
//│     'a <: 'b -> ('c -> 'd & 'e)
//│     'b <: 'd -> 'f)))
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│     = [Function: s]

// * Now works
succ = succD
//│ ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│     = [Function: succ2]

// * Now works
rec def to_chD n =
  succD (to_chD n)
//│ to_chD: 'to_chD
//│   where
//│     'to_chD :> forall 'to_chD, 'a, 'b. ('a -> (forall 'M, 'c. ('M -> 'M) -> 'M -> 'M | 'c)
//│   where
//│     'to_chD <: 'a -> (ChurchInt & 'b))
//│       = [Function: to_chD1]

:e // * Since the removal of "recursive definition hacks"
to_church_ty = to_ch
//│ 'to_ch
//│   where
//│     'to_ch :> forall 'to_ch, 'a, 'b, 'c, 'd. ((int & 'a) -> (forall 'e, 'f, 'g. ('f & 'g) -> (forall 'h, 'i, 'b, 'j, 'k, 'l, 'g. (('h & 'i) -> ('h | 'l)
//│   where
//│     'g <: 'j -> 'l
//│     'b <: 'g -> ('i -> 'j & 'k))) | 'e)
//│   where
//│     'to_ch <: (int | 'd) -> ('c & 'b))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition; a type annotation may be required
//│ ║  l.801: 	to_church_ty = to_ch
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  to_ch1282_2034'#  <:  ((α1290_2055',) -> α1291_2056')    TypeVariable  FunctionType
//│ ╙──  ... looks like:  to_ch1282'#  <:  ((α1290_2035'',) -> α1291_2036'')
//│             = [Function: to_ch]

:e // * Since the removal of "recursive definition hacks"
to_church_ty = to_ch_simplif
//│ 'to_ch_simplif
//│   where
//│     'to_ch_simplif :> forall 'a, 'to_ch_simplif, 'b, 'c, 'd. ('b -> (forall 'e. 'e -> (forall 'f, 'g, 'e, 'h, 'c, 'i. ('f -> 'g
//│   where
//│     'c <: 'e -> ('f -> 'i & 'h)
//│     'e <: 'i -> 'g)) | 'a)
//│   where
//│     'to_ch_simplif <: 'b -> ('d & 'c))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition; a type annotation may be required
//│ ║  l.821: 	to_church_ty = to_ch_simplif
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  to_ch_simplif1419_2096'#  <:  ((α1420_2115',) -> α1421_2116')    TypeVariable  FunctionType
//│ ╙──  ... looks like:  to_ch_simplif1419'#  <:  ((α1420_2097'',) -> α1421_2098'')
//│             = [Function: to_ch_simplif]

// * Redefinition in the context of distrib, just for the record (still infers but doesn't check)
rec def to_ch_simplif n = s (to_ch_simplif n)
//│ to_ch_simplif: 'to_ch_simplif
//│   where
//│     'to_ch_simplif :> forall 'to_ch_simplif, 'a, 'b, 'c, 'd. ('a -> (forall 'e. 'e -> (forall 'f, 'g, 'c, 'h, 'e, 'i. ('f -> 'h
//│   where
//│     'c <: 'e -> ('f -> 'g & 'i)
//│     'e <: 'g -> 'h)) | 'b)
//│   where
//│     'to_ch_simplif <: 'a -> ('d & 'c))
//│              = [Function: to_ch_simplif1]

:e // * Since the removal of "recursive definition hacks"
to_church_ty = to_ch_simplif
//│ 'to_ch_simplif
//│   where
//│     'to_ch_simplif :> forall 'a, 'b, 'to_ch_simplif, 'c, 'd. ('d -> (forall 'e. 'e -> (forall 'f, 'g, 'b, 'e, 'h, 'i. ('h -> 'i
//│   where
//│     'e <: 'f -> 'i
//│     'b <: 'e -> ('h -> 'f & 'g))) | 'c)
//│   where
//│     'to_ch_simplif <: 'd -> ('a & 'b))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition; a type annotation may be required
//│ ║  l.853: 	to_church_ty = to_ch_simplif
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  to_ch_simplif2124_2204'#  <:  ((α2125_2223',) -> α2126_2224')    TypeVariable  FunctionType
//│ ╙──  ... looks like:  to_ch_simplif2124'#  <:  ((α2125_2205'',) -> α2126_2206'')
//│             = [Function: to_ch_simplif1]

// * Still doesn't work (Same with the full definition)
:e
to_church_ty = to_ch_A1
//│ 'to_ch_A1
//│   where
//│     'to_ch_A1 :> forall 'to_ch_A1, 'a, 'b, 'c. ((int & 'c) -> (forall 'd, 'e, 'f. ('d & 'e) -> (forall 'e, 'g, 'h, 'i, 'j, 'k, 'l. (('g & 'l) -> ('g | 'i)
//│   where
//│     'e <: 'k -> 'i
//│     ChurchInt | 'h <: 'e -> ('l -> 'k & 'j))) | 'f)
//│   where
//│     'to_ch_A1 <: (int | 'a) -> (ChurchInt & 'b))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition; a type annotation may be required
//│ ║  l.874: 	to_church_ty = to_ch_A1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  to_ch_A11526_2272'#  <:  ((α1534_2293',) -> α1535_2294')    TypeVariable  FunctionType
//│ ╙──  ... looks like:  to_ch_A11526'#  <:  ((α1534_2273'',) -> α1535_2274'')
//│             = [Function: to_ch_A1]

// * Now works
to_church_ty = to_church_mix
//│ (int & 'a) -> (forall 'b, 'c, 'd. ('b & 'c) -> (forall 'e, 'f, 'g, 'h, 'i, 'c, 'j. (('e & 'g) -> ('e | 'j)
//│   where
//│     error | 'h <: 'c -> ('g -> 'f & 'i)
//│     'c <: 'f -> 'j)) | 'd)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_mix]



