:NoRecursiveTypes
:GeneralizeCurriedFunctions
:ConstrainedTypes
:DontDistributeForalls



type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ Defined type alias ChurchInt



// * === Explicitly Annotated ===


def zero: forall 'a. ('a -> 'a) -> ('a -> 'a)
def zero f x = x
//│ zero: ('a -> 'a) -> 'a -> 'a
//│     = <missing implementation>
//│ 'a -> (forall 'b. 'b -> 'b)
//│   <:  zero:
//│ ('a -> 'a) -> 'a -> 'a
//│     = [Function: zero]

def zero: ChurchInt
def zero f x = x
//│ zero: ChurchInt
//│     = <missing implementation>
//│ 'a -> (forall 'b. 'b -> 'b)
//│   <:  zero:
//│ ChurchInt
//│     = [Function: zero1]


def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
def succ n f x = f (n f x)
//│ succ: (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = <missing implementation>
//│ 'a -> (forall 'b. 'b -> (forall 'a, 'c, 'b, 'd, 'e, 'f. ('e -> 'c
//│   where
//│     'b <: 'f -> 'c
//│     'a <: 'b -> ('e -> 'f & 'd))))
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.36: 	def succ n f x = f (n f x)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.35: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                                           ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.35: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                                           ^^
//│ ╟── from quantified type variable:
//│ ║  l.35: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ╙──      	                  ^^
//│     = [Function: succ1]

def succ: ChurchInt -> ChurchInt
def succ n f x = f (n f x)
//│ succ: ChurchInt -> ChurchInt
//│     = <missing implementation>
//│ 'a -> (forall 'b. 'b -> (forall 'c, 'd, 'e, 'a, 'f, 'b. ('d -> 'e
//│   where
//│     'a <: 'b -> ('d -> 'c & 'f)
//│     'b <: 'c -> 'e)))
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.60: 	def succ n f x = f (n f x)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                        ^^
//│     = [Function: succ2]


def succD: forall 'M. ChurchInt -> ('M -> 'M) -> ('M -> 'M)
def succD n f x = f (n f x)
//│ succD: ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│      = <missing implementation>
//│ 'a -> (forall 'b. 'b -> (forall 'c, 'b, 'd, 'e, 'f, 'a. ('c -> 'd
//│   where
//│     'a <: 'b -> ('c -> 'f & 'e)
//│     'b <: 'f -> 'd)))
//│   <:  succD:
//│ ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│      = [Function: succD]

succD = succ
//│ ChurchInt -> ChurchInt
//│   <:  succD:
//│ ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│      = [Function: succ2]

// * This does not hold without distrobutivity
:e
succ = succD
//│ ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.101: 	succ = succD
//│ ║         	^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── from quantified type variable:
//│ ║  l.81: 	def succD: forall 'M. ChurchInt -> ('M -> 'M) -> ('M -> 'M)
//│ ╙──      	                  ^^
//│     = [Function: succ2]



// * === Usages ===


n1 = succ zero
//│ n1: ChurchInt
//│   = [Function (anonymous)]

n2 = succ (succ zero)
//│ n2: ChurchInt
//│   = [Function (anonymous)]

n3 = succ (succ (succ zero))
//│ n3: ChurchInt
//│   = [Function (anonymous)]


wrap x = { x }
//│ wrap: 'a -> {x: 'a}
//│     = [Function: wrap]

n1w = n1 wrap
//│ n1w: 'N -> 'N
//│   where
//│     'N :> {x: 'N}
//│    = [Function (anonymous)]

n1w 0
//│ res: 'a
//│   where
//│     'a :> 0 | {x: 'a}
//│    = { x: 0 }

n1 wrap 0
//│ res: 'a
//│   where
//│     'a :> 0 | {x: 'a}
//│    = { x: 0 }

:e
res.x + 1
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.160: 	res.x + 1
//│ ║         	^^^^^
//│ ╟── integer literal of type `0` does not have field 'x'
//│ ║  l.153: 	n1 wrap 0
//│ ║         	        ^
//│ ╟── but it flows into reference with expected type `{x: ?x}`
//│ ║  l.160: 	res.x + 1
//│ ╙──       	^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.160: 	res.x + 1
//│ ║         	^^^^^^^
//│ ╟── record literal of type `{x: ?a}` is not an instance of type `int`
//│ ║  l.137: 	wrap x = { x }
//│ ║         	         ^^^^^
//│ ╟── but it flows into field selection with expected type `int`
//│ ║  l.160: 	res.x + 1
//│ ╙──       	^^^^^
//│ res: error
//│    = 1

n2 wrap 0
//│ res: 'a
//│   where
//│     'a :> 0 | {x: 'a}
//│    = { x: { x: 0 } }

:e
res.x.x + 1
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.189: 	res.x.x + 1
//│ ║         	^^^^^
//│ ╟── integer literal of type `0` does not have field 'x'
//│ ║  l.182: 	n2 wrap 0
//│ ║         	        ^
//│ ╟── but it flows into reference with expected type `{x: ?x}`
//│ ║  l.189: 	res.x.x + 1
//│ ╙──       	^^^
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.189: 	res.x.x + 1
//│ ║         	^^^^^^^
//│ ╟── integer literal of type `0` does not have field 'x'
//│ ║  l.182: 	n2 wrap 0
//│ ║         	        ^
//│ ╟── but it flows into field selection with expected type `{x: ?x}`
//│ ║  l.189: 	res.x.x + 1
//│ ╙──       	^^^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.189: 	res.x.x + 1
//│ ║         	^^^^^^^^^
//│ ╟── record literal of type `{x: ?a}` is not an instance of type `int`
//│ ║  l.137: 	wrap x = { x }
//│ ║         	         ^^^^^
//│ ╟── but it flows into field selection with expected type `int`
//│ ║  l.189: 	res.x.x + 1
//│ ╙──       	^^^^^^^
//│ res: error
//│    = 1


def wrap_ty: 'a -> {x: 'a}
//│ wrap_ty: 'a -> {x: 'a}
//│        = <missing implementation>

wrap_ty = wrap
//│ 'a -> {x: 'a}
//│   <:  wrap_ty:
//│ 'a -> {x: 'a}
//│        = [Function: wrap]

n1w = n1 wrap_ty
//│ n1w: 'N -> 'N
//│   where
//│     'N :> {x: 'N}
//│    = [Function (anonymous)]

n1w 0
//│ res: 'a
//│   where
//│     'a :> 0 | {x: 'a}
//│    = { x: 0 }

:e
res.x + 1
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.244: 	res.x + 1
//│ ║         	^^^^^
//│ ╟── integer literal of type `0` does not have field 'x'
//│ ║  l.237: 	n1w 0
//│ ║         	    ^
//│ ╟── but it flows into reference with expected type `{x: ?x}`
//│ ║  l.244: 	res.x + 1
//│ ╙──       	^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.244: 	res.x + 1
//│ ║         	^^^^^^^
//│ ╟── type `{x: ?a}` is not an instance of type `int`
//│ ║  l.221: 	def wrap_ty: 'a -> {x: 'a}
//│ ║         	                   ^^^^^^^
//│ ╟── but it flows into field selection with expected type `int`
//│ ║  l.244: 	res.x + 1
//│ ╙──       	^^^^^
//│ res: error
//│    = 1

  

// * === Unannotated (More Powerful) ===


def z f x = x
//│ z: 'a -> (forall 'b. 'b -> 'b)
//│  = [Function: z]

def s n f x = f (n f x)
//│ s: 'a -> (forall 'b. 'b -> (forall 'c, 'd, 'b, 'e, 'a, 'f. ('c -> 'd
//│   where
//│     'b <: 'f -> 'd
//│     'a <: 'b -> ('c -> 'f & 'e))))
//│  = [Function: s]

zero = z
//│ 'a -> (forall 'b. 'b -> 'b)
//│   <:  zero:
//│ ChurchInt
//│     = [Function: z]

succ = s
//│ 'a -> (forall 'b. 'b -> (forall 'c, 'd, 'e, 'a, 'f, 'b. ('d -> 'e
//│   where
//│     'b <: 'c -> 'e
//│     'a <: 'b -> ('d -> 'c & 'f))))
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.288: 	succ = s
//│ ║         	^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                        ^^
//│     = [Function: s]

:stats
z: ChurchInt
//│ res: ChurchInt
//│    = [Function: z]
//│ constrain calls  : 15
//│ annoying  calls  : 0
//│ subtyping calls  : 0

:stats
s: ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.315: 	s: ChurchInt -> ChurchInt
//│ ║         	^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                        ^^
//│ res: ChurchInt -> ChurchInt
//│    = [Function: s]
//│ constrain calls  : 52
//│ annoying  calls  : 0
//│ subtyping calls  : 0



// * === Usages ===


n1 = s z
//│ n1: 'a -> (forall 'b, 'c, 'a, 'd, 'e. ('b -> 'c
//│   where
//│     'a <: 'e -> 'c
//│     forall 'f. 'f -> (forall 'g. 'g -> 'g) <: 'a -> ('b -> 'e & 'd)))
//│   = [Function (anonymous)]

n2 = s (s z)
//│ n2: 'a -> (forall 'b, 'c, 'a, 'd, 'e. ('c -> 'e
//│   where
//│     'a <: 'd -> 'e
//│     forall 'f. 'f -> (forall 'g, 'f, 'h, 'i, 'j. ('i -> 'j
//│   where
//│     forall 'k. 'k -> (forall 'l. 'l -> 'l) <: 'f -> ('i -> 'h & 'g)
//│     'f <: 'h -> 'j)) <: 'a -> ('c -> 'd & 'b)))
//│   = [Function (anonymous)]

n3 = s (s (s z))
//│ n3: 'a -> (forall 'b, 'c, 'd, 'e, 'a. ('e -> 'b
//│   where
//│     'a <: 'd -> 'b
//│     forall 'f. 'f -> (forall 'g, 'h, 'i, 'j, 'f. ('j -> 'g
//│   where
//│     forall 'k. 'k -> (forall 'l, 'm, 'n, 'k, 'o. ('o -> 'n
//│   where
//│     forall 'p. 'p -> (forall 'q. 'q -> 'q) <: 'k -> ('o -> 'l & 'm)
//│     'k <: 'l -> 'n)) <: 'f -> ('j -> 'i & 'h)
//│     'f <: 'i -> 'g)) <: 'a -> ('e -> 'd & 'c)))
//│   = [Function (anonymous)]


wrap x = { x }
//│ wrap: 'a -> {x: 'a}
//│     = [Function: wrap1]

n1w = n1 wrap
//│ n1w: 'a -> 'b
//│   where
//│     forall 'c. 'c -> (forall 'd. 'd -> 'd) <: (forall 'e. 'e -> {x: 'e}) -> ('a -> 'f & 'g)
//│     forall 'e. 'e -> {x: 'e} <: 'f -> 'b
//│    = [Function (anonymous)]

n1w 0
//│ res: {x: 0}
//│    = { x: 0 }

n1 wrap 0
//│ res: {x: 0}
//│    = { x: 0 }

res.x + 1
//│ res: int
//│    = 1

n2 wrap 0
//│ res: {x: {x: 0}}
//│    = { x: { x: 0 } }

res.x.x + 1
//│ res: int
//│    = 1

n3 wrap 0
//│ res: {x: {x: {x: 0}}}
//│    = { x: { x: { x: 0 } } }

res.x.x.x + 1
//│ res: int
//│    = 1


def wrap_ty: 'a -> {x: 'a}
//│ wrap_ty: 'a -> {x: 'a}
//│        = <missing implementation>

wrap_ty = wrap
//│ 'a -> {x: 'a}
//│   <:  wrap_ty:
//│ 'a -> {x: 'a}
//│        = [Function: wrap1]

n1w = n1 wrap_ty
//│ n1w: 'b -> 'c
//│   where
//│     forall 'd. 'd -> (forall 'e. 'e -> 'e) <: (forall 'a. 'a -> {x: 'a}) -> ('b -> 'f & 'g)
//│     forall 'a. 'a -> {x: 'a} <: 'f -> 'c
//│    = [Function (anonymous)]

n1w 0
//│ res: {x: 0}
//│    = { x: 0 }

res.x + 1
//│ res: int
//│    = 1

n2 wrap_ty 0
//│ res: {x: {x: 0}}
//│    = { x: { x: 0 } }

res.x.x + 1
//│ res: int
//│    = 1

n3 wrap_ty 0
//│ res: {x: {x: {x: 0}}}
//│    = { x: { x: { x: 0 } } }

res.x.x.x + 1
//│ res: int
//│    = 1



// * === Other Usages ===


sz = s zero
//│ sz: 'a -> (forall 'b, 'c, 'a, 'd, 'e. ('d -> 'e
//│   where
//│     ChurchInt <: 'a -> ('d -> 'c & 'b)
//│     'a <: 'c -> 'e))
//│   = [Function (anonymous)]

:ns
sz
//│ res: forall 'a, 'b. 'a
//│   where
//│     'a :> forall 'c. 'c -> (forall 'd, 'e, 'f, 'g. ('e -> 'g
//│   where
//│     'b <: 'c -> 'd
//│     'c <: 'f -> 'g))
//│     'd <: 'e -> 'f
//│     'b :> ChurchInt
//│    = [Function (anonymous)]

sz: ChurchInt
s zero : ChurchInt
//│ res: ChurchInt
//│    = [Function (anonymous)]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.473: 	s zero : ChurchInt
//│ ║         	^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                        ^^
//│ res: ChurchInt
//│    = [Function (anonymous)]

// * Error delayed by inconsistent constrained types
// * Notice the unsatisfiable constraint `1 <: 'c -> 'b`
sz1 = sz 1
//│ sz1: 'a -> 'b
//│   where
//│     1 <: 'c -> 'b
//│     ChurchInt <: 1 -> ('a -> 'c & 'd)
//│    = [Function (anonymous)]

:ns
sz1
//│ res: forall 'a, 'b, 'c. 'a
//│   where
//│     'a :> forall 'd, 'e, 'f, 'g. ('g -> 'e
//│   where
//│     'b <: 'c -> 'f
//│     'c <: 'd -> 'e)
//│     'f <: 'g -> 'd
//│     'c :> 1
//│     'b :> ChurchInt
//│    = [Function (anonymous)]

:e  // * Since inconsistent constrained types (delayed error from above)
sz1 2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.511: 	sz1 2
//│ ║         	^^^^^
//│ ╟── integer literal of type `1` is not a function
//│ ║  l.490: 	sz1 = sz 1
//│ ║         	         ^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                            ^^^^^^^^^^
//│ res: error
//│ Runtime error:
//│   TypeError: f is not a function



// * === Conversions (Using Annotated Defs) ===


rec def to_church n =
  if n == 0 then zero
  else succ (to_church (n - 1))
//│ to_church: int -> ChurchInt
//│          = [Function: to_church]

def to_church_ty: int -> ChurchInt
//│ to_church_ty: int -> ChurchInt
//│             = <missing implementation>

to_church_ty = to_church
//│ int -> ChurchInt
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church]

// * Non-recursive def emulates annotated recursive def
def to_church_ty n =
  if n == 0 then zero
  else succ (to_church_ty (n - 1))
//│ (int & 'a) -> (ChurchInt | 'b)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_ty1]



// * === Conversions (Using Unannotated Defs) ===

rec def to_ch_s n =
  if n == 0 then z
  else s (to_ch_s (n - 1))
//│ to_ch_s: int -> (forall 'a, 'b, 'c, 'd. (('e | 'a) -> 'b & 'c & 'd & 'e -> 'e) -> (forall 'b, 'f, 'g, 'h. ('f & 'g & 'e) -> ('b | 'f | 'h)))
//│        = [Function: to_ch_s]

rec def to_ch n =
  if n == 0 then z
  else s (to_ch (n - 1))
//│ to_ch: int -> (forall 'a, 'b, 'c, 'd. (('e | 'd) -> 'a & 'b & 'c & 'e -> 'e) -> (forall 'a, 'f, 'g, 'h. ('f & 'g & 'e) -> ('a | 'f | 'h)))
//│      = [Function: to_ch]

:e // * Needs distrib (see below)
to_church_ty = to_ch
//│ int -> (forall 'a, 'b, 'c, 'd. (('e | 'a) -> 'b & 'c & 'd & 'e -> 'e) -> (forall 'b, 'f, 'g, 'h. ('f & 'g & 'e) -> ('b | 'f | 'h)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.572: 	to_church_ty = to_ch
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── from application:
//│ ║  l.275: 	def s n f x = f (n f x)
//│ ╙──       	              ^^^^^^^^^
//│             = [Function: to_ch]

rec def to_ch_simplif n = s (to_ch_simplif n)
//│ to_ch_simplif: anything -> (forall 'a, 'b, 'c. (('d | 'a) -> 'b & 'c & 'd -> 'd) -> (forall 'e, 'f. 'e -> ('b | 'f)))
//│              = [Function: to_ch_simplif]

:e
to_church_ty = to_ch_simplif
//│ anything -> (forall 'a, 'b, 'c. (('d | 'a) -> 'b & 'c & 'd -> 'd) -> (forall 'e, 'f. 'e -> ('b | 'f)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.595: 	to_church_ty = to_ch_simplif
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── from application:
//│ ║  l.275: 	def s n f x = f (n f x)
//│ ╙──       	              ^^^^^^^^^
//│             = [Function: to_ch_simplif]


// * This annotation here doesn't help
:e
rec def to_ch_A1 n =
  if n == 0 then z
  else s (to_ch_A1 (n - 1) : ChurchInt)
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.616: 	rec def to_ch_A1 n =
//│ ║         	                 ^^^
//│ ║  l.617: 	  if n == 0 then z
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ║  l.618: 	  else s (to_ch_A1 (n - 1) : ChurchInt)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                        ^^
//│ to_ch_A1: int -> (forall 'a, 'b, 'c, 'd. ('a -> 'b & anything -> nothing & 'c & 'd) -> (forall 'b, 'e, 'f, 'g. ('e & 'f) -> ('b | 'e | 'g)))
//│         = [Function: to_ch_A1]

// * nope
// to_church_ty = to_ch_A1

// * Now this annotation works, as expected
rec def to_ch_A2 n = (
    if n == 0 then z
    else s (to_ch_A2 (n - 1))
  ) : ChurchInt
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.639: 	rec def to_ch_A2 n = (
//│ ║         	                 ^^^^^
//│ ║  l.640: 	    if n == 0 then z
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.641: 	    else s (to_ch_A2 (n - 1))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.642: 	  ) : ChurchInt
//│ ║         	^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                        ^^
//│ to_ch_A2: int -> ChurchInt
//│         = [Function: to_ch_A2]

to_church_ty = to_ch_A2
//│ int -> ChurchInt
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_ch_A2]


// * Uses `to_church` as the rec call
def to_church_mix n =
  if n == 0 then z
  else s (to_church (n - 1))
//│ to_church_mix: (int & 'a) -> (forall 'b, 'c, 'd. ('b & 'c) -> (forall 'c, 'e, 'f, 'g, 'h, 'i, 'j. (('i & 'j) -> ('i | 'e)
//│   where
//│     'c <: 'h -> 'e
//│     ChurchInt | 'f <: 'c -> ('j -> 'h & 'g))) | 'd)
//│              = [Function: to_church_mix]

to_church_ty = to_church_mix
//│ (int & 'a) -> (forall 'b, 'c, 'd. ('b & 'c) -> (forall 'e, 'f, 'g, 'h, 'i, 'c, 'j. (('f & 'g) -> ('f | 'h)
//│   where
//│     ChurchInt | 'e <: 'c -> ('g -> 'i & 'j)
//│     'c <: 'i -> 'h)) | 'd)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.678: 	to_church_ty = to_church_mix
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                        ^^
//│             = [Function: to_church_mix]


:e // * Needs to distribute back (in the other direction) here:
rec def to_chD n =
  succD (to_chD n)
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.698: 	rec def to_chD n =
//│ ║         	               ^^^
//│ ║  l.699: 	  succD (to_chD n)
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── from quantified type variable:
//│ ║  l.81: 	def succD: forall 'M. ChurchInt -> ('M -> 'M) -> ('M -> 'M)
//│ ╙──      	                  ^^
//│ to_chD: anything -> (anything -> nothing) -> nothing -> anything
//│       = [Function: to_chD]



// * === With Distributivity ===


:DistributeForalls


// * Now everything Just Works!


// * Still works, as before
succ = s
//│ 'a -> (forall 'b. 'b -> (forall 'c, 'd, 'e, 'b, 'f, 'a. ('d -> 'e
//│   where
//│     'b <: 'f -> 'e
//│     'a <: 'b -> ('d -> 'f & 'c))))
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│     = [Function: s]

// * Now works
succ = succD
//│ ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│     = [Function: succ2]

// * Now works
rec def to_chD n =
  succD (to_chD n)
//│ to_chD: anything -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│       = [Function: to_chD1]

// * Now works
to_church_ty = to_ch
//│ int -> (forall 'a, 'b, 'c, 'd. (('e | 'a) -> 'b & 'c & 'd & 'e -> 'e) -> (forall 'b, 'f, 'g, 'h. ('f & 'g & 'e) -> ('b | 'f | 'h)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_ch]

// * Now works
to_church_ty = to_ch_simplif
//│ anything -> (forall 'a, 'b, 'c. (('d | 'a) -> 'b & 'c & 'd -> 'd) -> (forall 'e, 'f. 'e -> ('b | 'f)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_ch_simplif]

// * Redefinition in the context of distrib, just for the record (still works)
rec def to_ch_simplif n = s (to_ch_simplif n)
to_church_ty = to_ch_simplif
//│ to_ch_simplif: anything -> (forall 'a, 'b, 'c. ((forall 'd. 'a | 'e | 'd) -> 'b & 'c & (forall 'd. 'e | 'd) -> 'e) -> (forall 'f, 'g. 'g -> ('b | 'f)))
//│              = [Function: to_ch_simplif1]
//│ anything -> (forall 'a, 'b, 'c. ((forall 'd. 'a | 'e | 'd) -> 'b & 'c & (forall 'd. 'e | 'd) -> 'e) -> (forall 'f, 'g. 'g -> ('b | 'f)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_ch_simplif1]

// * Still doesn't work (Same with the full definition)
:e
to_church_ty = to_ch_A1
//│ int -> (forall 'a, 'b, 'c, 'd. ('a -> 'b & anything -> nothing & 'c & 'd) -> (forall 'b, 'e, 'f, 'g. ('e & 'f) -> ('b | 'e | 'g)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.777: 	to_church_ty = to_ch_A1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` is not an instance of type `'N_2112`
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║       	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.8: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──     	                        ^^
//│             = [Function: to_ch_A1]

// * Still works
to_church_ty = to_church_mix
//│ (int & 'a) -> (forall 'b, 'c, 'd. ('b & 'c) -> (forall 'e, 'f, 'g, 'h, 'c, 'i, 'j. (('h & 'i) -> ('h | 'j)
//│   where
//│     'c <: 'e -> 'j
//│     ChurchInt | 'g <: 'c -> ('i -> 'e & 'f))) | 'd)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_mix]


