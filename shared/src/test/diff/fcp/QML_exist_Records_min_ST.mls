// * This is a further minimization of the error that happens in `QML_exist_Records_min_CT`,
// *  this time without constrained types, which makes a related error appear earlier.


:NoRecursiveTypes
:NoConstrainedTypes
// :DistributeForalls
// :GeneralizeArguments


type ArraysRep = { fold: forall 'b. 'b -> 'b }
//│ Defined type alias ArraysRep

type Arrays = (ArraysRep -> 'r) -> 'r
//│ Defined type alias Arrays

// :d
def stepImpl arrImpl = { fold = fun f ->  arrImpl.fold f }
//│ stepImpl: {fold: 'a -> 'b} -> {fold: 'a -> 'b}
//│         = [Function: stepImpl]

// :d
def stepImpl2 arr = arr stepImpl
//│ stepImpl2: ((forall 'a 'b. {fold: 'a -> 'b} -> {fold: 'a -> 'b}) -> 'c) -> 'c
//│          = [Function: stepImpl2]

def step: Arrays -> Arrays
//│ step: Arrays -> Arrays
//│     = <missing implementation>

// :d
:e
def step arr f = f (stepImpl2 arr)
//│ ((forall 'a 'b. {fold: 'a -> 'b} -> {fold: 'a -> 'b}) -> 'c) -> ('c -> 'd) -> 'd
//│   <:  step:
//│ Arrays -> Arrays
//│ ╔══[ERROR] Type error in def definition
//│ ║  l.33: 	def step arr f = f (stepImpl2 arr)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type variable `'b` leaks out of its scope
//│ ║  l.11: 	type ArraysRep = { fold: forall 'b. 'b -> 'b }
//│ ║        	                                    ^^
//│ ╟── back into type variable `'b`
//│ ║  l.11: 	type ArraysRep = { fold: forall 'b. 'b -> 'b }
//│ ║        	                                          ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this applied expression:
//│ ║  l.33: 	def step arr f = f (stepImpl2 arr)
//│ ║        	                 ^
//│ ╟── • this application:
//│ ║  l.23: 	def stepImpl2 arr = arr stepImpl
//│ ║        	                    ^^^^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.33: 	def step arr f = f (stepImpl2 arr)
//│ ║        	                    ^^^^^^^^^^^^^
//│ ╟── • this application:
//│ ║  l.18: 	def stepImpl arrImpl = { fold = fun f ->  arrImpl.fold f }
//│ ╙──      	                                          ^^^^^^^^^^^^^^
//│     = [Function: step]

