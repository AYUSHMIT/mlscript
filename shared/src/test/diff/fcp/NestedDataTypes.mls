:NoRecursiveTypes
:GeneralizeCurriedFunctions
:ConstrainedTypes // * The test takes too much time without this(!!)

// * Perfect Trees (https://www.cis.upenn.edu/~plclub/blog/2020-12-04-nested-datatypes/)

// data NTree (a :: Type) =
//     NLeaf a
//   | NNode (NTree (Two a))


type Two[A] = (A, A)
//│ Defined type alias Two[+A]

def mapTwo f ((a, b)) = (f a, f b)
//│ mapTwo: 'a -> (('b, 'c,) -> ('d, 'e,)
//│   where
//│     'a <: 'b -> 'd & 'c -> 'e)
//│       = [Function: mapTwo]

class Leaf[A]: { value: A }
//│ Defined class Leaf[+A]

:e
class Node[A]: { subTree: PerfectTree[Two[A]] }
type PerfectTree[A] = Leaf[A] | Node[A]
//│ ╔══[ERROR] Type definition is not regular: it occurs within itself as Node[Two['A]], but is defined as Node['A]
//│ ║  l.25: 	class Node[A]: { subTree: PerfectTree[Two[A]] }
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type definition is not regular: it occurs within itself as PerfectTree[Two['A]], but is defined as PerfectTree['A]
//│ ║  l.26: 	type PerfectTree[A] = Leaf[A] | Node[A]
//│ ╙──      	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

:IrregularTypes

class Node[A]: { subTree: PerfectTree[Two[A]] }
type PerfectTree[A] = Leaf[A] | Node[A]
//│ Defined class Node[+A]
//│ Defined type alias PerfectTree[+A]


n1 = Leaf { value = 1 }
//│ n1: Leaf[1]
//│   = Leaf { value: 1 }
n1: PerfectTree[int]
//│ res: PerfectTree[int]
//│    = Leaf { value: 1 }

n2 = Node { subTree = Leaf { value = (1, 2) } }
//│ n2: Node[1 | 2] with {subTree: Leaf[(1, 2,)]}
//│   = Node1 { subTree: Leaf { value: [ 1, 2 ] } }
n2: PerfectTree[int]
//│ res: PerfectTree[int]
//│    = Node1 { subTree: Leaf { value: [ 1, 2 ] } }

n4 = Node { subTree = Node { subTree = Leaf { value = ((1, 2), (3, 4)) } } }
//│ n4: Node[1 | 2 | 3 | 4] with {subTree: Node[(1 | 3, 2 | 4,)] with {subTree: Leaf[((1, 2,), (3, 4,),)]}}
//│   = Node1 { subTree: Node1 { subTree: Leaf { value: [Array] } } }
n4: PerfectTree[int]
//│ res: PerfectTree[int]
//│    = Node1 { subTree: Node1 { subTree: Leaf { value: [Array] } } }


:e
// * Works since the removal of "recursive definition hacks"
rec def map f tree = case tree of {
  | Leaf -> Leaf { value = f tree.value }
  | Node -> Node { subTree = map (mapTwo f) tree.subTree }
  }
//│ ╔══[ERROR] Inferred recursive type: 'map
//│   where
//│     'map :> forall 'subTree, 'a, 'value, 'b, 'subTree0, 'A, 'value0. 'a -> (((Leaf[?] with {value: 'value}) | (Node[?] with {subTree: 'subTree0})) -> (Leaf['value0] | (Node['A] with {subTree: 'subTree}))
//│   where
//│     'a <: 'value -> 'value0
//│     'map <: (forall 'c, 'd, 'e, 'f. (('d, 'f,) -> ('e, 'c,)
//│   where
//│     'a | 'b <: 'd -> 'e & 'f -> 'c)) -> 'subTree0 -> (PerfectTree[Two['A]] & 'subTree))
//│ ╙──
//│ map: 'map
//│   where
//│     'map :> forall 'value, 'value0, 'A, 'subTree, 'subTree0, 'a. 'a -> (((Leaf[?] with {value: 'value0}) | (Node[?] with {subTree: 'subTree0})) -> (Leaf['value] | (Node['A] with {subTree: 'subTree}))
//│   where
//│     'a <: 'value0 -> 'value
//│     'map <: (forall 'b, 'c, 'd, 'e. (('b, 'd,) -> ('c, 'e,)
//│   where
//│     'a <: 'b -> 'c & 'd -> 'e)) -> 'subTree0 -> (PerfectTree[Two['A]] & 'subTree))
//│    = [Function: map]

:e
map succ n4
//│ ╔══[ERROR] Inferred recursive type: 'map
//│   where
//│     'map :> forall 'value, 'a, 'subTree, 'b, 'subTree0, 'A, 'value0. 'a -> (((Leaf[?] with {value: 'value}) | (Node[?] with {subTree: 'subTree0})) -> (Leaf['value0] | (Node['A] with {subTree: 'subTree}))
//│   where
//│     'map <: (forall 'c, 'd, 'e, 'f. (('d, 'f,) -> ('e, 'c,)
//│   where
//│     'a | 'b <: 'd -> 'e & 'f -> 'c)) -> 'subTree0 -> (PerfectTree[Two['A]] & 'subTree)
//│     'a <: 'value -> 'value0)
//│ ╙──
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?subTree, ?A, ?subTree0, ?A0, ?b, ?A1, ?value. ?b) -> ?c` took too many steps and ran out of fuel (5000)
//│ ║  l.90: 	map succ n4
//│ ║        	^^^^^^^^^^^
//│ ╟──  + ‹∀ 3. {((α12_359'''', α13_361'''',) -> (α14_360'''', α15_362'''',)) where: α11_358 <: ((α12_359'''',) -> α14_360''''), α11_358 <: ((α13_361'''',) -> α15_362'''')}›
//│ ╟──  + α112_373
//│ ╟──  + α112_373
//│ ╟──  + α112_373
//│ ║  l.68: 	  | Node -> Node { subTree = map (mapTwo f) tree.subTree }
//│ ║        	                                         ^
//│ ╟──  + α112_373
//│ ╟──  + α11_399
//│ ╟──  - ((α13_1286,) -> α15_1287)
//│ ║  l.15: 	def mapTwo f ((a, b)) = (f a, f b)
//│ ╙──      	                              ^^^
//│ res: error
//│    = Node1 { subTree: Node1 { subTree: Leaf { value: [Array] } } }


def map: ('a -> 'b) -> PerfectTree['a] -> PerfectTree['b]
//│ map: ('a -> 'b) -> PerfectTree['a] -> PerfectTree['b]
//│    = <missing implementation>

def map f tree = case tree of {
  | Leaf -> Leaf { value = f tree.value }
  | Node -> Node { subTree = map (mapTwo f) tree.subTree }
  }
//│ 'a -> (((Leaf[?] with {value: 'value}) | (Node[?] with {subTree: PerfectTree[('b, 'c,)]})) -> (Leaf['value0] | (Node['A] with {subTree: PerfectTree[('d, 'e,)]}))
//│   where
//│     'a <: 'value -> 'value0 & 'b -> ('d & 'A) & 'c -> ('A & 'e))
//│   <:  map:
//│ ('a -> 'b) -> PerfectTree['a] -> PerfectTree['b]
//│    = <no result>
//│      map is not implemented

map succ n4
//│ res: PerfectTree[int]
//│    = <no result>
//│      map and map are not implemented




