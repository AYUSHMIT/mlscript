:NoRecursiveTypes
:GeneralizeCurriedFunctions
:ConstrainedTypes // * The test takes too much time without this

// * Perfect Trees (https://www.cis.upenn.edu/~plclub/blog/2020-12-04-nested-datatypes/)

// data NTree (a :: Type) =
//     NLeaf a
//   | NNode (NTree (Two a))


type Two[A] = (A, A)
//│ Defined type alias Two[+A]

def mapTwo f ((a, b)) = (f a, f b)
//│ mapTwo: 'a -> (forall 'b, 'c, 'd, 'e. (('b, 'd,) -> ('c, 'e,)
//│   where
//│     'a <: 'b -> 'c & 'd -> 'e))
//│       = [Function: mapTwo]

class Leaf[A]: { value: A }
//│ Defined class Leaf[+A]

:e
class Node[A]: { subTree: PerfectTree[Two[A]] }
type PerfectTree[A] = Leaf[A] | Node[A]
//│ ╔══[ERROR] Type definition is not regular: it occurs within itself as Node[Two['A]], but is defined as Node['A]
//│ ║  l.25: 	class Node[A]: { subTree: PerfectTree[Two[A]] }
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type definition is not regular: it occurs within itself as PerfectTree[Two['A]], but is defined as PerfectTree['A]
//│ ║  l.26: 	type PerfectTree[A] = Leaf[A] | Node[A]
//│ ╙──      	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

:IrregularTypes

class Node[A]: { subTree: PerfectTree[Two[A]] }
type PerfectTree[A] = Leaf[A] | Node[A]
//│ Defined class Node[+A]
//│ Defined type alias PerfectTree[+A]


n1 = Leaf { value = 1 }
//│ n1: Leaf[1]
//│   = Leaf { value: 1 }
n1: PerfectTree[int]
//│ res: PerfectTree[int]
//│    = Leaf { value: 1 }

n2 = Node { subTree = Leaf { value = (1, 2) } }
//│ n2: Node[1 | 2] with {subTree: Leaf[(1, 2,)]}
//│   = Node1 { subTree: Leaf { value: [ 1, 2 ] } }
n2: PerfectTree[int]
//│ res: PerfectTree[int]
//│    = Node1 { subTree: Leaf { value: [ 1, 2 ] } }

n4 = Node { subTree = Node { subTree = Leaf { value = ((1, 2), (3, 4)) } } }
//│ n4: Node[1 | 2 | 3 | 4] with {subTree: Node[(1 | 3, 2 | 4,)] with {subTree: Leaf[((1, 2,), (3, 4,),)]}}
//│   = Node1 { subTree: Node1 { subTree: Leaf { value: [Array] } } }
n4: PerfectTree[int]
//│ res: PerfectTree[int]
//│    = Node1 { subTree: Node1 { subTree: Leaf { value: [Array] } } }


// * Works since the removal of "recursive definition hacks"
rec def map f tree = case tree of {
  | Leaf -> Leaf { value = f tree.value }
  | Node -> Node { subTree = map (mapTwo f) tree.subTree }
  }
//│ map: 'map
//│   where
//│     'map :> forall 'a. 'a -> (forall 'subTree, 'A, 'subTree0, 'value, 'value0. (((Leaf[?] with {value: 'value}) | (Node[?] with {subTree: 'subTree})) -> (Leaf['value0] | (Node['A] with {subTree: 'subTree0}))
//│   where
//│     'map <: (forall 'b, 'c, 'd, 'e. (('b, 'd,) -> ('c, 'e,)
//│   where
//│     'a <: 'b -> 'c & 'd -> 'e)) -> 'subTree -> (PerfectTree[Two['A]] & 'subTree0)
//│     'a <: 'value -> 'value0))
//│    = [Function: map]

:e
map succ n4
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?A, ?subTree, ?b, ?A0, ?subTree0, ?A1, ?value. ?b) -> ?c` exceeded recursion depth limit (250)
//│ ║  l.80: 	map succ n4
//│ ║        	^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. (α123_235'' -> ‹∀ 2. {(α124_251''' -> (α128_254''' | α145_255''')) where: map122_234# <: ((α132_236''',) -> α142_242'''), α123_235'' <: ((value126_247''',) -> α127_248''')}›)›  <!<  ((α132_1385,) -> α142_1391)
//│ ╟── while constraining:  map122_234#  <!<  ((α132_1385,) -> α142_1391)
//│ ╟── while constraining:  {(α124_1400 -> (α128_1403 | α145_1404)) where: map122_234# <: ((α132_1385,) -> α142_1391), α123_1364 <: ((value126_1396,) -> α127_1397)}  <!<  ((subTree143_1351,) -> α144_1352)
//│ ╟── while constraining:  ‹∀ 2. {(α124_1380''' -> (α128_1383''' | α145_1384''')) where: map122_234# <: ((α132_1365''',) -> α142_1371'''), α123_1364 <: ((value126_1376''',) -> α127_1377''')}›  <!<  ((subTree143_1351,) -> α144_1352)
//│ ╟── while constraining:  ‹∀ 2. {(α124_1380''' -> (α128_1383''' | α145_1384''')) where: map122_234# <: ((α132_1365''',) -> α142_1371'''), α123_1364 <: ((value126_1376''',) -> α127_1377''')}›  <!<  α142_1350
//│ ╟── while constraining:  (α123_1364 -> ‹∀ 2. {(α124_1380''' -> (α128_1383''' | α145_1384''')) where: map122_234# <: ((α132_1365''',) -> α142_1371'''), α123_1364 <: ((value126_1376''',) -> α127_1377''')}›)  <!<  ((α132_1344,) -> α142_1350)
//│ ╟── while constraining:  ‹∀ 1. (α123_235'' -> ‹∀ 2. {(α124_251''' -> (α128_254''' | α145_255''')) where: map122_234# <: ((α132_236''',) -> α142_242'''), α123_235'' <: ((value126_247''',) -> α127_248''')}›)›  <!<  ((α132_1344,) -> α142_1350)
//│ ╟── while constraining:  map122_234#  <!<  ((α132_1344,) -> α142_1350)
//│ ╟── while constraining:  {(α124_1359 -> (α128_1362 | α145_1363)) where: map122_234# <: ((α132_1344,) -> α142_1350), α123_1323 <: ((value126_1355,) -> α127_1356)}  <!<  ((subTree143_1310,) -> α144_1311)
//│ ╟── while constraining:  ‹∀ 2. {(α124_1339''' -> (α128_1342''' | α145_1343''')) where: map122_234# <: ((α132_1324''',) -> α142_1330'''), α123_1323 <: ((value126_1335''',) -> α127_1336''')}›  <!<  ((subTree143_1310,) -> α144_1311)
//│ ╟── while constraining:  ‹∀ 2. {(α124_1339''' -> (α128_1342''' | α145_1343''')) where: map122_234# <: ((α132_1324''',) -> α142_1330'''), α123_1323 <: ((value126_1335''',) -> α127_1336''')}›  <!<  α142_1309
//│ ╟── while constraining:  (α123_1323 -> ‹∀ 2. {(α124_1339''' -> (α128_1342''' | α145_1343''')) where: map122_234# <: ((α132_1324''',) -> α142_1330'''), α123_1323 <: ((value126_1335''',) -> α127_1336''')}›)  <!<  ((α132_1303,) -> α142_1309)
//│ ╟── while constraining:  ‹∀ 1. (α123_235'' -> ‹∀ 2. {(α124_251''' -> (α128_254''' | α145_255''')) where: map122_234# <: ((α132_236''',) -> α142_242'''), α123_235'' <: ((value126_247''',) -> α127_248''')}›)›  <!<  ((α132_1303,) -> α142_1309)
//│ ╟── while constraining:  map122_234#  <!<  ((α132_1303,) -> α142_1309)
//│ ╟── while constraining:  {(α124_1318 -> (α128_1321 | α145_1322)) where: map122_234# <: ((α132_1303,) -> α142_1309), α123_1282 <: ((value126_1314,) -> α127_1315)}  <!<  ((subTree143_1269,) -> α144_1270)
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  {(α124_375 -> (α128_378 | α145_379)) where: map122_234# <: ((α132_360,) -> α142_366), α123_339 <: ((value126_371,) -> α127_372)}  <!<  ((subTree143_326,) -> α144_327)
//│ ╟── while constraining:  ‹∀ 2. {(α124_355''' -> (α128_358''' | α145_359''')) where: map122_234# <: ((α132_340''',) -> α142_346'''), α123_339 <: ((value126_351''',) -> α127_352''')}›  <!<  ((subTree143_326,) -> α144_327)
//│ ╟── while constraining:  ‹∀ 2. {(α124_355''' -> (α128_358''' | α145_359''')) where: map122_234# <: ((α132_340''',) -> α142_346'''), α123_339 <: ((value126_351''',) -> α127_352''')}›  <!<  α142_325
//│ ╟── while constraining:  (α123_339 -> ‹∀ 2. {(α124_355''' -> (α128_358''' | α145_359''')) where: map122_234# <: ((α132_340''',) -> α142_346'''), α123_339 <: ((value126_351''',) -> α127_352''')}›)  <!<  ((α132_319,) -> α142_325)
//│ ╟── while constraining:  ‹∀ 1. (α123_235'' -> ‹∀ 2. {(α124_251''' -> (α128_254''' | α145_255''')) where: map122_234# <: ((α132_236''',) -> α142_242'''), α123_235'' <: ((value126_247''',) -> α127_248''')}›)›  <!<  ((α132_319,) -> α142_325)
//│ ╟── while constraining:  map122_234#  <!<  ((α132_319,) -> α142_325)
//│ ╟── while constraining:  {(α124_334 -> (α128_337 | α145_338)) where: map122_234# <: ((α132_319,) -> α142_325), α123_298 <: ((value126_330,) -> α127_331)}  <!<  ((subTree143_285,) -> α144_286)
//│ ╟── while constraining:  ‹∀ 2. {(α124_314''' -> (α128_317''' | α145_318''')) where: map122_234# <: ((α132_299''',) -> α142_305'''), α123_298 <: ((value126_310''',) -> α127_311''')}›  <!<  ((subTree143_285,) -> α144_286)
//│ ╟── while constraining:  ‹∀ 2. {(α124_314''' -> (α128_317''' | α145_318''')) where: map122_234# <: ((α132_299''',) -> α142_305'''), α123_298 <: ((value126_310''',) -> α127_311''')}›  <!<  α142_284
//│ ╟── while constraining:  (α123_298 -> ‹∀ 2. {(α124_314''' -> (α128_317''' | α145_318''')) where: map122_234# <: ((α132_299''',) -> α142_305'''), α123_298 <: ((value126_310''',) -> α127_311''')}›)  <!<  ((α132_278,) -> α142_284)
//│ ╟── while constraining:  ‹∀ 1. (α123_235'' -> ‹∀ 2. {(α124_251''' -> (α128_254''' | α145_255''')) where: map122_234# <: ((α132_236''',) -> α142_242'''), α123_235'' <: ((value126_247''',) -> α127_248''')}›)›  <!<  ((α132_278,) -> α142_284)
//│ ╟── while constraining:  map122_234#  <!<  ((α132_278,) -> α142_284)
//│ ╟── while constraining:  {(α124_293 -> (α128_296 | α145_297)) where: map122_234# <: ((α132_278,) -> α142_284), α123_256 <: ((value126_289,) -> α127_290)}  <!<  ((‹∀ 0. α105'›,) -> α277)
//│ ╟── while constraining:  ‹∀ 2. {(α124_272''' -> (α128_275''' | α145_276''')) where: map122_234# <: ((α132_257''',) -> α142_263'''), α123_256 <: ((value126_268''',) -> α127_269''')}›  <!<  ((‹∀ 0. α105'›,) -> α277)
//│ ╙── while constraining:  α233  <!<  ((‹∀ 0. α105'›,) -> α277)
//│ res: error
//│    = Node1 { subTree: Node1 { subTree: Leaf { value: [Array] } } }


def map: ('a -> 'b) -> PerfectTree['a] -> PerfectTree['b]
//│ map: ('a -> 'b) -> PerfectTree['a] -> PerfectTree['b]
//│    = <missing implementation>

def map f tree = case tree of {
  | Leaf -> Leaf { value = f tree.value }
  | Node -> Node { subTree = map (mapTwo f) tree.subTree }
  }
//│ 'a -> (forall 'b, 'value, 'c, 'd, 'value0, 'A, 'e. (((Leaf[?] with {value: 'value}) | (Node[?] with {subTree: PerfectTree[('b, 'c,)]})) -> (Leaf['value0] | (Node['A] with {subTree: PerfectTree[('e, 'd,)]}))
//│   where
//│     'a <: 'value -> 'value0 & 'b -> ('e & 'A) & 'c -> ('A & 'd)))
//│   <:  map:
//│ ('a -> 'b) -> PerfectTree['a] -> PerfectTree['b]
//│    = <no result>
//│      map is not implemented

map succ n4
//│ res: PerfectTree[int]
//│    = <no result>
//│      map and map are not implemented




