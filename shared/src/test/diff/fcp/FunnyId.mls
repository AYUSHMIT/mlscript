:NoRecursiveTypes
:GeneralizeCurriedFunctions


def id_ty: forall 'a. 'a -> 'a
//│ id_ty: 'a -> 'a
//│      = <missing implementation>


rec def id x = let tmp = id x in x
//│ id: 'a -> 'a
//│   = [Function: id]

:re
id 1
//│ res: 1
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

id_ty = id
//│ 'a -> 'a
//│   <:  id_ty:
//│ 'a -> 'a
//│      = [Function: id]


// * When we had the "recursive definition hacks", and the reason was:
// * "we get `'a <: 'a -> anything` because `id` is passed for `x`
// * and we can't infer polymorphic recursion, so all `x` should have the same type"
rec def id x = let tmp = id id x in x
//│ id: 'a -> 'a
//│   = [Function: id1]

:re
id 1
//│ res: 1
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

id_ty = id
//│ 'a -> 'a
//│   <:  id_ty:
//│ 'a -> 'a
//│      = [Function: id1]


// * Not sure why we get a cycle in this slight variation!
:e
rec def id x = if true then x else id id x
//│ ╔══[ERROR] Cyclic-looking constraint while typing binding of lambda expression; a type annotation may be required
//│ ║  l.49: 	rec def id x = if true then x else id id x
//│ ║        	           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. (α112_122'' -> α121_124'')›  <:  α112_128'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. (α112_122'' -> α121_124'')›  <:  α112_122''
//│ id: 'id
//│   where
//│     'id :> forall 'a, 'b, 'c. 'a -> 'c
//│     'a <: 'd & 'b & 'c
//│     'c :> 'e
//│     'd :> 'id
//│        <: 'e
//│     'e :> 'id
//│        <: 'd -> 'e
//│   = [Function: id2]

:e
id_ty = id
//│ 'id
//│   where
//│     'id :> forall 'a, 'b, 'c. 'a -> 'c
//│     'a <: 'd & 'b & 'c
//│     'c :> 'e
//│     'd :> 'id
//│        <: 'e
//│     'e :> 'id
//│        <: 'd -> 'e
//│   <:  id_ty:
//│ 'a -> 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.68: 	id_ty = id
//│ ║        	^^^^^^^^^^
//│ ╟── type `‘a_187` is not a function
//│ ║  l.5: 	def id_ty: forall 'a. 'a -> 'a
//│ ║       	                  ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.49: 	rec def id x = if true then x else id id x
//│ ║        	                                   ^^^^^^^
//│ ╟── from reference:
//│ ║  l.49: 	rec def id x = if true then x else id id x
//│ ╙──      	                                         ^
//│      = [Function: id2]


