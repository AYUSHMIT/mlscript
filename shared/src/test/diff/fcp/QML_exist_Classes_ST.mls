// * Adaptation of QML's original existentials example; using encoded existentials and classes


:NoRecursiveTypes
:GeneralizeCurriedFunctions
:NoConstrainedTypes
// :DistributeForalls
// :ArgGen

// TODO try without some signatures



class ArraysRep[A, Rep]
  method Init: A -> Rep
  method Sub: Rep -> int -> A
  method Update: Rep -> int -> A -> Rep
  method Fold: (A -> 'b -> 'b) -> 'b -> Rep -> 'b
//│ Defined class ArraysRep[=A, =Rep]
//│ Declared ArraysRep.Init: ArraysRep['A, 'Rep] -> 'A -> 'Rep
//│ Declared ArraysRep.Sub: ArraysRep['A, 'Rep] -> 'Rep -> int -> 'A
//│ Declared ArraysRep.Update: ArraysRep['A, 'Rep] -> 'Rep -> int -> 'A -> 'Rep
//│ Declared ArraysRep.Fold: ArraysRep['A, 'Rep] -> ('A -> 'b -> 'b) -> 'b -> 'Rep -> 'b

class ArraysImpl[A, Rep]: ArraysRep[A, Rep] & {
    init: A -> Rep;
    sub: Rep -> int -> A;
    update: Rep -> int -> A -> Rep;
    fold: forall 'b. (A -> 'b -> 'b) -> 'b -> Rep -> 'b
  }
  method Init = this.init
  method Sub = this.sub
  method Update = this.update
  method Fold = this.fold
//│ Defined class ArraysImpl[=A, =Rep]
//│ Defined ArraysImpl.Init: ArraysImpl['A, 'Rep] -> 'A -> 'Rep
//│ Defined ArraysImpl.Sub: ArraysImpl['A, 'Rep] -> 'Rep -> int -> 'A
//│ Defined ArraysImpl.Update: ArraysImpl['A, 'Rep] -> 'Rep -> int -> 'A -> 'Rep
//│ Defined ArraysImpl.Fold: ArraysImpl['A, 'Rep] -> (forall 'b. ('A -> 'b -> 'b) -> 'b -> 'Rep -> 'b)

type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ Defined type alias Arrays[=A]



baseImpl = ArraysImpl {
    init   = fun a -> a;
    sub    = fun r -> fun (i : int) -> r;
    update = fun r -> fun (i : int) -> fun a -> a;
    fold   = fun f -> fun b -> fun r -> f r b
  }
//│ baseImpl: ArraysImpl['Rep, 'Rep] with {fold: forall 'a, 'b, 'c. ('a -> 'b -> 'c) -> 'b -> 'a -> 'c, init: forall 'd. 'd -> 'd, sub: forall 'e. 'e -> int -> 'e, update: anything -> int -> (forall 'f. 'f -> 'f)}
//│         = ArraysImpl {
//│             init: [Function: init],
//│             sub: [Function: sub],
//│             update: [Function: update],
//│             fold: [Function: fold]
//│           }

def base: Arrays['a]
def base f = f baseImpl
//│ base: Arrays['a]
//│     = <missing implementation>
//│ ((forall 'Rep. ArraysImpl['Rep, 'Rep] with {fold: forall 'a, 'b, 'c. ('a -> 'b -> 'c) -> 'b -> 'a -> 'c, init: forall 'd. 'd -> 'd, sub: forall 'e. 'e -> int -> 'e, update: anything -> int -> (forall 'f. 'f -> 'f)}) -> 'g) -> 'g
//│   <:  base:
//│ Arrays['a]
//│     = [Function: base]



def simpleStepImpl arrImpl = ArraysImpl {
    init   = fun a -> (arrImpl.Init a, "initialized");
    sub    = fun ((r0, r1)) -> fun i -> arrImpl.Sub r0 i;
    update = fun ((r0, r1)) -> fun i -> fun a -> (arrImpl.Update r0 i a, "updated");
    fold   = fun f -> fun b -> fun ((r0, r1)) -> arrImpl.Fold f b r0
  }
//│ simpleStepImpl: ArraysRep[in 'A | 'A0 | 'A1 & ('A2 | 'A3) out 'A2 & 'A3, in 'Rep | 'Rep0 out nothing] -> (ArraysImpl['A1, 'Rep1] with {fold: forall 'b, 'b0. ('A2 -> 'b -> ('b & 'b0)) -> (forall 'a. ('b & 'a) -> ('Rep0, anything,) -> ('b0 | 'a)), init: 'A -> (nothing, "initialized",), sub: ('Rep, anything,) -> int -> 'A3, update: forall 'c. ('Rep2 & 'c, anything,) -> int -> 'A0 -> ('c, "updated",)})
//│   where
//│     'Rep1 :> ('d, "initialized" | "updated",)
//│           <: (nothing, anything,)
//│     'A1 <: nothing
//│               = [Function: simpleStepImpl]

simpleStepImpl : ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string)]
//│ res: ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string,)]
//│    = [Function: simpleStepImpl]

// def simpleStepImpl2_ty: Arrays['a] -> ArraysImpl['a, ('_, string)]
// def simpleStepImpl2_ty: Arrays['a] -> ArraysImpl['a, '_]
// def simpleStepImpl2 arr = arr simpleStepImpl

def simpleStepImpl2_ty: (forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r) -> ArraysImpl['A, ('Rep, string)]
//│ simpleStepImpl2_ty: (forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r) -> ArraysImpl['A, ('Rep, string,)]
//│                   = <missing implementation>


def simpleStepImpl2 arr = arr simpleStepImpl
//│ simpleStepImpl2: ((forall 'A, 'Rep, 'A0, 'a, 'A1, 'Rep0, 'A2, 'A3, 'Rep1, 'Rep2. ArraysRep[in 'A3 | 'A | 'A0 & ('A1 | 'A2) out 'A1 & 'A2, in 'Rep1 | 'Rep out nothing] -> (ArraysImpl['A0, 'Rep0] with {fold: forall 'b, 'b0. ('A1 -> 'b -> ('b & 'b0)) -> (forall 'c. ('b & 'c) -> ('Rep, anything,) -> ('b0 | 'c)), init: 'A3 -> (nothing, "initialized",), sub: ('Rep1, anything,) -> int -> 'A2, update: forall 'd. ('Rep2 & 'd, anything,) -> int -> 'A -> ('d, "updated",)})) -> 'e) -> 'e
//│   where
//│     'Rep0 :> ('a, "initialized" | "updated",)
//│           <: (nothing, anything,)
//│     'A0 <: nothing
//│                = [Function: simpleStepImpl2]

simpleStepImpl2_ty = simpleStepImpl2
//│ ((forall 'a, 'A, 'A0, 'A1, 'Rep, 'Rep0, 'Rep1, 'A2, 'A3, 'Rep2. ArraysRep[in 'A3 | 'A1 | 'A2 & ('A | 'A0) out 'A & 'A0, in 'Rep2 | 'Rep out nothing] -> (ArraysImpl['A2, 'Rep0] with {fold: forall 'b, 'b0. ('A -> 'b -> ('b & 'b0)) -> (forall 'c. ('b & 'c) -> ('Rep, anything,) -> ('b0 | 'c)), init: 'A3 -> (nothing, "initialized",), sub: ('Rep2, anything,) -> int -> 'A0, update: forall 'd. ('Rep1 & 'd, anything,) -> int -> 'A1 -> ('d, "updated",)})) -> 'e) -> 'e
//│   where
//│     'Rep0 :> ('a, "initialized" | "updated",)
//│           <: (nothing, anything,)
//│     'A2 <: nothing
//│   <:  simpleStepImpl2_ty:
//│ (forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r) -> ArraysImpl['A, ('Rep, string,)]
//│                   = [Function: simpleStepImpl2]

:e // * Annotation is actually counter-productive... probably because the rigid universal in Arrays gets extruded!
def simpleStepImpl2_ty (arr: Arrays['a]) = arr simpleStepImpl
//│ Arrays['a] -> error
//│   <:  simpleStepImpl2_ty:
//│ (forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r) -> ArraysImpl['A, ('Rep, string,)]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.116: 	def simpleStepImpl2_ty (arr: Arrays['a]) = arr simpleStepImpl
//│ ║         	                                           ^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: class type parameter Rep is defined at:
//│ ║  l.14: 	class ArraysRep[A, Rep]
//│ ╙──      	                   ^^^
//│                   = [Function: simpleStepImpl2_ty1]

def simpleStep: Arrays['a] -> Arrays['a]
//│ simpleStep: Arrays['a] -> Arrays['a]
//│           = <missing implementation>

:e // * Since "sound extrusion"
def simpleStep arr f = f (simpleStepImpl2 arr)
//│ ((forall 'A, 'Rep, 'Rep0, 'Rep1, 'A0, 'A1, 'A2, 'a, 'Rep2, 'A3. ArraysRep[in 'A | 'A3 | 'A0 & ('A1 | 'A2) out 'A1 & 'A2, in 'Rep | 'Rep0 out nothing] -> (ArraysImpl['A0, 'Rep2] with {fold: forall 'b, 'b0. ('A1 -> 'b -> ('b & 'b0)) -> (forall 'c. ('b & 'c) -> ('Rep0, anything,) -> ('b0 | 'c)), init: 'A -> (nothing, "initialized",), sub: ('Rep, anything,) -> int -> 'A2, update: forall 'd. ('Rep1 & 'd, anything,) -> int -> 'A3 -> ('d, "updated",)})) -> 'e) -> (forall 'f. ('e -> 'f) -> 'f)
//│   where
//│     'Rep2 :> ('a, "initialized" | "updated",)
//│           <: (nothing, anything,)
//│     'A0 <: nothing
//│   <:  simpleStep:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.139: 	def simpleStep arr f = f (simpleStepImpl2 arr)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: class type parameter Rep is defined at:
//│ ║  l.14: 	class ArraysRep[A, Rep]
//│ ╙──      	                   ^^^
//│           = [Function: simpleStep]

:e // TODO update: seems like the given type for `simpleStepImpl2_ty` is not precise enough
def simpleStep arr f = f (simpleStepImpl2_ty arr)
//│ (forall 'r. (ArraysRep[in 'A out 'A | 'A0, in 'Rep out 'Rep | 'Rep0] -> 'r) -> 'r) -> (forall 'A1, 'Rep1, 'a. (ArraysImpl['A1, ('Rep1, string,)] -> 'a) -> 'a)
//│   where
//│     'Rep1 :> 'Rep
//│           <: 'Rep0
//│     'A1 :> 'A
//│         <: 'A0
//│   <:  simpleStep:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.162: 	def simpleStep arr f = f (simpleStepImpl2_ty arr)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ╙──      	                         ^^^^
//│           = [Function: simpleStep1]

sb = simpleStep base
//│ sb: Arrays['a]
//│   = [Function (anonymous)]

sb (fun arr -> arr.Init true)
//│ res: anything
//│    = [ true, 'initialized' ]

sb (fun arr -> arr.Sub (arr.Init true) 1)
//│ res: true
//│    = true

:e // * Expected – argument order confusion
sb (fun arr -> arr.Sub 0 (arr.Init true))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.195: 	sb (fun arr -> arr.Sub 0 (arr.Init true))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘Rep_1636` is not an instance of type `int`
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.16: 	  method Sub: Rep -> int -> A
//│ ║        	                     ^^^
//│ ╟── from application:
//│ ║  l.195: 	sb (fun arr -> arr.Sub 0 (arr.Init true))
//│ ║         	                          ^^^^^^^^^^^^^
//│ ╟── Note: class type parameter Rep is defined at:
//│ ║  l.14: 	class ArraysRep[A, Rep]
//│ ╙──      	                   ^^^
//│ res: error
//│ Runtime error:
//│   TypeError: number 0 is not iterable (cannot read property Symbol(Symbol.iterator))

sb (fun arr -> arr.Update (arr.Init true) 1 false)
//│ res: anything
//│    = [ false, 'updated' ]

:e // * Rightly prevent skolem confusion
sb (fun arr1 -> sb (fun arr2 -> arr2.Update (arr1.Init true)))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.220: 	sb (fun arr1 -> sb (fun arr2 -> arr2.Update (arr1.Init true)))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘Rep_1733` does not match type `nothing`
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── from application:
//│ ║  l.220: 	sb (fun arr1 -> sb (fun arr2 -> arr2.Update (arr1.Init true)))
//│ ╙──       	                                             ^^^^^^^^^^^^^^
//│ res: error
//│    = [Function (anonymous)]

sb (fun arr ->
    let r2 = arr.Update (arr.Init true) 1 false
    in (arr.Sub r2 0, arr.Sub r2 1)
  )
//│ res: (bool, bool,)
//│    = [ false, false ]



:escape
def Math: nothing
//│ Math: nothing
//│     = <missing implementation>

def div: int -> int -> int
def div a b = Math.trunc(a/b)
//│ div: int -> int -> int
//│    = <missing implementation>
//│ number -> number -> nothing
//│   <:  div:
//│ int -> int -> int
//│    = [Function: div1]

def mod: int -> int -> int
rec def mod a b = if a < b then a else mod (a - b) b
//│ mod: int -> int -> int
//│    = <missing implementation>
//│ int -> int -> int
//│   <:  mod:
//│ int -> int -> int
//│    = [Function: mod]

def stepImpl arrImpl = ArraysImpl {
    init = fun a -> (arrImpl.Init a, arrImpl.Init a);
    sub = fun ((r0, r1)) -> fun i ->
      if mod i 2 == 0
      then arrImpl.Sub r0 (div i 2)
      else arrImpl.Sub r1 (div i 2);
    update = fun ((r0, r1)) -> fun i -> fun a ->
      if mod i 2 == 0
      then (arrImpl.Update r0 (div i 2) a, r1)
      else (r0, arrImpl.Update r1 (div i 2) a);
    fold = fun f -> fun b -> fun ((r0, r1)) -> arrImpl.Fold f (arrImpl.Fold f b r0) r1
  }
//│ stepImpl: ArraysRep[in 'A | 'A0 | 'A1 | 'A2 | 'A3 & ('A4 | 'A5 | 'A6 | 'A7) out 'A4 & 'A7 & 'A6 & 'A5, in 'Rep | 'Rep0 | 'Rep1 | 'Rep2 out nothing] -> (ArraysImpl['A3, 'Rep3] with {fold: forall 'b, 'b0, 'b1. ('A4 -> 'b -> ('b & 'b0 & 'b1) & 'A7 -> 'b1 -> ('b1 & 'b0)) -> (forall 'a. ('b & 'b1 & 'a) -> ('Rep2, 'Rep1,) -> ('b0 | 'a)), init: ('A0 & 'A) -> (nothing, nothing,), sub: ('Rep, 'Rep0,) -> int -> ('A5 | 'A6), update: forall 'c, 'd. ('Rep4 & 'c, 'Rep5 & 'd,) -> int -> ('A2 & 'A1) -> ('c, 'd,)})
//│   where
//│     'Rep3 :> ('e, 'f,)
//│           <: (nothing, nothing,)
//│     'A3 <: nothing
//│         = [Function: stepImpl]

def stepImpl2_ty: (forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r) -> ArraysImpl['A, ('Rep, 'Rep)]
//│ stepImpl2_ty: (forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r) -> ArraysImpl['A, ('Rep, 'Rep,)]
//│             = <missing implementation>

def stepImpl2 arr = arr stepImpl
//│ stepImpl2: ((forall 'Rep, 'a, 'A, 'A0, 'Rep0, 'Rep1, 'A1, 'A2, 'Rep2, 'c, 'Rep3, 'Rep4, 'A3, 'A4, 'A5, 'Rep5, 'A6, 'A7. ArraysRep[in 'A5 | 'A | 'A6 | 'A2 | 'A3 & ('A4 | 'A1 | 'A7 | 'A0) out 'A4 & 'A0 & 'A7 & 'A1, in 'Rep4 | 'Rep1 | 'Rep5 | 'Rep out nothing] -> (ArraysImpl['A3, 'Rep3] with {fold: forall 'b, 'b0, 'b1. ('A4 -> 'b -> ('b & 'b0 & 'b1) & 'A0 -> 'b1 -> ('b1 & 'b0)) -> (forall 'd. ('b & 'b1 & 'd) -> ('Rep, 'Rep5,) -> ('b0 | 'd)), init: ('A & 'A5) -> (nothing, nothing,), sub: ('Rep4, 'Rep1,) -> int -> ('A1 | 'A7), update: forall 'e, 'f. ('Rep2 & 'e, 'Rep0 & 'f,) -> int -> ('A2 & 'A6) -> ('e, 'f,)})) -> 'g) -> 'g
//│   where
//│     'Rep3 :> ('a, 'c,)
//│           <: (nothing, nothing,)
//│     'A3 <: nothing
//│          = [Function: stepImpl2]

stepImpl2_ty = stepImpl2
//│ ((forall 'Rep, 'A, 'A0, 'A1, 'a, 'Rep0, 'A2, 'A3, 'Rep1, 'Rep2, 'Rep3, 'A4, 'A5, 'Rep4, 'A6, 'Rep5, 'c, 'A7. ArraysRep[in 'A6 | 'A2 | 'A4 | 'A1 | 'A0 & ('A5 | 'A3 | 'A7 | 'A) out 'A5 & 'A & 'A7 & 'A3, in 'Rep4 | 'Rep2 | 'Rep0 | 'Rep3 out nothing] -> (ArraysImpl['A0, 'Rep1] with {fold: forall 'b, 'b0, 'b1. ('A5 -> 'b -> ('b & 'b0 & 'b1) & 'A -> 'b1 -> ('b1 & 'b0)) -> (forall 'd. ('b & 'b1 & 'd) -> ('Rep3, 'Rep0,) -> ('b0 | 'd)), init: ('A2 & 'A6) -> (nothing, nothing,), sub: ('Rep4, 'Rep2,) -> int -> ('A3 | 'A7), update: forall 'e, 'f. ('Rep & 'e, 'Rep5 & 'f,) -> int -> ('A1 & 'A4) -> ('e, 'f,)})) -> 'g) -> 'g
//│   where
//│     'Rep1 :> ('a, 'c,)
//│           <: (nothing, nothing,)
//│     'A0 <: nothing
//│   <:  stepImpl2_ty:
//│ (forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r) -> ArraysImpl['A, ('Rep, 'Rep,)]
//│             = [Function: stepImpl2]


def step: Arrays['a] -> Arrays['a]
//│ step: Arrays['a] -> Arrays['a]
//│     = <missing implementation>

:e // * Since "sound extrusion"
def step arr f = f (stepImpl2 arr)
//│ ((forall 'A, 'Rep, 'A0, 'A1, 'Rep0, 'a, 'A2, 'Rep1, 'A3, 'A4, 'Rep2, 'Rep3, 'A5, 'Rep4, 'A6, 'Rep5, 'c, 'A7. ArraysRep[in 'A7 | 'A5 | 'A0 | 'A2 | 'A4 & ('A | 'A3 | 'A1 | 'A6) out 'A & 'A6 & 'A1 & 'A3, in 'Rep3 | 'Rep0 | 'Rep5 | 'Rep2 out nothing] -> (ArraysImpl['A4, 'Rep] with {fold: forall 'b, 'b0, 'b1. ('A -> 'b -> ('b & 'b0 & 'b1) & 'A6 -> 'b1 -> ('b1 & 'b0)) -> (forall 'd. ('b & 'b1 & 'd) -> ('Rep2, 'Rep5,) -> ('b0 | 'd)), init: ('A5 & 'A7) -> (nothing, nothing,), sub: ('Rep3, 'Rep0,) -> int -> ('A3 | 'A1), update: forall 'e, 'f. ('Rep4 & 'e, 'Rep1 & 'f,) -> int -> ('A2 & 'A0) -> ('e, 'f,)})) -> 'g) -> (forall 'h. ('g -> 'h) -> 'h)
//│   where
//│     'Rep :> ('a, 'c,)
//│          <: (nothing, nothing,)
//│     'A4 <: nothing
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.315: 	def step arr f = f (stepImpl2 arr)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: class type parameter Rep is defined at:
//│ ║  l.14: 	class ArraysRep[A, Rep]
//│ ╙──      	                   ^^^
//│     = [Function: step]

// * Now the annotation was okay [until "sound extrusion"] because the result no longer extruded it...
:e // * Since "sound extrusion"
def step (arr: Arrays['a]) f = f (stepImpl2 arr)
//│ Arrays['a] -> (forall 'b. (error -> 'b) -> 'b)
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.339: 	def step (arr: Arrays['a]) f = f (stepImpl2 arr)
//│ ║         	                                  ^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: class type parameter Rep is defined at:
//│ ║  l.14: 	class ArraysRep[A, Rep]
//│ ╙──      	                   ^^^
//│     = [Function: step1]

// * Don't know why these don't work:
:e
def step arr f = f (stepImpl2_ty arr)
//│ (forall 'r. (ArraysRep[in 'A out 'A | 'A0, in 'Rep out 'Rep | 'Rep0] -> 'r) -> 'r) -> (forall 'Rep1, 'a, 'A1. (ArraysImpl['A1, ('Rep1, 'Rep1,)] -> 'a) -> 'a)
//│   where
//│     'Rep1 :> 'Rep
//│           <: 'Rep0
//│     'A1 :> 'A
//│         <: 'A0
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.359: 	def step arr f = f (stepImpl2_ty arr)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ╙──      	                         ^^^^
//│     = [Function: step2]
:e
def step (arr: Arrays['a]) f = f (stepImpl2_ty arr)
//│ Arrays['a] -> (forall 'b. (error -> 'b) -> 'b)
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.379: 	def step (arr: Arrays['a]) f = f (stepImpl2_ty arr)
//│ ║         	                                  ^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ╙──      	                         ^^^^
//│     = [Function: step3]


ssb = step (step base)
//│ ssb: Arrays['a]
//│    = [Function (anonymous)]

ssb (fun arr ->
    let r2 = arr.Update (arr.Init true) 1 false
    in (arr.Sub r2 0, arr.Sub r2 1)
  )
//│ res: (bool, bool,)
//│    = [ true, false ]



rec def mkMonoArray n =
  if n == 0 then base else step (mkMonoArray(n - 1))
//│ mkMonoArray: int -> (forall 'a. Arrays['a])
//│            = [Function: mkMonoArray]

snb = mkMonoArray 5
//│ snb: Arrays['a]
//│    = [Function (anonymous)]

snb (fun arr -> arr.Init true)
//│ res: anything
//│    = [
//│        [ [ [Array], [Array] ], [ [Array], [Array] ] ],
//│        [ [ [Array], [Array] ], [ [Array], [Array] ] ]
//│      ]


// * From the paper:
// let mkPolyArray n = {∀α(∃ρ.∀β.sig(α,ρ,β))} (mkMonoArray n)





