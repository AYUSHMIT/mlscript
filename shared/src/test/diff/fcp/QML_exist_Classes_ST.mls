// * Adaptation of QML's original existentials example; using encoded existentials and classes


:NoRecursiveTypes
:GeneralizeCurriedFunctions
:NoConstrainedTypes
// :DistributeForalls
// :ArgGen

// TODO try without some signatures



class ArraysRep[A, Rep]
  method Init: A -> Rep
  method Sub: Rep -> int -> A
  method Update: Rep -> int -> A -> Rep
  method Fold: (A -> 'b -> 'b) -> 'b -> Rep -> 'b
//│ Defined class ArraysRep[=A, =Rep]
//│ Declared ArraysRep.Init: ArraysRep['A, 'Rep] -> 'A -> 'Rep
//│ Declared ArraysRep.Sub: ArraysRep['A, 'Rep] -> 'Rep -> int -> 'A
//│ Declared ArraysRep.Update: ArraysRep['A, 'Rep] -> 'Rep -> int -> 'A -> 'Rep
//│ Declared ArraysRep.Fold: ArraysRep['A, 'Rep] -> ('A -> 'b -> 'b) -> 'b -> 'Rep -> 'b

class ArraysImpl[A, Rep]: ArraysRep[A, Rep] & {
    init: A -> Rep;
    sub: Rep -> int -> A;
    update: Rep -> int -> A -> Rep;
    fold: forall 'b. (A -> 'b -> 'b) -> 'b -> Rep -> 'b
  }
  method Init = this.init
  method Sub = this.sub
  method Update = this.update
  method Fold = this.fold
//│ Defined class ArraysImpl[=A, =Rep]
//│ Defined ArraysImpl.Init: ArraysImpl['A, 'Rep] -> 'A -> 'Rep
//│ Defined ArraysImpl.Sub: ArraysImpl['A, 'Rep] -> 'Rep -> int -> 'A
//│ Defined ArraysImpl.Update: ArraysImpl['A, 'Rep] -> 'Rep -> int -> 'A -> 'Rep
//│ Defined ArraysImpl.Fold: ArraysImpl['A, 'Rep] -> (forall 'b. ('A -> 'b -> 'b) -> 'b -> 'Rep -> 'b)

type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ Defined type alias Arrays[=A]



baseImpl = ArraysImpl {
    init   = fun a -> a;
    sub    = fun r -> fun (i : int) -> r;
    update = fun r -> fun (i : int) -> fun a -> a;
    fold   = fun f -> fun b -> fun r -> f r b
  }
//│ baseImpl: ArraysImpl['Rep, 'Rep] with {fold: forall 'a, 'b, 'c, 'd, 'e. ('c -> ('d -> 'e & 'a) & 'b) -> (forall 'f. ('d & 'f) -> (forall 'g, 'h. ('c & 'g) -> ('h | 'e))), init: forall 'i. 'i -> 'i, sub: forall 'j. 'j -> int -> 'j, update: forall 'k. 'k -> int -> (forall 'l. 'l -> 'l)}
//│         = ArraysImpl {
//│             init: [Function: init],
//│             sub: [Function: sub],
//│             update: [Function: update],
//│             fold: [Function: fold]
//│           }

def base: Arrays['a]
def base f = f baseImpl
//│ base: Arrays['a]
//│     = <missing implementation>
//│ ((forall 'Rep. ArraysImpl['Rep, 'Rep] with {fold: forall 'a, 'b, 'c, 'd, 'e. ('e -> ('a -> 'b & 'd) & 'c) -> (forall 'f. ('a & 'f) -> (forall 'g, 'h. ('e & 'g) -> ('h | 'b))), init: forall 'i. 'i -> 'i, sub: forall 'j. 'j -> int -> 'j, update: forall 'k. 'k -> int -> (forall 'l. 'l -> 'l)}) -> 'm & 'n) -> 'm
//│   <:  base:
//│ Arrays['a]
//│     = [Function: base]



def simpleStepImpl arrImpl = ArraysImpl {
    init   = fun a -> (arrImpl.Init a, "initialized");
    sub    = fun ((r0, r1)) -> fun i -> arrImpl.Sub r0 i;
    update = fun ((r0, r1)) -> fun i -> fun a -> (arrImpl.Update r0 i a, "updated");
    fold   = fun f -> fun b -> fun ((r0, r1)) -> arrImpl.Fold f b r0
  }
//│ simpleStepImpl: (ArraysRep[in 'A | 'A0 | 'A1 & ('A2 | 'A3) out 'A4 & ('A5 & ('A0 & ('A6 | 'A) | 'A7 & ('A6 | 'A)) | 'A3 & ('A0 & ('A6 | 'A) | 'A7 & ('A6 | 'A))) | 'A2 & ('A5 & ('A0 & ('A6 | 'A) | 'A7 & ('A6 | 'A)) | 'A3 & ('A0 & ('A6 | 'A) | 'A7 & ('A6 | 'A))), in 'Rep | 'Rep0 | 'Rep1 & 'a & 'Rep2 & 'c & 'Rep3 & 'Rep4 & 'd & ('Rep5 | 'Rep6) out 'Rep & ('Rep5 & ('Rep7 & ('Rep0 | 'Rep4) | 'Rep6 & ('Rep0 | 'Rep4)) | 'Rep3 & ('Rep7 & ('Rep0 | 'Rep4) | 'Rep6 & ('Rep0 | 'Rep4))) | 'Rep1 & ('Rep5 & ('Rep7 & ('Rep0 | 'Rep4) | 'Rep6 & ('Rep0 | 'Rep4)) | 'Rep3 & ('Rep7 & ('Rep0 | 'Rep4) | 'Rep6 & ('Rep0 | 'Rep4)))] & 'e) -> ((ArraysImpl['A1, 'Rep8] with {fold: forall 'A8, 'b, 'b0, 'f. (('A2 | 'A8) -> 'b -> ('b & 'b0) & 'f) -> (forall 'g. ('b & 'g) -> (forall 'h, 'Rep9, 'i, 'j. ('Rep4 & 'h & 'Rep9, 'i,) -> ('b0 | 'g | 'j))) | 'fold, init: forall 'k, 'A9, 'l. ('A6 & 'k & 'A9) -> ('Rep6 | 'l, "initialized",) | 'init, sub: forall 'm, 'n. ('Rep1 & 'm, 'n,) -> (forall 'o, 'p. (int & 'o) -> ('A3 | 'p)) | 'sub, update: forall 'q, 'r. ('Rep3 & 'r, 'q,) -> (forall 's, 'o. (int & 's & 'o) -> (forall 't, 'A10, 'u. ('A7 & 't & 'A10) -> ('Rep5 | 'r | 'u, "updated",))) | 'update}) | 'v)
//│   where
//│     'Rep8 :> ('Rep6 | 'Rep5 | 'w | 'c | 'x, "initialized" | "updated",)
//│           <: ('Rep4 & 'd & 'Rep1 & 'a & 'Rep2 & 'c & 'Rep3, 'y & 'z & 'a1,)
//│     'A1 <: 'b1 & 'A11 & 'A7 & 'c1 & 'A12 & 'A6
//│               = [Function: simpleStepImpl]

simpleStepImpl : ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string)]
//│ res: ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string,)]
//│    = [Function: simpleStepImpl]

// def simpleStepImpl2_ty: Arrays['a] -> ArraysImpl['a, ('_, string)]
// def simpleStepImpl2_ty: Arrays['a] -> ArraysImpl['a, '_]
// def simpleStepImpl2 arr = arr simpleStepImpl

def simpleStepImpl2_ty: (forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r) -> ArraysImpl['A, ('Rep, string)]
//│ simpleStepImpl2_ty: (forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r) -> ArraysImpl['A, ('Rep, string,)]
//│                   = <missing implementation>


def simpleStepImpl2 arr = arr simpleStepImpl
//│ simpleStepImpl2: ((forall 'Rep, 'a, 'update, 'c, 'd, 'Rep0, 'e, 'A, 'init, 'Rep1, 'Rep2, 'A0, 'Rep3, 'f, 'g, 'A1, 'A2, 'A3, 'h, 'sub, 'fold, 'Rep4, 'i, 'A4, 'A5, 'j, 'A6, 'Rep5, 'Rep6, 'A7, 'Rep7, 'k, 'A8, 'A9, 'l, 'Rep8, 'm. (ArraysRep[in 'A3 | 'A6 | 'A8 & ('A0 | 'A) out 'A5 & ('A6 & ('A7 & ('A2 | 'A0) | 'A3 & ('A0 | 'A2)) | 'A4 & ('A7 & ('A2 | 'A0) | 'A3 & ('A2 | 'A0))) | 'A & ('A6 & ('A7 & ('A2 | 'A0) | 'A3 & ('A0 | 'A2)) | 'A4 & ('A7 & ('A2 | 'A0) | 'A3 & ('A2 | 'A0))), in 'Rep3 | 'Rep1 | 'Rep5 & 'Rep & 'h & 'Rep6 & 'l & 'Rep2 & 'g & ('Rep0 | 'Rep7) out 'Rep0 & ('Rep6 & ('Rep8 & ('Rep1 | 'Rep) | 'Rep7 & ('Rep1 | 'Rep)) | 'Rep3 & ('Rep8 & ('Rep1 | 'Rep) | 'Rep7 & ('Rep1 | 'Rep))) | 'Rep5 & ('Rep6 & ('Rep8 & ('Rep1 | 'Rep) | 'Rep7 & ('Rep1 | 'Rep)) | 'Rep3 & ('Rep8 & ('Rep1 | 'Rep) | 'Rep7 & ('Rep1 | 'Rep)))] & 'e) -> ((ArraysImpl['A8, 'Rep4] with {fold: forall 'A10, 'b, 'b0, 'n. (('A0 | 'A10) -> 'b -> ('b & 'b0) & 'n) -> (forall 'o. ('b & 'o) -> (forall 'p, 'q, 'r, 'Rep9. ('Rep & 'r & 'Rep9, 'p,) -> ('b0 | 'o | 'q))) | 'fold, init: forall 's, 'A11, 't. ('A7 & 's & 'A11) -> ('Rep7 | 't, "initialized",) | 'init, sub: forall 'u, 'v. ('Rep6 & 'u, 'v,) -> (forall 'w, 'x. (int & 'w) -> ('A | 'x)) | 'sub, update: forall 'y, 'z. ('Rep5 & 'y, 'z,) -> (forall 'w, 'a1. (int & 'a1 & 'w) -> (forall 'A12, 'b1, 'c1. ('A4 & 'c1 & 'A12) -> ('Rep0 | 'y | 'b1, "updated",))) | 'update}) | 'i)) -> 'd1 & 'e1) -> 'd1
//│   where
//│     'Rep4 :> ('Rep7 | 'Rep0 | 'c | 'g | 'a, "initialized" | "updated",)
//│           <: ('Rep & 'h & 'Rep6 & 'l & 'Rep2 & 'g & 'Rep5, 'm & 'j & 'd,)
//│     'A8 <: 'f & 'A1 & 'A4 & 'k & 'A9 & 'A7
//│                = [Function: simpleStepImpl2]

simpleStepImpl2_ty = simpleStepImpl2
//│ ((forall 'A, 'a, 'Rep, 'c, 'A0, 'd, 'e, 'Rep0, 'Rep1, 'f, 'A1, 'Rep2, 'update, 'g, 'Rep3, 'Rep4, 'A2, 'A3, 'A4, 'h, 'A5, 'i, 'j, 'Rep5, 'fold, 'A6, 'k, 'l, 'init, 'A7, 'sub, 'Rep6, 'Rep7, 'A8, 'Rep8, 'A9, 'm. (ArraysRep[in 'A2 | 'A0 | 'A5 & ('A1 | 'A4) out 'A & ('A3 & ('A8 & ('A7 | 'A2) | 'A4 & ('A7 | 'A2)) | 'A1 & ('A8 & ('A7 | 'A2) | 'A4 & ('A7 | 'A2))) | 'A0 & ('A3 & ('A8 & ('A7 | 'A2) | 'A4 & ('A7 | 'A2)) | 'A1 & ('A8 & ('A7 | 'A2) | 'A4 & ('A7 | 'A2))), in 'Rep2 | 'Rep0 | 'c & 'Rep3 & 'j & 'Rep7 & 'i & 'Rep6 & 'Rep8 & ('Rep4 | 'Rep) out 'Rep6 & ('Rep2 & ('Rep1 & ('Rep0 | 'Rep8) | 'Rep & ('Rep0 | 'Rep8)) | 'Rep3 & ('Rep1 & ('Rep0 | 'Rep8) | 'Rep & ('Rep0 | 'Rep8))) | 'Rep4 & ('Rep2 & ('Rep1 & ('Rep0 | 'Rep8) | 'Rep & ('Rep0 | 'Rep8)) | 'Rep3 & ('Rep1 & ('Rep0 | 'Rep8) | 'Rep & ('Rep0 | 'Rep8)))] & 'g) -> ((ArraysImpl['A5, 'Rep5] with {fold: forall 'A10, 'b, 'b0, 'n. (('A1 | 'A10) -> 'b -> ('b & 'b0) & 'n) -> (forall 'o. ('b & 'o) -> (forall 'p, 'Rep9, 'q, 'r. ('Rep8 & 'p & 'Rep9, 'q,) -> ('b0 | 'o | 'r))) | 'fold, init: forall 's, 'A11, 't. ('A7 & 's & 'A11) -> ('Rep | 't, "initialized",) | 'init, sub: forall 'u, 'v. ('Rep3 & 'u, 'v,) -> (forall 'w, 'x. (int & 'w) -> ('A4 | 'x)) | 'sub, update: forall 'y, 'z. ('Rep6 & 'y, 'z,) -> (forall 'w, 'a1. (int & 'a1 & 'w) -> (forall 'b1, 'A12, 'c1. ('A & 'b1 & 'A12) -> ('Rep4 | 'y | 'c1, "updated",))) | 'update}) | 'f)) -> 'd1 & 'e1) -> 'd1
//│   where
//│     'Rep5 :> ('Rep | 'Rep4 | 'h | 'i | 'a, "initialized" | "updated",)
//│           <: ('Rep8 & 'c & 'Rep3 & 'j & 'Rep7 & 'i & 'Rep6, 'm & 'l & 'd,)
//│     'A5 <: 'k & 'A9 & 'A & 'e & 'A6 & 'A7
//│   <:  simpleStepImpl2_ty:
//│ (forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r) -> ArraysImpl['A, ('Rep, string,)]
//│                   = [Function: simpleStepImpl2]

:e // * Annotation is actually counter-productive... probably because the rigid universal in Arrays gets extruded!
def simpleStepImpl2_ty (arr: Arrays['a]) = arr simpleStepImpl
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.116: 	def simpleStepImpl2_ty (arr: Arrays['a]) = arr simpleStepImpl
//│ ║         	                                           ^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: class type parameter Rep is defined at:
//│ ║  l.14: 	class ArraysRep[A, Rep]
//│ ╙──      	                   ^^^
//│ Arrays['a] -> (error | 'b)
//│   <:  simpleStepImpl2_ty:
//│ (forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r) -> ArraysImpl['A, ('Rep, string,)]
//│                   = [Function: simpleStepImpl2_ty1]

def simpleStep: Arrays['a] -> Arrays['a]
//│ simpleStep: Arrays['a] -> Arrays['a]
//│           = <missing implementation>

:e // * Since "sound extrusion"
def simpleStep arr f = f (simpleStepImpl2 arr)
//│ ((forall 'a, 'A, 'fold, 'Rep, 'A0, 'c, 'A1, 'd, 'e, 'f, 'Rep0, 'Rep1, 'A2, 'Rep2, 'Rep3, 'g, 'sub, 'Rep4, 'A3, 'Rep5, 'A4, 'Rep6, 'Rep7, 'h, 'init, 'Rep8, 'i, 'A5, 'update, 'j, 'A6, 'A7, 'k, 'l, 'A8, 'm, 'A9. (ArraysRep[in 'A1 | 'A4 | 'A3 & ('A0 | 'A9) out 'A8 & ('A6 & ('A4 & ('A | 'A1) | 'A5 & ('A | 'A1)) | 'A9 & ('A4 & ('A | 'A1) | 'A5 & ('A | 'A1))) | 'A0 & ('A6 & ('A4 & ('A | 'A1) | 'A5 & ('A | 'A1)) | 'A9 & ('A4 & ('A | 'A1) | 'A5 & ('A | 'A1))), in 'Rep8 | 'Rep7 | 'm & 'Rep1 & 'd & 'Rep4 & 'Rep6 & 'c & 'Rep0 & ('Rep2 | 'Rep5) out 'Rep2 & ('Rep0 & ('Rep & ('Rep7 | 'Rep6) | 'Rep5 & ('Rep7 | 'Rep6)) | 'Rep8 & ('Rep & ('Rep7 | 'Rep6) | 'Rep5 & ('Rep7 | 'Rep6))) | 'Rep4 & ('Rep0 & ('Rep & ('Rep7 | 'Rep6) | 'Rep5 & ('Rep7 | 'Rep6)) | 'Rep8 & ('Rep & ('Rep7 | 'Rep6) | 'Rep5 & ('Rep7 | 'Rep6)))] & 'k) -> ((ArraysImpl['A3, 'Rep3] with {fold: forall 'b, 'b0, 'n, 'A10. (('A0 | 'A10) -> 'b -> ('b & 'b0) & 'n) -> (forall 'o. ('b & 'o) -> (forall 'p, 'Rep9, 'q, 'r. ('Rep6 & 'p & 'Rep9, 'q,) -> ('b0 | 'o | 'r))) | 'fold, init: forall 's, 'A11, 't. ('A & 's & 'A11) -> ('Rep5 | 't, "initialized",) | 'init, sub: forall 'u, 'v. ('Rep0 & 'u, 'v,) -> (forall 'w, 'x. (int & 'x) -> ('A9 | 'w)) | 'sub, update: forall 'y, 'z. ('Rep4 & 'y, 'z,) -> (forall 'a1, 'x. (int & 'a1 & 'x) -> (forall 'b1, 'A12, 'c1. ('A5 & 'b1 & 'A12) -> ('Rep2 | 'y | 'c1, "updated",))) | 'update}) | 'l)) -> 'd1 & 'e1) -> (forall 'f1, 'g1, 'h1. (('f1 | 'd1) -> 'g1 & 'h1) -> 'g1)
//│   where
//│     'Rep3 :> ('Rep5 | 'Rep2 | 'e | 'd | 'h, "initialized" | "updated",)
//│           <: ('Rep6 & 'c & 'Rep0 & 'm & 'Rep1 & 'd & 'Rep4, 'a & 'g & 'f,)
//│     'A3 <: 'i & 'A7 & 'A5 & 'j & 'A2 & 'A
//│   <:  simpleStep:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.139: 	def simpleStep arr f = f (simpleStepImpl2 arr)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: class type parameter Rep is defined at:
//│ ║  l.14: 	class ArraysRep[A, Rep]
//│ ╙──      	                   ^^^
//│           = [Function: simpleStep]

:e // TODO update: seems like the given type for `simpleStepImpl2_ty` is not precise enough
def simpleStep arr f = f (simpleStepImpl2_ty arr)
//│ (forall 'r. (ArraysRep[in 'A out 'A | 'A0, in 'Rep out 'Rep | 'Rep0] -> 'r) -> 'r & 'a) -> (forall 'A1, 'b, 'c, 'd, 'Rep1. ((ArraysImpl['A1, ('Rep1, string,)] | 'd) -> 'c & 'b) -> 'c)
//│   where
//│     'Rep1 :> 'Rep
//│           <: 'Rep0
//│     'A1 :> 'A
//│         <: 'A0
//│   <:  simpleStep:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.162: 	def simpleStep arr f = f (simpleStepImpl2_ty arr)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ╙──      	                         ^^^^
//│           = [Function: simpleStep1]

sb = simpleStep base
//│ sb: Arrays['a]
//│   = [Function (anonymous)]

sb (fun arr -> arr.Init true)
//│ res: anything
//│    = [ true, 'initialized' ]

sb (fun arr -> arr.Sub (arr.Init true) 1)
//│ res: true
//│    = true

:e // * Expected – argument order confusion
sb (fun arr -> arr.Sub 0 (arr.Init true))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.195: 	sb (fun arr -> arr.Sub 0 (arr.Init true))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘Rep_2031` is not an instance of type `int`
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.16: 	  method Sub: Rep -> int -> A
//│ ║        	                     ^^^
//│ ╟── from application:
//│ ║  l.195: 	sb (fun arr -> arr.Sub 0 (arr.Init true))
//│ ║         	                          ^^^^^^^^^^^^^
//│ ╟── Note: class type parameter Rep is defined at:
//│ ║  l.14: 	class ArraysRep[A, Rep]
//│ ╙──      	                   ^^^
//│ res: error
//│ Runtime error:
//│   TypeError: number 0 is not iterable (cannot read property Symbol(Symbol.iterator))

sb (fun arr -> arr.Update (arr.Init true) 1 false)
//│ res: anything
//│    = [ false, 'updated' ]

:e // * Rightly prevent skolem confusion
sb (fun arr1 -> sb (fun arr2 -> arr2.Update (arr1.Init true)))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.220: 	sb (fun arr1 -> sb (fun arr2 -> arr2.Update (arr1.Init true)))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘Rep_2128` does not match type `nothing`
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── from application:
//│ ║  l.220: 	sb (fun arr1 -> sb (fun arr2 -> arr2.Update (arr1.Init true)))
//│ ╙──       	                                             ^^^^^^^^^^^^^^
//│ res: error
//│    = [Function (anonymous)]

sb (fun arr ->
    let r2 = arr.Update (arr.Init true) 1 false
    in (arr.Sub r2 0, arr.Sub r2 1)
  )
//│ res: (bool, bool,)
//│    = [ false, false ]



:escape
def Math: nothing
//│ Math: nothing
//│     = <missing implementation>

def div: int -> int -> int
def div a b = Math.trunc(a/b)
//│ div: int -> int -> int
//│    = <missing implementation>
//│ (number & 'a & 'b) -> (forall 'b, 'c. (number & 'b) -> 'c)
//│   <:  div:
//│ int -> int -> int
//│    = [Function: div1]

def mod: int -> int -> int
rec def mod a b = if a < b then a else mod (a - b) b
//│ mod: int -> int -> int
//│    = <missing implementation>
//│ (int & 'a) -> (forall 'b, 'c. ('b & int) -> (int | 'a | 'c))
//│   <:  mod:
//│ int -> int -> int
//│    = [Function: mod]

def stepImpl arrImpl = ArraysImpl {
    init = fun a -> (arrImpl.Init a, arrImpl.Init a);
    sub = fun ((r0, r1)) -> fun i ->
      if mod i 2 == 0
      then arrImpl.Sub r0 (div i 2)
      else arrImpl.Sub r1 (div i 2);
    update = fun ((r0, r1)) -> fun i -> fun a ->
      if mod i 2 == 0
      then (arrImpl.Update r0 (div i 2) a, r1)
      else (r0, arrImpl.Update r1 (div i 2) a);
    fold = fun f -> fun b -> fun ((r0, r1)) -> arrImpl.Fold f (arrImpl.Fold f b r0) r1
  }
//│ stepImpl: (ArraysRep[in 'A | 'A0 | 'A1 | 'A2 | 'A3 & ('A4 | 'A5 | 'A6 | 'A7) out 'A1 & ('A8 & ('A0 & ('A & ('A4 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11))) | 'A12 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)))) | 'A13 & ('A4 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11))) | 'A12 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11))))) | 'A14 & ('A & ('A4 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11))) | 'A12 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)))) | 'A13 & ('A4 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11))) | 'A12 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)))))) | 'A5 & ('A0 & ('A & ('A4 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11))) | 'A12 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)))) | 'A13 & ('A4 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11))) | 'A12 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11))))) | 'A14 & ('A & ('A4 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11))) | 'A12 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)))) | 'A13 & ('A4 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11))) | 'A12 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11))))))) | 'A15 & ('A8 & ('A0 & ('A & ('A4 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11))) | 'A12 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)))) | 'A13 & ('A4 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11))) | 'A12 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11))))) | 'A14 & ('A & ('A4 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11))) | 'A12 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)))) | 'A13 & ('A4 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11))) | 'A12 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)))))) | 'A5 & ('A0 & ('A & ('A4 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11))) | 'A12 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)))) | 'A13 & ('A4 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11))) | 'A12 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11))))) | 'A14 & ('A & ('A4 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11))) | 'A12 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)))) | 'A13 & ('A4 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11))) | 'A12 & ('A9 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11)) | 'A7 & ('A10 & ('A6 | 'A11) | 'A2 & ('A6 | 'A11))))))), in 'Rep | 'Rep0 | 'Rep1 | 'Rep2 | 'Rep3 & 'Rep4 & 'a & 'c & 'Rep5 & 'Rep6 & 'd & ('Rep7 | 'Rep8) | 'Rep9 & 'e & 'Rep10 & 'f & 'g & 'Rep11 & 'Rep12 & ('Rep13 | 'Rep14) out 'Rep11 & ('Rep15 & ('Rep9 & ('Rep0 & ('Rep7 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3))) | 'Rep6 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)))) | 'Rep4 & ('Rep7 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3))) | 'Rep6 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3))))) | 'Rep2 & ('Rep0 & ('Rep7 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3))) | 'Rep6 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)))) | 'Rep4 & ('Rep7 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3))) | 'Rep6 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)))))) | 'Rep8 & ('Rep9 & ('Rep0 & ('Rep7 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3))) | 'Rep6 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)))) | 'Rep4 & ('Rep7 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3))) | 'Rep6 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3))))) | 'Rep2 & ('Rep0 & ('Rep7 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3))) | 'Rep6 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)))) | 'Rep4 & ('Rep7 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3))) | 'Rep6 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3))))))) | 'Rep & ('Rep15 & ('Rep9 & ('Rep0 & ('Rep7 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3))) | 'Rep6 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)))) | 'Rep4 & ('Rep7 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3))) | 'Rep6 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3))))) | 'Rep2 & ('Rep0 & ('Rep7 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3))) | 'Rep6 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)))) | 'Rep4 & ('Rep7 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3))) | 'Rep6 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)))))) | 'Rep8 & ('Rep9 & ('Rep0 & ('Rep7 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3))) | 'Rep6 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)))) | 'Rep4 & ('Rep7 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3))) | 'Rep6 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3))))) | 'Rep2 & ('Rep0 & ('Rep7 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3))) | 'Rep6 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)))) | 'Rep4 & ('Rep7 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3))) | 'Rep6 & ('Rep12 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)) | 'Rep13 & ('Rep16 & ('Rep1 | 'Rep3) | 'Rep14 & ('Rep1 | 'Rep3)))))))] & 'h) -> ((ArraysImpl['A3, 'Rep17] with {fold: forall 'b, 'i, 'b0, 'A16, 'b1, 'b2, 'A17. (('A4 | 'A17) -> 'b1 -> ('b1 & 'b & 'b0) & ('A7 | 'A16) -> 'b0 -> ('b0 & 'b2) & 'i) -> (forall 'j. ('b1 & 'b0 & 'j) -> (forall 'k, 'l, 'm, 'Rep18, 'Rep19. ('Rep9 & 'l & 'Rep18, 'Rep3 & 'm & 'Rep19,) -> ('b2 | 'b | 'j | 'k))) | 'fold, init: forall 'n, 'A18, 'A19, 'o, 'p. ('A14 & 'A13 & 'n & 'A19 & 'A18) -> ('Rep14 | 'p, 'Rep8 | 'o,) | 'init, sub: forall 'q, 'r. ('Rep11 & 'q, 'Rep4 & 'r,) -> (forall 's, 't. (int & 's) -> ('A5 | 'A6 | 't)) | 'sub, update: forall 'u, 'v. ('Rep12 & 'u, 'Rep6 & 'v,) -> (forall 'w, 's. (int & 'w & 's) -> (forall 'x, 'A20, 'y, 'z, 'A21, 'a1. ('A10 & 'A15 & 'y & 'A20 & 'A21) -> (('Rep13 | 'u | 'x, 'Rep7 | 'v | 'a1,) | 'z))) | 'update}) | 'b1)
//│   where
//│     'Rep17 :> ('Rep14 | 'Rep13 | 'c1 | 'f | 'd1, 'Rep8 | 'Rep7 | 'e1 | 'a | 'f1,)
//│            <: ('Rep9 & 'e & 'Rep10 & 'f & 'g & 'Rep11 & 'Rep12, 'Rep3 & 'd & 'Rep4 & 'a & 'c & 'Rep5 & 'Rep6,)
//│     'A3 <: 'g1 & 'A22 & 'A10 & 'A23 & 'A15 & 'h1 & 'A24 & 'A14 & 'A25 & 'A13
//│         = [Function: stepImpl]

def stepImpl2_ty: (forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r) -> ArraysImpl['A, ('Rep, 'Rep)]
//│ stepImpl2_ty: (forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r) -> ArraysImpl['A, ('Rep, 'Rep,)]
//│             = <missing implementation>

def stepImpl2 arr = arr stepImpl
//│ stepImpl2: ((forall 'A, 'A0, 'Rep, 'Rep0, 'a, 'c, 'A1, 'd, 'A2, 'Rep1, 'Rep2, 'e, 'f, 'g, 'Rep3, 'Rep4, 'Rep5, 'A3, 'update, 'Rep6, 'h, 'A4, 'Rep7, 'A5, 'Rep8, 'Rep9, 'i, 'A6, 'Rep10, 'A7, 'A8, 'j, 'A9, 'Rep11, 'k, 'sub, 'A10, 'A11, 'Rep12, 'l, 'init, 'A12, 'fold, 'm, 'A13, 'Rep13, 'A14, 'Rep14, 'A15, 'A16, 'n, 'Rep15, 'A17, 'Rep16, 'A18, 'o, 'Rep17, 'A19. (ArraysRep[in 'A | 'A6 | 'A15 | 'A1 | 'A0 & ('A2 | 'A8 | 'A12 | 'A9) out 'A1 & ('A12 & ('A15 & ('A13 & ('A6 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19))) | 'A4 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)))) | 'A8 & ('A6 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19))) | 'A4 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19))))) | 'A5 & ('A13 & ('A6 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19))) | 'A4 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)))) | 'A8 & ('A6 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19))) | 'A4 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)))))) | 'A7 & ('A15 & ('A13 & ('A6 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19))) | 'A4 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)))) | 'A8 & ('A6 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19))) | 'A4 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19))))) | 'A5 & ('A13 & ('A6 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19))) | 'A4 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)))) | 'A8 & ('A6 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19))) | 'A4 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19))))))) | 'A18 & ('A12 & ('A15 & ('A13 & ('A6 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19))) | 'A4 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)))) | 'A8 & ('A6 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19))) | 'A4 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19))))) | 'A5 & ('A13 & ('A6 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19))) | 'A4 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)))) | 'A8 & ('A6 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19))) | 'A4 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)))))) | 'A7 & ('A15 & ('A13 & ('A6 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19))) | 'A4 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)))) | 'A8 & ('A6 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19))) | 'A4 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19))))) | 'A5 & ('A13 & ('A6 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19))) | 'A4 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)))) | 'A8 & ('A6 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19))) | 'A4 & ('A & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19)) | 'A16 & ('A2 & ('A9 | 'A19) | 'A14 & ('A9 | 'A19))))))), in 'Rep4 | 'Rep15 | 'Rep11 | 'Rep8 | 'Rep1 & 'e & 'Rep7 & 'k & 'n & 'Rep5 & 'Rep10 & ('Rep14 | 'Rep17) | 'Rep13 & 'j & 'Rep3 & 'o & 'l & 'Rep & 'Rep2 & ('Rep16 | 'Rep6) out 'Rep7 & ('Rep & ('Rep12 & ('Rep10 & ('Rep2 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1))) | 'Rep16 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)))) | 'Rep14 & ('Rep2 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1))) | 'Rep16 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1))))) | 'Rep17 & ('Rep10 & ('Rep2 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1))) | 'Rep16 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)))) | 'Rep14 & ('Rep2 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1))) | 'Rep16 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)))))) | 'Rep4 & ('Rep12 & ('Rep10 & ('Rep2 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1))) | 'Rep16 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)))) | 'Rep14 & ('Rep2 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1))) | 'Rep16 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1))))) | 'Rep17 & ('Rep10 & ('Rep2 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1))) | 'Rep16 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)))) | 'Rep14 & ('Rep2 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1))) | 'Rep16 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1))))))) | 'Rep15 & ('Rep & ('Rep12 & ('Rep10 & ('Rep2 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1))) | 'Rep16 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)))) | 'Rep14 & ('Rep2 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1))) | 'Rep16 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1))))) | 'Rep17 & ('Rep10 & ('Rep2 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1))) | 'Rep16 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)))) | 'Rep14 & ('Rep2 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1))) | 'Rep16 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)))))) | 'Rep4 & ('Rep12 & ('Rep10 & ('Rep2 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1))) | 'Rep16 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)))) | 'Rep14 & ('Rep2 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1))) | 'Rep16 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1))))) | 'Rep17 & ('Rep10 & ('Rep2 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1))) | 'Rep16 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)))) | 'Rep14 & ('Rep2 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1))) | 'Rep16 & ('Rep13 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)) | 'Rep8 & ('Rep0 & ('Rep11 | 'Rep1) | 'Rep6 & ('Rep11 | 'Rep1)))))))] & 'g) -> ((ArraysImpl['A0, 'Rep9] with {fold: forall 'b, 'p, 'b0, 'b1, 'A20, 'A21, 'b2. (('A2 | 'A21) -> 'b1 -> ('b1 & 'b & 'b2) & ('A9 | 'A20) -> 'b2 -> ('b2 & 'b0) & 'p) -> (forall 'q. ('b1 & 'b2 & 'q) -> (forall 'Rep18, 'r, 's, 'Rep19, 't. ('Rep13 & 'r & 'Rep19, 'Rep1 & 't & 'Rep18,) -> ('b0 | 'b | 'q | 's))) | 'fold, init: forall 'u, 'A22, 'v, 'A23, 'w. ('A4 & 'A16 & 'v & 'A23 & 'A22) -> ('Rep6 | 'u, 'Rep17 | 'w,) | 'init, sub: forall 'x, 'y. ('Rep & 'x, 'Rep7 & 'y,) -> (forall 'z, 'a1. (int & 'z) -> ('A8 | 'A12 | 'a1)) | 'sub, update: forall 'b1, 'c1. ('Rep2 & 'b1, 'Rep10 & 'c1,) -> (forall 'z, 'd1. (int & 'd1 & 'z) -> (forall 'A24, 'A25, 'e1, 'f1, 'g1, 'h1. ('A18 & 'A5 & 'g1 & 'A24 & 'A25) -> (('Rep16 | 'b1 | 'h1, 'Rep14 | 'c1 | 'f1,) | 'e1))) | 'update}) | 'a)) -> 'i1 & 'j1) -> 'i1
//│   where
//│     'Rep9 :> ('Rep6 | 'Rep16 | 'm | 'o | 'i, 'Rep17 | 'Rep14 | 'h | 'k | 'c,)
//│           <: ('Rep13 & 'j & 'Rep3 & 'o & 'l & 'Rep & 'Rep2, 'Rep1 & 'e & 'Rep7 & 'k & 'n & 'Rep5 & 'Rep10,)
//│     'A0 <: 'd & 'A3 & 'A18 & 'A10 & 'A5 & 'f & 'A17 & 'A4 & 'A11 & 'A16
//│          = [Function: stepImpl2]

stepImpl2_ty = stepImpl2
//│ ((forall 'A, 'Rep, 'a, 'c, 'Rep0, 'd, 'e, 'A0, 'A1, 'Rep1, 'Rep2, 'Rep3, 'f, 'g, 'A2, 'h, 'A3, 'A4, 'Rep4, 'A5, 'A6, 'i, 'update, 'init, 'Rep5, 'Rep6, 'A7, 'Rep7, 'Rep8, 'j, 'A8, 'A9, 'Rep9, 'Rep10, 'A10, 'k, 'A11, 'A12, 'l, 'Rep11, 'm, 'n, 'A13, 'A14, 'Rep12, 'Rep13, 'Rep14, 'A15, 'A16, 'A17, 'A18, 'A19, 'Rep15, 'Rep16, 'Rep17, 'o, 'sub, 'fold. (ArraysRep[in 'A14 | 'A4 | 'A17 | 'A16 | 'A & ('A8 | 'A3 | 'A15 | 'A0) out 'A19 & ('A10 & ('A6 & ('A9 & ('A12 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13))) | 'A3 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)))) | 'A15 & ('A12 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13))) | 'A3 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13))))) | 'A8 & ('A9 & ('A12 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13))) | 'A3 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)))) | 'A15 & ('A12 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13))) | 'A3 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)))))) | 'A17 & ('A6 & ('A9 & ('A12 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13))) | 'A3 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)))) | 'A15 & ('A12 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13))) | 'A3 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13))))) | 'A8 & ('A9 & ('A12 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13))) | 'A3 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)))) | 'A15 & ('A12 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13))) | 'A3 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13))))))) | 'A16 & ('A10 & ('A6 & ('A9 & ('A12 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13))) | 'A3 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)))) | 'A15 & ('A12 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13))) | 'A3 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13))))) | 'A8 & ('A9 & ('A12 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13))) | 'A3 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)))) | 'A15 & ('A12 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13))) | 'A3 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)))))) | 'A17 & ('A6 & ('A9 & ('A12 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13))) | 'A3 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)))) | 'A15 & ('A12 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13))) | 'A3 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13))))) | 'A8 & ('A9 & ('A12 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13))) | 'A3 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)))) | 'A15 & ('A12 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13))) | 'A3 & ('A4 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13)) | 'A7 & ('A14 & ('A0 | 'A13) | 'A1 & ('A0 | 'A13))))))), in 'Rep5 | 'Rep9 | 'Rep11 | 'Rep16 | 'i & 'Rep17 & 'Rep1 & 'k & 'f & 'Rep12 & 'Rep3 & ('Rep13 | 'Rep14) | 'h & 'Rep7 & 'l & 'o & 'Rep6 & 'Rep0 & 'Rep8 & ('Rep10 | 'Rep) out 'Rep0 & ('Rep9 & ('Rep3 & ('Rep12 & ('Rep15 & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8))) | 'Rep & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)))) | 'Rep5 & ('Rep15 & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8))) | 'Rep & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8))))) | 'Rep13 & ('Rep12 & ('Rep15 & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8))) | 'Rep & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)))) | 'Rep5 & ('Rep15 & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8))) | 'Rep & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)))))) | 'Rep7 & ('Rep3 & ('Rep12 & ('Rep15 & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8))) | 'Rep & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)))) | 'Rep5 & ('Rep15 & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8))) | 'Rep & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8))))) | 'Rep13 & ('Rep12 & ('Rep15 & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8))) | 'Rep & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)))) | 'Rep5 & ('Rep15 & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8))) | 'Rep & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8))))))) | 'Rep10 & ('Rep9 & ('Rep3 & ('Rep12 & ('Rep15 & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8))) | 'Rep & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)))) | 'Rep5 & ('Rep15 & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8))) | 'Rep & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8))))) | 'Rep13 & ('Rep12 & ('Rep15 & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8))) | 'Rep & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)))) | 'Rep5 & ('Rep15 & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8))) | 'Rep & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)))))) | 'Rep7 & ('Rep3 & ('Rep12 & ('Rep15 & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8))) | 'Rep & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)))) | 'Rep5 & ('Rep15 & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8))) | 'Rep & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8))))) | 'Rep13 & ('Rep12 & ('Rep15 & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8))) | 'Rep & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)))) | 'Rep5 & ('Rep15 & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8))) | 'Rep & ('Rep17 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)) | 'Rep16 & ('Rep2 & ('Rep11 | 'Rep8) | 'Rep14 & ('Rep11 | 'Rep8)))))))] & 'j) -> ((ArraysImpl['A, 'Rep4] with {fold: forall 'p, 'b, 'b0, 'A20, 'A21, 'b1, 'b2. (('A8 | 'A20) -> 'b1 -> ('b1 & 'b & 'b0) & ('A0 | 'A21) -> 'b0 -> ('b0 & 'b2) & 'p) -> (forall 'q. ('b1 & 'b0 & 'q) -> (forall 'r, 's, 'Rep18, 't, 'Rep19. ('Rep17 & 't & 'Rep18, 'Rep8 & 'r & 'Rep19,) -> ('b2 | 'b | 'q | 's))) | 'fold, init: forall 'A22, 'A23, 'u, 'v, 'w. ('A7 & 'A1 & 'v & 'A22 & 'A23) -> ('Rep14 | 'u, 'Rep | 'w,) | 'init, sub: forall 'x, 'y. ('Rep12 & 'y, 'Rep7 & 'x,) -> (forall 'z, 'a1. (int & 'z) -> ('A3 | 'A15 | 'a1)) | 'sub, update: forall 'b1, 'c1. ('Rep3 & 'b1, 'Rep0 & 'c1,) -> (forall 'z, 'd1. (int & 'd1 & 'z) -> (forall 'A24, 'e1, 'f1, 'A25, 'g1, 'h1. ('A19 & 'A10 & 'h1 & 'A25 & 'A24) -> (('Rep13 | 'b1 | 'e1, 'Rep10 | 'c1 | 'f1,) | 'g1))) | 'update}) | 'd)) -> 'i1 & 'j1) -> 'i1
//│   where
//│     'Rep4 :> ('Rep14 | 'Rep13 | 'n | 'k | 'e, 'Rep | 'Rep10 | 'g | 'l | 'a,)
//│           <: ('Rep17 & 'i & 'Rep1 & 'k & 'f & 'Rep12 & 'Rep3, 'Rep8 & 'h & 'Rep7 & 'l & 'o & 'Rep6 & 'Rep0,)
//│     'A <: 'c & 'A11 & 'A19 & 'A5 & 'A10 & 'm & 'A2 & 'A7 & 'A18 & 'A1
//│   <:  stepImpl2_ty:
//│ (forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r) -> ArraysImpl['A, ('Rep, 'Rep,)]
//│             = [Function: stepImpl2]


def step: Arrays['a] -> Arrays['a]
//│ step: Arrays['a] -> Arrays['a]
//│     = <missing implementation>

:e // * Since "sound extrusion"
def step arr f = f (stepImpl2 arr)
//│ ((forall 'Rep, 'A, 'Rep0, 'a, 'Rep1, 'Rep2, 'A0, 'Rep3, 'Rep4, 'A1, 'Rep5, 'Rep6, 'Rep7, 'c, 'd, 'A2, 'A3, 'A4, 'Rep8, 'Rep9, 'A5, 'A6, 'Rep10, 'e, 'Rep11, 'A7, 'f, 'A8, 'Rep12, 'A9, 'A10, 'Rep13, 'A11, 'g, 'A12, 'A13, 'h, 'A14, 'A15, 'i, 'A16, 'A17, 'j, 'k, 'Rep14, 'l, 'm, 'n, 'update, 'Rep15, 'init, 'A18, 'A19, 'sub, 'Rep16, 'Rep17, 'o, 'fold. (ArraysRep[in 'A3 | 'A4 | 'A19 | 'A16 | 'A9 & ('A6 | 'A | 'A18 | 'A13) out 'A13 & ('A7 & ('A1 & ('A12 & ('A5 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3))) | 'A18 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)))) | 'A6 & ('A5 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3))) | 'A18 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3))))) | 'A19 & ('A12 & ('A5 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3))) | 'A18 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)))) | 'A6 & ('A5 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3))) | 'A18 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)))))) | 'A16 & ('A1 & ('A12 & ('A5 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3))) | 'A18 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)))) | 'A6 & ('A5 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3))) | 'A18 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3))))) | 'A19 & ('A12 & ('A5 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3))) | 'A18 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)))) | 'A6 & ('A5 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3))) | 'A18 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3))))))) | 'A14 & ('A7 & ('A1 & ('A12 & ('A5 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3))) | 'A18 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)))) | 'A6 & ('A5 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3))) | 'A18 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3))))) | 'A19 & ('A12 & ('A5 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3))) | 'A18 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)))) | 'A6 & ('A5 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3))) | 'A18 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)))))) | 'A16 & ('A1 & ('A12 & ('A5 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3))) | 'A18 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)))) | 'A6 & ('A5 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3))) | 'A18 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3))))) | 'A19 & ('A12 & ('A5 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3))) | 'A18 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)))) | 'A6 & ('A5 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3))) | 'A18 & ('A11 & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3)) | 'A & ('A4 & ('A10 | 'A3) | 'A0 & ('A10 | 'A3))))))), in 'Rep17 | 'Rep5 | 'Rep8 | 'Rep1 | 'j & 'd & 'Rep4 & 'Rep16 & 'Rep0 & 'Rep11 & 'k & ('Rep6 | 'Rep9) | 'Rep13 & 'e & 'Rep & 'm & 'n & 'Rep3 & 'Rep12 & ('Rep7 | 'Rep14) out 'Rep13 & ('Rep12 & ('Rep5 & ('Rep17 & ('Rep6 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10))) | 'Rep16 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)))) | 'Rep4 & ('Rep6 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10))) | 'Rep16 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10))))) | 'Rep & ('Rep17 & ('Rep6 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10))) | 'Rep16 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)))) | 'Rep4 & ('Rep6 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10))) | 'Rep16 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)))))) | 'Rep7 & ('Rep5 & ('Rep17 & ('Rep6 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10))) | 'Rep16 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)))) | 'Rep4 & ('Rep6 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10))) | 'Rep16 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10))))) | 'Rep & ('Rep17 & ('Rep6 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10))) | 'Rep16 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)))) | 'Rep4 & ('Rep6 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10))) | 'Rep16 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10))))))) | 'Rep8 & ('Rep12 & ('Rep5 & ('Rep17 & ('Rep6 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10))) | 'Rep16 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)))) | 'Rep4 & ('Rep6 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10))) | 'Rep16 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10))))) | 'Rep & ('Rep17 & ('Rep6 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10))) | 'Rep16 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)))) | 'Rep4 & ('Rep6 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10))) | 'Rep16 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)))))) | 'Rep7 & ('Rep5 & ('Rep17 & ('Rep6 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10))) | 'Rep16 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)))) | 'Rep4 & ('Rep6 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10))) | 'Rep16 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10))))) | 'Rep & ('Rep17 & ('Rep6 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10))) | 'Rep16 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)))) | 'Rep4 & ('Rep6 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10))) | 'Rep16 & ('Rep15 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)) | 'Rep14 & ('Rep0 & ('Rep9 | 'Rep10) | 'Rep1 & ('Rep9 | 'Rep10)))))))] & 'f) -> ((ArraysImpl['A9, 'Rep2] with {fold: forall 'A20, 'b, 'A21, 'b0, 'b1, 'p, 'b2. (('A6 | 'A20) -> 'b1 -> ('b1 & 'b2 & 'b0) & ('A13 | 'A21) -> 'b0 -> ('b0 & 'b) & 'p) -> (forall 'q. ('b1 & 'b0 & 'q) -> (forall 'r, 'Rep18, 's, 't, 'Rep19. ('Rep0 & 's & 'Rep19, 'Rep13 & 'r & 'Rep18,) -> ('b | 'b2 | 'q | 't))) | 'fold, init: forall 'u, 'v, 'A22, 'w, 'A23. ('A0 & 'A10 & 'v & 'A23 & 'A22) -> ('Rep9 | 'w, 'Rep14 | 'u,) | 'init, sub: forall 'x, 'y. ('Rep4 & 'x, 'Rep & 'y,) -> (forall 'z, 'a1. (int & 'z) -> ('A | 'A18 | 'a1)) | 'sub, update: forall 'b1, 'c1. ('Rep16 & 'b1, 'Rep12 & 'c1,) -> (forall 'z, 'd1. (int & 'd1 & 'z) -> (forall 'e1, 'A24, 'f1, 'A25, 'g1, 'h1. ('A7 & 'A1 & 'h1 & 'A24 & 'A25) -> (('Rep6 | 'b1 | 'g1, 'Rep7 | 'c1 | 'e1,) | 'f1))) | 'update}) | 'h)) -> 'i1 & 'j1) -> (forall 'k1, 'l1, 'm1. (('k1 | 'i1) -> 'l1 & 'm1) -> 'l1)
//│   where
//│     'Rep2 :> ('Rep9 | 'Rep6 | 'o | 'k | 'a, 'Rep14 | 'Rep7 | 'g | 'm | 'i,)
//│           <: ('Rep0 & 'j & 'Rep11 & 'k & 'd & 'Rep4 & 'Rep16, 'Rep13 & 'e & 'Rep & 'm & 'n & 'Rep3 & 'Rep12,)
//│     'A9 <: 'l & 'A2 & 'A7 & 'A17 & 'A1 & 'c & 'A8 & 'A0 & 'A15 & 'A10
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.315: 	def step arr f = f (stepImpl2 arr)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: class type parameter Rep is defined at:
//│ ║  l.14: 	class ArraysRep[A, Rep]
//│ ╙──      	                   ^^^
//│     = [Function: step]

// * Now the annotation was okay [until "sound extrusion"] because the result no longer extruded it...
:e // * Since "sound extrusion"
def step (arr: Arrays['a]) f = f (stepImpl2 arr)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.339: 	def step (arr: Arrays['a]) f = f (stepImpl2 arr)
//│ ║         	                                  ^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: class type parameter Rep is defined at:
//│ ║  l.14: 	class ArraysRep[A, Rep]
//│ ╙──      	                   ^^^
//│ Arrays['a] -> (forall 'b, 'c, 'd. ((error | 'b) -> 'c & 'd) -> 'c)
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step1]

// * Don't know why these don't work:
:e
def step arr f = f (stepImpl2_ty arr)
//│ (forall 'r. (ArraysRep[in 'A out 'A | 'A0, in 'Rep out 'Rep | 'Rep0] -> 'r) -> 'r & 'a) -> (forall 'b, 'c, 'A1, 'Rep1, 'd. ((ArraysImpl['A1, ('Rep1, 'Rep1,)] | 'd) -> 'b & 'c) -> 'b)
//│   where
//│     'Rep1 :> 'Rep
//│           <: 'Rep0
//│     'A1 :> 'A
//│         <: 'A0
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.359: 	def step arr f = f (stepImpl2_ty arr)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ╙──      	                         ^^^^
//│     = [Function: step2]
:e
def step (arr: Arrays['a]) f = f (stepImpl2_ty arr)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.379: 	def step (arr: Arrays['a]) f = f (stepImpl2_ty arr)
//│ ║         	                                  ^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ╙──      	                         ^^^^
//│ Arrays['a] -> (forall 'b, 'c, 'd. ((error | 'd) -> 'b & 'c) -> 'b)
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step3]


ssb = step (step base)
//│ ssb: Arrays['a]
//│    = [Function (anonymous)]

ssb (fun arr ->
    let r2 = arr.Update (arr.Init true) 1 false
    in (arr.Sub r2 0, arr.Sub r2 1)
  )
//│ res: (bool, bool,)
//│    = [ true, false ]



rec def mkMonoArray n =
  if n == 0 then base else step (mkMonoArray(n - 1))
//│ mkMonoArray: (int & 'b) -> (forall 'c, 'a. Arrays['a] | 'c)
//│            = [Function: mkMonoArray]

snb = mkMonoArray 5
//│ snb: Arrays['a]
//│    = [Function (anonymous)]

snb (fun arr -> arr.Init true)
//│ res: anything
//│    = [
//│        [ [ [Array], [Array] ], [ [Array], [Array] ] ],
//│        [ [ [Array], [Array] ], [ [Array], [Array] ] ]
//│      ]


// * From the paper:
// let mkPolyArray n = {∀α(∃ρ.∀β.sig(α,ρ,β))} (mkMonoArray n)





