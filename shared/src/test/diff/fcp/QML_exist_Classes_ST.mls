// * Adaptation of QML's original existentials example; using encoded existentials and classes


:NoRecursiveTypes
:GeneralizeCurriedFunctions
:NoConstrainedTypes
// :DistributeForalls
// :ArgGen

// TODO try without some signatures



class ArraysRep[A, Rep]
  method Init: A -> Rep
  method Sub: Rep -> int -> A
  method Update: Rep -> int -> A -> Rep
  method Fold: (A -> 'b -> 'b) -> 'b -> Rep -> 'b
//│ Defined class ArraysRep[=A, =Rep]
//│ Declared ArraysRep.Init: ArraysRep['A, 'Rep] -> 'A -> 'Rep
//│ Declared ArraysRep.Sub: ArraysRep['A, 'Rep] -> 'Rep -> int -> 'A
//│ Declared ArraysRep.Update: ArraysRep['A, 'Rep] -> 'Rep -> int -> 'A -> 'Rep
//│ Declared ArraysRep.Fold: ArraysRep['A, 'Rep] -> ('A -> 'b -> 'b) -> 'b -> 'Rep -> 'b

class ArraysImpl[A, Rep]: ArraysRep[A, Rep] & {
    init: A -> Rep;
    sub: Rep -> int -> A;
    update: Rep -> int -> A -> Rep;
    fold: forall 'b. (A -> 'b -> 'b) -> 'b -> Rep -> 'b
  }
  method Init = this.init
  method Sub = this.sub
  method Update = this.update
  method Fold = this.fold
//│ Defined class ArraysImpl[=A, =Rep]
//│ Defined ArraysImpl.Init: ArraysImpl['A, 'Rep] -> 'A -> 'Rep
//│ Defined ArraysImpl.Sub: ArraysImpl['A, 'Rep] -> 'Rep -> int -> 'A
//│ Defined ArraysImpl.Update: ArraysImpl['A, 'Rep] -> 'Rep -> int -> 'A -> 'Rep
//│ Defined ArraysImpl.Fold: ArraysImpl['A, 'Rep] -> ('A -> 'b -> 'b) -> 'b -> 'Rep -> 'b

type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ Defined type alias Arrays[=A]



baseImpl = ArraysImpl {
    init   = fun a -> a;
    sub    = fun r -> fun (i : int) -> r;
    update = fun r -> fun (i : int) -> fun a -> a;
    fold   = fun f -> fun b -> fun r -> f r b
  }
//│ baseImpl: ArraysImpl['Rep, 'Rep] with {fold: forall 'a 'b 'c. ('a -> 'b -> 'c) -> 'b -> 'a -> 'c, init: forall 'd. 'd -> 'd, sub: forall 'e. 'e -> int -> 'e, update: forall 'f. anything -> int -> 'f -> 'f}
//│         = ArraysImpl {
//│             init: [Function: init],
//│             sub: [Function: sub],
//│             update: [Function: update],
//│             fold: [Function: fold]
//│           }

def base: Arrays['a]
def base f = f baseImpl
//│ base: Arrays['a]
//│     = <missing implementation>
//│ ((forall 'Rep. ArraysImpl['Rep, 'Rep] with {fold: forall 'a 'b 'c. ('a -> 'b -> 'c) -> 'b -> 'a -> 'c, init: forall 'd. 'd -> 'd, sub: forall 'e. 'e -> int -> 'e, update: forall 'f. anything -> int -> 'f -> 'f}) -> 'g) -> 'g
//│   <:  base:
//│ Arrays['a]
//│     = [Function: base]



def simpleStepImpl arrImpl = ArraysImpl {
    init   = fun a -> (arrImpl.Init a, "initialized");
    sub    = fun ((r0, r1)) -> fun i -> arrImpl.Sub r0 i;
    update = fun ((r0, r1)) -> fun i -> fun a -> (arrImpl.Update r0 i a, "updated");
    fold   = fun f -> fun b -> fun ((r0, r1)) -> arrImpl.Fold f b r0
  }
//│ simpleStepImpl: ArraysRep[in 'A | 'A0 | 'A1 | 'A2 & 'A3 out 'A0 & 'A2, in 'Rep | 'Rep0 out 'Rep1 & ('Rep2 | 'Rep3)] -> (ArraysImpl['A3, 'Rep4] with {fold: forall 'b. ('A2 -> 'b -> 'b) -> 'b -> ('Rep0, anything,) -> 'b, init: 'A -> ('Rep1, "initialized",), sub: ('Rep, anything,) -> int -> 'A0, update: forall 'a. ('Rep3 & 'a, anything,) -> int -> 'A1 -> ('Rep2 | 'a, "updated",)})
//│   where
//│     'Rep4 :> ('Rep1 | 'Rep2 | 'c, "initialized" | "updated",)
//│           <: (nothing, anything,)
//│     'A3 :> 'A0
//│         <: nothing
//│               = [Function: simpleStepImpl]

// * Something off is going on here
:stats
:Fuel 50000
simpleStepImpl : ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string)]
//│ res: ArraysImpl['a, 'r] -> ArraysImpl['a, ('r, string,)]
//│    = [Function: simpleStepImpl]
//│ constrain calls  : 46463
//│ annoying  calls  : 101
//│ subtyping calls  : 380933
:ResetFuel

// def simpleStepImpl2_ty: Arrays['a] -> ArraysImpl['a, ('_, string)]
// def simpleStepImpl2_ty: Arrays['a] -> ArraysImpl['a, '_]
// def simpleStepImpl2 arr = arr simpleStepImpl

def simpleStepImpl2_ty: (forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r) -> ArraysImpl['A, ('Rep, string)]
//│ simpleStepImpl2_ty: (forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r) -> ArraysImpl['A, ('Rep, string,)]
//│                   = <missing implementation>


def simpleStepImpl2 arr = arr simpleStepImpl
//│ simpleStepImpl2: ((forall 'Rep 'Rep0 'Rep1 'A 'A0 'Rep2 'A1 'A2 'a 'Rep3 'Rep4 'A3. ArraysRep[in 'A3 | 'A1 | 'A0 | 'A & 'A2 out 'A1 & 'A, in 'Rep0 | 'Rep2 out 'Rep4 & ('Rep1 | 'Rep3)] -> (ArraysImpl['A2, 'Rep] with {fold: forall 'b. ('A -> 'b -> 'b) -> 'b -> ('Rep2, anything,) -> 'b, init: 'A3 -> ('Rep4, "initialized",), sub: ('Rep0, anything,) -> int -> 'A1, update: forall 'c. ('Rep3 & 'c, anything,) -> int -> 'A0 -> ('Rep1 | 'c, "updated",)})) -> 'd) -> 'd
//│   where
//│     'Rep :> ('Rep4 | 'Rep1 | 'a, "initialized" | "updated",)
//│          <: (nothing, anything,)
//│     'A2 :> 'A1
//│         <: nothing
//│                = [Function: simpleStepImpl2]

simpleStepImpl2_ty = simpleStepImpl2
//│ ((forall 'A 'a 'Rep 'A0 'Rep0 'Rep1 'A1 'Rep2 'Rep3 'A2 'A3 'Rep4. ArraysRep[in 'A2 | 'A | 'A0 | 'A1 & 'A3 out 'A & 'A1, in 'Rep1 | 'Rep4 out 'Rep2 & ('Rep | 'Rep3)] -> (ArraysImpl['A3, 'Rep0] with {fold: forall 'b. ('A1 -> 'b -> 'b) -> 'b -> ('Rep4, anything,) -> 'b, init: 'A2 -> ('Rep2, "initialized",), sub: ('Rep1, anything,) -> int -> 'A, update: forall 'c. ('Rep3 & 'c, anything,) -> int -> 'A0 -> ('Rep | 'c, "updated",)})) -> 'd) -> 'd
//│   where
//│     'Rep0 :> ('Rep2 | 'Rep | 'a, "initialized" | "updated",)
//│           <: (nothing, anything,)
//│     'A3 :> 'A
//│         <: nothing
//│   <:  simpleStepImpl2_ty:
//│ (forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r) -> ArraysImpl['A, ('Rep, string,)]
//│                   = [Function: simpleStepImpl2]

:e // * Annotation is actually counter-productive... probably because the rigid universal in Arrays gets extruded!
def simpleStepImpl2_ty (arr: Arrays['a]) = arr simpleStepImpl
//│ Arrays['a] -> error
//│   <:  simpleStepImpl2_ty:
//│ (forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r) -> ArraysImpl['A, ('Rep, string,)]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.126: 	def simpleStepImpl2_ty (arr: Arrays['a]) = arr simpleStepImpl
//│ ║         	                                           ^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── from reference:
//│ ║  l.73: 	    sub    = fun ((r0, r1)) -> fun i -> arrImpl.Sub r0 i;
//│ ╙──      	                                                    ^^
//│                   = [Function: simpleStepImpl2_ty1]

def simpleStep: Arrays['a] -> Arrays['a]
//│ simpleStep: Arrays['a] -> Arrays['a]
//│           = <missing implementation>

:e // * Since "sound extrusion"
def simpleStep arr f = f (simpleStepImpl2 arr)
//│ ((forall 'a 'A 'Rep 'A0 'A1 'Rep0 'Rep1 'Rep2 'Rep3 'A2 'A3 'Rep4. ArraysRep[in 'A0 | 'A1 | 'A3 | 'A2 & 'A out 'A1 & 'A2, in 'Rep1 | 'Rep4 out 'Rep3 & ('Rep | 'Rep0)] -> (ArraysImpl['A, 'Rep2] with {fold: forall 'b. ('A2 -> 'b -> 'b) -> 'b -> ('Rep4, anything,) -> 'b, init: 'A0 -> ('Rep3, "initialized",), sub: ('Rep1, anything,) -> int -> 'A1, update: forall 'c. ('Rep0 & 'c, anything,) -> int -> 'A3 -> ('Rep | 'c, "updated",)})) -> 'd) -> ('d -> 'e) -> 'e
//│   where
//│     'Rep2 :> ('Rep3 | 'Rep | 'a, "initialized" | "updated",)
//│           <: (nothing, anything,)
//│     'A :> 'A1
//│        <: nothing
//│   <:  simpleStep:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.149: 	def simpleStep arr f = f (simpleStepImpl2 arr)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── from reference:
//│ ║  l.73: 	    sub    = fun ((r0, r1)) -> fun i -> arrImpl.Sub r0 i;
//│ ╙──      	                                                    ^^
//│           = [Function: simpleStep]

:e // TODO update: seems like the given type for `simpleStepImpl2_ty` is not precise enough
def simpleStep arr f = f (simpleStepImpl2_ty arr)
//│ (forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r) -> (ArraysImpl['A, ('Rep, string,)] -> 'a) -> 'a
//│   where
//│     'Rep :> anything
//│     'A :> anything
//│   <:  simpleStep:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.173: 	def simpleStep arr f = f (simpleStepImpl2_ty arr)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ╙──      	                         ^^^^
//│           = [Function: simpleStep1]

sb = simpleStep base
//│ sb: Arrays['a]
//│   = [Function (anonymous)]

sb (fun arr -> arr.Init true)
//│ res: anything
//│    = [ true, 'initialized' ]

sb (fun arr -> arr.Sub (arr.Init true) 1)
//│ res: true
//│    = true

:e // * Expected – argument order confusion
sb (fun arr -> arr.Sub 0 (arr.Init true))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.204: 	sb (fun arr -> arr.Sub 0 (arr.Init true))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `'Rep` is not an instance of type `int`
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.16: 	  method Sub: Rep -> int -> A
//│ ║        	                     ^^^
//│ ╟── from application:
//│ ║  l.204: 	sb (fun arr -> arr.Sub 0 (arr.Init true))
//│ ║         	                          ^^^^^^^^^^^^^
//│ ╟── Note: class type parameter Rep is defined at:
//│ ║  l.14: 	class ArraysRep[A, Rep]
//│ ╙──      	                   ^^^
//│ res: error | true
//│ Runtime error:
//│   TypeError: number 0 is not iterable (cannot read property Symbol(Symbol.iterator))

sb (fun arr -> arr.Update (arr.Init true) 1 false)
//│ res: anything
//│    = [ false, 'updated' ]

:e // * Rightly prevent skolem confusion
sb (fun arr1 -> sb (fun arr2 -> arr2.Update (arr1.Init true)))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.229: 	sb (fun arr1 -> sb (fun arr2 -> arr2.Update (arr1.Init true)))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `'Rep` does not match type `nothing`
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── from application:
//│ ║  l.229: 	sb (fun arr1 -> sb (fun arr2 -> arr2.Update (arr1.Init true)))
//│ ╙──       	                                             ^^^^^^^^^^^^^^
//│ res: int -> anything -> anything | error
//│    = [Function (anonymous)]

sb (fun arr ->
    let r2 = arr.Update (arr.Init true) 1 false
    in (arr.Sub r2 0, arr.Sub r2 1)
  )
//│ res: (bool, bool,)
//│    = [ false, false ]



:escape
def Math: nothing
//│ Math: nothing
//│     = <missing implementation>

def div: int -> int -> int
def div a b = Math.trunc(a/b)
//│ div: int -> int -> int
//│    = <missing implementation>
//│ number -> number -> nothing
//│   <:  div:
//│ int -> int -> int
//│    = [Function: div1]

def mod: int -> int -> int
rec def mod a b = if a < b then a else mod (a - b) b
//│ mod: int -> int -> int
//│    = <missing implementation>
//│ int -> int -> int
//│   <:  mod:
//│ int -> int -> int
//│    = [Function: mod]

def stepImpl arrImpl = ArraysImpl {
    init = fun a -> (arrImpl.Init a, arrImpl.Init a);
    sub = fun ((r0, r1)) -> fun i ->
      if mod i 2 == 0
      then arrImpl.Sub r0 (div i 2)
      else arrImpl.Sub r1 (div i 2);
    update = fun ((r0, r1)) -> fun i -> fun a ->
      if mod i 2 == 0
      then (arrImpl.Update r0 (div i 2) a, r1)
      else (r0, arrImpl.Update r1 (div i 2) a);
    fold = fun f -> fun b -> fun ((r0, r1)) -> arrImpl.Fold f (arrImpl.Fold f b r0) r1
  }
//│ stepImpl: ArraysRep[in 'A | 'A0 | 'A1 | 'A2 | 'A3 | 'A4 | 'A5 & ('A6 | 'A7) out 'A1 & 'A2 & 'A6 & 'A7, in 'Rep | 'Rep0 | 'Rep1 | 'Rep2 out 'Rep3 & 'Rep4 & ('Rep5 & ('Rep6 | 'Rep7) | 'Rep8 & ('Rep6 | 'Rep7))] -> (ArraysImpl['A5, 'Rep9] with {fold: forall 'b 'b0 'b1. ('A6 -> 'b -> ('b & 'b0) & 'A7 -> 'b1 -> ('b & 'b1 & 'b0)) -> ('b & 'b1 & 'b0) -> ('Rep2, 'Rep1,) -> 'b0, init: ('A & 'A0) -> ('Rep3, 'Rep4,), sub: ('Rep, 'Rep0,) -> int -> ('A1 | 'A2), update: forall 'a 'c. ('Rep8 & 'a, 'Rep7 & 'c,) -> int -> ('A3 & 'A4) -> ('Rep5 | 'a, 'Rep6 | 'c,)})
//│   where
//│     'Rep9 :> ('Rep3 | 'Rep5 | 'd, 'Rep4 | 'Rep6 | 'e,)
//│           <: (nothing, nothing,)
//│     'A5 :> anything
//│         <: nothing
//│         = [Function: stepImpl]

def stepImpl2_ty: (forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r) -> ArraysImpl['A, ('Rep, 'Rep)]
//│ stepImpl2_ty: (forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r) -> ArraysImpl['A, ('Rep, 'Rep,)]
//│             = <missing implementation>

def stepImpl2 arr = arr stepImpl
//│ stepImpl2: ((forall 'Rep 'Rep0 'A 'Rep1 'Rep2 'A0 'Rep3 'Rep4 'A1 'Rep5 'Rep6 'A2 'Rep7 'A3 'A4 'Rep8 'A5 'Rep9 'a 'A6 'A7 'c. ArraysRep[in 'A0 | 'A7 | 'A1 | 'A4 | 'A | 'A2 | 'A6 & ('A5 | 'A3) out 'A1 & 'A4 & 'A5 & 'A3, in 'Rep3 | 'Rep6 | 'Rep2 | 'Rep4 out 'Rep1 & 'Rep & ('Rep9 & ('Rep7 | 'Rep5) | 'Rep8 & ('Rep7 | 'Rep5))] -> (ArraysImpl['A6, 'Rep0] with {fold: forall 'b 'b0 'b1. ('A5 -> 'b0 -> ('b0 & 'b1) & 'A3 -> 'b -> ('b0 & 'b & 'b1)) -> ('b0 & 'b & 'b1) -> ('Rep4, 'Rep2,) -> 'b1, init: ('A0 & 'A7) -> ('Rep, 'Rep1,), sub: ('Rep3, 'Rep6,) -> int -> ('A1 | 'A4), update: forall 'd 'e. ('Rep5 & 'd, 'Rep8 & 'e,) -> int -> ('A & 'A2) -> ('Rep7 | 'd, 'Rep9 | 'e,)})) -> 'f) -> 'f
//│   where
//│     'Rep0 :> ('Rep | 'Rep7 | 'c, 'Rep1 | 'Rep9 | 'a,)
//│           <: (nothing, nothing,)
//│     'A6 :> anything
//│         <: nothing
//│          = [Function: stepImpl2]

stepImpl2_ty = stepImpl2
//│ ((forall 'A 'Rep 'Rep0 'Rep1 'A0 'a 'A1 'Rep2 'c 'A2 'Rep3 'A3 'Rep4 'Rep5 'Rep6 'A4 'Rep7 'Rep8 'A5 'A6 'Rep9 'A7. ArraysRep[in 'A7 | 'A3 | 'A | 'A4 | 'A5 | 'A6 | 'A0 & ('A1 | 'A2) out 'A & 'A4 & 'A1 & 'A2, in 'Rep2 | 'Rep7 | 'Rep3 | 'Rep1 out 'Rep9 & 'Rep8 & ('Rep6 & ('Rep | 'Rep5) | 'Rep4 & ('Rep | 'Rep5))] -> (ArraysImpl['A0, 'Rep0] with {fold: forall 'b 'b0 'b1. ('A1 -> 'b -> ('b & 'b0) & 'A2 -> 'b1 -> ('b & 'b1 & 'b0)) -> ('b & 'b1 & 'b0) -> ('Rep1, 'Rep3,) -> 'b0, init: ('A7 & 'A3) -> ('Rep8, 'Rep9,), sub: ('Rep2, 'Rep7,) -> int -> ('A | 'A4), update: forall 'd 'e. ('Rep5 & 'd, 'Rep4 & 'e,) -> int -> ('A5 & 'A6) -> ('Rep | 'd, 'Rep6 | 'e,)})) -> 'f) -> 'f
//│   where
//│     'Rep0 :> ('Rep8 | 'Rep | 'a, 'Rep9 | 'Rep6 | 'c,)
//│           <: (nothing, nothing,)
//│     'A0 :> anything
//│         <: nothing
//│   <:  stepImpl2_ty:
//│ (forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r) -> ArraysImpl['A, ('Rep, 'Rep,)]
//│             = [Function: stepImpl2]


def step: Arrays['a] -> Arrays['a]
//│ step: Arrays['a] -> Arrays['a]
//│     = <missing implementation>

:e // * Since "sound extrusion"
def step arr f = f (stepImpl2 arr)
//│ ((forall 'a 'Rep 'Rep0 'A 'Rep1 'Rep2 'A0 'Rep3 'A1 'A2 'A3 'Rep4 'Rep5 'A4 'A5 'Rep6 'A6 'A7 'Rep7 'Rep8 'c 'Rep9. ArraysRep[in 'A5 | 'A7 | 'A3 | 'A6 | 'A0 | 'A2 | 'A4 & ('A | 'A1) out 'A3 & 'A6 & 'A & 'A1, in 'Rep2 | 'Rep7 | 'Rep3 | 'Rep1 out 'Rep9 & 'Rep & ('Rep8 & ('Rep0 | 'Rep6) | 'Rep4 & ('Rep0 | 'Rep6))] -> (ArraysImpl['A4, 'Rep5] with {fold: forall 'b 'b0 'b1. ('A -> 'b -> ('b & 'b0) & 'A1 -> 'b1 -> ('b & 'b1 & 'b0)) -> ('b & 'b1 & 'b0) -> ('Rep1, 'Rep3,) -> 'b0, init: ('A5 & 'A7) -> ('Rep9, 'Rep,), sub: ('Rep2, 'Rep7,) -> int -> ('A3 | 'A6), update: forall 'd 'e. ('Rep6 & 'd, 'Rep8 & 'e,) -> int -> ('A0 & 'A2) -> ('Rep0 | 'd, 'Rep4 | 'e,)})) -> 'f) -> ('f -> 'g) -> 'g
//│   where
//│     'Rep5 :> ('Rep9 | 'Rep0 | 'c, 'Rep | 'Rep4 | 'a,)
//│           <: (nothing, nothing,)
//│     'A4 :> anything
//│         <: nothing
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.327: 	def step arr f = f (stepImpl2 arr)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── from reference:
//│ ║  l.281: 	      then arrImpl.Sub r0 (div i 2)
//│ ╙──       	                       ^^
//│     = [Function: step]

// * Now the annotation was okay [until "sound extrusion"] because the result no longer extruded it...
:e // * Since "sound extrusion"
def step (arr: Arrays['a]) f = f (stepImpl2 arr)
//│ Arrays['a] -> (error -> 'b) -> 'b
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.352: 	def step (arr: Arrays['a]) f = f (stepImpl2 arr)
//│ ║         	                                  ^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── from reference:
//│ ║  l.281: 	      then arrImpl.Sub r0 (div i 2)
//│ ╙──       	                       ^^
//│     = [Function: step1]

// * Don't know why these don't work:
:e
def step arr f = f (stepImpl2_ty arr)
//│ (forall 'r. (ArraysRep['A, 'Rep] -> 'r) -> 'r) -> (ArraysImpl['A, ('Rep, 'Rep,)] -> 'a) -> 'a
//│   where
//│     'Rep :> anything
//│     'A :> anything
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.372: 	def step arr f = f (stepImpl2_ty arr)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ╙──      	                         ^^^^
//│     = [Function: step2]
:e
def step (arr: Arrays['a]) f = f (stepImpl2_ty arr)
//│ Arrays['a] -> ((ArraysImpl['A, ('Rep, 'Rep,)] | error) -> 'b) -> 'b
//│   where
//│     'Rep :> anything
//│          <: nothing
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.390: 	def step (arr: Arrays['a]) f = f (stepImpl2_ty arr)
//│ ║         	                                  ^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ║        	                         ^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.41: 	type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ ╙──      	                         ^^^^
//│     = [Function: step3]


ssb = step (step base)
//│ ssb: Arrays['a]
//│    = [Function (anonymous)]

ssb (fun arr ->
    let r2 = arr.Update (arr.Init true) 1 false
    in (arr.Sub r2 0, arr.Sub r2 1)
  )
//│ res: (bool, bool,)
//│    = [ true, false ]



rec def mkMonoArray n =
  if n == 0 then base else step (mkMonoArray(n - 1))
//│ mkMonoArray: int -> Arrays['a]
//│            = [Function: mkMonoArray]

snb = mkMonoArray 5
//│ snb: Arrays['a]
//│    = [Function (anonymous)]

snb (fun arr -> arr.Init true)
//│ res: anything
//│    = [
//│        [ [ [Array], [Array] ], [ [Array], [Array] ] ],
//│        [ [ [Array], [Array] ], [ [Array], [Array] ] ]
//│      ]


// * From the paper:
// let mkPolyArray n = {∀α(∃ρ.∀β.sig(α,ρ,β))} (mkMonoArray n)





