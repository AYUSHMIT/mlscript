:GeneralizeCurriedFunctions
:NoRecursiveTypes
// :NoConstrainedTypes
// :DistributeForalls

// type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)

// :ArgGen

// :d
// :ns
def s n = fun f -> fun x -> f (n f x)
// def s n = fun f -> fun x -> (n f x)
// def s n = fun f -> n f
// def s n = n
//│ s: 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('c -> 'f
//│   where
//│     'b <: 'd -> 'f
//│     'a <: 'b -> ('c -> 'd & 'e))))
//│  = [Function: s]

def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ succ: (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = <missing implementation>

// :DistributeForalls

// :ns
// :e // * Used to need distrib (see below)
// :d
// :e // skolem extrusion?
succ = s
//│ 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('c -> 'f
//│   where
//│     'a <: 'b -> ('c -> 'd & 'e)
//│     'b <: 'd -> 'f)))
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = [Function: s]

def s n = fun f -> fun x -> (n f x)
//│ s: 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'd
//│   where
//│     'a <: 'b -> ('c -> 'd & 'e))))
//│  = [Function: s1]

// :e // skolem extrusion?
succ = s
//│ 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'd
//│   where
//│     'a <: 'b -> ('c -> 'd & 'e))))
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = [Function: s1]

// :e // skolem extrusion?
def s n = fun f -> n f
succ = s
//│ s: 'a -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c))
//│  = [Function: s2]
//│ 'a -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c))
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = [Function: s2]

def s n = n
//│ s: 'a -> 'a
//│  = [Function: s3]

succ = s
//│ 'a -> 'a
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = [Function: s3]


// ==========================================================================


// :d
def s n = fun f -> n f
//│ s: 'a -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c))
//│  = [Function: s4]

// def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
def succ_min : (forall 'N. ('N -> 'N)) -> (forall 'M. ('M -> 'M))
//│ succ_min: (forall 'N. 'N -> 'N) -> (forall 'M. 'M -> 'M)
//│         = <missing implementation>

// :DistributeForalls

// :ns
// :e // * Needs distrib (see below)
// :d
// :e // skolem extrusion?
succ_min = s
// succ n = s n
// s id : (forall 'M. ('M -> 'M))
//│ 'a -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c))
//│   <:  succ_min:
//│ (forall 'N. 'N -> 'N) -> (forall 'M. 'M -> 'M)
//│         = [Function: s4]





