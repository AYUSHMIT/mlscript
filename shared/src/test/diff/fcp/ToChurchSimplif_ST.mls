// * This test contains simplifications of the to_church function,
// * used to minimize and reproduce problems with to_church and related definitions.

:NoRecursiveTypes
:GeneralizeCurriedFunctions
:NoConstrainedTypes
:DontDistributeForalls



type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ Defined type alias ChurchInt

def zero: ChurchInt
def succ: ChurchInt -> ChurchInt
//│ zero: ChurchInt
//│     = <missing implementation>
//│ succ: ChurchInt -> ChurchInt
//│     = <missing implementation>

def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ to_church: int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│          = <missing implementation>



def z f x = x
//│ z: 'a -> (forall 'b. 'b -> 'b)
//│  = [Function: z]

// * Simpler functions that can be used instead of `s` to debug
// def s n f x = f (n f x) // * original succ
// def s n f = f (n f)
def s n f x = (n f x)
// def s n f = n f
//│ s: ('a -> ('b -> 'c & 'd) & 'e) -> (forall 'f. ('a & 'f) -> (forall 'g, 'h. ('b & 'g) -> ('h | 'c)))
//│  = [Function: s]

:ns
s
//│ res: forall 'a, 'b, 'c, 'd, 'e. 'e -> (forall 'f. 'f -> (forall 'g, 'h. 'g -> 'h))
//│   where
//│     'h :> 'd
//│     'g <: 'c
//│     'f <: 'a
//│     'e <: 'a -> 'b
//│     'b <: 'c -> 'd
//│    = [Function: s]

:e // * Works with CT
succ = s
//│ ('a -> ('b -> 'c & 'd) & 'e) -> (forall 'f. ('a & 'f) -> (forall 'g, 'h. ('b & 'g) -> ('h | 'c)))
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.51: 	succ = s
//│ ║        	^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.11: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.11: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──      	                        ^^
//│     = [Function: s]

:e // * Works with CT
succ n f = n f
//│ ('a -> 'b & 'c) -> (forall 'd, 'e. ('a & 'e) -> ('d | 'b))
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.67: 	succ n f = n f
//│ ║        	^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.11: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.11: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──      	                        ^^
//│     = [Function: succ2]

succ n = n
//│ 'a -> 'a
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│     = [Function: succ3]

def succ_min : (forall 'N. ('N -> 'N)) -> (forall 'M. ('M -> 'M))
//│ succ_min: (forall 'N. 'N -> 'N) -> (forall 'M. 'M -> 'M)
//│         = <missing implementation>

:e // * Works with CT
succ_min n f = n f
//│ ('a -> 'b & 'c) -> (forall 'd, 'e. ('a & 'd) -> ('e | 'b))
//│   <:  succ_min:
//│ (forall 'N. 'N -> 'N) -> (forall 'M. 'M -> 'M)
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.93: 	succ_min n f = n f
//│ ║        	^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.88: 	def succ_min : (forall 'N. ('N -> 'N)) -> (forall 'M. ('M -> 'M))
//│ ║        	                                                  ^^
//│ ╟── but it flows into reference with expected type `nothing`
//│ ║  l.93: 	succ_min n f = n f
//│ ║        	                 ^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.88: 	def succ_min : (forall 'N. ('N -> 'N)) -> (forall 'M. ('M -> 'M))
//│ ╙──      	                                                  ^^
//│         = [Function: succ_min]



rec def to_ch n =
  if n == 0 then zero
  else s (to_ch n)
//│ to_ch: ('a & number) -> (forall 'b. ('b & 'c & 'N -> 'N) -> (forall 'd, 'e. ('d & 'f & 'N) -> ('N | 'e | 'g)) | ChurchInt | 'h)
//│      = <no result>
//│        zero is not implemented

:e
to_church = to_ch
//│ ('a & number) -> (forall 'b. ('b & 'c & 'N -> 'N) -> (forall 'd, 'e. ('d & 'f & 'N) -> ('N | 'e | 'g)) | ChurchInt | 'h)
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.121: 	to_church = to_ch
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.21: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                              ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.21: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                              ^^
//│ ╟── from quantified type variable:
//│ ║  l.11: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──      	                        ^^
//│          = <no result>
//│            to_ch and zero are not implemented


rec def to_ch n =
  if true then zero
  else s (to_ch n)
//│ to_ch: 'a -> (forall 'b. ('b & 'c & 'N -> 'N) -> (forall 'd, 'e. ('e & 'f & 'N) -> ('N | 'd | 'g)) | ChurchInt | 'h)
//│      = <no result>
//│        zero is not implemented

:e
to_church = to_ch
//│ 'a -> (forall 'b. ('b & 'c & 'N -> 'N) -> (forall 'd, 'e. ('d & 'f & 'N) -> ('N | 'e | 'g)) | ChurchInt | 'h)
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.149: 	to_church = to_ch
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.21: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                              ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.21: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                              ^^
//│ ╟── from quantified type variable:
//│ ║  l.11: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──      	                        ^^
//│          = <no result>
//│            to_ch and zero are not implemented


rec def to_ch n =
  if true then zero
  else s (to_church n)
//│ to_ch: (int & 'a) -> (forall 'b. ('M -> ('M & 'c) & 'b & 'd) -> (forall 'e, 'f. ('M & 'c & 'e & 'g) -> ('f | 'c)) | ChurchInt | 'h)
//│      = <no result>
//│        zero is not implemented

:e
to_church = to_ch
//│ (int & 'a) -> (forall 'b. ('M -> ('M & 'c) & 'b & 'd) -> (forall 'e, 'f. ('M & 'c & 'e & 'g) -> ('f | 'c)) | ChurchInt | 'h)
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.177: 	to_church = to_ch
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.21: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                              ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.21: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ╙──      	                              ^^
//│          = <no result>
//│            to_ch and zero are not implemented


def to_ch n =
  if true then z
  else s (to_church n)
//│ to_ch: (int & 'a) -> (forall 'b, 'c, 'd, 'M, 'e, 'f, 'g. ('M -> ('M & 'd) & 'f & 'e & 'b) -> (forall 'h, 'i, 'j. ('h & 'M & 'd & 'i & 'g) -> ('h | 'j | 'd)) | 'c)
//│      = <no result>
//│        to_church, to_ch and zero are not implemented

:e // * Works with CT
to_church = to_ch
//│ (int & 'a) -> (forall 'b, 'c, 'd, 'M, 'e, 'f, 'g. ('M -> ('M & 'f) & 'g & 'c & 'd) -> (forall 'h, 'i, 'j. ('h & 'M & 'f & 'i & 'e) -> ('h | 'j | 'f)) | 'b)
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.202: 	to_church = to_ch
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.21: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                              ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.21: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ╙──      	                              ^^
//│          = <no result>
//│            to_ch, to_church, to_ch and zero are not implemented


def to_ch n =
  if true then zero
  else s (to_church n)
//│ to_ch: (int & 'a) -> (forall 'b. ('M -> ('M & 'c) & 'b & 'd) -> (forall 'e, 'f. ('M & 'c & 'e & 'g) -> ('f | 'c)) | ChurchInt | 'h)
//│      = <no result>
//│        zero is not implemented

:e // * Works with CT
to_church = to_ch
//│ (int & 'a) -> (forall 'b. ('M -> ('M & 'c) & 'b & 'd) -> (forall 'e, 'f. ('M & 'c & 'e & 'g) -> ('f | 'c)) | ChurchInt | 'h)
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.227: 	to_church = to_ch
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.21: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                              ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.21: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ╙──      	                              ^^
//│          = <no result>
//│            to_ch and zero are not implemented


def to_ch n =
  s (to_church n)
//│ to_ch: (int & 'a) -> (forall 'b. ('M -> ('M & 'c) & 'b & 'd) -> (forall 'e, 'f. ('M & 'c & 'e & 'g) -> ('f | 'c)) | 'h)
//│      = <no result>
//│        to_church, to_ch and zero are not implemented

:e // * Works with CT
to_church = to_ch
//│ (int & 'a) -> (forall 'b. ('M -> ('M & 'c) & 'b & 'd) -> (forall 'e, 'f. ('M & 'c & 'e & 'g) -> ('f | 'c)) | 'h)
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.251: 	to_church = to_ch
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.21: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                              ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.21: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ╙──      	                              ^^
//│          = <no result>
//│            to_ch, to_church, to_ch and zero are not implemented


rec def to_ch n =
  s (to_church n)
//│ to_ch: (int & 'a) -> (forall 'b. ('M -> ('M & 'c) & 'b & 'd) -> (forall 'e, 'f. ('M & 'c & 'e & 'g) -> ('f | 'c)) | 'h)
//│      = <no result>
//│        to_church, to_ch, to_church, to_ch and zero are not implemented

:e
to_church = to_ch
//│ (int & 'a) -> (forall 'b. ('M -> ('M & 'c) & 'b & 'd) -> (forall 'e, 'f. ('M & 'c & 'f & 'g) -> ('e | 'c)) | 'h)
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.275: 	to_church = to_ch
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.21: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                              ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.21: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ╙──      	                              ^^
//│          = <no result>
//│            to_ch, to_church, to_ch, to_church, to_ch and zero are not implemented


def to_ch (n:int) =
  s (to_church n)
//│ to_ch: int -> (forall 'a. ('M -> ('M & 'b) & 'a & 'c) -> (forall 'd, 'e. ('M & 'b & 'd & 'f) -> ('e | 'b)) | 'g)
//│      = <no result>
//│        to_church, to_ch, to_church, to_ch, to_church, to_ch and zero are not implemented

:e // * Works with CT
to_church = to_ch
//│ int -> (forall 'a. ('M -> ('M & 'b) & 'a & 'c) -> (forall 'd, 'e. ('M & 'b & 'd & 'f) -> ('e | 'b)) | 'g)
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.299: 	to_church = to_ch
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.21: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                              ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.21: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ╙──      	                              ^^
//│          = <no result>
//│            to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch and zero are not implemented

// * Marking it `rec` (on a minimized version) makes it fail
// *  This is because of `destroyConstrainedTypes` which is invoked on rec defs:
// *  (disabling the destruction fixes this problem)

rec def to_ch n =
  s (to_church n)
//│ to_ch: (int & 'a) -> (forall 'b. ('M -> ('M & 'c) & 'b & 'd) -> (forall 'e, 'f. ('M & 'c & 'e & 'g) -> ('f | 'c)) | 'h)
//│      = <no result>
//│        to_church, to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch and zero are not implemented

:e
to_church = to_ch
//│ (int & 'a) -> (forall 'b. ('M -> ('M & 'c) & 'b & 'd) -> (forall 'e, 'f. ('M & 'c & 'e & 'g) -> ('f | 'c)) | 'h)
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.326: 	to_church = to_ch
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.21: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                              ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.21: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ╙──      	                              ^^
//│          = <no result>
//│            to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch and zero are not implemented


def to_ch =
  s (to_church 0)
//│ to_ch: ('M -> 'M & 'a) -> (forall 'b, 'c. ('M & 'b) -> ('M | 'c))
//│      = <no result>
//│        to_church, to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch and zero are not implemented

:e
to_church = to_ch
//│ ('M -> 'M & 'a) -> (forall 'b, 'c. ('M & 'b) -> ('M | 'c))
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.350: 	to_church = to_ch
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── type `int` is not a function
//│ ║  l.21: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	               ^^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.21: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                  ^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.34: 	def s n f x = (n f x)
//│ ╙──      	                 ^
//│          = <no result>
//│            to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch and zero are not implemented


// * But distributivity allows getting around the recursion limitation by recovering _some_ of the lost expressiveness
:DistributeForalls


rec def to_ch n =
  s (to_church n)
//│ to_ch: (int & 'a) -> (forall 'b. ('M -> ('M & 'c) & 'b & 'd) -> (forall 'e, 'f. ('M & 'c & 'e & 'g) -> ('f | 'c)) | 'h)
//│      = <no result>
//│        to_church, to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch and zero are not implemented

to_church = to_ch
//│ (int & 'a) -> (forall 'b. ('M -> ('M & 'c) & 'b & 'd) -> (forall 'e, 'f. ('M & 'c & 'e & 'g) -> ('f | 'c)) | 'h)
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│          = <no result>
//│            to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch, to_church, to_ch and zero are not implemented


rec def to_ch n =
  if n == 0 then zero
  else succ (to_ch (n - 1))
//│ to_ch: (int & 'a) -> (ChurchInt | 'b)
//│      = <no result>
//│        zero is not implemented

to_church = to_ch
//│ (int & 'a) -> (ChurchInt | 'b)
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│          = <no result>
//│            to_ch and zero are not implemented


rec def to_ch n =
  if n == 0 then z
  else s (to_ch (n - 1))
//│ to_ch: (int & 'a) -> (forall 'b, 'c, 'd, 'e, 'f, 'g. ('e & 'c & 'd) -> (forall 'h, 'i, 'j. ('i & 'j & 'b & 'k) -> ('k | 'i | 'h | 'g)) | 'f)
//│      = [Function: to_ch7]

to_church = to_ch
//│ (int & 'a) -> (forall 'b, 'c, 'd, 'e, 'f, 'g. ('b & 'f & 'd) -> (forall 'h, 'i, 'j. ('i & 'j & 'c & 'k) -> ('k | 'i | 'h | 'e)) | 'g)
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│          = [Function: to_ch7]


rec def to_ch_weird n =
  s (to_ch_weird n)
//│ to_ch_weird: 'a -> (forall 'b. ('b & 'c) -> (forall 'd, 'e. ('d & 'f) -> ('g | 'e | 'h)) | 'i)
//│            = [Function: to_ch_weird]

to_church = to_ch
//│ (int & 'a) -> (forall 'b, 'c, 'd, 'e, 'f, 'g. ('c & 'g & 'b) -> (forall 'h, 'i, 'j. ('h & 'i & 'e & 'k) -> ('k | 'h | 'j | 'f)) | 'd)
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│          = [Function: to_ch7]


