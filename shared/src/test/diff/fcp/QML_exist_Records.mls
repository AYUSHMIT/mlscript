// * Adaptation of QML's original existentials example; using encoded existentials and plain records


:NoRecursiveTypes
:GeneralizeCurriedFunctions
// :DistributeForalls
// :ArgGen
// :NoConstrainedTypes



type ArraysRep[A, Rep] = {
    init: A -> Rep;
    sub: Rep -> int -> A;
    update: Rep -> int -> A -> Rep;
    fold: forall 'b. (A -> 'b -> 'b) -> 'b -> Rep -> 'b
  }
//│ Defined type alias ArraysRep[=A, =Rep]

type Arrays[A] = (forall 'Rep. ArraysRep[A, 'Rep] -> 'r) -> 'r
//│ Defined type alias Arrays[=A]


def baseImpl: ArraysRep['a, 'a]
baseImpl = {
    init   = fun a -> a;
    sub    = fun r -> fun (i : int) -> r;
    update = fun r -> fun (i : int) -> fun a -> a;
    fold   = fun f -> fun b -> fun r -> f r b
  }
//│ baseImpl: ArraysRep['a, 'a]
//│         = <missing implementation>
//│ {fold: forall 'a. 'a -> (forall 'b. 'b -> (forall 'b, 'c, 'd, 'a, 'e. ('c -> 'e
//│   where
//│     'a <: 'c -> ('b -> 'e & 'd)))), init: forall 'f. 'f -> 'f, sub: forall 'g. 'g -> int -> 'g, update: forall 'h. 'h -> int -> (forall 'i. 'i -> 'i)}
//│   <:  baseImpl:
//│ ArraysRep['a, 'a]
//│         = {
//│             init: [Function: init],
//│             sub: [Function: sub],
//│             update: [Function: update],
//│             fold: [Function: fold]
//│           }

def base: Arrays['a]
def base f = f baseImpl
//│ base: Arrays['a]
//│     = <missing implementation>
//│ ((forall 'a. ArraysRep['a, 'a]) -> 'b & 'c) -> 'b
//│   <:  base:
//│ Arrays['a]
//│     = [Function: base]


def stepImpl_ty: ArraysRep['a, 'r] -> ArraysRep['a, ('r, string)]
//│ stepImpl_ty: ArraysRep['a, 'r] -> ArraysRep['a, ('r, string,)]
//│            = <missing implementation>

// * Not enough to type `step` later in the file
def stepImpl arrImpl = {
    init   = fun a -> (arrImpl.init a, "hi");
    sub    = fun ((r0, r1)) -> fun i -> arrImpl.sub r0 i;
    update = fun ((r0, r1)) -> fun i -> fun a -> (arrImpl.update r0 i a, "hey");
    fold   = fun f -> fun b -> fun ((r0, r1)) -> arrImpl.fold f b r0
  }
//│ stepImpl: 'a -> {fold: forall 'b. 'b -> (forall 'c. 'c -> (forall 'd, 'c, 'fold, 'e, 'f, 'a, 'g, 'b, 'h. (('e, 'h,) -> 'f
//│   where
//│     'a <: {fold: 'b -> ('c -> ('e -> 'f & 'g) & 'd) & 'fold}))), init: forall 'i, 'j, 'init, 'a. ('i -> ('j, "hi",)
//│   where
//│     'a <: {init: 'i -> 'j & 'init}), sub: forall 'k, 'l. ('k, 'l,) -> (forall 'm, 'n, 'o, 'sub, 'a, 'k. ('n -> 'm
//│   where
//│     'a <: {sub: 'k -> ('n -> 'm & 'o) & 'sub})), update: forall 'p, 'q. ('p, 'q,) -> (forall 'r. 'r -> (forall 'r, 'update, 's, 't, 'p, 'u, 'v, 'a. ('s -> ('v, "hey",)
//│   where
//│     'a <: {update: 'p -> ('r -> ('s -> 'v & 'u) & 't) & 'update})))}
//│         = [Function: stepImpl]

stepImpl_ty = stepImpl
//│ 'a -> {fold: forall 'b. 'b -> (forall 'c. 'c -> (forall 'a, 'b, 'd, 'e, 'f, 'g, 'h, 'fold, 'c. (('f, 'e,) -> 'h
//│   where
//│     'a <: {fold: 'b -> ('c -> ('f -> 'h & 'g) & 'd) & 'fold}))), init: forall 'i, 'j, 'init, 'a. ('i -> ('j, "hi",)
//│   where
//│     'a <: {init: 'i -> 'j & 'init}), sub: forall 'k, 'l. ('k, 'l,) -> (forall 'm, 'k, 'n, 'sub, 'a, 'o. ('n -> 'o
//│   where
//│     'a <: {sub: 'k -> ('n -> 'o & 'm) & 'sub})), update: forall 'p, 'q. ('p, 'q,) -> (forall 'r. 'r -> (forall 'update, 's, 'a, 'r, 't, 'u, 'p, 'v. ('t -> ('u, "hey",)
//│   where
//│     'a <: {update: 'p -> ('r -> ('t -> 'u & 'v) & 's) & 'update})))}
//│   <:  stepImpl_ty:
//│ ArraysRep['a, 'r] -> ArraysRep['a, ('r, string,)]
//│            = [Function: stepImpl]

type Fold[A, Rep] = (A -> 'b -> 'b) -> 'b -> Rep -> 'b
//│ Defined type alias Fold[+A, -Rep]

// * Bad annotation: polymorphism level at which it's typed makes 'a and 'rep locally quantified,
// *  which is NOT what we want!
def stepImpl_Ann_1 arrImpl = {
    init   = fun a -> (arrImpl.init a, "hi");
    sub    = fun ((r0, r1)) -> fun i -> arrImpl.sub r0 i;
    update = fun ((r0, r1)) -> fun i -> fun a -> (arrImpl.update r0 i a, "hey");
    fold   = fun f -> fun b -> fun ((r0, r1)) -> (arrImpl.fold: Fold['a, 'rep]) f b r0
  }
//│ stepImpl_Ann_1: 'c -> {fold: forall 'd. 'd -> (forall 'e. 'e -> (forall 'f, 'fold, 'rep, 'a, 'e, 'b, 'rep0, 'g, 'c, 'h, 'd, 'a0. (('g & 'rep, 'f,) -> ('e | 'h)
//│   where
//│     'd <: 'a -> ('b | 'e) -> ('b & 'h)
//│     'c <: {fold: Fold['a0, 'rep0] & 'fold}))), init: forall 'c, 'i, 'j, 'init. ('i -> ('j, "hi",)
//│   where
//│     'c <: {init: 'i -> 'j & 'init}), sub: forall 'k, 'l. ('l, 'k,) -> (forall 'm, 'c, 'n, 'o, 'sub, 'l. ('m -> 'n
//│   where
//│     'c <: {sub: 'l -> ('m -> 'n & 'o) & 'sub})), update: forall 'p, 'q. ('p, 'q,) -> (forall 'r. 'r -> (forall 's, 't, 'p, 'update, 'c, 'r, 'u, 'v. ('v -> ('t, "hey",)
//│   where
//│     'c <: {update: 'p -> ('r -> ('v -> 't & 's) & 'u) & 'update})))}
//│               = [Function: stepImpl_Ann_1]

// * Still not enough to type `step` later in the file – this annotation actually doesn't help at all
def stepImpl_Ann_2 (arrImpl: ArraysRep['a, 'r]) = {
    init   = fun a -> (arrImpl.init a, "hi");
    sub    = fun ((r0, r1)) -> fun i -> arrImpl.sub r0 i;
    update = fun ((r0, r1)) -> fun i -> fun a -> (arrImpl.update r0 i a, "hey");
    fold   = fun f -> fun b -> fun ((r0, r1)) -> arrImpl.fold f b r0
  }
//│ stepImpl_Ann_2: ArraysRep['a, 'r] -> {fold: forall 'c. 'c -> (forall 'd. 'd -> (forall 'c, 'e, 'd, 'b, 'f, 'g, 'r, 'a. (('r & 'g, 'f,) -> ('d | 'e)
//│   where
//│     'c <: 'a -> ('b | 'd) -> ('b & 'e)))), init: forall 'h, 'i. ('a & 'h) -> ('r | 'i, "hi",), sub: forall 'j, 'k. ('r & 'j, 'k,) -> (forall 'l, 'm, 'n. (int & 'l & 'm) -> ('a | 'n)), update: forall 'o, 'p. ('r & 'o, 'p,) -> (forall 'm. (int & 'm) -> (forall 'q, 's. ('a & 'q) -> ('r | 's, "hey",)))}
//│               = [Function: stepImpl_Ann_2]

stepImpl_ty = stepImpl_Ann_2
//│ ArraysRep['a, 'r] -> {fold: forall 'c. 'c -> (forall 'd. 'd -> (forall 'r, 'b, 'a, 'e, 'd, 'f, 'c, 'g. (('r & 'f, 'g,) -> ('d | 'e)
//│   where
//│     'c <: 'a -> ('b | 'd) -> ('b & 'e)))), init: forall 'h, 'i. ('a & 'h) -> ('r | 'i, "hi",), sub: forall 'j, 'k. ('r & 'k, 'j,) -> (forall 'l, 'm, 'n. (int & 'l & 'm) -> ('a | 'n)), update: forall 'o, 'p. ('r & 'o, 'p,) -> (forall 'm. (int & 'm) -> (forall 'q, 's. ('a & 'q) -> ('r | 's, "hey",)))}
//│   <:  stepImpl_ty:
//│ ArraysRep['a, 'r] -> ArraysRep['a, ('r, string,)]
//│            = [Function: stepImpl_Ann_2]

// * This one seems that it would work but it's again typed at the wrong polymorphism level (I think?)
def stepImpl_Ann_3 arrImpl = {
    init   = fun a -> (arrImpl.init a, "hi");
    sub    = fun ((r0, r1)) -> fun i -> arrImpl.sub r0 i;
    update = fun ((r0, r1)) -> fun i -> fun a -> (arrImpl.update r0 i a, "hey");
    fold   = (fun f -> fun b -> fun ((r0, r1)) -> arrImpl.fold f b r0) : Fold['a, ('rep, string)]
  }
//│ stepImpl_Ann_3: ({fold: (‘a_1055_1081 -> (‘b_1056_1082 & 'b) -> (‘b_1056_1082 | 'c) | 'd) -> ((‘b_1056_1082 | 'c) -> ((‘rep_1057_1087 | 'e) -> (‘b_1056_1082 & 'b) & 'f) & 'g) & 'fold} & 'h) -> {fold: Fold['a, ('rep, string,)], init: forall 'h, 'i, 'j, 'init. ('i -> ('j, "hi",)
//│   where
//│     'h <: {init: 'i -> 'j & 'init}), sub: forall 'k, 'l. ('l, 'k,) -> (forall 'l, 'h, 'm, 'n, 'sub, 'o. ('n -> 'o
//│   where
//│     'h <: {sub: 'l -> ('n -> 'o & 'm) & 'sub})), update: forall 'p, 'q. ('p, 'q,) -> (forall 'r. 'r -> (forall 'update, 'r, 's, 't, 'u, 'h, 'p, 'v. ('t -> ('v, "hey",)
//│   where
//│     'h <: {update: 'p -> ('r -> ('t -> 'v & 'u) & 's) & 'update})))}
//│               = [Function: stepImpl_Ann_3]

:e
stepImpl_ty = stepImpl_Ann_3
//│ ({fold: (‘a_1055_1081 -> (‘b_1056_1082 & 'b) -> (‘b_1056_1082 | 'c) | 'd) -> ((‘b_1056_1082 | 'c) -> ((‘rep_1057_1087 | 'e) -> (‘b_1056_1082 & 'b) & 'f) & 'g) & 'fold} & 'h) -> {fold: Fold['a, ('rep, string,)], init: forall 'h, 'i, 'j, 'init. ('i -> ('j, "hi",)
//│   where
//│     'h <: {init: 'i -> 'j & 'init}), sub: forall 'k, 'l. ('k, 'l,) -> (forall 'sub, 'k, 'm, 'h, 'n, 'o. ('m -> 'n
//│   where
//│     'h <: {sub: 'k -> ('m -> 'n & 'o) & 'sub})), update: forall 'p, 'q. ('p, 'q,) -> (forall 'r. 'r -> (forall 's, 't, 'p, 'u, 'h, 'update, 'r, 'v. ('u -> ('t, "hey",)
//│   where
//│     'h <: {update: 'p -> ('r -> ('u -> 't & 's) & 'v) & 'update})))}
//│   <:  stepImpl_ty:
//│ ArraysRep['a, 'r] -> ArraysRep['a, ('r, string,)]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.151: 	stepImpl_ty = stepImpl_Ann_3
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a_1284` is not an instance of type `'a_1055_1081`
//│ ║  l.55: 	def stepImpl_ty: ArraysRep['a, 'r] -> ArraysRep['a, ('r, string)]
//│ ║        	                           ^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.139: 	    fold   = (fun f -> fun b -> fun ((r0, r1)) -> arrImpl.fold f b r0) : Fold['a, ('rep, string)]
//│ ╙──       	                                                                              ^^
//│            = [Function: stepImpl_Ann_3]

// * This one finally works! The annotation needs to be on the result!
// *  Notice the skolem in the parameter's inferred fold type:
def stepImpl_Ann_4 arrImpl = {
    init   = fun a -> (arrImpl.init a, "hi");
    sub    = fun ((r0, r1)) -> fun i -> arrImpl.sub r0 i;
    update = fun ((r0, r1)) -> fun i -> fun a -> (arrImpl.update r0 i a, "hey");
    fold   = fun f -> fun b -> fun ((r0, r1)) -> arrImpl.fold f b r0
  } : ArraysRep['a, 'r]
//│ stepImpl_Ann_4: ({fold: ('a -> (‘b_1427_1451 & 'b) -> (‘b_1427_1451 | 'c) | 'd) -> ((‘b_1427_1451 | 'c) -> ('e -> (‘b_1427_1451 & 'b) & 'f) & 'g) & 'fold, init: 'h -> ('e & 'i & 'j & 'k & 'l) & 'init, sub: 'l -> ((int | 'm) -> ('a & 'n) & 'o) & 'sub, update: 'k -> ((int | 'm | 'p) -> ('q -> ('e & 'j & 'k & 'l & 's) & 't) & 'u) & 'update} & 'v) -> ArraysRep['a, 'r]
//│   where
//│     'r :> ('i | 's, "hey" | "hi",)
//│        <: ('e & 'j & 'k & 'l, 'w & 'x & 'y,)
//│     'a <: 'q & 'h
//│               = [Function: stepImpl_Ann_4]

test = stepImpl_Ann_4 baseImpl
//│ test: ArraysRep['a, 'r]
//│   where
//│     'r :> ('a, "hey" | "hi",)
//│        <: ('a, anything,)
//│     = {
//│         init: [Function: init],
//│         sub: [Function: sub],
//│         update: [Function: update],
//│         fold: [Function: fold]
//│       }

stepImpl_ty = stepImpl_Ann_4
//│ ({fold: ('a -> (‘b_1427_1451 & 'b) -> (‘b_1427_1451 | 'c) | 'd) -> ((‘b_1427_1451 | 'c) -> ('e -> (‘b_1427_1451 & 'b) & 'f) & 'g) & 'fold, init: 'h -> ('e & 'i & 'j & 'k & 'l) & 'init, sub: 'l -> ((int | 'm) -> ('a & 'n) & 'o) & 'sub, update: 'k -> ((int | 'm | 'p) -> ('q -> ('e & 'j & 'k & 'l & 's) & 't) & 'u) & 'update} & 'v) -> ArraysRep['a, 'r]
//│   where
//│     'r :> ('i | 's, "hey" | "hi",)
//│        <: ('e & 'j & 'k & 'l, 'w & 'x & 'y,)
//│     'a <: 'q & 'h
//│   <:  stepImpl_ty:
//│ ArraysRep['a, 'r] -> ArraysRep['a, ('r, string,)]
//│            = [Function: stepImpl_Ann_4]

// * Note: this one expectedly doesn't work, as in `QML_exist_Classes.mls`
// def stepImpl2 (arr: Arrays['a]) = arr stepImpl

def stepImpl2 arr = arr stepImpl
//│ stepImpl2: ((forall 'a. 'a -> {fold: forall 'b. 'b -> (forall 'c. 'c -> (forall 'd, 'e, 'b, 'fold, 'f, 'g, 'a, 'h, 'c. (('h, 'd,) -> 'f
//│   where
//│     'a <: {fold: 'b -> ('c -> ('h -> 'f & 'g) & 'e) & 'fold}))), init: forall 'i, 'j, 'init, 'a. ('i -> ('j, "hi",)
//│   where
//│     'a <: {init: 'i -> 'j & 'init}), sub: forall 'k, 'l. ('k, 'l,) -> (forall 'a, 'sub, 'm, 'n, 'k, 'o. ('m -> 'n
//│   where
//│     'a <: {sub: 'k -> ('m -> 'n & 'o) & 'sub})), update: forall 'p, 'q. ('p, 'q,) -> (forall 'r. 'r -> (forall 'update, 'p, 's, 'r, 't, 'u, 'v, 'a. ('u -> ('v, "hey",)
//│   where
//│     'a <: {update: 'p -> ('r -> ('u -> 'v & 't) & 's) & 'update})))}) -> 'w & 'x) -> 'w
//│          = [Function: stepImpl2]

def stepImpl2_ arr = arr stepImpl_ty
//│ stepImpl2_: ((forall 'a, 'r. ArraysRep['a, 'r] -> ArraysRep['a, ('r, string,)]) -> 'b & 'c) -> 'b
//│           = [Function: stepImpl2_]

// * Expectedly doesn't work (see comment on `stepImpl_Ann_1`)
// def stepImpl2_Ann_1 arr = arr stepImpl_Ann_1

def stepImpl2_Ann_2 arr = arr stepImpl_Ann_2
//│ stepImpl2_Ann_2: ((forall 'a, 'r. ArraysRep['a, 'r] -> {fold: forall 'c. 'c -> (forall 'd. 'd -> (forall 'e, 'd, 'f, 'c, 'r, 'g, 'a, 'b. (('r & 'e, 'f,) -> ('d | 'g)
//│   where
//│     'c <: 'a -> ('b | 'd) -> ('b & 'g)))), init: forall 'h, 'i. ('a & 'h) -> ('r | 'i, "hi",), sub: forall 'j, 'k. ('r & 'j, 'k,) -> (forall 'l, 'm, 'n. (int & 'l & 'm) -> ('a | 'n)), update: forall 'o, 'p. ('r & 'o, 'p,) -> (forall 'm. (int & 'm) -> (forall 'q, 's. ('a & 'q) -> ('r | 's, "hey",)))}) -> 't & 'u) -> 't
//│                = [Function: stepImpl2_Ann_2]

def stepImpl2_Ann_3 arr = arr stepImpl_Ann_3
//│ stepImpl2_Ann_3: ((forall 'b, 'a, 'c, 'rep, 'fold, 'd, 'e, 'f, 'g, 'h. ({fold: (‘a_1055_1081 -> (‘b_1056_1082 & 'g) -> (‘b_1056_1082 | 'c) | 'd) -> ((‘b_1056_1082 | 'c) -> ((‘rep_1057_1087 | 'f) -> (‘b_1056_1082 & 'g) & 'b) & 'h) & 'fold} & 'e) -> {fold: Fold['a, ('rep, string,)], init: forall 'i, 'j, 'init, 'e. ('i -> ('j, "hi",)
//│   where
//│     'e <: {init: 'i -> 'j & 'init}), sub: forall 'k, 'l. ('k, 'l,) -> (forall 'm, 'n, 'e, 'k, 'sub, 'o. ('n -> 'm
//│   where
//│     'e <: {sub: 'k -> ('n -> 'm & 'o) & 'sub})), update: forall 'p, 'q. ('p, 'q,) -> (forall 'r. 'r -> (forall 's, 'p, 'update, 't, 'u, 'r, 'v, 'e. ('v -> ('s, "hey",)
//│   where
//│     'e <: {update: 'p -> ('r -> ('v -> 's & 't) & 'u) & 'update})))}) -> 'w & 'x) -> 'w
//│                = [Function: stepImpl2_Ann_3]

def stepImpl2_Ann_4 arr = arr stepImpl_Ann_4
//│ stepImpl2_Ann_4: ((forall 'b, 'c, 'd, 'init, 'e, 'f, 'g, 'r, 'h, 'i, 'j, 'fold, 'k, 'l, 'm, 'update, 'sub, 'n, 'o, 'p, 'q, 'a, 's, 't, 'u, 'v, 'w, 'x, 'y. ({fold: ('a -> (‘b_1427_1451 & 'f) -> (‘b_1427_1451 | 'q) | 'l) -> ((‘b_1427_1451 | 'q) -> ('h -> (‘b_1427_1451 & 'f) & 'c) & 'm) & 'fold, init: 'v -> ('h & 't & 'g & 'j & 'n) & 'init, sub: 'n -> ((int | 's) -> ('a & 'k) & 'b) & 'sub, update: 'j -> ((int | 's | 'p) -> ('y -> ('h & 'g & 'j & 'n & 'x) & 'u) & 'e) & 'update} & 'w) -> ArraysRep['a, 'r]) -> 'z & 'a1) -> 'z
//│   where
//│     'r :> ('t | 'x, "hey" | "hi",)
//│        <: ('h & 'g & 'j & 'n, 'd & 'i & 'o,)
//│     'a <: 'y & 'v
//│                = [Function: stepImpl2_Ann_4]

def stepImpl2_Ann_2_Ann (arr: Arrays['a]) = arr stepImpl_Ann_2
// def stepImpl2_Ann_2_Ann (arr: Arrays['a]) = arr stepImpl_Ann_2 : Arrays['a]
// def stepImpl2_Ann_2_Ann (arr: ArraysRep['a, 'r]) = arr stepImpl_Ann_2
//│ stepImpl2_Ann_2_Ann: Arrays['a] -> ({fold: forall 'c. 'c -> (forall 'd. 'd -> (forall 'e, 'a0, 'r, 'a1, 'f, 'g, 'd, 'c, 'r0, 'b, 'a2. ((‘Rep_2122_2167 & 'r0 & 'r & 'f, 'e,) -> ('g | 'd)
//│   where
//│     'c <: ('a2 | 'a1 | 'a0) -> ('b | 'd) -> ('b & 'g)))), init: forall 'h, 'i. ('h & 'a1 & 'a2) -> ('r0 | ‘Rep_2122_2167 | 'i, "hi",), sub: forall 'j, 'k. (‘Rep_2122_2167 & 'r0 & 'j & 'r, 'k,) -> (forall 'l, 'm, 'n. (int & 'l & 'm) -> ('a2 | 'a1 | 'a0 | 'n)), update: forall 'o, 'p. (‘Rep_2122_2167 & 'r0 & 'r & 'p, 'o,) -> (forall 'm. (int & 'm) -> (forall 'q, 's. ('a1 & 'a2 & 'q) -> ('r0 | ‘Rep_2122_2167 | 's, "hey",)))} | 't)
//│                    = [Function: stepImpl2_Ann_2_Ann]



def step: Arrays['a] -> Arrays['a]
//│ step: Arrays['a] -> Arrays['a]
//│     = <missing implementation>

// * There used to be a very subtly extrusion here related to the polymorphism of `arrImpl.fold`
// *  and it not being known at the `stepImpl` definition site.
// * But this problem actually disappeared after fixing a subtle bug in type freshening...!
def step arr f = f (stepImpl2 arr)
//│ 'a -> (forall 'b, 'c, 'a, 'd, 'e. (('d -> 'c & 'b) -> 'c
//│   where
//│     'a <: (forall 'f. 'f -> {fold: forall 'g. 'g -> (forall 'h. 'h -> (forall 'i, 'g, 'j, 'k, 'f, 'h, 'l, 'm, 'fold. (('m, 'j,) -> 'i
//│   where
//│     'f <: {fold: 'g -> ('h -> ('m -> 'i & 'k) & 'l) & 'fold}))), init: forall 'n, 'o, 'init, 'f. ('n -> ('o, "hi",)
//│   where
//│     'f <: {init: 'n -> 'o & 'init}), sub: forall 'p, 'q. ('p, 'q,) -> (forall 'r, 'p, 'f, 'sub, 's, 't. ('r -> 't
//│   where
//│     'f <: {sub: 'p -> ('r -> 't & 's) & 'sub})), update: forall 'u, 'v. ('u, 'v,) -> (forall 'w. 'w -> (forall 'x, 'y, 'w, 'update, 'z, 'a1, 'u, 'f. ('a1 -> ('z, "hey",)
//│   where
//│     'f <: {update: 'u -> ('w -> ('a1 -> 'z & 'x) & 'y) & 'update})))}) -> ('e & 'd)))
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step]

// * Expectedly doesn't work (see comment on `stepImpl_Ann_1`)
// def step arr f = f (stepImpl2_Ann_1 arr)

def step arr f = f (stepImpl2_Ann_2 arr)
//│ 'c -> (forall 'c, 'd, 'e, 'f, 'g. (('d -> 'f & 'g) -> 'f
//│   where
//│     'c <: (forall 'a, 'r. ArraysRep['a, 'r] -> {fold: forall 'h. 'h -> (forall 'i. 'i -> (forall 'h, 'i, 'j, 'a, 'b, 'k, 'r, 'l. (('r & 'l, 'j,) -> ('i | 'k)
//│   where
//│     'h <: 'a -> ('b | 'i) -> ('b & 'k)))), init: forall 'm, 'n. ('a & 'm) -> ('r | 'n, "hi",), sub: forall 'o, 'p. ('r & 'o, 'p,) -> (forall 'q, 's, 't. (int & 's & 't) -> ('a | 'q)), update: forall 'u, 'v. ('r & 'u, 'v,) -> (forall 't. (int & 't) -> (forall 'w, 'x. ('a & 'w) -> ('r | 'x, "hey",)))}) -> ('e & 'd)))
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step1]

:e
def step arr f = f (stepImpl2_Ann_3 arr)
//│ 'b -> (forall 'c, 'd, 'e, 'f, 'b. (('e -> 'd & 'c) -> 'd
//│   where
//│     'b <: (forall 'rep, 'g, 'a, 'h, 'i, 'j, 'k, 'l, 'fold, 'm. ({fold: (‘a_1055_1081 -> (‘b_1056_1082 & 'j) -> (‘b_1056_1082 | 'l) | 'm) -> ((‘b_1056_1082 | 'l) -> ((‘rep_1057_1087 | 'h) -> (‘b_1056_1082 & 'j) & 'i) & 'k) & 'fold} & 'g) -> {fold: Fold['a, ('rep, string,)], init: forall 'g, 'n, 'o, 'init. ('n -> ('o, "hi",)
//│   where
//│     'g <: {init: 'n -> 'o & 'init}), sub: forall 'p, 'q. ('p, 'q,) -> (forall 'sub, 'g, 'p, 'r, 's, 't. ('s -> 'r
//│   where
//│     'g <: {sub: 'p -> ('s -> 'r & 't) & 'sub})), update: forall 'u, 'v. ('u, 'v,) -> (forall 'w. 'w -> (forall 'g, 'x, 'w, 'y, 'z, 'update, 'u, 'a1. ('y -> ('z, "hey",)
//│   where
//│     'g <: {update: 'u -> ('w -> ('y -> 'z & 'a1) & 'x) & 'update})))}) -> ('f & 'e)))
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.302: 	def step arr f = f (stepImpl2_Ann_3 arr)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a_2803` is not an instance of type `'a_1055_1081`
//│ ║  l.265: 	def step: Arrays['a] -> Arrays['a]
//│ ║         	                 ^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.139: 	    fold   = (fun f -> fun b -> fun ((r0, r1)) -> arrImpl.fold f b r0) : Fold['a, ('rep, string)]
//│ ╙──       	                                                                              ^^
//│     = [Function: step2]

// * This used to be the only working one based on an internal annotation
def step arr f = f (stepImpl2_Ann_4 arr)
//│ 'b -> (forall 'c, 'b, 'd, 'e, 'f. (('f -> 'd & 'c) -> 'd
//│   where
//│     'b <: (forall 'g, 'h, 'i, 'j, 'update, 'k, 'l, 'a, 'm, 'n, 'o, 'r, 'p, 'q, 's, 'sub, 't, 'u, 'v, 'w, 'x, 'y, 'z, 'a1, 'b1, 'init, 'c1, 'fold, 'd1. ({fold: ('a -> (‘b_1427_1451 & 'w) -> (‘b_1427_1451 | 'c1) | 's) -> ((‘b_1427_1451 | 'c1) -> ('v -> (‘b_1427_1451 & 'w) & 'o) & 'z) & 'fold, init: 'j -> ('v & 'a1 & 'k & 't & 'b1) & 'init, sub: 'b1 -> ((int | 'h) -> ('a & 'p) & 'n) & 'sub, update: 't -> ((int | 'h | 'i) -> ('u -> ('v & 'k & 't & 'b1 & 'y) & 'd1) & 'g) & 'update} & 'x) -> ArraysRep['a, 'r]) -> ('e & 'f)))
//│   where
//│     'r :> ('a1 | 'y, "hey" | "hi",)
//│        <: ('v & 'k & 't & 'b1, 'q & 'm & 'l,)
//│     'a <: 'u & 'j
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step3]

def step arr f = f (stepImpl2_Ann_2_Ann arr)
//│ 'c -> (forall 'c, 'd, 'a, 'a0, 'a1, 'r, 'e, 'r0, 'a2, 'f. ((({fold: forall 'g. 'g -> (forall 'h. 'h -> (forall 'h, 'i, 'j, 'a, 'b, 'k, 'r0, 'a1, 'g, 'r, 'a2. ((‘Rep_2122_2167 & 'r & 'r0 & 'k, 'j,) -> ('i | 'h)
//│   where
//│     'g <: ('a | 'a2 | 'a1) -> ('b | 'h) -> ('b & 'i)))), init: forall 'l, 'm. ('l & 'a2 & 'a) -> ('r | ‘Rep_2122_2167 | 'm, "hi",), sub: forall 'n, 'o. (‘Rep_2122_2167 & 'r & 'n & 'r0, 'o,) -> (forall 'p, 'q, 's. (int & 'p & 'q) -> ('a | 'a2 | 'a1 | 's)), update: forall 't, 'u. (‘Rep_2122_2167 & 'r & 'r0 & 't, 'u,) -> (forall 'q. (int & 'q) -> (forall 'v, 'w. ('a2 & 'a & 'v) -> ('r | ‘Rep_2122_2167 | 'w, "hey",)))} | 'f) -> 'e & 'd) -> 'e
//│   where
//│     'c <: Arrays['a0]))
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step4]

def step (arr: Arrays['a]) f = f (stepImpl2_Ann_2_Ann arr)
//│ Arrays['a] -> (forall 'a0, 'c, 'r, 'd, 'e, 'r0, 'a1, 'a2. (({fold: forall 'f. 'f -> (forall 'g. 'g -> (forall 'b, 'h, 'i, 'j, 'r, 'g, 'r0, 'a0, 'f, 'a1, 'a2. ((‘Rep_2122_2167 & 'r & 'r0 & 'h, 'j,) -> ('i | 'g)
//│   where
//│     'f <: ('a0 | 'a1 | 'a2) -> ('b | 'g) -> ('b & 'i)))), init: forall 'k, 'l. ('k & 'a1 & 'a0) -> ('r | ‘Rep_2122_2167 | 'l, "hi",), sub: forall 'm, 'n. (‘Rep_2122_2167 & 'r & 'm & 'r0, 'n,) -> (forall 'o, 'p, 'q. (int & 'o & 'p) -> ('a0 | 'a1 | 'a2 | 'q)), update: forall 's, 't. (‘Rep_2122_2167 & 'r & 'r0 & 's, 't,) -> (forall 'p. (int & 'p) -> (forall 'u, 'v. ('a1 & 'a0 & 'u) -> ('r | ‘Rep_2122_2167 | 'v, "hey",)))} | 'd) -> 'e & 'c) -> 'e)
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step5]

// * Also works, but this one is easier as it internally uses the fully-annotated `stepImpl_ty`
def step arr f = f (stepImpl2_ arr)
//│ 'b -> (forall 'b, 'c, 'd, 'e, 'f. (('c -> 'd & 'e) -> 'd
//│   where
//│     'b <: (forall 'a, 'r. ArraysRep['a, 'r] -> ArraysRep['a, ('r, string,)]) -> ('f & 'c)))
//│   <:  step:
//│ Arrays['a] -> Arrays['a]
//│     = [Function: step6]



ssb = step (step base)
//│ ssb: Arrays['a]
//│    = [Function (anonymous)]

ssb (fun arr ->
    let r2 = arr.update (arr.init true) 1 false
    in (arr.sub r2 0, arr.sub r2 1)
  )
//│ res: (bool, bool,)
//│    = [ false, false ]



rec def mkMonoArray n =
  if n == 0 then base else step (mkMonoArray(n - 1))
//│ mkMonoArray: int -> (forall 'a. Arrays['a])
//│            = [Function: mkMonoArray]

snb = mkMonoArray 5
//│ snb: Arrays['a]
//│    = [Function (anonymous)]

snb (fun arr -> arr.init true)
//│ res: ‘Rep_3684_3688 | ‘Rep_3692_3696
//│    = [ [ [ [Array], 'hi' ], 'hi' ], 'hi' ]



