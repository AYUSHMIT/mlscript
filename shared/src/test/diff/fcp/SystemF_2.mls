:NoRecursiveTypes
:GeneralizeCurriedFunctions
:NoConstrainedTypes
:DistributeForalls



I x = x
K x y = x
//│ I: 'a -> 'a
//│  = [Function: I]
//│ K: 'a -> anything -> 'a
//│  = [Function: K]

id x = x
iter2 f x = f(f x)
//│ id: 'a -> 'a
//│   = [Function: id]
//│ iter2: ('a -> 'b & 'c -> 'a) -> 'c -> 'b
//│      = [Function: iter2]

iter2 iter2
//│ res: ('a -> 'b & ('c | 'b) -> 'a) -> 'c -> 'b
//│    = [Function (anonymous)]

id iter2 iter2
//│ res: ('a -> 'b & ('c | 'b) -> 'a) -> 'c -> 'b
//│    = [Function (anonymous)]

:e // TODO(oc) really recursive?!
iter2 iter2 K
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> anything -> anything -> 'a
//│ ║  l.16: 	iter2 f x = f(f x)
//│ ╙──      	            ^^^^^^
//│ res: 'a -> 'b
//│   where
//│     'a :> 'b
//│     'b :> anything -> anything -> 'a
//│    = [Function (anonymous)]



// (λzy. y(zI)(zK))(λx. xx).
foo = (fun z -> fun y -> y (z I) (z K))
//│ foo: ((forall 'a. 'a -> anything -> 'a) -> 'b & (forall 'c. 'c -> 'c) -> 'd) -> ('d -> 'b -> 'e) -> 'e
//│    = [Function: foo]

foo (fun x -> x x)
//│ res: ((forall 'a. 'a -> 'a) -> (anything -> (forall 'b. 'b -> anything -> 'b)) -> 'c) -> 'c
//│    = [Function (anonymous)]

n0_ s z = z
def n0: forall 'X. ('X -> 'X) -> 'X -> 'X
n0 = n0_
//│ n0_: anything -> 'a -> 'a
//│    = [Function: n0_]
//│ n0: ('X -> 'X) -> 'X -> 'X
//│   = <missing implementation>
//│ anything -> 'a -> 'a
//│   <:  n0:
//│ ('X -> 'X) -> 'X -> 'X
//│   = [Function: n0_]

succ_ n s z = s (n s z)
def succ: (forall 'X. ('X -> 'X) -> 'X -> 'X) -> (forall 'X. ('X -> 'X) -> 'X -> 'X)
succ = succ_
//│ succ_: ('a -> 'b -> 'c) -> ('c -> 'd & 'a) -> 'b -> 'd
//│      = [Function: succ_]
//│ succ: (forall 'X. ('X -> 'X) -> 'X -> 'X) -> (forall 'X0. ('X0 -> 'X0) -> 'X0 -> 'X0)
//│     = <missing implementation>
//│ ('a -> 'b -> 'c) -> ('c -> 'd & 'a) -> 'b -> 'd
//│   <:  succ:
//│ (forall 'X. ('X -> 'X) -> 'X -> 'X) -> (forall 'X0. ('X0 -> 'X0) -> 'X0 -> 'X0)
//│     = [Function: succ_]

c2 = succ (succ n0)
//│ c2: ('X -> 'X) -> 'X -> 'X
//│   = [Function (anonymous)]

:e // TODO(oc) really recursive?!
c2 c2 K
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> anything -> 'a
//│ ╙──
//│ res: ('X & 'a) -> ('X | anything -> 'a)
//│   where
//│     'X :> anything -> 'X
//│    = [Function (anonymous)]

c2_ = succ_ (succ_ n0)
//│ c2_: ('a -> 'b & 'X -> 'a & 'X -> 'X) -> 'X -> 'b
//│    = [Function (anonymous)]

:e // * Started failing after better distrib, not sure why...
c2_ c2_
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.98: 	c2_ c2_
//│ ║        	^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 4. α374_674'''''›  <:  'X345_663    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 4. α374_673''''›  <:  'X345_556'
//│ res: error
//│    = [Function (anonymous)]

:e
c2_ c2_!
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.109: 	c2_ c2_!
//│ ║         	^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 4. α374_767'''''›  <:  α367_768    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 4. α374_766''''›  <:  α367_765''''
//│ res: error
//│    = [Function (anonymous)]

:e // * Started failing after better distrib, not sure why...
c2_ c2_ K
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.120: 	c2_ c2_ K
//│ ║         	^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 4. α374_858'''''›  <:  'X345_847    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 4. α374_857''''›  <:  'X345_556'
//│ res: error
//│    = [Function (anonymous)]

c2__ = succ_ (succ_ n0_)
//│ c2__: ('a -> 'b & 'c -> 'a) -> 'c -> 'b
//│     = [Function (anonymous)]

c2__ c2__
//│ res: ('a -> 'b & ('c | 'b) -> 'a) -> 'c -> 'b
//│    = [Function (anonymous)]

:e // TODO(oc) really recursive?!
c2__ c2__ K
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> anything -> anything -> (forall 'a. 'a)
//│ ║  l.66: 	succ_ n s z = s (n s z)
//│ ╙──      	              ^^^^^^^^^
//│ res: 'a -> 'b
//│   where
//│     'a :> 'b
//│     'b :> anything -> anything -> 'a
//│    = [Function (anonymous)]




// ==============

:ConstrainedTypes
:DontDistributeForalls

// ==============



id x = x
iter2 f x = f(f x)
//│ id: 'a -> 'a
//│   = [Function: id1]
//│ iter2: 'a -> (forall 'b, 'c, 'd. ('b -> 'd
//│   where
//│     'a <: 'b -> 'c & 'c -> 'd))
//│      = [Function: iter21]

iter2 iter2
//│ res: 'a -> 'b
//│   where
//│     forall 'c. 'c -> (forall 'd, 'e, 'f. ('d -> 'f
//│   where
//│     'c <: 'd -> 'e & 'e -> 'f)) <: 'a -> 'g & 'g -> 'b
//│    = [Function (anonymous)]

id iter2 iter2
//│ res: 'a -> 'b
//│   where
//│     forall 'c. 'c -> (forall 'd, 'e, 'f. ('d -> 'f
//│   where
//│     'c <: 'd -> 'e & 'e -> 'f)) <: 'a -> 'g & 'g -> 'b
//│    = [Function (anonymous)]


iter2 iter2 K
//│ res: 'a -> 'b
//│   where
//│     forall 'c, 'd, 'e. ('c -> 'e
//│   where
//│     forall 'f. 'f -> anything -> 'f <: 'c -> 'd & 'd -> 'e) <: 'a -> 'g & 'g -> 'b
//│    = [Function (anonymous)]



// (λzy. y(zI)(zK))(λx. xx).
foo = (fun z -> fun y -> y (z I) (z K))
//│ foo: 'a -> (forall 'b, 'c, 'd. (('b -> 'c -> 'd) -> 'd
//│   where
//│     'a <: (forall 'e. 'e -> 'e) -> 'b & (forall 'f. 'f -> anything -> 'f) -> 'c))
//│    = [Function: foo1]

foo (fun x -> x x)
//│ res: ('a -> 'b -> 'c) -> 'c
//│   where
//│     forall 'd, 'e. ('d -> 'e & 'd) -> 'e <: (forall 'f. 'f -> 'f) -> 'a & (forall 'g. 'g -> anything -> 'g) -> 'b
//│    = [Function (anonymous)]

n0_ s z = z
def n0: forall 'X. ('X -> 'X) -> 'X -> 'X
n0 = n0_
//│ n0_: anything -> (forall 'a. 'a -> 'a)
//│    = [Function: n0_1]
//│ n0: ('X -> 'X) -> 'X -> 'X
//│   = <missing implementation>
//│ anything -> (forall 'a. 'a -> 'a)
//│   <:  n0:
//│ ('X -> 'X) -> 'X -> 'X
//│   = [Function: n0_1]

succ_ n s z = s (n s z)
def succ: (forall 'X. ('X -> 'X) -> 'X -> 'X) -> (forall 'X. ('X -> 'X) -> 'X -> 'X)
//│ succ_: 'a -> (forall 'b. 'b -> (forall 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'b <: 'd -> 'e
//│     'a <: 'b -> 'c -> 'd)))
//│      = [Function: succ_1]
//│ succ: (forall 'X. ('X -> 'X) -> 'X -> 'X) -> (forall 'X0. ('X0 -> 'X0) -> 'X0 -> 'X0)
//│     = <missing implementation>
:e // * Needs distrib
succ = succ_
//│ 'a -> (forall 'b. 'b -> (forall 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e)))
//│   <:  succ:
//│ (forall 'X. ('X -> 'X) -> 'X -> 'X) -> (forall 'X0. ('X0 -> 'X0) -> 'X0 -> 'X0)
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.234: 	succ = succ_
//│ ║         	^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.225: 	def succ: (forall 'X. ('X -> 'X) -> 'X -> 'X) -> (forall 'X. ('X -> 'X) -> 'X -> 'X)
//│ ║         	                                                         ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.225: 	def succ: (forall 'X. ('X -> 'X) -> 'X -> 'X) -> (forall 'X. ('X -> 'X) -> 'X -> 'X)
//│ ║         	                                                         ^^
//│ ╟── from quantified type variable:
//│ ║  l.225: 	def succ: (forall 'X. ('X -> 'X) -> 'X -> 'X) -> (forall 'X. ('X -> 'X) -> 'X -> 'X)
//│ ╙──       	                  ^^
//│     = [Function: succ_1]

c2 = succ (succ n0)
//│ c2: ('X -> 'X) -> 'X -> 'X
//│   = [Function (anonymous)]

:e // TODO(oc) really recursive?!
c2 c2 K
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> anything -> 'a
//│ ╙──
//│ res: ('X & 'a) -> ('X | anything -> 'a)
//│   where
//│     'X :> anything -> 'X
//│    = [Function (anonymous)]

c2_ = succ_ (succ_ n0)
//│ c2_: 'a -> (forall 'b, 'c, 'd. ('d -> 'c
//│   where
//│     forall 'e. 'e -> (forall 'f, 'g, 'h. ('f -> 'h
//│   where
//│     'e <: 'g -> 'h
//│     forall 'X. ('X -> 'X) -> 'X -> 'X <: 'e -> 'f -> 'g)) <: 'a -> 'd -> 'b
//│     'a <: 'b -> 'c))
//│    = [Function (anonymous)]

c2_ c2_
//│ res: 'a -> 'b
//│   where
//│     forall 'c. 'c -> (forall 'd, 'e, 'f. ('d -> 'f
//│   where
//│     'c <: 'e -> 'f
//│     forall 'g. 'g -> (forall 'h, 'i, 'j. ('h -> 'j
//│   where
//│     forall 'X. ('X -> 'X) -> 'X -> 'X <: 'g -> 'h -> 'i
//│     'g <: 'i -> 'j)) <: 'c -> 'd -> 'e)) <: 'k -> 'b
//│     forall 'l. 'l -> (forall 'm, 'n, 'o. ('m -> 'o
//│   where
//│     forall 'X. ('X -> 'X) -> 'X -> 'X <: 'l -> 'm -> 'n
//│     'l <: 'n -> 'o)) <: (forall 'c. 'c -> (forall 'd, 'e, 'f. ('d -> 'f
//│   where
//│     'c <: 'e -> 'f
//│     forall 'g. 'g -> (forall 'h, 'i, 'j. ('h -> 'j
//│   where
//│     forall 'X. ('X -> 'X) -> 'X -> 'X <: 'g -> 'h -> 'i
//│     'g <: 'i -> 'j)) <: 'c -> 'd -> 'e))) -> 'a -> 'k
//│    = [Function (anonymous)]

:e // TODO(oc) really recursive?!
c2_ c2_ K
//│ ╔══[ERROR] Inferred recursive type: 'a
//│   where
//│     'a :> forall 'b, 'c, 'd, 'e. (('d & 'e) -> (anything -> 'd | 'c)
//│   where
//│     forall 'f. 'f -> (forall 'g, 'h, 'i. ('g -> 'i
//│   where
//│     forall 'X. ('X -> 'X) -> 'X -> 'X <: 'f -> 'g -> 'h
//│     'f <: 'h -> 'i)) <: 'a -> 'e -> 'b
//│     'a <: 'b -> 'c)
//│ ╙──
//│ res: 'a -> 'b
//│   where
//│     forall 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'f <: 'd -> 'e
//│     forall 'g. 'g -> (forall 'h, 'i, 'j. ('i -> 'h
//│   where
//│     'g <: 'j -> 'h
//│     forall 'X. ('X -> 'X) -> 'X -> 'X <: 'g -> 'i -> 'j)) <: 'f -> 'c -> 'd) <: 'k -> 'b
//│     forall 'l. 'l -> (forall 'm, 'n, 'o. ('m -> 'o
//│   where
//│     'l <: 'n -> 'o
//│     forall 'X. ('X -> 'X) -> 'X -> 'X <: 'l -> 'm -> 'n)) <: (forall 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'f <: 'd -> 'e
//│     forall 'g. 'g -> (forall 'h, 'i, 'j. ('i -> 'h
//│   where
//│     'g <: 'j -> 'h
//│     forall 'X. ('X -> 'X) -> 'X -> 'X <: 'g -> 'i -> 'j)) <: 'f -> 'c -> 'd)) -> 'a -> 'k
//│   where
//│     'f :> forall 'p, 'q, 'r, 's. (('s & 'p) -> (anything -> 's | 'r)
//│   where
//│     forall 't. 't -> (forall 'u, 'v, 'w. ('u -> 'w
//│   where
//│     forall 'X. ('X -> 'X) -> 'X -> 'X <: 't -> 'u -> 'v
//│     't <: 'v -> 'w)) <: 'f -> 'p -> 'q
//│     'f <: 'q -> 'r)
//│    = [Function (anonymous)]

c2__ = succ_ (succ_ n0_)
//│ c2__: 'a -> (forall 'b, 'c, 'd. ('d -> 'c
//│   where
//│     forall 'e. 'e -> (forall 'f, 'g, 'h. ('f -> 'h
//│   where
//│     anything -> (forall 'i. 'i -> 'i) <: 'e -> 'f -> 'g
//│     'e <: 'g -> 'h)) <: 'a -> 'd -> 'b
//│     'a <: 'b -> 'c))
//│     = [Function (anonymous)]

c2__ c2__
//│ res: 'a -> 'b
//│   where
//│     forall 'c. 'c -> (forall 'd, 'e, 'f. ('d -> 'f
//│   where
//│     'c <: 'e -> 'f
//│     anything -> (forall 'g. 'g -> 'g) <: 'c -> 'd -> 'e)) <: (forall 'h. 'h -> (forall 'i, 'j, 'k. ('i -> 'k
//│   where
//│     forall 'l. 'l -> (forall 'm, 'n, 'o. ('m -> 'o
//│   where
//│     anything -> (forall 'g. 'g -> 'g) <: 'l -> 'm -> 'n
//│     'l <: 'n -> 'o)) <: 'h -> 'i -> 'j
//│     'h <: 'j -> 'k))) -> 'a -> 'p
//│     forall 'h. 'h -> (forall 'i, 'j, 'k. ('i -> 'k
//│   where
//│     forall 'l. 'l -> (forall 'm, 'n, 'o. ('m -> 'o
//│   where
//│     anything -> (forall 'g. 'g -> 'g) <: 'l -> 'm -> 'n
//│     'l <: 'n -> 'o)) <: 'h -> 'i -> 'j
//│     'h <: 'j -> 'k)) <: 'p -> 'b
//│    = [Function (anonymous)]

c2__ c2__ K
//│ res: 'a -> 'b
//│   where
//│     forall 'c. 'c -> (forall 'd, 'e, 'f. ('d -> 'f
//│   where
//│     anything -> (forall 'g. 'g -> 'g) <: 'c -> 'd -> 'e
//│     'c <: 'e -> 'f)) <: (forall 'h, 'i, 'j. ('j -> 'i
//│   where
//│     forall 'k. 'k -> (forall 'l, 'm, 'n. ('l -> 'n
//│   where
//│     anything -> (forall 'g. 'g -> 'g) <: 'k -> 'l -> 'm
//│     'k <: 'm -> 'n)) <: (forall 'o. 'o -> anything -> 'o) -> 'j -> 'h
//│     forall 'o. 'o -> anything -> 'o <: 'h -> 'i)) -> 'a -> 'p
//│     forall 'h, 'i, 'j. ('j -> 'i
//│   where
//│     forall 'k. 'k -> (forall 'l, 'm, 'n. ('l -> 'n
//│   where
//│     anything -> (forall 'g. 'g -> 'g) <: 'k -> 'l -> 'm
//│     'k <: 'm -> 'n)) <: (forall 'o. 'o -> anything -> 'o) -> 'j -> 'h
//│     forall 'o. 'o -> anything -> 'o <: 'h -> 'i) <: 'p -> 'b
//│    = [Function (anonymous)]



