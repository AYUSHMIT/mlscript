// * This is a minimization of the error that happens in `QML_exist_Records`


:NoRecursiveTypes
:GeneralizeCurriedFunctions
:ConstrainedTypes
// :DistributeForalls
// :ArgGen


type ArraysRep[Rep] = { fold: forall 'b. 'b -> Rep -> 'b }
//│ Defined type alias ArraysRep[-Rep]

type Arrays = (forall 'Rep. ArraysRep['Rep] -> 'r) -> 'r
//│ Defined type alias Arrays

// :d
def stepImpl arrImpl = { fold = fun f -> fun r0 -> arrImpl.fold f r0 }
//│ stepImpl: 'a -> {fold: forall 'b 'c 'd. 'b -> ('c -> 'd
//│   where
//│     'a <: {fold: 'b -> 'c -> 'd})}
//│         = [Function: stepImpl]

// :d
def stepImpl2 arr = arr stepImpl
//│ stepImpl2: ((forall 'a. 'a -> {fold: forall 'b 'c 'd. 'b -> ('c -> 'd
//│   where
//│     'a <: {fold: 'b -> 'c -> 'd})}) -> 'e) -> 'e
//│          = [Function: stepImpl2]

def step: Arrays -> Arrays
//│ step: Arrays -> Arrays
//│     = <missing implementation>

:e // * Since "sound extrusion"
def step arr g = g (stepImpl2 arr)
//│ 'a -> (('b -> 'c) -> 'c
//│   where
//│     'a <: (forall 'd. 'd -> {fold: forall 'e 'f 'g. 'e -> ('f -> 'g
//│   where
//│     'd <: {fold: 'e -> 'f -> 'g})}) -> 'b)
//│   <:  step:
//│ Arrays -> Arrays
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.36: 	def step arr g = g (stepImpl2 arr)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.11: 	type ArraysRep[Rep] = { fold: forall 'b. 'b -> Rep -> 'b }
//│ ║        	                                     ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.11: 	type ArraysRep[Rep] = { fold: forall 'b. 'b -> Rep -> 'b }
//│ ║        	                                     ^^
//│ ╟── from application:
//│ ║  l.18: 	def stepImpl arrImpl = { fold = fun f -> fun r0 -> arrImpl.fold f r0 }
//│ ╙──      	                                                   ^^^^^^^^^^^^^^^^^
//│     = [Function: step]

