:NoRecursiveTypes
:NoProvs
:NoJS


def single: 'a -> MutArray['a]
//│ single: 'a -> MutArray['a]

sid = single id
//│ sid: MutArray['a]
//│   where
//│     'a :> forall 'b. 'b -> 'b

def ty1: MutArray[forall 'A. 'A -> 'A]
def ty1 = sid
//│ ty1: MutArray[forall 'A. 'A -> 'A]
//│ MutArray['a]
//│   where
//│     'a :> forall 'b. 'b -> 'b
//│   <:  ty1:
//│ MutArray[forall 'A. 'A -> 'A]

def ty2: forall 'A. MutArray['A -> 'A]
def ty2 = sid
//│ ty2: MutArray['A -> 'A]
//│ MutArray['a]
//│   where
//│     'a :> forall 'b. 'b -> 'b
//│   <:  ty2:
//│ MutArray['A -> 'A]

:e
ty1 = ty2
//│ MutArray['A -> 'A]
//│   <:  ty1:
//│ MutArray[forall 'A. 'A -> 'A]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.33: 	ty1 = ty2
//│ ║        	^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.14: 	def ty1: MutArray[forall 'A. 'A -> 'A]
//│ ║        	                         ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.14: 	def ty1: MutArray[forall 'A. 'A -> 'A]
//│ ╙──      	                         ^^

:e
ty2 = ty1
//│ MutArray[forall 'A. 'A -> 'A]
//│   <:  ty2:
//│ MutArray['A -> 'A]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.48: 	ty2 = ty1
//│ ║        	^^^^^^^^^
//│ ╟── type `'A` does not match type `'A0`
//│ ║  l.14: 	def ty1: MutArray[forall 'A. 'A -> 'A]
//│ ║        	                         ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.23: 	def ty2: forall 'A. MutArray['A -> 'A]
//│ ╙──      	                ^^





