:GeneralizeCurriedFunctions
:NoRecursiveTypes
:NoProvs
:NoJS


def single: 'a -> MutArray['a]
//│ single: 'a -> MutArray['a]

sid = single id
//│ sid: MutArray['a]
//│   where
//│     'a :> forall 'b. 'b -> 'b

def ty1: MutArray[forall 'A. 'A -> 'A]
def ty1 = sid
//│ ty1: MutArray[forall 'A. 'A -> 'A]
//│ MutArray['a]
//│   where
//│     'a :> forall 'b. 'b -> 'b
//│   <:  ty1:
//│ MutArray[forall 'A. 'A -> 'A]

def ty2: forall 'A. MutArray['A -> 'A]
def ty2 = sid
//│ ty2: MutArray['A -> 'A]
//│ MutArray['a]
//│   where
//│     'a :> forall 'b. 'b -> 'b
//│   <:  ty2:
//│ MutArray['A -> 'A]

:e
ty1 = ty2
//│ MutArray['A -> 'A]
//│   <:  ty1:
//│ MutArray[forall 'A. 'A -> 'A]
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition; a type annotation may be required
//│ ║  l.34: 	ty1 = ty2
//│ ║        	^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‘A_81_82  <:  'A54_79    TraitTag  TypeVariable
//│ ╙──  ... looks like:  ‘A_81_82  <:  'A54_55''

:e
ty2 = ty1
//│ MutArray[forall 'A. 'A -> 'A]
//│   <:  ty2:
//│ MutArray['A -> 'A]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.46: 	ty2 = ty1
//│ ║        	^^^^^^^^^
//│ ╟── type `‘A_90` is not an instance of type `'A_89`
//│ ║  l.15: 	def ty1: MutArray[forall 'A. 'A -> 'A]
//│ ║        	                         ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.24: 	def ty2: forall 'A. MutArray['A -> 'A]
//│ ╙──      	                ^^





