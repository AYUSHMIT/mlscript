:GeneralizeCurriedFunctions
:NoRecursiveTypes
// :ArgGen


def auto_ : (forall 'a. 'a -> 'a) -> 'b -> 'b
def auto_ x = x x
//│ auto_: (forall 'a. 'a -> 'a) -> 'b -> 'b
//│      = <missing implementation>
//│ ('a -> 'b & 'a) -> 'b
//│   <:  auto_:
//│ (forall 'a. 'a -> 'a) -> 'b -> 'b
//│      = [Function: auto_]

fun (x: (forall 'a. 'a -> 'a)) -> auto_ x
//│ res: (forall 'a. 'a -> 'a) -> 'b -> 'b
//│    = [Function: res]

// * Compares an extruded higher-level skolem; rightly rejected
:e
fun (x: ('a -> 'a)) -> auto_ x
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.21: 	fun (x: ('a -> 'a)) -> auto_ x
//│ ║        	                       ^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.6: 	def auto_ : (forall 'a. 'a -> 'a) -> 'b -> 'b
//│ ║       	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.6: 	def auto_ : (forall 'a. 'a -> 'a) -> 'b -> 'b
//│ ╙──     	                    ^^
//│ res: (anything -> nothing) -> error
//│    = [Function: res]

foo(x: ('a -> 'b)) = auto_ x
//│ foo: (anything -> nothing) -> ('b -> 'b | 'a)
//│    = [Function: foo]

:e
foo (fun x -> x)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.39: 	foo (fun x -> x)
//│ ║        	^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.6: 	def auto_ : (forall 'a. 'a -> 'a) -> 'b -> 'b
//│ ║       	                    ^^
//│ ╟── but it flows into reference with expected type `nothing`
//│ ║  l.39: 	foo (fun x -> x)
//│ ║        	              ^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.6: 	def auto_ : (forall 'a. 'a -> 'a) -> 'b -> 'b
//│ ║       	                    ^^
//│ ╟── from type variable:
//│ ║  l.34: 	foo(x: ('a -> 'b)) = auto_ x
//│ ╙──      	              ^^
//│ res: error
//│    = [Function (anonymous)]

:e
foo (fun x -> 0)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.59: 	foo (fun x -> 0)
//│ ║        	^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `0` does not match type `nothing`
//│ ║  l.59: 	foo (fun x -> 0)
//│ ║        	              ^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.6: 	def auto_ : (forall 'a. 'a -> 'a) -> 'b -> 'b
//│ ║       	                    ^^
//│ ╟── from type variable:
//│ ║  l.34: 	foo(x: ('a -> 'b)) = auto_ x
//│ ╙──      	              ^^
//│ res: error
//│    = 0

:e
foo (fun x -> foo (fun y -> y) x)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.76: 	foo (fun x -> foo (fun y -> y) x)
//│ ║        	              ^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.6: 	def auto_ : (forall 'a. 'a -> 'a) -> 'b -> 'b
//│ ║       	                    ^^
//│ ╟── but it flows into reference with expected type `nothing`
//│ ║  l.76: 	foo (fun x -> foo (fun y -> y) x)
//│ ║        	                            ^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.6: 	def auto_ : (forall 'a. 'a -> 'a) -> 'b -> 'b
//│ ║       	                    ^^
//│ ╟── from type variable:
//│ ║  l.34: 	foo(x: ('a -> 'b)) = auto_ x
//│ ╙──      	              ^^
//│ res: 'b -> 'b
//│    = [Function (anonymous)]

// * This would be unsound; `fun y -> x` does not have type `forall 'a. 'a -> 'a` but it is eventually passed to auto_
:e
foo (fun x -> foo (fun y -> x) x)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.97: 	foo (fun x -> foo (fun y -> x) x)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.6: 	def auto_ : (forall 'a. 'a -> 'a) -> 'b -> 'b
//│ ║       	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.6: 	def auto_ : (forall 'a. 'a -> 'a) -> 'b -> 'b
//│ ║       	                    ^^
//│ ╟── from reference:
//│ ║  l.97: 	foo (fun x -> foo (fun y -> x) x)
//│ ╙──      	                            ^
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded


// * Producing an actual crash from this:

def oops (i: forall 'a. 'a -> 'a) =
  let _ = (i id) "hello"
  in i
//│ oops: (forall 'a. 'a -> 'a) -> (forall 'a. 'a -> 'a)
//│     = [Function: oops]

// If we were not careful this would lead to unsound skolem extrusion:
def extrude (f: 'a -> 'b) = oops f
//│ extrude: (anything -> nothing) -> (forall 'a. 'a -> 'a | 'b)
//│        = [Function: extrude]

:e
f = extrude (fun x -> extrude (fun y -> x) x)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.129: 	f = extrude (fun x -> extrude (fun y -> x) x)
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.117: 	def oops (i: forall 'a. 'a -> 'a) =
//│ ║         	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.117: 	def oops (i: forall 'a. 'a -> 'a) =
//│ ║         	                    ^^
//│ ╟── from reference:
//│ ║  l.129: 	f = extrude (fun x -> extrude (fun y -> x) x)
//│ ╙──       	                                        ^
//│ f: error
//│  = [Function (anonymous)]

:re
f 42 // Boom!
//│ res: error
//│ Runtime error:
//│   TypeError: i(...) is not a function



def swapWith: (forall 'x 'y. (('x, 'y),) -> ('y, 'x)) -> ('a, 'b) -> ('b, 'a)
//│ swapWith: (forall 'x, 'y. ('x, 'y,) -> ('y, 'x,)) -> ('a, 'b,) -> ('b, 'a,)
//│         = <missing implementation>

def swapWith f (a, b) = f ((a, b))
//│ (('a, 'b,) -> 'c & 'd) -> (forall 'e, 'f, 'g. ('a & 'e, 'b & 'f,) -> ('g | 'c))
//│   <:  swapWith:
//│ (forall 'x, 'y. ('x, 'y,) -> ('y, 'x,)) -> ('a, 'b,) -> ('b, 'a,)
//│         = [Function: swapWith]


// * This is an error because it would force the swapped tuple to be the same 'a as the original
:e
fun (x: ('a -> 'a)) -> swapWith x
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.166: 	fun (x: ('a -> 'a)) -> swapWith x
//│ ║         	                       ^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.153: 	def swapWith: (forall 'x 'y. (('x, 'y),) -> ('y, 'x)) -> ('a, 'b) -> ('b, 'a)
//│ ║         	                      ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.153: 	def swapWith: (forall 'x 'y. (('x, 'y),) -> ('y, 'x)) -> ('a, 'b) -> ('b, 'a)
//│ ╙──       	                         ^^
//│ res: (('a | (anything, anything,)) -> ((nothing, nothing,) & 'a)) -> error
//│    = [Function: res]

foo = fun (x: ('a -> 'b)) -> swapWith x
//│ foo: (('a | (anything, anything,)) -> ((nothing, nothing,) & 'b)) -> (('a0, 'b0,) -> ('b0, 'a0,) | 'c)
//│    = [Function: foo1]

bar = fun f -> foo f (1, 2)
//│ bar: (('a | (anything, anything,)) -> ((nothing, nothing,) & 'b) & 'c) -> (('b0 | 2, 'a0 | 1,) | 'd)
//│    = [Function: bar]

:e
bar (fun ((u, v),) -> (v, u))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.188: 	bar (fun ((u, v),) -> (v, u))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.153: 	def swapWith: (forall 'x 'y. (('x, 'y),) -> ('y, 'x)) -> ('a, 'b) -> ('b, 'a)
//│ ║         	                         ^^
//│ ╟── but it flows into reference with expected type `nothing`
//│ ║  l.188: 	bar (fun ((u, v),) -> (v, u))
//│ ║         	                       ^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.153: 	def swapWith: (forall 'x 'y. (('x, 'y),) -> ('y, 'x)) -> ('a, 'b) -> ('b, 'a)
//│ ╙──       	                         ^^
//│ res: error
//│    = [ 2, 1 ]

:e
bar (fun ((u1, v1),) -> let tmp = bar (fun ((u2, v2),) -> (v2, u2)) in (v1, u1))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.205: 	bar (fun ((u1, v1),) -> let tmp = bar (fun ((u2, v2),) -> (v2, u2)) in (v1, u1))
//│ ║         	                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.153: 	def swapWith: (forall 'x 'y. (('x, 'y),) -> ('y, 'x)) -> ('a, 'b) -> ('b, 'a)
//│ ║         	                         ^^
//│ ╟── but it flows into reference with expected type `nothing`
//│ ║  l.205: 	bar (fun ((u1, v1),) -> let tmp = bar (fun ((u2, v2),) -> (v2, u2)) in (v1, u1))
//│ ║         	                                                           ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.153: 	def swapWith: (forall 'x 'y. (('x, 'y),) -> ('y, 'x)) -> ('a, 'b) -> ('b, 'a)
//│ ╙──       	                         ^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.205: 	bar (fun ((u1, v1),) -> let tmp = bar (fun ((u2, v2),) -> (v2, u2)) in (v1, u1))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.153: 	def swapWith: (forall 'x 'y. (('x, 'y),) -> ('y, 'x)) -> ('a, 'b) -> ('b, 'a)
//│ ║         	                         ^^
//│ ╟── but it flows into reference with expected type `nothing`
//│ ║  l.205: 	bar (fun ((u1, v1),) -> let tmp = bar (fun ((u2, v2),) -> (v2, u2)) in (v1, u1))
//│ ║         	                                                                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.153: 	def swapWith: (forall 'x 'y. (('x, 'y),) -> ('y, 'x)) -> ('a, 'b) -> ('b, 'a)
//│ ╙──       	                         ^^
//│ res: error
//│    = [ 2, 1 ]

:e // * Not sure why this one is rejected (but the `extrude` version above is accepted.)
bar (fun ((u1, v1),) -> let tmp = bar (fun ((u2, v2),) -> (v1, u1)) in (v1, u1))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.234: 	bar (fun ((u1, v1),) -> let tmp = bar (fun ((u2, v2),) -> (v1, u1)) in (v1, u1))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.153: 	def swapWith: (forall 'x 'y. (('x, 'y),) -> ('y, 'x)) -> ('a, 'b) -> ('b, 'a)
//│ ║         	                      ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.153: 	def swapWith: (forall 'x 'y. (('x, 'y),) -> ('y, 'x)) -> ('a, 'b) -> ('b, 'a)
//│ ║         	                      ^^
//│ ╟── from reference:
//│ ║  l.234: 	bar (fun ((u1, v1),) -> let tmp = bar (fun ((u2, v2),) -> (v1, u1)) in (v1, u1))
//│ ╙──       	                                                               ^^
//│ res: error
//│    = [ 2, 1 ]


:e
fun (x: ((('a, 'b),) -> ('b, 'a))) -> swapWith x
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.252: 	fun (x: ((('a, 'b),) -> ('b, 'a))) -> swapWith x
//│ ║         	                                      ^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.153: 	def swapWith: (forall 'x 'y. (('x, 'y),) -> ('y, 'x)) -> ('a, 'b) -> ('b, 'a)
//│ ║         	                         ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.153: 	def swapWith: (forall 'x 'y. (('x, 'y),) -> ('y, 'x)) -> ('a, 'b) -> ('b, 'a)
//│ ╙──       	                         ^^
//│ res: ((anything, anything,) -> (nothing, anything,)) -> error
//│    = [Function: res]

fun (x: ((('a, 'b),) -> ('c, 'd))) -> swapWith x
//│ res: ((anything, anything,) -> (nothing, nothing,)) -> ('a, 'b,) -> ('b, 'a,)
//│    = [Function: res]


