
:GeneralizeCurriedFunctions
:NoConstrainedTypes
:DontDistributeForalls
:NoCycleCheck
:NoRecursiveTypes


// ============ Dummy classes to represent the types in the examples ============

class List[a]
  method Head: a
  method Tail: List[a]
//│ Defined class List[+a]
//│ Declared List.Head: List['a] -> 'a
//│ Declared List.Tail: List['a] -> List['a]

class Nil[a]: List[a]
  method Head = error
  method Tail = this
//│ Defined class Nil[+a]
//│ Defined Nil.Head: Nil[?] -> nothing
//│ Defined Nil.Tail: (Nil['a] & 'this) -> (Nil['a] & 'this)

class Cons[a]: List[a] & { head: a; tail: List[a] }
  method Head = this.head
  method Tail = this.tail
//│ Defined class Cons[+a]
//│ Defined Cons.Head: Cons['a] -> 'a
//│ Defined Cons.Tail: Cons['a] -> List['a]

class ST[S, A]
  method Inv_S: S -> S
  method Cov_A: A
//│ Defined class ST[=S, +A]
//│ Declared ST.Inv_S: ST['S, ?] -> 'S -> 'S
//│ Declared ST.Cov_A: ST['S, 'A] -> 'A


// ============ Type signatures for functions used in the examples ============

def head: List['a] -> 'a
def head l = l.Head
//│ head: List['a] -> 'a
//│     = <missing implementation>
//│ List['a] -> 'a
//│   <:  head:
//│ List['a] -> 'a
//│     = [Function: head]

def tail: List['a] -> List['a]
def tail l = l.Tail
//│ tail: List['a] -> List['a]
//│     = <missing implementation>
//│ List['a] -> List['a]
//│   <:  tail:
//│ List['a] -> List['a]
//│     = [Function: tail]

// Used to represent `[]` in the papers
def nil: List['a]
nil = Nil {}
//│ nil: List[nothing]
//│    = <missing implementation>
//│ Nil[nothing]
//│   <:  nil:
//│ List[nothing]
//│    = Nil {}

def cons: 'a -> List['a] -> List['a]
def cons head tail = Cons { head; tail }
//│ cons: 'a -> List['a] -> List['a]
//│     = <missing implementation>
//│ 'b -> (forall 'a, 'tail. (List['a] & 'tail) -> (Cons['a | 'b] with {head: 'b, tail: 'tail}))
//│   <:  cons:
//│ 'a -> List['a] -> List['a]
//│     = [Function: cons]

def is_empty: List['a] -> bool
def is_empty l = eq l nil
//│ is_empty: List[?] -> bool
//│         = <missing implementation>
//│ anything -> bool
//│   <:  is_empty:
//│ List[?] -> bool
//│         = [Function: is_empty]

def single: 'a -> List['a]
def single x = cons x nil
//│ single: 'a -> List['a]
//│       = <missing implementation>
//│ 'a -> List['a]
//│   <:  single:
//│ 'a -> List['a]
//│       = [Function: single]

def append: List['a] -> List['a] -> List['a]
rec def append l1 l2 =
  if is_empty l1 then l2
  else cons (head l1) (append (tail l1) l2)
//│ append: List['a] -> List['a] -> List['a]
//│       = <missing implementation>
//│ List[?] -> (forall 'b. (List['a] & 'b) -> (List['a] | 'b))
//│   <:  append:
//│ List['a] -> List['a] -> List['a]
//│       = [Function: append]

def length: List['a] -> int
rec def length l =
  if is_empty l then 0
  else succ (length (tail l))
//│ length: List[?] -> int
//│       = <missing implementation>
//│ List[?] -> int
//│   <:  length:
//│ List[?] -> int
//│       = [Function: length]

def id: 'a -> 'a
def id x = x
//│ id: 'a -> 'a
//│   = <missing implementation>
//│ 'a -> 'a
//│   <:  id:
//│ 'a -> 'a
//│   = [Function: id1]

def ids: List[forall 'a. 'a -> 'a]
def ids = single id
//│ ids: List[forall 'a. 'a -> 'a]
//│    = <missing implementation>
//│ List[forall 'a. 'a -> 'a]
//│   <:  ids:
//│ List[forall 'a. 'a -> 'a]
//│    = [Function: ids]

def inc: int -> int
def inc = succ
//│ inc: int -> int
//│    = <missing implementation>
//│ int -> int
//│   <:  inc:
//│ int -> int
//│    = [Function: inc]

def choose: 'a -> 'a -> 'a
def choose x y = if true then x else y
//│ choose: 'a -> 'a -> 'a
//│       = <missing implementation>
//│ 'a -> (forall 'b. 'b -> ('a | 'b))
//│   <:  choose:
//│ 'a -> 'a -> 'a
//│       = [Function: choose]

def poly: (forall 'a. 'a -> 'a) -> (int, bool)
def poly f = (f 1, f true)
//│ poly: (forall 'a. 'a -> 'a) -> (int, bool,)
//│     = <missing implementation>
//│ (true -> 'a & 1 -> 'b) -> ('b, 'a,)
//│   <:  poly:
//│ (forall 'a. 'a -> 'a) -> (int, bool,)
//│     = [Function: poly]

def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
def auto x = x x
//│ auto: (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│     = <missing implementation>
//│ ('a -> 'b & 'a) -> 'b
//│   <:  auto:
//│ (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│     = [Function: auto]

def auto_ : (forall 'a. 'a -> 'a) -> 'b -> 'b
def auto_ x = x x
//│ auto_: (forall 'a. 'a -> 'a) -> 'b -> 'b
//│      = <missing implementation>
//│ ('a -> 'b & 'a) -> 'b
//│   <:  auto_:
//│ (forall 'a. 'a -> 'a) -> 'b -> 'b
//│      = [Function: auto_]

def map: ('a -> 'b) -> List['a] -> List['b]
rec def map f l =
  if is_empty l then nil
  else cons (f (head l)) (map f (tail l))
//│ map: ('a -> 'b) -> List['a] -> List['b]
//│    = <missing implementation>
//│ (nothing -> 'b & nothing -> 'a) -> List[?] -> List['a | 'b]
//│   <:  map:
//│ ('a -> 'b) -> List['a] -> List['b]
//│    = [Function: map]

def app: ('a -> 'b) -> 'a -> 'b
def app f x = f x
//│ app: ('a -> 'b) -> 'a -> 'b
//│    = <missing implementation>
//│ ('a -> 'b) -> 'a -> 'b
//│   <:  app:
//│ ('a -> 'b) -> 'a -> 'b
//│    = [Function: app]

def revapp: 'a -> ('a -> 'b) -> 'b
def revapp x f = f x
//│ revapp: 'a -> ('a -> 'b) -> 'b
//│       = <missing implementation>
//│ 'a -> (forall 'b. ('a -> 'b) -> 'b)
//│   <:  revapp:
//│ 'a -> ('a -> 'b) -> 'b
//│       = [Function: revapp]

:ng
def runST: (forall 's. ST['s, 'v]) -> 'v
//│ runST: (forall 's. ST['s, 'v]) -> 'v

:ng
def argST: ST['s, int]
//│ argST: ST['s, int]

// A9
:ng
def f: ('a -> 'a) -> List['a] -> 'a
//│ f: ('a -> 'a) -> List['a] -> 'a

// C8
:ng
def g: List['a] -> List['a] -> 'a
//│ g: List['a] -> List['a] -> 'a

// E1, E2
:ng
def h: int -> (forall 'a. 'a -> 'a)
def k: 'a -> List['a] -> 'a
def lst: List[forall 'a. int -> 'a -> 'a]
//│ h: int -> (forall 'a. 'a -> 'a)
//│ k: 'a -> List['a] -> 'a
//│ lst: List[forall 'a. int -> 'a -> 'a]

// E3
:ng
def r: (forall 'a. 'a -> (forall 'b. 'b -> 'b)) -> int
//│ r: (anything -> (forall 'b. 'b -> 'b)) -> int


type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ Defined type alias ChurchInt

type Pair[A, B] = (A, B)
//│ Defined type alias Pair[+A, +B]

def fst: forall 'a 'b. Pair['a, 'b] -> 'a
def fst((x, y)) = x
//│ fst: Pair['a, ?] -> 'a
//│    = <missing implementation>
//│ ('a, anything,) -> 'a
//│   <:  fst:
//│ Pair['a, ?] -> 'a
//│    = [Function: fst]

def zero: ChurchInt
def zero f x = x
//│ zero: ChurchInt
//│     = <missing implementation>
//│ anything -> (forall 'a. 'a -> 'a)
//│   <:  zero:
//│ ChurchInt
//│     = [Function: zero]

def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
def succ (n: ChurchInt) f x = f (n f x)
//│ succ: (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = <missing implementation>
//│ ChurchInt -> (forall 'N, 'a, 'N0. ('N -> 'a & 'N0 -> ('N & 'N0)) -> ('N & 'N0) -> 'a)
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = [Function: succ1]




// ================================================================
// ======================== Vanilla SuperF ========================
// ================================================================


// ============ A. polymorphic instantiation ============

// A1
fun x -> fun y -> y
//│ res: anything -> (forall 'a. 'a -> 'a)
//│    = [Function: res]

// A2
choose id
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// A3
choose nil ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// A4
fun x -> x x
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: res]

// A5
id auto
//│ res: (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│    = [Function: auto]

// A6
id auto_
//│ res: (forall 'a. 'a -> 'a) -> 'b -> 'b
//│    = [Function: auto_]

// A7
choose id auto
//│ res: (forall 'a. 'a -> 'a & 'a0) -> (forall 'b. 'a0 | 'b -> 'b)
//│    = [Function: id1]

// A8
:ns
choose id auto_
//│ res: 'c
//│   where
//│     'c :> (forall 'a. 'a -> 'a) | (forall 'b. (forall 'a0. 'a0 -> 'a0) -> 'b -> 'b)
//│    = [Function: id1]

// A9
:ng
f (choose id) ids
//│ res: 'a -> 'a

// A10
poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// A11
poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]

// A12
id poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]


// ============ B. inference of polymorphic arguments ============

// B1
fun f -> (f 1, f true)
//│ res: (true -> 'a & 1 -> 'b) -> ('b, 'a,)
//│    = [Function: res]

// B2
fun xs -> poly (head xs)
//│ res: List[forall 'a. 'a -> 'a] -> (int, bool,)
//│    = [Function: res]


// ============ C. functions on polymorphic lists ============

// C1
length ids
//│ res: int
//│    = 1

// C2
tail ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// C3
head ids
//│ res: 'a -> 'a
//│    = [Function: id1]

// C4
single id
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// C5
cons id ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C6
cons (fun x -> x) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function (anonymous)],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C7
append (single inc) (single id)
//│ res: List[int -> int]
//│    = Cons {
//│        head: [Function: succ],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C8
:ng
g (single id) ids
//│ res: 'a -> 'a

// C9
map poly (single id)
//│ res: List[(int, bool,)]
//│    = Cons { head: [ 1, true ], tail: Nil {} }

// C10
map head (single ids)
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }


// ============ D. application functions ============

// D1
app poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// D2
revapp id poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// D3
:ng
runST argST
//│ res: int

// D4
:ng
app runST argST
//│ res: int

// D5
:ng
revapp argST runST
//│ res: int


// ============ E. η-expansion ============

// E1
:ng
k h lst
//│ res: int -> (forall 'a. 'a -> 'a)

// E2
:ng
k (fun x -> h x) lst
//│ res: int -> (forall 'a. 'a -> 'a)

// E3
:ng
r (fun x -> fun y -> y)
//│ res: int


// ============ F. FreezeML Additions ============

// F5
auto id
//│ res: 'b -> 'b
//│    = [Function: id1]

// F6
cons (head ids) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// F7
(head ids) 3
//│ res: 3
//│    = 3

// F8
choose (head ids)
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// F9
let f = revapp id in f poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// F10
choose id (fun x -> auto_ x)
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)
//│    = [Function: id1]


// ============ G. SuperF Additions ============

// G1
def z f x = x
//│ z: anything -> (forall 'a. 'a -> 'a)
//│  = [Function: z]

// G2
def s n f x = f (n f x)
//│ s: ('a -> 'b -> 'c) -> (forall 'd. ('c -> 'd & 'a) -> 'b -> 'd)
//│  = [Function: s]

// G3
n3 = s (s (s z))
//│ n3: ('a -> 'b & 'c -> 'a & 'd -> 'c) -> 'd -> 'b
//│   = [Function (anonymous)]

// G1A
z: ChurchInt
//│ res: ChurchInt
//│    = [Function: z]

:e
// G2A
s: ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.532: 	s: ChurchInt -> ChurchInt
//│ ║         	^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.244: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║         	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.244: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──       	                        ^^
//│ res: ChurchInt -> ChurchInt
//│    = [Function: s]

// G3A
n3: ChurchInt
//│ res: ChurchInt
//│    = [Function (anonymous)]

// G4
fst (fst (fst (n3 (fun x -> (x, 0)) 1)))
//│ res: 1
//│    = 1

(succ (succ zero)) (succ (succ zero))
//│ res: ('M -> 'M) -> 'M -> 'M
//│    = [Function (anonymous)]

(s (s z)) (s (s z))
//│ res: ('a -> ('a & 'b & 'c) & 'b -> ('a & 'b)) -> 'b -> 'c
//│    = [Function (anonymous)]

// G7
rec def to_ch n = if n == 0 then z else s (to_ch (n - 1))
//│ to_ch: int -> (forall 'a. ('b -> 'a & 'b -> 'b) -> (forall 'a. ('a & 'b) -> 'a))
//│      = [Function: to_ch]

:e
// G7A
to_ch: int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.570: 	to_ch: int -> ChurchInt
//│ ║         	^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.244: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║         	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.244: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║         	                        ^^
//│ ╟── from application:
//│ ║  l.516: 	def s n f x = f (n f x)
//│ ╙──       	              ^^^^^^^^^
//│ res: int -> ChurchInt
//│    = [Function: to_ch]

:e
// G8
rec def id1 x = if true then x else id1 id1 x
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c. ?a -> ?b <: ?id1` exceeded recursion depth limit (200)
//│ ║  l.588: 	rec def id1 x = if true then x else id1 id1 x
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. (α1845_1855'' -> α1854_1857'')›  <!<  α1845_1873'
//│ ╟── while constraining:  α1852'  <!<  α1845_1873'
//│ ╟── while constraining:  (α1852',)  <!<  (α1845_1873',)
//│ ╟── while constraining:  (α1845_1873' -> α1854_1875')  <!<  ((α1852',) -> α1853')
//│ ╟── while constraining:  ‹∀ 1. (α1845_1855'' -> α1854_1857'')›  <!<  ((α1852',) -> α1853')
//│ ╟── while constraining:  ‹∀ 1. (α1845_1855'' -> α1854_1857'')›  <!<  α1850'
//│ ╟── while constraining:  ‹∀ 1. (α1845_1855'' -> α1854_1857'')›  <!<  α1853'
//│ ╟── while constraining:  ‹∀ 1. (α1845_1855'' -> α1854_1857'')›  <!<  α1854_1863'
//│ ╟── while constraining:  ‹∀ 1. (α1845_1855'' -> α1854_1857'')›  <!<  α20_1862'
//│ ╟── while constraining:  ‹∀ 1. (α1845_1855'' -> α1854_1857'')›  <!<  α1845_1861'
//│ ╟── while constraining:  ‹∀ 1. (α1845_1855'' -> α1854_1857'')›  <!<  α1852'
//│ ╟── while constraining:  ‹∀ 1. (α1845_1855'' -> α1854_1857'')›  <!<  α1845_1870'
//│ ╟── while constraining:  α1852'  <!<  α1845_1870'
//│ ╟── while constraining:  (α1852',)  <!<  (α1845_1870',)
//│ ╟── while constraining:  (α1845_1870' -> α1854_1872')  <!<  ((α1852',) -> α1853')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 1. (α1845_1855'' -> α1854_1857'')›  <!<  α1854_1863'
//│ ╟── while constraining:  ‹∀ 1. (α1845_1855'' -> α1854_1857'')›  <!<  α20_1862'
//│ ╟── while constraining:  ‹∀ 1. (α1845_1855'' -> α1854_1857'')›  <!<  α1845_1861'
//│ ╟── while constraining:  ‹∀ 1. (α1845_1855'' -> α1854_1857'')›  <!<  α1852'
//│ ╟── while constraining:  ‹∀ 1. (α1845_1855'' -> α1854_1857'')›  <!<  α1845_1864'
//│ ╟── while constraining:  α1852'  <!<  α1845_1864'
//│ ╟── while constraining:  (α1852',)  <!<  (α1845_1864',)
//│ ╟── while constraining:  (α1845_1864' -> α1854_1866')  <!<  ((α1852',) -> α1853')
//│ ╟── while constraining:  ‹∀ 1. (α1845_1855'' -> α1854_1857'')›  <!<  ((α1852',) -> α1853')
//│ ╟── while constraining:  ‹∀ 1. (α1845_1855'' -> α1854_1857'')›  <!<  α1850'
//│ ╟── while constraining:  α1853'  <!<  α1850'
//│ ╟── while constraining:  α1854_1860'  <!<  α1850'
//│ ╟── while constraining:  (α1845_1858' -> α1854_1860')  <!<  ((id11844',) -> α1850')
//│ ╟── while constraining:  ‹∀ 1. (α1845_1855'' -> α1854_1857'')›  <!<  ((id11844',) -> α1850')
//│ ╙── while constraining:  ‹∀ 1. (α1845_1855'' -> α1854_1857'')›  <!<  id11844'
//│ id1: 'id1
//│   where
//│     'id1 :> forall 'a. ('b & 'a) -> 'a
//│     'a :> 'c
//│     'b :> 'id1
//│        <: 'c
//│     'c :> 'id1
//│        <: 'b -> 'c
//│    = [Function: id11]

:e
// G9
id1 id1
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r, ?id1. ?id1 <: (forall ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1, ?id10, ?i1, ?j1. ?id10) -> ?k1` exceeded recursion depth limit (200)
//│ ║  l.636: 	id1 id1
//│ ║         	^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. id11844'#›  <!<  α1850_2058
//│ ╟── while constraining:  ‹∀ 0. id11844'#›  <!<  α1853_2057
//│ ╟── while constraining:  ‹∀ 0. id11844'#›  <!<  α1854_2073
//│ ╟── while constraining:  ‹∀ 0. id11844'#›  <!<  α20_2072
//│ ╟── while constraining:  ‹∀ 0. id11844'#›  <!<  α1845_2071
//│ ╟── while constraining:  ‹∀ 0. id11844'#›  <!<  α1852_2055
//│ ╟── while constraining:  ‹∀ 0. id11844'#›  <!<  α1845_2075
//│ ╟── while constraining:  α1852_2030  <!<  α1845_2075
//│ ╟── while constraining:  (α1852_2030,)  <!<  (α1845_2075,)
//│ ╟── while constraining:  (α1845_2075 -> α1854_2077)  <!<  ((α1852_2030,) -> α1853_2032)
//│ ╟── while constraining:  ‹∀ 1. (α1845_2054'' -> α1854_2056'')›  <!<  ((α1852_2030,) -> α1853_2032)
//│ ╟── while constraining:  id11844_2053#  <!<  ((α1852_2030,) -> α1853_2032)
//│ ╟── while constraining:  ‹∀ 0. id11844'#›  <!<  ((α1852_2030,) -> α1853_2032)
//│ ╟── while constraining:  ‹∀ 0. id11844'#›  <!<  α1850_2033
//│ ╟── while constraining:  ‹∀ 0. id11844'#›  <!<  α1853_2032
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 1. (α1845_1979'' -> α1854_1981'')›  <!<  ((α1852_1955,) -> α1853_1957)
//│ ╟── while constraining:  id11844_1978#  <!<  ((α1852_1955,) -> α1853_1957)
//│ ╟── while constraining:  ‹∀ 0. id11844'#›  <!<  ((α1852_1955,) -> α1853_1957)
//│ ╟── while constraining:  ‹∀ 0. id11844'#›  <!<  α1850_1958
//│ ╟── while constraining:  ‹∀ 0. id11844'#›  <!<  α1853_1957
//│ ╟── while constraining:  ‹∀ 0. id11844'#›  <!<  α1854_1973
//│ ╟── while constraining:  ‹∀ 0. id11844'#›  <!<  α20_1972
//│ ╟── while constraining:  ‹∀ 0. id11844'#›  <!<  α1845_1971
//│ ╟── while constraining:  ‹∀ 0. id11844'#›  <!<  α1852_1955
//│ ╟── while constraining:  ‹∀ 0. id11844'#›  <!<  α1845_1975
//│ ╟── while constraining:  (‹∀ 0. id11844'#›,)  <!<  (α1845_1975,)
//│ ╟── while constraining:  (α1845_1975 -> α1854_1977)  <!<  ((‹∀ 0. id11844'#›,) -> α1952)
//│ ╟── while constraining:  ‹∀ 1. (α1845_1954'' -> α1854_1956'')›  <!<  ((‹∀ 0. id11844'#›,) -> α1952)
//│ ╟── while constraining:  id11844_1953#  <!<  ((‹∀ 0. id11844'#›,) -> α1952)
//│ ╙── while constraining:  ‹∀ 0. id11844'#›  <!<  ((‹∀ 0. id11844'#›,) -> α1952)
//│ res: error
//│    = [Function: id11]

// Gn
:e
auto auto
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.677: 	auto auto
//│ ║         	^^^^^^^^^
//│ ╟── type `‘a_2124` is not a function
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ║         	                   ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ╙──       	                       ^^^^^^^^
//│ res: 'b -> 'b | error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

// Gn+1
:e
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b. ?b -> ?a <: (forall ?c, ?d. ?d -> ?c) -> ?e` exceeded recursion depth limit (200)
//│ ║  l.693: 	(fun x -> x x) (fun x -> x x)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. (α2135_2137' -> α2136_2138')›  <!<  α2135_2156
//│ ╟── while constraining:  α2135_2154  <!<  α2135_2156
//│ ╟── while constraining:  (α2135_2154,)  <!<  (α2135_2156,)
//│ ╟── while constraining:  (α2135_2156 -> α2136_2157)  <!<  ((α2135_2154,) -> α2136_2155)
//│ ╟── while constraining:  ‹∀ 0. (α2135_2137' -> α2136_2138')›  <!<  ((α2135_2154,) -> α2136_2155)
//│ ╟── while constraining:  ‹∀ 0. (α2135_2137' -> α2136_2138')›  <!<  α2135_2154
//│ ╟── while constraining:  α2135_2152  <!<  α2135_2154
//│ ╟── while constraining:  (α2135_2152,)  <!<  (α2135_2154,)
//│ ╟── while constraining:  (α2135_2154 -> α2136_2155)  <!<  ((α2135_2152,) -> α2136_2153)
//│ ╟── while constraining:  ‹∀ 0. (α2135_2137' -> α2136_2138')›  <!<  ((α2135_2152,) -> α2136_2153)
//│ ╟── while constraining:  ‹∀ 0. (α2135_2137' -> α2136_2138')›  <!<  α2135_2152
//│ ╟── while constraining:  α2135_2150  <!<  α2135_2152
//│ ╟── while constraining:  (α2135_2150,)  <!<  (α2135_2152,)
//│ ╟── while constraining:  (α2135_2152 -> α2136_2153)  <!<  ((α2135_2150,) -> α2136_2151)
//│ ╟── while constraining:  ‹∀ 0. (α2135_2137' -> α2136_2138')›  <!<  ((α2135_2150,) -> α2136_2151)
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 0. (α2135_2137' -> α2136_2138')›  <!<  ((α2135_2144,) -> α2136_2145)
//│ ╟── while constraining:  ‹∀ 0. (α2135_2137' -> α2136_2138')›  <!<  α2135_2144
//│ ╟── while constraining:  α2135_2142  <!<  α2135_2144
//│ ╟── while constraining:  (α2135_2142,)  <!<  (α2135_2144,)
//│ ╟── while constraining:  (α2135_2144 -> α2136_2145)  <!<  ((α2135_2142,) -> α2136_2143)
//│ ╟── while constraining:  ‹∀ 0. (α2135_2137' -> α2136_2138')›  <!<  ((α2135_2142,) -> α2136_2143)
//│ ╟── while constraining:  ‹∀ 0. (α2135_2137' -> α2136_2138')›  <!<  α2135_2142
//│ ╟── while constraining:  α2131_2140  <!<  α2135_2142
//│ ╟── while constraining:  (α2131_2140,)  <!<  (α2135_2142,)
//│ ╟── while constraining:  (α2135_2142 -> α2136_2143)  <!<  ((α2131_2140,) -> α2132_2141)
//│ ╟── while constraining:  ‹∀ 0. (α2135_2137' -> α2136_2138')›  <!<  ((α2131_2140,) -> α2132_2141)
//│ ╟── while constraining:  ‹∀ 0. (α2135_2137' -> α2136_2138')›  <!<  α2131_2140
//│ ╟── while constraining:  (‹∀ 0. (α2135_2137' -> α2136_2138')›,)  <!<  (α2131_2140,)
//│ ╟── while constraining:  (α2131_2140 -> α2132_2141)  <!<  ((‹∀ 0. (α2135_2137' -> α2136_2138')›,) -> α2139)
//│ ╙── while constraining:  ‹∀ 0. (α2131_2133' -> α2132_2134')›  <!<  ((‹∀ 0. (α2135_2137' -> α2136_2138')›,) -> α2139)
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:re
// Gn+2
(fun x -> x x) (fun x -> x x)!
//│ res: nothing
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded



// ===========================================================
// ======================== SuperF +D ========================
// ===========================================================

:DistributeForalls


// ============ A. polymorphic instantiation ============

// A1
fun x -> fun y -> y
//│ res: anything -> (forall 'a. 'a -> 'a)
//│    = [Function: res]

// A2
choose id
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// A3
choose nil ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// A4
fun x -> x x
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: res]

// A5
id auto
//│ res: (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│    = [Function: auto]

// A6
id auto_
//│ res: (forall 'a. 'a -> 'a) -> 'b -> 'b
//│    = [Function: auto_]

// A7
choose id auto
//│ res: (forall 'a. 'a -> 'a & 'a0) -> (forall 'b. 'a0 | 'b -> 'b)
//│    = [Function: id1]

// A8
:ns
choose id auto_
//│ res: 'c
//│   where
//│     'c :> (forall 'a. 'a -> 'a) | (forall 'b. (forall 'a0. 'a0 -> 'a0) -> 'b -> 'b)
//│    = [Function: id1]

// A9
:ng
f (choose id) ids
//│ res: 'a -> 'a

// A10
poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// A11
poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]

// A12
id poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]


// ============ B. inference of polymorphic arguments ============

// B1
fun f -> (f 1, f true)
//│ res: (true -> 'a & 1 -> 'b) -> ('b, 'a,)
//│    = [Function: res]

// B2
fun xs -> poly (head xs)
//│ res: List[forall 'a. 'a -> 'a] -> (int, bool,)
//│    = [Function: res]


// ============ C. functions on polymorphic lists ============

// C1
length ids
//│ res: int
//│    = 1

// C2
tail ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// C3
head ids
//│ res: 'a -> 'a
//│    = [Function: id1]

// C4
single id
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// C5
cons id ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C6
cons (fun x -> x) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function (anonymous)],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C7
append (single inc) (single id)
//│ res: List[int -> int]
//│    = Cons {
//│        head: [Function: succ],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C8
:ng
g (single id) ids
//│ res: 'a -> 'a

// C9
map poly (single id)
//│ res: List[(int, bool,)]
//│    = Cons { head: [ 1, true ], tail: Nil {} }

// C10
map head (single ids)
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }


// ============ D. application functions ============

// D1
app poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// D2
revapp id poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// D3
:ng
runST argST
//│ res: int

// D4
:ng
app runST argST
//│ res: int

// D5
:ng
revapp argST runST
//│ res: int


// ============ E. η-expansion ============

// E1
:ng
k h lst
//│ res: int -> (forall 'a. 'a -> 'a)

// E2
:ng
k (fun x -> h x) lst
//│ res: int -> (forall 'a. 'a -> 'a)

// E3
:ng
r (fun x -> fun y -> y)
//│ res: int


// ============ F. FreezeML Additions ============

// F5
auto id
//│ res: 'b -> 'b
//│    = [Function: id1]

// F6
cons (head ids) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// F7
(head ids) 3
//│ res: 3
//│    = 3

// F8
choose (head ids)
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// F9
let f = revapp id in f poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// F10
choose id (fun x -> auto_ x)
//│ res: (forall 'a. 'a -> 'a & 'a0) -> (forall 'a0, 'b. 'a0 | 'b -> 'b)
//│    = [Function: id1]


// ============ G. SuperF Additions ============

// G1
def z f x = x
//│ z: anything -> (forall 'a. 'a -> 'a)
//│  = [Function: z1]

// G2
def s n f x = f (n f x)
//│ s: ('a -> 'b -> 'c) -> (forall 'd. ('c -> 'd & 'a) -> 'b -> 'd)
//│  = [Function: s1]

// G3
n3 = s (s (s z))
//│ n3: ('a -> 'b & 'c -> 'a & 'd -> 'c) -> 'd -> 'b
//│   = [Function (anonymous)]

// G1A
z: ChurchInt
//│ res: ChurchInt
//│    = [Function: z1]

// G2A
s: ChurchInt -> ChurchInt
//│ res: ChurchInt -> ChurchInt
//│    = [Function: s1]

// G3A
n3: ChurchInt
//│ res: ChurchInt
//│    = [Function (anonymous)]

// G4
fst (fst (fst (n3 (fun x -> (x, 0)) 1)))
//│ res: 1
//│    = 1

(succ (succ zero)) (succ (succ zero))
//│ res: ('M -> 'M) -> 'M -> 'M
//│    = [Function (anonymous)]

(s (s z)) (s (s z))
//│ res: (('a | 'b) -> 'b & 'c -> 'a) -> 'c -> 'b
//│   where
//│     'c :> 'a | 'b
//│    = [Function (anonymous)]

// G7
rec def to_ch n = if n == 0 then z else s (to_ch (n - 1))
//│ to_ch: int -> (forall 'a. ('b -> 'a & 'b -> 'b) -> (forall 'a. ('a & 'b) -> 'a))
//│      = [Function: to_ch1]

// G7A
to_ch: int -> ChurchInt
//│ res: int -> ChurchInt
//│    = [Function: to_ch1]

:e
// G8
rec def id1 x = if true then x else id1 id1 x
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c. ?b -> ?c <: ?id1` exceeded recursion depth limit (200)
//│ ║  l.1031: 	rec def id1 x = if true then x else id1 id1 x
//│ ║          	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. (α3101_3111'' -> α3110_3113'')›  <!<  α3101_3129'
//│ ╟── while constraining:  α3108'  <!<  α3101_3129'
//│ ╟── while constraining:  (α3108',)  <!<  (α3101_3129',)
//│ ╟── while constraining:  (α3101_3129' -> α3110_3131')  <!<  ((α3108',) -> α3109')
//│ ╟── while constraining:  ‹∀ 1. (α3101_3111'' -> α3110_3113'')›  <!<  ((α3108',) -> α3109')
//│ ╟── while constraining:  ‹∀ 1. (α3101_3111'' -> α3110_3113'')›  <!<  α3106'
//│ ╟── while constraining:  ‹∀ 1. (α3101_3111'' -> α3110_3113'')›  <!<  α3109'
//│ ╟── while constraining:  ‹∀ 1. (α3101_3111'' -> α3110_3113'')›  <!<  α3110_3119'
//│ ╟── while constraining:  ‹∀ 1. (α3101_3111'' -> α3110_3113'')›  <!<  α20_3118'
//│ ╟── while constraining:  ‹∀ 1. (α3101_3111'' -> α3110_3113'')›  <!<  α3101_3117'
//│ ╟── while constraining:  ‹∀ 1. (α3101_3111'' -> α3110_3113'')›  <!<  α3108'
//│ ╟── while constraining:  ‹∀ 1. (α3101_3111'' -> α3110_3113'')›  <!<  α3101_3126'
//│ ╟── while constraining:  α3108'  <!<  α3101_3126'
//│ ╟── while constraining:  (α3108',)  <!<  (α3101_3126',)
//│ ╟── while constraining:  (α3101_3126' -> α3110_3128')  <!<  ((α3108',) -> α3109')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 1. (α3101_3111'' -> α3110_3113'')›  <!<  α3110_3119'
//│ ╟── while constraining:  ‹∀ 1. (α3101_3111'' -> α3110_3113'')›  <!<  α20_3118'
//│ ╟── while constraining:  ‹∀ 1. (α3101_3111'' -> α3110_3113'')›  <!<  α3101_3117'
//│ ╟── while constraining:  ‹∀ 1. (α3101_3111'' -> α3110_3113'')›  <!<  α3108'
//│ ╟── while constraining:  ‹∀ 1. (α3101_3111'' -> α3110_3113'')›  <!<  α3101_3120'
//│ ╟── while constraining:  α3108'  <!<  α3101_3120'
//│ ╟── while constraining:  (α3108',)  <!<  (α3101_3120',)
//│ ╟── while constraining:  (α3101_3120' -> α3110_3122')  <!<  ((α3108',) -> α3109')
//│ ╟── while constraining:  ‹∀ 1. (α3101_3111'' -> α3110_3113'')›  <!<  ((α3108',) -> α3109')
//│ ╟── while constraining:  ‹∀ 1. (α3101_3111'' -> α3110_3113'')›  <!<  α3106'
//│ ╟── while constraining:  α3109'  <!<  α3106'
//│ ╟── while constraining:  α3110_3116'  <!<  α3106'
//│ ╟── while constraining:  (α3101_3114' -> α3110_3116')  <!<  ((id13100',) -> α3106')
//│ ╟── while constraining:  ‹∀ 1. (α3101_3111'' -> α3110_3113'')›  <!<  ((id13100',) -> α3106')
//│ ╙── while constraining:  ‹∀ 1. (α3101_3111'' -> α3110_3113'')›  <!<  id13100'
//│ id1: 'id1
//│   where
//│     'id1 :> forall 'a. ('b & 'a) -> 'a
//│     'a :> 'c
//│     'b :> 'id1
//│        <: 'c
//│     'c :> 'id1
//│        <: 'b -> 'c
//│    = [Function: id12]

:e
// G9
id1 id1
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?id1, ?r. ?id1 <: (forall ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?id10, ?f1, ?g1, ?h1, ?i1, ?j1. ?id10) -> ?k1` exceeded recursion depth limit (200)
//│ ║  l.1079: 	id1 id1
//│ ║          	^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. id13100'#›  <!<  α3106_3314
//│ ╟── while constraining:  ‹∀ 0. id13100'#›  <!<  α3109_3313
//│ ╟── while constraining:  ‹∀ 0. id13100'#›  <!<  α3110_3329
//│ ╟── while constraining:  ‹∀ 0. id13100'#›  <!<  α20_3328
//│ ╟── while constraining:  ‹∀ 0. id13100'#›  <!<  α3101_3327
//│ ╟── while constraining:  ‹∀ 0. id13100'#›  <!<  α3108_3311
//│ ╟── while constraining:  ‹∀ 0. id13100'#›  <!<  α3101_3331
//│ ╟── while constraining:  α3108_3286  <!<  α3101_3331
//│ ╟── while constraining:  (α3108_3286,)  <!<  (α3101_3331,)
//│ ╟── while constraining:  (α3101_3331 -> α3110_3333)  <!<  ((α3108_3286,) -> α3109_3288)
//│ ╟── while constraining:  ‹∀ 1. (α3101_3310'' -> α3110_3312'')›  <!<  ((α3108_3286,) -> α3109_3288)
//│ ╟── while constraining:  id13100_3309#  <!<  ((α3108_3286,) -> α3109_3288)
//│ ╟── while constraining:  ‹∀ 0. id13100'#›  <!<  ((α3108_3286,) -> α3109_3288)
//│ ╟── while constraining:  ‹∀ 0. id13100'#›  <!<  α3106_3289
//│ ╟── while constraining:  ‹∀ 0. id13100'#›  <!<  α3109_3288
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 1. (α3101_3235'' -> α3110_3237'')›  <!<  ((α3108_3211,) -> α3109_3213)
//│ ╟── while constraining:  id13100_3234#  <!<  ((α3108_3211,) -> α3109_3213)
//│ ╟── while constraining:  ‹∀ 0. id13100'#›  <!<  ((α3108_3211,) -> α3109_3213)
//│ ╟── while constraining:  ‹∀ 0. id13100'#›  <!<  α3106_3214
//│ ╟── while constraining:  ‹∀ 0. id13100'#›  <!<  α3109_3213
//│ ╟── while constraining:  ‹∀ 0. id13100'#›  <!<  α3110_3229
//│ ╟── while constraining:  ‹∀ 0. id13100'#›  <!<  α20_3228
//│ ╟── while constraining:  ‹∀ 0. id13100'#›  <!<  α3101_3227
//│ ╟── while constraining:  ‹∀ 0. id13100'#›  <!<  α3108_3211
//│ ╟── while constraining:  ‹∀ 0. id13100'#›  <!<  α3101_3231
//│ ╟── while constraining:  (‹∀ 0. id13100'#›,)  <!<  (α3101_3231,)
//│ ╟── while constraining:  (α3101_3231 -> α3110_3233)  <!<  ((‹∀ 0. id13100'#›,) -> α3208)
//│ ╟── while constraining:  ‹∀ 1. (α3101_3210'' -> α3110_3212'')›  <!<  ((‹∀ 0. id13100'#›,) -> α3208)
//│ ╟── while constraining:  id13100_3209#  <!<  ((‹∀ 0. id13100'#›,) -> α3208)
//│ ╙── while constraining:  ‹∀ 0. id13100'#›  <!<  ((‹∀ 0. id13100'#›,) -> α3208)
//│ res: error
//│    = [Function: id12]

// Gn
:e
auto auto
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1120: 	auto auto
//│ ║          	^^^^^^^^^
//│ ╟── type `‘a_3380` is not a function
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ║         	                   ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ╙──       	                       ^^^^^^^^
//│ res: 'b -> 'b | error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

// Gn+1
:e
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b. ?a -> ?b <: (forall ?c, ?d. ?d -> ?c) -> ?e` exceeded recursion depth limit (200)
//│ ║  l.1136: 	(fun x -> x x) (fun x -> x x)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. (α3391_3393' -> α3392_3394')›  <!<  α3391_3412
//│ ╟── while constraining:  α3391_3410  <!<  α3391_3412
//│ ╟── while constraining:  (α3391_3410,)  <!<  (α3391_3412,)
//│ ╟── while constraining:  (α3391_3412 -> α3392_3413)  <!<  ((α3391_3410,) -> α3392_3411)
//│ ╟── while constraining:  ‹∀ 0. (α3391_3393' -> α3392_3394')›  <!<  ((α3391_3410,) -> α3392_3411)
//│ ╟── while constraining:  ‹∀ 0. (α3391_3393' -> α3392_3394')›  <!<  α3391_3410
//│ ╟── while constraining:  α3391_3408  <!<  α3391_3410
//│ ╟── while constraining:  (α3391_3408,)  <!<  (α3391_3410,)
//│ ╟── while constraining:  (α3391_3410 -> α3392_3411)  <!<  ((α3391_3408,) -> α3392_3409)
//│ ╟── while constraining:  ‹∀ 0. (α3391_3393' -> α3392_3394')›  <!<  ((α3391_3408,) -> α3392_3409)
//│ ╟── while constraining:  ‹∀ 0. (α3391_3393' -> α3392_3394')›  <!<  α3391_3408
//│ ╟── while constraining:  α3391_3406  <!<  α3391_3408
//│ ╟── while constraining:  (α3391_3406,)  <!<  (α3391_3408,)
//│ ╟── while constraining:  (α3391_3408 -> α3392_3409)  <!<  ((α3391_3406,) -> α3392_3407)
//│ ╟── while constraining:  ‹∀ 0. (α3391_3393' -> α3392_3394')›  <!<  ((α3391_3406,) -> α3392_3407)
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 0. (α3391_3393' -> α3392_3394')›  <!<  ((α3391_3400,) -> α3392_3401)
//│ ╟── while constraining:  ‹∀ 0. (α3391_3393' -> α3392_3394')›  <!<  α3391_3400
//│ ╟── while constraining:  α3391_3398  <!<  α3391_3400
//│ ╟── while constraining:  (α3391_3398,)  <!<  (α3391_3400,)
//│ ╟── while constraining:  (α3391_3400 -> α3392_3401)  <!<  ((α3391_3398,) -> α3392_3399)
//│ ╟── while constraining:  ‹∀ 0. (α3391_3393' -> α3392_3394')›  <!<  ((α3391_3398,) -> α3392_3399)
//│ ╟── while constraining:  ‹∀ 0. (α3391_3393' -> α3392_3394')›  <!<  α3391_3398
//│ ╟── while constraining:  α3387_3396  <!<  α3391_3398
//│ ╟── while constraining:  (α3387_3396,)  <!<  (α3391_3398,)
//│ ╟── while constraining:  (α3391_3398 -> α3392_3399)  <!<  ((α3387_3396,) -> α3388_3397)
//│ ╟── while constraining:  ‹∀ 0. (α3391_3393' -> α3392_3394')›  <!<  ((α3387_3396,) -> α3388_3397)
//│ ╟── while constraining:  ‹∀ 0. (α3391_3393' -> α3392_3394')›  <!<  α3387_3396
//│ ╟── while constraining:  (‹∀ 0. (α3391_3393' -> α3392_3394')›,)  <!<  (α3387_3396,)
//│ ╟── while constraining:  (α3387_3396 -> α3388_3397)  <!<  ((‹∀ 0. (α3391_3393' -> α3392_3394')›,) -> α3395)
//│ ╙── while constraining:  ‹∀ 0. (α3387_3389' -> α3388_3390')›  <!<  ((‹∀ 0. (α3391_3393' -> α3392_3394')›,) -> α3395)
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:re
// Gn+2
(fun x -> x x) (fun x -> x x)!
//│ res: nothing
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded



// ==============================================================
// ======================== SuperF +D+CC ========================
// ==============================================================

:CycleCheck


// ============ A. polymorphic instantiation ============

// A1
fun x -> fun y -> y
//│ res: anything -> (forall 'a. 'a -> 'a)
//│    = [Function: res]

// A2
choose id
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// A3
choose nil ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// A4
fun x -> x x
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: res]

// A5
id auto
//│ res: (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│    = [Function: auto]

// A6
id auto_
//│ res: (forall 'a. 'a -> 'a) -> 'b -> 'b
//│    = [Function: auto_]

// A7
choose id auto
//│ res: (forall 'a. 'a -> 'a & 'a0) -> (forall 'b. 'a0 | 'b -> 'b)
//│    = [Function: id1]

// A8
:ns
choose id auto_
//│ res: 'c
//│   where
//│     'c :> (forall 'a. 'a -> 'a) | (forall 'b. (forall 'a0. 'a0 -> 'a0) -> 'b -> 'b)
//│    = [Function: id1]

// A9
:ng
f (choose id) ids
//│ res: 'a -> 'a

// A10
poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// A11
poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]

// A12
id poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]


// ============ B. inference of polymorphic arguments ============

// B1
fun f -> (f 1, f true)
//│ res: (true -> 'a & 1 -> 'b) -> ('b, 'a,)
//│    = [Function: res]

// B2
fun xs -> poly (head xs)
//│ res: List[forall 'a. 'a -> 'a] -> (int, bool,)
//│    = [Function: res]


// ============ C. functions on polymorphic lists ============

// C1
length ids
//│ res: int
//│    = 1

// C2
tail ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// C3
head ids
//│ res: 'a -> 'a
//│    = [Function: id1]

// C4
single id
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// C5
cons id ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C6
cons (fun x -> x) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function (anonymous)],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C7
append (single inc) (single id)
//│ res: List[int -> int]
//│    = Cons {
//│        head: [Function: succ],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C8
:ng
g (single id) ids
//│ res: 'a -> 'a

// C9
map poly (single id)
//│ res: List[(int, bool,)]
//│    = Cons { head: [ 1, true ], tail: Nil {} }

// C10
map head (single ids)
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }


// ============ D. application functions ============

// D1
app poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// D2
revapp id poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// D3
:ng
runST argST
//│ res: int

// D4
:ng
app runST argST
//│ res: int

// D5
:ng
revapp argST runST
//│ res: int


// ============ E. η-expansion ============

// E1
:ng
k h lst
//│ res: int -> (forall 'a. 'a -> 'a)

// E2
:ng
k (fun x -> h x) lst
//│ res: int -> (forall 'a. 'a -> 'a)

// E3
:ng
r (fun x -> fun y -> y)
//│ res: int


// ============ F. FreezeML Additions ============

// F5
auto id
//│ res: 'b -> 'b
//│    = [Function: id1]

// F6
cons (head ids) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// F7
(head ids) 3
//│ res: 3
//│    = 3

// F8
choose (head ids)
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// F9
let f = revapp id in f poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// F10
choose id (fun x -> auto_ x)
//│ res: (forall 'a. 'a -> 'a & 'a0) -> (forall 'a0, 'b. 'a0 | 'b -> 'b)
//│    = [Function: id1]


// ============ G. SuperF Additions ============

// G1
def z f x = x
//│ z: anything -> (forall 'a. 'a -> 'a)
//│  = [Function: z2]

// G2
def s n f x = f (n f x)
//│ s: ('a -> 'b -> 'c) -> (forall 'd. ('c -> 'd & 'a) -> 'b -> 'd)
//│  = [Function: s2]

// G3
n3 = s (s (s z))
//│ n3: ('a -> 'b & 'c -> 'a & 'd -> 'c) -> 'd -> 'b
//│   = [Function (anonymous)]

// G1A
z: ChurchInt
//│ res: ChurchInt
//│    = [Function: z2]

// G2A
s: ChurchInt -> ChurchInt
//│ res: ChurchInt -> ChurchInt
//│    = [Function: s2]

// G3A
n3: ChurchInt
//│ res: ChurchInt
//│    = [Function (anonymous)]

// G4
fst (fst (fst (n3 (fun x -> (x, 0)) 1)))
//│ res: 1
//│    = 1

(succ (succ zero)) (succ (succ zero))
//│ res: ('M -> 'M) -> 'M -> 'M
//│    = [Function (anonymous)]

:e
(s (s z)) (s (s z))
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.1457: 	(s (s z)) (s (s z))
//│ ║          	^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 4. α3806_4123'''''›  <:  α3799_4144    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 4. α3806_4123'''''›  <:  α3799_4141''''
//│ res: (('a | 'b) -> 'b & 'c -> 'a) -> 'c -> 'b | error
//│   where
//│     'c :> 'a | 'b
//│    = [Function (anonymous)]

// G7
rec def to_ch n = if n == 0 then z else s (to_ch (n - 1))
//│ to_ch: int -> (forall 'a. ('b -> 'a & 'b -> 'b) -> (forall 'a. ('a & 'b) -> 'a))
//│      = [Function: to_ch2]

// G7A
to_ch: int -> ChurchInt
//│ res: int -> ChurchInt
//│    = [Function: to_ch2]

:e
// G8
rec def id1 x = if true then x else id1 id1 x
//│ ╔══[ERROR] Cyclic-looking constraint while typing binding of lambda expression; a type annotation may be required
//│ ║  l.1481: 	rec def id1 x = if true then x else id1 id1 x
//│ ║          	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. (α4357_4367'' -> α4366_4369'')›  <:  α4357_4373'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. (α4357_4367'' -> α4366_4369'')›  <:  α4357_4367''
//│ ╔══[ERROR] Cyclic-looking constraint while typing binding of lambda expression; a type annotation may be required
//│ ║  l.1481: 	rec def id1 x = if true then x else id1 id1 x
//│ ║          	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. (α4357_4367'' -> α4366_4369'')›  <:  α4357_4373'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. (α4357_4367'' -> α4366_4369'')›  <:  α4357_4367''
//│ ╔══[ERROR] Cyclic-looking constraint while typing binding of lambda expression; a type annotation may be required
//│ ║  l.1481: 	rec def id1 x = if true then x else id1 id1 x
//│ ║          	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. (α4357_4367'' -> α4366_4369'')›  <:  α4362'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. (α4357_4367'' -> α4366_4369'')›  <:  α4362'
//│ ╔══[ERROR] Cyclic-looking constraint while typing binding of lambda expression; a type annotation may be required
//│ ║  l.1481: 	rec def id1 x = if true then x else id1 id1 x
//│ ║          	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. (α4357_4367'' -> α4366_4369'')›  <:  α4362'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. (α4357_4367'' -> α4366_4369'')›  <:  α4362'
//│ id1: 'id1
//│   where
//│     'id1 :> forall 'a. ('b & 'a) -> 'a
//│     'a :> 'c
//│     'b :> 'id1
//│        <: 'c
//│     'c :> 'id1
//│        <: 'b -> 'c
//│    = [Function: id13]

:e
// G9
id1 id1
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.1518: 	id1 id1
//│ ║          	^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. id14356'#›  <:  α4364_4419    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. id14356'#›  <:  α4364'
//│ res: error
//│    = [Function: id13]

// Gn
:e
auto auto
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1530: 	auto auto
//│ ║          	^^^^^^^^^
//│ ╟── type `‘a_4441` is not a function
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ║         	                   ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ╙──       	                       ^^^^^^^^
//│ res: 'b -> 'b | error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

// Gn+1
:e
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.1546: 	(fun x -> x x) (fun x -> x x)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. (α4452_4454' -> α4453_4455')›  <:  α4452_4461    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. (α4452_4454' -> α4453_4455')›  <:  α4452_4454'
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:re
// Gn+2
(fun x -> x x) (fun x -> x x)!
//│ res: nothing
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded



// =================================================================
// ======================== SuperF +D+CC+RT ========================
// =================================================================

:RecursiveTypes


// ============ A. polymorphic instantiation ============

// A1
fun x -> fun y -> y
//│ res: anything -> (forall 'a. 'a -> 'a)
//│    = [Function: res]

// A2
choose id
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// A3
choose nil ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// A4
fun x -> x x
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: res]

// A5
id auto
//│ res: (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│    = [Function: auto]

// A6
id auto_
//│ res: (forall 'a. 'a -> 'a) -> 'b -> 'b
//│    = [Function: auto_]

// A7
choose id auto
//│ res: (forall 'a. 'a -> 'a & 'a0) -> (forall 'b. 'a0 | 'b -> 'b)
//│    = [Function: id1]

// A8
:ns
choose id auto_
//│ res: 'c
//│   where
//│     'c :> (forall 'a. 'a -> 'a) | (forall 'b. (forall 'a0. 'a0 -> 'a0) -> 'b -> 'b)
//│    = [Function: id1]

// A9
:ng
f (choose id) ids
//│ res: 'a -> 'a

// A10
poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// A11
poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]

// A12
id poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]


// ============ B. inference of polymorphic arguments ============

// B1
fun f -> (f 1, f true)
//│ res: (true -> 'a & 1 -> 'b) -> ('b, 'a,)
//│    = [Function: res]

// B2
fun xs -> poly (head xs)
//│ res: List[forall 'a. 'a -> 'a] -> (int, bool,)
//│    = [Function: res]


// ============ C. functions on polymorphic lists ============

// C1
length ids
//│ res: int
//│    = 1

// C2
tail ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// C3
head ids
//│ res: 'a -> 'a
//│    = [Function: id1]

// C4
single id
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// C5
cons id ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C6
cons (fun x -> x) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function (anonymous)],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C7
append (single inc) (single id)
//│ res: List[int -> int]
//│    = Cons {
//│        head: [Function: succ],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C8
:ng
g (single id) ids
//│ res: 'a -> 'a

// C9
map poly (single id)
//│ res: List[(int, bool,)]
//│    = Cons { head: [ 1, true ], tail: Nil {} }

// C10
map head (single ids)
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }


// ============ D. application functions ============

// D1
app poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// D2
revapp id poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// D3
:ng
runST argST
//│ res: int

// D4
:ng
app runST argST
//│ res: int

// D5
:ng
revapp argST runST
//│ res: int


// ============ E. η-expansion ============

// E1
:ng
k h lst
//│ res: int -> (forall 'a. 'a -> 'a)

// E2
:ng
k (fun x -> h x) lst
//│ res: int -> (forall 'a. 'a -> 'a)

// E3
:ng
r (fun x -> fun y -> y)
//│ res: int


// ============ F. FreezeML Additions ============

// F5
auto id
//│ res: 'b -> 'b
//│    = [Function: id1]

// F6
cons (head ids) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// F7
(head ids) 3
//│ res: 3
//│    = 3

// F8
choose (head ids)
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// F9
let f = revapp id in f poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// F10
choose id (fun x -> auto_ x)
//│ res: (forall 'a. 'a -> 'a & 'a0) -> (forall 'a0, 'b. 'a0 | 'b -> 'b)
//│    = [Function: id1]


// ============ G. SuperF Additions ============

// G1
def z f x = x
//│ z: anything -> (forall 'a. 'a -> 'a)
//│  = [Function: z3]

// G2
def s n f x = f (n f x)
//│ s: ('a -> 'b -> 'c) -> (forall 'd. ('c -> 'd & 'a) -> 'b -> 'd)
//│  = [Function: s3]

// G3
n3 = s (s (s z))
//│ n3: ('a -> 'b & 'c -> 'a & 'd -> 'c) -> 'd -> 'b
//│   = [Function (anonymous)]

// G1A
z: ChurchInt
//│ res: ChurchInt
//│    = [Function: z3]

// G2A
s: ChurchInt -> ChurchInt
//│ res: ChurchInt -> ChurchInt
//│    = [Function: s3]

// G3A
n3: ChurchInt
//│ res: ChurchInt
//│    = [Function (anonymous)]

// G4
fst (fst (fst (n3 (fun x -> (x, 0)) 1)))
//│ res: 1
//│    = 1

(succ (succ zero)) (succ (succ zero))
//│ res: ('M -> 'M) -> 'M -> 'M
//│    = [Function (anonymous)]

:e
(s (s z)) (s (s z))
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.1838: 	(s (s z)) (s (s z))
//│ ║          	^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 4. α4853_5170'''''›  <:  α4846_5191    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 4. α4853_5170'''''›  <:  α4846_5188''''
//│ res: (('a | 'b) -> 'b & 'c -> 'a) -> 'c -> 'b | error
//│   where
//│     'c :> 'a | 'b
//│    = [Function (anonymous)]

// G7
rec def to_ch n = if n == 0 then z else s (to_ch (n - 1))
//│ to_ch: int -> (forall 'a. ('b -> 'a & 'b -> 'b) -> (forall 'a. ('a & 'b) -> 'a))
//│      = [Function: to_ch3]

// G7A
to_ch: int -> ChurchInt
//│ res: int -> ChurchInt
//│    = [Function: to_ch3]

// G8
rec def id1 x = if true then x else id1 id1 x
//│ id1: 'id1
//│   where
//│     'id1 :> forall 'a. ('b & 'a) -> 'a
//│     'a :> 'c
//│     'b :> 'id1
//│        <: 'c
//│     'c :> 'id1
//│        <: 'b -> 'c
//│    = [Function: id14]

:e
// G9
id1 id1
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.1874: 	id1 id1
//│ ║          	^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. id15402'#›  <:  α5410_5456    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. id15402'#›  <:  α5410'
//│ res: error
//│    = [Function: id14]

// Gn
:e
auto auto
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1886: 	auto auto
//│ ║          	^^^^^^^^^
//│ ╟── type `‘a_5475` is not a function
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ║         	                   ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ╙──       	                       ^^^^^^^^
//│ res: 'b -> 'b | error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

// Gn+1
:e
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.1902: 	(fun x -> x x) (fun x -> x x)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. (α5486_5488' -> α5487_5489')›  <:  α5486_5495    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. (α5486_5488' -> α5487_5489')›  <:  α5486_5488'
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:re
// Gn+2
(fun x -> x x) (fun x -> x x)!
//│ res: nothing
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded


