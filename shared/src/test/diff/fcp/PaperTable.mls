
:GeneralizeCurriedFunctions
:NoConstrainedTypes
:DontDistributeForalls
:NoCycleCheck
:NoRecursiveTypes


// ============ Dummy classes to represent the types in the examples ============

class List[a]
  method Head: a
  method Tail: List[a]
//│ Defined class List[+a]
//│ Declared List.Head: List['a] -> 'a
//│ Declared List.Tail: List['a] -> List['a]

class Nil[a]: List[a]
  method Head = error
  method Tail = this
//│ Defined class Nil[+a]
//│ Defined Nil.Head: Nil[?] -> nothing
//│ Defined Nil.Tail: (Nil['a] & 'this) -> (Nil['a] & 'this)

class Cons[a]: List[a] & { head: a; tail: List[a] }
  method Head = this.head
  method Tail = this.tail
//│ Defined class Cons[+a]
//│ Defined Cons.Head: Cons['a] -> 'a
//│ Defined Cons.Tail: Cons['a] -> List['a]

class ST[S, A]
  method Inv_S: S -> S
  method Cov_A: A
//│ Defined class ST[=S, +A]
//│ Declared ST.Inv_S: ST['S, ?] -> 'S -> 'S
//│ Declared ST.Cov_A: ST['S, 'A] -> 'A


// ============ Type signatures for functions used in the examples ============

def head: List['a] -> 'a
def head l = l.Head
//│ head: List['a] -> 'a
//│     = <missing implementation>
//│ List['a] -> 'a
//│   <:  head:
//│ List['a] -> 'a
//│     = [Function: head]

def tail: List['a] -> List['a]
def tail l = l.Tail
//│ tail: List['a] -> List['a]
//│     = <missing implementation>
//│ List['a] -> List['a]
//│   <:  tail:
//│ List['a] -> List['a]
//│     = [Function: tail]

// Used to represent `[]` in the papers
def nil: List['a]
nil = Nil {}
//│ nil: List[nothing]
//│    = <missing implementation>
//│ Nil[nothing]
//│   <:  nil:
//│ List[nothing]
//│    = Nil {}

def cons: 'a -> List['a] -> List['a]
def cons head tail = Cons { head; tail }
//│ cons: 'a -> List['a] -> List['a]
//│     = <missing implementation>
//│ 'b -> (forall 'a, 'tail. (List['a] & 'tail) -> (Cons['a | 'b] with {head: 'b, tail: 'tail}))
//│   <:  cons:
//│ 'a -> List['a] -> List['a]
//│     = [Function: cons]

def is_empty: List['a] -> bool
def is_empty l = eq l nil
//│ is_empty: List[?] -> bool
//│         = <missing implementation>
//│ anything -> bool
//│   <:  is_empty:
//│ List[?] -> bool
//│         = [Function: is_empty]

def single: 'a -> List['a]
def single x = cons x nil
//│ single: 'a -> List['a]
//│       = <missing implementation>
//│ 'a -> List['a]
//│   <:  single:
//│ 'a -> List['a]
//│       = [Function: single]

def append: List['a] -> List['a] -> List['a]
rec def append l1 l2 =
  if is_empty l1 then l2
  else cons (head l1) (append (tail l1) l2)
//│ append: List['a] -> List['a] -> List['a]
//│       = <missing implementation>
//│ List[?] -> (forall 'b. (List['a] & 'b) -> (List['a] | 'b))
//│   <:  append:
//│ List['a] -> List['a] -> List['a]
//│       = [Function: append]

def length: List['a] -> int
rec def length l =
  if is_empty l then 0
  else succ (length (tail l))
//│ length: List[?] -> int
//│       = <missing implementation>
//│ List[?] -> int
//│   <:  length:
//│ List[?] -> int
//│       = [Function: length]

def id: 'a -> 'a
def id x = x
//│ id: 'a -> 'a
//│   = <missing implementation>
//│ 'a -> 'a
//│   <:  id:
//│ 'a -> 'a
//│   = [Function: id1]

def ids: List[forall 'a. 'a -> 'a]
def ids = single id
//│ ids: List[forall 'a. 'a -> 'a]
//│    = <missing implementation>
//│ List[forall 'a. 'a -> 'a]
//│   <:  ids:
//│ List[forall 'a. 'a -> 'a]
//│    = [Function: ids]

def inc: int -> int
def inc = succ
//│ inc: int -> int
//│    = <missing implementation>
//│ int -> int
//│   <:  inc:
//│ int -> int
//│    = [Function: inc]

def choose: 'a -> 'a -> 'a
def choose x y = if true then x else y
//│ choose: 'a -> 'a -> 'a
//│       = <missing implementation>
//│ 'a -> (forall 'b. 'b -> ('a | 'b))
//│   <:  choose:
//│ 'a -> 'a -> 'a
//│       = [Function: choose]

def poly: (forall 'a. 'a -> 'a) -> (int, bool)
def poly f = (f 1, f true)
//│ poly: (forall 'a. 'a -> 'a) -> (int, bool,)
//│     = <missing implementation>
//│ (true -> 'a & 1 -> 'b) -> ('b, 'a,)
//│   <:  poly:
//│ (forall 'a. 'a -> 'a) -> (int, bool,)
//│     = [Function: poly]

def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
def auto x = x x
//│ auto: (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│     = <missing implementation>
//│ ('a -> 'b & 'a) -> 'b
//│   <:  auto:
//│ (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│     = [Function: auto]

def auto_ : (forall 'a. 'a -> 'a) -> 'b -> 'b
def auto_ x = x x
//│ auto_: (forall 'a. 'a -> 'a) -> 'b -> 'b
//│      = <missing implementation>
//│ ('a -> 'b & 'a) -> 'b
//│   <:  auto_:
//│ (forall 'a. 'a -> 'a) -> 'b -> 'b
//│      = [Function: auto_]

def map: ('a -> 'b) -> List['a] -> List['b]
rec def map f l =
  if is_empty l then nil
  else cons (f (head l)) (map f (tail l))
//│ map: ('a -> 'b) -> List['a] -> List['b]
//│    = <missing implementation>
//│ (nothing -> 'b & nothing -> 'a) -> List[?] -> List['a | 'b]
//│   <:  map:
//│ ('a -> 'b) -> List['a] -> List['b]
//│    = [Function: map]

def app: ('a -> 'b) -> 'a -> 'b
def app f x = f x
//│ app: ('a -> 'b) -> 'a -> 'b
//│    = <missing implementation>
//│ ('a -> 'b) -> 'a -> 'b
//│   <:  app:
//│ ('a -> 'b) -> 'a -> 'b
//│    = [Function: app]

def revapp: 'a -> ('a -> 'b) -> 'b
def revapp x f = f x
//│ revapp: 'a -> ('a -> 'b) -> 'b
//│       = <missing implementation>
//│ 'a -> (forall 'b. ('a -> 'b) -> 'b)
//│   <:  revapp:
//│ 'a -> ('a -> 'b) -> 'b
//│       = [Function: revapp]

:ng
def runST: (forall 's. ST['s, 'v]) -> 'v
//│ runST: (forall 's. ST['s, 'v]) -> 'v

:ng
def argST: ST['s, int]
//│ argST: ST['s, int]

// A9
:ng
def f: ('a -> 'a) -> List['a] -> 'a
//│ f: ('a -> 'a) -> List['a] -> 'a

// C8
:ng
def g: List['a] -> List['a] -> 'a
//│ g: List['a] -> List['a] -> 'a

// E1, E2
:ng
def h: int -> (forall 'a. 'a -> 'a)
def k: 'a -> List['a] -> 'a
def lst: List[forall 'a. int -> 'a -> 'a]
//│ h: int -> (forall 'a. 'a -> 'a)
//│ k: 'a -> List['a] -> 'a
//│ lst: List[forall 'a. int -> 'a -> 'a]

// E3
:ng
def r: (forall 'a. 'a -> (forall 'b. 'b -> 'b)) -> int
//│ r: (anything -> (forall 'b. 'b -> 'b)) -> int


type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ Defined type alias ChurchInt

type Pair[A, B] = (A, B)
//│ Defined type alias Pair[+A, +B]

def fst: forall 'a 'b. Pair['a, 'b] -> 'a
def fst((x, y)) = x
//│ fst: Pair['a, ?] -> 'a
//│    = <missing implementation>
//│ ('a, anything,) -> 'a
//│   <:  fst:
//│ Pair['a, ?] -> 'a
//│    = [Function: fst]

def zero: ChurchInt
def zero f x = x
//│ zero: ChurchInt
//│     = <missing implementation>
//│ anything -> (forall 'a. 'a -> 'a)
//│   <:  zero:
//│ ChurchInt
//│     = [Function: zero]

def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
def succ (n: ChurchInt) f x = f (n f x)
//│ succ: (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = <missing implementation>
//│ ChurchInt -> (forall 'N, 'a, 'N0. ('N -> 'a & 'N0 -> ('N & 'N0)) -> ('N & 'N0) -> 'a)
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = [Function: succ1]




// ================================================================
// ======================== Vanilla SuperF ========================
// ================================================================


// ============ A. polymorphic instantiation ============

// A1
fun x -> fun y -> y
//│ res: anything -> (forall 'a. 'a -> 'a)
//│    = [Function: res]

// A2
choose id
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// A3
choose nil ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// A4
fun x -> x x
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: res]

// A5
id auto
//│ res: (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│    = [Function: auto]

// A6
id auto_
//│ res: (forall 'a. 'a -> 'a) -> 'b -> 'b
//│    = [Function: auto_]

// A7
choose id auto
//│ res: (forall 'a. 'a -> 'a & 'a0) -> (forall 'b. 'a0 | 'b -> 'b)
//│    = [Function: id1]

// A8
:ns
choose id auto_
//│ res: 'c
//│   where
//│     'c :> (forall 'a. 'a -> 'a) | (forall 'b. (forall 'a0. 'a0 -> 'a0) -> 'b -> 'b)
//│    = [Function: id1]

// A9
:ng
f (choose id) ids
//│ res: 'a -> 'a

// A10
poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// A11
poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]

// A12
id poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]


// ============ B. inference of polymorphic arguments ============

// B1
fun f -> (f 1, f true)
//│ res: (true -> 'a & 1 -> 'b) -> ('b, 'a,)
//│    = [Function: res]

// B2
fun xs -> poly (head xs)
//│ res: List[forall 'a. 'a -> 'a] -> (int, bool,)
//│    = [Function: res]


// ============ C. functions on polymorphic lists ============

// C1
length ids
//│ res: int
//│    = 1

// C2
tail ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// C3
head ids
//│ res: 'a -> 'a
//│    = [Function: id1]

// C4
single id
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// C5
cons id ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C6
cons (fun x -> x) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function (anonymous)],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C7
append (single inc) (single id)
//│ res: List[int -> int]
//│    = Cons {
//│        head: [Function: succ],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C8
:ng
g (single id) ids
//│ res: 'a -> 'a

// C9
map poly (single id)
//│ res: List[(int, bool,)]
//│    = Cons { head: [ 1, true ], tail: Nil {} }

// C10
map head (single ids)
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }


// ============ D. application functions ============

// D1
app poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// D2
revapp id poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// D3
:ng
runST argST
//│ res: int

// D4
:ng
app runST argST
//│ res: int

// D5
:ng
revapp argST runST
//│ res: int


// ============ E. η-expansion ============

// E1
:ng
k h lst
//│ res: int -> (forall 'a. 'a -> 'a)

// E2
:ng
k (fun x -> h x) lst
//│ res: int -> (forall 'a. 'a -> 'a)

// E3
:ng
r (fun x -> fun y -> y)
//│ res: int


// ============ F. FreezeML Additions ============

// F5
auto id
//│ res: 'b -> 'b
//│    = [Function: id1]

// F6
cons (head ids) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// F7
(head ids) 3
//│ res: 3
//│    = 3

// F8
choose (head ids)
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// F9
let f = revapp id in f poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// F10
choose id (fun x -> auto_ x)
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)
//│    = [Function: id1]


// ============ G. SuperF Additions ============

// G1
def z f x = x
//│ z: anything -> (forall 'a. 'a -> 'a)
//│  = [Function: z]

// G2
def s n f x = f (n f x)
//│ s: ('a -> 'b -> 'c) -> (forall 'd. ('c -> 'd & 'a) -> 'b -> 'd)
//│  = [Function: s]

// G3
n3 = s (s (s z))
//│ n3: ('a -> 'b & 'c -> 'a & 'd -> 'c) -> 'd -> 'b
//│   = [Function (anonymous)]

// G1A
z: ChurchInt
//│ res: ChurchInt
//│    = [Function: z]

:e
// G2A
s: ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.532: 	s: ChurchInt -> ChurchInt
//│ ║         	^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.244: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║         	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.244: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──       	                        ^^
//│ res: ChurchInt -> ChurchInt
//│    = [Function: s]

// G3A
n3: ChurchInt
//│ res: ChurchInt
//│    = [Function (anonymous)]

// G4
fst (fst (fst (n3 (fun x -> (x, 0)) 1)))
//│ res: 1
//│    = 1

(succ (succ zero)) (succ (succ zero))
//│ res: ('M -> 'M) -> 'M -> 'M
//│    = [Function (anonymous)]

(s (s z)) (s (s z))
//│ res: ('a -> ('a & 'b & 'c) & 'b -> ('a & 'b)) -> 'b -> 'c
//│    = [Function (anonymous)]

// G7
rec def to_ch n = if n == 0 then z else s (to_ch (n - 1))
//│ to_ch: int -> (forall 'a. ('b -> 'a & 'b -> 'b) -> (forall 'c. ('b & 'c) -> ('c | 'a)))
//│      = [Function: to_ch]

:e
// G7A
to_ch: int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.570: 	to_ch: int -> ChurchInt
//│ ║         	^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.244: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║         	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.244: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║         	                        ^^
//│ ╟── from application:
//│ ║  l.516: 	def s n f x = f (n f x)
//│ ╙──       	              ^^^^^^^^^
//│ res: int -> ChurchInt
//│    = [Function: to_ch]

:e
// G8
rec def id1 x = if true then x else id1 id1 x
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c. ?b -> ?c <: ?id1` exceeded recursion depth limit (250)
//│ ║  l.588: 	rec def id1 x = if true then x else id1 id1 x
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. (α1849_1859'' -> α1858_1861'')›  <!<  α1849_1880'
//│ ╟── while constraining:  α1856'  <!<  α1849_1880'
//│ ╟── while constraining:  (α1856',)  <!<  (α1849_1880',)
//│ ╟── while constraining:  (α1849_1880' -> α1858_1882')  <!<  ((α1856',) -> α1857')
//│ ╟── while constraining:  ‹∀ 1. (α1849_1859'' -> α1858_1861'')›  <!<  ((α1856',) -> α1857')
//│ ╟── while constraining:  ‹∀ 1. (α1849_1859'' -> α1858_1861'')›  <!<  α1854'
//│ ╟── while constraining:  ‹∀ 1. (α1849_1859'' -> α1858_1861'')›  <!<  α1857'
//│ ╟── while constraining:  ‹∀ 1. (α1849_1859'' -> α1858_1861'')›  <!<  α1858_1867'
//│ ╟── while constraining:  ‹∀ 1. (α1849_1859'' -> α1858_1861'')›  <!<  α20_1866'
//│ ╟── while constraining:  ‹∀ 1. (α1849_1859'' -> α1858_1861'')›  <!<  α1849_1865'
//│ ╟── while constraining:  ‹∀ 1. (α1849_1859'' -> α1858_1861'')›  <!<  α1856'
//│ ╟── while constraining:  ‹∀ 1. (α1849_1859'' -> α1858_1861'')›  <!<  α1849_1877'
//│ ╟── while constraining:  α1856'  <!<  α1849_1877'
//│ ╟── while constraining:  (α1856',)  <!<  (α1849_1877',)
//│ ╟── while constraining:  (α1849_1877' -> α1858_1879')  <!<  ((α1856',) -> α1857')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 1. (α1849_1859'' -> α1858_1861'')›  <!<  α1858_1867'
//│ ╟── while constraining:  ‹∀ 1. (α1849_1859'' -> α1858_1861'')›  <!<  α20_1866'
//│ ╟── while constraining:  ‹∀ 1. (α1849_1859'' -> α1858_1861'')›  <!<  α1849_1865'
//│ ╟── while constraining:  ‹∀ 1. (α1849_1859'' -> α1858_1861'')›  <!<  α1856'
//│ ╟── while constraining:  ‹∀ 1. (α1849_1859'' -> α1858_1861'')›  <!<  α1849_1868'
//│ ╟── while constraining:  α1856'  <!<  α1849_1868'
//│ ╟── while constraining:  (α1856',)  <!<  (α1849_1868',)
//│ ╟── while constraining:  (α1849_1868' -> α1858_1870')  <!<  ((α1856',) -> α1857')
//│ ╟── while constraining:  ‹∀ 1. (α1849_1859'' -> α1858_1861'')›  <!<  ((α1856',) -> α1857')
//│ ╟── while constraining:  ‹∀ 1. (α1849_1859'' -> α1858_1861'')›  <!<  α1854'
//│ ╟── while constraining:  α1857'  <!<  α1854'
//│ ╟── while constraining:  α1858_1864'  <!<  α1854'
//│ ╟── while constraining:  (α1849_1862' -> α1858_1864')  <!<  ((id11848',) -> α1854')
//│ ╟── while constraining:  ‹∀ 1. (α1849_1859'' -> α1858_1861'')›  <!<  ((id11848',) -> α1854')
//│ ╙── while constraining:  ‹∀ 1. (α1849_1859'' -> α1858_1861'')›  <!<  id11848'
//│ id1: 'id1
//│   where
//│     'id1 :> forall 'a. ('b & 'a) -> 'a
//│     'a :> 'c
//│     'b :> 'id1
//│        <: 'c
//│     'c :> 'id1
//│        <: 'b -> 'c
//│    = [Function: id11]

:e
// G9
id1 id1
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?id1, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r, ?s, ?t, ?u. ?id1 <: (forall ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1, ?i1, ?j1, ?k1, ?l1, ?m1, ?id10, ?n1, ?o1, ?p1. ?id10) -> ?q1` exceeded recursion depth limit (250)
//│ ║  l.636: 	id1 id1
//│ ║         	^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. id11848'#›  <!<  α1857_2113
//│ ╟── while constraining:  ‹∀ 0. id11848'#›  <!<  α1858_2132
//│ ╟── while constraining:  ‹∀ 0. id11848'#›  <!<  α20_2131
//│ ╟── while constraining:  ‹∀ 0. id11848'#›  <!<  α1849_2130
//│ ╟── while constraining:  ‹∀ 0. id11848'#›  <!<  α1856_2111
//│ ╟── while constraining:  ‹∀ 0. id11848'#›  <!<  α1849_2134
//│ ╟── while constraining:  α1856_2083  <!<  α1849_2134
//│ ╟── while constraining:  (α1856_2083,)  <!<  (α1849_2134,)
//│ ╟── while constraining:  (α1849_2134 -> α1858_2136)  <!<  ((α1856_2083,) -> α1857_2085)
//│ ╟── while constraining:  ‹∀ 1. (α1849_2110'' -> α1858_2112'')›  <!<  ((α1856_2083,) -> α1857_2085)
//│ ╟── while constraining:  id11848_2109#  <!<  ((α1856_2083,) -> α1857_2085)
//│ ╟── while constraining:  ‹∀ 0. id11848'#›  <!<  ((α1856_2083,) -> α1857_2085)
//│ ╟── while constraining:  ‹∀ 0. id11848'#›  <!<  α1854_2086
//│ ╟── while constraining:  ‹∀ 0. id11848'#›  <!<  α1857_2085
//│ ╟── while constraining:  ‹∀ 0. id11848'#›  <!<  α1858_2104
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 1. (α1849_1998'' -> α1858_2000'')›  <!<  ((α1856_1971,) -> α1857_1973)
//│ ╟── while constraining:  id11848_1997#  <!<  ((α1856_1971,) -> α1857_1973)
//│ ╟── while constraining:  ‹∀ 0. id11848'#›  <!<  ((α1856_1971,) -> α1857_1973)
//│ ╟── while constraining:  ‹∀ 0. id11848'#›  <!<  α1854_1974
//│ ╟── while constraining:  ‹∀ 0. id11848'#›  <!<  α1857_1973
//│ ╟── while constraining:  ‹∀ 0. id11848'#›  <!<  α1858_1992
//│ ╟── while constraining:  ‹∀ 0. id11848'#›  <!<  α20_1991
//│ ╟── while constraining:  ‹∀ 0. id11848'#›  <!<  α1849_1990
//│ ╟── while constraining:  ‹∀ 0. id11848'#›  <!<  α1856_1971
//│ ╟── while constraining:  ‹∀ 0. id11848'#›  <!<  α1849_1994
//│ ╟── while constraining:  (‹∀ 0. id11848'#›,)  <!<  (α1849_1994,)
//│ ╟── while constraining:  (α1849_1994 -> α1858_1996)  <!<  ((‹∀ 0. id11848'#›,) -> α1968)
//│ ╟── while constraining:  ‹∀ 1. (α1849_1970'' -> α1858_1972'')›  <!<  ((‹∀ 0. id11848'#›,) -> α1968)
//│ ╟── while constraining:  id11848_1969#  <!<  ((‹∀ 0. id11848'#›,) -> α1968)
//│ ╙── while constraining:  ‹∀ 0. id11848'#›  <!<  ((‹∀ 0. id11848'#›,) -> α1968)
//│ res: error
//│    = [Function: id11]

// Gn
:e
auto auto
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.677: 	auto auto
//│ ║         	^^^^^^^^^
//│ ╟── type `‘a_2189` is not a function
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ║         	                   ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ╙──       	                       ^^^^^^^^
//│ res: 'b -> 'b | error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

// Gn+1
:e
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b. ?a -> ?b <: (forall ?c, ?d. ?c -> ?d) -> ?e` exceeded recursion depth limit (250)
//│ ║  l.693: 	(fun x -> x x) (fun x -> x x)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. (α2200_2202' -> α2201_2203')›  <!<  α2200_2223
//│ ╟── while constraining:  α2200_2221  <!<  α2200_2223
//│ ╟── while constraining:  (α2200_2221,)  <!<  (α2200_2223,)
//│ ╟── while constraining:  (α2200_2223 -> α2201_2224)  <!<  ((α2200_2221,) -> α2201_2222)
//│ ╟── while constraining:  ‹∀ 0. (α2200_2202' -> α2201_2203')›  <!<  ((α2200_2221,) -> α2201_2222)
//│ ╟── while constraining:  ‹∀ 0. (α2200_2202' -> α2201_2203')›  <!<  α2200_2221
//│ ╟── while constraining:  α2200_2219  <!<  α2200_2221
//│ ╟── while constraining:  (α2200_2219,)  <!<  (α2200_2221,)
//│ ╟── while constraining:  (α2200_2221 -> α2201_2222)  <!<  ((α2200_2219,) -> α2201_2220)
//│ ╟── while constraining:  ‹∀ 0. (α2200_2202' -> α2201_2203')›  <!<  ((α2200_2219,) -> α2201_2220)
//│ ╟── while constraining:  ‹∀ 0. (α2200_2202' -> α2201_2203')›  <!<  α2200_2219
//│ ╟── while constraining:  α2200_2217  <!<  α2200_2219
//│ ╟── while constraining:  (α2200_2217,)  <!<  (α2200_2219,)
//│ ╟── while constraining:  (α2200_2219 -> α2201_2220)  <!<  ((α2200_2217,) -> α2201_2218)
//│ ╟── while constraining:  ‹∀ 0. (α2200_2202' -> α2201_2203')›  <!<  ((α2200_2217,) -> α2201_2218)
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 0. (α2200_2202' -> α2201_2203')›  <!<  ((α2200_2209,) -> α2201_2210)
//│ ╟── while constraining:  ‹∀ 0. (α2200_2202' -> α2201_2203')›  <!<  α2200_2209
//│ ╟── while constraining:  α2200_2207  <!<  α2200_2209
//│ ╟── while constraining:  (α2200_2207,)  <!<  (α2200_2209,)
//│ ╟── while constraining:  (α2200_2209 -> α2201_2210)  <!<  ((α2200_2207,) -> α2201_2208)
//│ ╟── while constraining:  ‹∀ 0. (α2200_2202' -> α2201_2203')›  <!<  ((α2200_2207,) -> α2201_2208)
//│ ╟── while constraining:  ‹∀ 0. (α2200_2202' -> α2201_2203')›  <!<  α2200_2207
//│ ╟── while constraining:  α2196_2205  <!<  α2200_2207
//│ ╟── while constraining:  (α2196_2205,)  <!<  (α2200_2207,)
//│ ╟── while constraining:  (α2200_2207 -> α2201_2208)  <!<  ((α2196_2205,) -> α2197_2206)
//│ ╟── while constraining:  ‹∀ 0. (α2200_2202' -> α2201_2203')›  <!<  ((α2196_2205,) -> α2197_2206)
//│ ╟── while constraining:  ‹∀ 0. (α2200_2202' -> α2201_2203')›  <!<  α2196_2205
//│ ╟── while constraining:  (‹∀ 0. (α2200_2202' -> α2201_2203')›,)  <!<  (α2196_2205,)
//│ ╟── while constraining:  (α2196_2205 -> α2197_2206)  <!<  ((‹∀ 0. (α2200_2202' -> α2201_2203')›,) -> α2204)
//│ ╙── while constraining:  ‹∀ 0. (α2196_2198' -> α2197_2199')›  <!<  ((‹∀ 0. (α2200_2202' -> α2201_2203')›,) -> α2204)
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:re
// Gn+2
(fun x -> x x) (fun x -> x x)!
//│ res: nothing
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded



// ===========================================================
// ======================== SuperF +D ========================
// ===========================================================

:DistributeForalls


// ============ A. polymorphic instantiation ============

// A1
fun x -> fun y -> y
//│ res: anything -> 'a -> 'a
//│    = [Function: res]

// A2
choose id
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// A3
choose nil ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// A4
fun x -> x x
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: res]

// A5
id auto
//│ res: (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│    = [Function: auto]

// A6
id auto_
//│ res: (forall 'a. 'a -> 'a) -> 'b -> 'b
//│    = [Function: auto_]

// A7
choose id auto
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)
//│    = [Function: id1]

// A8
:ns
choose id auto_
//│ res: 'c
//│   where
//│     'c :> (forall 'a. 'a -> 'a) | (forall 'b. (forall 'a0. 'a0 -> 'a0) -> 'b -> 'b)
//│    = [Function: id1]

// A9
:ng
f (choose id) ids
//│ res: 'a -> 'a

// A10
poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// A11
poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]

// A12
id poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]


// ============ B. inference of polymorphic arguments ============

// B1
fun f -> (f 1, f true)
//│ res: (true -> 'a & 1 -> 'b) -> ('b, 'a,)
//│    = [Function: res]

// B2
fun xs -> poly (head xs)
//│ res: List[forall 'a. 'a -> 'a] -> (int, bool,)
//│    = [Function: res]


// ============ C. functions on polymorphic lists ============

// C1
length ids
//│ res: int
//│    = 1

// C2
tail ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// C3
head ids
//│ res: 'a -> 'a
//│    = [Function: id1]

// C4
single id
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// C5
cons id ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C6
cons (fun x -> x) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function (anonymous)],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C7
append (single inc) (single id)
//│ res: List[int -> int]
//│    = Cons {
//│        head: [Function: succ],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C8
:ng
g (single id) ids
//│ res: 'a -> 'a

// C9
map poly (single id)
//│ res: List[(int, bool,)]
//│    = Cons { head: [ 1, true ], tail: Nil {} }

// C10
map head (single ids)
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }


// ============ D. application functions ============

// D1
app poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// D2
revapp id poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// D3
:ng
runST argST
//│ res: int

// D4
:ng
app runST argST
//│ res: int

// D5
:ng
revapp argST runST
//│ res: int


// ============ E. η-expansion ============

// E1
:ng
k h lst
//│ res: int -> 'a -> 'a

// E2
:ng
k (fun x -> h x) lst
//│ res: int -> 'a -> 'a

// E3
:ng
r (fun x -> fun y -> y)
//│ res: int


// ============ F. FreezeML Additions ============

// F5
auto id
//│ res: 'b -> 'b
//│    = [Function: id1]

// F6
cons (head ids) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// F7
(head ids) 3
//│ res: 3
//│    = 3

// F8
choose (head ids)
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// F9
let f = revapp id in f poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// F10
choose id (fun x -> auto_ x)
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)
//│    = [Function: id1]


// ============ G. SuperF Additions ============

// G1
def z f x = x
//│ z: anything -> 'a -> 'a
//│  = [Function: z1]

// G2
def s n f x = f (n f x)
//│ s: ('a -> 'b -> 'c) -> ('c -> 'd & 'a) -> 'b -> 'd
//│  = [Function: s1]

// G3
n3 = s (s (s z))
//│ n3: ('a -> 'b & 'c -> 'a & 'd -> 'c) -> 'd -> 'b
//│   = [Function (anonymous)]

// G1A
z: ChurchInt
//│ res: ChurchInt
//│    = [Function: z1]

// G2A
s: ChurchInt -> ChurchInt
//│ res: ChurchInt -> ChurchInt
//│    = [Function: s1]

// G3A
n3: ChurchInt
//│ res: ChurchInt
//│    = [Function (anonymous)]

// G4
fst (fst (fst (n3 (fun x -> (x, 0)) 1)))
//│ res: 1
//│    = 1

(succ (succ zero)) (succ (succ zero))
//│ res: ('M -> 'M) -> 'M -> 'M
//│    = [Function (anonymous)]

(s (s z)) (s (s z))
//│ res: (('a | 'b) -> 'b & 'c -> 'a) -> 'c -> 'b
//│   where
//│     'c :> 'a | 'b
//│    = [Function (anonymous)]

// G7
rec def to_ch n = if n == 0 then z else s (to_ch (n - 1))
//│ to_ch: int -> ('a -> 'b & 'a -> 'a) -> ('a & 'b) -> 'b
//│      = [Function: to_ch1]

// G7A
to_ch: int -> ChurchInt
//│ res: int -> ChurchInt
//│    = [Function: to_ch1]

:e
// G8
rec def id1 x = if true then x else id1 id1 x
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c. ?a -> ?b <: ?id1` exceeded recursion depth limit (250)
//│ ║  l.1031: 	rec def id1 x = if true then x else id1 id1 x
//│ ║          	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. (α3217_3227'' -> α3226_3229'')›  <!<  α3217_3248'
//│ ╟── while constraining:  α3224'  <!<  α3217_3248'
//│ ╟── while constraining:  (α3224',)  <!<  (α3217_3248',)
//│ ╟── while constraining:  (α3217_3248' -> α3226_3250')  <!<  ((α3224',) -> α3225')
//│ ╟── while constraining:  ‹∀ 1. (α3217_3227'' -> α3226_3229'')›  <!<  ((α3224',) -> α3225')
//│ ╟── while constraining:  ‹∀ 1. (α3217_3227'' -> α3226_3229'')›  <!<  α3222'
//│ ╟── while constraining:  ‹∀ 1. (α3217_3227'' -> α3226_3229'')›  <!<  α3225'
//│ ╟── while constraining:  ‹∀ 1. (α3217_3227'' -> α3226_3229'')›  <!<  α3226_3235'
//│ ╟── while constraining:  ‹∀ 1. (α3217_3227'' -> α3226_3229'')›  <!<  α20_3234'
//│ ╟── while constraining:  ‹∀ 1. (α3217_3227'' -> α3226_3229'')›  <!<  α3217_3233'
//│ ╟── while constraining:  ‹∀ 1. (α3217_3227'' -> α3226_3229'')›  <!<  α3224'
//│ ╟── while constraining:  ‹∀ 1. (α3217_3227'' -> α3226_3229'')›  <!<  α3217_3245'
//│ ╟── while constraining:  α3224'  <!<  α3217_3245'
//│ ╟── while constraining:  (α3224',)  <!<  (α3217_3245',)
//│ ╟── while constraining:  (α3217_3245' -> α3226_3247')  <!<  ((α3224',) -> α3225')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 1. (α3217_3227'' -> α3226_3229'')›  <!<  α3226_3235'
//│ ╟── while constraining:  ‹∀ 1. (α3217_3227'' -> α3226_3229'')›  <!<  α20_3234'
//│ ╟── while constraining:  ‹∀ 1. (α3217_3227'' -> α3226_3229'')›  <!<  α3217_3233'
//│ ╟── while constraining:  ‹∀ 1. (α3217_3227'' -> α3226_3229'')›  <!<  α3224'
//│ ╟── while constraining:  ‹∀ 1. (α3217_3227'' -> α3226_3229'')›  <!<  α3217_3236'
//│ ╟── while constraining:  α3224'  <!<  α3217_3236'
//│ ╟── while constraining:  (α3224',)  <!<  (α3217_3236',)
//│ ╟── while constraining:  (α3217_3236' -> α3226_3238')  <!<  ((α3224',) -> α3225')
//│ ╟── while constraining:  ‹∀ 1. (α3217_3227'' -> α3226_3229'')›  <!<  ((α3224',) -> α3225')
//│ ╟── while constraining:  ‹∀ 1. (α3217_3227'' -> α3226_3229'')›  <!<  α3222'
//│ ╟── while constraining:  α3225'  <!<  α3222'
//│ ╟── while constraining:  α3226_3232'  <!<  α3222'
//│ ╟── while constraining:  (α3217_3230' -> α3226_3232')  <!<  ((id13216',) -> α3222')
//│ ╟── while constraining:  ‹∀ 1. (α3217_3227'' -> α3226_3229'')›  <!<  ((id13216',) -> α3222')
//│ ╙── while constraining:  ‹∀ 1. (α3217_3227'' -> α3226_3229'')›  <!<  id13216'
//│ id1: 'id1
//│   where
//│     'id1 :> forall 'a. ('b & 'a) -> 'a
//│     'a :> 'c
//│     'b :> 'id1
//│        <: 'c
//│     'c :> 'id1
//│        <: 'b -> 'c
//│    = [Function: id12]

:e
// G9
id1 id1
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?id1, ?q, ?r, ?s, ?t, ?u. ?id1 <: (forall ?id10, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1, ?i1, ?j1, ?k1, ?l1, ?m1, ?n1, ?o1, ?p1. ?id10) -> ?q1` exceeded recursion depth limit (250)
//│ ║  l.1079: 	id1 id1
//│ ║          	^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. id13216'#›  <!<  α3225_3481
//│ ╟── while constraining:  ‹∀ 0. id13216'#›  <!<  α3226_3500
//│ ╟── while constraining:  ‹∀ 0. id13216'#›  <!<  α20_3499
//│ ╟── while constraining:  ‹∀ 0. id13216'#›  <!<  α3217_3498
//│ ╟── while constraining:  ‹∀ 0. id13216'#›  <!<  α3224_3479
//│ ╟── while constraining:  ‹∀ 0. id13216'#›  <!<  α3217_3502
//│ ╟── while constraining:  α3224_3451  <!<  α3217_3502
//│ ╟── while constraining:  (α3224_3451,)  <!<  (α3217_3502,)
//│ ╟── while constraining:  (α3217_3502 -> α3226_3504)  <!<  ((α3224_3451,) -> α3225_3453)
//│ ╟── while constraining:  ‹∀ 1. (α3217_3478'' -> α3226_3480'')›  <!<  ((α3224_3451,) -> α3225_3453)
//│ ╟── while constraining:  id13216_3477#  <!<  ((α3224_3451,) -> α3225_3453)
//│ ╟── while constraining:  ‹∀ 0. id13216'#›  <!<  ((α3224_3451,) -> α3225_3453)
//│ ╟── while constraining:  ‹∀ 0. id13216'#›  <!<  α3222_3454
//│ ╟── while constraining:  ‹∀ 0. id13216'#›  <!<  α3225_3453
//│ ╟── while constraining:  ‹∀ 0. id13216'#›  <!<  α3226_3472
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 1. (α3217_3366'' -> α3226_3368'')›  <!<  ((α3224_3339,) -> α3225_3341)
//│ ╟── while constraining:  id13216_3365#  <!<  ((α3224_3339,) -> α3225_3341)
//│ ╟── while constraining:  ‹∀ 0. id13216'#›  <!<  ((α3224_3339,) -> α3225_3341)
//│ ╟── while constraining:  ‹∀ 0. id13216'#›  <!<  α3222_3342
//│ ╟── while constraining:  ‹∀ 0. id13216'#›  <!<  α3225_3341
//│ ╟── while constraining:  ‹∀ 0. id13216'#›  <!<  α3226_3360
//│ ╟── while constraining:  ‹∀ 0. id13216'#›  <!<  α20_3359
//│ ╟── while constraining:  ‹∀ 0. id13216'#›  <!<  α3217_3358
//│ ╟── while constraining:  ‹∀ 0. id13216'#›  <!<  α3224_3339
//│ ╟── while constraining:  ‹∀ 0. id13216'#›  <!<  α3217_3362
//│ ╟── while constraining:  (‹∀ 0. id13216'#›,)  <!<  (α3217_3362,)
//│ ╟── while constraining:  (α3217_3362 -> α3226_3364)  <!<  ((‹∀ 0. id13216'#›,) -> α3336)
//│ ╟── while constraining:  ‹∀ 1. (α3217_3338'' -> α3226_3340'')›  <!<  ((‹∀ 0. id13216'#›,) -> α3336)
//│ ╟── while constraining:  id13216_3337#  <!<  ((‹∀ 0. id13216'#›,) -> α3336)
//│ ╙── while constraining:  ‹∀ 0. id13216'#›  <!<  ((‹∀ 0. id13216'#›,) -> α3336)
//│ res: error
//│    = [Function: id12]

// Gn
:e
auto auto
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1120: 	auto auto
//│ ║          	^^^^^^^^^
//│ ╟── type `‘a_3557` is not a function
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ║         	                   ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ╙──       	                       ^^^^^^^^
//│ res: 'b -> 'b | error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

// Gn+1
:e
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b. ?a -> ?b <: (forall ?c, ?d. ?d -> ?c) -> ?e` exceeded recursion depth limit (250)
//│ ║  l.1136: 	(fun x -> x x) (fun x -> x x)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. (α3568_3570' -> α3569_3571')›  <!<  α3568_3591
//│ ╟── while constraining:  α3568_3589  <!<  α3568_3591
//│ ╟── while constraining:  (α3568_3589,)  <!<  (α3568_3591,)
//│ ╟── while constraining:  (α3568_3591 -> α3569_3592)  <!<  ((α3568_3589,) -> α3569_3590)
//│ ╟── while constraining:  ‹∀ 0. (α3568_3570' -> α3569_3571')›  <!<  ((α3568_3589,) -> α3569_3590)
//│ ╟── while constraining:  ‹∀ 0. (α3568_3570' -> α3569_3571')›  <!<  α3568_3589
//│ ╟── while constraining:  α3568_3587  <!<  α3568_3589
//│ ╟── while constraining:  (α3568_3587,)  <!<  (α3568_3589,)
//│ ╟── while constraining:  (α3568_3589 -> α3569_3590)  <!<  ((α3568_3587,) -> α3569_3588)
//│ ╟── while constraining:  ‹∀ 0. (α3568_3570' -> α3569_3571')›  <!<  ((α3568_3587,) -> α3569_3588)
//│ ╟── while constraining:  ‹∀ 0. (α3568_3570' -> α3569_3571')›  <!<  α3568_3587
//│ ╟── while constraining:  α3568_3585  <!<  α3568_3587
//│ ╟── while constraining:  (α3568_3585,)  <!<  (α3568_3587,)
//│ ╟── while constraining:  (α3568_3587 -> α3569_3588)  <!<  ((α3568_3585,) -> α3569_3586)
//│ ╟── while constraining:  ‹∀ 0. (α3568_3570' -> α3569_3571')›  <!<  ((α3568_3585,) -> α3569_3586)
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 0. (α3568_3570' -> α3569_3571')›  <!<  ((α3568_3577,) -> α3569_3578)
//│ ╟── while constraining:  ‹∀ 0. (α3568_3570' -> α3569_3571')›  <!<  α3568_3577
//│ ╟── while constraining:  α3568_3575  <!<  α3568_3577
//│ ╟── while constraining:  (α3568_3575,)  <!<  (α3568_3577,)
//│ ╟── while constraining:  (α3568_3577 -> α3569_3578)  <!<  ((α3568_3575,) -> α3569_3576)
//│ ╟── while constraining:  ‹∀ 0. (α3568_3570' -> α3569_3571')›  <!<  ((α3568_3575,) -> α3569_3576)
//│ ╟── while constraining:  ‹∀ 0. (α3568_3570' -> α3569_3571')›  <!<  α3568_3575
//│ ╟── while constraining:  α3564_3573  <!<  α3568_3575
//│ ╟── while constraining:  (α3564_3573,)  <!<  (α3568_3575,)
//│ ╟── while constraining:  (α3568_3575 -> α3569_3576)  <!<  ((α3564_3573,) -> α3565_3574)
//│ ╟── while constraining:  ‹∀ 0. (α3568_3570' -> α3569_3571')›  <!<  ((α3564_3573,) -> α3565_3574)
//│ ╟── while constraining:  ‹∀ 0. (α3568_3570' -> α3569_3571')›  <!<  α3564_3573
//│ ╟── while constraining:  (‹∀ 0. (α3568_3570' -> α3569_3571')›,)  <!<  (α3564_3573,)
//│ ╟── while constraining:  (α3564_3573 -> α3565_3574)  <!<  ((‹∀ 0. (α3568_3570' -> α3569_3571')›,) -> α3572)
//│ ╙── while constraining:  ‹∀ 0. (α3564_3566' -> α3565_3567')›  <!<  ((‹∀ 0. (α3568_3570' -> α3569_3571')›,) -> α3572)
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:re
// Gn+2
(fun x -> x x) (fun x -> x x)!
//│ res: nothing
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded



// ==============================================================
// ======================== SuperF +D+CC ========================
// ==============================================================

:CycleCheck


// ============ A. polymorphic instantiation ============

// A1
fun x -> fun y -> y
//│ res: anything -> 'a -> 'a
//│    = [Function: res]

// A2
choose id
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// A3
choose nil ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// A4
fun x -> x x
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: res]

// A5
id auto
//│ res: (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│    = [Function: auto]

// A6
id auto_
//│ res: (forall 'a. 'a -> 'a) -> 'b -> 'b
//│    = [Function: auto_]

// A7
choose id auto
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)
//│    = [Function: id1]

// A8
:ns
choose id auto_
//│ res: 'c
//│   where
//│     'c :> (forall 'a. 'a -> 'a) | (forall 'b. (forall 'a0. 'a0 -> 'a0) -> 'b -> 'b)
//│    = [Function: id1]

// A9
:ng
f (choose id) ids
//│ res: 'a -> 'a

// A10
poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// A11
poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]

// A12
id poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]


// ============ B. inference of polymorphic arguments ============

// B1
fun f -> (f 1, f true)
//│ res: (true -> 'a & 1 -> 'b) -> ('b, 'a,)
//│    = [Function: res]

// B2
fun xs -> poly (head xs)
//│ res: List[forall 'a. 'a -> 'a] -> (int, bool,)
//│    = [Function: res]


// ============ C. functions on polymorphic lists ============

// C1
length ids
//│ res: int
//│    = 1

// C2
tail ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// C3
head ids
//│ res: 'a -> 'a
//│    = [Function: id1]

// C4
single id
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// C5
cons id ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C6
cons (fun x -> x) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function (anonymous)],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C7
append (single inc) (single id)
//│ res: List[int -> int]
//│    = Cons {
//│        head: [Function: succ],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C8
:ng
g (single id) ids
//│ res: 'a -> 'a

// C9
map poly (single id)
//│ res: List[(int, bool,)]
//│    = Cons { head: [ 1, true ], tail: Nil {} }

// C10
map head (single ids)
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }


// ============ D. application functions ============

// D1
app poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// D2
revapp id poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// D3
:ng
runST argST
//│ res: int

// D4
:ng
app runST argST
//│ res: int

// D5
:ng
revapp argST runST
//│ res: int


// ============ E. η-expansion ============

// E1
:ng
k h lst
//│ res: int -> 'a -> 'a

// E2
:ng
k (fun x -> h x) lst
//│ res: int -> 'a -> 'a

// E3
:ng
r (fun x -> fun y -> y)
//│ res: int


// ============ F. FreezeML Additions ============

// F5
auto id
//│ res: 'b -> 'b
//│    = [Function: id1]

// F6
cons (head ids) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// F7
(head ids) 3
//│ res: 3
//│    = 3

// F8
choose (head ids)
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// F9
let f = revapp id in f poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// F10
choose id (fun x -> auto_ x)
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)
//│    = [Function: id1]


// ============ G. SuperF Additions ============

// G1
def z f x = x
//│ z: anything -> 'a -> 'a
//│  = [Function: z2]

// G2
def s n f x = f (n f x)
//│ s: ('a -> 'b -> 'c) -> ('c -> 'd & 'a) -> 'b -> 'd
//│  = [Function: s2]

// G3
n3 = s (s (s z))
//│ n3: ('a -> 'b & 'c -> 'a & 'd -> 'c) -> 'd -> 'b
//│   = [Function (anonymous)]

// G1A
z: ChurchInt
//│ res: ChurchInt
//│    = [Function: z2]

// G2A
s: ChurchInt -> ChurchInt
//│ res: ChurchInt -> ChurchInt
//│    = [Function: s2]

// G3A
n3: ChurchInt
//│ res: ChurchInt
//│    = [Function (anonymous)]

// G4
fst (fst (fst (n3 (fun x -> (x, 0)) 1)))
//│ res: 1
//│    = 1

(succ (succ zero)) (succ (succ zero))
//│ res: ('M -> 'M) -> 'M -> 'M
//│    = [Function (anonymous)]

:e
(s (s z)) (s (s z))
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.1457: 	(s (s z)) (s (s z))
//│ ║          	^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 4. α4007_4343'''''›  <:  α4000_4364    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 4. α4007_4343'''''›  <:  α4000_4361''''
//│ res: (('a | 'b) -> 'b & 'c -> 'a) -> 'c -> 'b | error
//│   where
//│     'c :> 'a | 'b
//│    = [Function (anonymous)]

// G7
rec def to_ch n = if n == 0 then z else s (to_ch (n - 1))
//│ to_ch: int -> ('a -> 'b & 'a -> 'a) -> ('a & 'b) -> 'b
//│      = [Function: to_ch2]

// G7A
to_ch: int -> ChurchInt
//│ res: int -> ChurchInt
//│    = [Function: to_ch2]

:e
// G8
rec def id1 x = if true then x else id1 id1 x
//│ ╔══[ERROR] Cyclic-looking constraint while typing binding of lambda expression; a type annotation may be required
//│ ║  l.1481: 	rec def id1 x = if true then x else id1 id1 x
//│ ║          	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. (α4585_4595'' -> α4594_4597'')›  <:  α4585_4601'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. (α4585_4595'' -> α4594_4597'')›  <:  α4585_4595''
//│ ╔══[ERROR] Cyclic-looking constraint while typing binding of lambda expression; a type annotation may be required
//│ ║  l.1481: 	rec def id1 x = if true then x else id1 id1 x
//│ ║          	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. (α4585_4595'' -> α4594_4597'')›  <:  α4585_4601'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. (α4585_4595'' -> α4594_4597'')›  <:  α4585_4595''
//│ ╔══[ERROR] Cyclic-looking constraint while typing binding of lambda expression; a type annotation may be required
//│ ║  l.1481: 	rec def id1 x = if true then x else id1 id1 x
//│ ║          	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. (α4585_4595'' -> α4594_4597'')›  <:  α4590'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. (α4585_4595'' -> α4594_4597'')›  <:  α4590'
//│ ╔══[ERROR] Cyclic-looking constraint while typing binding of lambda expression; a type annotation may be required
//│ ║  l.1481: 	rec def id1 x = if true then x else id1 id1 x
//│ ║          	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. (α4585_4595'' -> α4594_4597'')›  <:  α4590'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. (α4585_4595'' -> α4594_4597'')›  <:  α4590'
//│ id1: 'id1
//│   where
//│     'id1 :> forall 'a. ('b & 'a) -> 'a
//│     'a :> 'c
//│     'b :> 'id1
//│        <: 'c
//│     'c :> 'id1
//│        <: 'b -> 'c
//│    = [Function: id13]

:e
// G9
id1 id1
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.1518: 	id1 id1
//│ ║          	^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. id14584'#›  <:  α4592_4647    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. id14584'#›  <:  α4592'
//│ res: error
//│    = [Function: id13]

// Gn
:e
auto auto
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1530: 	auto auto
//│ ║          	^^^^^^^^^
//│ ╟── type `‘a_4669` is not a function
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ║         	                   ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ╙──       	                       ^^^^^^^^
//│ res: 'b -> 'b | error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

// Gn+1
:e
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.1546: 	(fun x -> x x) (fun x -> x x)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. (α4680_4682' -> α4681_4683')›  <:  α4680_4689    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. (α4680_4682' -> α4681_4683')›  <:  α4680_4682'
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:re
// Gn+2
(fun x -> x x) (fun x -> x x)!
//│ res: nothing
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded



// =================================================================
// ======================== SuperF +D+CC+RT ========================
// =================================================================

:RecursiveTypes


// ============ A. polymorphic instantiation ============

// A1
fun x -> fun y -> y
//│ res: anything -> 'a -> 'a
//│    = [Function: res]

// A2
choose id
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// A3
choose nil ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// A4
fun x -> x x
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: res]

// A5
id auto
//│ res: (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│    = [Function: auto]

// A6
id auto_
//│ res: (forall 'a. 'a -> 'a) -> 'b -> 'b
//│    = [Function: auto_]

// A7
choose id auto
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)
//│    = [Function: id1]

// A8
:ns
choose id auto_
//│ res: 'c
//│   where
//│     'c :> (forall 'a. 'a -> 'a) | (forall 'b. (forall 'a0. 'a0 -> 'a0) -> 'b -> 'b)
//│    = [Function: id1]

// A9
:ng
f (choose id) ids
//│ res: 'a -> 'a

// A10
poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// A11
poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]

// A12
id poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]


// ============ B. inference of polymorphic arguments ============

// B1
fun f -> (f 1, f true)
//│ res: (true -> 'a & 1 -> 'b) -> ('b, 'a,)
//│    = [Function: res]

// B2
fun xs -> poly (head xs)
//│ res: List[forall 'a. 'a -> 'a] -> (int, bool,)
//│    = [Function: res]


// ============ C. functions on polymorphic lists ============

// C1
length ids
//│ res: int
//│    = 1

// C2
tail ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// C3
head ids
//│ res: 'a -> 'a
//│    = [Function: id1]

// C4
single id
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// C5
cons id ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C6
cons (fun x -> x) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function (anonymous)],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C7
append (single inc) (single id)
//│ res: List[int -> int]
//│    = Cons {
//│        head: [Function: succ],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C8
:ng
g (single id) ids
//│ res: 'a -> 'a

// C9
map poly (single id)
//│ res: List[(int, bool,)]
//│    = Cons { head: [ 1, true ], tail: Nil {} }

// C10
map head (single ids)
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }


// ============ D. application functions ============

// D1
app poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// D2
revapp id poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// D3
:ng
runST argST
//│ res: int

// D4
:ng
app runST argST
//│ res: int

// D5
:ng
revapp argST runST
//│ res: int


// ============ E. η-expansion ============

// E1
:ng
k h lst
//│ res: int -> 'a -> 'a

// E2
:ng
k (fun x -> h x) lst
//│ res: int -> 'a -> 'a

// E3
:ng
r (fun x -> fun y -> y)
//│ res: int


// ============ F. FreezeML Additions ============

// F5
auto id
//│ res: 'b -> 'b
//│    = [Function: id1]

// F6
cons (head ids) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// F7
(head ids) 3
//│ res: 3
//│    = 3

// F8
choose (head ids)
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// F9
let f = revapp id in f poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// F10
choose id (fun x -> auto_ x)
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)
//│    = [Function: id1]


// ============ G. SuperF Additions ============

// G1
def z f x = x
//│ z: anything -> 'a -> 'a
//│  = [Function: z3]

// G2
def s n f x = f (n f x)
//│ s: ('a -> 'b -> 'c) -> ('c -> 'd & 'a) -> 'b -> 'd
//│  = [Function: s3]

// G3
n3 = s (s (s z))
//│ n3: ('a -> 'b & 'c -> 'a & 'd -> 'c) -> 'd -> 'b
//│   = [Function (anonymous)]

// G1A
z: ChurchInt
//│ res: ChurchInt
//│    = [Function: z3]

// G2A
s: ChurchInt -> ChurchInt
//│ res: ChurchInt -> ChurchInt
//│    = [Function: s3]

// G3A
n3: ChurchInt
//│ res: ChurchInt
//│    = [Function (anonymous)]

// G4
fst (fst (fst (n3 (fun x -> (x, 0)) 1)))
//│ res: 1
//│    = 1

(succ (succ zero)) (succ (succ zero))
//│ res: ('M -> 'M) -> 'M -> 'M
//│    = [Function (anonymous)]

:e
(s (s z)) (s (s z))
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.1838: 	(s (s z)) (s (s z))
//│ ║          	^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 4. α5103_5439'''''›  <:  α5096_5460    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 4. α5103_5439'''''›  <:  α5096_5457''''
//│ res: (('a | 'b) -> 'b & 'c -> 'a) -> 'c -> 'b | error
//│   where
//│     'c :> 'a | 'b
//│    = [Function (anonymous)]

// G7
rec def to_ch n = if n == 0 then z else s (to_ch (n - 1))
//│ to_ch: int -> ('a -> 'b & 'a -> 'a) -> ('a & 'b) -> 'b
//│      = [Function: to_ch3]

// G7A
to_ch: int -> ChurchInt
//│ res: int -> ChurchInt
//│    = [Function: to_ch3]

// G8
rec def id1 x = if true then x else id1 id1 x
//│ id1: 'id1
//│   where
//│     'id1 :> forall 'a. ('b & 'a) -> 'a
//│     'a :> 'c
//│     'b :> 'id1
//│        <: 'c
//│     'c :> 'id1
//│        <: 'b -> 'c
//│    = [Function: id14]

:e
// G9
id1 id1
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.1874: 	id1 id1
//│ ║          	^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. id15679'#›  <:  α5687_5733    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. id15679'#›  <:  α5687'
//│ res: error
//│    = [Function: id14]

// Gn
:e
auto auto
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1886: 	auto auto
//│ ║          	^^^^^^^^^
//│ ╟── type `‘a_5752` is not a function
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ║         	                   ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ╙──       	                       ^^^^^^^^
//│ res: 'b -> 'b | error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

// Gn+1
:e
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.1902: 	(fun x -> x x) (fun x -> x x)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. (α5763_5765' -> α5764_5766')›  <:  α5763_5772    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. (α5763_5765' -> α5764_5766')›  <:  α5763_5765'
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:re
// Gn+2
(fun x -> x x) (fun x -> x x)!
//│ res: nothing
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded


