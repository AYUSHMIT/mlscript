
:GeneralizeCurriedFunctions
:NoConstrainedTypes
:DontDistributeForalls
:NoCycleCheck
:NoRecursiveTypes


// ============ Dummy classes to represent the types in the examples ============

class List[a]
  method Head: a
  method Tail: List[a]
//│ Defined class List[+a]
//│ Declared List.Head: List['a] -> 'a
//│ Declared List.Tail: List['a] -> List['a]

class Nil[a]: List[a]
  method Head = error
  method Tail = this
//│ Defined class Nil[+a]
//│ Defined Nil.Head: Nil[?] -> nothing
//│ Defined Nil.Tail: (Nil['a] & 'this) -> (Nil['a] & 'this)

class Cons[a]: List[a] & { head: a; tail: List[a] }
  method Head = this.head
  method Tail = this.tail
//│ Defined class Cons[+a]
//│ Defined Cons.Head: Cons['a] -> 'a
//│ Defined Cons.Tail: Cons['a] -> List['a]

class ST[S, A]
  method Inv_S: S -> S
  method Cov_A: A
//│ Defined class ST[=S, +A]
//│ Declared ST.Inv_S: ST['S, ?] -> 'S -> 'S
//│ Declared ST.Cov_A: ST['S, 'A] -> 'A


// ============ Type signatures for functions used in the examples ============

def head: List['a] -> 'a
def head l = l.Head
//│ head: List['a] -> 'a
//│     = <missing implementation>
//│ (List['a & 'b] & 'c & 'this) -> 'b
//│   <:  head:
//│ List['a] -> 'a
//│     = [Function: head]

def tail: List['a] -> List['a]
def tail l = l.Tail
//│ tail: List['a] -> List['a]
//│     = <missing implementation>
//│ (List['a] & 'b & 'this) -> (List['a] | 'c)
//│   <:  tail:
//│ List['a] -> List['a]
//│     = [Function: tail]

// Used to represent `[]` in the papers
def nil: List['a]
nil = Nil {}
//│ nil: List[nothing]
//│    = <missing implementation>
//│ Nil[nothing]
//│   <:  nil:
//│ List[nothing]
//│    = Nil {}

def cons: 'a -> List['a] -> List['a]
def cons head tail = Cons { head; tail }
//│ cons: 'a -> List['a] -> List['a]
//│     = <missing implementation>
//│ 'b -> (forall 'tail, 'c, 'a, 'd, 'head. (List['a] & 'c & 'tail) -> ((Cons['a | 'b] with {head: 'head | 'b, tail: 'tail}) | 'd))
//│   <:  cons:
//│ 'a -> List['a] -> List['a]
//│     = [Function: cons]

def is_empty: List['a] -> bool
def is_empty l = eq l nil
//│ is_empty: List[?] -> bool
//│         = <missing implementation>
//│ ('a & 'b) -> (bool | 'c)
//│   <:  is_empty:
//│ List[?] -> bool
//│         = [Function: is_empty]

def single: 'a -> List['a]
def single x = cons x nil
//│ single: 'a -> List['a]
//│       = <missing implementation>
//│ ('b & 'a) -> (List['a] | 'c)
//│   <:  single:
//│ 'a -> List['a]
//│       = [Function: single]

def append: List['a] -> List['a] -> List['a]
rec def append l1 l2 =
  if is_empty l1 then l2
  else cons (head l1) (append (tail l1) l2)
//│ append: List['a] -> List['a] -> List['a]
//│       = <missing implementation>
//│ (List['a | 'a0 | 'a1 & 'a2] & 'b) -> (forall 'c, 'd, 'e, 'a3. ('c & List['a2] & 'd & 'e) -> (List['a3 | 'a0 | 'a2] | 'e))
//│   <:  append:
//│ List['a] -> List['a] -> List['a]
//│       = [Function: append]

def length: List['a] -> int
rec def length l =
  if is_empty l then 0
  else succ (length (tail l))
//│ length: List[?] -> int
//│       = <missing implementation>
//│ (List['a | 'a0] & 'b) -> (int | 'c)
//│   <:  length:
//│ List[?] -> int
//│       = [Function: length]

def id: 'a -> 'a
def id x = x
//│ id: 'a -> 'a
//│   = <missing implementation>
//│ 'a -> 'a
//│   <:  id:
//│ 'a -> 'a
//│   = [Function: id1]

def ids: List[forall 'a. 'a -> 'a]
def ids = single id
//│ ids: List[forall 'a. 'a -> 'a]
//│    = <missing implementation>
//│ List[forall 'a. 'a -> 'a]
//│   <:  ids:
//│ List[forall 'a. 'a -> 'a]
//│    = [Function: ids]

def inc: int -> int
def inc = succ
//│ inc: int -> int
//│    = <missing implementation>
//│ int -> int
//│   <:  inc:
//│ int -> int
//│    = [Function: inc]

def choose: 'a -> 'a -> 'a
def choose x y = if true then x else y
//│ choose: 'a -> 'a -> 'a
//│       = <missing implementation>
//│ 'a -> (forall 'b, 'c, 'd. ('b & 'c & 'd) -> ('a | 'd))
//│   <:  choose:
//│ 'a -> 'a -> 'a
//│       = [Function: choose]

def poly: (forall 'a. 'a -> 'a) -> (int, bool)
def poly f = (f 1, f true)
//│ poly: (forall 'a. 'a -> 'a) -> (int, bool,)
//│     = <missing implementation>
//│ (true -> 'a & 1 -> 'b & 'c) -> ('b, 'a,)
//│   <:  poly:
//│ (forall 'a. 'a -> 'a) -> (int, bool,)
//│     = [Function: poly]

def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
def auto x = x x
//│ auto: (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│     = <missing implementation>
//│ ('a -> 'b & 'a) -> 'b
//│   <:  auto:
//│ (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│     = [Function: auto]

def auto_ : (forall 'a. 'a -> 'a) -> 'b -> 'b
def auto_ x = x x
//│ auto_: (forall 'a. 'a -> 'a) -> 'b -> 'b
//│      = <missing implementation>
//│ ('a -> 'b & 'a) -> 'b
//│   <:  auto_:
//│ (forall 'a. 'a -> 'a) -> 'b -> 'b
//│      = [Function: auto_]

def map: ('a -> 'b) -> List['a] -> List['b]
rec def map f l =
  if is_empty l then nil
  else cons (f (head l)) (map f (tail l))
//│ map: ('a -> 'b) -> List['a] -> List['b]
//│    = <missing implementation>
//│ ('b -> 'c & 'd & 'a -> 'a0) -> (forall 'a1, 'e, 'f, 'g, 'a2, 'a3, 'a4. (List['a1 | 'a & 'a3 | 'b & 'a2 & 'g] & 'e) -> (List['a4 | 'a0 | 'c] | 'f))
//│   <:  map:
//│ ('a -> 'b) -> List['a] -> List['b]
//│    = [Function: map]

def app: ('a -> 'b) -> 'a -> 'b
def app f x = f x
//│ app: ('a -> 'b) -> 'a -> 'b
//│    = <missing implementation>
//│ ('a -> 'b & 'c) -> (forall 'd, 'e. ('a & 'd) -> ('e | 'b))
//│   <:  app:
//│ ('a -> 'b) -> 'a -> 'b
//│    = [Function: app]

def revapp: 'a -> ('a -> 'b) -> 'b
def revapp x f = f x
//│ revapp: 'a -> ('a -> 'b) -> 'b
//│       = <missing implementation>
//│ 'a -> (forall 'b, 'c. ('a -> 'c & 'b) -> 'c)
//│   <:  revapp:
//│ 'a -> ('a -> 'b) -> 'b
//│       = [Function: revapp]

:ng
def runST: (forall 's. ST['s, 'v]) -> 'v
//│ runST: (forall 's. ST['s, 'v]) -> 'v

:ng
def argST: ST['s, int]
//│ argST: ST['s, int]

// A9
:ng
def f: ('a -> 'a) -> List['a] -> 'a
//│ f: ('a -> 'a) -> List['a] -> 'a

// C8
:ng
def g: List['a] -> List['a] -> 'a
//│ g: List['a] -> List['a] -> 'a

// E1, E2
:ng
def h: int -> (forall 'a. 'a -> 'a)
def k: 'a -> List['a] -> 'a
def lst: List[forall 'a. int -> 'a -> 'a]
//│ h: int -> (forall 'a. 'a -> 'a)
//│ k: 'a -> List['a] -> 'a
//│ lst: List[forall 'a. int -> 'a -> 'a]

// E3
:ng
def r: (forall 'a. 'a -> (forall 'b. 'b -> 'b)) -> int
//│ r: (forall 'a. 'a -> (forall 'b. 'b -> 'b)) -> int


type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ Defined type alias ChurchInt

type Pair[A, B] = (A, B)
//│ Defined type alias Pair[+A, +B]

def fst: forall 'a 'b. Pair['a, 'b] -> 'a
def fst((x, y)) = x
//│ fst: Pair['a, 'b] -> 'a
//│    = <missing implementation>
//│ ('a, 'b,) -> 'a
//│   <:  fst:
//│ Pair['a, 'b] -> 'a
//│    = [Function: fst]

def zero: ChurchInt
def zero f x = x
//│ zero: ChurchInt
//│     = <missing implementation>
//│ 'a -> (forall 'b. 'b -> 'b)
//│   <:  zero:
//│ ChurchInt
//│     = [Function: zero]

def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
def succ (n: ChurchInt) f x = f (n f x)
//│ succ: (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = <missing implementation>
//│ ChurchInt -> (forall 'a, 'b, 'N, 'c, 'N0. (('N | 'b) -> 'a & 'N0 -> ('N & 'N0) & 'c) -> (forall 'd, 'e, 'f, 'N1. ('b & 'N0 & 'f & 'N1 & 'd) -> ('e | 'a)))
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = [Function: succ1]




// ================================================================
// ======================== Vanilla SuperF ========================
// ================================================================


// ============ A. polymorphic instantiation ============

// A1
fun x -> fun y -> y
//│ res: anything -> (forall 'a. 'a -> 'a)
//│    = [Function: res]

// A2
choose id
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// A3
choose nil ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// A4
fun x -> x x
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: res]

// A5
id auto
//│ res: (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│    = [Function: auto]

// A6
id auto_
//│ res: (forall 'a. 'a -> 'a) -> 'b -> 'b
//│    = [Function: auto_]

// A7
choose id auto
//│ res: (forall 'a. 'a -> 'a & 'a0) -> (forall 'b. 'a0 | 'b -> 'b)
//│    = [Function: id1]

// A8
:ns
choose id auto_
//│ res: 'c
//│   where
//│     'c :> (forall 'a. 'a -> 'a) | (forall 'b. (forall 'a0. 'a0 -> 'a0) -> 'b -> 'b)
//│    = [Function: id1]

// A9
:ng
f (choose id) ids
//│ res: 'a -> 'a

// A10
poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// A11
poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]

// A12
id poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]


// ============ B. inference of polymorphic arguments ============

// B1
fun f -> (f 1, f true)
//│ res: (true -> 'a & 1 -> 'b) -> ('b, 'a,)
//│    = [Function: res]

// B2
fun xs -> poly (head xs)
//│ res: List[forall 'a. 'a -> 'a] -> (int, bool,)
//│    = [Function: res]


// ============ C. functions on polymorphic lists ============

// C1
length ids
//│ res: int
//│    = 1

// C2
tail ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// C3
head ids
//│ res: 'a -> 'a
//│    = [Function: id1]

// C4
single id
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// C5
cons id ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C6
cons (fun x -> x) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function (anonymous)],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C7
append (single inc) (single id)
//│ res: List[int -> int]
//│    = Cons {
//│        head: [Function: succ],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C8
:ng
g (single id) ids
//│ res: 'a -> 'a

// C9
map poly (single id)
//│ res: List[(int, bool,)]
//│    = Cons { head: [ 1, true ], tail: Nil {} }

// C10
map head (single ids)
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }


// ============ D. application functions ============

// D1
app poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// D2
revapp id poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// D3
:ng
runST argST
//│ res: int

// D4
:ng
app runST argST
//│ res: int

// D5
:ng
revapp argST runST
//│ res: int


// ============ E. η-expansion ============

// E1
:ng
k h lst
//│ res: int -> (forall 'a, 'a0. ('a & 'a0) -> ('a | 'a0))

// E2
:ng
k (fun x -> h x) lst
//│ res: int -> (forall 'a, 'a0. ('a & 'a0) -> ('a | 'a0))

// E3
:ng
r (fun x -> fun y -> y)
//│ res: int


// ============ F. FreezeML Additions ============

// F5
auto id
//│ res: 'b -> 'b
//│    = [Function: id1]

// F6
cons (head ids) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// F7
(head ids) 3
//│ res: 3
//│    = 3

// F8
choose (head ids)
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// F9
let f = revapp id in f poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// F10
choose id (fun x -> auto_ x)
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)
//│    = [Function: id1]


// ============ G. SuperF Additions ============

// G1
def z f x = x
//│ z: 'a -> (forall 'b. 'b -> 'b)
//│  = [Function: z]

// G2
def s n f x = f (n f x)
//│ s: ('a -> ('b -> 'c & 'd) & 'e) -> (forall 'f, 'g, 'h. (('c | 'f) -> 'g & 'a & 'h) -> (forall 'i, 'j. ('b & 'j) -> ('i | 'g)))
//│  = [Function: s]

// G3
n3 = s (s (s z))
//│ n3: (('a | 'b) -> 'c & 'd -> 'a & 'e -> 'd & 'f) -> (forall 'g, 'h. ('e & 'g) -> ('h | 'c))
//│   = [Function (anonymous)]

// G1A
z: ChurchInt
//│ res: ChurchInt
//│    = [Function: z]

:e
// G2A
s: ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.532: 	s: ChurchInt -> ChurchInt
//│ ║         	^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.244: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║         	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.244: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──       	                        ^^
//│ res: ChurchInt -> ChurchInt
//│    = [Function: s]

// G3A
n3: ChurchInt
//│ res: ChurchInt
//│    = [Function (anonymous)]

// G4
fst (fst (fst (n3 (fun x -> (x, 0)) 1)))
//│ res: 1
//│    = 1

(succ (succ zero)) (succ (succ zero))
//│ res: ('M -> 'M) -> 'M -> 'M
//│    = [Function (anonymous)]

(s (s z)) (s (s z))
//│ res: ('a -> ('a & 'b & 'c) & 'b -> ('a & 'b) & 'd) -> (forall 'e, 'f, 'g. ('b & 'g) -> ('e | 'c) | 'f)
//│    = [Function (anonymous)]

// G7
rec def to_ch n = if n == 0 then z else s (to_ch (n - 1))
//│ to_ch: (int & 'a) -> (forall 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i. (('f | 'e | 'j) -> 'c & 'h & 'i & 'b & 'j -> 'j) -> (forall 'c, 'k, 'l, 'm. ('k & 'l & 'g & 'j) -> ('k | 'm | 'c)) | 'd)
//│      = [Function: to_ch]

:e
// G7A
to_ch: int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.570: 	to_ch: int -> ChurchInt
//│ ║         	^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.244: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║         	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.244: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║         	                        ^^
//│ ╟── from application:
//│ ║  l.516: 	def s n f x = f (n f x)
//│ ╙──       	              ^^^^^^^^^
//│ res: int -> ChurchInt
//│    = [Function: to_ch]

:e
// G8
rec def id1 x = if true then x else id1 id1 x
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c. ?b -> ?c <: ?id1` exceeded recursion depth limit (250)
//│ ║  l.588: 	rec def id1 x = if true then x else id1 id1 x
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. (α1995_2005'' -> α2004_2007'')›  <!<  α1995_2026'
//│ ╟── while constraining:  α2002'  <!<  α1995_2026'
//│ ╟── while constraining:  (α2002',)  <!<  (α1995_2026',)
//│ ╟── while constraining:  (α1995_2026' -> α2004_2028')  <!<  ((α2002',) -> α2003')
//│ ╟── while constraining:  ‹∀ 1. (α1995_2005'' -> α2004_2007'')›  <!<  ((α2002',) -> α2003')
//│ ╟── while constraining:  ‹∀ 1. (α1995_2005'' -> α2004_2007'')›  <!<  α2000'
//│ ╟── while constraining:  ‹∀ 1. (α1995_2005'' -> α2004_2007'')›  <!<  α2003'
//│ ╟── while constraining:  ‹∀ 1. (α1995_2005'' -> α2004_2007'')›  <!<  α2004_2013'
//│ ╟── while constraining:  ‹∀ 1. (α1995_2005'' -> α2004_2007'')›  <!<  α20_2012'
//│ ╟── while constraining:  ‹∀ 1. (α1995_2005'' -> α2004_2007'')›  <!<  α1995_2011'
//│ ╟── while constraining:  ‹∀ 1. (α1995_2005'' -> α2004_2007'')›  <!<  α2002'
//│ ╟── while constraining:  ‹∀ 1. (α1995_2005'' -> α2004_2007'')›  <!<  α1995_2023'
//│ ╟── while constraining:  α2002'  <!<  α1995_2023'
//│ ╟── while constraining:  (α2002',)  <!<  (α1995_2023',)
//│ ╟── while constraining:  (α1995_2023' -> α2004_2025')  <!<  ((α2002',) -> α2003')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 1. (α1995_2005'' -> α2004_2007'')›  <!<  α2004_2013'
//│ ╟── while constraining:  ‹∀ 1. (α1995_2005'' -> α2004_2007'')›  <!<  α20_2012'
//│ ╟── while constraining:  ‹∀ 1. (α1995_2005'' -> α2004_2007'')›  <!<  α1995_2011'
//│ ╟── while constraining:  ‹∀ 1. (α1995_2005'' -> α2004_2007'')›  <!<  α2002'
//│ ╟── while constraining:  ‹∀ 1. (α1995_2005'' -> α2004_2007'')›  <!<  α1995_2014'
//│ ╟── while constraining:  α2002'  <!<  α1995_2014'
//│ ╟── while constraining:  (α2002',)  <!<  (α1995_2014',)
//│ ╟── while constraining:  (α1995_2014' -> α2004_2016')  <!<  ((α2002',) -> α2003')
//│ ╟── while constraining:  ‹∀ 1. (α1995_2005'' -> α2004_2007'')›  <!<  ((α2002',) -> α2003')
//│ ╟── while constraining:  ‹∀ 1. (α1995_2005'' -> α2004_2007'')›  <!<  α2000'
//│ ╟── while constraining:  α2003'  <!<  α2000'
//│ ╟── while constraining:  α2004_2010'  <!<  α2000'
//│ ╟── while constraining:  (α1995_2008' -> α2004_2010')  <!<  ((id11994',) -> α2000')
//│ ╟── while constraining:  ‹∀ 1. (α1995_2005'' -> α2004_2007'')›  <!<  ((id11994',) -> α2000')
//│ ╙── while constraining:  ‹∀ 1. (α1995_2005'' -> α2004_2007'')›  <!<  id11994'
//│ id1: 'id1
//│   where
//│     'id1 :> forall 'a, 'b, 'c. 'a -> 'c
//│     'a <: 'd & 'b & 'c
//│     'c :> 'e
//│     'd :> 'id1
//│        <: 'e
//│     'e :> 'id1
//│        <: 'd -> 'e
//│    = [Function: id11]

:e
// G9
id1 id1
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r, ?s, ?t, ?id1, ?u. ?id1 <: (forall ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1, ?i1, ?id10, ?j1, ?k1, ?l1, ?m1, ?n1, ?o1, ?p1. ?id10) -> ?q1` exceeded recursion depth limit (250)
//│ ║  l.637: 	id1 id1
//│ ║         	^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. id11994'#›  <!<  α2003_2263
//│ ╟── while constraining:  ‹∀ 0. id11994'#›  <!<  α2004_2282
//│ ╟── while constraining:  ‹∀ 0. id11994'#›  <!<  α20_2281
//│ ╟── while constraining:  ‹∀ 0. id11994'#›  <!<  α1995_2280
//│ ╟── while constraining:  ‹∀ 0. id11994'#›  <!<  α2002_2261
//│ ╟── while constraining:  ‹∀ 0. id11994'#›  <!<  α1995_2284
//│ ╟── while constraining:  α2002_2233  <!<  α1995_2284
//│ ╟── while constraining:  (α2002_2233,)  <!<  (α1995_2284,)
//│ ╟── while constraining:  (α1995_2284 -> α2004_2286)  <!<  ((α2002_2233,) -> α2003_2235)
//│ ╟── while constraining:  ‹∀ 1. (α1995_2260'' -> α2004_2262'')›  <!<  ((α2002_2233,) -> α2003_2235)
//│ ╟── while constraining:  id11994_2259#  <!<  ((α2002_2233,) -> α2003_2235)
//│ ╟── while constraining:  ‹∀ 0. id11994'#›  <!<  ((α2002_2233,) -> α2003_2235)
//│ ╟── while constraining:  ‹∀ 0. id11994'#›  <!<  α2000_2236
//│ ╟── while constraining:  ‹∀ 0. id11994'#›  <!<  α2003_2235
//│ ╟── while constraining:  ‹∀ 0. id11994'#›  <!<  α2004_2254
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 1. (α1995_2148'' -> α2004_2150'')›  <!<  ((α2002_2121,) -> α2003_2123)
//│ ╟── while constraining:  id11994_2147#  <!<  ((α2002_2121,) -> α2003_2123)
//│ ╟── while constraining:  ‹∀ 0. id11994'#›  <!<  ((α2002_2121,) -> α2003_2123)
//│ ╟── while constraining:  ‹∀ 0. id11994'#›  <!<  α2000_2124
//│ ╟── while constraining:  ‹∀ 0. id11994'#›  <!<  α2003_2123
//│ ╟── while constraining:  ‹∀ 0. id11994'#›  <!<  α2004_2142
//│ ╟── while constraining:  ‹∀ 0. id11994'#›  <!<  α20_2141
//│ ╟── while constraining:  ‹∀ 0. id11994'#›  <!<  α1995_2140
//│ ╟── while constraining:  ‹∀ 0. id11994'#›  <!<  α2002_2121
//│ ╟── while constraining:  ‹∀ 0. id11994'#›  <!<  α1995_2144
//│ ╟── while constraining:  (‹∀ 0. id11994'#›,)  <!<  (α1995_2144,)
//│ ╟── while constraining:  (α1995_2144 -> α2004_2146)  <!<  ((‹∀ 0. id11994'#›,) -> α2118)
//│ ╟── while constraining:  ‹∀ 1. (α1995_2120'' -> α2004_2122'')›  <!<  ((‹∀ 0. id11994'#›,) -> α2118)
//│ ╟── while constraining:  id11994_2119#  <!<  ((‹∀ 0. id11994'#›,) -> α2118)
//│ ╙── while constraining:  ‹∀ 0. id11994'#›  <!<  ((‹∀ 0. id11994'#›,) -> α2118)
//│ res: error
//│    = [Function: id11]

// Gn
:e
auto auto
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.678: 	auto auto
//│ ║         	^^^^^^^^^
//│ ╟── type `‘a_2339` is not a function
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ║         	                   ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ╙──       	                       ^^^^^^^^
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

// Gn+1
:e
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b. ?a -> ?b <: (forall ?c, ?d. ?c -> ?d) -> ?e` exceeded recursion depth limit (250)
//│ ║  l.694: 	(fun x -> x x) (fun x -> x x)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. (α2346_2348' -> α2347_2349')›  <!<  α2346_2369
//│ ╟── while constraining:  α2346_2367  <!<  α2346_2369
//│ ╟── while constraining:  (α2346_2367,)  <!<  (α2346_2369,)
//│ ╟── while constraining:  (α2346_2369 -> α2347_2370)  <!<  ((α2346_2367,) -> α2347_2368)
//│ ╟── while constraining:  ‹∀ 0. (α2346_2348' -> α2347_2349')›  <!<  ((α2346_2367,) -> α2347_2368)
//│ ╟── while constraining:  ‹∀ 0. (α2346_2348' -> α2347_2349')›  <!<  α2346_2367
//│ ╟── while constraining:  α2346_2365  <!<  α2346_2367
//│ ╟── while constraining:  (α2346_2365,)  <!<  (α2346_2367,)
//│ ╟── while constraining:  (α2346_2367 -> α2347_2368)  <!<  ((α2346_2365,) -> α2347_2366)
//│ ╟── while constraining:  ‹∀ 0. (α2346_2348' -> α2347_2349')›  <!<  ((α2346_2365,) -> α2347_2366)
//│ ╟── while constraining:  ‹∀ 0. (α2346_2348' -> α2347_2349')›  <!<  α2346_2365
//│ ╟── while constraining:  α2346_2363  <!<  α2346_2365
//│ ╟── while constraining:  (α2346_2363,)  <!<  (α2346_2365,)
//│ ╟── while constraining:  (α2346_2365 -> α2347_2366)  <!<  ((α2346_2363,) -> α2347_2364)
//│ ╟── while constraining:  ‹∀ 0. (α2346_2348' -> α2347_2349')›  <!<  ((α2346_2363,) -> α2347_2364)
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 0. (α2346_2348' -> α2347_2349')›  <!<  ((α2346_2355,) -> α2347_2356)
//│ ╟── while constraining:  ‹∀ 0. (α2346_2348' -> α2347_2349')›  <!<  α2346_2355
//│ ╟── while constraining:  α2346_2353  <!<  α2346_2355
//│ ╟── while constraining:  (α2346_2353,)  <!<  (α2346_2355,)
//│ ╟── while constraining:  (α2346_2355 -> α2347_2356)  <!<  ((α2346_2353,) -> α2347_2354)
//│ ╟── while constraining:  ‹∀ 0. (α2346_2348' -> α2347_2349')›  <!<  ((α2346_2353,) -> α2347_2354)
//│ ╟── while constraining:  ‹∀ 0. (α2346_2348' -> α2347_2349')›  <!<  α2346_2353
//│ ╟── while constraining:  α2342_2351  <!<  α2346_2353
//│ ╟── while constraining:  (α2342_2351,)  <!<  (α2346_2353,)
//│ ╟── while constraining:  (α2346_2353 -> α2347_2354)  <!<  ((α2342_2351,) -> α2343_2352)
//│ ╟── while constraining:  ‹∀ 0. (α2346_2348' -> α2347_2349')›  <!<  ((α2342_2351,) -> α2343_2352)
//│ ╟── while constraining:  ‹∀ 0. (α2346_2348' -> α2347_2349')›  <!<  α2342_2351
//│ ╟── while constraining:  (‹∀ 0. (α2346_2348' -> α2347_2349')›,)  <!<  (α2342_2351,)
//│ ╟── while constraining:  (α2342_2351 -> α2343_2352)  <!<  ((‹∀ 0. (α2346_2348' -> α2347_2349')›,) -> α2350)
//│ ╙── while constraining:  ‹∀ 0. (α2342_2344' -> α2343_2345')›  <!<  ((‹∀ 0. (α2346_2348' -> α2347_2349')›,) -> α2350)
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded



// ===========================================================
// ======================== SuperF +D ========================
// ===========================================================

:DistributeForalls


// ============ A. polymorphic instantiation ============

// A1
fun x -> fun y -> y
//│ res: anything -> (forall 'a. 'a -> 'a)
//│    = [Function: res]

// A2
choose id
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// A3
choose nil ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// A4
fun x -> x x
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: res]

// A5
id auto
//│ res: (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│    = [Function: auto]

// A6
id auto_
//│ res: (forall 'a. 'a -> 'a) -> 'b -> 'b
//│    = [Function: auto_]

// A7
choose id auto
//│ res: (forall 'a. 'a -> 'a & 'a0) -> (forall 'b. 'a0 | 'b -> 'b)
//│    = [Function: id1]

// A8
:ns
choose id auto_
//│ res: 'c
//│   where
//│     'c :> (forall 'a. 'a -> 'a) | (forall 'b. (forall 'a0. 'a0 -> 'a0) -> 'b -> 'b)
//│    = [Function: id1]

// A9
:ng
f (choose id) ids
//│ res: 'a -> 'a

// A10
poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// A11
poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]

// A12
id poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]


// ============ B. inference of polymorphic arguments ============

// B1
fun f -> (f 1, f true)
//│ res: (true -> 'a & 1 -> 'b) -> ('b, 'a,)
//│    = [Function: res]

// B2
fun xs -> poly (head xs)
//│ res: List[forall 'a. 'a -> 'a] -> (int, bool,)
//│    = [Function: res]


// ============ C. functions on polymorphic lists ============

// C1
length ids
//│ res: int
//│    = 1

// C2
tail ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// C3
head ids
//│ res: 'a -> 'a
//│    = [Function: id1]

// C4
single id
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// C5
cons id ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C6
cons (fun x -> x) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function (anonymous)],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C7
append (single inc) (single id)
//│ res: List[int -> int]
//│    = Cons {
//│        head: [Function: succ],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C8
:ng
g (single id) ids
//│ res: 'a -> 'a

// C9
map poly (single id)
//│ res: List[(int, bool,)]
//│    = Cons { head: [ 1, true ], tail: Nil {} }

// C10
map head (single ids)
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }


// ============ D. application functions ============

// D1
app poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// D2
revapp id poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// D3
:ng
runST argST
//│ res: int

// D4
:ng
app runST argST
//│ res: int

// D5
:ng
revapp argST runST
//│ res: int


// ============ E. η-expansion ============

// E1
:ng
k h lst
//│ res: int -> (forall 'a, 'a0. ('a & 'a0) -> ('a | 'a0))

// E2
:ng
k (fun x -> h x) lst
//│ res: int -> (forall 'a, 'a0. ('a & 'a0) -> ('a | 'a0))

// E3
:ng
r (fun x -> fun y -> y)
//│ res: int


// ============ F. FreezeML Additions ============

// F5
auto id
//│ res: 'b -> 'b
//│    = [Function: id1]

// F6
cons (head ids) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// F7
(head ids) 3
//│ res: 3
//│    = 3

// F8
choose (head ids)
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// F9
let f = revapp id in f poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// F10
choose id (fun x -> auto_ x)
//│ res: (forall 'a. 'a -> 'a & 'a0) -> (forall 'a0, 'b. 'a0 | 'b -> 'b)
//│    = [Function: id1]


// ============ G. SuperF Additions ============

// G1
def z f x = x
//│ z: 'a -> (forall 'b. 'b -> 'b)
//│  = [Function: z1]

// G2
def s n f x = f (n f x)
//│ s: ('a -> ('b -> 'c & 'd) & 'e) -> (forall 'f, 'g, 'h. (('c | 'g) -> 'h & 'a & 'f) -> (forall 'i, 'j. ('b & 'i) -> ('j | 'h)))
//│  = [Function: s1]

// G3
n3 = s (s (s z))
//│ n3: ((forall 'a. 'a | 'b | 'c) -> 'd & (forall 'e. 'e | 'f) -> 'c & 'g -> 'f & 'h) -> (forall 'i, 'j. ('g & 'i) -> ('j | 'd))
//│   = [Function (anonymous)]

// G1A
z: ChurchInt
//│ res: ChurchInt
//│    = [Function: z1]

// G2A
s: ChurchInt -> ChurchInt
//│ res: ChurchInt -> ChurchInt
//│    = [Function: s1]

// G3A
n3: ChurchInt
//│ res: ChurchInt
//│    = [Function (anonymous)]

// G4
fst (fst (fst (n3 (fun x -> (x, 0)) 1)))
//│ res: 1
//│    = 1

(succ (succ zero)) (succ (succ zero))
//│ res: ('M -> 'M) -> 'M -> 'M
//│    = [Function (anonymous)]

(s (s z)) (s (s z))
//│ res: ((forall 'a, 'b. 'a | 'b | 'c | 'd) -> 'd & 'e -> 'c & 'f) -> (forall 'g, 'h, 'i. ('e & 'i) -> (forall 'j. 'g | 'j | 'd) | 'h)
//│   where
//│     'e :> forall 'a, 'b. 'a | 'b | 'c | 'd
//│    = [Function (anonymous)]

// G7
rec def to_ch n = if n == 0 then z else s (to_ch (n - 1))
//│ to_ch: (int & 'a) -> (forall 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i. ((forall 'j. 'd | 'j | 'f | 'k) -> 'i & 'h & 'b & 'e & (forall 'j. 'j | 'k) -> 'k) -> (forall 'l, 'm, 'n, 'i. ('l & 'm & 'c & 'k) -> ('l | 'n | 'i)) | 'g)
//│      = [Function: to_ch1]

// G7A
to_ch: int -> ChurchInt
//│ res: int -> ChurchInt
//│    = [Function: to_ch1]

:e
// G8
rec def id1 x = if true then x else id1 id1 x
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c. ?a -> ?b <: ?id1` exceeded recursion depth limit (250)
//│ ║  l.1025: 	rec def id1 x = if true then x else id1 id1 x
//│ ║          	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. (α3365_3375'' -> α3374_3377'')›  <!<  α3365_3396'
//│ ╟── while constraining:  α3372'  <!<  α3365_3396'
//│ ╟── while constraining:  (α3372',)  <!<  (α3365_3396',)
//│ ╟── while constraining:  (α3365_3396' -> α3374_3398')  <!<  ((α3372',) -> α3373')
//│ ╟── while constraining:  ‹∀ 1. (α3365_3375'' -> α3374_3377'')›  <!<  ((α3372',) -> α3373')
//│ ╟── while constraining:  ‹∀ 1. (α3365_3375'' -> α3374_3377'')›  <!<  α3370'
//│ ╟── while constraining:  ‹∀ 1. (α3365_3375'' -> α3374_3377'')›  <!<  α3373'
//│ ╟── while constraining:  ‹∀ 1. (α3365_3375'' -> α3374_3377'')›  <!<  α3374_3383'
//│ ╟── while constraining:  ‹∀ 1. (α3365_3375'' -> α3374_3377'')›  <!<  α20_3382'
//│ ╟── while constraining:  ‹∀ 1. (α3365_3375'' -> α3374_3377'')›  <!<  α3365_3381'
//│ ╟── while constraining:  ‹∀ 1. (α3365_3375'' -> α3374_3377'')›  <!<  α3372'
//│ ╟── while constraining:  ‹∀ 1. (α3365_3375'' -> α3374_3377'')›  <!<  α3365_3393'
//│ ╟── while constraining:  α3372'  <!<  α3365_3393'
//│ ╟── while constraining:  (α3372',)  <!<  (α3365_3393',)
//│ ╟── while constraining:  (α3365_3393' -> α3374_3395')  <!<  ((α3372',) -> α3373')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 1. (α3365_3375'' -> α3374_3377'')›  <!<  α3374_3383'
//│ ╟── while constraining:  ‹∀ 1. (α3365_3375'' -> α3374_3377'')›  <!<  α20_3382'
//│ ╟── while constraining:  ‹∀ 1. (α3365_3375'' -> α3374_3377'')›  <!<  α3365_3381'
//│ ╟── while constraining:  ‹∀ 1. (α3365_3375'' -> α3374_3377'')›  <!<  α3372'
//│ ╟── while constraining:  ‹∀ 1. (α3365_3375'' -> α3374_3377'')›  <!<  α3365_3384'
//│ ╟── while constraining:  α3372'  <!<  α3365_3384'
//│ ╟── while constraining:  (α3372',)  <!<  (α3365_3384',)
//│ ╟── while constraining:  (α3365_3384' -> α3374_3386')  <!<  ((α3372',) -> α3373')
//│ ╟── while constraining:  ‹∀ 1. (α3365_3375'' -> α3374_3377'')›  <!<  ((α3372',) -> α3373')
//│ ╟── while constraining:  ‹∀ 1. (α3365_3375'' -> α3374_3377'')›  <!<  α3370'
//│ ╟── while constraining:  α3373'  <!<  α3370'
//│ ╟── while constraining:  α3374_3380'  <!<  α3370'
//│ ╟── while constraining:  (α3365_3378' -> α3374_3380')  <!<  ((id13364',) -> α3370')
//│ ╟── while constraining:  ‹∀ 1. (α3365_3375'' -> α3374_3377'')›  <!<  ((id13364',) -> α3370')
//│ ╙── while constraining:  ‹∀ 1. (α3365_3375'' -> α3374_3377'')›  <!<  id13364'
//│ id1: 'id1
//│   where
//│     'id1 :> forall 'a, 'b, 'c. 'a -> 'c
//│     'a <: 'd & 'b & 'c
//│     'c :> 'e
//│     'd :> 'id1
//│        <: 'e
//│     'e :> 'id1
//│        <: 'd -> 'e
//│    = [Function: id12]

:e
// G9
id1 id1
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?id1, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r, ?s, ?t, ?u. ?id1 <: (forall ?v, ?w, ?x, ?y, ?z, ?id10, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1, ?i1, ?j1, ?k1, ?l1, ?m1, ?n1, ?o1, ?p1. ?id10) -> ?q1` exceeded recursion depth limit (250)
//│ ║  l.1074: 	id1 id1
//│ ║          	^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. id13364'#›  <!<  α3373_3633
//│ ╟── while constraining:  ‹∀ 0. id13364'#›  <!<  α3374_3652
//│ ╟── while constraining:  ‹∀ 0. id13364'#›  <!<  α20_3651
//│ ╟── while constraining:  ‹∀ 0. id13364'#›  <!<  α3365_3650
//│ ╟── while constraining:  ‹∀ 0. id13364'#›  <!<  α3372_3631
//│ ╟── while constraining:  ‹∀ 0. id13364'#›  <!<  α3365_3654
//│ ╟── while constraining:  α3372_3603  <!<  α3365_3654
//│ ╟── while constraining:  (α3372_3603,)  <!<  (α3365_3654,)
//│ ╟── while constraining:  (α3365_3654 -> α3374_3656)  <!<  ((α3372_3603,) -> α3373_3605)
//│ ╟── while constraining:  ‹∀ 1. (α3365_3630'' -> α3374_3632'')›  <!<  ((α3372_3603,) -> α3373_3605)
//│ ╟── while constraining:  id13364_3629#  <!<  ((α3372_3603,) -> α3373_3605)
//│ ╟── while constraining:  ‹∀ 0. id13364'#›  <!<  ((α3372_3603,) -> α3373_3605)
//│ ╟── while constraining:  ‹∀ 0. id13364'#›  <!<  α3370_3606
//│ ╟── while constraining:  ‹∀ 0. id13364'#›  <!<  α3373_3605
//│ ╟── while constraining:  ‹∀ 0. id13364'#›  <!<  α3374_3624
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 1. (α3365_3518'' -> α3374_3520'')›  <!<  ((α3372_3491,) -> α3373_3493)
//│ ╟── while constraining:  id13364_3517#  <!<  ((α3372_3491,) -> α3373_3493)
//│ ╟── while constraining:  ‹∀ 0. id13364'#›  <!<  ((α3372_3491,) -> α3373_3493)
//│ ╟── while constraining:  ‹∀ 0. id13364'#›  <!<  α3370_3494
//│ ╟── while constraining:  ‹∀ 0. id13364'#›  <!<  α3373_3493
//│ ╟── while constraining:  ‹∀ 0. id13364'#›  <!<  α3374_3512
//│ ╟── while constraining:  ‹∀ 0. id13364'#›  <!<  α20_3511
//│ ╟── while constraining:  ‹∀ 0. id13364'#›  <!<  α3365_3510
//│ ╟── while constraining:  ‹∀ 0. id13364'#›  <!<  α3372_3491
//│ ╟── while constraining:  ‹∀ 0. id13364'#›  <!<  α3365_3514
//│ ╟── while constraining:  (‹∀ 0. id13364'#›,)  <!<  (α3365_3514,)
//│ ╟── while constraining:  (α3365_3514 -> α3374_3516)  <!<  ((‹∀ 0. id13364'#›,) -> α3488)
//│ ╟── while constraining:  ‹∀ 1. (α3365_3490'' -> α3374_3492'')›  <!<  ((‹∀ 0. id13364'#›,) -> α3488)
//│ ╟── while constraining:  id13364_3489#  <!<  ((‹∀ 0. id13364'#›,) -> α3488)
//│ ╙── while constraining:  ‹∀ 0. id13364'#›  <!<  ((‹∀ 0. id13364'#›,) -> α3488)
//│ res: error
//│    = [Function: id12]

// Gn
:e
auto auto
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1115: 	auto auto
//│ ║          	^^^^^^^^^
//│ ╟── type `‘a_3709` is not a function
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ║         	                   ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ╙──       	                       ^^^^^^^^
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

// Gn+1
:e
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b. ?b -> ?a <: (forall ?c, ?d. ?d -> ?c) -> ?e` exceeded recursion depth limit (250)
//│ ║  l.1131: 	(fun x -> x x) (fun x -> x x)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. (α3716_3718' -> α3717_3719')›  <!<  α3716_3739
//│ ╟── while constraining:  α3716_3737  <!<  α3716_3739
//│ ╟── while constraining:  (α3716_3737,)  <!<  (α3716_3739,)
//│ ╟── while constraining:  (α3716_3739 -> α3717_3740)  <!<  ((α3716_3737,) -> α3717_3738)
//│ ╟── while constraining:  ‹∀ 0. (α3716_3718' -> α3717_3719')›  <!<  ((α3716_3737,) -> α3717_3738)
//│ ╟── while constraining:  ‹∀ 0. (α3716_3718' -> α3717_3719')›  <!<  α3716_3737
//│ ╟── while constraining:  α3716_3735  <!<  α3716_3737
//│ ╟── while constraining:  (α3716_3735,)  <!<  (α3716_3737,)
//│ ╟── while constraining:  (α3716_3737 -> α3717_3738)  <!<  ((α3716_3735,) -> α3717_3736)
//│ ╟── while constraining:  ‹∀ 0. (α3716_3718' -> α3717_3719')›  <!<  ((α3716_3735,) -> α3717_3736)
//│ ╟── while constraining:  ‹∀ 0. (α3716_3718' -> α3717_3719')›  <!<  α3716_3735
//│ ╟── while constraining:  α3716_3733  <!<  α3716_3735
//│ ╟── while constraining:  (α3716_3733,)  <!<  (α3716_3735,)
//│ ╟── while constraining:  (α3716_3735 -> α3717_3736)  <!<  ((α3716_3733,) -> α3717_3734)
//│ ╟── while constraining:  ‹∀ 0. (α3716_3718' -> α3717_3719')›  <!<  ((α3716_3733,) -> α3717_3734)
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 0. (α3716_3718' -> α3717_3719')›  <!<  ((α3716_3725,) -> α3717_3726)
//│ ╟── while constraining:  ‹∀ 0. (α3716_3718' -> α3717_3719')›  <!<  α3716_3725
//│ ╟── while constraining:  α3716_3723  <!<  α3716_3725
//│ ╟── while constraining:  (α3716_3723,)  <!<  (α3716_3725,)
//│ ╟── while constraining:  (α3716_3725 -> α3717_3726)  <!<  ((α3716_3723,) -> α3717_3724)
//│ ╟── while constraining:  ‹∀ 0. (α3716_3718' -> α3717_3719')›  <!<  ((α3716_3723,) -> α3717_3724)
//│ ╟── while constraining:  ‹∀ 0. (α3716_3718' -> α3717_3719')›  <!<  α3716_3723
//│ ╟── while constraining:  α3712_3721  <!<  α3716_3723
//│ ╟── while constraining:  (α3712_3721,)  <!<  (α3716_3723,)
//│ ╟── while constraining:  (α3716_3723 -> α3717_3724)  <!<  ((α3712_3721,) -> α3713_3722)
//│ ╟── while constraining:  ‹∀ 0. (α3716_3718' -> α3717_3719')›  <!<  ((α3712_3721,) -> α3713_3722)
//│ ╟── while constraining:  ‹∀ 0. (α3716_3718' -> α3717_3719')›  <!<  α3712_3721
//│ ╟── while constraining:  (‹∀ 0. (α3716_3718' -> α3717_3719')›,)  <!<  (α3712_3721,)
//│ ╟── while constraining:  (α3712_3721 -> α3713_3722)  <!<  ((‹∀ 0. (α3716_3718' -> α3717_3719')›,) -> α3720)
//│ ╙── while constraining:  ‹∀ 0. (α3712_3714' -> α3713_3715')›  <!<  ((‹∀ 0. (α3716_3718' -> α3717_3719')›,) -> α3720)
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded



// ==============================================================
// ======================== SuperF +D+CC ========================
// ==============================================================

:CycleCheck


// ============ A. polymorphic instantiation ============

// A1
fun x -> fun y -> y
//│ res: anything -> (forall 'a. 'a -> 'a)
//│    = [Function: res]

// A2
choose id
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// A3
choose nil ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// A4
fun x -> x x
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: res]

// A5
id auto
//│ res: (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│    = [Function: auto]

// A6
id auto_
//│ res: (forall 'a. 'a -> 'a) -> 'b -> 'b
//│    = [Function: auto_]

// A7
choose id auto
//│ res: (forall 'a. 'a -> 'a & 'a0) -> (forall 'b. 'a0 | 'b -> 'b)
//│    = [Function: id1]

// A8
:ns
choose id auto_
//│ res: 'c
//│   where
//│     'c :> (forall 'a. 'a -> 'a) | (forall 'b. (forall 'a0. 'a0 -> 'a0) -> 'b -> 'b)
//│    = [Function: id1]

// A9
:ng
f (choose id) ids
//│ res: 'a -> 'a

// A10
poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// A11
poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]

// A12
id poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]


// ============ B. inference of polymorphic arguments ============

// B1
fun f -> (f 1, f true)
//│ res: (true -> 'a & 1 -> 'b) -> ('b, 'a,)
//│    = [Function: res]

// B2
fun xs -> poly (head xs)
//│ res: List[forall 'a. 'a -> 'a] -> (int, bool,)
//│    = [Function: res]


// ============ C. functions on polymorphic lists ============

// C1
length ids
//│ res: int
//│    = 1

// C2
tail ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// C3
head ids
//│ res: 'a -> 'a
//│    = [Function: id1]

// C4
single id
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// C5
cons id ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C6
cons (fun x -> x) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function (anonymous)],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C7
append (single inc) (single id)
//│ res: List[int -> int]
//│    = Cons {
//│        head: [Function: succ],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C8
:ng
g (single id) ids
//│ res: 'a -> 'a

// C9
map poly (single id)
//│ res: List[(int, bool,)]
//│    = Cons { head: [ 1, true ], tail: Nil {} }

// C10
map head (single ids)
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }


// ============ D. application functions ============

// D1
app poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// D2
revapp id poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// D3
:ng
runST argST
//│ res: int

// D4
:ng
app runST argST
//│ res: int

// D5
:ng
revapp argST runST
//│ res: int


// ============ E. η-expansion ============

// E1
:ng
k h lst
//│ res: int -> (forall 'a, 'a0. ('a & 'a0) -> ('a | 'a0))

// E2
:ng
k (fun x -> h x) lst
//│ res: int -> (forall 'a, 'a0. ('a & 'a0) -> ('a | 'a0))

// E3
:ng
r (fun x -> fun y -> y)
//│ res: int


// ============ F. FreezeML Additions ============

// F5
auto id
//│ res: 'b -> 'b
//│    = [Function: id1]

// F6
cons (head ids) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// F7
(head ids) 3
//│ res: 3
//│    = 3

// F8
choose (head ids)
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// F9
let f = revapp id in f poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// F10
choose id (fun x -> auto_ x)
//│ res: (forall 'a. 'a -> 'a & 'a0) -> (forall 'a0, 'b. 'a0 | 'b -> 'b)
//│    = [Function: id1]


// ============ G. SuperF Additions ============

// G1
def z f x = x
//│ z: 'a -> (forall 'b. 'b -> 'b)
//│  = [Function: z2]

// G2
def s n f x = f (n f x)
//│ s: ('a -> ('b -> 'c & 'd) & 'e) -> (forall 'f, 'g, 'h. (('c | 'f) -> 'g & 'a & 'h) -> (forall 'i, 'j. ('b & 'i) -> ('j | 'g)))
//│  = [Function: s2]

// G3
n3 = s (s (s z))
//│ n3: ((forall 'a. 'a | 'b | 'c) -> 'd & (forall 'e. 'e | 'f) -> 'c & 'g -> 'f & 'h) -> (forall 'i, 'j. ('g & 'i) -> ('j | 'd))
//│   = [Function (anonymous)]

// G1A
z: ChurchInt
//│ res: ChurchInt
//│    = [Function: z2]

// G2A
s: ChurchInt -> ChurchInt
//│ res: ChurchInt -> ChurchInt
//│    = [Function: s2]

// G3A
n3: ChurchInt
//│ res: ChurchInt
//│    = [Function (anonymous)]

// G4
fst (fst (fst (n3 (fun x -> (x, 0)) 1)))
//│ res: 1
//│    = 1

(succ (succ zero)) (succ (succ zero))
//│ res: ('M -> 'M) -> 'M -> 'M
//│    = [Function (anonymous)]

:e
(s (s z)) (s (s z))
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.1445: 	(s (s z)) (s (s z))
//│ ║          	^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 4. α4123_4464'''''›  <:  α4116_4485    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 4. α4123_4464'''''›  <:  α4116_4482''''
//│ res: error
//│    = [Function (anonymous)]

// G7
rec def to_ch n = if n == 0 then z else s (to_ch (n - 1))
//│ to_ch: (int & 'a) -> (forall 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i. ((forall 'j. 'g | 'j | 'b | 'k) -> 'i & 'f & 'd & 'c & (forall 'j. 'j | 'k) -> 'k) -> (forall 'i, 'l, 'm, 'n. ('l & 'm & 'e & 'k) -> ('l | 'n | 'i)) | 'h)
//│      = [Function: to_ch2]

// G7A
to_ch: int -> ChurchInt
//│ res: int -> ChurchInt
//│    = [Function: to_ch2]

:e
// G8
rec def id1 x = if true then x else id1 id1 x
//│ ╔══[ERROR] Cyclic-looking constraint while typing binding of lambda expression; a type annotation may be required
//│ ║  l.1467: 	rec def id1 x = if true then x else id1 id1 x
//│ ║          	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. (α4683_4693'' -> α4692_4695'')›  <:  α4683_4699'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. (α4683_4693'' -> α4692_4695'')›  <:  α4683_4693''
//│ id1: 'id1
//│   where
//│     'id1 :> forall 'a, 'b, 'c. 'a -> 'c
//│     'a <: 'd & 'b & 'c
//│     'c :> 'e
//│     'd :> 'id1
//│        <: 'e
//│     'e :> 'id1
//│        <: 'd -> 'e
//│    = [Function: id13]

:e
// G9
id1 id1
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.1487: 	id1 id1
//│ ║          	^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. id14682'#›  <:  α4690_4749    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. id14682'#›  <:  α4690'
//│ res: error
//│    = [Function: id13]

// Gn
:e
auto auto
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1499: 	auto auto
//│ ║          	^^^^^^^^^
//│ ╟── type `‘a_4765` is not a function
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ║         	                   ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ╙──       	                       ^^^^^^^^
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

// Gn+1
:e
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.1515: 	(fun x -> x x) (fun x -> x x)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. (α4772_4774' -> α4773_4775')›  <:  α4772_4781    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. (α4772_4774' -> α4773_4775')›  <:  α4772_4774'
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded



// =================================================================
// ======================== SuperF +D+CC+RT ========================
// =================================================================

:RecursiveTypes


// ============ A. polymorphic instantiation ============

// A1
fun x -> fun y -> y
//│ res: anything -> (forall 'a. 'a -> 'a)
//│    = [Function: res]

// A2
choose id
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// A3
choose nil ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// A4
fun x -> x x
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: res]

// A5
id auto
//│ res: (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│    = [Function: auto]

// A6
id auto_
//│ res: (forall 'a. 'a -> 'a) -> 'b -> 'b
//│    = [Function: auto_]

// A7
choose id auto
//│ res: (forall 'a. 'a -> 'a & 'a0) -> (forall 'b. 'a0 | 'b -> 'b)
//│    = [Function: id1]

// A8
:ns
choose id auto_
//│ res: 'c
//│   where
//│     'c :> (forall 'a. 'a -> 'a) | (forall 'b. (forall 'a0. 'a0 -> 'a0) -> 'b -> 'b)
//│    = [Function: id1]

// A9
:ng
f (choose id) ids
//│ res: 'a -> 'a

// A10
poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// A11
poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]

// A12
id poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]


// ============ B. inference of polymorphic arguments ============

// B1
fun f -> (f 1, f true)
//│ res: (true -> 'a & 1 -> 'b) -> ('b, 'a,)
//│    = [Function: res]

// B2
fun xs -> poly (head xs)
//│ res: List[forall 'a. 'a -> 'a] -> (int, bool,)
//│    = [Function: res]


// ============ C. functions on polymorphic lists ============

// C1
length ids
//│ res: int
//│    = 1

// C2
tail ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// C3
head ids
//│ res: 'a -> 'a
//│    = [Function: id1]

// C4
single id
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// C5
cons id ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C6
cons (fun x -> x) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function (anonymous)],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C7
append (single inc) (single id)
//│ res: List[int -> int]
//│    = Cons {
//│        head: [Function: succ],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C8
:ng
g (single id) ids
//│ res: 'a -> 'a

// C9
map poly (single id)
//│ res: List[(int, bool,)]
//│    = Cons { head: [ 1, true ], tail: Nil {} }

// C10
map head (single ids)
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }


// ============ D. application functions ============

// D1
app poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// D2
revapp id poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// D3
:ng
runST argST
//│ res: int

// D4
:ng
app runST argST
//│ res: int

// D5
:ng
revapp argST runST
//│ res: int


// ============ E. η-expansion ============

// E1
:ng
k h lst
//│ res: int -> (forall 'a, 'a0. ('a & 'a0) -> ('a | 'a0))

// E2
:ng
k (fun x -> h x) lst
//│ res: int -> (forall 'a, 'a0. ('a & 'a0) -> ('a | 'a0))

// E3
:ng
r (fun x -> fun y -> y)
//│ res: int


// ============ F. FreezeML Additions ============

// F5
auto id
//│ res: 'b -> 'b
//│    = [Function: id1]

// F6
cons (head ids) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// F7
(head ids) 3
//│ res: 3
//│    = 3

// F8
choose (head ids)
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// F9
let f = revapp id in f poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// F10
choose id (fun x -> auto_ x)
//│ res: (forall 'a. 'a -> 'a & 'a0) -> (forall 'a0, 'b. 'a0 | 'b -> 'b)
//│    = [Function: id1]


// ============ G. SuperF Additions ============

// G1
def z f x = x
//│ z: 'a -> (forall 'b. 'b -> 'b)
//│  = [Function: z3]

// G2
def s n f x = f (n f x)
//│ s: ('a -> ('b -> 'c & 'd) & 'e) -> (forall 'f, 'g, 'h. (('c | 'f) -> 'g & 'a & 'h) -> (forall 'i, 'j. ('b & 'i) -> ('j | 'g)))
//│  = [Function: s3]

// G3
n3 = s (s (s z))
//│ n3: ((forall 'a. 'a | 'b | 'c) -> 'd & (forall 'e. 'e | 'f) -> 'c & 'g -> 'f & 'h) -> (forall 'i, 'j. ('g & 'i) -> ('j | 'd))
//│   = [Function (anonymous)]

// G1A
z: ChurchInt
//│ res: ChurchInt
//│    = [Function: z3]

// G2A
s: ChurchInt -> ChurchInt
//│ res: ChurchInt -> ChurchInt
//│    = [Function: s3]

// G3A
n3: ChurchInt
//│ res: ChurchInt
//│    = [Function (anonymous)]

// G4
fst (fst (fst (n3 (fun x -> (x, 0)) 1)))
//│ res: 1
//│    = 1

(succ (succ zero)) (succ (succ zero))
//│ res: ('M -> 'M) -> 'M -> 'M
//│    = [Function (anonymous)]

:e
(s (s z)) (s (s z))
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.1800: 	(s (s z)) (s (s z))
//│ ║          	^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 4. α5163_5504'''''›  <:  α5156_5525    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 4. α5163_5504'''''›  <:  α5156_5522''''
//│ res: error
//│    = [Function (anonymous)]

// G7
rec def to_ch n = if n == 0 then z else s (to_ch (n - 1))
//│ to_ch: (int & 'a) -> (forall 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i. ((forall 'j. 'g | 'j | 'c | 'k) -> 'b & 'e & 'h & 'i & (forall 'j. 'j | 'k) -> 'k) -> (forall 'b, 'l, 'm, 'n. ('l & 'm & 'f & 'k) -> ('l | 'n | 'b)) | 'd)
//│      = [Function: to_ch3]

// G7A
to_ch: int -> ChurchInt
//│ res: int -> ChurchInt
//│    = [Function: to_ch3]

// G8
rec def id1 x = if true then x else id1 id1 x
//│ id1: 'id1
//│   where
//│     'id1 :> forall 'a, 'b, 'c. 'c -> 'b
//│     'c <: 'd & 'a & 'b
//│     'b :> 'e
//│     'd :> 'id1
//│        <: 'e
//│     'e :> 'id1
//│        <: 'd -> 'e
//│    = [Function: id14]

:e
// G9
id1 id1
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.1835: 	id1 id1
//│ ║          	^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. id15721'#›  <:  α5729_5779    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. id15721'#›  <:  α5729'
//│ res: error
//│    = [Function: id14]

// Gn
:e
auto auto
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1847: 	auto auto
//│ ║          	^^^^^^^^^
//│ ╟── type `‘a_5792` is not a function
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ║         	                   ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ╙──       	                       ^^^^^^^^
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

// Gn+1
:e
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.1863: 	(fun x -> x x) (fun x -> x x)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. (α5799_5801' -> α5800_5802')›  <:  α5799_5808    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. (α5799_5801' -> α5800_5802')›  <:  α5799_5801'
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded


