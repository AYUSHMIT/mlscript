
:GeneralizeCurriedFunctions
:NoConstrainedTypes
:DontDistributeForalls
:NoCycleCheck
:NoRecursiveTypes


// ============ Dummy classes to represent the types in the examples ============

class List[a]
  method Head: a
  method Tail: List[a]
//│ Defined class List[+a]
//│ Declared List.Head: List['a] -> 'a
//│ Declared List.Tail: List['a] -> List['a]

class Nil[a]: List[a]
  method Head = error
  method Tail = this
//│ Defined class Nil[+a]
//│ Defined Nil.Head: Nil[?] -> nothing
//│ Defined Nil.Tail: (Nil['a] & 'this) -> (Nil['a] & 'this)

class Cons[a]: List[a] & { head: a; tail: List[a] }
  method Head = this.head
  method Tail = this.tail
//│ Defined class Cons[+a]
//│ Defined Cons.Head: Cons['a] -> 'a
//│ Defined Cons.Tail: Cons['a] -> List['a]

class ST[S, A]
  method Inv_S: S -> S
  method Cov_A: A
//│ Defined class ST[=S, +A]
//│ Declared ST.Inv_S: ST['S, ?] -> 'S -> 'S
//│ Declared ST.Cov_A: ST['S, 'A] -> 'A


// ============ Type signatures for functions used in the examples ============

def head: List['a] -> 'a
def head l = l.Head
//│ head: List['a] -> 'a
//│     = <missing implementation>
//│ List['a] -> 'a
//│   <:  head:
//│ List['a] -> 'a
//│     = [Function: head]

def tail: List['a] -> List['a]
def tail l = l.Tail
//│ tail: List['a] -> List['a]
//│     = <missing implementation>
//│ List['a] -> List['a]
//│   <:  tail:
//│ List['a] -> List['a]
//│     = [Function: tail]

// Used to represent `[]` in the papers
def nil: List['a]
nil = Nil {}
//│ nil: List[nothing]
//│    = <missing implementation>
//│ Nil[nothing]
//│   <:  nil:
//│ List[nothing]
//│    = Nil {}

def cons: 'a -> List['a] -> List['a]
def cons head tail = Cons { head; tail }
//│ cons: 'a -> List['a] -> List['a]
//│     = <missing implementation>
//│ 'b -> (forall 'a, 'tail. (List['a] & 'tail) -> (Cons['a | 'b] with {head: 'b, tail: 'tail}))
//│   <:  cons:
//│ 'a -> List['a] -> List['a]
//│     = [Function: cons]

def is_empty: List['a] -> bool
def is_empty l = eq l nil
//│ is_empty: List[?] -> bool
//│         = <missing implementation>
//│ anything -> bool
//│   <:  is_empty:
//│ List[?] -> bool
//│         = [Function: is_empty]

def single: 'a -> List['a]
def single x = cons x nil
//│ single: 'a -> List['a]
//│       = <missing implementation>
//│ 'a -> List['a]
//│   <:  single:
//│ 'a -> List['a]
//│       = [Function: single]

def append: List['a] -> List['a] -> List['a]
rec def append l1 l2 =
  if is_empty l1 then l2
  else cons (head l1) (append (tail l1) l2)
//│ append: List['a] -> List['a] -> List['a]
//│       = <missing implementation>
//│ List[?] -> (forall 'b. (List['a] & 'b) -> (List['a] | 'b))
//│   <:  append:
//│ List['a] -> List['a] -> List['a]
//│       = [Function: append]

def length: List['a] -> int
rec def length l =
  if is_empty l then 0
  else succ (length (tail l))
//│ length: List[?] -> int
//│       = <missing implementation>
//│ List[?] -> int
//│   <:  length:
//│ List[?] -> int
//│       = [Function: length]

def id: 'a -> 'a
def id x = x
//│ id: 'a -> 'a
//│   = <missing implementation>
//│ 'a -> 'a
//│   <:  id:
//│ 'a -> 'a
//│   = [Function: id1]

def ids: List[forall 'a. 'a -> 'a]
def ids = single id
//│ ids: List[forall 'a. 'a -> 'a]
//│    = <missing implementation>
//│ List[forall 'a. 'a -> 'a]
//│   <:  ids:
//│ List[forall 'a. 'a -> 'a]
//│    = [Function: ids]

def inc: int -> int
def inc = succ
//│ inc: int -> int
//│    = <missing implementation>
//│ int -> int
//│   <:  inc:
//│ int -> int
//│    = [Function: inc]

def choose: 'a -> 'a -> 'a
def choose x y = if true then x else y
//│ choose: 'a -> 'a -> 'a
//│       = <missing implementation>
//│ 'a -> (forall 'b. 'b -> ('a | 'b))
//│   <:  choose:
//│ 'a -> 'a -> 'a
//│       = [Function: choose]

def poly: (forall 'a. 'a -> 'a) -> (int, bool)
def poly f = (f 1, f true)
//│ poly: (forall 'a. 'a -> 'a) -> (int, bool,)
//│     = <missing implementation>
//│ (true -> 'a & 1 -> 'b) -> ('b, 'a,)
//│   <:  poly:
//│ (forall 'a. 'a -> 'a) -> (int, bool,)
//│     = [Function: poly]

def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
def auto x = x x
//│ auto: (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│     = <missing implementation>
//│ ('a -> 'b & 'a) -> 'b
//│   <:  auto:
//│ (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│     = [Function: auto]

def auto_ : (forall 'a. 'a -> 'a) -> 'b -> 'b
def auto_ x = x x
//│ auto_: (forall 'a. 'a -> 'a) -> 'b -> 'b
//│      = <missing implementation>
//│ ('a -> 'b & 'a) -> 'b
//│   <:  auto_:
//│ (forall 'a. 'a -> 'a) -> 'b -> 'b
//│      = [Function: auto_]

def map: ('a -> 'b) -> List['a] -> List['b]
rec def map f l =
  if is_empty l then nil
  else cons (f (head l)) (map f (tail l))
//│ map: ('a -> 'b) -> List['a] -> List['b]
//│    = <missing implementation>
//│ (nothing -> 'b & nothing -> 'a) -> List[?] -> List['a | 'b]
//│   <:  map:
//│ ('a -> 'b) -> List['a] -> List['b]
//│    = [Function: map]

def app: ('a -> 'b) -> 'a -> 'b
def app f x = f x
//│ app: ('a -> 'b) -> 'a -> 'b
//│    = <missing implementation>
//│ ('a -> 'b) -> 'a -> 'b
//│   <:  app:
//│ ('a -> 'b) -> 'a -> 'b
//│    = [Function: app]

def revapp: 'a -> ('a -> 'b) -> 'b
def revapp x f = f x
//│ revapp: 'a -> ('a -> 'b) -> 'b
//│       = <missing implementation>
//│ 'a -> (forall 'b. ('a -> 'b) -> 'b)
//│   <:  revapp:
//│ 'a -> ('a -> 'b) -> 'b
//│       = [Function: revapp]

:ng
def runST: (forall 's. ST['s, 'v]) -> 'v
//│ runST: (forall 's. ST['s, 'v]) -> 'v

:ng
def argST: ST['s, int]
//│ argST: ST['s, int]

// A9
:ng
def f: ('a -> 'a) -> List['a] -> 'a
//│ f: ('a -> 'a) -> List['a] -> 'a

// C8
:ng
def g: List['a] -> List['a] -> 'a
//│ g: List['a] -> List['a] -> 'a

// E1, E2
:ng
def h: int -> (forall 'a. 'a -> 'a)
def k: 'a -> List['a] -> 'a
def lst: List[forall 'a. int -> 'a -> 'a]
//│ h: int -> (forall 'a. 'a -> 'a)
//│ k: 'a -> List['a] -> 'a
//│ lst: List[forall 'a. int -> 'a -> 'a]

// E3
:ng
def r: (forall 'a. 'a -> (forall 'b. 'b -> 'b)) -> int
//│ r: (anything -> (forall 'b. 'b -> 'b)) -> int


type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ Defined type alias ChurchInt

type Pair[A, B] = (A, B)
//│ Defined type alias Pair[+A, +B]

def fst: forall 'a 'b. Pair['a, 'b] -> 'a
def fst((x, y)) = x
//│ fst: Pair['a, ?] -> 'a
//│    = <missing implementation>
//│ ('a, anything,) -> 'a
//│   <:  fst:
//│ Pair['a, ?] -> 'a
//│    = [Function: fst]

def zero: ChurchInt
def zero f x = x
//│ zero: ChurchInt
//│     = <missing implementation>
//│ anything -> (forall 'a. 'a -> 'a)
//│   <:  zero:
//│ ChurchInt
//│     = [Function: zero]

def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
def succ (n: ChurchInt) f x = f (n f x)
//│ succ: (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = <missing implementation>
//│ ChurchInt -> (forall 'N, 'a, 'N0. ('N -> 'a & 'N0 -> ('N & 'N0)) -> ('N & 'N0) -> 'a)
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = [Function: succ1]




// ================================================================
// ======================== Vanilla SuperF ========================
// ================================================================


// ============ A. polymorphic instantiation ============

// A1
fun x -> fun y -> y
//│ res: anything -> (forall 'a. 'a -> 'a)
//│    = [Function: res]

// A2
choose id
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// A3
choose nil ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// A4
fun x -> x x
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: res]

// A5
id auto
//│ res: (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│    = [Function: auto]

// A6
id auto_
//│ res: (forall 'a. 'a -> 'a) -> 'b -> 'b
//│    = [Function: auto_]

// A7
choose id auto
//│ res: (forall 'a. 'a -> 'a & 'a0) -> (forall 'b. 'a0 | 'b -> 'b)
//│    = [Function: id1]

// A8
:ns
choose id auto_
//│ res: 'c
//│   where
//│     'c :> (forall 'a. 'a -> 'a) | (forall 'b. (forall 'a0. 'a0 -> 'a0) -> 'b -> 'b)
//│    = [Function: id1]

// A9
:ng
f (choose id) ids
//│ res: 'a -> 'a

// A10
poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// A11
poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]

// A12
id poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]


// ============ B. inference of polymorphic arguments ============

// B1
fun f -> (f 1, f true)
//│ res: (true -> 'a & 1 -> 'b) -> ('b, 'a,)
//│    = [Function: res]

// B2
fun xs -> poly (head xs)
//│ res: List[forall 'a. 'a -> 'a] -> (int, bool,)
//│    = [Function: res]


// ============ C. functions on polymorphic lists ============

// C1
length ids
//│ res: int
//│    = 1

// C2
tail ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// C3
head ids
//│ res: 'a -> 'a
//│    = [Function: id1]

// C4
single id
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// C5
cons id ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C6
cons (fun x -> x) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function (anonymous)],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C7
append (single inc) (single id)
//│ res: List[int -> int]
//│    = Cons {
//│        head: [Function: succ],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C8
:ng
g (single id) ids
//│ res: 'a -> 'a

// C9
map poly (single id)
//│ res: List[(int, bool,)]
//│    = Cons { head: [ 1, true ], tail: Nil {} }

// C10
map head (single ids)
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }


// ============ D. application functions ============

// D1
app poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// D2
revapp id poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// D3
:ng
runST argST
//│ res: int

// D4
:ng
app runST argST
//│ res: int

// D5
:ng
revapp argST runST
//│ res: int


// ============ E. η-expansion ============

// E1
:ng
k h lst
//│ res: int -> (forall 'a. 'a -> 'a)

// E2
:ng
k (fun x -> h x) lst
//│ res: int -> (forall 'a. 'a -> 'a)

// E3
:ng
r (fun x -> fun y -> y)
//│ res: int


// ============ F. FreezeML Additions ============

// F5
auto id
//│ res: 'b -> 'b
//│    = [Function: id1]

// F6
cons (head ids) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// F7
(head ids) 3
//│ res: 3
//│    = 3

// F8
choose (head ids)
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// F9
let f = revapp id in f poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// F10
choose id (fun x -> auto_ x)
//│ res: (forall 'a. 'a -> 'a & 'a0) -> ('a0 | 'b -> 'b)
//│    = [Function: id1]


// ============ G. SuperF Additions ============

// G1
def z f x = x
//│ z: anything -> (forall 'a. 'a -> 'a)
//│  = [Function: z]

// G2
def s n f x = f (n f x)
//│ s: ('a -> 'b -> 'c) -> (forall 'd. ('c -> 'd & 'a) -> 'b -> 'd)
//│  = [Function: s]

// G3
n3 = s (s (s z))
//│ n3: ('a -> 'b & 'c -> 'a & 'd -> 'c) -> 'd -> 'b
//│   = [Function (anonymous)]

// G1A
z: ChurchInt
//│ res: ChurchInt
//│    = [Function: z]

:e
// G2A
s: ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.532: 	s: ChurchInt -> ChurchInt
//│ ║         	^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.244: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║         	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.244: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──       	                        ^^
//│ res: ChurchInt -> ChurchInt
//│    = [Function: s]

// G3A
n3: ChurchInt
//│ res: ChurchInt
//│    = [Function (anonymous)]

// G4
fst (fst (fst (n3 (fun x -> (x, 0)) 1)))
//│ res: 1
//│    = 1

(succ (succ zero)) (succ (succ zero))
//│ res: ('M -> 'M) -> 'M -> 'M
//│    = [Function (anonymous)]

(s (s z)) (s (s z))
//│ res: ('a -> ('a & 'b & 'c) & 'b -> ('a & 'b)) -> 'b -> 'c
//│    = [Function (anonymous)]

// G7
rec def to_ch n = if n == 0 then z else s (to_ch (n - 1))
//│ to_ch: int -> (forall 'a. ('b -> 'a & 'b -> 'b) -> (forall 'a. ('a & 'b) -> 'a))
//│      = [Function: to_ch]

:e
// G7A
to_ch: int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.570: 	to_ch: int -> ChurchInt
//│ ║         	^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.244: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║         	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.244: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║         	                        ^^
//│ ╟── from application:
//│ ║  l.516: 	def s n f x = f (n f x)
//│ ╙──       	              ^^^^^^^^^
//│ res: int -> ChurchInt
//│    = [Function: to_ch]

:e
// G8
rec def id1 x = if true then x else id1 id1 x
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c. ?c -> ?a <: ?id1` exceeded recursion depth limit (200)
//│ ║  l.588: 	rec def id1 x = if true then x else id1 id1 x
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. (α1840_1850'' -> α1849_1852'')›  <!<  α1840_1868'
//│ ╟── while constraining:  α1847'  <!<  α1840_1868'
//│ ╟── while constraining:  (α1847',)  <!<  (α1840_1868',)
//│ ╟── while constraining:  (α1840_1868' -> α1849_1870')  <!<  ((α1847',) -> α1848')
//│ ╟── while constraining:  ‹∀ 1. (α1840_1850'' -> α1849_1852'')›  <!<  ((α1847',) -> α1848')
//│ ╟── while constraining:  ‹∀ 1. (α1840_1850'' -> α1849_1852'')›  <!<  α1845'
//│ ╟── while constraining:  ‹∀ 1. (α1840_1850'' -> α1849_1852'')›  <!<  α1848'
//│ ╟── while constraining:  ‹∀ 1. (α1840_1850'' -> α1849_1852'')›  <!<  α1849_1858'
//│ ╟── while constraining:  ‹∀ 1. (α1840_1850'' -> α1849_1852'')›  <!<  α20_1857'
//│ ╟── while constraining:  ‹∀ 1. (α1840_1850'' -> α1849_1852'')›  <!<  α1840_1856'
//│ ╟── while constraining:  ‹∀ 1. (α1840_1850'' -> α1849_1852'')›  <!<  α1847'
//│ ╟── while constraining:  ‹∀ 1. (α1840_1850'' -> α1849_1852'')›  <!<  α1840_1865'
//│ ╟── while constraining:  α1847'  <!<  α1840_1865'
//│ ╟── while constraining:  (α1847',)  <!<  (α1840_1865',)
//│ ╟── while constraining:  (α1840_1865' -> α1849_1867')  <!<  ((α1847',) -> α1848')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 1. (α1840_1850'' -> α1849_1852'')›  <!<  α1849_1858'
//│ ╟── while constraining:  ‹∀ 1. (α1840_1850'' -> α1849_1852'')›  <!<  α20_1857'
//│ ╟── while constraining:  ‹∀ 1. (α1840_1850'' -> α1849_1852'')›  <!<  α1840_1856'
//│ ╟── while constraining:  ‹∀ 1. (α1840_1850'' -> α1849_1852'')›  <!<  α1847'
//│ ╟── while constraining:  ‹∀ 1. (α1840_1850'' -> α1849_1852'')›  <!<  α1840_1859'
//│ ╟── while constraining:  α1847'  <!<  α1840_1859'
//│ ╟── while constraining:  (α1847',)  <!<  (α1840_1859',)
//│ ╟── while constraining:  (α1840_1859' -> α1849_1861')  <!<  ((α1847',) -> α1848')
//│ ╟── while constraining:  ‹∀ 1. (α1840_1850'' -> α1849_1852'')›  <!<  ((α1847',) -> α1848')
//│ ╟── while constraining:  ‹∀ 1. (α1840_1850'' -> α1849_1852'')›  <!<  α1845'
//│ ╟── while constraining:  α1848'  <!<  α1845'
//│ ╟── while constraining:  α1849_1855'  <!<  α1845'
//│ ╟── while constraining:  (α1840_1853' -> α1849_1855')  <!<  ((id11839',) -> α1845')
//│ ╟── while constraining:  ‹∀ 1. (α1840_1850'' -> α1849_1852'')›  <!<  ((id11839',) -> α1845')
//│ ╙── while constraining:  ‹∀ 1. (α1840_1850'' -> α1849_1852'')›  <!<  id11839'
//│ id1: 'id1
//│   where
//│     'id1 :> forall 'a. ('b & 'a) -> 'a
//│     'a :> 'c
//│     'b :> 'id1
//│        <: 'c
//│     'c :> 'id1
//│        <: 'b -> 'c
//│    = [Function: id11]

:e
// G9
id1 id1
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?id1, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r. ?id1 <: (forall ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?id10, ?d1, ?e1, ?f1, ?g1, ?h1, ?i1, ?j1. ?id10) -> ?k1` exceeded recursion depth limit (200)
//│ ║  l.636: 	id1 id1
//│ ║         	^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. id11839'#›  <!<  α1845_2053
//│ ╟── while constraining:  ‹∀ 0. id11839'#›  <!<  α1848_2052
//│ ╟── while constraining:  ‹∀ 0. id11839'#›  <!<  α1849_2068
//│ ╟── while constraining:  ‹∀ 0. id11839'#›  <!<  α20_2067
//│ ╟── while constraining:  ‹∀ 0. id11839'#›  <!<  α1840_2066
//│ ╟── while constraining:  ‹∀ 0. id11839'#›  <!<  α1847_2050
//│ ╟── while constraining:  ‹∀ 0. id11839'#›  <!<  α1840_2070
//│ ╟── while constraining:  α1847_2025  <!<  α1840_2070
//│ ╟── while constraining:  (α1847_2025,)  <!<  (α1840_2070,)
//│ ╟── while constraining:  (α1840_2070 -> α1849_2072)  <!<  ((α1847_2025,) -> α1848_2027)
//│ ╟── while constraining:  ‹∀ 1. (α1840_2049'' -> α1849_2051'')›  <!<  ((α1847_2025,) -> α1848_2027)
//│ ╟── while constraining:  id11839_2048#  <!<  ((α1847_2025,) -> α1848_2027)
//│ ╟── while constraining:  ‹∀ 0. id11839'#›  <!<  ((α1847_2025,) -> α1848_2027)
//│ ╟── while constraining:  ‹∀ 0. id11839'#›  <!<  α1845_2028
//│ ╟── while constraining:  ‹∀ 0. id11839'#›  <!<  α1848_2027
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 1. (α1840_1974'' -> α1849_1976'')›  <!<  ((α1847_1950,) -> α1848_1952)
//│ ╟── while constraining:  id11839_1973#  <!<  ((α1847_1950,) -> α1848_1952)
//│ ╟── while constraining:  ‹∀ 0. id11839'#›  <!<  ((α1847_1950,) -> α1848_1952)
//│ ╟── while constraining:  ‹∀ 0. id11839'#›  <!<  α1845_1953
//│ ╟── while constraining:  ‹∀ 0. id11839'#›  <!<  α1848_1952
//│ ╟── while constraining:  ‹∀ 0. id11839'#›  <!<  α1849_1968
//│ ╟── while constraining:  ‹∀ 0. id11839'#›  <!<  α20_1967
//│ ╟── while constraining:  ‹∀ 0. id11839'#›  <!<  α1840_1966
//│ ╟── while constraining:  ‹∀ 0. id11839'#›  <!<  α1847_1950
//│ ╟── while constraining:  ‹∀ 0. id11839'#›  <!<  α1840_1970
//│ ╟── while constraining:  (‹∀ 0. id11839'#›,)  <!<  (α1840_1970,)
//│ ╟── while constraining:  (α1840_1970 -> α1849_1972)  <!<  ((‹∀ 0. id11839'#›,) -> α1947)
//│ ╟── while constraining:  ‹∀ 1. (α1840_1949'' -> α1849_1951'')›  <!<  ((‹∀ 0. id11839'#›,) -> α1947)
//│ ╟── while constraining:  id11839_1948#  <!<  ((‹∀ 0. id11839'#›,) -> α1947)
//│ ╙── while constraining:  ‹∀ 0. id11839'#›  <!<  ((‹∀ 0. id11839'#›,) -> α1947)
//│ res: error
//│    = [Function: id11]

// Gn
:e
auto auto
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.677: 	auto auto
//│ ║         	^^^^^^^^^
//│ ╟── type `‘a_2119` is not a function
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ║         	                   ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ╙──       	                       ^^^^^^^^
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

// Gn+1
:e
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b. ?a -> ?b <: (forall ?c, ?d. ?d -> ?c) -> ?e` exceeded recursion depth limit (200)
//│ ║  l.693: 	(fun x -> x x) (fun x -> x x)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. (α2126_2128' -> α2127_2129')›  <!<  α2126_2147
//│ ╟── while constraining:  α2126_2145  <!<  α2126_2147
//│ ╟── while constraining:  (α2126_2145,)  <!<  (α2126_2147,)
//│ ╟── while constraining:  (α2126_2147 -> α2127_2148)  <!<  ((α2126_2145,) -> α2127_2146)
//│ ╟── while constraining:  ‹∀ 0. (α2126_2128' -> α2127_2129')›  <!<  ((α2126_2145,) -> α2127_2146)
//│ ╟── while constraining:  ‹∀ 0. (α2126_2128' -> α2127_2129')›  <!<  α2126_2145
//│ ╟── while constraining:  α2126_2143  <!<  α2126_2145
//│ ╟── while constraining:  (α2126_2143,)  <!<  (α2126_2145,)
//│ ╟── while constraining:  (α2126_2145 -> α2127_2146)  <!<  ((α2126_2143,) -> α2127_2144)
//│ ╟── while constraining:  ‹∀ 0. (α2126_2128' -> α2127_2129')›  <!<  ((α2126_2143,) -> α2127_2144)
//│ ╟── while constraining:  ‹∀ 0. (α2126_2128' -> α2127_2129')›  <!<  α2126_2143
//│ ╟── while constraining:  α2126_2141  <!<  α2126_2143
//│ ╟── while constraining:  (α2126_2141,)  <!<  (α2126_2143,)
//│ ╟── while constraining:  (α2126_2143 -> α2127_2144)  <!<  ((α2126_2141,) -> α2127_2142)
//│ ╟── while constraining:  ‹∀ 0. (α2126_2128' -> α2127_2129')›  <!<  ((α2126_2141,) -> α2127_2142)
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 0. (α2126_2128' -> α2127_2129')›  <!<  ((α2126_2135,) -> α2127_2136)
//│ ╟── while constraining:  ‹∀ 0. (α2126_2128' -> α2127_2129')›  <!<  α2126_2135
//│ ╟── while constraining:  α2126_2133  <!<  α2126_2135
//│ ╟── while constraining:  (α2126_2133,)  <!<  (α2126_2135,)
//│ ╟── while constraining:  (α2126_2135 -> α2127_2136)  <!<  ((α2126_2133,) -> α2127_2134)
//│ ╟── while constraining:  ‹∀ 0. (α2126_2128' -> α2127_2129')›  <!<  ((α2126_2133,) -> α2127_2134)
//│ ╟── while constraining:  ‹∀ 0. (α2126_2128' -> α2127_2129')›  <!<  α2126_2133
//│ ╟── while constraining:  α2122_2131  <!<  α2126_2133
//│ ╟── while constraining:  (α2122_2131,)  <!<  (α2126_2133,)
//│ ╟── while constraining:  (α2126_2133 -> α2127_2134)  <!<  ((α2122_2131,) -> α2123_2132)
//│ ╟── while constraining:  ‹∀ 0. (α2126_2128' -> α2127_2129')›  <!<  ((α2122_2131,) -> α2123_2132)
//│ ╟── while constraining:  ‹∀ 0. (α2126_2128' -> α2127_2129')›  <!<  α2122_2131
//│ ╟── while constraining:  (‹∀ 0. (α2126_2128' -> α2127_2129')›,)  <!<  (α2122_2131,)
//│ ╟── while constraining:  (α2122_2131 -> α2123_2132)  <!<  ((‹∀ 0. (α2126_2128' -> α2127_2129')›,) -> α2130)
//│ ╙── while constraining:  ‹∀ 0. (α2122_2124' -> α2123_2125')›  <!<  ((‹∀ 0. (α2126_2128' -> α2127_2129')›,) -> α2130)
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:re
// Gn+2
(fun x -> x x) (fun x -> x x)!
//│ res: nothing
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded



// ===========================================================
// ======================== SuperF +D ========================
// ===========================================================

:DistributeForalls


// ============ A. polymorphic instantiation ============

// A1
fun x -> fun y -> y
//│ res: anything -> (forall 'a. 'a -> 'a)
//│    = [Function: res]

// A2
choose id
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// A3
choose nil ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// A4
fun x -> x x
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: res]

// A5
id auto
//│ res: (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│    = [Function: auto]

// A6
id auto_
//│ res: (forall 'a. 'a -> 'a) -> 'b -> 'b
//│    = [Function: auto_]

// A7
choose id auto
//│ res: (forall 'a. 'a -> 'a & 'a0) -> (forall 'b. 'a0 | 'b -> 'b)
//│    = [Function: id1]

// A8
:ns
choose id auto_
//│ res: 'c
//│   where
//│     'c :> (forall 'a. 'a -> 'a) | (forall 'b. (forall 'a0. 'a0 -> 'a0) -> 'b -> 'b)
//│    = [Function: id1]

// A9
:ng
f (choose id) ids
//│ res: 'a -> 'a

// A10
poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// A11
poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]

// A12
id poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]


// ============ B. inference of polymorphic arguments ============

// B1
fun f -> (f 1, f true)
//│ res: (true -> 'a & 1 -> 'b) -> ('b, 'a,)
//│    = [Function: res]

// B2
fun xs -> poly (head xs)
//│ res: List[forall 'a. 'a -> 'a] -> (int, bool,)
//│    = [Function: res]


// ============ C. functions on polymorphic lists ============

// C1
length ids
//│ res: int
//│    = 1

// C2
tail ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// C3
head ids
//│ res: 'a -> 'a
//│    = [Function: id1]

// C4
single id
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// C5
cons id ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C6
cons (fun x -> x) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function (anonymous)],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C7
append (single inc) (single id)
//│ res: List[int -> int]
//│    = Cons {
//│        head: [Function: succ],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C8
:ng
g (single id) ids
//│ res: 'a -> 'a

// C9
map poly (single id)
//│ res: List[(int, bool,)]
//│    = Cons { head: [ 1, true ], tail: Nil {} }

// C10
map head (single ids)
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }


// ============ D. application functions ============

// D1
app poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// D2
revapp id poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// D3
:ng
runST argST
//│ res: int

// D4
:ng
app runST argST
//│ res: int

// D5
:ng
revapp argST runST
//│ res: int


// ============ E. η-expansion ============

// E1
:ng
k h lst
//│ res: int -> (forall 'a. 'a -> 'a)

// E2
:ng
k (fun x -> h x) lst
//│ res: int -> (forall 'a. 'a -> 'a)

// E3
:ng
r (fun x -> fun y -> y)
//│ res: int


// ============ F. FreezeML Additions ============

// F5
auto id
//│ res: 'b -> 'b
//│    = [Function: id1]

// F6
cons (head ids) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// F7
(head ids) 3
//│ res: 3
//│    = 3

// F8
choose (head ids)
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// F9
let f = revapp id in f poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// F10
choose id (fun x -> auto_ x)
//│ res: (forall 'a. 'a -> 'a & 'a0) -> (forall 'a0, 'b. 'a0 | 'b -> 'b)
//│    = [Function: id1]


// ============ G. SuperF Additions ============

// G1
def z f x = x
//│ z: anything -> (forall 'a. 'a -> 'a)
//│  = [Function: z1]

// G2
def s n f x = f (n f x)
//│ s: ('a -> 'b -> 'c) -> (forall 'd. ('c -> 'd & 'a) -> 'b -> 'd)
//│  = [Function: s1]

// G3
n3 = s (s (s z))
//│ n3: ('a -> 'b & 'c -> 'a & 'd -> 'c) -> 'd -> 'b
//│   = [Function (anonymous)]

// G1A
z: ChurchInt
//│ res: ChurchInt
//│    = [Function: z1]

// G2A
s: ChurchInt -> ChurchInt
//│ res: ChurchInt -> ChurchInt
//│    = [Function: s1]

// G3A
n3: ChurchInt
//│ res: ChurchInt
//│    = [Function (anonymous)]

// G4
fst (fst (fst (n3 (fun x -> (x, 0)) 1)))
//│ res: 1
//│    = 1

(succ (succ zero)) (succ (succ zero))
//│ res: ('M -> 'M) -> 'M -> 'M
//│    = [Function (anonymous)]

(s (s z)) (s (s z))
//│ res: (('a | 'b) -> 'b & 'c -> 'a) -> 'c -> 'b
//│   where
//│     'c :> 'a | 'b
//│    = [Function (anonymous)]

// G7
rec def to_ch n = if n == 0 then z else s (to_ch (n - 1))
//│ to_ch: int -> (forall 'a. ('b -> 'a & 'b -> 'b) -> (forall 'a. ('a & 'b) -> 'a))
//│      = [Function: to_ch1]

// G7A
to_ch: int -> ChurchInt
//│ res: int -> ChurchInt
//│    = [Function: to_ch1]

:e
// G8
rec def id1 x = if true then x else id1 id1 x
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c. ?a -> ?b <: ?id1` exceeded recursion depth limit (200)
//│ ║  l.1031: 	rec def id1 x = if true then x else id1 id1 x
//│ ║          	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. (α3092_3102'' -> α3101_3104'')›  <!<  α3092_3120'
//│ ╟── while constraining:  α3099'  <!<  α3092_3120'
//│ ╟── while constraining:  (α3099',)  <!<  (α3092_3120',)
//│ ╟── while constraining:  (α3092_3120' -> α3101_3122')  <!<  ((α3099',) -> α3100')
//│ ╟── while constraining:  ‹∀ 1. (α3092_3102'' -> α3101_3104'')›  <!<  ((α3099',) -> α3100')
//│ ╟── while constraining:  ‹∀ 1. (α3092_3102'' -> α3101_3104'')›  <!<  α3097'
//│ ╟── while constraining:  ‹∀ 1. (α3092_3102'' -> α3101_3104'')›  <!<  α3100'
//│ ╟── while constraining:  ‹∀ 1. (α3092_3102'' -> α3101_3104'')›  <!<  α3101_3110'
//│ ╟── while constraining:  ‹∀ 1. (α3092_3102'' -> α3101_3104'')›  <!<  α20_3109'
//│ ╟── while constraining:  ‹∀ 1. (α3092_3102'' -> α3101_3104'')›  <!<  α3092_3108'
//│ ╟── while constraining:  ‹∀ 1. (α3092_3102'' -> α3101_3104'')›  <!<  α3099'
//│ ╟── while constraining:  ‹∀ 1. (α3092_3102'' -> α3101_3104'')›  <!<  α3092_3117'
//│ ╟── while constraining:  α3099'  <!<  α3092_3117'
//│ ╟── while constraining:  (α3099',)  <!<  (α3092_3117',)
//│ ╟── while constraining:  (α3092_3117' -> α3101_3119')  <!<  ((α3099',) -> α3100')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 1. (α3092_3102'' -> α3101_3104'')›  <!<  α3101_3110'
//│ ╟── while constraining:  ‹∀ 1. (α3092_3102'' -> α3101_3104'')›  <!<  α20_3109'
//│ ╟── while constraining:  ‹∀ 1. (α3092_3102'' -> α3101_3104'')›  <!<  α3092_3108'
//│ ╟── while constraining:  ‹∀ 1. (α3092_3102'' -> α3101_3104'')›  <!<  α3099'
//│ ╟── while constraining:  ‹∀ 1. (α3092_3102'' -> α3101_3104'')›  <!<  α3092_3111'
//│ ╟── while constraining:  α3099'  <!<  α3092_3111'
//│ ╟── while constraining:  (α3099',)  <!<  (α3092_3111',)
//│ ╟── while constraining:  (α3092_3111' -> α3101_3113')  <!<  ((α3099',) -> α3100')
//│ ╟── while constraining:  ‹∀ 1. (α3092_3102'' -> α3101_3104'')›  <!<  ((α3099',) -> α3100')
//│ ╟── while constraining:  ‹∀ 1. (α3092_3102'' -> α3101_3104'')›  <!<  α3097'
//│ ╟── while constraining:  α3100'  <!<  α3097'
//│ ╟── while constraining:  α3101_3107'  <!<  α3097'
//│ ╟── while constraining:  (α3092_3105' -> α3101_3107')  <!<  ((id13091',) -> α3097')
//│ ╟── while constraining:  ‹∀ 1. (α3092_3102'' -> α3101_3104'')›  <!<  ((id13091',) -> α3097')
//│ ╙── while constraining:  ‹∀ 1. (α3092_3102'' -> α3101_3104'')›  <!<  id13091'
//│ id1: 'id1
//│   where
//│     'id1 :> forall 'a. ('b & 'a) -> 'a
//│     'a :> 'c
//│     'b :> 'id1
//│        <: 'c
//│     'c :> 'id1
//│        <: 'b -> 'c
//│    = [Function: id12]

:e
// G9
id1 id1
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?id1, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r. ?id1 <: (forall ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?id10, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1, ?i1, ?j1. ?id10) -> ?k1` exceeded recursion depth limit (200)
//│ ║  l.1079: 	id1 id1
//│ ║          	^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. id13091'#›  <!<  α3097_3305
//│ ╟── while constraining:  ‹∀ 0. id13091'#›  <!<  α3100_3304
//│ ╟── while constraining:  ‹∀ 0. id13091'#›  <!<  α3101_3320
//│ ╟── while constraining:  ‹∀ 0. id13091'#›  <!<  α20_3319
//│ ╟── while constraining:  ‹∀ 0. id13091'#›  <!<  α3092_3318
//│ ╟── while constraining:  ‹∀ 0. id13091'#›  <!<  α3099_3302
//│ ╟── while constraining:  ‹∀ 0. id13091'#›  <!<  α3092_3322
//│ ╟── while constraining:  α3099_3277  <!<  α3092_3322
//│ ╟── while constraining:  (α3099_3277,)  <!<  (α3092_3322,)
//│ ╟── while constraining:  (α3092_3322 -> α3101_3324)  <!<  ((α3099_3277,) -> α3100_3279)
//│ ╟── while constraining:  ‹∀ 1. (α3092_3301'' -> α3101_3303'')›  <!<  ((α3099_3277,) -> α3100_3279)
//│ ╟── while constraining:  id13091_3300#  <!<  ((α3099_3277,) -> α3100_3279)
//│ ╟── while constraining:  ‹∀ 0. id13091'#›  <!<  ((α3099_3277,) -> α3100_3279)
//│ ╟── while constraining:  ‹∀ 0. id13091'#›  <!<  α3097_3280
//│ ╟── while constraining:  ‹∀ 0. id13091'#›  <!<  α3100_3279
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 1. (α3092_3226'' -> α3101_3228'')›  <!<  ((α3099_3202,) -> α3100_3204)
//│ ╟── while constraining:  id13091_3225#  <!<  ((α3099_3202,) -> α3100_3204)
//│ ╟── while constraining:  ‹∀ 0. id13091'#›  <!<  ((α3099_3202,) -> α3100_3204)
//│ ╟── while constraining:  ‹∀ 0. id13091'#›  <!<  α3097_3205
//│ ╟── while constraining:  ‹∀ 0. id13091'#›  <!<  α3100_3204
//│ ╟── while constraining:  ‹∀ 0. id13091'#›  <!<  α3101_3220
//│ ╟── while constraining:  ‹∀ 0. id13091'#›  <!<  α20_3219
//│ ╟── while constraining:  ‹∀ 0. id13091'#›  <!<  α3092_3218
//│ ╟── while constraining:  ‹∀ 0. id13091'#›  <!<  α3099_3202
//│ ╟── while constraining:  ‹∀ 0. id13091'#›  <!<  α3092_3222
//│ ╟── while constraining:  (‹∀ 0. id13091'#›,)  <!<  (α3092_3222,)
//│ ╟── while constraining:  (α3092_3222 -> α3101_3224)  <!<  ((‹∀ 0. id13091'#›,) -> α3199)
//│ ╟── while constraining:  ‹∀ 1. (α3092_3201'' -> α3101_3203'')›  <!<  ((‹∀ 0. id13091'#›,) -> α3199)
//│ ╟── while constraining:  id13091_3200#  <!<  ((‹∀ 0. id13091'#›,) -> α3199)
//│ ╙── while constraining:  ‹∀ 0. id13091'#›  <!<  ((‹∀ 0. id13091'#›,) -> α3199)
//│ res: error
//│    = [Function: id12]

// Gn
:e
auto auto
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1120: 	auto auto
//│ ║          	^^^^^^^^^
//│ ╟── type `‘a_3371` is not a function
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ║         	                   ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ╙──       	                       ^^^^^^^^
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

// Gn+1
:e
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b. ?b -> ?a <: (forall ?c, ?d. ?d -> ?c) -> ?e` exceeded recursion depth limit (200)
//│ ║  l.1136: 	(fun x -> x x) (fun x -> x x)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. (α3378_3380' -> α3379_3381')›  <!<  α3378_3399
//│ ╟── while constraining:  α3378_3397  <!<  α3378_3399
//│ ╟── while constraining:  (α3378_3397,)  <!<  (α3378_3399,)
//│ ╟── while constraining:  (α3378_3399 -> α3379_3400)  <!<  ((α3378_3397,) -> α3379_3398)
//│ ╟── while constraining:  ‹∀ 0. (α3378_3380' -> α3379_3381')›  <!<  ((α3378_3397,) -> α3379_3398)
//│ ╟── while constraining:  ‹∀ 0. (α3378_3380' -> α3379_3381')›  <!<  α3378_3397
//│ ╟── while constraining:  α3378_3395  <!<  α3378_3397
//│ ╟── while constraining:  (α3378_3395,)  <!<  (α3378_3397,)
//│ ╟── while constraining:  (α3378_3397 -> α3379_3398)  <!<  ((α3378_3395,) -> α3379_3396)
//│ ╟── while constraining:  ‹∀ 0. (α3378_3380' -> α3379_3381')›  <!<  ((α3378_3395,) -> α3379_3396)
//│ ╟── while constraining:  ‹∀ 0. (α3378_3380' -> α3379_3381')›  <!<  α3378_3395
//│ ╟── while constraining:  α3378_3393  <!<  α3378_3395
//│ ╟── while constraining:  (α3378_3393,)  <!<  (α3378_3395,)
//│ ╟── while constraining:  (α3378_3395 -> α3379_3396)  <!<  ((α3378_3393,) -> α3379_3394)
//│ ╟── while constraining:  ‹∀ 0. (α3378_3380' -> α3379_3381')›  <!<  ((α3378_3393,) -> α3379_3394)
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 0. (α3378_3380' -> α3379_3381')›  <!<  ((α3378_3387,) -> α3379_3388)
//│ ╟── while constraining:  ‹∀ 0. (α3378_3380' -> α3379_3381')›  <!<  α3378_3387
//│ ╟── while constraining:  α3378_3385  <!<  α3378_3387
//│ ╟── while constraining:  (α3378_3385,)  <!<  (α3378_3387,)
//│ ╟── while constraining:  (α3378_3387 -> α3379_3388)  <!<  ((α3378_3385,) -> α3379_3386)
//│ ╟── while constraining:  ‹∀ 0. (α3378_3380' -> α3379_3381')›  <!<  ((α3378_3385,) -> α3379_3386)
//│ ╟── while constraining:  ‹∀ 0. (α3378_3380' -> α3379_3381')›  <!<  α3378_3385
//│ ╟── while constraining:  α3374_3383  <!<  α3378_3385
//│ ╟── while constraining:  (α3374_3383,)  <!<  (α3378_3385,)
//│ ╟── while constraining:  (α3378_3385 -> α3379_3386)  <!<  ((α3374_3383,) -> α3375_3384)
//│ ╟── while constraining:  ‹∀ 0. (α3378_3380' -> α3379_3381')›  <!<  ((α3374_3383,) -> α3375_3384)
//│ ╟── while constraining:  ‹∀ 0. (α3378_3380' -> α3379_3381')›  <!<  α3374_3383
//│ ╟── while constraining:  (‹∀ 0. (α3378_3380' -> α3379_3381')›,)  <!<  (α3374_3383,)
//│ ╟── while constraining:  (α3374_3383 -> α3375_3384)  <!<  ((‹∀ 0. (α3378_3380' -> α3379_3381')›,) -> α3382)
//│ ╙── while constraining:  ‹∀ 0. (α3374_3376' -> α3375_3377')›  <!<  ((‹∀ 0. (α3378_3380' -> α3379_3381')›,) -> α3382)
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:re
// Gn+2
(fun x -> x x) (fun x -> x x)!
//│ res: nothing
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded



// ==============================================================
// ======================== SuperF +D+CC ========================
// ==============================================================

:CycleCheck


// ============ A. polymorphic instantiation ============

// A1
fun x -> fun y -> y
//│ res: anything -> (forall 'a. 'a -> 'a)
//│    = [Function: res]

// A2
choose id
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// A3
choose nil ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// A4
fun x -> x x
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: res]

// A5
id auto
//│ res: (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│    = [Function: auto]

// A6
id auto_
//│ res: (forall 'a. 'a -> 'a) -> 'b -> 'b
//│    = [Function: auto_]

// A7
choose id auto
//│ res: (forall 'a. 'a -> 'a & 'a0) -> (forall 'b. 'a0 | 'b -> 'b)
//│    = [Function: id1]

// A8
:ns
choose id auto_
//│ res: 'c
//│   where
//│     'c :> (forall 'a. 'a -> 'a) | (forall 'b. (forall 'a0. 'a0 -> 'a0) -> 'b -> 'b)
//│    = [Function: id1]

// A9
:ng
f (choose id) ids
//│ res: 'a -> 'a

// A10
poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// A11
poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]

// A12
id poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]


// ============ B. inference of polymorphic arguments ============

// B1
fun f -> (f 1, f true)
//│ res: (true -> 'a & 1 -> 'b) -> ('b, 'a,)
//│    = [Function: res]

// B2
fun xs -> poly (head xs)
//│ res: List[forall 'a. 'a -> 'a] -> (int, bool,)
//│    = [Function: res]


// ============ C. functions on polymorphic lists ============

// C1
length ids
//│ res: int
//│    = 1

// C2
tail ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// C3
head ids
//│ res: 'a -> 'a
//│    = [Function: id1]

// C4
single id
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// C5
cons id ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C6
cons (fun x -> x) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function (anonymous)],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C7
append (single inc) (single id)
//│ res: List[int -> int]
//│    = Cons {
//│        head: [Function: succ],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C8
:ng
g (single id) ids
//│ res: 'a -> 'a

// C9
map poly (single id)
//│ res: List[(int, bool,)]
//│    = Cons { head: [ 1, true ], tail: Nil {} }

// C10
map head (single ids)
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }


// ============ D. application functions ============

// D1
app poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// D2
revapp id poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// D3
:ng
runST argST
//│ res: int

// D4
:ng
app runST argST
//│ res: int

// D5
:ng
revapp argST runST
//│ res: int


// ============ E. η-expansion ============

// E1
:ng
k h lst
//│ res: int -> (forall 'a. 'a -> 'a)

// E2
:ng
k (fun x -> h x) lst
//│ res: int -> (forall 'a. 'a -> 'a)

// E3
:ng
r (fun x -> fun y -> y)
//│ res: int


// ============ F. FreezeML Additions ============

// F5
auto id
//│ res: 'b -> 'b
//│    = [Function: id1]

// F6
cons (head ids) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// F7
(head ids) 3
//│ res: 3
//│    = 3

// F8
choose (head ids)
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// F9
let f = revapp id in f poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// F10
choose id (fun x -> auto_ x)
//│ res: (forall 'a. 'a -> 'a & 'a0) -> (forall 'a0, 'b. 'a0 | 'b -> 'b)
//│    = [Function: id1]


// ============ G. SuperF Additions ============

// G1
def z f x = x
//│ z: anything -> (forall 'a. 'a -> 'a)
//│  = [Function: z2]

// G2
def s n f x = f (n f x)
//│ s: ('a -> 'b -> 'c) -> (forall 'd. ('c -> 'd & 'a) -> 'b -> 'd)
//│  = [Function: s2]

// G3
n3 = s (s (s z))
//│ n3: ('a -> 'b & 'c -> 'a & 'd -> 'c) -> 'd -> 'b
//│   = [Function (anonymous)]

// G1A
z: ChurchInt
//│ res: ChurchInt
//│    = [Function: z2]

// G2A
s: ChurchInt -> ChurchInt
//│ res: ChurchInt -> ChurchInt
//│    = [Function: s2]

// G3A
n3: ChurchInt
//│ res: ChurchInt
//│    = [Function (anonymous)]

// G4
fst (fst (fst (n3 (fun x -> (x, 0)) 1)))
//│ res: 1
//│    = 1

(succ (succ zero)) (succ (succ zero))
//│ res: ('M -> 'M) -> 'M -> 'M
//│    = [Function (anonymous)]

:e
(s (s z)) (s (s z))
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.1457: 	(s (s z)) (s (s z))
//│ ║          	^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 4. α3793_4110'''''›  <:  α3786_4131    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 4. α3793_4110'''''›  <:  α3786_4128''''
//│ res: error
//│    = [Function (anonymous)]

// G7
rec def to_ch n = if n == 0 then z else s (to_ch (n - 1))
//│ to_ch: int -> (forall 'a. ('b -> 'a & 'b -> 'b) -> (forall 'a. ('a & 'b) -> 'a))
//│      = [Function: to_ch2]

// G7A
to_ch: int -> ChurchInt
//│ res: int -> ChurchInt
//│    = [Function: to_ch2]

:e
// G8
rec def id1 x = if true then x else id1 id1 x
//│ ╔══[ERROR] Cyclic-looking constraint while typing binding of lambda expression; a type annotation may be required
//│ ║  l.1479: 	rec def id1 x = if true then x else id1 id1 x
//│ ║          	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. (α4306_4316'' -> α4315_4318'')›  <:  α4306_4322'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. (α4306_4316'' -> α4315_4318'')›  <:  α4306_4316''
//│ id1: 'id1
//│   where
//│     'id1 :> forall 'a. ('b & 'a) -> 'a
//│     'a :> 'c
//│     'b :> 'id1
//│        <: 'c
//│     'c :> 'id1
//│        <: 'b -> 'c
//│    = [Function: id13]

:e
// G9
id1 id1
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.1498: 	id1 id1
//│ ║          	^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. id14305'#›  <:  α4313_4368    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. id14305'#›  <:  α4313'
//│ res: error
//│    = [Function: id13]

// Gn
:e
auto auto
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1510: 	auto auto
//│ ║          	^^^^^^^^^
//│ ╟── type `‘a_4384` is not a function
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ║         	                   ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ╙──       	                       ^^^^^^^^
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

// Gn+1
:e
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.1526: 	(fun x -> x x) (fun x -> x x)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. (α4391_4393' -> α4392_4394')›  <:  α4391_4400    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. (α4391_4393' -> α4392_4394')›  <:  α4391_4393'
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:re
// Gn+2
(fun x -> x x) (fun x -> x x)!
//│ res: nothing
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded



// =================================================================
// ======================== SuperF +D+CC+RT ========================
// =================================================================

:RecursiveTypes


// ============ A. polymorphic instantiation ============

// A1
fun x -> fun y -> y
//│ res: anything -> (forall 'a. 'a -> 'a)
//│    = [Function: res]

// A2
choose id
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// A3
choose nil ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// A4
fun x -> x x
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: res]

// A5
id auto
//│ res: (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│    = [Function: auto]

// A6
id auto_
//│ res: (forall 'a. 'a -> 'a) -> 'b -> 'b
//│    = [Function: auto_]

// A7
choose id auto
//│ res: (forall 'a. 'a -> 'a & 'a0) -> (forall 'b. 'a0 | 'b -> 'b)
//│    = [Function: id1]

// A8
:ns
choose id auto_
//│ res: 'c
//│   where
//│     'c :> (forall 'a. 'a -> 'a) | (forall 'b. (forall 'a0. 'a0 -> 'a0) -> 'b -> 'b)
//│    = [Function: id1]

// A9
:ng
f (choose id) ids
//│ res: 'a -> 'a

// A10
poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// A11
poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]

// A12
id poly (fun x -> x)
//│ res: (int, bool,)
//│    = [ 1, true ]


// ============ B. inference of polymorphic arguments ============

// B1
fun f -> (f 1, f true)
//│ res: (true -> 'a & 1 -> 'b) -> ('b, 'a,)
//│    = [Function: res]

// B2
fun xs -> poly (head xs)
//│ res: List[forall 'a. 'a -> 'a] -> (int, bool,)
//│    = [Function: res]


// ============ C. functions on polymorphic lists ============

// C1
length ids
//│ res: int
//│    = 1

// C2
tail ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Nil {}

// C3
head ids
//│ res: 'a -> 'a
//│    = [Function: id1]

// C4
single id
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }

// C5
cons id ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C6
cons (fun x -> x) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function (anonymous)],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C7
append (single inc) (single id)
//│ res: List[int -> int]
//│    = Cons {
//│        head: [Function: succ],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// C8
:ng
g (single id) ids
//│ res: 'a -> 'a

// C9
map poly (single id)
//│ res: List[(int, bool,)]
//│    = Cons { head: [ 1, true ], tail: Nil {} }

// C10
map head (single ids)
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons { head: [Function: id1], tail: Nil {} }


// ============ D. application functions ============

// D1
app poly id
//│ res: (int, bool,)
//│    = [ 1, true ]

// D2
revapp id poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// D3
:ng
runST argST
//│ res: int

// D4
:ng
app runST argST
//│ res: int

// D5
:ng
revapp argST runST
//│ res: int


// ============ E. η-expansion ============

// E1
:ng
k h lst
//│ res: int -> (forall 'a. 'a -> 'a)

// E2
:ng
k (fun x -> h x) lst
//│ res: int -> (forall 'a. 'a -> 'a)

// E3
:ng
r (fun x -> fun y -> y)
//│ res: int


// ============ F. FreezeML Additions ============

// F5
auto id
//│ res: 'b -> 'b
//│    = [Function: id1]

// F6
cons (head ids) ids
//│ res: List[forall 'a. 'a -> 'a]
//│    = Cons {
//│        head: [Function: id1],
//│        tail: Cons { head: [Function: id1], tail: Nil {} }
//│      }

// F7
(head ids) 3
//│ res: 3
//│    = 3

// F8
choose (head ids)
//│ res: 'a -> (forall 'a0. 'a | 'a0 -> 'a0)
//│    = [Function (anonymous)]

// F9
let f = revapp id in f poly
//│ res: (int, bool,)
//│    = [ 1, true ]

// F10
choose id (fun x -> auto_ x)
//│ res: (forall 'a. 'a -> 'a & 'a0) -> (forall 'a0, 'b. 'a0 | 'b -> 'b)
//│    = [Function: id1]


// ============ G. SuperF Additions ============

// G1
def z f x = x
//│ z: anything -> (forall 'a. 'a -> 'a)
//│  = [Function: z3]

// G2
def s n f x = f (n f x)
//│ s: ('a -> 'b -> 'c) -> (forall 'd. ('c -> 'd & 'a) -> 'b -> 'd)
//│  = [Function: s3]

// G3
n3 = s (s (s z))
//│ n3: ('a -> 'b & 'c -> 'a & 'd -> 'c) -> 'd -> 'b
//│   = [Function (anonymous)]

// G1A
z: ChurchInt
//│ res: ChurchInt
//│    = [Function: z3]

// G2A
s: ChurchInt -> ChurchInt
//│ res: ChurchInt -> ChurchInt
//│    = [Function: s3]

// G3A
n3: ChurchInt
//│ res: ChurchInt
//│    = [Function (anonymous)]

// G4
fst (fst (fst (n3 (fun x -> (x, 0)) 1)))
//│ res: 1
//│    = 1

(succ (succ zero)) (succ (succ zero))
//│ res: ('M -> 'M) -> 'M -> 'M
//│    = [Function (anonymous)]

:e
(s (s z)) (s (s z))
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.1818: 	(s (s z)) (s (s z))
//│ ║          	^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 4. α4792_5109'''''›  <:  α4785_5130    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 4. α4792_5109'''''›  <:  α4785_5127''''
//│ res: error
//│    = [Function (anonymous)]

// G7
rec def to_ch n = if n == 0 then z else s (to_ch (n - 1))
//│ to_ch: int -> (forall 'a. ('b -> 'a & 'b -> 'b) -> (forall 'a. ('a & 'b) -> 'a))
//│      = [Function: to_ch3]

// G7A
to_ch: int -> ChurchInt
//│ res: int -> ChurchInt
//│    = [Function: to_ch3]

// G8
rec def id1 x = if true then x else id1 id1 x
//│ id1: 'id1
//│   where
//│     'id1 :> forall 'a. ('b & 'a) -> 'a
//│     'a :> 'c
//│     'b :> 'id1
//│        <: 'c
//│     'c :> 'id1
//│        <: 'b -> 'c
//│    = [Function: id14]

:e
// G9
id1 id1
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.1852: 	id1 id1
//│ ║          	^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. id15303'#›  <:  α5311_5357    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. id15303'#›  <:  α5311'
//│ res: error
//│    = [Function: id14]

// Gn
:e
auto auto
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1864: 	auto auto
//│ ║          	^^^^^^^^^
//│ ╟── type `‘a_5370` is not a function
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ║         	                   ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.164: 	def auto : (forall 'a. 'a -> 'a) -> (forall 'b. 'b -> 'b)
//│ ╙──       	                       ^^^^^^^^
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

// Gn+1
:e
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.1880: 	(fun x -> x x) (fun x -> x x)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. (α5377_5379' -> α5378_5380')›  <:  α5377_5386    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. (α5377_5379' -> α5378_5380')›  <:  α5377_5379'
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

:re
// Gn+2
(fun x -> x x) (fun x -> x x)!
//│ res: nothing
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded


