:NoRecursiveTypes
:ConstrainedTypes
:DontDistributeForalls
// :GeneralizeCurriedFunctions



// * This asks for a polymorphic function and leverages that polymorphism
def oops (i: forall 'c. ('c -> 'c, 0)) =
  let _ = log "Hi!"
  in let _ = (fun ((f, 0)) ->
    let _ = log f
    in let r = (f id) "hello"
    in log r) i
  in (fun ((f, 0)) -> f) i
//│ oops: (forall 'c. ('c -> 'c, 0,)) -> 'c0 -> 'c0
//│     = [Function: oops]

// * FIXME This should be an error
// * Notice the skolem extrusion/leakage here
def extrude f = oops((f, 0))
//│ extrude: (anything -> nothing) -> 'c -> 'c
//│        = [Function: extrude]

extrude(id)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.25: 	extrude(id)
//│ ║        	^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.9: 	def oops (i: forall 'c. ('c -> 'c, 0)) =
//│ ║       	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.9: 	def oops (i: forall 'c. ('c -> 'c, 0)) =
//│ ╙──     	                    ^^
//│ res: error
//│    = [Function: id]
//│ // Output
//│ Hi!
//│ [Function: id]
//│ hello

extrude(id)(42)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.42: 	extrude(id)(42)
//│ ║        	^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.9: 	def oops (i: forall 'c. ('c -> 'c, 0)) =
//│ ║       	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.9: 	def oops (i: forall 'c. ('c -> 'c, 0)) =
//│ ╙──     	                    ^^
//│ res: error
//│    = 42
//│ // Output
//│ Hi!
//│ [Function: id]
//│ hello

extrude(id)(id)(42)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.59: 	extrude(id)(id)(42)
//│ ║        	^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.9: 	def oops (i: forall 'c. ('c -> 'c, 0)) =
//│ ║       	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.9: 	def oops (i: forall 'c. ('c -> 'c, 0)) =
//│ ╙──     	                    ^^
//│ res: error
//│    = 42
//│ // Output
//│ Hi!
//│ [Function: id]
//│ hello

// * This clearly shouldn't be possible – it passes one skolem as the other
f = extrude (fun x -> extrude (fun y -> x) x)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.77: 	f = extrude (fun x -> extrude (fun y -> x) x)
//│ ║        	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.9: 	def oops (i: forall 'c. ('c -> 'c, 0)) =
//│ ║       	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.9: 	def oops (i: forall 'c. ('c -> 'c, 0)) =
//│ ║       	                    ^^
//│ ╟── from reference:
//│ ║  l.77: 	f = extrude (fun x -> extrude (fun y -> x) x)
//│ ╙──      	                                        ^
//│ f: error
//│  = [Function (anonymous)]
//│ // Output
//│ Hi!
//│ [Function (anonymous)]
//│ Hi!
//│ [Function (anonymous)]
//│ hello
//│ hello

// * Boom!
:re
f 42
//│ res: error
//│ Runtime error:
//│   TypeError: f(...) is not a function
//│ // Output
//│ Hi!
//│ [Function (anonymous)]

// * Note: parser parses this the same as `oops((f, 0)._1)`
def extrude f = oops((f, 0))._1
//│ extrude: (forall 'c. ('c -> 'c, 0,)) -> 'c0 -> 'c0
//│        = [Function: extrude1]



// *** Other random tests ***



def oops (i: forall 'c. ('c -> 'c, 0)) =
  let _ = (i._1 id) "hello"
  in i._1
//│ oops: (forall 'c. ('c -> 'c, 0,)) -> 'c0 -> 'c0
//│     = [Function: oops1]

def oops (i: forall 'c. ('c -> 'c, 0)) =
  let _ = log "Hi!"
  in (fun ((f, 0)) ->
    let _ = log f
    in let r = (f id) "hello"
    in let _ = log r
    in f) i
//│ oops: (forall 'c. ('c -> 'c, 0,)) -> ("hello" -> anything & 'c0) -> (forall 'c0, 'a. 'c0 | 'a -> 'a)
//│     = [Function: oops2]



def foo(a, b) = (a, b) : forall 'c. ('c, 'c)
//│ foo: (nothing, nothing,) -> (forall 'c. ('c, 'c,))
//│    = [Function: foo]

:re
foo(error, error)
//│ res: ('c, 'c,)
//│ Runtime error:
//│   Error: unexpected runtime error

def foo(a, b) = (a, b) : forall 'c. ('c, 'c -> 'c)
//│ foo: (nothing, anything -> nothing,) -> (forall 'c. ('c, 'c -> 'c,))
//│    = [Function: foo1]

def foo(a, b) = (a, b) : forall 'c. ('c -> 'c, 'c -> 'c)
//│ foo: (anything -> nothing, anything -> nothing,) -> (forall 'c. ('c -> 'c, 'c -> 'c,))
//│    = [Function: foo2]

foo(id, id)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.157: 	foo(id, id)
//│ ║         	^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.153: 	def foo(a, b) = (a, b) : forall 'c. ('c -> 'c, 'c -> 'c)
//│ ║         	                                ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.153: 	def foo(a, b) = (a, b) : forall 'c. ('c -> 'c, 'c -> 'c)
//│ ╙──       	                                ^^
//│ res: error
//│    = [ [Function: id], [Function: id] ]


def foo(f) = (fun a -> f a) : forall 'c. 'c -> 'c
//│ foo: (anything -> nothing) -> (forall 'c. 'c -> 'c)
//│    = [Function: foo3]

:e
foo(id)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.176: 	foo(id)
//│ ║         	^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.171: 	def foo(f) = (fun a -> f a) : forall 'c. 'c -> 'c
//│ ║         	                                     ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.171: 	def foo(f) = (fun a -> f a) : forall 'c. 'c -> 'c
//│ ║         	                                     ^^
//│ ╟── from application:
//│ ║  l.171: 	def foo(f) = (fun a -> f a) : forall 'c. 'c -> 'c
//│ ╙──       	                       ^^^
//│ res: error
//│    = [Function (anonymous)]


def foo(a, b) = let tmp = (a, b) : forall 'c. ('c -> 'c, 0) in a
//│ foo: (anything -> nothing & 'a, 0,) -> 'a
//│    = [Function: foo4]

foo(id, 0)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.197: 	foo(id, 0)
//│ ║         	^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.193: 	def foo(a, b) = let tmp = (a, b) : forall 'c. ('c -> 'c, 0) in a
//│ ║         	                                          ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.193: 	def foo(a, b) = let tmp = (a, b) : forall 'c. ('c -> 'c, 0) in a
//│ ╙──       	                                          ^^
//│ res: error
//│    = [Function: id]

foo(fun x -> foo(fun y -> x, 0) x, 0)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.210: 	foo(fun x -> foo(fun y -> x, 0) x, 0)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.193: 	def foo(a, b) = let tmp = (a, b) : forall 'c. ('c -> 'c, 0) in a
//│ ║         	                                          ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.193: 	def foo(a, b) = let tmp = (a, b) : forall 'c. ('c -> 'c, 0) in a
//│ ║         	                                          ^^
//│ ╟── from reference:
//│ ║  l.210: 	foo(fun x -> foo(fun y -> x, 0) x, 0)
//│ ╙──       	                          ^
//│ res: error
//│    = [Function (anonymous)]


def foo((a, b) : forall 'c. ('c -> 'c, 0)) = ()
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.227: 	def foo((a, b) : forall 'c. ('c -> 'c, 0)) = ()
//│ ║         	        ^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.227: 	def foo((a, b) : forall 'c. ('c -> 'c, 0)) = ()
//│ ║         	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.227: 	def foo((a, b) : forall 'c. ('c -> 'c, 0)) = ()
//│ ╙──       	                        ^^
//│ foo: (forall 'c. ('c -> 'c, 0,)) -> ()
//│    = [Function: foo5]

foo((id, 0))
//│ res: ()
//│    = []

:e
foo((fun x -> foo((fun y -> x, 0)), 0))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.245: 	foo((fun x -> foo((fun y -> x, 0)), 0))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘c_274` does not match type `nothing`
//│ ║  l.227: 	def foo((a, b) : forall 'c. ('c -> 'c, 0)) = ()
//│ ║         	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.227: 	def foo((a, b) : forall 'c. ('c -> 'c, 0)) = ()
//│ ╙──       	                        ^^
//│ res: error
//│    = []




