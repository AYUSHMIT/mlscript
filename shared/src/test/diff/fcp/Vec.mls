
:GeneralizeCurriedFunctions
:ArgGen // Type of cons is much simpler without this...

:AllowTypeErrors // FIXME


class Z
class S[P]
  method Inv: P -> P
  method Inv = id
//│ Defined class Z
//│ Defined class S[=P]
//│ Declared S.Inv: S['P] -> 'P -> 'P
//│ Defined S.Inv: S['P] -> (forall 'a. 'a -> 'a)

:IrregularTypes

class Cons[A, N]: { size: S[N]; head: A; tail: Vec[A, N] }
class Nil: { size: Z }
type Vec[A, N] = forall 'r. (forall 'p. (Nil & { size: N } | Cons[A, S['p]] & Cons[A, N]) -> 'r) -> 'r
//│ Defined class Cons[+A, =N]
//│ Defined class Nil
//│ Defined type alias Vec[+A, =N]

type AnyVec[A] = forall 'r. (forall 'p. Nil | Cons[A, S['p]] -> 'r) -> 'r
//│ Defined type alias AnyVec[+A]

def Nil = Nil { size = Z{} }
def Cons head tail = Cons { head; tail; size = S{} }
//│ Nil: Nil
//│ Cons: 'head -> (forall 'head, 'head0, 'A, 'N, 'tail. ((Vec['A, 'N] & 'tail) -> (Cons['A | 'head, 'N] with {head: 'head0 | 'head, tail: 'tail})
//│   where
//│     'head <: 'head0 & 'A))


def nil k = k Nil
def cons h t k = k (Cons h t)
//│ nil: (Nil -> 'a) -> 'a
//│ cons: 'a -> (forall 'tail, 'A, 'N, 'N0. (Vec['A, in 'N out 'N | 'N0] & 'tail) -> ((forall 'a, 'tail, 'A, 'N, 'N0, 'A0, 'N1, 'tail0. (Cons['A | 'A0, 'N1] with {head: nothing, tail: 'tail | 'tail0}
//│   where
//│     'a <: 'a
//│     'tail <: Vec['A0, 'N1] & 'tail0
//│     'a <: 'a
//│     'tail <: Vec['A0, 'N1] & 'tail0)) -> 'b) -> 'b)
//│   where
//│     'N1 :> 'N
//│         <: 'N0

nil_ty = nil : Vec[int, Z]
//│ nil_ty: Vec[int, Z]

def cons_ty : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ cons_ty: 'a -> Vec['a, 'n] -> Vec['a, S['n]]

cons_ty = cons : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.56: 	cons_ty = cons : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	          ^^^^
//│ ╟── type `‘a` is not an instance of type `'a`
//│ ║  l.56: 	cons_ty = cons : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.56: 	cons_ty = cons : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ╙──      	                        ^^
//│ 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│   where
//│     'n := S[in anything out nothing]
//│   <:  cons_ty:
//│ 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.56: 	cons_ty = cons : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	^^^^^^^^^^^^^^
//│ ╟── type `‘n` is not an instance of type `S`
//│ ║  l.53: 	def cons_ty : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	                                       ^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.56: 	cons_ty = cons : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ╙──      	                                          ^^

cons_ty2 = cons : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.81: 	cons_ty2 = cons : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	           ^^^^
//│ ╟── type `‘a` is not an instance of type `'a`
//│ ║  l.81: 	cons_ty2 = cons : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	                         ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.81: 	cons_ty2 = cons : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ╙──      	                         ^^
//│ cons_ty2: 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│   where
//│     'n := S[in anything out nothing]

type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ Defined type alias Cons_ty

cons_ty = cons : Cons_ty
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.98: 	cons_ty = cons : Cons_ty
//│ ║        	          ^^^^
//│ ╟── type `‘a` is not an instance of type `'a`
//│ ║  l.95: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	                      ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.95: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ╙──      	                      ^^
//│ Cons_ty
//│   <:  cons_ty:
//│ 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.98: 	cons_ty = cons : Cons_ty
//│ ║        	^^^^^^^^^^^^^^
//│ ╙── expression of type `‘n_1019 & ~s` is not an instance of type `S`

cons_ty3 = cons : Cons_ty
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.116: 	cons_ty3 = cons : Cons_ty
//│ ║         	           ^^^^
//│ ╟── type `‘a` is not an instance of type `'a`
//│ ║  l.95: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	                      ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.95: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ╙──      	                      ^^
//│ cons_ty3: Cons_ty

def cons h (t: Vec['a, 'n]) k = k (Cons h t)
//│ cons: 'b -> (forall 'a, 'n. Vec['a, 'n] -> ((forall 'b, 'a, 'n, 'c, 'A, 'tail. (Cons['a | 'A, 'n] with {head: nothing, tail: 'tail | Vec['a, 'n]}
//│   where
//│     'b <: 'b
//│     'c <: Vec['A, 'n] & 'tail
//│     'b <: 'b
//│     'c <: Vec['A, 'n] & 'tail)) -> 'd) -> 'd)

cons : Cons_ty
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.136: 	cons : Cons_ty
//│ ║         	^^^^
//│ ╟── type `‘a` is not an instance of type `'a`
//│ ║  l.95: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	                      ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.95: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ╙──      	                      ^^
//│ res: Cons_ty

def cons h (t: Vec['a, 'n]) k = k (Cons h t)
//│ cons: 'b -> (forall 'a, 'n. Vec['a, 'n] -> ((forall 'b, 'a, 'n, 'c, 'A, 'tail. (Cons['a | 'A, 'n] with {head: nothing, tail: 'tail | Vec['a, 'n]}
//│   where
//│     'c <: Vec['A, 'n] & 'tail
//│     'b <: 'b
//│     'c <: Vec['A, 'n] & 'tail
//│     'b <: 'b)) -> 'd) -> 'd)

cons : Cons_ty
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.156: 	cons : Cons_ty
//│ ║         	^^^^
//│ ╟── type `‘a` is not an instance of type `'a`
//│ ║  l.95: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	                      ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.95: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ╙──      	                      ^^
//│ res: Cons_ty


// v0 = nil

// v0_ty = v0 : Vec[int, Z]

v1_ = Cons 1 nil
//│ v1_: Cons[1, 'P] with {tail: forall 'a. (Nil -> 'a) -> 'a}

v1_ty = v1_ : Cons[int, Z]
//│ v1_ty: Cons[int, Z]

v1_0 = cons 1 nil
//│ v1_0: ((forall 'a, 'A, 'N, 'n, 'tail, 'b. (Cons['A, 'N] with {head: nothing, tail: 'tail | Vec[nothing, 'n]}
//│   where
//│     'a <: Vec['A, 'N] & 'tail
//│     'b <: anything
//│     'a <: Vec['A, 'N] & 'tail
//│     'b <: anything)) -> 'c) -> 'c
//│   where
//│     'N <: 'n

v1_0 : Vec[int, S[Z]]
//│ res: Vec[int, S[Z]]

v1_1 k = k v1_
//│ v1_1: ((forall 'P. Cons[1, 'P] with {tail: forall 'a. (Nil -> 'a) -> 'a}) -> 'b) -> 'b

:e
v1_1 : Vec[int, S[Z]]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.196: 	v1_1 : Vec[int, S[Z]]
//│ ║         	^^^^
//│ ╟── application of type `Z` does not match type `nothing`
//│ ║  l.29: 	def Nil = Nil { size = Z{} }
//│ ║        	                       ^^^
//│ ╟── Note: class Z is defined at:
//│ ║  l.8: 	class Z
//│ ╙──     	      ^
//│ res: Vec[int, S[Z]]


v1_tty = cons_ty 1 nil_ty
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.209: 	v1_tty = cons_ty 1 nil_ty
//│ ║         	         ^^^^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of type `'n`
//│ ║  l.50: 	nil_ty = nil : Vec[int, Z]
//│ ╙──      	                        ^
//│ v1_tty: error

v1_tty = cons_ty2 1 nil_ty
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.218: 	v1_tty = cons_ty2 1 nil_ty
//│ ║         	         ^^^^^^^^^^^^^^^^^
//│ ╟── type `Z` does not match type `S[?a] | ‘n`
//│ ║  l.50: 	nil_ty = nil : Vec[int, Z]
//│ ╙──      	                        ^
//│ v1_tty: error

v1_tty = cons_ty3 1 nil_ty
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.227: 	v1_tty = cons_ty3 1 nil_ty
//│ ║         	         ^^^^^^^^^^^^^^^^^
//│ ╟── type `Z` does not match type `{S#P :> ?a <: ?b} | ~Z`
//│ ║  l.50: 	nil_ty = nil : Vec[int, Z]
//│ ╙──      	                        ^
//│ v1_tty: error


v2 = cons 1 (cons 2 nil)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.237: 	v2 = cons 1 (cons 2 nil)
//│ ║         	     ^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `‘n` is not an instance of type `S`
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.21: 	type Vec[A, N] = forall 'r. (forall 'p. (Nil & { size: N } | Cons[A, S['p]] & Cons[A, N]) -> 'r) -> 'r
//│ ╙──      	                                                                     ^^^^^
//│ v2: error


def impossible x = case x of {}
//│ impossible: nothing -> nothing

def head1 vec = vec (fun v -> case v of {
  | Nil -> impossible v.size
  | Cons -> v.head
  })
//│ head1: ((forall 'head. ((Cons[?, ?]\size\tail with {head: 'head}) | Nil & {size: nothing}) -> 'head) -> 'a) -> 'a

def head1_ty : Vec['a, S['p]] -> 'a
head1_ty = head1
//│ head1_ty: Vec['a, S['p]] -> 'a
//│ ((forall 'head. ((Cons[?, ?]\size\tail with {head: 'head}) | Nil & {size: nothing}) -> 'head) -> 'a) -> 'a
//│   <:  head1_ty:
//│ Vec['a, S['p]] -> 'a

// FIXME works without `:GeneralizeCurriedFunctions`!
def head2 (vec: Vec['a, S['p]]) = vec (fun v -> case v of {
  | Nil -> impossible v.size
  | Cons -> v.head
  })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.265: 	def head2 (vec: Vec['a, S['p]]) = vec (fun v -> case v of {
//│ ║         	                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.266: 	  | Nil -> impossible v.size
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.267: 	  | Cons -> v.head
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ║  l.268: 	  })
//│ ║         	^^^^
//│ ╟── type `‘a` is not an instance of type `'r`
//│ ║  l.265: 	def head2 (vec: Vec['a, S['p]]) = vec (fun v -> case v of {
//│ ║         	                    ^^
//│ ╟── but it flows into field selection with expected type `‘r`
//│ ║  l.267: 	  | Cons -> v.head
//│ ║         	            ^^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.21: 	type Vec[A, N] = forall 'r. (forall 'p. (Nil & { size: N } | Cons[A, S['p]] & Cons[A, N]) -> 'r) -> 'r
//│ ╙──      	                        ^^
//│ head2: Vec[?, S['p]] -> error

head1 v1
head1 v2
//│ ╔══[ERROR] identifier not found: v1
//│ ║  l.289: 	head1 v1
//│ ╙──       	      ^^
//│ res: error
//│ res: error

:e
head1 nil
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.298: 	head1 nil
//│ ║         	^^^^^^^^^
//│ ╟── application of type `Z` does not match type `nothing`
//│ ║  l.29: 	def Nil = Nil { size = Z{} }
//│ ║        	                       ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.248: 	def impossible x = case x of {}
//│ ║         	                        ^
//│ ╟── from field selection:
//│ ║  l.252: 	  | Nil -> impossible v.size
//│ ║         	                      ^^^^^^
//│ ╟── Note: class Z is defined at:
//│ ║  l.8: 	class Z
//│ ╙──     	      ^
//│ res: error


rec def sum vec = vec (fun v -> case v of {
  | Nil -> 0
  | Cons -> v.head + sum v.tail
  })
//│ sum: 'a -> 'b
//│   where
//│     'a <: (((Cons[?, ?]\size with {head: int, tail: 'a}) | Nil) -> int) -> (int & 'b)

def sum_ty : Vec[int, 'n] -> int
//│ sum_ty: Vec[int, 'n] -> int

// FIXME should be a cycle error
sum_ty = sum
//│ 'a -> 'b
//│   where
//│     'a <: (((Cons[?, ?]\size with {head: int, tail: 'a}) | Nil) -> int) -> (int & 'b)
//│   <:  sum_ty:
//│ Vec[int, 'n] -> int
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?sum, ?b, ?c, ?d, ?tail, ?head, ?e, ?f, ?g. ?sum <: forall ?n. Vec[int, ?n] -> int` exceeded recursion depth limit (300)
//│ ║  l.329: 	sum_ty = sum
//│ ║         	^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. (‹∀ 1. (((Nil & {size: (‘n' | S[((((((((((‘p_2822' & ‘p_2825') & ‘p_2828') & ‘p_2831') & ‘p_2834') & ‘p_2837') & ‘p_2840') & ‘p_2843') & ‘p_2846') & ‘p_2849') & ‘p_2852')])}) | (Cons[int<number>,S['p43'']] & Cons[int<number>,(‘n' | S[((((((((((‘p_2822' & ‘p_2825') & ‘p_2828') & ‘p_2831') & ‘p_2834') & ‘p_2837') & ‘p_2840') & ‘p_2843') & ‘p_2846') & ‘p_2849') & ‘p_2852')])])) -> 'r42')› -> 'r42')›  <!<  (((α2766_2812' -> (0<int,number> | α2773_2817')),) -> α2774_2818')
//│ ╟── while constraining:  Vec[int<number>,(‘n' | S[((((((((((‘p_2822' & ‘p_2825') & ‘p_2828') & ‘p_2831') & ‘p_2834') & ‘p_2837') & ‘p_2840') & ‘p_2843') & ‘p_2846') & ‘p_2849') & ‘p_2852')])]  <!<  (((α2766_2812' -> (0<int,number> | α2773_2817')),) -> α2774_2818')
//│ ╟── while constraining:  Vec[int<number>,(‘n' | S[((((((((((‘p_2822' & ‘p_2825') & ‘p_2828') & ‘p_2831') & ‘p_2834') & ‘p_2837') & ‘p_2840') & ‘p_2843') & ‘p_2846') & ‘p_2849') & ‘p_2852')])]  <!<  α2765_2811'
//│ ╟── while constraining:  Vec[int<number>,(‘n' | S[((((((((((‘p_2822' & ‘p_2825') & ‘p_2828') & ‘p_2831') & ‘p_2834') & ‘p_2837') & ‘p_2840') & ‘p_2843') & ‘p_2846') & ‘p_2849') & ‘p_2852')])]  <!<  tail2771_2815'
//│ ╟── while constraining:  (cons<> & {Cons#N: mut (S[((((((((((‘p_2822' & ‘p_2825') & ‘p_2828') & ‘p_2831') & ‘p_2834') & ‘p_2837') & ‘p_2840') & ‘p_2843') & ‘p_2846') & ‘p_2849') & ‘p_2852')] | ‘n')..((S[‘p_2852'] & ‘n') | S[((((((((((‘p_2822' & ‘p_2825') & ‘p_2828') & ‘p_2831') & ‘p_2834') & ‘p_2837') & ‘p_2840') & ‘p_2843') & ‘p_2846') & ‘p_2849') | ‘p_2852')]), size: S[(‘n' | S[((((((((((‘p_2822' & ‘p_2825') & ‘p_2828') & ‘p_2831') & ‘p_2834') & ‘p_2837') & ‘p_2840') & ‘p_2843') & ‘p_2846') & ‘p_2849') & ‘p_2852')])], Cons#A: mut ..int<number>, tail: Vec[int<number>,(‘n' | S[((((((((((‘p_2822' & ‘p_2825') & ‘p_2828') & ‘p_2831') & ‘p_2834') & ‘p_2837') & ‘p_2840') & ‘p_2843') & ‘p_2846') & ‘p_2849') & ‘p_2852')])], head: int<number>})  <!<  {tail: tail2771_2815'}
//│ ╟── while constraining:  (cons<> & {Cons#N: mut (S[((((((((((‘p_2822' & ‘p_2825') & ‘p_2828') & ‘p_2831') & ‘p_2834') & ‘p_2837') & ‘p_2840') & ‘p_2843') & ‘p_2846') & ‘p_2849') & ‘p_2852')] | ‘n')..((S[‘p_2852'] & ‘n') | S[((((((((((‘p_2822' & ‘p_2825') & ‘p_2828') & ‘p_2831') & ‘p_2834') & ‘p_2837') & ‘p_2840') & ‘p_2843') & ‘p_2846') & ‘p_2849') | ‘p_2852')]), size: S[(‘n' | S[((((((((((‘p_2822' & ‘p_2825') & ‘p_2828') & ‘p_2831') & ‘p_2834') & ‘p_2837') & ‘p_2840') & ‘p_2843') & ‘p_2846') & ‘p_2849') & ‘p_2852')])], Cons#A: mut ..int<number>, tail: Vec[int<number>,(‘n' | S[((((((((((‘p_2822' & ‘p_2825') & ‘p_2828') & ‘p_2831') & ‘p_2834') & ‘p_2837') & ‘p_2840') & ‘p_2843') & ‘p_2846') & ‘p_2849') & ‘p_2852')])], head: int<number>})  <!<  α2768_2814'
//│ ╟── while constraining:  (Cons[int<number>,S[‘p_2852'..‘p_2852']..S[‘p_2852'..‘p_2852']] & Cons[int<number>,(‘n' | S[(((((((((‘p_2822' & ‘p_2825') & ‘p_2828') & ‘p_2831') & ‘p_2834') & ‘p_2837') & ‘p_2840') & ‘p_2843') & ‘p_2846') & ‘p_2849')])])  <!<  ((nil<> & α2767_2813') | ((cons<> & α2768_2814') & ~(nil<>)))
//│ ╟── while constraining:  ((Nil & {size: (‘n' | S[(((((((((‘p_2822' & ‘p_2825') & ‘p_2828') & ‘p_2831') & ‘p_2834') & ‘p_2837') & ‘p_2840') & ‘p_2843') & ‘p_2846') & ‘p_2849')])}) | (Cons[int<number>,S[‘p_2852'..‘p_2852']..S[‘p_2852'..‘p_2852']] & Cons[int<number>,(‘n' | S[(((((((((‘p_2822' & ‘p_2825') & ‘p_2828') & ‘p_2831') & ‘p_2834') & ‘p_2837') & ‘p_2840') & ‘p_2843') & ‘p_2846') & ‘p_2849')])]))  <!<  ((nil<> & α2767_2813') | ((cons<> & α2768_2814') & ~(nil<>)))
//│ ╟── while constraining:  ((Nil & {size: (‘n' | S[(((((((((‘p_2822' & ‘p_2825') & ‘p_2828') & ‘p_2831') & ‘p_2834') & ‘p_2837') & ‘p_2840') & ‘p_2843') & ‘p_2846') & ‘p_2849')])}) | (Cons[int<number>,S[‘p_2852'..‘p_2852']..S[‘p_2852'..‘p_2852']] & Cons[int<number>,(‘n' | S[(((((((((‘p_2822' & ‘p_2825') & ‘p_2828') & ‘p_2831') & ‘p_2834') & ‘p_2837') & ‘p_2840') & ‘p_2843') & ‘p_2846') & ‘p_2849')])]))  <!<  α2766_2812'
//│ ╟── while constraining:  ((Nil & {size: (‘n' | S[(((((((((‘p_2822' & ‘p_2825') & ‘p_2828') & ‘p_2831') & ‘p_2834') & ‘p_2837') & ‘p_2840') & ‘p_2843') & ‘p_2846') & ‘p_2849')])}) | (Cons[int<number>,S[‘p'']] & Cons[int<number>,(‘n' | S[(((((((((‘p_2822' & ‘p_2825') & ‘p_2828') & ‘p_2831') & ‘p_2834') & ‘p_2837') & ‘p_2840') & ‘p_2843') & ‘p_2846') & ‘p_2849')])]))  <!<  α2766_2812'
//│ ╟── while constraining:  (α2766_2812' -> (0<int,number> | α2773_2817'))  <!<  ‹∀ 1. (((Nil & {size: (‘n' | S[(((((((((‘p_2822' & ‘p_2825') & ‘p_2828') & ‘p_2831') & ‘p_2834') & ‘p_2837') & ‘p_2840') & ‘p_2843') & ‘p_2846') & ‘p_2849')])}) | (Cons[int<number>,S['p43_2850'']] & Cons[int<number>,(‘n' | S[(((((((((‘p_2822' & ‘p_2825') & ‘p_2828') & ‘p_2831') & ‘p_2834') & ‘p_2837') & ‘p_2840') & ‘p_2843') & ‘p_2846') & ‘p_2849')])])) -> 'r42_2851')›
//│ ╟── while constraining:  ((α2766_2812' -> (0<int,number> | α2773_2817')),)  <!<  (‹∀ 1. (((Nil & {size: (‘n' | S[(((((((((‘p_2822' & ‘p_2825') & ‘p_2828') & ‘p_2831') & ‘p_2834') & ‘p_2837') & ‘p_2840') & ‘p_2843') & ‘p_2846') & ‘p_2849')])}) | (Cons[int<number>,S['p43_2850'']] & Cons[int<number>,(‘n' | S[(((((((((‘p_2822' & ‘p_2825') & ‘p_2828') & ‘p_2831') & ‘p_2834') & ‘p_2837') & ‘p_2840') & ‘p_2843') & ‘p_2846') & ‘p_2849')])])) -> 'r42_2851')›,)
//│ ╟── while constraining:  (‹∀ 1. (((Nil & {size: (‘n' | S[(((((((((‘p_2822' & ‘p_2825') & ‘p_2828') & ‘p_2831') & ‘p_2834') & ‘p_2837') & ‘p_2840') & ‘p_2843') & ‘p_2846') & ‘p_2849')])}) | (Cons[int<number>,S['p43_2850'']] & Cons[int<number>,(‘n' | S[(((((((((‘p_2822' & ‘p_2825') & ‘p_2828') & ‘p_2831') & ‘p_2834') & ‘p_2837') & ‘p_2840') & ‘p_2843') & ‘p_2846') & ‘p_2849')])])) -> 'r42_2851')› -> 'r42_2851')  <!<  (((α2766_2812' -> (0<int,number> | α2773_2817')),) -> α2774_2818')
//│ ╟── while constraining:  ‹∀ 0. (‹∀ 1. (((Nil & {size: (‘n' | S[(((((((((‘p_2822' & ‘p_2825') & ‘p_2828') & ‘p_2831') & ‘p_2834') & ‘p_2837') & ‘p_2840') & ‘p_2843') & ‘p_2846') & ‘p_2849')])}) | (Cons[int<number>,S['p43'']] & Cons[int<number>,(‘n' | S[(((((((((‘p_2822' & ‘p_2825') & ‘p_2828') & ‘p_2831') & ‘p_2834') & ‘p_2837') & ‘p_2840') & ‘p_2843') & ‘p_2846') & ‘p_2849')])])) -> 'r42')› -> 'r42')›  <!<  (((α2766_2812' -> (0<int,number> | α2773_2817')),) -> α2774_2818')
//│ ╟── while constraining:  Vec[int<number>,(‘n' | S[(((((((((‘p_2822' & ‘p_2825') & ‘p_2828') & ‘p_2831') & ‘p_2834') & ‘p_2837') & ‘p_2840') & ‘p_2843') & ‘p_2846') & ‘p_2849')])]  <!<  (((α2766_2812' -> (0<int,number> | α2773_2817')),) -> α2774_2818')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ((Nil & {size: ‘n'}) | (Cons[Int,S[‘p_2822'..‘p_2822']..S[‘p_2822'..‘p_2822']] & Cons[Int,‘n']))  <!<  ((nil<> & α2767_2813') | ((cons<> & α2768_2814') & ~(nil<>)))
//│ ╟── while constraining:  ((Nil & {size: ‘n'}) | (Cons[Int,S[‘p_2822'..‘p_2822']..S[‘p_2822'..‘p_2822']] & Cons[Int,‘n']))  <!<  α2766_2812'
//│ ╟── while constraining:  ((Nil & {size: ‘n'}) | (Cons[Int,S[‘p'']] & Cons[Int,‘n']))  <!<  α2766_2812'
//│ ╟── while constraining:  (α2766_2812' -> (0<int,number> | α2773_2817'))  <!<  ‹∀ 1. (((Nil & {size: ‘n'}) | (Cons[Int,S['p43_2820'']] & Cons[Int,‘n'])) -> 'r42_2821')›
//│ ╟── while constraining:  ((α2766_2812' -> (0<int,number> | α2773_2817')),)  <!<  (‹∀ 1. (((Nil & {size: ‘n'}) | (Cons[Int,S['p43_2820'']] & Cons[Int,‘n'])) -> 'r42_2821')›,)
//│ ╟── while constraining:  (‹∀ 1. (((Nil & {size: ‘n'}) | (Cons[Int,S['p43_2820'']] & Cons[Int,‘n'])) -> 'r42_2821')› -> 'r42_2821')  <!<  (((α2766_2812' -> (0<int,number> | α2773_2817')),) -> α2774_2818')
//│ ╟── while constraining:  ‹∀ 0. (‹∀ 1. (((Nil & {size: ‘n'}) | (Cons[Int,S['p43'']] & Cons[Int,‘n'])) -> 'r42')› -> 'r42')›  <!<  (((α2766_2812' -> (0<int,number> | α2773_2817')),) -> α2774_2818')
//│ ╟── while constraining:  Vec[Int,‘n']  <!<  (((α2766_2812' -> (0<int,number> | α2773_2817')),) -> α2774_2818')
//│ ╟── while constraining:  Vec[Int,‘n']  <!<  α2765_2811'
//│ ╟── while constraining:  (Vec[Int,‘n'],)  <!<  (α2765_2811',)
//│ ╟── while constraining:  (α2765_2811' -> α2774_2818')  <!<  (Vec[Int,‘n'] -> Int)
//│ ╟── while constraining:  sum2764_2810'  <!<  (Vec[Int,‘n'] -> Int)
//│ ╟── while constraining:  ‹∀ 0. sum2764'›  <!<  (Vec[Int,‘n'] -> Int)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. sum2764'››  <!<  (Vec[Int,‘n'] -> Int)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. sum2764'››  <!<  ‹∀ 0. (Vec[Int,'n2789'] -> Int)›


sum nil
//│ res: int

sum v1_0
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?sum, ?b, ?c, ?d, ?tail, ?head, ?e, ?f, ?g. ?sum <: (forall ?h. ?h) -> ?i` exceeded recursion depth limit (300)
//│ ║  l.375: 	sum v1_0
//│ ║         	^^^^^^^^
//│ ╟── while constraining:  ((α2766_2882 -> (0<int,number> | α2773_2887)),)  <!<  (‹∀ 1. (((Nil & {size: ('n1618_2895 | S[((((((((‘p_2940 & ‘p_2943) & ‘p_2946) & ‘p_2949) & ‘p_2952) & ‘p_2955) & ‘p_2958) & ‘p_2961) & ‘p_2964)])}) | (Cons['a1617_2893,S['p43_2965'']] & Cons['a1617_2893,('n1618_2895 | S[((((((((‘p_2940 & ‘p_2943) & ‘p_2946) & ‘p_2949) & ‘p_2952) & ‘p_2955) & ‘p_2958) & ‘p_2961) & ‘p_2964)])])) -> 'r42_2966)›,)
//│ ╟── while constraining:  (‹∀ 1. (((Nil & {size: ('n1618_2895 | S[((((((((‘p_2940 & ‘p_2943) & ‘p_2946) & ‘p_2949) & ‘p_2952) & ‘p_2955) & ‘p_2958) & ‘p_2961) & ‘p_2964)])}) | (Cons['a1617_2893,S['p43_2965'']] & Cons['a1617_2893,('n1618_2895 | S[((((((((‘p_2940 & ‘p_2943) & ‘p_2946) & ‘p_2949) & ‘p_2952) & ‘p_2955) & ‘p_2958) & ‘p_2961) & ‘p_2964)])])) -> 'r42_2966)› -> 'r42_2966)  <!<  (((α2766_2882 -> (0<int,number> | α2773_2887)),) -> α2774_2888)
//│ ╟── while constraining:  ‹∀ 0. (‹∀ 1. (((Nil & {size: ('n1618_2895 | S[((((((((‘p_2940 & ‘p_2943) & ‘p_2946) & ‘p_2949) & ‘p_2952) & ‘p_2955) & ‘p_2958) & ‘p_2961) & ‘p_2964)])}) | (Cons['a1617_2893,S['p43'']] & Cons['a1617_2893,('n1618_2895 | S[((((((((‘p_2940 & ‘p_2943) & ‘p_2946) & ‘p_2949) & ‘p_2952) & ‘p_2955) & ‘p_2958) & ‘p_2961) & ‘p_2964)])])) -> 'r42')› -> 'r42')›  <!<  (((α2766_2882 -> (0<int,number> | α2773_2887)),) -> α2774_2888)
//│ ╟── while constraining:  Vec['a1617_2893,('n1618_2895 | S[((((((((‘p_2940 & ‘p_2943) & ‘p_2946) & ‘p_2949) & ‘p_2952) & ‘p_2955) & ‘p_2958) & ‘p_2961) & ‘p_2964)])]  <!<  (((α2766_2882 -> (0<int,number> | α2773_2887)),) -> α2774_2888)
//│ ╟── while constraining:  Vec['a1617_2893,('n1618_2895 | S[((((((((‘p_2940 & ‘p_2943) & ‘p_2946) & ‘p_2949) & ‘p_2952) & ‘p_2955) & ‘p_2958) & ‘p_2961) & ‘p_2964)])]  <!<  α2765_2881
//│ ╟── while constraining:  Vec['a1617_2893,('n1618_2895 | S[((((((((‘p_2940 & ‘p_2943) & ‘p_2946) & ‘p_2949) & ‘p_2952) & ‘p_2955) & ‘p_2958) & ‘p_2961) & ‘p_2964)])]  <!<  tail2771_2885
//│ ╟── while constraining:  (cons<> & {Cons#N: mut (S[((((((((‘p_2940 & ‘p_2943) & ‘p_2946) & ‘p_2949) & ‘p_2952) & ‘p_2955) & ‘p_2958) & ‘p_2961) & ‘p_2964)] | 'n1618_2895)..((S[‘p_2964] & 'n1618_2895) | S[((((((((‘p_2940 & ‘p_2943) & ‘p_2946) & ‘p_2949) & ‘p_2952) & ‘p_2955) & ‘p_2958) & ‘p_2961) | ‘p_2964)]), size: S[('n1618_2895 | S[((((((((‘p_2940 & ‘p_2943) & ‘p_2946) & ‘p_2949) & ‘p_2952) & ‘p_2955) & ‘p_2958) & ‘p_2961) & ‘p_2964)])], Cons#A: mut ..'a1617_2893, tail: Vec['a1617_2893,('n1618_2895 | S[((((((((‘p_2940 & ‘p_2943) & ‘p_2946) & ‘p_2949) & ‘p_2952) & ‘p_2955) & ‘p_2958) & ‘p_2961) & ‘p_2964)])], head: 'a1617_2893})  <!<  {tail: tail2771_2885}
//│ ╟── while constraining:  (cons<> & {Cons#N: mut (S[((((((((‘p_2940 & ‘p_2943) & ‘p_2946) & ‘p_2949) & ‘p_2952) & ‘p_2955) & ‘p_2958) & ‘p_2961) & ‘p_2964)] | 'n1618_2895)..((S[‘p_2964] & 'n1618_2895) | S[((((((((‘p_2940 & ‘p_2943) & ‘p_2946) & ‘p_2949) & ‘p_2952) & ‘p_2955) & ‘p_2958) & ‘p_2961) | ‘p_2964)]), size: S[('n1618_2895 | S[((((((((‘p_2940 & ‘p_2943) & ‘p_2946) & ‘p_2949) & ‘p_2952) & ‘p_2955) & ‘p_2958) & ‘p_2961) & ‘p_2964)])], Cons#A: mut ..'a1617_2893, tail: Vec['a1617_2893,('n1618_2895 | S[((((((((‘p_2940 & ‘p_2943) & ‘p_2946) & ‘p_2949) & ‘p_2952) & ‘p_2955) & ‘p_2958) & ‘p_2961) & ‘p_2964)])], head: 'a1617_2893})  <!<  α2768_2884
//│ ╟── while constraining:  (Cons['a1617_2893,S[‘p_2964..‘p_2964]..S[‘p_2964..‘p_2964]] & Cons['a1617_2893,('n1618_2895 | S[(((((((‘p_2940 & ‘p_2943) & ‘p_2946) & ‘p_2949) & ‘p_2952) & ‘p_2955) & ‘p_2958) & ‘p_2961)])])  <!<  ((nil<> & α2767_2883) | ((cons<> & α2768_2884) & ~(nil<>)))
//│ ╟── while constraining:  ((Nil & {size: ('n1618_2895 | S[(((((((‘p_2940 & ‘p_2943) & ‘p_2946) & ‘p_2949) & ‘p_2952) & ‘p_2955) & ‘p_2958) & ‘p_2961)])}) | (Cons['a1617_2893,S[‘p_2964..‘p_2964]..S[‘p_2964..‘p_2964]] & Cons['a1617_2893,('n1618_2895 | S[(((((((‘p_2940 & ‘p_2943) & ‘p_2946) & ‘p_2949) & ‘p_2952) & ‘p_2955) & ‘p_2958) & ‘p_2961)])]))  <!<  ((nil<> & α2767_2883) | ((cons<> & α2768_2884) & ~(nil<>)))
//│ ╟── while constraining:  ((Nil & {size: ('n1618_2895 | S[(((((((‘p_2940 & ‘p_2943) & ‘p_2946) & ‘p_2949) & ‘p_2952) & ‘p_2955) & ‘p_2958) & ‘p_2961)])}) | (Cons['a1617_2893,S[‘p_2964..‘p_2964]..S[‘p_2964..‘p_2964]] & Cons['a1617_2893,('n1618_2895 | S[(((((((‘p_2940 & ‘p_2943) & ‘p_2946) & ‘p_2949) & ‘p_2952) & ‘p_2955) & ‘p_2958) & ‘p_2961)])]))  <!<  α2766_2882
//│ ╟── while constraining:  ((Nil & {size: ('n1618_2895 | S[(((((((‘p_2940 & ‘p_2943) & ‘p_2946) & ‘p_2949) & ‘p_2952) & ‘p_2955) & ‘p_2958) & ‘p_2961)])}) | (Cons['a1617_2893,S[‘p']] & Cons['a1617_2893,('n1618_2895 | S[(((((((‘p_2940 & ‘p_2943) & ‘p_2946) & ‘p_2949) & ‘p_2952) & ‘p_2955) & ‘p_2958) & ‘p_2961)])]))  <!<  α2766_2882
//│ ╟── while constraining:  (α2766_2882 -> (0<int,number> | α2773_2887))  <!<  ‹∀ 1. (((Nil & {size: ('n1618_2895 | S[(((((((‘p_2940 & ‘p_2943) & ‘p_2946) & ‘p_2949) & ‘p_2952) & ‘p_2955) & ‘p_2958) & ‘p_2961)])}) | (Cons['a1617_2893,S['p43_2962'']] & Cons['a1617_2893,('n1618_2895 | S[(((((((‘p_2940 & ‘p_2943) & ‘p_2946) & ‘p_2949) & ‘p_2952) & ‘p_2955) & ‘p_2958) & ‘p_2961)])])) -> 'r42_2963)›
//│ ╟── while constraining:  ((α2766_2882 -> (0<int,number> | α2773_2887)),)  <!<  (‹∀ 1. (((Nil & {size: ('n1618_2895 | S[(((((((‘p_2940 & ‘p_2943) & ‘p_2946) & ‘p_2949) & ‘p_2952) & ‘p_2955) & ‘p_2958) & ‘p_2961)])}) | (Cons['a1617_2893,S['p43_2962'']] & Cons['a1617_2893,('n1618_2895 | S[(((((((‘p_2940 & ‘p_2943) & ‘p_2946) & ‘p_2949) & ‘p_2952) & ‘p_2955) & ‘p_2958) & ‘p_2961)])])) -> 'r42_2963)›,)
//│ ╟── while constraining:  (‹∀ 1. (((Nil & {size: ('n1618_2895 | S[(((((((‘p_2940 & ‘p_2943) & ‘p_2946) & ‘p_2949) & ‘p_2952) & ‘p_2955) & ‘p_2958) & ‘p_2961)])}) | (Cons['a1617_2893,S['p43_2962'']] & Cons['a1617_2893,('n1618_2895 | S[(((((((‘p_2940 & ‘p_2943) & ‘p_2946) & ‘p_2949) & ‘p_2952) & ‘p_2955) & ‘p_2958) & ‘p_2961)])])) -> 'r42_2963)› -> 'r42_2963)  <!<  (((α2766_2882 -> (0<int,number> | α2773_2887)),) -> α2774_2888)
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 4. {α1632_2918''''' where: α1616_2892 <: α60_2905''''', α1615_2901 <: α59_2915'''''}›  <!<  ((nil<> & α2767_2883) | ((cons<> & α2768_2884) & ~(nil<>)))
//│ ╟── while constraining:  ‹∀ 4. {α1632_2918''''' where: α1616_2892 <: α60_2905''''', α1615_2901 <: α59_2915'''''}›  <!<  α2766_2882
//│ ╟── while constraining:  (‹∀ 4. {α1632_2918''''' where: α1616_2892 <: α60_2905''''', α1615_2901 <: α59_2915'''''}›,)  <!<  (α2766_2882,)
//│ ╟── while constraining:  (α2766_2882 -> (0<int,number> | α2773_2887))  <!<  ((‹∀ 4. {α1632_2918''''' where: α1616_2892 <: α60_2905''''', α1615_2901 <: α59_2915'''''}›,) -> α1653_2924)
//│ ╟── while constraining:  (α2766_2882 -> (0<int,number> | α2773_2887))  <!<  α1619_2923
//│ ╟── while constraining:  ((α2766_2882 -> (0<int,number> | α2773_2887)),)  <!<  (α1619_2923,)
//│ ╟── while constraining:  (α1619_2923 -> α1653_2924)  <!<  (((α2766_2882 -> (0<int,number> | α2773_2887)),) -> α2774_2888)
//│ ╟── while constraining:  ‹∀ 3. (α1619_2891'''' -> α1653_2922'''')›  <!<  (((α2766_2882 -> (0<int,number> | α2773_2887)),) -> α2774_2888)
//│ ╟── while constraining:  α2132_2890  <!<  (((α2766_2882 -> (0<int,number> | α2773_2887)),) -> α2774_2888)
//│ ╟── while constraining:  ‹∀ 0. α2132'›  <!<  (((α2766_2882 -> (0<int,number> | α2773_2887)),) -> α2774_2888)
//│ ╟── while constraining:  ‹∀ 0. α2132'›  <!<  α2765_2881
//│ ╟── while constraining:  (‹∀ 0. α2132'›,)  <!<  (α2765_2881,)
//│ ╟── while constraining:  (α2765_2881 -> α2774_2888)  <!<  ((‹∀ 0. α2132'›,) -> α2879)
//│ ╟── while constraining:  sum2764_2880  <!<  ((‹∀ 0. α2132'›,) -> α2879)
//│ ╙── while constraining:  ‹∀ 0. sum2764'›  <!<  ((‹∀ 0. α2132'›,) -> α2879)
//│ res: error

sum v2
//│ res: error




// === === === ERROR CASES === === === //


:ShowRelativeLineNums
:AllowTypeErrors


def head1_ty v = case v of {
  | Nil -> impossible v.size
  | Cons -> v.head
  }
//│ ((Cons[?, ?]\size\tail with {head: 'head}) | Nil & {size: nothing}) -> 'head
//│   <:  head1_ty:
//│ Vec['a, S['p]] -> 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	def head1_ty v = case v of {
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+2: 	  | Nil -> impossible v.size
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+3: 	  | Cons -> v.head
//│ ║        	^^^^^^^^^^^^^^^^^^
//│ ║  l.+4: 	  }
//│ ║        	^^^
//│ ╟── type `(forall ?p. (Cons[‘a, in S[in ‘p & ?p out ?p | ‘p] out S[in ?p | ‘p out ‘p & ?p]] | (Nil with {size: S[‘p]})) -> ?r) -> ?r` does not match type `Cons[?, ?] & ?a | Nil & ?b`
//│ ║  l.21: 	type Vec[A, N] = forall 'r. (forall 'p. (Nil & { size: N } | Cons[A, S['p]] & Cons[A, N]) -> 'r) -> 'r
//│ ║        	                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.+1: 	def head1_ty v = case v of {
//│ ╙──      	                      ^


sum v1_ty
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	sum v1_ty
//│ ║        	^^^^^^^^^
//│ ╟── type `Cons[int, Z]` is not a function
//│ ║  l.176: 	v1_ty = v1_ : Cons[int, Z]
//│ ║         	              ^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `(?a -> ?b) -> ?c`
//│ ║  l.+1: 	sum v1_ty
//│ ║        	    ^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.317: 	rec def sum vec = vec (fun v -> case v of {
//│ ║         	                  ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.318: 	  | Nil -> 0
//│ ║         	^^^^^^^^^^^^
//│ ║  l.319: 	  | Cons -> v.head + sum v.tail
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.320: 	  })
//│ ║         	^^^^
//│ ╟── from reference:
//│ ║  l.317: 	rec def sum vec = vec (fun v -> case v of {
//│ ╙──       	                  ^^^
//│ res: error


