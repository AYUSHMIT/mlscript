
:GeneralizeCurriedFunctions
:ArgGen // Type of cons is much simpler without this...

:AllowTypeErrors // FIXME


class Z
class S[P]
  method Inv: P -> P
  method Inv = id
//│ Defined class Z
//│ Defined class S[=P]
//│ Declared S.Inv: S['P] -> 'P -> 'P
//│ Defined S.Inv: S['P] -> (forall 'a. 'a -> 'a)

:IrregularTypes

class Cons[A, N]: { size: S[N]; head: A; tail: Vec[A, N] }
class Nil: { size: Z }
type Vec[A, N] = forall 'r. (forall 'p. (Nil & { size: N } | Cons[A, S['p]] & Cons[A, N]) -> 'r) -> 'r
//│ Defined class Cons[+A, =N]
//│ Defined class Nil
//│ Defined type alias Vec[+A, =N]

type AnyVec[A] = forall 'r. (forall 'p. Nil | Cons[A, S['p]] -> 'r) -> 'r
//│ Defined type alias AnyVec[+A]

def Nil = Nil { size = Z{} }
def Cons head tail = Cons { head; tail; size = S{} }
//│ Nil: Nil
//│ Cons: 'a -> (forall 'N, 'b, 'tail, 'head, 'c, 'A. (Vec['A, 'N] & 'b & 'tail) -> ((Cons['A | 'a, 'N] with {head: 'head | 'a, tail: 'tail}) | 'c))


def nil k = k Nil
def cons h t k = k (Cons h t)
//│ nil: (Nil -> 'a & 'b) -> 'a
//│ cons: 'a -> (forall 'A, 'N, 'N0, 'b. (Vec['A, in 'N out 'N | 'N0] & 'b) -> (forall 'c, 'd. ((forall 'A0, 'head, 'tail, 'e, 'N1, 'f. (Cons['A | 'A0 | 'a | 'f, 'N1] with {head: 'head | 'a | 'f, tail: 'tail | 'b}) | 'e) -> 'c & 'd) -> 'c))
//│   where
//│     'N1 :> 'N
//│         <: 'N0

nil_ty = nil : Vec[int, Z]
//│ nil_ty: Vec[int, Z]

def cons_ty : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ cons_ty: 'a -> Vec['a, 'n] -> Vec['a, S['n]]

// FIXME runs out of fuel, making the test very slow...
// cons_ty = cons : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]

// FIXME runs out of fuel, making the test very slow...
// cons_ty2 = cons : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]

type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ Defined type alias Cons_ty












// :exit
// ====================================================================================================


















cons_ty = cons : Cons_ty
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.89: 	cons_ty = cons : Cons_ty
//│ ║        	          ^^^^
//│ ╟── expression of type `S[in ‘n_295 & ?p out ‘n_295 & ?p0]` is not an instance of type `'n_295`
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.55: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	                                        ^^
//│ ╟── Note: class type parameter N is defined at:
//│ ║  l.19: 	class Cons[A, N]: { size: S[N]; head: A; tail: Vec[A, N] }
//│ ╙──      	              ^
//│ Cons_ty
//│   <:  cons_ty:
//│ 'a -> Vec['a, 'n] -> Vec['a, S['n]]

cons_ty3 = cons : Cons_ty
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.104: 	cons_ty3 = cons : Cons_ty
//│ ║         	           ^^^^
//│ ╟── expression of type `S[in ‘n_354 & ?p out ‘n_354 & ?p0]` is not an instance of type `'n_354`
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.55: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	                                        ^^
//│ ╟── Note: class type parameter N is defined at:
//│ ║  l.19: 	class Cons[A, N]: { size: S[N]; head: A; tail: Vec[A, N] }
//│ ╙──      	              ^
//│ cons_ty3: Cons_ty

def cons h (t: Vec['a, 'n]) k = k (Cons h t)
//│ cons: 'b -> (forall 'a, 'n. Vec['a, 'n] -> (forall 'c, 'd. ((forall 'N, 'e, 'f, 'tail, 'A, 'head. (Cons['a | 'A | 'b | 'f, 'N] with {head: 'head | 'b | 'f, tail: 'tail | Vec['a, 'n]}) | 'e) -> 'c & 'd) -> 'c))
//│   where
//│     'N := 'n

cons : Cons_ty
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.122: 	cons : Cons_ty
//│ ║         	^^^^
//│ ╟── expression of type `S[in ‘n_508 & ?p out ‘n_508 & ?p0]` is not an instance of type `'n_508`
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.55: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	                                        ^^
//│ ╟── from type variable:
//│ ║  l.117: 	def cons h (t: Vec['a, 'n]) k = k (Cons h t)
//│ ║         	                       ^^
//│ ╟── Note: class type parameter N is defined at:
//│ ║  l.19: 	class Cons[A, N]: { size: S[N]; head: A; tail: Vec[A, N] }
//│ ╙──      	              ^
//│ res: Cons_ty

def cons h (t: Vec['a, 'n]) k = k (Cons h t)
//│ cons: 'b -> (forall 'a, 'n. Vec['a, 'n] -> (forall 'c, 'd. ((forall 'tail, 'A, 'head, 'e, 'N, 'f. (Cons['a | 'A | 'b | 'e, 'N] with {head: 'head | 'b | 'e, tail: 'tail | Vec['a, 'n]}) | 'f) -> 'c & 'd) -> 'c))
//│   where
//│     'N := 'n

cons : Cons_ty
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.143: 	cons : Cons_ty
//│ ║         	^^^^
//│ ╟── expression of type `S[in ‘n_656 & ?p out ‘n_656 & ?p0]` is not an instance of type `'n_656`
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.55: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	                                        ^^
//│ ╟── from type variable:
//│ ║  l.138: 	def cons h (t: Vec['a, 'n]) k = k (Cons h t)
//│ ║         	                       ^^
//│ ╟── Note: class type parameter N is defined at:
//│ ║  l.19: 	class Cons[A, N]: { size: S[N]; head: A; tail: Vec[A, N] }
//│ ╙──      	              ^
//│ res: Cons_ty


// v0 = nil

// v0_ty = v0 : Vec[int, Z]

v1_ = Cons 1 nil
//│ v1_: Cons[1, 'P] with {tail: forall 'a, 'b. (Nil -> 'a & 'b) -> 'a}
//│   where
//│     'P :> Z

v1_ty = v1_ : Cons[int, Z]
//│ v1_ty: Cons[int, Z]

v1_0 = cons 1 nil
//│ v1_0: ((forall 'tail, 'N, 'head, 'A, 'a, 'b. (Cons[1 | 'A | 'a, 'N] with {head: 1 | 'head | 'a, tail: 'tail | Vec['A, 'n]}) | 'b) -> 'c & 'd) -> 'c
//│   where
//│     'N := 'n
//│     'n :> Z

v1_0 : Vec[int, S[Z]]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.178: 	v1_0 : Vec[int, S[Z]]
//│ ║         	^^^^
//│ ╟── application of type `Z` is not an instance of type `S`
//│ ║  l.29: 	def Nil = Nil { size = Z{} }
//│ ║        	                       ^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.178: 	v1_0 : Vec[int, S[Z]]
//│ ║         	                ^^^^
//│ ╟── Note: class Z is defined at:
//│ ║  l.8: 	class Z
//│ ╙──     	      ^
//│ res: Vec[int, S[Z]]

v1_1 k = k v1_
//│ v1_1: ((forall 'P. Cons[1, 'P] with {tail: forall 'a, 'b. (Nil -> 'a & 'b) -> 'a}) -> 'c & 'd) -> 'c
//│   where
//│     'P :> Z

// :e
v1_1 : Vec[int, S[Z]]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.199: 	v1_1 : Vec[int, S[Z]]
//│ ║         	^^^^
//│ ╟── application of type `Z` is not an instance of type `S`
//│ ║  l.29: 	def Nil = Nil { size = Z{} }
//│ ║        	                       ^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.199: 	v1_1 : Vec[int, S[Z]]
//│ ║         	                ^^^^
//│ ╟── Note: class Z is defined at:
//│ ║  l.8: 	class Z
//│ ╙──     	      ^
//│ res: Vec[int, S[Z]]


v1_tty = cons_ty 1 nil_ty
//│ v1_tty: Vec[int, S['n]]
//│   where
//│     'n :> Z
//│        <: S[?] | Z

v1_tty = cons_ty2 1 nil_ty
//│ ╔══[ERROR] identifier not found: cons_ty2
//│ ║  l.221: 	v1_tty = cons_ty2 1 nil_ty
//│ ╙──       	         ^^^^^^^^
//│ v1_tty: error

v1_tty = cons_ty3 1 nil_ty
//│ v1_tty: Vec[int, S['n]]
//│   where
//│     'n :> Z
//│        <: S[?] | Z


v2 = cons 1 (cons 2 nil)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.234: 	v2 = cons 1 (cons 2 nil)
//│ ║         	     ^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Z` is not an instance of type `S`
//│ ║  l.29: 	def Nil = Nil { size = Z{} }
//│ ║        	                       ^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.21: 	type Vec[A, N] = forall 'r. (forall 'p. (Nil & { size: N } | Cons[A, S['p]] & Cons[A, N]) -> 'r) -> 'r
//│ ║        	                                                                     ^^^^^
//│ ╟── Note: class Z is defined at:
//│ ║  l.8: 	class Z
//│ ╙──     	      ^
//│ v2: error


def impossible x = case x of {}
//│ impossible: nothing -> nothing

def head1 vec = vec (fun v -> case v of {
  | Nil -> impossible v.size
  | Cons -> v.head
  })
//│ head1: ((forall 'a, 'b, 'c, 'head, 'd. ('d & ((Cons['a, ?]\size\tail with {head: 'head}) & 'a | Nil & {size: nothing} & 'c)) -> ('head | 'b)) -> 'e & 'f) -> 'e

def head1_ty : Vec['a, S['p]] -> 'a
head1_ty = head1
//│ head1_ty: Vec['a, S['p]] -> 'a
//│ ((forall 'a, 'b, 'c, 'head, 'd. ('b & ((Cons['d, ?]\size\tail with {head: 'head}) & 'd | Nil & {size: nothing} & 'c)) -> ('head | 'a)) -> 'e & 'f) -> 'e
//│   <:  head1_ty:
//│ Vec['a, S['p]] -> 'a

// FIXME works without `:GeneralizeCurriedFunctions`!
def head2 (vec: Vec['a, S['p]]) = vec (fun v -> case v of {
  | Nil -> impossible v.size
  | Cons -> v.head
  })
//│ head2: Vec['a, S['p]] -> ('a | 'head | 'b | 'c)

head1 v1
head1 v2
//│ ╔══[ERROR] identifier not found: v1
//│ ║  l.273: 	head1 v1
//│ ╙──       	      ^^
//│ res: error
//│ res: error

:e
head1 nil
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.282: 	head1 nil
//│ ║         	^^^^^^^^^
//│ ╟── application of type `Z` does not match type `nothing`
//│ ║  l.29: 	def Nil = Nil { size = Z{} }
//│ ║        	                       ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.250: 	def impossible x = case x of {}
//│ ║         	                        ^
//│ ╟── from field selection:
//│ ║  l.254: 	  | Nil -> impossible v.size
//│ ║         	                      ^^^^^^
//│ ╟── Note: class Z is defined at:
//│ ║  l.8: 	class Z
//│ ╙──     	      ^
//│ res: error


rec def sum vec = vec (fun v -> case v of {
  | Nil -> 0
  | Cons -> v.head + sum v.tail
  })
//│ sum: ((forall 'head, 'a, 'b, 'tail, 'c, 'd. 'd -> (int | 'c)) -> 'e & 'f) -> 'e
//│   where
//│     'd <: Cons['head, ?] & 'a | Nil & 'b
//│     'a <: {head: int & 'head, tail: 'tail}
//│     'tail <: (forall 'head, 'a, 'b, 'tail, 'c, 'd. 'd -> (int | 'c)) -> (int & 'head)

def sum_ty : Vec[int, 'n] -> int
//│ sum_ty: Vec[int, 'n] -> int

// FIXME should be a cycle error
sum_ty = sum
//│ ((forall 'tail, 'a, 'b, 'c, 'd, 'head. 'a -> (int | 'b)) -> 'e & 'f) -> 'e
//│   where
//│     'a <: Cons['head, ?] & 'd | Nil & 'c
//│     'd <: {head: int & 'head, tail: 'tail}
//│     'tail <: (forall 'tail, 'a, 'b, 'c, 'd, 'head. 'a -> (int | 'b)) -> (int & 'head)
//│   <:  sum_ty:
//│ Vec[int, 'n] -> int
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition; a type annotation may be required
//│ ║  l.315: 	sum_ty = sum
//│ ║         	^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  Vec[int<number>,(‘n_1313' | S[⊥])]  <:  tail1231_1353''''    TypeRef  TypeVariable
//│ ╙──  ... looks like:  Vec[int<number>,(‘n_1313' | S[⊥])]  <:  tail1231_1319'''


sum nil
//│ res: int

sum v1_0
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.334: 	sum v1_0
//│ ║         	^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  Vec['a551_1411,('n552_1405 | S[⊥])]  <:  tail1231_1454'''    TypeRef  TypeVariable
//│ ╙──  ... looks like:  Vec['a551_788',('n552_789' | S[⊥])]  <:  tail1231_1390'''
//│ res: error

sum v2
//│ res: error




// === === === ERROR CASES === === === //


:ShowRelativeLineNums
:AllowTypeErrors


def head1_ty v = case v of {
  | Nil -> impossible v.size
  | Cons -> v.head
  }
//│ ('a & ((Cons['b, ?]\size\tail with {head: 'head}) & 'b | Nil & {size: nothing} & 'c)) -> ('head | 'd)
//│   <:  head1_ty:
//│ Vec['a, S['p]] -> 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	def head1_ty v = case v of {
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+2: 	  | Nil -> impossible v.size
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+3: 	  | Cons -> v.head
//│ ║        	^^^^^^^^^^^^^^^^^^
//│ ║  l.+4: 	  }
//│ ║        	^^^
//│ ╟── type `(forall ?p. (Cons[‘a_1515, S[in ‘p_1516 & ?p out ?p | ‘p_1516]] | (Nil with {size: S[‘p_1516]})) -> ?r) -> ?r` does not match type `Cons[?, ?] & ?a | Nil & ?b`
//│ ║  l.21: 	type Vec[A, N] = forall 'r. (forall 'p. (Nil & { size: N } | Cons[A, S['p]] & Cons[A, N]) -> 'r) -> 'r
//│ ║        	                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.+1: 	def head1_ty v = case v of {
//│ ╙──      	                      ^


sum v1_ty
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	sum v1_ty
//│ ║        	^^^^^^^^^
//│ ╟── type `Cons[int, Z]` is not a function
//│ ║  l.169: 	v1_ty = v1_ : Cons[int, Z]
//│ ║         	              ^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `(forall ?a, ?b, ?c, ?head, ?tail, ?d. ?b -> ?a) -> ?e`
//│ ║  l.+1: 	sum v1_ty
//│ ║        	    ^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.301: 	rec def sum vec = vec (fun v -> case v of {
//│ ║         	                  ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.302: 	  | Nil -> 0
//│ ║         	^^^^^^^^^^^^
//│ ║  l.303: 	  | Cons -> v.head + sum v.tail
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.304: 	  })
//│ ║         	^^^^
//│ ╟── from reference:
//│ ║  l.301: 	rec def sum vec = vec (fun v -> case v of {
//│ ╙──       	                  ^^^
//│ res: error


