
:GeneralizeCurriedFunctions
:ArgGen // Type of cons is much simpler without this...

:AllowTypeErrors // FIXME


class Z
class S[P]
  method Inv: P -> P
  method Inv = id
//│ Defined class Z
//│ Defined class S[=P]
//│ Declared S.Inv: S['P] -> 'P -> 'P
//│ Defined S.Inv: S['P] -> (forall 'a. 'a -> 'a)

:IrregularTypes

class Cons[A, N]: { size: S[N]; head: A; tail: Vec[A, N] }
class Nil: { size: Z }
type Vec[A, N] = forall 'r. (forall 'p. (Nil & { size: N } | Cons[A, S['p]] & Cons[A, N]) -> 'r) -> 'r
//│ Defined class Cons[+A, =N]
//│ Defined class Nil
//│ Defined type alias Vec[+A, =N]

type AnyVec[A] = forall 'r. (forall 'p. Nil | Cons[A, S['p]] -> 'r) -> 'r
//│ Defined type alias AnyVec[+A]

def Nil = Nil { size = Z{} }
def Cons head tail = Cons { head; tail; size = S{} }
//│ Nil: Nil
//│ Cons: 'head -> (forall 'head, 'head0, 'A, 'N, 'tail. ((Vec['A, 'N] & 'tail) -> (Cons['A | 'head, 'N] with {head: 'head0 | 'head, tail: 'tail})
//│   where
//│     'head <: 'head0 & 'A))


def nil k = k Nil
def cons h t k = k (Cons h t)
//│ nil: (Nil -> 'a) -> 'a
//│ cons: 'a -> (forall 'a, 'tail, 'A, 'N, 'N0. ((Vec['A, in 'N out 'N | 'N0] & 'tail) -> (forall 'a, 'tail, 'N, 'N0, 'A0, 'N1, 'N2, 'tail0. (((forall 'a, 'tail, 'A, 'N, 'N0, 'A0, 'N1, 'N2, 'tail0, 'A1, 'N3, 'tail1. (Cons['A0 | 'A | 'A1, 'N3] with {head: nothing, tail: 'tail0 | 'tail | 'tail1}
//│   where
//│     'a <: 'a
//│     'tail <: Vec['A1, 'N3] & 'tail1
//│     'a <: 'a
//│     'tail <: Vec['A1, 'N3] & 'tail1)) -> 'b) -> 'b
//│   where
//│     'a <: 'a
//│     'tail <: Vec['A0, in 'N0 & 'N1 out 'N | 'N1 | 'N2] & 'tail0))
//│   where
//│     'a <: 'a))
//│   where
//│     'N3 :> 'N | 'N1
//│         <: 'N0 & 'N2

nil_ty = nil : Vec[int, Z]
//│ nil_ty: Vec[int, Z]

def cons_ty : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ cons_ty: 'a -> Vec['a, 'n] -> Vec['a, S['n]]

cons_ty = cons : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.61: 	cons_ty = cons : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	          ^^^^
//│ ╟── type `‘a` is not an instance of type `'a348`
//│ ║  l.61: 	cons_ty = cons : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.61: 	cons_ty = cons : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ╙──      	                        ^^
//│ 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│   <:  cons_ty:
//│ 'a -> Vec['a, 'n] -> Vec['a, S['n]]

cons_ty2 = cons : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.75: 	cons_ty2 = cons : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	           ^^^^
//│ ╟── type `‘a` is not an instance of type `'a500`
//│ ║  l.75: 	cons_ty2 = cons : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	                         ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.75: 	cons_ty2 = cons : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ╙──      	                         ^^
//│ cons_ty2: 'a -> Vec['a, 'n] -> Vec['a, S['n]]

type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ Defined type alias Cons_ty

cons_ty = cons : Cons_ty
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.90: 	cons_ty = cons : Cons_ty
//│ ║        	          ^^^^
//│ ╟── type `‘a` is not an instance of type `'a646`
//│ ║  l.87: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	                      ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.87: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ╙──      	                      ^^
//│ Cons_ty
//│   <:  cons_ty:
//│ 'a -> Vec['a, 'n] -> Vec['a, S['n]]

cons_ty3 = cons : Cons_ty
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.104: 	cons_ty3 = cons : Cons_ty
//│ ║         	           ^^^^
//│ ╟── type `‘a` is not an instance of type `'a793`
//│ ║  l.87: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	                      ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.87: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ╙──      	                      ^^
//│ cons_ty3: Cons_ty

def cons h (t: Vec['a, 'n]) k = k (Cons h t)
//│ cons: 'b -> (forall 'b, 'a, 'n. (Vec['a, 'n] -> (forall 'b, 'n, 'c, 'A, 'tail. (((forall 'b, 'a, 'n, 'c, 'A, 'tail, 'A0, 'tail0. (Cons['a | 'A0 | 'A, 'n] with {head: nothing, tail: 'tail0 | 'tail | Vec['a, 'n]}
//│   where
//│     'c <: Vec['A0, 'n] & 'tail0
//│     'b <: 'b
//│     'c <: Vec['A0, 'n] & 'tail0
//│     'b <: 'b)) -> 'd) -> 'd
//│   where
//│     'c <: Vec['A, 'n] & 'tail
//│     'b <: 'b))
//│   where
//│     'b <: 'b))

cons : Cons_ty
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.129: 	cons : Cons_ty
//│ ║         	^^^^
//│ ╟── type `‘a` is not an instance of type `'a1050`
//│ ║  l.87: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	                      ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.87: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ╙──      	                      ^^
//│ res: Cons_ty

def cons h (t: Vec['a, 'n]) k = k (Cons h t)
//│ cons: 'b -> (forall 'b, 'a, 'n. (Vec['a, 'n] -> (forall 'b, 'n, 'c, 'A, 'tail. (((forall 'b, 'a, 'n, 'c, 'A, 'tail, 'A0, 'tail0. (Cons['a | 'A | 'A0, 'n] with {head: nothing, tail: 'tail | 'tail0 | Vec['a, 'n]}
//│   where
//│     'b <: 'b
//│     'c <: Vec['A0, 'n] & 'tail0
//│     'b <: 'b
//│     'c <: Vec['A0, 'n] & 'tail0)) -> 'd) -> 'd
//│   where
//│     'b <: 'b
//│     'c <: Vec['A, 'n] & 'tail))
//│   where
//│     'b <: 'b))

cons : Cons_ty
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.154: 	cons : Cons_ty
//│ ║         	^^^^
//│ ╟── type `‘a` is not an instance of type `'a1299`
//│ ║  l.87: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	                      ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.87: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ╙──      	                      ^^
//│ res: Cons_ty


// v0 = nil

// v0_ty = v0 : Vec[int, Z]

v1_ = Cons 1 nil
//│ v1_: Cons[1, 'P] with {tail: forall 'a. (Nil -> 'a) -> 'a}

v1_ty = v1_ : Cons[int, Z]
//│ v1_ty: Cons[int, Z]

v1_0 = cons 1 nil
//│ v1_0: ((forall 'a, 'b, 'A, 'N, 'n, 'N0, 'tail, 'A0, 'N1, 'tail0. (Cons['A | 'A0, 'N1] with {head: nothing, tail: 'tail | 'tail0 | Vec[nothing, 'n]}
//│   where
//│     'a <: anything
//│     'b <: Vec['A0, 'N1] & 'tail0
//│     'a <: anything
//│     'b <: Vec['A0, 'N1] & 'tail0)) -> 'c) -> 'c
//│   where
//│     'a <: anything
//│     'b <: Vec['A, in 'n & 'N out 'N | 'N0] & 'tail
//│   where
//│     'N1 :> 'N
//│         <: 'n & 'N0

v1_0 : Vec[int, S[Z]]
//│ res: Vec[int, S[Z]]

v1_1 k = k v1_
//│ v1_1: ((forall 'P. Cons[1, 'P] with {tail: forall 'a. (Nil -> 'a) -> 'a}) -> 'b) -> 'b

:e
v1_1 : Vec[int, S[Z]]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.198: 	v1_1 : Vec[int, S[Z]]
//│ ║         	^^^^
//│ ╟── application of type `Z` does not match type `nothing`
//│ ║  l.29: 	def Nil = Nil { size = Z{} }
//│ ║        	                       ^^^
//│ ╟── Note: class Z is defined at:
//│ ║  l.8: 	class Z
//│ ╙──     	      ^
//│ res: Vec[int, S[Z]]


v1_tty = cons_ty 1 nil_ty
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.211: 	v1_tty = cons_ty 1 nil_ty
//│ ║         	         ^^^^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of type `'n`
//│ ║  l.55: 	nil_ty = nil : Vec[int, Z]
//│ ╙──      	                        ^
//│ v1_tty: error

v1_tty = cons_ty2 1 nil_ty
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.220: 	v1_tty = cons_ty2 1 nil_ty
//│ ║         	         ^^^^^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of type `'n`
//│ ║  l.55: 	nil_ty = nil : Vec[int, Z]
//│ ╙──      	                        ^
//│ v1_tty: error

v1_tty = cons_ty3 1 nil_ty
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.229: 	v1_tty = cons_ty3 1 nil_ty
//│ ║         	         ^^^^^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of type `'n676`
//│ ║  l.55: 	nil_ty = nil : Vec[int, Z]
//│ ╙──      	                        ^
//│ v1_tty: error


v2 = cons 1 (cons 2 nil)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.239: 	v2 = cons 1 (cons 2 nil)
//│ ║         	     ^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `‘n` is not an instance of type `S`
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.21: 	type Vec[A, N] = forall 'r. (forall 'p. (Nil & { size: N } | Cons[A, S['p]] & Cons[A, N]) -> 'r) -> 'r
//│ ╙──      	                                                                     ^^^^^
//│ v2: error


def impossible x = case x of {}
//│ impossible: nothing -> nothing

def head1 vec = vec (fun v -> case v of {
  | Nil -> impossible v.size
  | Cons -> v.head
  })
//│ head1: ((forall 'head. ((Cons[?, ?]\size\tail with {head: 'head}) | Nil & {size: nothing}) -> 'head) -> 'a) -> 'a

def head1_ty : Vec['a, S['p]] -> 'a
head1_ty = head1
//│ head1_ty: Vec['a, S['p]] -> 'a
//│ ((forall 'head. ((Cons[?, ?]\size\tail with {head: 'head}) | Nil & {size: nothing}) -> 'head) -> 'a) -> 'a
//│   <:  head1_ty:
//│ Vec['a, S['p]] -> 'a

// FIXME works without `:GeneralizeCurriedFunctions`!
def head2 (vec: Vec['a, S['p]]) = vec (fun v -> case v of {
  | Nil -> impossible v.size
  | Cons -> v.head
  })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.267: 	def head2 (vec: Vec['a, S['p]]) = vec (fun v -> case v of {
//│ ║         	                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.268: 	  | Nil -> impossible v.size
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.269: 	  | Cons -> v.head
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ║  l.270: 	  })
//│ ║         	^^^^
//│ ╟── type `‘a` is not an instance of type `'r`
//│ ║  l.267: 	def head2 (vec: Vec['a, S['p]]) = vec (fun v -> case v of {
//│ ║         	                    ^^
//│ ╟── but it flows into field selection with expected type `‘r`
//│ ║  l.269: 	  | Cons -> v.head
//│ ║         	            ^^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.21: 	type Vec[A, N] = forall 'r. (forall 'p. (Nil & { size: N } | Cons[A, S['p]] & Cons[A, N]) -> 'r) -> 'r
//│ ╙──      	                        ^^
//│ head2: Vec[?, S['p]] -> error

head1 v1
head1 v2
//│ ╔══[ERROR] identifier not found: v1
//│ ║  l.291: 	head1 v1
//│ ╙──       	      ^^
//│ res: error
//│ res: error

:e
head1 nil
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.300: 	head1 nil
//│ ║         	^^^^^^^^^
//│ ╟── application of type `Z` does not match type `nothing`
//│ ║  l.29: 	def Nil = Nil { size = Z{} }
//│ ║        	                       ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.250: 	def impossible x = case x of {}
//│ ║         	                        ^
//│ ╟── from field selection:
//│ ║  l.254: 	  | Nil -> impossible v.size
//│ ║         	                      ^^^^^^
//│ ╟── Note: class Z is defined at:
//│ ║  l.8: 	class Z
//│ ╙──     	      ^
//│ res: error


rec def sum vec = vec (fun v -> case v of {
  | Nil -> 0
  | Cons -> v.head + sum v.tail
  })
//│ sum: 'a -> 'b
//│   where
//│     'a <: (((Cons[?, ?]\size with {head: int, tail: 'a}) | Nil) -> int) -> (int & 'b)

def sum_ty : Vec[int, 'n] -> int
//│ sum_ty: Vec[int, 'n] -> int

// FIXME should be a cycle error
sum_ty = sum
//│ 'a -> 'b
//│   where
//│     'a <: (((Cons[?, ?]\size with {head: int, tail: 'a}) | Nil) -> int) -> (int & 'b)
//│   <:  sum_ty:
//│ Vec[int, 'n] -> int
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?sum, ?b, ?c, ?d, ?tail, ?head, ?e, ?f, ?g. ?sum <: forall ?n. Vec[int, ?n] -> int` exceeded recursion depth limit (300)
//│ ║  l.331: 	sum_ty = sum
//│ ║         	^^^^^^^^^^^^
//│ ╟── while constraining:  (cons<> & {Cons#N: mut (S[(((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') & ‘p2186') & ‘p2189')] | ‘n')..((S[‘p2189'] & ‘n') | S[(((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') & ‘p2186') | ‘p2189')]), size: S[(‘n' | S[(((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') & ‘p2186') & ‘p2189')])], Cons#A: mut ..int<number>, tail: Vec[int<number>,(‘n' | S[(((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') & ‘p2186') & ‘p2189')])], head: int<number>})  <!<  {tail: tail2105_2149'}
//│ ╟── while constraining:  (cons<> & {Cons#N: mut (S[(((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') & ‘p2186') & ‘p2189')] | ‘n')..((S[‘p2189'] & ‘n') | S[(((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') & ‘p2186') | ‘p2189')]), size: S[(‘n' | S[(((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') & ‘p2186') & ‘p2189')])], Cons#A: mut ..int<number>, tail: Vec[int<number>,(‘n' | S[(((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') & ‘p2186') & ‘p2189')])], head: int<number>})  <!<  α2102_2148'
//│ ╟── while constraining:  (Cons[int<number>,S[‘p2189'..‘p2189']..S[‘p2189'..‘p2189']] & Cons[int<number>,(‘n' | S[((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') & ‘p2186')])])  <!<  ((nil<> & α2101_2147') | ((cons<> & α2102_2148') & ~(nil<>)))
//│ ╟── while constraining:  ((Nil & {size: (‘n' | S[((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') & ‘p2186')])}) | (Cons[int<number>,S[‘p2189'..‘p2189']..S[‘p2189'..‘p2189']] & Cons[int<number>,(‘n' | S[((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') & ‘p2186')])]))  <!<  ((nil<> & α2101_2147') | ((cons<> & α2102_2148') & ~(nil<>)))
//│ ╟── while constraining:  ((Nil & {size: (‘n' | S[((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') & ‘p2186')])}) | (Cons[int<number>,S[‘p2189'..‘p2189']..S[‘p2189'..‘p2189']] & Cons[int<number>,(‘n' | S[((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') & ‘p2186')])]))  <!<  α2100_2146'
//│ ╟── while constraining:  (α2100_2146' -> (0<int,number> | α2107_2151'))  <!<  ‹∀ 1. (((Nil & {size: (‘n' | S[((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') & ‘p2186')])}) | (Cons[int<number>,S['p43_2187'']] & Cons[int<number>,(‘n' | S[((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') & ‘p2186')])])) -> 'r42_2188')›
//│ ╟── while constraining:  ((α2100_2146' -> (0<int,number> | α2107_2151')),)  <!<  (‹∀ 1. (((Nil & {size: (‘n' | S[((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') & ‘p2186')])}) | (Cons[int<number>,S['p43_2187'']] & Cons[int<number>,(‘n' | S[((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') & ‘p2186')])])) -> 'r42_2188')›,)
//│ ╟── while constraining:  (‹∀ 1. (((Nil & {size: (‘n' | S[((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') & ‘p2186')])}) | (Cons[int<number>,S['p43_2187'']] & Cons[int<number>,(‘n' | S[((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') & ‘p2186')])])) -> 'r42_2188')› -> 'r42_2188')  <!<  (((α2100_2146' -> (0<int,number> | α2107_2151')),) -> α2108_2152')
//│ ╟── while constraining:  ‹∀ 0. (‹∀ 1. (((Nil & {size: (‘n' | S[((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') & ‘p2186')])}) | (Cons[int<number>,S['p43'']] & Cons[int<number>,(‘n' | S[((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') & ‘p2186')])])) -> 'r42')› -> 'r42')›  <!<  (((α2100_2146' -> (0<int,number> | α2107_2151')),) -> α2108_2152')
//│ ╟── while constraining:  Vec[int<number>,(‘n' | S[((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') & ‘p2186')])]  <!<  (((α2100_2146' -> (0<int,number> | α2107_2151')),) -> α2108_2152')
//│ ╟── while constraining:  Vec[int<number>,(‘n' | S[((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') & ‘p2186')])]  <!<  α2099_2145'
//│ ╟── while constraining:  Vec[int<number>,(‘n' | S[((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') & ‘p2186')])]  <!<  tail2105_2149'
//│ ╟── while constraining:  (cons<> & {Cons#N: mut (S[((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') & ‘p2186')] | ‘n')..((S[‘p2186'] & ‘n') | S[((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') | ‘p2186')]), size: S[(‘n' | S[((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') & ‘p2186')])], Cons#A: mut ..int<number>, tail: Vec[int<number>,(‘n' | S[((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') & ‘p2186')])], head: int<number>})  <!<  {tail: tail2105_2149'}
//│ ╟── while constraining:  (cons<> & {Cons#N: mut (S[((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') & ‘p2186')] | ‘n')..((S[‘p2186'] & ‘n') | S[((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') | ‘p2186')]), size: S[(‘n' | S[((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') & ‘p2186')])], Cons#A: mut ..int<number>, tail: Vec[int<number>,(‘n' | S[((((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183') & ‘p2186')])], head: int<number>})  <!<  α2102_2148'
//│ ╟── while constraining:  (Cons[int<number>,S[‘p2186'..‘p2186']..S[‘p2186'..‘p2186']] & Cons[int<number>,(‘n' | S[(((((((((‘p2156' & ‘p2159') & ‘p2162') & ‘p2165') & ‘p2168') & ‘p2171') & ‘p2174') & ‘p2177') & ‘p2180') & ‘p2183')])])  <!<  ((nil<> & α2101_2147') | ((cons<> & α2102_2148') & ~(nil<>)))
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  (Cons[Int,S[‘p2156'..‘p2156']..S[‘p2156'..‘p2156']] & Cons[Int,‘n'])  <!<  ((nil<> & α2101_2147') | ((cons<> & α2102_2148') & ~(nil<>)))
//│ ╟── while constraining:  ((Nil & {size: ‘n'}) | (Cons[Int,S[‘p2156'..‘p2156']..S[‘p2156'..‘p2156']] & Cons[Int,‘n']))  <!<  ((nil<> & α2101_2147') | ((cons<> & α2102_2148') & ~(nil<>)))
//│ ╟── while constraining:  ((Nil & {size: ‘n'}) | (Cons[Int,S[‘p2156'..‘p2156']..S[‘p2156'..‘p2156']] & Cons[Int,‘n']))  <!<  α2100_2146'
//│ ╟── while constraining:  (α2100_2146' -> (0<int,number> | α2107_2151'))  <!<  ‹∀ 1. (((Nil & {size: ‘n'}) | (Cons[Int,S['p43_2154'']] & Cons[Int,‘n'])) -> 'r42_2155')›
//│ ╟── while constraining:  ((α2100_2146' -> (0<int,number> | α2107_2151')),)  <!<  (‹∀ 1. (((Nil & {size: ‘n'}) | (Cons[Int,S['p43_2154'']] & Cons[Int,‘n'])) -> 'r42_2155')›,)
//│ ╟── while constraining:  (‹∀ 1. (((Nil & {size: ‘n'}) | (Cons[Int,S['p43_2154'']] & Cons[Int,‘n'])) -> 'r42_2155')› -> 'r42_2155')  <!<  (((α2100_2146' -> (0<int,number> | α2107_2151')),) -> α2108_2152')
//│ ╟── while constraining:  ‹∀ 0. (‹∀ 1. (((Nil & {size: ‘n'}) | (Cons[Int,S['p43'']] & Cons[Int,‘n'])) -> 'r42')› -> 'r42')›  <!<  (((α2100_2146' -> (0<int,number> | α2107_2151')),) -> α2108_2152')
//│ ╟── while constraining:  Vec[Int,‘n']  <!<  (((α2100_2146' -> (0<int,number> | α2107_2151')),) -> α2108_2152')
//│ ╟── while constraining:  Vec[Int,‘n']  <!<  α2099_2145'
//│ ╟── while constraining:  (Vec[Int,‘n'],)  <!<  (α2099_2145',)
//│ ╟── while constraining:  (α2099_2145' -> α2108_2152')  <!<  (Vec[Int,‘n'] -> Int)
//│ ╟── while constraining:  sum2098_2144'  <!<  (Vec[Int,‘n'] -> Int)
//│ ╟── while constraining:  ‹∀ 0. sum2098'›  <!<  (Vec[Int,‘n'] -> Int)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. sum2098'››  <!<  (Vec[Int,‘n'] -> Int)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. sum2098'››  <!<  ‹∀ 0. (Vec[Int,'n2123'] -> Int)›


sum nil
//│ res: int

sum v1_0
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?sum, ?b, ?c, ?d, ?tail, ?head, ?e, ?f, ?g. ?sum <: (forall ?h. ?h) -> ?i` exceeded recursion depth limit (300)
//│ ║  l.377: 	sum v1_0
//│ ║         	^^^^^^^^
//│ ╟── while constraining:  (cons<> & {Cons#N: mut (S[(((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) & ‘p2336) & ‘p2339)] | 'n1077_2238)..((S[‘p2339] & 'n1077_2238) | S[(((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) & ‘p2336) | ‘p2339)]), size: S[('n1077_2238 | S[(((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) & ‘p2336) & ‘p2339)])], Cons#A: mut ..'a1076_2236, tail: Vec['a1076_2236,('n1077_2238 | S[(((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) & ‘p2336) & ‘p2339)])], head: 'a1076_2236})  <!<  {tail: tail2105_2222}
//│ ╟── while constraining:  (cons<> & {Cons#N: mut (S[(((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) & ‘p2336) & ‘p2339)] | 'n1077_2238)..((S[‘p2339] & 'n1077_2238) | S[(((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) & ‘p2336) | ‘p2339)]), size: S[('n1077_2238 | S[(((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) & ‘p2336) & ‘p2339)])], Cons#A: mut ..'a1076_2236, tail: Vec['a1076_2236,('n1077_2238 | S[(((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) & ‘p2336) & ‘p2339)])], head: 'a1076_2236})  <!<  α2102_2221
//│ ╟── while constraining:  (Cons['a1076_2236,S[‘p2339..‘p2339]..S[‘p2339..‘p2339]] & Cons['a1076_2236,('n1077_2238 | S[((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) & ‘p2336)])])  <!<  ((nil<> & α2101_2220) | ((cons<> & α2102_2221) & ~(nil<>)))
//│ ╟── while constraining:  ((Nil & {size: ('n1077_2238 | S[((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) & ‘p2336)])}) | (Cons['a1076_2236,S[‘p2339..‘p2339]..S[‘p2339..‘p2339]] & Cons['a1076_2236,('n1077_2238 | S[((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) & ‘p2336)])]))  <!<  ((nil<> & α2101_2220) | ((cons<> & α2102_2221) & ~(nil<>)))
//│ ╟── while constraining:  ((Nil & {size: ('n1077_2238 | S[((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) & ‘p2336)])}) | (Cons['a1076_2236,S[‘p2339..‘p2339]..S[‘p2339..‘p2339]] & Cons['a1076_2236,('n1077_2238 | S[((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) & ‘p2336)])]))  <!<  α2100_2219
//│ ╟── while constraining:  (α2100_2219 -> (0<int,number> | α2107_2224))  <!<  ‹∀ 1. (((Nil & {size: ('n1077_2238 | S[((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) & ‘p2336)])}) | (Cons['a1076_2236,S['p43_2337'']] & Cons['a1076_2236,('n1077_2238 | S[((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) & ‘p2336)])])) -> 'r42_2338)›
//│ ╟── while constraining:  ((α2100_2219 -> (0<int,number> | α2107_2224)),)  <!<  (‹∀ 1. (((Nil & {size: ('n1077_2238 | S[((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) & ‘p2336)])}) | (Cons['a1076_2236,S['p43_2337'']] & Cons['a1076_2236,('n1077_2238 | S[((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) & ‘p2336)])])) -> 'r42_2338)›,)
//│ ╟── while constraining:  (‹∀ 1. (((Nil & {size: ('n1077_2238 | S[((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) & ‘p2336)])}) | (Cons['a1076_2236,S['p43_2337'']] & Cons['a1076_2236,('n1077_2238 | S[((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) & ‘p2336)])])) -> 'r42_2338)› -> 'r42_2338)  <!<  (((α2100_2219 -> (0<int,number> | α2107_2224)),) -> α2108_2225)
//│ ╟── while constraining:  ‹∀ 0. (‹∀ 1. (((Nil & {size: ('n1077_2238 | S[((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) & ‘p2336)])}) | (Cons['a1076_2236,S['p43'']] & Cons['a1076_2236,('n1077_2238 | S[((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) & ‘p2336)])])) -> 'r42')› -> 'r42')›  <!<  (((α2100_2219 -> (0<int,number> | α2107_2224)),) -> α2108_2225)
//│ ╟── while constraining:  Vec['a1076_2236,('n1077_2238 | S[((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) & ‘p2336)])]  <!<  (((α2100_2219 -> (0<int,number> | α2107_2224)),) -> α2108_2225)
//│ ╟── while constraining:  Vec['a1076_2236,('n1077_2238 | S[((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) & ‘p2336)])]  <!<  α2099_2218
//│ ╟── while constraining:  Vec['a1076_2236,('n1077_2238 | S[((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) & ‘p2336)])]  <!<  tail2105_2222
//│ ╟── while constraining:  (cons<> & {Cons#N: mut (S[((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) & ‘p2336)] | 'n1077_2238)..((S[‘p2336] & 'n1077_2238) | S[((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) | ‘p2336)]), size: S[('n1077_2238 | S[((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) & ‘p2336)])], Cons#A: mut ..'a1076_2236, tail: Vec['a1076_2236,('n1077_2238 | S[((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) & ‘p2336)])], head: 'a1076_2236})  <!<  {tail: tail2105_2222}
//│ ╟── while constraining:  (cons<> & {Cons#N: mut (S[((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) & ‘p2336)] | 'n1077_2238)..((S[‘p2336] & 'n1077_2238) | S[((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) | ‘p2336)]), size: S[('n1077_2238 | S[((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) & ‘p2336)])], Cons#A: mut ..'a1076_2236, tail: Vec['a1076_2236,('n1077_2238 | S[((((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333) & ‘p2336)])], head: 'a1076_2236})  <!<  α2102_2221
//│ ╟── while constraining:  (Cons['a1076_2236,S[‘p2336..‘p2336]..S[‘p2336..‘p2336]] & Cons['a1076_2236,('n1077_2238 | S[(((((((‘p2312 & ‘p2315) & ‘p2318) & ‘p2321) & ‘p2324) & ‘p2327) & ‘p2330) & ‘p2333)])])  <!<  ((nil<> & α2101_2220) | ((cons<> & α2102_2221) & ~(nil<>)))
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 4. {α1091_2292''''' where: α1074_2228 <: α59_2283''''', α1075_2235 <: α60_2286'''''}›  <!<  α2100_2219
//│ ╟── while constraining:  (‹∀ 4. {α1091_2292''''' where: α1074_2228 <: α59_2283''''', α1075_2235 <: α60_2286'''''}›,)  <!<  (α2100_2219,)
//│ ╟── while constraining:  (α2100_2219 -> (0<int,number> | α2107_2224))  <!<  ((‹∀ 4. {α1091_2292''''' where: α1074_2228 <: α59_2283''''', α1075_2235 <: α60_2286'''''}›,) -> α1112_2296)
//│ ╟── while constraining:  (α2100_2219 -> (0<int,number> | α2107_2224))  <!<  α1078_2282
//│ ╟── while constraining:  ((α2100_2219 -> (0<int,number> | α2107_2224)),)  <!<  (α1078_2282,)
//│ ╟── while constraining:  (α1078_2282 -> α1112_2296)  <!<  (((α2100_2219 -> (0<int,number> | α2107_2224)),) -> α2108_2225)
//│ ╟── while constraining:  {(α1078_2282 -> α1112_2296) where: α1074_2228 <: α1103_2273, α1075_2235 <: α1106_2276}  <!<  (((α2100_2219 -> (0<int,number> | α2107_2224)),) -> α2108_2225)
//│ ╟── while constraining:  ‹∀ 3. {(α1078_2258'''' -> α1112_2272'''') where: α1074_2228 <: α1103_2245'''', α1075_2235 <: α1106_2248''''}›  <!<  (((α2100_2219 -> (0<int,number> | α2107_2224)),) -> α2108_2225)
//│ ╟── while constraining:  α1450_2227  <!<  (((α2100_2219 -> (0<int,number> | α2107_2224)),) -> α2108_2225)
//│ ╟── while constraining:  ‹∀ 0. α1450'›  <!<  (((α2100_2219 -> (0<int,number> | α2107_2224)),) -> α2108_2225)
//│ ╟── while constraining:  ‹∀ 0. α1450'›  <!<  α2099_2218
//│ ╟── while constraining:  (‹∀ 0. α1450'›,)  <!<  (α2099_2218,)
//│ ╟── while constraining:  (α2099_2218 -> α2108_2225)  <!<  ((‹∀ 0. α1450'›,) -> α2216)
//│ ╟── while constraining:  sum2098_2217  <!<  ((‹∀ 0. α1450'›,) -> α2216)
//│ ╙── while constraining:  ‹∀ 0. sum2098'›  <!<  ((‹∀ 0. α1450'›,) -> α2216)
//│ res: error

sum v2
//│ res: error




// === === === ERROR CASES === === === //


:ShowRelativeLineNums
:AllowTypeErrors


def head1_ty v = case v of {
  | Nil -> impossible v.size
  | Cons -> v.head
  }
//│ ((Cons[?, ?]\size\tail with {head: 'head}) | Nil & {size: nothing}) -> 'head
//│   <:  head1_ty:
//│ Vec['a, S['p]] -> 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	def head1_ty v = case v of {
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+2: 	  | Nil -> impossible v.size
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+3: 	  | Cons -> v.head
//│ ║        	^^^^^^^^^^^^^^^^^^
//│ ║  l.+4: 	  }
//│ ║        	^^^
//│ ╟── type `(forall ?p. (Cons[‘a, in S[in ‘p & ?p out ?p | ‘p] out S[in ?p | ‘p out ‘p & ?p]] | (Nil with {size: S[‘p]})) -> ?r) -> ?r` does not match type `Cons[?, ?] & ?a | Nil & ?b`
//│ ║  l.21: 	type Vec[A, N] = forall 'r. (forall 'p. (Nil & { size: N } | Cons[A, S['p]] & Cons[A, N]) -> 'r) -> 'r
//│ ║        	                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.+1: 	def head1_ty v = case v of {
//│ ╙──      	                      ^


sum v1_ty
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	sum v1_ty
//│ ║        	^^^^^^^^^
//│ ╟── type `Cons[int, Z]` is not a function
//│ ║  l.174: 	v1_ty = v1_ : Cons[int, Z]
//│ ║         	              ^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `(?a -> ?b) -> ?c`
//│ ║  l.+1: 	sum v1_ty
//│ ║        	    ^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.319: 	rec def sum vec = vec (fun v -> case v of {
//│ ║         	                  ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.320: 	  | Nil -> 0
//│ ║         	^^^^^^^^^^^^
//│ ║  l.321: 	  | Cons -> v.head + sum v.tail
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.322: 	  })
//│ ║         	^^^^
//│ ╟── from reference:
//│ ║  l.319: 	rec def sum vec = vec (fun v -> case v of {
//│ ╙──       	                  ^^^
//│ res: error


