
:GeneralizeCurriedFunctions
:ArgGen // Type of cons is much simpler without this...

:AllowTypeErrors // TODO


class Z
class S[P]
  method Inv: P -> P
  method Inv = id
//│ Defined class Z
//│ Defined class S[=P]
//│ Declared S.Inv: S['P] -> 'P -> 'P
//│ Defined S.Inv: S['P] -> (forall 'a. 'a -> 'a)

:IrregularTypes

class Cons[A, N]: { size: S[N]; head: A; tail: Vec[A, N] }
class Nil: { size: Z }
type Vec[A, N] = forall 'r. (forall 'p. (Nil & { size: N } | Cons[A, S['p]] & Cons[A, N]) -> 'r) -> 'r
//│ Defined class Cons[+A, =N]
//│ Defined class Nil
//│ Defined type alias Vec[+A, =N]

type AnyVec[A] = forall 'r. (forall 'p. Nil | Cons[A, S['p]] -> 'r) -> 'r
//│ Defined type alias AnyVec[+A]

def Nil = Nil { size = Z{} }
def Cons head tail = Cons { head; tail; size = S{} }
//│ Nil: Nil
//│ Cons: 'a -> (forall 'A, 'N, 'tail. (Vec['A, 'N] & 'tail) -> (Cons['A | 'a, 'N] with {head: 'a, tail: 'tail}))


def nil k = k Nil
def cons h t k = k (Cons h t)
//│ nil: (Nil -> 'a) -> 'a
//│ cons: 'a -> (forall 'A, 'N, 'b. (Vec['A, out 'N] & 'b) -> (forall 'c. ((forall 'N0. Cons['A | 'a, 'N0] with {head: 'a, tail: 'b}) -> 'c) -> 'c))
//│   where
//│     'N0 <: 'N

nil_ty = nil : Vec[int, Z]
//│ nil_ty: Vec[int, Z]

def cons_ty : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ cons_ty: 'a -> Vec['a, 'n] -> Vec['a, S['n]]

// * Note: test cases like this are quite slow... this one seems to take about 100ms!!
cons_ty = cons : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│   where
//│     'n :> S['n]
//│        <: nothing
//│   <:  cons_ty:
//│ 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.49: 	cons_ty = cons : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	^^^^^^^^^^^^^^
//│ ╟── type `‘n_400` is not an instance of type `S`
//│ ║  l.45: 	def cons_ty : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	                                       ^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.49: 	cons_ty = cons : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ╙──      	                                          ^^

cons_ty2 = cons : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ cons_ty2: 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│   where
//│     'n :> S['n]
//│        <: nothing

type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ Defined type alias Cons_ty












// :exit
// ====================================================================================================


















cons_ty = cons : Cons_ty
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.106: 	cons_ty = cons : Cons_ty
//│ ║         	          ^^^^
//│ ╟── expression of type `S[in ‘n_575 & ?p out ‘n_575 & ?p0]` is not an instance of type `'n_575`
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.72: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	                                        ^^
//│ ╟── Note: class type parameter N is defined at:
//│ ║  l.19: 	class Cons[A, N]: { size: S[N]; head: A; tail: Vec[A, N] }
//│ ╙──      	              ^
//│ Cons_ty
//│   <:  cons_ty:
//│ 'a -> Vec['a, 'n] -> Vec['a, S['n]]

cons_ty3 = cons : Cons_ty
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.121: 	cons_ty3 = cons : Cons_ty
//│ ║         	           ^^^^
//│ ╟── expression of type `S[in ‘n_634 & ?p out ‘n_634 & ?p0]` is not an instance of type `'n_634`
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.72: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	                                        ^^
//│ ╟── Note: class type parameter N is defined at:
//│ ║  l.19: 	class Cons[A, N]: { size: S[N]; head: A; tail: Vec[A, N] }
//│ ╙──      	              ^
//│ cons_ty3: Cons_ty

def cons h (t: Vec['a, 'n]) k = k (Cons h t)
//│ cons: 'b -> (forall 'a, 'n. Vec['a, 'n] -> (forall 'c. ((Cons['a | 'b, 'n] with {head: 'b, tail: Vec['a, 'n]}) -> 'c) -> 'c))

cons : Cons_ty
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.137: 	cons : Cons_ty
//│ ║         	^^^^
//│ ╟── expression of type `S[in ‘n_772 & ?p out ‘n_772 & ?p0]` is not an instance of type `'n_772`
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.72: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	                                        ^^
//│ ╟── from type variable:
//│ ║  l.134: 	def cons h (t: Vec['a, 'n]) k = k (Cons h t)
//│ ║         	                       ^^
//│ ╟── Note: class type parameter N is defined at:
//│ ║  l.19: 	class Cons[A, N]: { size: S[N]; head: A; tail: Vec[A, N] }
//│ ╙──      	              ^
//│ res: Cons_ty

def cons h (t: Vec['a, 'n]) k = k (Cons h t)
//│ cons: 'b -> (forall 'a, 'n. Vec['a, 'n] -> (forall 'c. ((Cons['a | 'b, 'n] with {head: 'b, tail: Vec['a, 'n]}) -> 'c) -> 'c))

cons : Cons_ty
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.156: 	cons : Cons_ty
//│ ║         	^^^^
//│ ╟── expression of type `S[in ‘n_904 & ?p out ‘n_904 & ?p0]` is not an instance of type `'n_904`
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.72: 	type Cons_ty = forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ║        	                                        ^^
//│ ╟── from type variable:
//│ ║  l.153: 	def cons h (t: Vec['a, 'n]) k = k (Cons h t)
//│ ║         	                       ^^
//│ ╟── Note: class type parameter N is defined at:
//│ ║  l.19: 	class Cons[A, N]: { size: S[N]; head: A; tail: Vec[A, N] }
//│ ╙──      	              ^
//│ res: Cons_ty


// v0 = nil

// v0_ty = v0 : Vec[int, Z]

v1_ = Cons 1 nil
//│ v1_: Cons[1, 'P] with {tail: forall 'a. (Nil -> 'a) -> 'a}
//│   where
//│     'P :> Z

v1_ty = v1_ : Cons[int, Z]
//│ v1_ty: Cons[int, Z]

v1_0 = cons 1 nil
//│ v1_0: ((Cons[1, 'n] with {tail: Vec[nothing, 'n]}) -> 'a) -> 'a
//│   where
//│     'n :> Z

v1_0 : Vec[int, S[Z]]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.190: 	v1_0 : Vec[int, S[Z]]
//│ ║         	^^^^
//│ ╟── application of type `Z` is not an instance of type `S`
//│ ║  l.29: 	def Nil = Nil { size = Z{} }
//│ ║        	                       ^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.190: 	v1_0 : Vec[int, S[Z]]
//│ ║         	                ^^^^
//│ ╟── Note: class Z is defined at:
//│ ║  l.8: 	class Z
//│ ╙──     	      ^
//│ res: Vec[int, S[Z]]

v1_1 k = k v1_
//│ v1_1: ((forall 'P. Cons[1, 'P] with {tail: forall 'a. (Nil -> 'a) -> 'a}) -> 'b) -> 'b
//│   where
//│     'P :> Z

// :e
v1_1 : Vec[int, S[Z]]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.211: 	v1_1 : Vec[int, S[Z]]
//│ ║         	^^^^
//│ ╟── application of type `Z` is not an instance of type `S`
//│ ║  l.29: 	def Nil = Nil { size = Z{} }
//│ ║        	                       ^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.211: 	v1_1 : Vec[int, S[Z]]
//│ ║         	                ^^^^
//│ ╟── Note: class Z is defined at:
//│ ║  l.8: 	class Z
//│ ╙──     	      ^
//│ res: Vec[int, S[Z]]


v1_tty = cons_ty 1 nil_ty
//│ v1_tty: Vec[int, S['n]]
//│   where
//│     'n :> Z
//│        <: S[?] | Z

v1_tty = cons_ty2 1 nil_ty
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.233: 	v1_tty = cons_ty2 1 nil_ty
//│ ║         	         ^^^^^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of `S[?n & ?p]`
//│ ║  l.42: 	nil_ty = nil : Vec[int, Z]
//│ ║        	                        ^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.66: 	cons_ty2 = cons : forall 'a. 'a -> Vec['a, 'n] -> Vec['a, S['n]]
//│ ╙──      	                                           ^^
//│ v1_tty: error

v1_tty = cons_ty3 1 nil_ty
//│ v1_tty: Vec[int, S['n]]
//│   where
//│     'n :> Z
//│        <: S[?] | Z


v1 = cons 1 nil
//│ v1: ((Cons[1, 'n] with {tail: Vec[nothing, 'n]}) -> 'a) -> 'a
//│   where
//│     'n :> Z

v2 = cons 1 (cons 2 nil)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.257: 	v2 = cons 1 (cons 2 nil)
//│ ║         	     ^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Z` is not an instance of type `S`
//│ ║  l.29: 	def Nil = Nil { size = Z{} }
//│ ║        	                       ^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.21: 	type Vec[A, N] = forall 'r. (forall 'p. (Nil & { size: N } | Cons[A, S['p]] & Cons[A, N]) -> 'r) -> 'r
//│ ║        	                                                                     ^^^^^
//│ ╟── Note: class Z is defined at:
//│ ║  l.8: 	class Z
//│ ╙──     	      ^
//│ v2: error


def impossible x = case x of {}
//│ impossible: nothing -> nothing

def head1 vec = vec (fun v -> case v of {
  | Nil -> impossible v.size
  | Cons -> v.head
  })
//│ head1: ((forall 'head. ((Cons[?, ?]\size\tail with {head: 'head}) | Nil & {size: nothing}) -> 'head) -> 'a) -> 'a

def head1_ty : Vec['a, S['p]] -> 'a
head1_ty = head1
//│ head1_ty: Vec['a, S['p]] -> 'a
//│ ((forall 'head. ((Cons[?, ?]\size\tail with {head: 'head}) | Nil & {size: nothing}) -> 'head) -> 'a) -> 'a
//│   <:  head1_ty:
//│ Vec['a, S['p]] -> 'a

def head2 (vec: Vec['a, S['p]]) = vec (fun v -> case v of {
  | Nil -> impossible v.size
  | Cons -> v.head
  })
//│ head2: Vec['a, S['p]] -> 'a

head1 v1
head1 v2
//│ res: 1
//│ res: error

:e
head1 nil
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.301: 	head1 nil
//│ ║         	^^^^^^^^^
//│ ╟── application of type `Z` does not match type `nothing`
//│ ║  l.29: 	def Nil = Nil { size = Z{} }
//│ ║        	                       ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.273: 	def impossible x = case x of {}
//│ ║         	                        ^
//│ ╟── from field selection:
//│ ║  l.277: 	  | Nil -> impossible v.size
//│ ║         	                      ^^^^^^
//│ ╟── Note: class Z is defined at:
//│ ║  l.8: 	class Z
//│ ╙──     	      ^
//│ res: error


rec def sum vec = vec (fun v -> case v of {
  | Nil -> 0
  | Cons -> v.head + sum v.tail
  })
//│ sum: ((forall 'a. 'a -> int) -> 'b) -> 'b
//│   where
//│     'a <: (Cons[?, ?]\size with {head: int, tail: (forall 'a. 'a -> int) -> int}) | Nil

def sum_ty : Vec[int, 'n] -> int
//│ sum_ty: Vec[int, 'n] -> int

sum_ty = sum
//│ ((forall 'a. 'a -> int) -> 'b) -> 'b
//│   where
//│     'a <: (Cons[?, ?]\size with {head: int, tail: (forall 'a. 'a -> int) -> int}) | Nil
//│   <:  sum_ty:
//│ Vec[int, 'n] -> int
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition; a type annotation may be required
//│ ║  l.331: 	sum_ty = sum
//│ ║         	^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  Vec[int<number>,(‘n_1643' | S[⊥])]  <:  tail1585_1683''''    TypeRef  TypeVariable
//│ ╙──  ... looks like:  Vec[int<number>,(‘n_1643' | S[⊥])]  <:  tail1585_1649'''


sum nil
//│ res: int

sum v1_0
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.348: 	sum v1_0
//│ ║         	^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  Vec['a815_1741,('n816_1735 | S[⊥])]  <:  tail1585_1784'''    TypeRef  TypeVariable
//│ ╙──  ... looks like:  Vec['a815_1034',('n816_1035' | S[⊥])]  <:  tail1585_1720'''
//│ res: error

sum v2
//│ res: error




// === === === ERROR CASES === === === //


:ShowRelativeLineNums
:AllowTypeErrors


def head1_ty v = case v of {
  | Nil -> impossible v.size
  | Cons -> v.head
  }
//│ ((Cons[?, ?]\size\tail with {head: 'head}) | Nil & {size: nothing}) -> 'head
//│   <:  head1_ty:
//│ Vec['a, S['p]] -> 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	def head1_ty v = case v of {
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+2: 	  | Nil -> impossible v.size
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.+3: 	  | Cons -> v.head
//│ ║        	^^^^^^^^^^^^^^^^^^
//│ ║  l.+4: 	  }
//│ ║        	^^^
//│ ╟── type `(forall ?p. (Cons[‘a_1836, S[in ‘p_1837 & ?p out ?p | ‘p_1837]] | (Nil with {size: S[‘p_1837]})) -> ?r) -> ?r` does not match type `Cons[?, ?] & ?a | Nil & ?b`
//│ ║  l.21: 	type Vec[A, N] = forall 'r. (forall 'p. (Nil & { size: N } | Cons[A, S['p]] & Cons[A, N]) -> 'r) -> 'r
//│ ║        	                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.+1: 	def head1_ty v = case v of {
//│ ╙──      	                      ^


sum v1_ty
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	sum v1_ty
//│ ║        	^^^^^^^^^
//│ ╟── type `Cons[int, Z]` is not a function
//│ ║  l.182: 	v1_ty = v1_ : Cons[int, Z]
//│ ║         	              ^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `(forall ?tail, ?a, ?b, ?head, ?c, ?d. ?a -> ?d) -> ?e`
//│ ║  l.+1: 	sum v1_ty
//│ ║        	    ^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.320: 	rec def sum vec = vec (fun v -> case v of {
//│ ║         	                  ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.321: 	  | Nil -> 0
//│ ║         	^^^^^^^^^^^^
//│ ║  l.322: 	  | Cons -> v.head + sum v.tail
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.323: 	  })
//│ ║         	^^^^
//│ ╟── from reference:
//│ ║  l.320: 	rec def sum vec = vec (fun v -> case v of {
//│ ╙──       	                  ^^^
//│ res: error


