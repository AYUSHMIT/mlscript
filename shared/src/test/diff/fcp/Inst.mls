:GeneralizeCurriedFunctions
:NoRecursiveTypes


i = id! id!
//│ i: 'a -> 'a
//│  = [Function: id]

i i! i 1
//│ res: 1
//│    = 1


:NoJS


{ x = id }
//│ res: {x: forall 'a. 'a -> 'a}

{ x = id! }
//│ res: {x: 'a -> 'a}

{ x = id id! }
//│ res: {x: 'a -> 'a}

{ x = id! id }
//│ res: {x: forall 'a. 'a -> 'a}

{ x = id! id! }
//│ res: {x: 'a -> 'a}

:w
def foo x = x!
//│ ╔══[WARNING] Inferred type `?a` of this reference cannot be instantiated
//│ ║  l.33: 	def foo x = x!
//│ ╙──      	            ^
//│ foo: 'a -> 'a


type Id = forall 'a. 'a -> 'a
//│ Defined type alias Id


def foo (x: Id) = x!
//│ foo: Id -> 'a -> 'a

def foo (x: Id) = x! x!
//│ foo: Id -> 'a -> 'a

def foo (x: Id) = x! x
//│ foo: Id -> Id

def foo (x: Id) = x x!
//│ foo: Id -> 'a -> 'a

def foo (x: Id) = x x
//│ foo: Id -> Id


// * Note that `this` selections currently don't provide a concrete type in method typing
:w
class A: { f: Id }
  method F x = x
  method G1 = this.f
  method G2 = this.f!
  method G3 = (this.f: Id)!
//│ ╔══[WARNING] Inferred type `?f` of this field selection cannot be instantiated
//│ ║  l.65: 	  method G2 = this.f!
//│ ╙──      	              ^^^^^^
//│ Defined class A
//│ Defined A.F: A -> (forall 'a. 'a -> 'a)
//│ Defined A.G1: A -> Id
//│ Defined A.G2: A -> Id
//│ Defined A.G3: A -> 'a -> 'a


