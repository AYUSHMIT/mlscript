// * This is a minimization of the error that happens in `QML_exist_Records`



// :NoRecursiveTypes
:GeneralizeCurriedFunctions
// :DistributeForalls
// :ArgGen
// :NoConstrainedTypes


type ArraysRep[Rep] = { fold: forall 'b. 'b -> Rep -> 'b }
//│ Defined type alias ArraysRep[-Rep]

type Arrays = (forall 'Rep. ArraysRep['Rep] -> 'r) -> 'r
//│ Defined type alias Arrays

// :d
def stepImpl arrImpl = { fold = fun f -> fun r0 -> arrImpl.fold f r0 }
//│ stepImpl: 'a -> {fold: forall 'b. 'b -> (forall 'a, 'b, 'c, 'd. ('c -> 'd
//│   where
//│     'a <: {fold: 'b -> 'c -> 'd}))}
//│         = [Function: stepImpl]

// :d
def stepImpl2 arr = arr stepImpl
//│ stepImpl2: ((forall 'a. 'a -> {fold: forall 'b. 'b -> (forall 'a, 'b, 'c, 'd. ('c -> 'd
//│   where
//│     'a <: {fold: 'b -> 'c -> 'd}))}) -> 'e) -> 'e
//│          = [Function: stepImpl2]

def step: Arrays -> Arrays
//│ step: Arrays -> Arrays
//│     = <missing implementation>

// :d
:e
def step arr g = g (stepImpl2 arr)
//│ 'a -> (forall 'a. (('b -> 'c) -> 'c
//│   where
//│     'a <: (forall 'd. 'd -> {fold: forall 'e. 'e -> (forall 'd, 'e, 'f, 'g. ('f -> 'g
//│   where
//│     'd <: {fold: 'e -> 'f -> 'g}))}) -> 'b))
//│   <:  step:
//│ Arrays -> Arrays
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.38: 	def step arr g = g (stepImpl2 arr)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘b_159_171` is not an instance of type `'b_159_169`
//│ ║  l.12: 	type ArraysRep[Rep] = { fold: forall 'b. 'b -> Rep -> 'b }
//│ ║        	                                     ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.12: 	type ArraysRep[Rep] = { fold: forall 'b. 'b -> Rep -> 'b }
//│ ║        	                                     ^^
//│ ╟── from reference:
//│ ║  l.19: 	def stepImpl arrImpl = { fold = fun f -> fun r0 -> arrImpl.fold f r0 }
//│ ╙──      	                                                                ^
//│     = [Function: step]

