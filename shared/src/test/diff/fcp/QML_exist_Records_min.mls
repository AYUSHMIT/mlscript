// * This is a minimization of the error that happens in `QML_exist_Records`



:NoRecursiveTypes
:GeneralizeCurriedFunctions
// :DistributeForalls
// :ArgGen
// :NoConstrainedTypes


type ArraysRep[Rep] = { fold: forall 'b. 'b -> Rep -> 'b }
//│ Defined type alias ArraysRep[-Rep]

type Arrays = (forall 'Rep. ArraysRep['Rep] -> 'r) -> 'r
//│ Defined type alias Arrays

// :d
def stepImpl arrImpl = { fold = fun f -> fun r0 -> arrImpl.fold f r0 }
//│ stepImpl: 'a -> {fold: forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e, 'fold. ('c -> 'd
//│   where
//│     'a <: {fold: 'b -> ('c -> 'd & 'e) & 'fold}))}
//│         = [Function: stepImpl]

// :d
def stepImpl2 arr = arr stepImpl
//│ stepImpl2: ((forall 'a. 'a -> {fold: forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e, 'fold. ('c -> 'd
//│   where
//│     'a <: {fold: 'b -> ('c -> 'd & 'e) & 'fold}))}) -> 'f & 'g) -> 'f
//│          = [Function: stepImpl2]

def step: Arrays -> Arrays
//│ step: Arrays -> Arrays
//│     = <missing implementation>

// :d
def step arr g = g (stepImpl2 arr)
//│ 'a -> (forall 'a. (('b -> 'c & 'd) -> 'c
//│   where
//│     'a <: (forall 'e. 'e -> {fold: forall 'f. 'f -> (forall 'e, 'f, 'g, 'h, 'i, 'fold. ('g -> 'h
//│   where
//│     'e <: {fold: 'f -> ('g -> 'h & 'i) & 'fold}))}) -> ('j & 'b)))
//│   <:  step:
//│ Arrays -> Arrays
//│     = [Function: step]

