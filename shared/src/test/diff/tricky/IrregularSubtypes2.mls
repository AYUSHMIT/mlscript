:NoRecursiveTypes
:IrregularTypes


type Lol = forall 'a. int -> ('a, Lol)
//│ Defined type alias Lol

def lol: Lol
//│ lol: Lol
//│    = <missing implementation>

:w
type Oops[A] = int -> (anything, Oops[Oops[A]])
//│ Defined type alias Oops[±A]
//│ ╔══[WARNING] Type definition Oops has bivariant type parameters:
//│ ║  l.13: 	type Oops[A] = int -> (anything, Oops[Oops[A]])
//│ ║        	     ^^^^
//│ ╟── A is irrelevant and may be removed
//│ ║  l.13: 	type Oops[A] = int -> (anything, Oops[Oops[A]])
//│ ╙──      	          ^

// * The cycle is due to irregular types, which are not yet shadowed
:e
lol: Oops[int]
//│ ╔══[ERROR] Subtyping constraint of the form `Lol <: Oops[?]` exceeded recursion depth limit (250)
//│ ║  l.24: 	lol: Oops[int]
//│ ║        	^^^
//│ ╙── Note: use flag `:ex` to see internal error info.
//│ res: Oops[?]
//│    = <no result>
//│      lol is not implemented


