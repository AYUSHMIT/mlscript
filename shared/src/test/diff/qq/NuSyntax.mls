:NewDefs
:NoJS

`42
//│ Code[42, nothing]

x `=> x
//│ Code[forall 'a. 'a -> 'a, nothing]

x `=>
  x
//│ Code[forall 'a. 'a -> 'a, nothing]

run(x `=> x)(42)
//│ 42

`1 `+ `1
//│ Code[Int, nothing]

`(1 + 1)
//│ Code[Int, nothing]


`1 `< `2
//│ Code[Bool, nothing]

`1 `<= `2
//│ Code[Bool, nothing]

:p
`1 `* `2 `+ `3
//│ |`|1| |`|*| |`|2| |`|+| |`|3|
//│ AST: TypingUnit(Quoted(App(Var(+), Tup(_: Unquoted(Quoted(App(Var(*), Tup(_: Unquoted(Quoted(IntLit(1))), _: Unquoted(Quoted(IntLit(2))))))), _: Unquoted(Quoted(IntLit(3)))))))
//│ Parsed: code"+(${code"*(${code"1"}, ${code"2"},)"}, ${code"3"},)";
//│ Code[Int, nothing]

:p
`1 `* `2 `+ `3 `- `4
//│ |`|1| |`|*| |`|2| |`|+| |`|3| |`|-| |`|4|
//│ AST: TypingUnit(Quoted(App(Var(-), Tup(_: Unquoted(Quoted(App(Var(+), Tup(_: Unquoted(Quoted(App(Var(*), Tup(_: Unquoted(Quoted(IntLit(1))), _: Unquoted(Quoted(IntLit(2))))))), _: Unquoted(Quoted(IntLit(3))))))), _: Unquoted(Quoted(IntLit(4)))))))
//│ Parsed: code"-(${code"+(${code"*(${code"1"}, ${code"2"},)"}, ${code"3"},)"}, ${code"4"},)";
//│ Code[Int, nothing]

:p
`1 `+ `2 `* `3
//│ |`|1| |`|+| |`|2| |`|*| |`|3|
//│ AST: TypingUnit(Quoted(App(Var(+), Tup(_: Unquoted(Quoted(IntLit(1))), _: Unquoted(Quoted(App(Var(*), Tup(_: Unquoted(Quoted(IntLit(2))), _: Unquoted(Quoted(IntLit(3)))))))))))
//│ Parsed: code"+(${code"1"}, ${code"*(${code"2"}, ${code"3"},)"},)";
//│ Code[Int, nothing]

:p
`1 `+ `2 `* `3 `+ `4
//│ |`|1| |`|+| |`|2| |`|*| |`|3| |`|+| |`|4|
//│ AST: TypingUnit(Quoted(App(Var(+), Tup(_: Unquoted(Quoted(App(Var(+), Tup(_: Unquoted(Quoted(IntLit(1))), _: Unquoted(Quoted(App(Var(*), Tup(_: Unquoted(Quoted(IntLit(2))), _: Unquoted(Quoted(IntLit(3))))))))))), _: Unquoted(Quoted(IntLit(4)))))))
//│ Parsed: code"+(${code"+(${code"1"}, ${code"*(${code"2"}, ${code"3"},)"},)"}, ${code"4"},)";
//│ Code[Int, nothing]

:e
:p
1 + `2 `+ `3
//│ |1| |+| |`|2| |`|+| |`|3|
//│ AST: TypingUnit(Quoted(App(Var(+), Tup(_: Unquoted(App(Var(+), Tup(_: IntLit(1), _: Quoted(IntLit(2))))), _: Unquoted(Quoted(IntLit(3)))))))
//│ Parsed: code"+(${+(1, code"2",)}, ${code"3"},)";
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.60: 	1 + `2 `+ `3
//│ ║        	^^^^^^
//│ ╟── code fragment of type `Code[2, nothing]` is not an instance of `Int`
//│ ║  l.60: 	1 + `2 `+ `3
//│ ╙──      	    ^^
//│ ╔══[ERROR] Type mismatch in unquote:
//│ ║  l.60: 	1 + `2 `+ `3
//│ ║        	^^^^^^
//│ ╙── operator application of type `Int` is not an instance of `Code[?a, ?b]`
//│ Code[Int, nothing]

:e
:p
`1 `+ `2 + 3
//│ |`|1| |`|+| |`|2| |+| |3|
//│ AST: TypingUnit(App(Var(+), Tup(_: Quoted(App(Var(+), Tup(_: Unquoted(Quoted(IntLit(1))), _: Unquoted(Quoted(IntLit(2)))))), _: IntLit(3))))
//│ Parsed: +(code"+(${code"1"}, ${code"2"},)", 3,);
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.78: 	`1 `+ `2 + 3
//│ ║        	^^^^^^^^^^^^
//│ ╟── code fragment of type `Code[?a, ?b | ?c]` is not an instance of `Int`
//│ ║  l.78: 	`1 `+ `2 + 3
//│ ╙──      	^^^^^^^^
//│ Int | error

x `=> x `+ `1
//│ Code[Int -> Int, nothing]

y `=> `0 `- y
//│ Code[Int -> Int, nothing]

:e
z `=> z + 1
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.97: 	z `=> z + 1
//│ ║        	      ^^^^^
//│ ╟── reference of type `Var[?a, ?z]` is not an instance of `Int`
//│ ║  l.97: 	z `=> z + 1
//│ ╙──      	      ^
//│ ╔══[ERROR] Type mismatch in unquote:
//│ ║  l.97: 	z `=> z + 1
//│ ║        	      ^^^^^
//│ ╙── operator application of type `Int` is not an instance of `Code[?a, ?b]`
//│ Code[anything -> error, nothing]


(x, y) `=> x `+ y
//│ Code[(Int, Int) -> Int, nothing]

run((x, y) `=> x `+ y)(1, 2)
//│ Int


`let x = `42 in x `+ `1
//│ Code[Int, nothing]


fun f(x: Code[Int, nothing]) =
  `let t = x in t
//│ fun f: (x: Code[Int, nothing]) -> Code[Int, nothing]

:e
`let x = `0, y = 1 in x `+ y
//│ ╔══[ERROR] Type mismatch in unquote:
//│ ║  l.127: 	`let x = `0, y = 1 in x `+ y
//│ ║         	                 ^
//│ ╙── integer literal of type `1` is not an instance of type `Code`
//│ Code[Int, nothing]


f `=> a `=> f`(a)
//│ Code[forall 'a 'b. ('a -> 'b) -> 'a -> 'b, nothing]

`let app = (f, a) `=> f`(a), id = x `=> x in app`(id, `42)
//│ Code[42, nothing]


`if `(1 == 1) then `1 else `2
//│ Code[1 | 2, nothing]

fun foo(x) =
  `if x `== `1 then `1 else `2
//│ fun foo: forall 'a. Code[Num, 'a] -> Code[1 | 2, 'a]

fun foo(x) =
  `if `(1 == 1) then x else `2
//│ fun foo: forall 'a 'b. Code['a, 'b] -> Code[2 | 'a, 'b]


`if `1 `< `2 `and `1 `> `2 then `0 else `1
//│ Code[0 | 1, nothing]

:e
`(`42)
//│ ╔══[ERROR] Nested quotation is not allowed.
//│ ║  l.158: 	`(`42)
//│ ╙──       	  ^^^
//│ Code[error, nothing]

:e
`(x `=> x)
//│ ╔══[ERROR] Nested quotation is not allowed.
//│ ║  l.165: 	`(x `=> x)
//│ ╙──       	  ^^^^^^^
//│ Code[error, nothing]
