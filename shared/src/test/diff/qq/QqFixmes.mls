:NewDefs
:NoJS



fun (%>) bind(rhs, k) = code"let x = ${rhs} in ${k(code"x")}"
//│ fun (%>) bind: forall 'a 'b 'c. (Code['a, 'b], Code['a, ??x] -> Code['c, ??x0 | 'b]) -> Code['c, 'b]

fun (%>) bind(rhs, k) = code"let x = ${rhs} in ${k(x)}"
//│ fun (%>) bind: forall 'a 'b 'c. (Code['a, 'b], Code['a, ??x] -> Code['c, ??x0 | 'b]) -> Code['c, 'b]

// * Notice the extrusion
fun foo(k) = code"x => ${k(code"x")}"
//│ fun foo: forall 'a 'b 'c. (Code['c, ??x] -> Code['a, ??x0 | 'b]) -> Code['c -> 'a, 'b]

fun (%>) bind(rhs, k) = code"(x => ${k(code"x")})(${rhs})"
//│ fun (%>) bind: forall 'a 'b 'c. (Code['a, ??x | 'b], Code['a, ??x0] -> Code['c, ??x | 'b]) -> Code['c, 'b]

// * Somehow this one does extrude properly:
fun app = code"(f, x) => f(x)"
fun (%>) bind(rhs, k) = code"${app}(x => ${k(code"x")}, ${rhs})"
//│ fun app: Code[forall 'a 'b. ('a -> 'b, 'a) -> 'b, nothing]
//│ fun (%>) bind: forall 'c 'd 'e. (Code['c, ??x | 'd], Code['c, ??x0] -> Code['e, ??x | 'd]) -> Code['e, 'd]


fun app(f, x) = f(x)
fun bind2(rhs, k) = code"app(x => ${k(code"x")}, ${rhs})"
//│ fun app: forall 'a 'b. ('a -> 'b, 'a) -> 'b
//│ fun bind2: forall 'c 'd 'e. (Code['c, ??x | 'd], Code['c, ??x0] -> Code['e, ??x | 'd]) -> Code['e, 'd]

:e
fun foo() =
  let bar = 42 // not at top level
  code"bar"
//│ ╔══[ERROR] identifier not found: bar
//│ ║  l.34: 	  code"bar"
//│ ╙──      	       ^^^
//│ fun foo: () -> Code[error, nothing]

fun (++) myadd(x, y) = x + y
code"1 ++ 2"
//│ fun (++) myadd: (Int, Int) -> Int
//│ Code[Int, nothing]

// * FIXME this shouldn't type check as it does (probably same bug as above)
// * Note that here the `'G` type var seems unused and is simplified away
fun bind(rhs, k: forall 'C: Code['A, 'C] -> Code['B, 'C | 'G]) = code"let x = ${rhs} in ${k(code"x")}"
//│ fun bind: forall 'A 'a 'B. (Code['A, 'a], k: forall 'C. Code['A, 'C] -> Code['B, 'C | ??x | 'a]) -> Code['B, 'a]
