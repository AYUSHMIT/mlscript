:NewParser
:NewDefs


// TODO check cyclicity
// :e
type A = A
//│ type A = A

// TODO check cyclicity
// :e
type A = A | int
//│ type A = int | A

// TODO check regularity
// :e
type Foo[A] = { x: A, y: Foo[(A, A)] }
//│ type Foo[A] = {x: A, y: Foo[(A, A,)]}


// TODO support abstract types
:e
type Test
//│ ╔══[ERROR] type alias definition requires a right-hand side
//│ ║  l.23: 	type Test
//│ ╙──      	^^^^^^^^^
//│ type Test = error

:e
type Test(n: int) = n
//│ ╔══[ERROR] type alias definitions cannot have value parameters
//│ ║  l.30: 	type Test(n: int) = n
//│ ╙──      	         ^^^^^^^^
//│ ╔══[ERROR] type identifier not found: n
//│ ║  l.30: 	type Test(n: int) = n
//│ ╙──      	                    ^
//│ type Test = error

class Base
//│ class Base()

:pe
:e
type Test: Base
//│ ╔══[PARSE ERROR] Expected end of input; found ':' instead
//│ ║  l.44: 	type Test: Base
//│ ╙──      	         ^
//│ ╔══[ERROR] type alias definition requires a right-hand side
//│ ║  l.44: 	type Test: Base
//│ ╙──      	^^^^^^^^^
//│ type Test = error

:pe
:e
type Test: Base = int
//│ ╔══[PARSE ERROR] Expected end of input; found ':' instead
//│ ║  l.55: 	type Test: Base = int
//│ ╙──      	         ^
//│ ╔══[ERROR] type alias definition requires a right-hand side
//│ ║  l.55: 	type Test: Base = int
//│ ╙──      	^^^^^^^^^
//│ type Test = error

:e
type Test extends Base
//│ ╔══[ERROR] type alias definitions cannot extend parents
//│ ║  l.65: 	type Test extends Base
//│ ╙──      	                  ^^^^
//│ ╔══[ERROR] type alias definition requires a right-hand side
//│ ║  l.65: 	type Test extends Base
//│ ╙──      	^^^^^^^^^^^^^^^^^^^^^^
//│ type Test = error

:pe
:e
type Test extends Base = int
//│ ╔══[PARSE ERROR] Expected end of input; found '=' instead
//│ ║  l.76: 	type Test extends Base = int
//│ ╙──      	                       ^
//│ ╔══[ERROR] type alias definitions cannot extend parents
//│ ║  l.76: 	type Test extends Base = int
//│ ╙──      	                  ^^^^
//│ ╔══[ERROR] type alias definition requires a right-hand side
//│ ║  l.76: 	type Test extends Base = int
//│ ╙──      	^^^^^^^^^^^^^^^^^^^^^^
//│ type Test = error

:e
type Test = int extends Base
//│ ╔══[ERROR] type alias definitions cannot extend parents
//│ ║  l.89: 	type Test = int extends Base
//│ ╙──      	                        ^^^^
//│ type Test = int


:pe
type Poly[mut A] = A
//│ ╔══[PARSE ERROR] unsupported type parameter shape (mutable reference)
//│ ║  l.97: 	type Poly[mut A] = A
//│ ╙──      	              ^
//│ type Poly[<error>] = A

:pe
type Poly[#A] = A
//│ ╔══[PARSE ERROR] unsupported type parameter shape (specialized reference)
//│ ║  l.104: 	type Poly[#A] = A
//│ ╙──       	           ^
//│ type Poly[<error>] = A


