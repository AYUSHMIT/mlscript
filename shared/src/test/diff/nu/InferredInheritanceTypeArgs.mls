:NewDefs


mixin Test[A] {
    fun bar: (A, A)
    fun bar = (this.a, this.a)
}
//│ mixin Test[A]() {
//│   this: {a: A}
//│   fun bar: (A, A,)
//│ }

class A(a: int) extends Test
//│ class A(a: int) {
//│   fun bar: (int, int,)
//│ }

mixin Test2[S, T] {
    fun x: (S, T)
    fun x = (this.s, this.t)
    fun fb: S => (S, S)
    fun fb(h: S) = (this.s, h)
}
//│ mixin Test2[S, T]() {
//│   this: {s: S, t: T}
//│   fun fb: S -> (S, S,)
//│   fun x: (S, T,)
//│ }

class A1[B](s: bool, t: B) extends Test2[bool, B]
//│ class A1[B](s: bool, t: B) {
//│   fun fb: (h: bool,) -> (bool, bool,)
//│   fun x: (bool, B,)
//│ }

// TODO: Investigate type of fb
class A2[A](s: A, t: int) extends Test2
//│ class A2[A](s: A, t: int) {
//│   fun fb: (h: 'S,) -> (A, A | 'S,)
//│   fun x: (A, int,)
//│ }

// TODO: Investigate type of fb
class A3(s: int, t: bool) extends Test2
//│ class A3(s: int, t: bool) {
//│   fun fb: (h: 'S,) -> (int, 'S | int,)
//│   fun x: (int, bool,)
//│ }

class P(p: int) { 
    fun foo(x) = x + p 
}
//│ class P(p: int) {
//│   fun foo: int -> int
//│ }

:e // FIXME
class C1(a: int) extends P(a) { fun bar = this.foo(0) }
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.58: 	class C1(a: int) extends P(a) { fun bar = this.foo(0) }
//│ ╙──      	                                              ^^^^
//│ class C1(a: int) {
//│   fun bar: error
//│   fun foo: int -> int
//│ }

:e // FIXME
class C2(a: int, b: int) extends P(a + b) {
    fun foo(x) = x * this.p + a * b
}
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.69: 	    fun foo(x) = x * this.p + a * b
//│ ╙──      	                         ^^
//│ class C2(a: int, b: int) {
//│   fun foo: int -> int
//│ }

let c2 =  C2(1, 2)
//│ let c2: C2
//│ c2
//│    = C2 {}

c2.foo(2)
//│ int
//│ res
//│     = 8

c2.p
//│ int
//│ res
//│     = 3


class Test[A](x: A)
//│ class Test[A](x: A)

class A(a: int) extends Test(a)
//│ class A(a: int)

let a1 = A(1)
//│ let a1: A
//│ a1
//│    = A {}

a1: Test['x]
//│ Test['x]
//│   where
//│     'x :> int
//│ res
//│     = A {}

a1.x
//│ int
//│ res
//│     = 1

:NoJS
trait Foo[A] {
    fun foo[A](x: A): A
}
//│ trait Foo[A] {
//│   fun foo: forall 'A. (x: 'A,) -> 'A
//│ }

// FIXME
class B extends Foo {
    fun foo(x) = x + 1
}
//│ ╔══[ERROR] Type error in definition of method foo
//│ ║  l.127: 	    fun foo(x) = x + 1
//│ ║         	        ^^^^^^^^^^^^^^
//│ ╟── type variable `A` leaks out of its scope
//│ ║  l.119: 	    fun foo[A](x: A): A
//│ ║         	            ^
//│ ╟── into reference of type `int`
//│ ║  l.127: 	    fun foo(x) = x + 1
//│ ╙──       	                 ^
//│ ╔══[ERROR] Type error in definition of method foo
//│ ║  l.127: 	    fun foo(x) = x + 1
//│ ║         	        ^^^^^^^^^^^^^^
//│ ╟── type variable `A` leaks out of its scope
//│ ║  l.127: 	    fun foo(x) = x + 1
//│ ║         	                 ^^^^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this operator application:
//│ ║  l.127: 	    fun foo(x) = x + 1
//│ ╙──       	                 ^^^^^
//│ class B {
//│   fun foo: int -> int
//│ }
