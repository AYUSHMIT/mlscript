:NewParser
:NewDefs
:NoJS


// :d
mixin BaseTest {
  fun test = super.base
}
//│ /!!!\ Uncaught error: scala.MatchError: TypedNuMxn(mixin BaseTest() {
//│ fun test = ...
//│ },this23',super24',TypedTypingUnit(List(test ~> TypedNuFun(1,fun test = ...,base26'')),None)) (of class mlscript.NuTypeDefs$TypedNuMxn)
//│ 	at: mlscript.Typer.mlscript$Typer$$goDecl$1(Typer.scala:1204)
//│ 	at: mlscript.Typer.$anonfun$expandType$4(Typer.scala:1231)
//│ 	at: scala.collection.immutable.List.map(List.scala:246)
//│ 	at: mlscript.Typer.goLike$1(Typer.scala:1222)
//│ 	at: mlscript.Typer.expandType(Typer.scala:1322)
//│ 	at: mlscript.DiffTests.rec$1(DiffTests.scala:504)
//│ 	at: mlscript.DiffTests.$anonfun$new$3(DiffTests.scala:942)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
//│ 	at: org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)

mixin BaseInc {
  fun test = super.base + 1
  fun test2 = this.base
}
//│ /!!!\ Uncaught error: scala.MatchError: TypedNuMxn(mixin BaseInc() {
//│ fun test = ...
//│ fun test2 = ...
//│ },this29',super30',TypedTypingUnit(List(test ~> TypedNuFun(1,fun test = ...,α36''), test2 ~> TypedNuFun(1,fun test2 = ...,base37'')),None)) (of class mlscript.NuTypeDefs$TypedNuMxn)
//│ 	at: mlscript.Typer.mlscript$Typer$$goDecl$1(Typer.scala:1204)
//│ 	at: mlscript.Typer.$anonfun$expandType$4(Typer.scala:1231)
//│ 	at: scala.collection.immutable.List.map(List.scala:246)
//│ 	at: mlscript.Typer.goLike$1(Typer.scala:1222)
//│ 	at: mlscript.Typer.expandType(Typer.scala:1322)
//│ 	at: mlscript.DiffTests.rec$1(DiffTests.scala:504)
//│ 	at: mlscript.DiffTests.$anonfun$new$3(DiffTests.scala:942)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
//│ 	at: org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)

// :d
class Base1(base: int): BaseTest, BaseInc {
  fun test3 = [base, this.base]
}
//│ 
//│ class Base1(base: int) {
//│ this: 'this
//│ fun test: 'a
//│ fun test2: 'base
//│ fun test3: (int, 'base0,)
//│ }

Base1(1).test
//│ 
//│ 'test
//│ Typed: int

Base1(1).test2
//│ 
//│ 'test2
//│ Typed: int

Base1(1).test3
//│ 
//│ 'test3
//│ Typed: (int, int,)


class Base1(base): BaseTest
//│ 
//│ class Base1(base: 'base) {
//│ this: 'this
//│ fun test: 'base0
//│ }

Base1
//│ 
//│ forall 'base 'base0. (base: 'base,) -> Base1
//│ Typed: (base: anything,) -> Base1

// TODO
Base1(1).test
//│ 
//│ 'test
//│ Typed: nothing


:e
class Base1(x): BaseTest
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.91: 	class Base1(x): BaseTest
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `{x: ?x}` does not have field 'base'
//│ ║  l.91: 	class Base1(x): BaseTest
//│ ║        	           ^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.8: 	  fun test = super.base
//│ ║       	             ^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.8: 	  fun test = super.base
//│ ╙──     	             ^^^^^
//│ 
//│ class Base1(x: 'x) {
//│ this: 'this
//│ fun test: 'base
//│ }

Base1
//│ 
//│ forall 'x. (x: 'x,) -> Base1
//│ Typed: (x: anything,) -> Base1


// :ns
mixin Foo {
  fun test(x) = [super.base + x, x, super.misc]
}
//│ /!!!\ Uncaught error: scala.MatchError: TypedNuMxn(mixin Foo() {
//│ fun test = ...
//│ },this187',super188',TypedTypingUnit(List(test ~> TypedNuFun(1,fun test = ...,(α190'' -> (α194'', α190'', misc195'',)))),None)) (of class mlscript.NuTypeDefs$TypedNuMxn)
//│ 	at: mlscript.Typer.mlscript$Typer$$goDecl$1(Typer.scala:1204)
//│ 	at: mlscript.Typer.$anonfun$expandType$4(Typer.scala:1231)
//│ 	at: scala.collection.immutable.List.map(List.scala:246)
//│ 	at: mlscript.Typer.goLike$1(Typer.scala:1222)
//│ 	at: mlscript.Typer.expandType(Typer.scala:1322)
//│ 	at: mlscript.DiffTests.rec$1(DiffTests.scala:504)
//│ 	at: mlscript.DiffTests.$anonfun$new$3(DiffTests.scala:942)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
//│ 	at: org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)

module Base1(base: int, misc: string): Foo
//│ 
//│ namespace Base1(base: int, misc: string) {
//│ this: 'this
//│ fun test: 'a -> ('b, 'a, 'misc,)
//│ }

Base1.test
//│ 
//│ 'test
//│ Typed: (int & 'a) -> (int, 'a, string,)


mixin WrapBase {
  // fun wrap(x) = x
  // fun wrap(x) = x : int
  fun wrapA(x: int) = x : int
  fun wrap(x) = x
}
//│ /!!!\ Uncaught error: scala.MatchError: TypedNuMxn(mixin WrapBase() {
//│ fun wrapA = ...
//│ fun wrap = ...
//│ },this222',super223',TypedTypingUnit(List(wrapA ~> TypedNuFun(1,fun wrapA = ...,((x: Int,) -> Int)), wrap ~> TypedNuFun(1,fun wrap = ...,(α226'' -> α226''))),None)) (of class mlscript.NuTypeDefs$TypedNuMxn)
//│ 	at: mlscript.Typer.mlscript$Typer$$goDecl$1(Typer.scala:1204)
//│ 	at: mlscript.Typer.$anonfun$expandType$4(Typer.scala:1231)
//│ 	at: scala.collection.immutable.List.map(List.scala:246)
//│ 	at: mlscript.Typer.goLike$1(Typer.scala:1222)
//│ 	at: mlscript.Typer.expandType(Typer.scala:1322)
//│ 	at: mlscript.DiffTests.rec$1(DiffTests.scala:504)
//│ 	at: mlscript.DiffTests.$anonfun$new$3(DiffTests.scala:942)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
//│ 	at: org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)

// :d
mixin Wrap {
  fun wrapA(x) = [super.wrapA(x)]
  fun wrap(x) = [super.wrap(x)]
}
//│ /!!!\ Uncaught error: scala.MatchError: TypedNuMxn(mixin Wrap() {
//│ fun wrapA = ...
//│ fun wrap = ...
//│ },this228',super229',TypedTypingUnit(List(wrapA ~> TypedNuFun(1,fun wrapA = ...,(α232'' -> (α235'',))), wrap ~> TypedNuFun(1,fun wrap = ...,(α238'' -> (α241'',)))),None)) (of class mlscript.NuTypeDefs$TypedNuMxn)
//│ 	at: mlscript.Typer.mlscript$Typer$$goDecl$1(Typer.scala:1204)
//│ 	at: mlscript.Typer.$anonfun$expandType$4(Typer.scala:1231)
//│ 	at: scala.collection.immutable.List.map(List.scala:246)
//│ 	at: mlscript.Typer.goLike$1(Typer.scala:1222)
//│ 	at: mlscript.Typer.expandType(Typer.scala:1322)
//│ 	at: mlscript.DiffTests.rec$1(DiffTests.scala:504)
//│ 	at: mlscript.DiffTests.$anonfun$new$3(DiffTests.scala:942)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
//│ 	at: org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)



// :d
module WrapBase1: WrapBase, Wrap
//│ 
//│ namespace WrapBase1() {
//│ this: 'this
//│ fun wrap: 'a -> ('b,)
//│ fun wrapA: 'c -> ('d,)
//│ }


WrapBase1
//│ 
//│ WrapBase1
//│ Typed: WrapBase1

// :d
WrapBase1.wrapA
//│ 
//│ 'wrapA
//│ Typed: int -> (int,)

WrapBase1.wrap
//│ 
//│ 'wrap
//│ Typed: 'a -> ('a,)

// :d
// WrapBase1.wrap


WrapBase1.wrap(1)
//│ 
//│ 'a
//│ Typed: (1,)

WrapBase1.wrap("ok")
//│ 
//│ 'a
//│ Typed: ("ok",)


WrapBase1.wrapA(1)
//│ 
//│ 'a
//│ Typed: (int,)

:e
WrapBase1.wrapA("ok")
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.237: 	WrapBase1.wrapA("ok")
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ╟── string literal of type `"ok"` is not an instance of type `int`
//│ ║  l.237: 	WrapBase1.wrapA("ok")
//│ ║         	                ^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.150: 	  fun wrapA(x: int) = x : int
//│ ║         	               ^^^
//│ ╟── from reference:
//│ ║  l.170: 	  fun wrapA(x) = [super.wrapA(x)]
//│ ╙──       	                              ^
//│ 
//│ 'a
//│ Typed: (int,) | error



module WrapBase2: WrapBase, Wrap, Wrap, Wrap
//│ 
//│ namespace WrapBase2() {
//│ this: 'this
//│ fun wrap: 'a -> ('b,)
//│ fun wrapA: 'c -> ('d,)
//│ }

let w = WrapBase2.wrap
//│ 
//│ let w: 'wrap

let wd = w(1)
//│ 
//│ let wd: 'a

wd._1._1._1 + 1
//│ 
//│ 'a
//│ Typed: int


