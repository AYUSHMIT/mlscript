:NewParser
:NewDefs
:NoJS


// :d
mixin BaseTest {
  fun test = super.base
}
//│ mixin BaseTest
//│   this: this23' 
//│   super: super24' 
//│   |		super24' <: {base: base27_28'}
//│   fun test: ‹∀ 1. test26''#› where 
//│   |		test26''# := base27''
//│   |		base27'' :> base27_28' <: test26''#
//│   [pretty-printed] test: nothing

mixin BaseInc {
  fun test = super.base + 1
}
//│ mixin BaseInc
//│   this: this33' 
//│   super: super34' 
//│   |		super34' <: {base: base37_38'}
//│   |		base37_38' <: int<number>
//│   fun test: ‹∀ 1. test36''#› where 
//│   |		test36''# := α40''
//│   |		α40'' :> int<number> <: test36''#
//│   [pretty-printed] test: int

:d
class Base1(base: int): BaseTest
//│ 0. Typing TypingUnit(List(class Base1(base: int,): BaseTest {}))
//│ Completing class Base1(base: int,): BaseTest {}
//│ | Typing type int
//│ | | vars=Map() newDefsInfo=Map()
//│ | | 1. type int
//│ | | => Int
//│ | => Int ——— 
//│ | List()
//│ | base: int,
//│ | List(BaseTest)
//│ | Inheriting from BaseTest
//│ | | CONSTRAIN {base: Int} <! super24'
//│ | |   where 
//│ 		super24' <: {base: base27_28'}
//│ | | 1. C {base: Int} <! super24'    (0)
//│ | | | NEW super24' LB (0)
//│ | | | 1. C {base: Int} <! {base: base27_28'}    (2)
//│ | | | | 1. C {base: Int} <! {base: base27_28'}    (2)
//│ | | | | | 1. C {base: Int} <! {base: base27_28'}    (2)
//│ | | | | | | 1. C {base: Int} <! {base: base27_28'}    (2)
//│ | | | | | | | 1. C {base: Int} <! {base: base27_28'}    (2)
//│ | | | | | | | | 1. C Int <! base27_28'    (2)
//│ | | | | | | | | | NEW base27_28' LB (0)
//│ | | CONSTRAIN this45' <! this23'
//│ | |   where 
//│ | | 1. C this45' <! this23'    (0)
//│ | | | NEW this45' UB (1)
//│ | CONSTRAIN {base: Int} <! this45'
//│ |   where 
//│ 		this45' <: this23'
//│ | 1. C {base: Int} <! this45'    (0)
//│ | | NEW this45' LB (0)
//│ | | 1. C {base: Int} <! this23'    (2)
//│ | | | NEW this23' LB (0)
//│ | 1. Typing TypingUnit(List())
//│ | UNSTASHING... (out)
//│ CONSTRAIN Base1<> <! this44
//│   where 
//│ 0. C Base1<> <! this44    (0)
//│ | NEW this44 LB (0)
//│ class Base1


class Base1(base): BaseTest
//│ class Base1

:e
class Base1(x): BaseTest
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.81: 	class Base1(x): BaseTest
//│ ║        	      ^^^^^^^^^^^^^^^^^^
//│ ╟── type `{x: ?x}` does not have field 'base'
//│ ║  l.81: 	class Base1(x): BaseTest
//│ ║        	           ^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.8: 	  fun test = super.base
//│ ║       	             ^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.8: 	  fun test = super.base
//│ ╙──     	             ^^^^^
//│ class Base1

Base1
//│ Typed: (x: anything,) -> Base1


// :ns
mixin Foo {
  fun test(x) = [super.base + x, x, super.misc]
}
//│ mixin Foo
//│   this: this59' 
//│   super: super60' 
//│   |		super60' <: {misc: misc68_69'} & {base: base64_65'}
//│   |		base64_65' <: int<number>
//│   fun test: ‹∀ 1. test62''#› where 
//│   |		test62''# := (α63'' -> (α67'', α63'', misc68'',))
//│   |		α63'' <: int<number>
//│   |		α67'' :> int<number>
//│   |		misc68'' :> misc68_69'
//│   [pretty-printed] test: (int & 'a) -> (int, 'a, nothing,)

