:NewParser
:NewDefs
:NoJS



class Base0(n) {
  fun me = this
  fun my = this.n
  fun mine = my
  fun oops = this.my
}
//│ class Base0
//│   fun me: ‹∀ 1. me30''#› where 
//│   |		this24' :> Base0<> <: {my: my36_37'} & {n: n32_33'}
//│   |		me30''# := this24'
//│   |		my31''# := n32''
//│   |		n32'' :> n32_33' <: mine34''# & my31''#
//│   |		mine34''# := my31''#
//│   |		my36_37' :> ‹∀ 1. my31''#›
//│   [pretty-printed] me: Base0
//│   fun my: ‹∀ 1. my31''#› where 
//│   |		my31''# := n32''
//│   |		n32'' :> n32_33' <: mine34''# & my31''#
//│   |		mine34''# := my31''#
//│   [pretty-printed] my: nothing
//│   fun mine: ‹∀ 1. mine34''#› where 
//│   |		my31''# := n32''
//│   |		n32'' :> n32_33' <: mine34''# & my31''#
//│   |		mine34''# := my31''#
//│   [pretty-printed] mine: nothing
//│   fun oops: ‹∀ 1. oops35''#› where 
//│   |		my31''# := n32''
//│   |		n32'' :> n32_33' <: mine34''# & my31''#
//│   |		mine34''# := my31''#
//│   |		oops35''# := my36''
//│   |		my36'' :> my36_37' <: oops35''#
//│   |		my36_37' :> ‹∀ 1. my31''#›
//│   [pretty-printed] oops: nothing


let b1 = Base0(42)
b1.n
//│ fun b1: ‹∀ 0. b154'#› where 
//│ |		b154'# := α55'
//│ |		α55' :> Base0<> <: b154'#
//│ [pretty-printed] b1: Base0
//│ Typed: 42


let b2 = Base0("hi")
//│ fun b2: ‹∀ 0. b263'#› where 
//│ |		b263'# := α64'
//│ |		α64' :> Base0<> <: b263'#
//│ [pretty-printed] b2: Base0

// FIXME 42
b2.n
//│ Typed: "hi" | 42



class Base1(base: int) {
  fun getBase1 = base
  fun getBase2 = this.base
  fun foo(x) = this.base + x
}
//│ class Base1
//│   fun getBase1: ‹∀ 1. getBase175''#› where 
//│   |		getBase175''# := Int
//│   [pretty-printed] getBase1: int
//│   fun getBase2: ‹∀ 1. getBase276''#› where 
//│   |		getBase276''# := base77''
//│   |		base77'' :> base77_78' <: getBase276''#
//│   |		base77_78' :> Int
//│   [pretty-printed] getBase2: int
//│   fun foo: ‹∀ 1. foo79''#› where 
//│   |		foo79''# := (α80'' -> α84'')
//│   |		α80'' <: int<number>
//│   |		α84'' :> int<number>
//│   [pretty-printed] foo: int -> int

class Base1(base: int) {
  fun getBase1 = base
  fun me = this
  fun foo(x) = base + x
}
//│ class Base1
//│   fun getBase1: ‹∀ 1. getBase198''#› where 
//│   |		getBase198''# := Int
//│   [pretty-printed] getBase1: int
//│   fun me: ‹∀ 1. me99''#› where 
//│   |		this93' :> Base1<>
//│   |		me99''# := this93'
//│   [pretty-printed] me: Base1
//│   fun foo: ‹∀ 1. foo100''#› where 
//│   |		foo100''# := (α101'' -> α103'')
//│   |		α101'' <: int<number>
//│   |		α103'' :> int<number>
//│   [pretty-printed] foo: int -> int

Base1
//│ Typed: (base: int,) -> Base1

let b = Base1(1)
//│ fun b: ‹∀ 0. b111'#› where 
//│ |		b111'# := α112'
//│ |		α112' :> Base1<> <: b111'#
//│ [pretty-printed] b: Base1

b.base
//│ Typed: int

b.getBase1
//│ Typed: int

b.me
//│ Typed: Base1

:e
b.getBaseTypo
//│ ╔══[ERROR] class `Base1` does not contain member `getBaseTypo`
//│ ║  l.121: 	b.getBaseTypo
//│ ╙──       	 ^^^^^^^^^^^^
//│ Typed: error


b : Base1
//│ Typed: Base1



// TODO treat `a: int` as a signature
class Annots(base: 0 | 1) {
  a: int
  fun a = base
}
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.135: 	  a: int
//│ ║         	  ^
//│ ╟── type `(0 | 1,)` is not an instance of type `int`
//│ ║  l.134: 	class Annots(base: 0 | 1) {
//│ ║         	                   ^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.135: 	  a: int
//│ ║         	  ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.135: 	  a: int
//│ ╙──       	     ^^^
//│ class Annots
//│   fun a: ‹∀ 1. a133''#› where 
//│   |		a133''# := ((0<int,number> | 1<int,number>),)
//│   [pretty-printed] a: (0 | 1,)


