:NewParser
:NewDefs
:NoJS



class Base0(n) {
  fun me = this
  fun my = this.n
  fun mine = my
  fun oops = this.my
}
//│ class Base0
//│   fun me: ‹∀ 1. me30''#› where 
//│   |		this24' :> Base0<> <: {my: my36_37'} & {n: n32_33'}
//│   |		me30''# := this24'
//│   |		n32_33' :> n23_65
//│   |		my36_37' :> ‹∀ 1. my31_44''#›
//│   |		my31_44''# := n32_45''
//│   |		n32_45'' :> n32_42 <: mine34_46''# & my31_44''#
//│   |		mine34_46''# := my31_44''#
//│   [pretty-printed] me: Base0
//│   fun my: ‹∀ 1. my31''#› where 
//│   |		my31''# := n32''
//│   |		n32'' :> n32_33' <: mine34''# & my31''#
//│   |		n32_33' :> n23_65
//│   |		mine34''# := my31''#
//│   [pretty-printed] my: nothing
//│   fun mine: ‹∀ 1. mine34''#› where 
//│   |		my31''# := n32''
//│   |		n32'' :> n32_33' <: mine34''# & my31''#
//│   |		n32_33' :> n23_65
//│   |		mine34''# := my31''#
//│   [pretty-printed] mine: nothing
//│   fun oops: ‹∀ 1. oops35''#› where 
//│   |		oops35''# := my36''
//│   |		my36'' :> my36_37' <: oops35''#
//│   |		my36_37' :> ‹∀ 1. my31_44''#›
//│   |		my31_44''# := n32_45''
//│   |		n32_45'' :> n32_42 <: mine34_46''# & my31_44''#
//│   |		mine34_46''# := my31_44''#
//│   [pretty-printed] oops: nothing

// :d
// Base0
// Base0

let b1 = Base0(42)
//│ fun b1: ‹∀ 0. b184'#› where 
//│ |		b184'# := α99'
//│ |		α99' :> Base0<> <: b184'#
//│ [pretty-printed] b1: Base0

:d
let n1 = b1.n
//│ 0. Typing TypingUnit(List(let n1 = (b1).n))
//│ Completing let n1 = (b1).n
//│ | 1. Typing term (b1).n
//│ | | 1. Typing term b1
//│ | | 1. : b184'#
//│ | | CONSTRAIN b184'# <! {n: n104'}
//│ | |   where 
//│ 		b184'# := α99'
//│ 		α99' :> Base0<> <: b184'#
//│ | | 1. C b184'# <! {n: n104'}    (0)
//│ | | | 1. C α99' <! {n: n104'}    (2)
//│ | | | | NEW α99' UB (1)
//│ | | | | 1. C Base0<> <! {n: n104'}    (4)
//│ | | | | | 1. C Base0<> <! {n: n104'}    (4)
//│ | | | | | | TypedNuCls(0,class Base0(n,) {fun me = this; fun my = (this).n; fun mine = my; fun oops = (this).my},TypedTypingUnit(List(me ~> TypedNuFun(1,fun me = this,‹∀ 1. me30''#›), my ~> TypedNuFun(1,fun my = (this).n,‹∀ 1. my31''#›), mine ~> TypedNuFun(1,fun mine = my,‹∀ 1. mine34''#›), oops ~> TypedNuFun(1,fun oops = (this).my,‹∀ 1. oops35''#›)),None),List(),List((n,n23')),HashMap(n -> NuParam(n,n23'), mine -> TypedNuFun(1,fun mine = my,‹∀ 1. mine34''#›), oops -> TypedNuFun(1,fun oops = (this).my,‹∀ 1. oops35''#›), my -> TypedNuFun(1,fun my = (this).n,‹∀ 1. my31''#›), me -> TypedNuFun(1,fun me = this,‹∀ 1. me30''#›)))
//│ | | | | | | (>>,0,1)
//│ | | | | | | 1. FRESHEN ‹∀ 1. me30''#› || 0 .. 1024  1 false
//│ | | | | | | | 1. FRESHEN me30''# || 0 .. 1  2 false
//│ | | | | | | | | 1. FRESHEN this24' || 0 .. 1  1 false
//│ | | | | | | | | | 1. FRESHEN this24' || 0 .. 1  1 false
//│ | | | | | | | | | | 1. FRESHEN Base0<> || 0 .. 1  0 true
//│ | | | | | | | | | | => Base0<>
//│ | | | | | | | | | | 1. FRESHEN {my: my36_37'} || 0 .. 1  1 false
//│ | | | | | | | | | | | 1. FRESHEN {my: my36_37'} || 0 .. 1  1 false
//│ | | | | | | | | | | | | 1. FRESHEN {my: my36_37'} || 0 .. 1  1 false
//│ | | | | | | | | | | | | | 1. FRESHEN {my: my36_37'} || 0 .. 1  1 false
//│ | | | | | | | | | | | | | | 1. FRESHEN {my: my36_37'} || 0 .. 1  1 false
//│ | | | | | | | | | | | | | | | 1. FRESHEN my36_37' || 0 .. 1  1 false
//│ | | | | | | | | | | | | | | | | 1. FRESHEN ‹∀ 1. my31_44''#› || 0 .. 1  0 true
//│ | | | | | | | | | | | | | | | | => ‹∀ 1. my31_44''#›
//│ | | | | | | | | | | | | | | | => my36_108'
//│ | | | | | | | | | | | | | | => {my: my36_108'}
//│ | | | | | | | | | | | | | => {my: my36_108'}
//│ | | | | | | | | | | | | => {my: my36_108'}
//│ | | | | | | | | | | | => {my: my36_108'}
//│ | | | | | | | | | | => {my: my36_108'}
//│ | | | | | | | | | | 1. FRESHEN {n: n32_33'} || 0 .. 1  1 false
//│ | | | | | | | | | | | 1. FRESHEN {n: n32_33'} || 0 .. 1  1 false
//│ | | | | | | | | | | | | 1. FRESHEN {n: n32_33'} || 0 .. 1  1 false
//│ | | | | | | | | | | | | | 1. FRESHEN {n: n32_33'} || 0 .. 1  1 false
//│ | | | | | | | | | | | | | | 1. FRESHEN {n: n32_33'} || 0 .. 1  1 false
//│ | | | | | | | | | | | | | | | 1. FRESHEN n32_33' || 0 .. 1  1 false
//│ | | | | | | | | | | | | | | | | 1. FRESHEN n23_65 || 0 .. 1  0 true
//│ | | | | | | | | | | | | | | | | => n23_65
//│ | | | | | | | | | | | | | | | => n32_109'
//│ | | | | | | | | | | | | | | => {n: n32_109'}
//│ | | | | | | | | | | | | | => {n: n32_109'}
//│ | | | | | | | | | | | | => {n: n32_109'}
//│ | | | | | | | | | | | => {n: n32_109'}
//│ | | | | | | | | | | => {n: n32_109'}
//│ | | | | | | | | | => this24_107'
//│ | | | | | | | | => this24_107'
//│ | | | | | | | => me30_106''#
//│ | | | | | | => ‹∀ 1. me30_106''#›
//│ | | | | | | 1. FRESHEN ‹∀ 1. my31''#› || 0 .. 1024  1 false
//│ | | | | | | | 1. FRESHEN my31''# || 0 .. 1  2 false
//│ | | | | | | | | 1. FRESHEN n32'' || 0 .. 1  2 false
//│ | | | | | | | | | 1. FRESHEN n32_33' || 0 .. 1  1 false
//│ | | | | | | | | | => n32_109'
//│ | | | | | | | | | 1. FRESHEN mine34''# || 0 .. 1  2 false
//│ | | | | | | | | | | 1. FRESHEN mine34''# || 0 .. 1  2 false
//│ | | | | | | | | | | | 1. FRESHEN mine34''# || 0 .. 1  2 false
//│ | | | | | | | | | | | | 1. FRESHEN my31''# || 0 .. 1  2 false
//│ | | | | | | | | | | | | | 1. FRESHEN my31''# || 0 .. 1  2 false
//│ | | | | | | | | | | | | | => my31_111''
//│ | | | | | | | | | | | | => my31_111''
//│ | | | | | | | | | | | => mine34_113''#
//│ | | | | | | | | | | => mine34_113''#
//│ | | | | | | | | | => mine34_113''#
//│ | | | | | | | | | 1. FRESHEN my31''# || 0 .. 1  2 false
//│ | | | | | | | | | | 1. FRESHEN my31''# || 0 .. 1  2 false
//│ | | | | | | | | | | => my31_111''
//│ | | | | | | | | | => my31_111''
//│ | | | | | | | | => n32_112''
//│ | | | | | | | => my31_111''#
//│ | | | | | | => ‹∀ 1. my31_111''#›
//│ | | | | | | 1. FRESHEN ‹∀ 1. mine34''#› || 0 .. 1024  1 false
//│ | | | | | | | 1. FRESHEN mine34''# || 0 .. 1  2 false
//│ | | | | | | | => mine34_113''#
//│ | | | | | | => ‹∀ 1. mine34_113''#›
//│ | | | | | | 1. FRESHEN ‹∀ 1. oops35''#› || 0 .. 1024  1 false
//│ | | | | | | | 1. FRESHEN oops35''# || 0 .. 1  2 false
//│ | | | | | | | | 1. FRESHEN my36'' || 0 .. 1  2 false
//│ | | | | | | | | | 1. FRESHEN my36_37' || 0 .. 1  1 false
//│ | | | | | | | | | => my36_108'
//│ | | | | | | | | | 1. FRESHEN oops35''# || 0 .. 1  2 false
//│ | | | | | | | | | | 1. FRESHEN oops35''# || 0 .. 1  2 false
//│ | | | | | | | | | | => oops35_116''
//│ | | | | | | | | | => oops35_116''
//│ | | | | | | | | => my36_117''
//│ | | | | | | | => oops35_116''#
//│ | | | | | | => ‹∀ 1. oops35_116''#›
//│ | | | | | | 1. FRESHEN n23' || 0 .. 1024  1 false
//│ | | | | | | => n23_118'
//│ | | | | | | 1. FRESHEN n23' || 0 .. 1024  1 false
//│ | | | | | | => n23_118'
//│ | | | | | | 1. FRESHEN ‹∀ 1. mine34''#› || 0 .. 1024  1 false
//│ | | | | | | | 1. FRESHEN mine34''# || 0 .. 1  2 false
//│ | | | | | | | => mine34_113''#
//│ | | | | | | => ‹∀ 1. mine34_113''#›
//│ | | | | | | 1. FRESHEN ‹∀ 1. oops35''#› || 0 .. 1024  1 false
//│ | | | | | | | 1. FRESHEN oops35''# || 0 .. 1  2 false
//│ | | | | | | | => oops35_116''#
//│ | | | | | | => ‹∀ 1. oops35_116''#›
//│ | | | | | | 1. FRESHEN ‹∀ 1. my31''#› || 0 .. 1024  1 false
//│ | | | | | | | 1. FRESHEN my31''# || 0 .. 1  2 false
//│ | | | | | | | => my31_111''#
//│ | | | | | | => ‹∀ 1. my31_111''#›
//│ | | | | | | 1. FRESHEN ‹∀ 1. me30''#› || 0 .. 1024  1 false
//│ | | | | | | | 1. FRESHEN me30''# || 0 .. 1  2 false
//│ | | | | | | | => me30_106''#
//│ | | | | | | => ‹∀ 1. me30_106''#›
//│ | | | | | | TypedNuCls(0,class Base0(n,) {fun me = this; fun my = (this).n; fun mine = my; fun oops = (this).my},TypedTypingUnit(List(me ~> TypedNuFun(1,fun me = this,‹∀ 1. me30_106''#›), my ~> TypedNuFun(1,fun my = (this).n,‹∀ 1. my31_111''#›), mine ~> TypedNuFun(1,fun mine = my,‹∀ 1. mine34_113''#›), oops ~> TypedNuFun(1,fun oops = (this).my,‹∀ 1. oops35_116''#›)),None),List(),List((n,n23_118')),HashMap(n -> NuParam(n,n23_118'), mine -> TypedNuFun(1,fun mine = my,‹∀ 1. mine34_113''#›), oops -> TypedNuFun(1,fun oops = (this).my,‹∀ 1. oops35_116''#›), my -> TypedNuFun(1,fun my = (this).n,‹∀ 1. my31_111''#›), me -> TypedNuFun(1,fun me = this,‹∀ 1. me30_106''#›)))
//│ | | | | | | (n,HashMap(n -> NuParam(n,n23_118'), mine -> TypedNuFun(1,fun mine = my,‹∀ 1. mine34_113''#›), oops -> TypedNuFun(1,fun oops = (this).my,‹∀ 1. oops35_116''#›), my -> TypedNuFun(1,fun my = (this).n,‹∀ 1. my31_111''#›), me -> TypedNuFun(1,fun me = this,‹∀ 1. me30_106''#›)))
//│ | | | | | | 1. C n23_118' <! n104'    (3)
//│ | | | | | | | NEW n23_118' UB (1)
//│ | 1. : n104'
//│ | CONSTRAIN n104' <! n1103'
//│ |   where 
//│ | 1. C n104' <! n1103'    (0)
//│ | | NEW n104' UB (1)
//│ | UNSTASHING... (out)
//│ ⬤ Typed as: ‹∀ 0. n1103'#›
//│  where: 
//│ 		n1103'# := n104'
//│ 		n104' <: n1103'#
//│ fun n1: ‹∀ 0. n1103'#› where 
//│ |		n1103'# := n104'
//│ |		n104' <: n1103'#
//│ [pretty-printed] n1: nothing

// TODO
n1 + 1
//│ Typed: int


let b2 = Base0("hi")
let n2 = b2.n
//│ fun b2: ‹∀ 0. b2126'#› where 
//│ |		b2126'# := α141'
//│ |		α141' :> Base0<> <: {n: n143'} & b2126'#
//│ |		n2142'# := n143'
//│ |		n143' <: n2142'#
//│ [pretty-printed] b2: Base0
//│ fun n2: ‹∀ 0. n2142'#› where 
//│ |		n2142'# := n143'
//│ |		n143' <: n2142'#
//│ [pretty-printed] n2: nothing



class Base1(base: int) {
  fun getBase1 = base
  fun getBase2 = this.base
  fun foo(x) = this.base + x
}
//│ class Base1
//│   fun getBase1: ‹∀ 1. getBase1168''#› where 
//│   |		getBase1168''# := Int
//│   [pretty-printed] getBase1: int
//│   fun getBase2: ‹∀ 1. getBase2169''#› where 
//│   |		getBase2169''# := base170''
//│   |		base170'' :> base170_171' <: getBase2169''#
//│   |		base170_171' :> Int
//│   [pretty-printed] getBase2: int
//│   fun foo: ‹∀ 1. foo172''#› where 
//│   |		foo172''# := (α173'' -> α177'')
//│   |		α173'' <: int<number>
//│   |		α177'' :> int<number>
//│   [pretty-printed] foo: int -> int

class Base1(base: int) {
  fun getBase1 = base
  fun me = this
  fun foo(x) = base + x
}
//│ class Base1
//│   fun getBase1: ‹∀ 1. getBase1203''#› where 
//│   |		getBase1203''# := Int
//│   [pretty-printed] getBase1: int
//│   fun me: ‹∀ 1. me204''#› where 
//│   |		this198' :> Base1<>
//│   |		me204''# := this198'
//│   [pretty-printed] me: Base1
//│   fun foo: ‹∀ 1. foo205''#› where 
//│   |		foo205''# := (α206'' -> α208'')
//│   |		α206'' <: int<number>
//│   |		α208'' :> int<number>
//│   [pretty-printed] foo: int -> int

Base1
//│ Typed: (base: int,) -> Base1

let b = Base1(1)
//│ fun b: ‹∀ 0. b221'#› where 
//│ |		b221'# := α227'
//│ |		α227' :> Base1<> <: b221'#
//│ [pretty-printed] b: Base1

b.base
//│ Typed: int

b.getBase1
//│ Typed: int

:d
b.me
//│ 0. Typing TypingUnit(List((b).me))
//│ | 0. Typing term (b).me
//│ | | 0. Typing term b
//│ | | 0. : b221'#
//│ | | CONSTRAIN b221'# <! {me: me245}
//│ | |   where 
//│ 		getBase1203''# := Int
//│ 		b221'# := α227'
//│ 		α227' :> Base1<> <: {getBase1: getBase1237} & {base: base230} & b221'#
//│ 		base230 :> Int
//│ 		getBase1237 :> ‹∀ 1. getBase1203''#›
//│ | | 0. C b221'# <! {me: me245}    (0)
//│ | | | 0. C α227' <! {me: me245}    (2)
//│ | | | | NEW α227' UB (0)
//│ | | | | 0. C Base1<> <! {me: me245}    (4)
//│ | | | | | 0. C Base1<> <! {me: me245}    (4)
//│ | | | | | | TypedNuCls(0,class Base1(base: int,) {fun getBase1 = base; fun me = this; fun foo = (x,) => + (base,) (x,)},TypedTypingUnit(List(getBase1 ~> TypedNuFun(1,fun getBase1 = base,‹∀ 1. getBase1203''#›), me ~> TypedNuFun(1,fun me = this,‹∀ 1. me204''#›), foo ~> TypedNuFun(1,fun foo = (x,) => + (base,) (x,),‹∀ 1. foo205''#›)),None),List(),List((base,Int)),Map(base -> NuParam(base,Int), getBase1 -> TypedNuFun(1,fun getBase1 = base,‹∀ 1. getBase1203''#›), me -> TypedNuFun(1,fun me = this,‹∀ 1. me204''#›), foo -> TypedNuFun(1,fun foo = (x,) => + (base,) (x,),‹∀ 1. foo205''#›)))
//│ | | | | | | (>>,0,0)
//│ | | | | | | 0. FRESHEN ‹∀ 1. getBase1203''#› || 0 .. 1024  0 true
//│ | | | | | | => ‹∀ 1. getBase1203''#›
//│ | | | | | | 0. FRESHEN ‹∀ 1. me204''#› || 0 .. 1024  1 false
//│ | | | | | | | 0. FRESHEN me204''# || 0 .. 1  2 false
//│ | | | | | | | | 0. FRESHEN this198' || 0 .. 1  1 false
//│ | | | | | | | | | 0. FRESHEN this198' || 0 .. 1  1 false
//│ | | | | | | | | | | 0. FRESHEN Base1<> || 0 .. 1  0 true
//│ | | | | | | | | | | => Base1<>
//│ | | | | | | | | | => this198_249
//│ | | | | | | | | => this198_249
//│ | | | | | | | => me204_248''#
//│ | | | | | | => ‹∀ 1. me204_248''#›
//│ | | | | | | 0. FRESHEN ‹∀ 1. foo205''#› || 0 .. 1024  0 true
//│ | | | | | | => ‹∀ 1. foo205''#›
//│ | | | | | | 0. FRESHEN ‹∀ 1. getBase1203''#› || 0 .. 1024  0 true
//│ | | | | | | => ‹∀ 1. getBase1203''#›
//│ | | | | | | 0. FRESHEN ‹∀ 1. me204''#› || 0 .. 1024  1 false
//│ | | | | | | | 0. FRESHEN me204''# || 0 .. 1  2 false
//│ | | | | | | | => me204_248''#
//│ | | | | | | => ‹∀ 1. me204_248''#›
//│ | | | | | | 0. FRESHEN ‹∀ 1. foo205''#› || 0 .. 1024  0 true
//│ | | | | | | => ‹∀ 1. foo205''#›
//│ | | | | | | TypedNuCls(0,class Base1(base: int,) {fun getBase1 = base; fun me = this; fun foo = (x,) => + (base,) (x,)},TypedTypingUnit(List(getBase1 ~> TypedNuFun(0,fun getBase1 = base,‹∀ 1. getBase1203''#›), me ~> TypedNuFun(0,fun me = this,‹∀ 1. me204_248''#›), foo ~> TypedNuFun(0,fun foo = (x,) => + (base,) (x,),‹∀ 1. foo205''#›)),None),List(),List((base,Int)),Map(base -> NuParam(base,Int), getBase1 -> TypedNuFun(0,fun getBase1 = base,‹∀ 1. getBase1203''#›), me -> TypedNuFun(0,fun me = this,‹∀ 1. me204_248''#›), foo -> TypedNuFun(0,fun foo = (x,) => + (base,) (x,),‹∀ 1. foo205''#›)))
//│ | | | | | | (me,Map(base -> NuParam(base,Int), getBase1 -> TypedNuFun(0,fun getBase1 = base,‹∀ 1. getBase1203''#›), me -> TypedNuFun(0,fun me = this,‹∀ 1. me204_248''#›), foo -> TypedNuFun(0,fun foo = (x,) => + (base,) (x,),‹∀ 1. foo205''#›)))
//│ | | | | | | 0. C ‹∀ 1. me204_248''#› <! me245    (3)
//│ | | | | | | | NEW me245 LB (0)
//│ | 0. : me245
//│ ⬤ Typed as: ‹∀ 0. me245›
//│  where: 
//│ 		me245 :> ‹∀ 1. me204_248''#›
//│ 		me204_248''# := this198_249
//│ 		this198_249 :> Base1<>
//│ Typed: Base1

:e
b.getBaseTypo
//│ ╔══[ERROR] class `Base1` does not contain member `getBaseTypo`
//│ ║  l.316: 	b.getBaseTypo
//│ ╙──       	 ^^^^^^^^^^^^
//│ Typed: error


b : Base1
//│ Typed: Base1



// TODO treat `a: int` as a signature
class Annots(base: 0 | 1) {
  a: int
  fun a = base
}
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.330: 	  a: int
//│ ║         	  ^
//│ ╟── type `(0 | 1,)` is not an instance of type `int`
//│ ║  l.329: 	class Annots(base: 0 | 1) {
//│ ║         	                   ^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.330: 	  a: int
//│ ║         	  ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.330: 	  a: int
//│ ╙──       	     ^^^
//│ class Annots
//│   fun a: ‹∀ 1. a265''#› where 
//│   |		a265''# := ((0<int,number> | 1<int,number>),)
//│   [pretty-printed] a: (0 | 1,)


