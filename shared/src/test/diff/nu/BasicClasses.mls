:NewParser
:NewDefs
:NoJS



class Base0(n) {
  fun me = this
  fun my = this.n
  fun mine = my
  fun oops = this.my
}
//│ class Base0
//│   fun me: ‹∀ 1. me30''#› where 
//│   |		this24' :> Base0<> <: {my: my36_37'} & {n: n32_33'}
//│   |		me30''# := this24'
//│   |		n32_33' :> n23_65
//│   |		my36_37' :> ‹∀ 1. my31_44''#›
//│   |		my31_44''# := n32_45''
//│   |		n32_45'' :> n32_42 <: mine34_46''# & my31_44''#
//│   |		mine34_46''# := my31_44''#
//│   [pretty-printed] me: Base0
//│   fun my: ‹∀ 1. my31''#› where 
//│   |		my31''# := n32''
//│   |		n32'' :> n32_33' <: mine34''# & my31''#
//│   |		n32_33' :> n23_65
//│   |		mine34''# := my31''#
//│   [pretty-printed] my: nothing
//│   fun mine: ‹∀ 1. mine34''#› where 
//│   |		my31''# := n32''
//│   |		n32'' :> n32_33' <: mine34''# & my31''#
//│   |		n32_33' :> n23_65
//│   |		mine34''# := my31''#
//│   [pretty-printed] mine: nothing
//│   fun oops: ‹∀ 1. oops35''#› where 
//│   |		oops35''# := my36''
//│   |		my36'' :> my36_37' <: oops35''#
//│   |		my36_37' :> ‹∀ 1. my31_44''#›
//│   |		my31_44''# := n32_45''
//│   |		n32_45'' :> n32_42 <: mine34_46''# & my31_44''#
//│   |		mine34_46''# := my31_44''#
//│   [pretty-printed] oops: nothing

// :d
// Base0
// Base0

let b1 = Base0(42)
//│ let b1: α98 where 
//│ |		α98 :> Base0<>
//│ [pretty-printed] b1: Base0

// :d
let n1 = b1.n
//│ let n1: n102 where 
//│ [pretty-printed] n1: nothing

// TODO
n1 + 1
//│ Typed: int


let b2 = Base0("hi")
let n2 = b2.n
//│ let b2: α137 where 
//│ |		α137 :> Base0<> <: {n: n139}
//│ [pretty-printed] b2: Base0
//│ let n2: n139 where 
//│ [pretty-printed] n2: nothing



class Base1(base: int) {
  fun getBase1 = base
  fun getBase2 = this.base
  fun foo(x) = this.base + x
}
//│ class Base1
//│   fun getBase1: ‹∀ 1. getBase1162''#› where 
//│   |		getBase1162''# := Int
//│   [pretty-printed] getBase1: int
//│   fun getBase2: ‹∀ 1. getBase2163''#› where 
//│   |		getBase2163''# := base164''
//│   |		base164'' :> base164_165' <: getBase2163''#
//│   |		base164_165' :> Int
//│   [pretty-printed] getBase2: int
//│   fun foo: ‹∀ 1. foo166''#› where 
//│   |		foo166''# := (α167'' -> α171'')
//│   |		α167'' <: int<number>
//│   |		α171'' :> int<number>
//│   [pretty-printed] foo: int -> int

class Base1(base: int) {
  fun getBase1 = base
  fun me = this
  fun foo(x) = base + x
}
//│ class Base1
//│   fun getBase1: ‹∀ 1. getBase1197''#› where 
//│   |		getBase1197''# := Int
//│   [pretty-printed] getBase1: int
//│   fun me: ‹∀ 1. me198''#› where 
//│   |		this192' :> Base1<>
//│   |		me198''# := this192'
//│   [pretty-printed] me: Base1
//│   fun foo: ‹∀ 1. foo199''#› where 
//│   |		foo199''# := (α200'' -> α202'')
//│   |		α200'' <: int<number>
//│   |		α202'' :> int<number>
//│   [pretty-printed] foo: int -> int

Base1
//│ Typed: (base: int,) -> Base1

let b = Base1(1)
//│ let b: α220 where 
//│ |		α220 :> Base1<>
//│ [pretty-printed] b: Base1

b.base
//│ Typed: int

b.getBase1
//│ Typed: int

// :d
b.me
//│ Typed: Base1

:e
b.getBaseTypo
//│ ╔══[ERROR] class `Base1` does not contain member `getBaseTypo`
//│ ║  l.131: 	b.getBaseTypo
//│ ╙──       	 ^^^^^^^^^^^^
//│ Typed: error


b : Base1
//│ Typed: Base1


:e // TODO
class Rec(n) {
  fun go = Rec(n + 1)
}
//│ ╔══[ERROR] Cyclic definition
//│ ║  l.143: 	class Rec(n) {
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.144: 	  fun go = Rec(n + 1)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.145: 	}
//│ ╙──       	^
//│ class Rec
//│   fun go: ‹∀ 1. go258''#› where 
//│   |		go258''# := α261''
//│   |		α261'' :> error<> <: go258''#
//│   [pretty-printed] go: error




// TODO treat `a: int` as a signature
class Annots(base: 0 | 1) {
  a: int
  fun a = base
}
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.164: 	  a: int
//│ ║         	  ^
//│ ╟── type `(0 | 1,)` is not an instance of type `int`
//│ ║  l.163: 	class Annots(base: 0 | 1) {
//│ ║         	                   ^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.164: 	  a: int
//│ ║         	  ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.164: 	  a: int
//│ ╙──       	     ^^^
//│ class Annots
//│   fun a: ‹∀ 1. a268''#› where 
//│   |		a268''# := ((0<int,number> | 1<int,number>),)
//│   [pretty-printed] a: (0 | 1,)


