:NewParser
:NewDefs
:NoJS


// TODO
// :d
class Base0(n) {
  fun me = this
  fun my = this.n
  fun mine = my
  fun oops = this.my
}
//│ ╔══[ERROR] class `Base0` does not contain member `my`
//│ ║  l.12: 	  fun oops = this.my
//│ ╙──      	                 ^^^
//│ class Base0
//│   fun me: ‹∀ 1. me30''#› where 
//│   |		this24 :> Base0<> <: {my: my36_37} & {n: n32_33}
//│   |		me30''# := this24
//│   |		my36_37 :> error<>
//│   [pretty-printed] me: Base0
//│   fun my: ‹∀ 1. my31''#› where 
//│   |		my31''# := n32''
//│   |		n32'' :> n32_33 <: mine34''# & my31''#
//│   |		mine34''# := my31''#
//│   [pretty-printed] my: nothing
//│   fun mine: ‹∀ 1. mine34''#› where 
//│   |		my31''# := n32''
//│   |		n32'' :> n32_33 <: mine34''# & my31''#
//│   |		mine34''# := my31''#
//│   [pretty-printed] mine: nothing
//│   fun oops: ‹∀ 1. oops35''#› where 
//│   |		oops35''# := my36''
//│   |		my36'' :> my36_37 <: oops35''#
//│   |		my36_37 :> error<>
//│   [pretty-printed] oops: error

class Base1(base: int) {
  fun getBase1 = base
  fun getBase2 = this.base
  fun foo(x) = this.base + x
}
//│ class Base1
//│   fun getBase1: ‹∀ 1. getBase156''#› where 
//│   |		getBase156''# := Int
//│   [pretty-printed] getBase1: int
//│   fun getBase2: ‹∀ 1. getBase257''#› where 
//│   |		getBase257''# := base58''
//│   |		base58'' :> base58_59 <: getBase257''#
//│   |		base58_59 :> Int
//│   [pretty-printed] getBase2: int
//│   fun foo: ‹∀ 1. foo60''#› where 
//│   |		foo60''# := (α61'' -> α65'')
//│   |		α61'' <: int<number>
//│   |		α65'' :> int<number>
//│   [pretty-printed] foo: int -> int

class Base1(base: int) {
  fun getBase1 = base
  fun me = this
  fun foo(x) = base + x
}
//│ class Base1
//│   fun getBase1: ‹∀ 1. getBase179''#› where 
//│   |		getBase179''# := Int
//│   [pretty-printed] getBase1: int
//│   fun me: ‹∀ 1. me80''#› where 
//│   |		this74 :> Base1<>
//│   |		me80''# := this74
//│   [pretty-printed] me: Base1
//│   fun foo: ‹∀ 1. foo81''#› where 
//│   |		foo81''# := (α82'' -> α84'')
//│   |		α82'' <: int<number>
//│   |		α84'' :> int<number>
//│   [pretty-printed] foo: int -> int

Base1
//│ Typed: (base: int,) -> Base1

let b = Base1(1)
//│ fun b: ‹∀ 0. b92'#› where 
//│ |		b92'# := α93'
//│ |		α93' :> Base1<> <: b92'#
//│ [pretty-printed] b: Base1

b.base
//│ Typed: int

// TODO
// :d
b.getBase1
//│ ╔══[ERROR] class `Base1` does not contain member `getBase1`
//│ ║  l.92: 	b.getBase1
//│ ╙──      	 ^^^^^^^^^
//│ Typed: error

:e
b.getBaseTypo
//│ ╔══[ERROR] class `Base1` does not contain member `getBaseTypo`
//│ ║  l.99: 	b.getBaseTypo
//│ ╙──      	 ^^^^^^^^^^^^
//│ Typed: error


b : Base1
//│ Typed: Base1


// TODO treat `a: int` as a signature
class Annots(base: 0 | 1) {
  a: int
  fun a = base
}
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing


