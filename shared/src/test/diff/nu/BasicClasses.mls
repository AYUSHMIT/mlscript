:NewParser
:NewDefs
:NoJS



class C {
  fun id(x) = x
  fun const(x) = id
}
//│ 
//│ class C() {
//│ this: 'this
//│ fun const: 'a -> 'b -> 'b
//│ fun id: 'b -> 'b
//│ }


class Base0(n) {
  fun me = this
  fun my = this.n
  fun mine = my
  fun oops = this.my
}
//│ 
//│ class Base0(n: 'n) {
//│ this: 'this
//│ fun me: 'this
//│ fun mine: 'n0
//│ fun my: 'n0
//│ fun oops: 'my
//│ }

// :d
// Base0
// Base0

let b1 = Base0(42)
//│ 
//│ let b1: 'a

// :d
let n1 = b1.n
//│ 
//│ let n1: 'n

// TODO
n1 + 1
//│ 
//│ 'a
//│ Typed: int


let b2 = Base0("hi")
let n2 = b2.n
//│ 
//│ let b2: 'a
//│ let n2: 'n



class Base1(base: int) {
  fun getBase1 = base
  fun getBase2 = this.base
  fun foo(x) = this.base + x
}
//│ 
//│ class Base1(base: int) {
//│ this: 'this
//│ fun foo: 'a -> 'b
//│ fun getBase1: int
//│ fun getBase2: 'base
//│ }

class Base1(base: int) {
  fun getBase1 = base
  fun me = this
  fun foo(x) = base + x
}
//│ 
//│ class Base1(base: int) {
//│ this: 'this
//│ fun foo: 'a -> 'b
//│ fun getBase1: int
//│ fun me: 'this
//│ }

Base1
//│ 
//│ (base: int,) -> Base1
//│ Typed: (base: int,) -> Base1

let b = Base1(1)
//│ 
//│ let b: 'a

b.base
//│ 
//│ 'base
//│ Typed: int

b.getBase1
//│ 
//│ 'getBase1
//│ Typed: int

// :d
b.me
//│ 
//│ 'me
//│ Typed: Base1

:e
b.getBaseTypo
//│ ╔══[ERROR] class `Base1` does not contain member `getBaseTypo`
//│ ║  l.114: 	b.getBaseTypo
//│ ╙──       	 ^^^^^^^^^^^^
//│ 
//│ 'getBaseTypo
//│ Typed: error


b : Base1
//│ 
//│ Base1
//│ Typed: Base1


:e // TODO
class Rec(n) {
  fun go = Rec(n + 1)
}
//│ ╔══[ERROR] Cyclic definition
//│ ║  l.130: 	class Rec(n) {
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.131: 	  fun go = Rec(n + 1)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.132: 	}
//│ ╙──       	^
//│ 
//│ class Rec(n: 'n) {
//│ this: 'this
//│ fun go: 'a
//│ }




// TODO treat `a: int` as a signature
class Annots(base: 0 | 1) {
  a: int
  fun a = base
}
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.151: 	  a: int
//│ ║         	  ^
//│ ╟── type `(0 | 1,)` is not an instance of type `int`
//│ ║  l.150: 	class Annots(base: 0 | 1) {
//│ ║         	                   ^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.151: 	  a: int
//│ ║         	  ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.151: 	  a: int
//│ ╙──       	     ^^^
//│ 
//│ class Annots(base: (0 | 1,)) {
//│ this: 'this
//│ fun a: (0 | 1,)
//│ }



