:NewParser
:NewDefs
:NoJS



class Base0(n) {
  fun me = this
  fun my = this.n
  fun mine = my
  fun oops = this.my
}
//│ class Base0
//│   fun me: ‹∀ 1. me30''#› where 
//│   |		this24' :> Base0<> <: {my: my36_37'} & {n: n32_33'}
//│   |		me30''# := this24'
//│   |		my31''# := n32''
//│   |		n32'' :> n32_33' <: mine34''# & my31''#
//│   |		n32_33' :> ‘n47
//│   |		mine34''# := my31''#
//│   |		my36_37' :> ‹∀ 1. my31''#›
//│   [pretty-printed] me: Base0
//│   fun my: ‹∀ 1. my31''#› where 
//│   |		my31''# := n32''
//│   |		n32'' :> n32_33' <: mine34''# & my31''#
//│   |		n32_33' :> ‘n47
//│   |		mine34''# := my31''#
//│   [pretty-printed] my: 'n
//│   fun mine: ‹∀ 1. mine34''#› where 
//│   |		my31''# := n32''
//│   |		n32'' :> n32_33' <: mine34''# & my31''#
//│   |		n32_33' :> ‘n47
//│   |		mine34''# := my31''#
//│   [pretty-printed] mine: 'n
//│   fun oops: ‹∀ 1. oops35''#› where 
//│   |		my31''# := n32''
//│   |		n32'' :> n32_33' <: mine34''# & my31''#
//│   |		n32_33' :> ‘n47
//│   |		mine34''# := my31''#
//│   |		oops35''# := my36''
//│   |		my36'' :> my36_37' <: oops35''#
//│   |		my36_37' :> ‹∀ 1. my31''#›
//│   [pretty-printed] oops: 'n

// :d
// Base0
// Base0

let b1 = Base0(42)
let n1 = b1.n
//│ fun b1: ‹∀ 0. b165'#› where 
//│ |		b165'# := α71'
//│ |		α71' :> Base0<> <: {n: n73'} & b165'#
//│ |		n172'# := n73'
//│ |		n73' :> ‘n78' <: n172'#
//│ [pretty-printed] b1: Base0
//│ fun n1: ‹∀ 0. n172'#› where 
//│ |		n172'# := n73'
//│ |		n73' :> ‘n78' <: n172'#
//│ [pretty-printed] n1: 'n

// TODO
n1 + 1
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.63: 	n1 + 1
//│ ║        	^^^^
//│ ╟── reference of type `?n` is not an instance of type `int`
//│ ║  l.7: 	class Base0(n) {
//│ ║       	            ^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.63: 	n1 + 1
//│ ╙──      	^^
//│ Typed: error | int


let b2 = Base0("hi")
let n2 = b2.n
//│ fun b2: ‹∀ 0. b288'#› where 
//│ |		b288'# := α94'
//│ |		α94' :> Base0<> <: {n: n96'} & b288'#
//│ |		n295'# := n96'
//│ |		n96' :> ‘n101' <: n295'#
//│ [pretty-printed] b2: Base0
//│ fun n2: ‹∀ 0. n295'#› where 
//│ |		n295'# := n96'
//│ |		n96' :> ‘n101' <: n295'#
//│ [pretty-printed] n2: 'n



class Base1(base: int) {
  fun getBase1 = base
  fun getBase2 = this.base
  fun foo(x) = this.base + x
}
//│ class Base1
//│   fun getBase1: ‹∀ 1. getBase1112''#› where 
//│   |		getBase1112''# := Int
//│   [pretty-printed] getBase1: int
//│   fun getBase2: ‹∀ 1. getBase2113''#› where 
//│   |		getBase2113''# := base114''
//│   |		base114'' :> base114_115' <: getBase2113''#
//│   |		base114_115' :> Int
//│   [pretty-printed] getBase2: int
//│   fun foo: ‹∀ 1. foo116''#› where 
//│   |		foo116''# := (α117'' -> α121'')
//│   |		α117'' <: int<number>
//│   |		α121'' :> int<number>
//│   [pretty-printed] foo: int -> int

class Base1(base: int) {
  fun getBase1 = base
  fun me = this
  fun foo(x) = base + x
}
//│ class Base1
//│   fun getBase1: ‹∀ 1. getBase1141''#› where 
//│   |		getBase1141''# := Int
//│   [pretty-printed] getBase1: int
//│   fun me: ‹∀ 1. me142''#› where 
//│   |		this136' :> Base1<>
//│   |		me142''# := this136'
//│   [pretty-printed] me: Base1
//│   fun foo: ‹∀ 1. foo143''#› where 
//│   |		foo143''# := (α144'' -> α146'')
//│   |		α144'' <: int<number>
//│   |		α146'' :> int<number>
//│   [pretty-printed] foo: int -> int

Base1
//│ Typed: (base: int,) -> Base1

let b = Base1(1)
//│ fun b: ‹∀ 0. b157'#› where 
//│ |		b157'# := α161'
//│ |		α161' :> Base1<> <: b157'#
//│ [pretty-printed] b: Base1

b.base
//│ Typed: int

b.getBase1
//│ Typed: int

b.me
//│ Typed: Base1

:e
b.getBaseTypo
//│ ╔══[ERROR] class `Base1` does not contain member `getBaseTypo`
//│ ║  l.149: 	b.getBaseTypo
//│ ╙──       	 ^^^^^^^^^^^^
//│ Typed: error


b : Base1
//│ Typed: Base1



// TODO treat `a: int` as a signature
class Annots(base: 0 | 1) {
  a: int
  fun a = base
}
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.163: 	  a: int
//│ ║         	  ^
//│ ╟── type `(0 | 1,)` is not an instance of type `int`
//│ ║  l.162: 	class Annots(base: 0 | 1) {
//│ ║         	                   ^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.163: 	  a: int
//│ ║         	  ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.163: 	  a: int
//│ ╙──       	     ^^^
//│ class Annots
//│   fun a: ‹∀ 1. a194''#› where 
//│   |		a194''# := ((0<int,number> | 1<int,number>),)
//│   [pretty-printed] a: (0 | 1,)


