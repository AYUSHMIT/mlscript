:NewParser


class Foo(x)
//│ Defined class Foo
//│ Foo: 'x -> (Foo with {x: 'x})
//│    = [Function: Foo1]


if 1 is 1 then 1
//│ ╔══[ERROR] missing a default branch
//│ ║  l.10: 	if 1 is 1 then 1
//│ ╙──      	   ^^^^^^^^^^^^^
//│ res: error
//│ Code generation encountered an error:
//│   if expression has not been not desugared

fun test(x) = if x is 1 then 0 else 1
//│ test: number -> (0 | 1)
//│     = [Function: test]

fun testF(x) = if x is
  Foo(a) then a
  Foo(a) then a
//│ ╔══[WARNING] duplicated branch
//│ ╙──
//│ testF: (Foo with {x: 'x}) -> 'x
//│      = [Function: testF]


class Bar(y, z)
//│ Defined class Bar
//│ Bar: ('y, 'z,) -> (Bar with {y: 'y, z: 'z})
//│    = [Function: Bar1]

fun test(f) = if f is
  Foo(a) then a
  Bar(b, c) then b + c
//│ test: (Bar & {y: int, z: int} | (Foo with {x: 'x})) -> (int | 'x)
//│     = [Function: test1]


class Pair(fst, snd)
//│ Defined class Pair
//│ Pair: ('fst, 'snd,) -> (Pair with {fst: 'fst, snd: 'snd})
//│     = [Function: Pair1]

if x is
  Pair(0, 0) then "zeros"
  Pair(1, 1) then "ones"
  Pair(y, 1) then x
//│ ╔══[ERROR] missing a default branch
//│ ║  l.48: 	if x is
//│ ║        	   ^^^^
//│ ║  l.49: 	  Pair(0, 0) then "zeros"
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.50: 	  Pair(1, 1) then "ones"
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.51: 	  Pair(y, 1) then x
//│ ╙──      	^^^^^^^^^^^^^^^^^^^
//│ res: error
//│ Code generation encountered an error:
//│   if expression has not been not desugared

class Z()
class O()
//│ Defined class Z
//│ Defined class O
//│ Z: () -> Z
//│  = [Function: Z1]
//│ O: () -> O
//│  = [Function: O1]

fun foo(x) = if x is
  Pair(Z(), Z()) then "zeros"
  Pair(O(), O()) then "ones"
//│ foo: (Pair & {fst: O | Z, snd: nothing}) -> ("ones" | "zeros")
//│    = [Function: foo]

fun foo(x) = if x is
  Pair(a, b) then if a is
    Z() then if b is
      Z() then "zeros"
    O() then if b is
      O() then "zeros"
//│ foo: (Pair & {fst: O | Z, snd: nothing}) -> "zeros"
//│    = [Function: foo1]

fun foo(x) = if x is
  Pair(a, b) then if a is
    Z() then if b is
      Z() then "zeros"
      else "???"
    O() then if b is
      O() then "zeros"
//│ foo: (Pair & {fst: O | Z, snd: O}) -> ("???" | "zeros")
//│    = [Function: foo2]

fun foo(x) = if x is
  Pair(a, b) then if a is
    Z() then if b is
      Z() then "zeros"
      else "???"
    O() then if b is
      O() then "zeros"
      else "???"
//│ foo: (Pair & {fst: O | Z}) -> ("???" | "zeros")
//│    = [Function: foo3]

class S(pred)
//│ Defined class S
//│ S: 'pred -> (S with {pred: 'pred})
//│  = [Function: S1]

fun foo(x) = if x is
  Pair(a, b) then if a is
    Z() then if b is
      S(x) then x
      else "???"
    O() then if b is
      O() then "zeros"
      else "???"
//│ foo: (Pair & {fst: O | Z, snd: (S with {pred: 'pred}) | ~S}) -> ("???" | "zeros" | 'pred)
//│    = [Function: foo4]

foo(Pair(Z(), Z()))
//│ res: "???" | "zeros"
//│ Runtime error:
//│   Error: non-exhaustive case expression

fun foo(x) = if x is
  Pair(Z(), Z()) then "zeros"
  Pair(O(), O()) then "ones"
  Pair(y, O()) then x
//│ foo: (Pair & {snd: nothing} & 'a) -> ("ones" | "zeros" | 'a)
//│    = [Function: foo5]

fun foo(x, y) = if x is Z() and y is O() then 0 else 1
//│ foo: (anything, anything,) -> (0 | 1)
//│    = [Function: foo6]

fun foo(x, y) = if x is
  Z() and y is O() then 0 else 1
//│ ╔══[PARSE ERROR] Unexpected 'else' keyword here
//│ ║  l.143: 	  Z() and y is O() then 0 else 1
//│ ╙──       	                          ^^^^
//│ foo: (Z, O,) -> 0
//│    = [Function: foo7]

fun foo(x, y) =
  if x is
    Z() and y is O() then 0
    else 1
//│ foo: (anything, anything,) -> (0 | 1)
//│    = [Function: foo8]

