:NewParser

class Option
class Some(value): Option
class None: Option
//│ Defined class Option
//│ Defined class Some
//│ Defined class None
//│ Option: () -> Option
//│       = [Function: Option1]
//│ Some: 'value -> (Some with {value: 'value})
//│     = [Function: Some1]
//│ None: () -> None
//│     = [Function: None1]

class Either
class Left(leftValue): Either
class Right(rightValue): Either
//│ Defined class Either
//│ Defined class Left
//│ Defined class Right
//│ Either: () -> Either
//│       = [Function: Either1]
//│ Left: 'leftValue -> (Left with {leftValue: 'leftValue})
//│     = [Function: Left1]
//│ Right: 'rightValue -> (Right with {rightValue: 'rightValue})
//│      = [Function: Right1]

fun f(x, y) =
  if x is
    Left(xv) and y is Left(yv) then xv + yv
    Right(xv) and y is Right(yv) then xv * yv
    None() and y is None() then 0
//│ f: (Left & {leftValue: int} | None | Right & {rightValue: int}, nothing,) -> int
//│  = [Function: f]

fun boolToStr(x) =
  if x is
    true then "yah"
    false then "nah"
//│ ╔══[ERROR] missing a default branch
//│ ║  l.38: 	  if x is
//│ ║        	     ^^^^
//│ ║  l.39: 	    true then "yah"
//│ ║        	^^^^^^^^^^^^^^^^^^^
//│ ║  l.40: 	    false then "nah"
//│ ╙──      	^^^^^^^^^^^^^^^^^^^^
//│ boolToStr: anything -> error
//│ Code generation encountered an error:
//│   if expression has not been not desugared

fun f(x, y) =
  if x is
    Left(xv) and y is Left(yv) then xv + yv
    None() then 0
//│ f: (Left & {leftValue: int} | None, Left & {leftValue: int},) -> int
//│  = [Function: f1]

fun f(x, y) =
  if x is
    Left(xv) and y is
      Left(yv) then xv + yv
      Right(yv) then xv * yv
    None() then 0
//│ f: (Left & {leftValue: int} | None, Left & {leftValue: int} | Right & {rightValue: int},) -> int
//│  = [Function: f2]

fun f(x) =
  if x is
    Some(v) and
      v < 0 then "negative"
      v > 0 then "positive"
      _     then "zero"
    None() then "nothing"
//│ f: (None | Some & {value: number}) -> ("negative" | "nothing" | "positive" | "zero")
//│  = [Function: f3]

fun f(x, y) =
  if x is
    Some(x) and y is
      Some(y) then 0
//│ f: (Some, Some,) -> 0
//│  = [Function: f4]

class A(value)
class B(value)
//│ Defined class A
//│ Defined class B
//│ A: 'value -> (A with {value: 'value})
//│  = [Function: A1]
//│ B: 'value -> (B with {value: 'value})
//│  = [Function: B1]

fun f(x) =
  if x is
    A(a) and y <>
      u then 0
      v then 1
    A(a) and y is
      B(0) then 0
      B(1) then 1
//│ ╔══[ERROR] missing a default branch
//│ ║  l.95: 	  if x is
//│ ║        	     ^^^^
//│ ║  l.96: 	    A(a) and y <>
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.97: 	      u then 0
//│ ║        	^^^^^^^^^^^^^^
//│ ║  l.98: 	      v then 1
//│ ║        	^^^^^^^^^^^^^^
//│ ║  l.99: 	    A(a) and y is
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.100: 	      B(0) then 0
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ║  l.101: 	      B(1) then 1
//│ ╙──       	^^^^^^^^^^^^^^^^^
//│ f: anything -> error
//│ Code generation encountered an error:
//│   if expression has not been not desugared

fun f(x) =
  if x is
    A(_) then "A"
    B(_) then "B"
//│ f: (A | B) -> ("A" | "B")
//│  = [Function: f6]

fun f(x, y) =
  if x is
    Some(xv) and y is Some(yv) then xv + yv
    None() and y is None() then 0
//│ f: (None | Some & {value: int}, nothing,) -> int
//│  = [Function: f7]

fun f(x, y) =
  if x is
    Some(xv) and y is
      Some(yv) then xv + yv
      None() then xv * 2
    None() and y is
      Some(yv) then yv * 3
//│ f: (None | Some & {value: int}, Some & {value: int},) -> int
//│  = [Function: f8]

fun f(x, y) =
  if x is
    A and y is
      B then "bruh"
//│ f: (A, B,) -> "bruh"
//│  = [Function: f9]

fun f(x, y, z) =
  if x is
    A and z == 0 and y == 0 and y is
      B then "bruh"
//│ ╔══[ERROR] missing a default branch
//│ ║  l.153: 	  if x is
//│ ║         	     ^^^^
//│ ║  l.154: 	    A and z == 0 and y == 0 and y is
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.155: 	      B then "bruh"
//│ ╙──       	^^^^^^^^^^^^^^^^^^^
//│ f: (anything, anything, anything,) -> error
//│ Code generation encountered an error:
//│   if expression has not been not desugared

fun f(x, y) =
  if x is
    Some(x) and y
      == 0 then "bruh"
      > 0 then "bruh"
//│ ╔══[ERROR] missing a default branch
//│ ║  l.168: 	  if x is
//│ ║         	     ^^^^
//│ ║  l.169: 	    Some(x) and y
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ║  l.170: 	      == 0 then "bruh"
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.171: 	      > 0 then "bruh"
//│ ╙──       	^^^^^^^^^^^^^^^^^^^^^
//│ f: (anything, anything,) -> error
//│ Code generation encountered an error:
//│   if expression has not been not desugared

fun isValid(x) = if x then false else true
//│ isValid: anything -> bool
//│        = [Function: isValid]

fun f(x, allowNone) =
  if x is
    Some(x) and isValid(x) then "good"
    None() and allowNone then "okay"
    else "bad"
//│ f: (anything, anything,) -> ("bad" | "good" | "okay")
//│  = [Function: f12]

fun f(x) =
  if x is
    None then "bruh"
    Some(x) then "roll"
    _ and x == 0 then 0
//│ ╔══[ERROR] missing a default branch
//│ ║  l.198: 	  if x is
//│ ║         	     ^^^^
//│ ║  l.199: 	    None then "bruh"
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.200: 	    Some(x) then "roll"
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.201: 	    _ and x == 0 then 0
//│ ╙──       	^^^^^^^^^^^^^^^^^^^^^^^
//│ f: anything -> error
//│ Code generation encountered an error:
//│   if expression has not been not desugared

class A()
class B()
//│ ╔══[ERROR] Type 'A' is already defined.
//│ ║  l.215: 	class A()
//│ ╙──       	      ^
//│ ╔══[ERROR] Type 'B' is already defined.
//│ ║  l.216: 	class B()
//│ ╙──       	      ^
//│ A: () -> A
//│  = [Function: A3]
//│ B: () -> B
//│  = [Function: B3]

fun f(x) =
  if x is
    A(_) and a then aa
    B(_) and b then bb
//│ ╔══[ERROR] missing a default branch
//│ ║  l.229: 	  if x is
//│ ║         	     ^^^^
//│ ║  l.230: 	    A(_) and a then aa
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.231: 	    B(_) and b then bb
//│ ╙──       	^^^^^^^^^^^^^^^^^^^^^^
//│ f: anything -> error
//│ Code generation encountered an error:
//│   if expression has not been not desugared

fun f(x) =
  if x is
    Some(xv) and y
      is Some(yv) then "bruh"
      is None() then "bruh"
    Some(xv) and b then xb + b
//│ ╔══[ERROR] missing a default branch
//│ ║  l.244: 	  if x is
//│ ║         	     ^^^^
//│ ║  l.245: 	    Some(xv) and y
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ║  l.246: 	      is Some(yv) then "bruh"
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.247: 	      is None() then "bruh"
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.248: 	    Some(xv) and b then xb + b
//│ ╙──       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ f: anything -> error
//│ Code generation encountered an error:
//│   if expression has not been not desugared

fun foo(x, y, z) = x + y + z
//│ foo: (int, int, int,) -> int
//│    = [Function: foo]

fun f(u, v, w) =
  if foo(u, v, w) is
    Some(x) and x is
      Left(_) then "left-defined"
      Right(_) then "right-defined"
    None then "undefined"
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.269: 	  if foo(u, v, w) is
//│ ║         	     ^^^^^^^^^^^^
//│ ╟── operator application of type `int` does not have field 'value'
//│ ║  l.264: 	fun foo(x, y, z) = x + y + z
//│ ║         	                   ^^^^^^^^^
//│ ╟── but it flows into application with expected type `{value: ?value}`
//│ ║  l.269: 	  if foo(u, v, w) is
//│ ╙──       	     ^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.269: 	  if foo(u, v, w) is
//│ ║         	     ^^^^^^^^^^^^^^^
//│ ║  l.270: 	    Some(x) and x is
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.271: 	      Left(_) then "left-defined"
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.272: 	      Right(_) then "right-defined"
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.273: 	    None then "undefined"
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` does not match type `None | Some`
//│ ║  l.264: 	fun foo(x, y, z) = x + y + z
//│ ║         	                   ^^^^^^^^^
//│ ╟── but it flows into application with expected type `None | Some`
//│ ║  l.269: 	  if foo(u, v, w) is
//│ ╙──       	     ^^^^^^^^^^^^
//│ f: (int, int, int,) -> ("left-defined" | "right-defined" | "undefined")
//│  = [Function: f16]

class Var(name)
class ValBase
class IntVal(value): ValBase
class BoolVal(value): ValBase
class Lit(val)
//│ Defined class Var
//│ Defined class ValBase
//│ Defined class IntVal
//│ Defined class BoolVal
//│ Defined class Lit
//│ Var: 'name -> (Var with {name: 'name})
//│    = [Function: Var1]
//│ ValBase: () -> ValBase
//│        = [Function: ValBase1]
//│ IntVal: 'value -> (IntVal with {value: 'value})
//│       = [Function: IntVal1]
//│ BoolVal: 'value -> (BoolVal with {value: 'value})
//│        = [Function: BoolVal1]
//│ Lit: 'val -> (Lit with {val: 'val})
//│    = [Function: Lit1]

fun p(e, context) =
  if e is
    Var(x) and context.get(x) is
      Some(IntVal(v)) then Left(v)
      Some(BoolVal(v)) then Right(v)
    Lit(IntVal(v)) then Left(v)
    Lit(BoolVal(v)) then Right(v)
//│ p: (Lit & {val: (BoolVal with {value: 'rightValue}) | (IntVal with {value: 'leftValue})} | (Var with {name: 'name}), {get: 'name -> (Some & {value: (BoolVal with {value: 'rightValue}) | (IntVal with {value: 'leftValue})})},) -> ((Left with {leftValue: 'leftValue}) | (Right with {rightValue: 'rightValue}))
//│  = [Function: p]

class Nil()
//│ Defined class Nil
//│ Nil: () -> Nil
//│    = [Function: Nil1]

:e
fun f(x) =
  if x is
    0 ::
      Nil() then "oh"
//│ ╔══[ERROR] operator :: not found
//│ ║  l.341: 	  if x is
//│ ║         	     ^^^^
//│ ║  l.342: 	    0 ::
//│ ║         	^^^^^^^^
//│ ║  l.343: 	      Nil() then "oh"
//│ ╙──       	^^^^^^^^^^^^^^^^^^^^^
//│ f: anything -> error
//│ Code generation encountered an error:
//│   if expression has not been not desugared

fun f(x) =
  if x == 0 and x is
    A(_) then "A"
    B(_) then "B"
    else "bruh"
//│ ╔══[ERROR] missing a default branch
//│ ║  l.356: 	  if x == 0 and x is
//│ ║         	     ^^^^^^^^^^^^^^^
//│ ║  l.357: 	    A(_) then "A"
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ║  l.358: 	    B(_) then "B"
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ║  l.359: 	    else "bruh"
//│ ╙──       	^^^^^^^^^^^^^^^
//│ f: anything -> error
//│ Code generation encountered an error:
//│   if expression has not been not desugared

fun helper(x) =
  if x == 0 then None() else Some(x)
//│ helper: (number & 'value) -> (None | (Some with {value: 'value}))
//│       = [Function: helper]

fun g(x, y) =
  if x == 0 and helper(x) is
    Some(a) and helper(y) is
      Some(b) then a + b
      None() then a + 1
    None() and helper(y) is
      Some(b) then 2 + b
      None() then 1
  else
    0
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.379: 	  if x == 0 and helper(x) is
//│ ║         	                ^^^^^^^^^
//│ ╟── application of type `None` does not have field 'value'
//│ ║  l.5: 	class None: Option
//│ ║       	      ^^^^
//│ ╟── but it flows into application with expected type `{value: ?value}`
//│ ║  l.379: 	  if x == 0 and helper(x) is
//│ ╙──       	                ^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.380: 	    Some(a) and helper(y) is
//│ ║         	                ^^^^^^^^^
//│ ╟── application of type `None` does not have field 'value'
//│ ║  l.5: 	class None: Option
//│ ║       	      ^^^^
//│ ╟── but it flows into application with expected type `{value: ?value}`
//│ ║  l.380: 	    Some(a) and helper(y) is
//│ ╙──       	                ^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.383: 	    None() and helper(y) is
//│ ║         	               ^^^^^^^^^
//│ ╟── application of type `None` does not have field 'value'
//│ ║  l.5: 	class None: Option
//│ ║       	      ^^^^
//│ ╟── but it flows into application with expected type `{value: ?value}`
//│ ║  l.383: 	    None() and helper(y) is
//│ ╙──       	               ^^^^^^^^^
//│ g: (int, int,) -> int
//│  = [Function: g]
