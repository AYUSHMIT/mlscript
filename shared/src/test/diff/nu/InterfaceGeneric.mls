:NewDefs
:NoJS

trait Into[T] {
    fun into: T
}
//│ trait Into[T]() {
//│   fun into: T
//│ }

trait Nat extends Into[int]
//│ trait Nat() {
//│   fun into: int
//│ }

trait Product[A, B] extends Into[A] {
    let pair: (A, B)
}
//│ trait Product[A, B]() {
//│   fun into: A
//│   let pair: (A, B,)
//│ }

class TwoInts(pair: (int, int)) extends Product[int, int] {
    fun into = pair._1 + pair._2
}
//│ class TwoInts(pair: (int, int,)) {
//│   fun into: int
//│ }

let i2 = TwoInts((1,2))
//│ let i2: TwoInts

// FIXME
i2: Product[int, int]
//│ ╔══[ERROR] Type `TwoInts` does not contain member `Product#A`
//│ ║  l.16: 	trait Product[A, B] extends Into[A] {
//│ ╙──      	              ^
//│ Product[int, int]

// FIXME
i2: Into[int]
//│ ╔══[ERROR] Type `TwoInts` does not contain member `Into#T`
//│ ║  l.4: 	trait Into[T] {
//│ ╙──     	           ^
//│ Into[int]

i2.pair
//│ (int, int,)

i2.into
//│ int

