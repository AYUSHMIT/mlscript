:NewDefs
:NoJS

trait Test {
  fun foo: int
  fun bar: bool -> bool
}
//│ trait Test() {
//│   fun bar: bool -> bool
//│   fun foo: int
//│ }

fun ts(x: Test) = x.foo
//│ fun ts: (x: Test,) -> int


module M extends Test {
  fun foo = 0
  fun bar = not
}
//│ module M() {
//│   fun bar: bool -> bool
//│   fun foo: int
//│ }

// TODO for modules
ts(M)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.27: 	ts(M)
//│ ║        	^^^^^
//│ ╟── reference of type `M` is not an instance of type `Test`
//│ ║  l.27: 	ts(M)
//│ ║        	   ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.13: 	fun ts(x: Test) = x.foo
//│ ╙──      	          ^^^^
//│ error | int


trait Oth extends Test {
  let a : int
  fun cool : int -> bool
}
//│ trait Oth() {
//│   let a: int
//│   fun bar: bool -> bool
//│   fun cool: int -> bool
//│   fun foo: int
//│ }

trait Geo { 
  let v: 2 | 3 
  fun get: int | bool
  fun ter: int
}
trait Anemo { 
  let v: 1 | 2
  fun get: bool | string
  fun ter: bool
}
//│ trait Geo() {
//│   fun get: bool | int
//│   fun ter: int
//│   let v: 2 | 3
//│ }
//│ trait Anemo() {
//│   fun get: bool | string
//│   fun ter: bool
//│   let v: 1 | 2
//│ }

trait Mixed extends Geo, Anemo
//│ trait Mixed() {
//│   fun get: bool
//│   fun ter: nothing
//│   let v: 2
//│ }


class C extends Test {
  fun foo = 1
  fun bar(x) = x
}
//│ class C() {
//│   fun bar: bool -> bool
//│   fun foo: int
//│ }

mixin M {
  fun m1 = 3
}
//│ mixin M() {
//│   fun m1: 3
//│ }

class F extends Oth, M, Mixed {
  fun cool(x) = x == 1
  fun foo = 2
  fun bar(x) = x
  fun get = true
  fun ter = ter
  let a = 3
  let v = 2
}
//│ class F() {
//│   let a: int
//│   fun bar: bool -> bool
//│   fun cool: int -> bool
//│   fun foo: int
//│   fun get: bool
//│   fun m1: 3
//│   fun ter: nothing
//│   let v: 2
//│ }

let c = C()
//│ let c: C & #Test

c.foo
//│ int

c.bar(true)
//│ bool

c: Test
let c1: Test = C()
//│ let c1: Test
//│ Test

// :d
fun fcc(x: C) = x.foo
//│ fun fcc: (x: C,) -> int

fun fc(x: Test) = x
//│ fun fc: (x: Test,) -> Test

fc(c)
//│ Test

fun fts['a](x: 'a & Test) = x.foo
fts(c)
//│ fun fts: forall 'foo. (x: Test & {foo: 'foo} | Test & ~#Test,) -> 'foo
//│ int

fts(c1)
//│ int

trait A1 { fun a1: 1 | 2 | 3 }
trait A2 { fun a1: 2 | 3 | 4 }
//│ trait A1() {
//│   fun a1: 1 | 2 | 3
//│ }
//│ trait A2() {
//│   fun a1: 2 | 3 | 4
//│ }

:e
class Ea1 extends A1, A2 {
  fun a1 = 4
}
//│ ╔══[ERROR] Type mismatch in definition of method a1:
//│ ║  l.159: 	  fun a1 = 4
//│ ║         	      ^^^^^^
//│ ╟── integer literal of type `4` does not match type `1 | 2 | 3`
//│ ║  l.159: 	  fun a1 = 4
//│ ║         	           ^
//│ ╟── but it flows into definition of method a1 with expected type `1 | 2 | 3`
//│ ║  l.159: 	  fun a1 = 4
//│ ║         	      ^^^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.148: 	trait A1 { fun a1: 1 | 2 | 3 }
//│ ║         	                   ^^^^^^^^^
//│ ╟── from signature of member a1:
//│ ║  l.148: 	trait A1 { fun a1: 1 | 2 | 3 }
//│ ╙──       	               ^^^^^^^^^^^^^
//│ class Ea1() {
//│   fun a1: 2 | 3
//│ }

trait Ele {
  fun ce: Oth -> Test
}
//│ trait Ele() {
//│   fun ce: Oth -> Test
//│ }

class CE extends Ele {
  fun ce(x) = x
}
//│ class CE() {
//│   fun ce: Oth -> Test
//│ }

:e
class E1 extends Test {
  fun foo = 2
}
//│ ╔══[ERROR] Member bar is declared in parent trait but not implemented
//│ ║  l.195: 	class E1 extends Test {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.196: 	  fun foo = 2
//│ ║         	^^^^^^^^^^^^^
//│ ║  l.197: 	}
//│ ╙──       	^
//│ class E1() {
//│   fun bar: bool -> bool
//│   fun foo: int
//│ }

:e
trait TE1 extends C
trait TE2 extends M, Test
//│ ╔══[ERROR] trait can only inherit traits
//│ ║  l.211: 	trait TE1 extends C
//│ ╙──       	                  ^
//│ ╔══[ERROR] trait can only inherit traits
//│ ║  l.212: 	trait TE2 extends M, Test
//│ ╙──       	                  ^
//│ trait TE1()
//│ trait TE2()

:e
class E2 extends Test {
  fun foo = true
  fun bar(x) = x
}
//│ ╔══[ERROR] Type mismatch in definition of method foo:
//│ ║  l.224: 	  fun foo = true
//│ ║         	      ^^^^^^^^^^
//│ ╟── reference of type `true` is not an instance of type `int`
//│ ║  l.224: 	  fun foo = true
//│ ║         	            ^^^^
//│ ╟── but it flows into definition of method foo with expected type `int`
//│ ║  l.224: 	  fun foo = true
//│ ║         	      ^^^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.5: 	  fun foo: int
//│ ║       	           ^^^
//│ ╟── from signature of member foo:
//│ ║  l.5: 	  fun foo: int
//│ ╙──     	      ^^^^^^^^
//│ class E2() {
//│   fun bar: bool -> bool
//│   fun foo: int
//│ }

// TODO
:e
class D extends Test[int], Test[bool]
//│ ╔══[ERROR] Unsupported parent specification
//│ ║  l.249: 	class D extends Test[int], Test[bool]
//│ ╙──       	                ^^^^^^^^^
//│ ╔══[ERROR] Unsupported parent specification
//│ ║  l.249: 	class D extends Test[int], Test[bool]
//│ ╙──       	                           ^^^^^^^^^^
//│ class D()



trait Base: A | B
class A extends Base
class B extends Base
//│ trait Base()
//│ class A()
//│ class B()


let b: Base = A()
//│ let b: Base

// FIXME
b: Base & (A | B)
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.272: 	b: Base & (A | B)
//│ ║         	^
//│ ╟── type `#Base` does not match type `A | B`
//│ ║  l.268: 	let b: Base = A()
//│ ║         	       ^^^^
//│ ╟── but it flows into reference with expected type `A | B`
//│ ║  l.272: 	b: Base & (A | B)
//│ ║         	^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.272: 	b: Base & (A | B)
//│ ║         	          ^^^^^^^
//│ ╟── from intersection type:
//│ ║  l.272: 	b: Base & (A | B)
//│ ╙──       	   ^^^^^^^^^^^^^^
//│ A & Base | B & Base


trait Base: Foo | Bar
class Foo[A] extends Base
class Bar[B] extends Base
//│ trait Base()
//│ class Foo[A]()
//│ class Bar[B]()

// TODO report proper error
fun mt(x) = if x is Test then 1 else 0
//│ ╔══[ERROR] Cannot find constructor `Test` in scope
//│ ║  l.299: 	fun mt(x) = if x is Test then 1 else 0
//│ ╙──       	                    ^^^^
//│ fun mt: anything -> error

trait Geo
trait ZL extends Geo
trait GL extends Geo
trait WP extends ZL, GL
trait EM extends WP, Geo
//│ trait Geo()
//│ trait ZL()
//│ trait GL()
//│ trait WP()
//│ trait EM()

let g: Geo
let z: ZL
let w: WP
let e: EM
//│ let g: Geo
//│ let z: ZL
//│ let w: WP
//│ let e: EM

fun fot(x: EM): Geo = x
fun fit(x: EM): WP = x
w: Geo
z: Geo
e: WP
//│ fun fot: (x: EM,) -> Geo
//│ fun fit: (x: EM,) -> WP
//│ WP

:e
fun fto(w: WP): EM = w
z: WP
g: ZL
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.335: 	fun fto(w: WP): EM = w
//│ ║         	                     ^
//│ ╟── type `#GL & #Geo & #WP & #ZL` is not an instance of type `EM`
//│ ║  l.335: 	fun fto(w: WP): EM = w
//│ ║         	           ^^
//│ ╟── but it flows into reference with expected type `#EM`
//│ ║  l.335: 	fun fto(w: WP): EM = w
//│ ║         	                     ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.335: 	fun fto(w: WP): EM = w
//│ ╙──       	                ^^
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.336: 	z: WP
//│ ║         	^
//│ ╟── type `#Geo & #ZL` is not an instance of type `WP`
//│ ║  l.317: 	let z: ZL
//│ ║         	       ^^
//│ ╟── but it flows into reference with expected type `#WP`
//│ ║  l.336: 	z: WP
//│ ║         	^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.336: 	z: WP
//│ ╙──       	   ^^
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.337: 	g: ZL
//│ ║         	^
//│ ╟── type `#Geo` is not an instance of type `ZL`
//│ ║  l.316: 	let g: Geo
//│ ║         	       ^^^
//│ ╟── but it flows into reference with expected type `#ZL`
//│ ║  l.337: 	g: ZL
//│ ║         	^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.337: 	g: ZL
//│ ╙──       	   ^^
//│ fun fto: (w: WP,) -> EM
//│ ZL
