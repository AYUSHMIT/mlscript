:NewDefs


class Foo(x: Int)
//│ class Foo(x: Int)

:e // FIXME this should be allowed
class Bar() extends Foo(123) { fun x = true }
//│ ╔══[ERROR] Inherited parameter named `x` is not virtual and cannot be overridden
//│ ║  l.8: 	class Bar() extends Foo(123) { fun x = true }
//│ ║       	                                   ^^^^^^^^
//│ ╟── Originally declared here:
//│ ║  l.4: 	class Foo(x: Int)
//│ ╙──     	          ^
//│ class Bar() extends Foo {
//│   fun x: true
//│ }

Bar().x
//│ true
//│ res
//│     = true


:e // FIXME this should be allowed
class Bar(val x: Bool) extends Foo(123)
//│ ╔══[ERROR] Inherited parameter named `x` is not virtual and cannot be overridden
//│ ║  l.26: 	class Bar(val x: Bool) extends Foo(123)
//│ ║        	              ^
//│ ╟── Originally declared here:
//│ ║  l.4: 	class Foo(x: Int)
//│ ╙──     	          ^
//│ class Bar(x: Bool) extends Foo

Bar(true).x
//│ Bool
//│ res
//│     = true


:e // FIXME this should be allowed
class Bar(x: Bool) extends Foo(123)
//│ ╔══[ERROR] Inherited parameter named `x` is not virtual and cannot be overridden
//│ ║  l.42: 	class Bar(x: Bool) extends Foo(123)
//│ ║        	          ^
//│ ╟── Originally declared here:
//│ ║  l.4: 	class Foo(x: Int)
//│ ╙──     	          ^
//│ class Bar(x: Bool) extends Foo

:e // * Expected
Bar(true).x
//│ ╔══[ERROR] Parameter 'x' cannot tbe accessed as a field
//│ ║  l.52: 	Bar(true).x
//│ ║        	         ^^
//│ ╟── Either make the parameter a `val` or access it through destructuring
//│ ║  l.42: 	class Bar(x: Bool) extends Foo(123)
//│ ╙──      	          ^
//│ error | false | true
//│ res
//│     = undefined


