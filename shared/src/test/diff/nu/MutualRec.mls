:NewParser
:NewDefs
:NoJS



class Foo()
123
//│ class Foo() {
//│   this: 'this
//│ }
//│ 123
//│   where
//│     'this :> Foo

Foo
//│ () -> Foo

fun fooo(x) =
  class C(y, z)
  C(0, x)
//│ fun fooo: anything -> C



fun foo = bar
fun bar = foo
//│ fun foo: nothing
//│ fun bar: nothing

foo(bar)
//│ nothing


fun foo = {x: foo}
//│ fun foo: 'foo
//│   where
//│     'foo :> {x: 'foo}


fun foo = {x: bar}
fun bar = {y: foo}
//│ fun foo: 'foo
//│ fun bar: {y: 'foo}
//│   where
//│     'foo :> {x: {y: 'foo}}

// FIXME pretty-printing?
foo
//│ forall 'foo. 'foo
//│   where
//│     'foo :> {x: {y: 'foo}}

:ns
foo
//│ forall 'foo. {x: {y: 'foo}}
//│   where
//│     'foo :> {x: {y: 'foo}}

foo.x
//│ 'x
//│   where
//│     'x :> {y: {x: 'x}}

foo.x.y
//│ 'foo
//│   where
//│     'foo :> {x: {y: 'foo}}


fun foo(a) = {h: a, t: bar(a)}
fun bar(b) = foo(b)
//│ fun foo: 'a -> 'b
//│ fun bar: 'a -> 'b
//│   where
//│     'b :> {h: 'a, t: 'b}

:ns
foo
//│ forall 'a 'b 'c. 'c -> {h: 'c, t: 'b}
//│   where
//│     'b :> {h: 'c, t: 'b}
//│     'c <: 'a
//│     'a <: 'c


fun foo(a) = {h1: a, t1: bar(a)}
fun bar(b) = {h2: b, t2: foo(b)}
//│ fun foo: 'a -> 'b
//│ fun bar: 'a -> 'c
//│   where
//│     'b :> {h1: 'a, t1: 'c}
//│     'c :> {h2: 'a, t2: 'b}



module Test0_1 {
  fun a = Test0_2.b
}
module Test0_2 {
  fun b = 123
}
//│ namespace Test0_1() {
//│   this: 'this
//│   fun a: 123
//│ }
//│ namespace Test0_2() {
//│   this: 'this0
//│   fun b: 123
//│ }
//│   where
//│     'this0 :> Test0_2
//│     'this :> Test0_1

Test0_1.a
//│ 123

class Test0_1 {
  fun a = Test0_2().b
}
class Test0_2() {
  fun b = 123
}
//│ class Test0_1() {
//│   this: 'this
//│   fun a: 123
//│ }
//│ class Test0_2() {
//│   this: 'this0
//│   fun b: 123
//│ }
//│   where
//│     'this0 :> Test0_2
//│     'this :> Test0_1


:e // TODO
module Test1_1 {
  fun a = Test1_2.b
}
module Test1_2 {
  fun b = Test1_1.a
}
//│ ╔══[ERROR] Cyclic definition
//│ ║  l.138: 	module Test1_1 {
//│ ║         	^^^^^^^^^^^^^^^^
//│ ║  l.139: 	  fun a = Test1_2.b
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ║  l.140: 	}
//│ ╙──       	^
//│ namespace Test1_1() {
//│   this: 'this
//│   fun a: error
//│ }
//│ namespace Test1_2() {
//│   this: 'this0
//│   fun b: error
//│ }
//│   where
//│     'this0 :> Test1_2
//│     'this :> Test1_1

Test1_1.a
//│ error


:e // TODO
class Test1_1 {
  fun a = Test1_2().b
}
class Test1_2 {
  fun b = Test1_1().a
}
//│ ╔══[ERROR] Cyclic definition
//│ ║  l.168: 	class Test1_1 {
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.169: 	  fun a = Test1_2().b
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.170: 	}
//│ ╙──       	^
//│ class Test1_1() {
//│   this: 'this
//│   fun a: error
//│ }
//│ class Test1_2() {
//│   this: 'this0
//│   fun b: error
//│ }
//│   where
//│     'this0 :> Test1_2
//│     'this :> Test1_1


// TODO check TV hygiene
module Test2_1 {
  fun t2 = Test2_2
  fun a = Test2_2.b
  fun d = Test2_2.e
  fun n = 456
}
module Test2_2 {
  fun b = 123
  fun c = Test2_1.a
  fun e = Test2_1.n
}
//│ ╔══[ERROR] Cyclic definition
//│ ║  l.195: 	module Test2_1 {
//│ ║         	^^^^^^^^^^^^^^^^
//│ ║  l.196: 	  fun t2 = Test2_2
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ║  l.197: 	  fun a = Test2_2.b
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ║  l.198: 	  fun d = Test2_2.e
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ║  l.199: 	  fun n = 456
//│ ║         	^^^^^^^^^^^^^
//│ ║  l.200: 	}
//│ ╙──       	^
//│ ╔══[ERROR] Cyclic definition
//│ ║  l.195: 	module Test2_1 {
//│ ║         	^^^^^^^^^^^^^^^^
//│ ║  l.196: 	  fun t2 = Test2_2
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ║  l.197: 	  fun a = Test2_2.b
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ║  l.198: 	  fun d = Test2_2.e
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ║  l.199: 	  fun n = 456
//│ ║         	^^^^^^^^^^^^^
//│ ║  l.200: 	}
//│ ╙──       	^
//│ namespace Test2_1() {
//│   this: 'this
//│   fun a: 123
//│   fun d: error
//│   fun n: 456
//│   fun t2: Test2_2
//│ }
//│ namespace Test2_2() {
//│   this: 'this0
//│   fun b: 123
//│   fun c: error
//│   fun e: error
//│ }
//│   where
//│     'this0 :> Test2_2
//│     'this :> Test2_1

Test2_1.t2.b
//│ 123

Test2_1.a
//│ 123

// FIXME
Test2_1.d
//│ error

Test2_1.n
//│ 456

