:NewParser

fun f(x) =
  if x ==
    let v = 0
    v then v
    else 0
//│ f: number -> 0
//│  = [Function: f]

class Option
class Some(value): Option
class None: Option
class Either
class Left(leftValue): Either
class Right(rightValue): Either
//│ Defined class Option
//│ Defined class Some
//│ Defined class None
//│ Defined class Either
//│ Defined class Left
//│ Defined class Right
//│ Option: () -> Option
//│       = [Function: Option1]
//│ Some: 'value -> (Some with {value: 'value})
//│     = [Function: Some1]
//│ None: () -> None
//│     = [Function: None1]
//│ Either: () -> Either
//│       = [Function: Either1]
//│ Left: 'leftValue -> (Left with {leftValue: 'leftValue})
//│     = [Function: Left1]
//│ Right: 'rightValue -> (Right with {rightValue: 'rightValue})
//│      = [Function: Right1]

fun q(x) =
  if
    x is Some and x is Some and x is Some then 0
//│ q: Some -> 0
//│  = [Function: q]

fun p(x, y) =
  if
    x is Some and y is None then 0
    y is Some and x is Some then 1
    x is Some and y is Some then 0
//│ ╔══[WARNING] duplicated branch
//│ ╙──
//│ p: (Some, None | Some,) -> (0 | 1)
//│  = [Function: p]

fun h(x, y) =
  if x is
    None then y
    let y_square = y * y
    Some(z) then z + y_square
//│ h: (None | Some & {value: int}, int,) -> int
//│  = [Function: h]

h(Some(5), 6)
//│ res: int
//│    = undefined

fun h(x, y) =
  if x is
    None then y
    let y_square = y * y
    Some(y_square) then 0
//│ h: (None | Some, int & 'a,) -> (0 | 'a)
//│  = [Function: h1]

fun f(a, y) =
  if a is
    Some(v) and v is
      Left(x) then x
      let y = v + 1
      Right(x) then x + y
    else 0
//│ f: (Some & {value: int} | ~Some, anything,) -> int
//│  = [Function: f1]

:pe
fun q(a) =
  if a is
    Left(x) then x
    let y = a + 1
    then y
//│ ╔══[PARSE ERROR] Expected an expression; found a 'then'/'else' clause instead
//│ ║  l.86: 	    let y = a + 1
//│ ║        	            ^^^^^
//│ ║  l.87: 	    then y
//│ ╙──      	^^^^^^^^^^
//│ q: (Left with {leftValue: 'leftValue}) -> 'leftValue
//│  = [Function: q1]

class A()
class B()
//│ Defined class A
//│ Defined class B
//│ A: () -> A
//│  = [Function: A1]
//│ B: () -> B
//│  = [Function: B1]

fun w() =
  if
    A then "A"
    let y = 0
    B then "B"
    else "?"
//│ w: () -> ("?" | "A" | "B")
//│  = [Function: w]

w()
//│ res: "?" | "A" | "B"
//│    = undefined

fun i(x) =
  if x is
    A() then "A"
    let y = 0
    B() then "B"
//│ i: (A | B) -> ("A" | "B")
//│  = [Function: i]

fun qq(x, z) =
  if x ==
    let y = f(z)
    y * y then 0
    else 0
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.128: 	    let y = f(z)
//│ ║         	            ^^^^
//│ ╟── argument of type `(?a,)` does not match type `(?b, ?c,)`
//│ ║  l.128: 	    let y = f(z)
//│ ║         	             ^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.72: 	fun f(a, y) =
//│ ╙──      	     ^^^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.128: 	    let y = f(z)
//│ ║         	            ^^^^
//│ ╟── argument of type `(?a,)` does not match type `(?b, ?c,)`
//│ ║  l.128: 	    let y = f(z)
//│ ║         	             ^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.72: 	fun f(a, y) =
//│ ╙──      	     ^^^^^^
//│ qq: (number, anything,) -> 0
//│   = [Function: qq]

fun bruh(x) =
  if
    x == 0 then 0
    let y = 1
    else y
//│ bruh: number -> (0 | 1)
//│     = [Function: bruh]

fun f1(x) = x + 1
fun f2(x, y) = x + y
//│ f1: int -> int
//│   = [Function: f11]
//│ f2: (int, int,) -> int
//│   = [Function: f2]

fun ff(x) =
  if
    x == 0 then 0
    let y = f1(x)
    let z = f2(x, y)
    z == 1 then 1
    z == 2 then 2
    else 0
//│ ff: int -> (0 | 1 | 2)
//│   = [Function: ff]

fun ip(y) =
  if q(y) and
    let z = f(y)
    y == z * z then "bruh"
  else "rocks"
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.180: 	    let z = f(y)
//│ ║         	            ^^^^
//│ ╟── argument of type `(?a,)` does not match type `(?b, ?c,)`
//│ ║  l.180: 	    let z = f(y)
//│ ║         	             ^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.72: 	fun f(a, y) =
//│ ╙──      	     ^^^^^^
//│ ip: nothing -> ("bruh" | "rocks")
//│   = [Function: ip]

fun tr(x) =
  if x is
    Some(v) then v
    let tmp = 1
    None then tmp
//│ tr: (None | (Some with {value: 'value})) -> (1 | 'value)
//│   = [Function: tr]

fun qp(xs) =
  if xs is
    Nil then Nil
    Cons(x, xs) and f(x) is
      let Pair(l, r) = mapPartition(f, xs)
      Left(v)  then (v :: l, r)
      Right(v) then (l, v :: r)
//│ ╔══[ERROR] constructor Nil not found
//│ ║  l.204: 	  if xs is
//│ ║         	     ^^^^^
//│ ║  l.205: 	    Nil then Nil
//│ ║         	^^^^^^^^^^^^^^^^
//│ ║  l.206: 	    Cons(x, xs) and f(x) is
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.207: 	      let Pair(l, r) = mapPartition(f, xs)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.208: 	      Left(v)  then (v :: l, r)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.209: 	      Right(v) then (l, v :: r)
//│ ╙──       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ qp: anything -> error
//│ Code generation encountered an error:
//│   if expression has not been desugared

fun mn(a) =
  if a is
    Some(x) and x is
      Left(a)  then "left-defined"
      let y = x + 1
      Right(b) then "right-defined"
    None       then "undefined"
//│ mn: (None | Some & {value: nothing}) -> ("left-defined" | "right-defined" | "undefined")
//│   = [Function: mn]
