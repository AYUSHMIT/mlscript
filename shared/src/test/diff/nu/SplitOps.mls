:NewParser

fun f(x) =
  if x
    is Left(v) then 0
    is Right(v) then 1
    <> undefined then 2
//│ ╔══[ERROR] Cannot find the class `Left` in the context
//│ ║  l.5: 	    is Left(v) then 0
//│ ╙──     	       ^^^^
//│ f: anything -> error
//│ Code generation encountered an error:
//│   if expression has not been desugared

fun f(x) =
  if x
    is Some(xv) and y is Some(yv) then xv + yv
    is None() and y is None() then 0
//│ ╔══[ERROR] Cannot find the class `Some` in the context
//│ ║  l.17: 	    is Some(xv) and y is Some(yv) then xv + yv
//│ ╙──      	       ^^^^
//│ f: anything -> error
//│ Code generation encountered an error:
//│   if expression has not been desugared

class A()
class B()
//│ Defined class A
//│ Defined class B
//│ A: () -> A
//│  = [Function: A1]
//│ B: () -> B
//│  = [Function: B1]

fun f(a, b) =
  if a
    is A() and b is B() then 0
//│ f: (A, B,) -> 0
//│  = [Function: f2]

class C()
//│ Defined class C
//│ C: () -> C
//│  = [Function: C1]

fun f(a, b, c) =
  if a
    == 0 and b is B() and c is C() then 0
//│ ╔══[ERROR] Missing the otherwise case of test == (a,) (0,)
//│ ║  l.47: 	  if a
//│ ║        	     ^
//│ ║  l.48: 	    == 0 and b is B() and c is C() then 0
//│ ╙──      	^^^^^^^^
//│ f: (anything, anything, anything,) -> error
//│ Code generation encountered an error:
//│   if expression has not been desugared

fun f(x) =
  if x
    is A() then "A"
    is B() then "B"
//│ f: (A | B) -> ("A" | "B")
//│  = [Function: f4]

fun sumOpt(x, y) =
  if x
    is Some(xv) and y is
      Some(yv) then xv + yvand
      None() then xv
    is None() and y is
      Some(yv) then yv
      None() then 0
//│ ╔══[ERROR] Cannot find the class `Some` in the context
//│ ║  l.67: 	    is Some(xv) and y is
//│ ╙──      	       ^^^^
//│ sumOpt: (anything, anything,) -> error
//│ Code generation encountered an error:
//│   if expression has not been desugared

// FIXME
fun f(x, y, z) =
  if x is A() and y
    == z then 1
    is B() then 0
//│ f: (A, nothing, number,) -> (0 | 1)
//│  = [Function: f5]
