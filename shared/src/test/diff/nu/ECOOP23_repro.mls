:NewParser
:NewDefs
:NoJS


class Add<E>(lhs: E, rhs: E)
class Lit(n: int)
//│ 
//│ class Add[E](lhs: E, rhs: E) {
//│ this: 'this
//│ }
//│ class Lit(n: int) {
//│ this: 'this0
//│ }
//│   where
//│     'this0 :> Lit
//│     'this :> Add

let add11 = Add(Lit(1), Lit(2))
//│ 
//│ let add11: Add & {Add#E = 'E}
//│   where
//│     'E :> Lit

fun eval(e) =
  if e is
    Lit(n) then n: int
    Add(l, r) then eval(l) + eval(r)
//│ 
//│ fun eval: 'a -> int
//│   where
//│     'a <: Lit | Add & {Add#E = 'E} & ~Lit
//│     'E <: 'a


mixin EvalBase {
  fun eval(e) =
    if e is
      Lit(n) then n: int
      Add(l, r) then this.eval(l) + this.eval(r)
}
//│ 
//│ mixin EvalBase() {
//│ super: 'super
//│ this: 'this
//│ fun eval: (Lit | Add & {Add#E = 'E} & ~Lit) -> int
//│ }
//│   where
//│     'E <: 'lhs
//│     'this <: {eval: 'lhs -> int}


module TestLang: EvalBase
//│ 
//│ namespace TestLang() {
//│ this: 'this
//│ fun eval: 'a -> int
//│ }
//│   where
//│     'a <: Lit | Add & {Add#E = 'E} & ~Lit
//│     'E <: 'a
//│     'this :> TestLang

TestLang.eval
//│ 
//│ 'a -> int
//│   where
//│     'a <: Lit | Add & {Add#E = 'E} & ~Lit
//│     'E <: 'a
//│ Typed: 'a -> int
//│   where
//│     'a <: Add & {Add#E = 'E} | Lit
//│     'E <: 'a



add11
//│ 
//│ Add & {Add#E = 'E}
//│   where
//│     'E :> Lit
//│ Typed: Add & {Add#E = 'E}
//│   where
//│     'E :> Lit

TestLang.eval(add11)
//│ 
//│ int
//│ Typed: int

add11
//│ 
//│ Add & {Add#E = 'E}
//│   where
//│     'E :> Lit
//│        <: 'a
//│     'a <: Lit | Add & {Add#E = 'E} & ~Lit
//│ Typed: Add & {Add#E = 'E}
//│   where
//│     'E :> Lit
//│        <: Add & {Add#E = 'E} | Lit

TestLang.eval(add11)
//│ 
//│ int
//│ Typed: int

add11
//│ 
//│ Add & {Add#E = 'E}
//│   where
//│     'E :> Lit
//│        <: 'a
//│     'a <: Lit | Add & {Add#E = 'E} & ~Lit
//│ Typed: Add & {Add#E = 'E}
//│   where
//│     'E :> Lit
//│        <: Add & {Add#E = 'E} | Lit



class Neg<A>(expr: A)
//│ 
//│ class Neg[A](expr: A) {
//│ this: 'this
//│ }
//│   where
//│     'this :> Neg

let add2negadd11 = Add(Lit(2), Neg(add11))
//│ 
//│ let add2negadd11: Add & {Add#E = 'E}
//│   where
//│     'E :> Lit | Neg & {Neg#A = 'A}
//│     'A :> Add & {Add#E = 'E0}
//│     'E0 :> Lit
//│         <: 'a
//│     'a <: Lit | Add & {Add#E = 'E0} & ~Lit


mixin EvalNeg {
  fun eval(e) =
    if e is Neg(d) then 0 - this.eval(d)
    else super.eval(e)
}
//│ 
//│ mixin EvalNeg() {
//│ super: 'super
//│ this: 'this
//│ fun eval: (Neg & {Neg#A = 'A} | 'a & ~Neg) -> (int | 'b)
//│ }
//│   where
//│     'A <: 'expr
//│     'this <: {eval: 'expr -> int}
//│     'super <: {eval: 'a -> 'b}


module TestLang: EvalBase, EvalNeg
//│ 
//│ namespace TestLang() {
//│ this: 'this
//│ fun eval: 'a -> int
//│ }
//│   where
//│     'a <: Neg & {Neg#A = 'A} | (Lit | Add & {Add#E = 'E} & ~Lit) & ~Neg
//│     'E <: 'a
//│     'A <: 'a
//│     'this :> TestLang

TestLang.eval
//│ 
//│ 'a -> int
//│   where
//│     'a <: Neg & {Neg#A = 'A} | (Lit | Add & {Add#E = 'E} & ~Lit) & ~Neg
//│     'E <: 'a
//│     'A <: 'a
//│ Typed: 'a -> int
//│   where
//│     'a <: Add & {Add#E = 'E} | Lit | Neg & {Neg#A = 'A}
//│     'A <: 'a
//│     'E <: 'a


TestLang.eval(add11)
//│ 
//│ int
//│ Typed: int

TestLang.eval(Neg(add11))
//│ 
//│ int
//│ Typed: int

TestLang.eval(Add(Lit(2), Neg(Lit(1))))
//│ 
//│ int
//│ Typed: int

TestLang.eval(Neg(Neg(add11)))
//│ 
//│ int
//│ Typed: int


:e
TestLang.eval(add2negadd11)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.206: 	TestLang.eval(add2negadd11)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Neg & {Neg#A = ?A}` does not match type `Add & {Add#E = ?E} | Lit`
//│ ║  l.130: 	let add2negadd11 = Add(Lit(2), Neg(add11))
//│ ║         	                               ^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.38: 	    if e is
//│ ║        	       ^
//│ ╟── Note: type parameter E is defined at:
//│ ║  l.6: 	class Add<E>(lhs: E, rhs: E)
//│ ╙──     	          ^
//│ 
//│ error | int
//│ Typed: error | int

:e
TestLang.eval(Add(Lit(2), Neg(add11)))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.224: 	TestLang.eval(Add(Lit(2), Neg(add11)))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Neg & {Neg#A = ?A}` does not match type `Add & {Add#E = ?E} | Lit`
//│ ║  l.130: 	let add2negadd11 = Add(Lit(2), Neg(add11))
//│ ║         	                               ^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.38: 	    if e is
//│ ║        	       ^
//│ ╟── Note: type parameter E is defined at:
//│ ║  l.6: 	class Add<E>(lhs: E, rhs: E)
//│ ╙──     	          ^
//│ 
//│ error
//│ Typed: error


