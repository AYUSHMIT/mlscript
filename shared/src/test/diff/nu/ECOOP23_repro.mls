:NewParser
:NewDefs
:NoJS


class Add<E>(lhs: E, rhs: E)
class Lit(n: int)
//│ class Add[E](lhs: E, rhs: E) {
//│   this: 'this_Add
//│ }
//│ class Lit(n: int) {
//│   this: 'this_Lit
//│ }
//│ where
//│   'this_Lit :> Lit & {n: int}
//│   'this_Add :> Add['E] & {lhs: E, rhs: E}

let add11 = Add(Lit(1), Lit(2))
//│ let add11: Add['E]
//│   where
//│     'E :> Lit

fun eval(e) =
  if e is
    Lit(n) then n: int
    Add(l, r) then eval(l) + eval(r)
//│ fun eval: 'a -> int
//│   where
//│     'a <: Add['E] | Lit
//│     'E <: 'a


mixin EvalBase {
  fun eval(e) =
    if e is
      Lit(n) then n: int
      Add(l, r) then this.eval(l) + this.eval(r)
}
//│ mixin EvalBase() {
//│   super: 'super
//│   this: 'this
//│   fun eval: (Add['E] | Lit) -> int
//│ }
//│ where
//│   'E <: 'lhs
//│   'this <: {eval: 'lhs -> int}


module TestLang: EvalBase
//│ namespace TestLang() {
//│   this: 'this_TestLang
//│   fun eval: (Add['E] | Lit) -> int
//│ }
//│ where
//│   'this_TestLang :> TestLang & {eval: (Add['E] | Lit) -> int}
//│                  <: {eval: 'E -> int}
//│   'E <: (Add['E0] | Lit) & (Add['E1] | Lit)
//│   'E1 <: Add['E0] | Lit

TestLang.eval
//│ (Add['E] | Lit) -> int
//│   where
//│     'E <: Add[in (Add['E0] | Lit) & 'E1 | 'E0 out 'E1 & 'E0] | Lit



add11
//│ Add['E]
//│   where
//│     'E :> Lit

TestLang.eval(add11)
//│ int

add11
//│ Add['E]
//│   where
//│     'E :> Lit
//│        <: Add[in (Add['E0] | Lit) & 'E1 | 'E0 out 'E1 & 'E0] | Lit

TestLang.eval(add11)
//│ int

add11
//│ Add['E]
//│   where
//│     'E :> Lit
//│        <: Add[in (Add['E0] | Lit) & 'E1 | 'E0 out 'E1 & 'E0] | Lit



class Neg<A>(expr: A)
//│ class Neg[A](expr: A) {
//│   this: 'this_Neg
//│ }
//│ where
//│   'this_Neg :> Neg['A] & {expr: A}

let add2negadd11 = Add(Lit(2), Neg(add11))
//│ let add2negadd11: Add['E]
//│   where
//│     'E :> Lit | Neg['A]
//│     'A :> Add['E0]
//│     'E0 :> Lit
//│         <: Add[in (Add['E1] | Lit) & 'E2 | 'E1 out 'E2 & 'E1] | Lit


mixin EvalNeg {
  fun eval(e) =
    if e is Neg(d) then 0 - this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNeg() {
//│   super: 'super
//│   this: 'this
//│   fun eval: (Neg['A] | 'a & ~Neg) -> (int | 'b)
//│ }
//│ where
//│   'A <: 'expr
//│   'this <: {eval: 'expr -> int}
//│   'super <: {eval: 'a -> 'b}


module TestLang: EvalBase, EvalNeg
//│ namespace TestLang() {
//│   this: 'this_TestLang
//│   fun eval: (Add['E] | Lit | Neg['A]) -> int
//│ }
//│ where
//│   'this_TestLang :> TestLang & {eval: (Add['E] | Lit | Neg['A]) -> int}
//│                  <: {eval: ('A | 'E) -> int}
//│   'A <: Add['E0] | Lit | Neg['A0]
//│   'E <: (Add['E1] | Lit | Neg['A1]) & (Add['E2] | Lit | Neg['A2])
//│   'A2 <: Add['E0] | Lit | Neg['A0]
//│   'E2 <: Add['E1] | Lit | Neg['A1]
//│   'A1 <: Add['E0] | Lit | Neg['A0]

TestLang.eval
//│ (Add['E] | Lit | Neg['A]) -> int
//│   where
//│     'A <: Add['E0] | Lit | Neg['A0]
//│     'E <: Add[in (Add['E1] | Lit | Neg['A1]) & 'E2 | 'E1 out 'E2 & 'E1] | Lit | Neg[in (Add['E0] | Lit | Neg['A0]) & 'A2 | 'A1 out 'A2 & 'A1]
//│     'A1 <: Add['E0] | Lit | Neg['A0]


TestLang.eval(add11)
//│ int

TestLang.eval(Neg(add11))
//│ int

TestLang.eval(Add(Lit(2), Neg(Lit(1))))
//│ int

TestLang.eval(Neg(Neg(add11)))
//│ int


// :e
TestLang.eval(add2negadd11)
//│ int

// :e
TestLang.eval(Add(Lit(2), Neg(add11)))
//│ int


