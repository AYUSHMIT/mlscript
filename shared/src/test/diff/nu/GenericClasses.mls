:NewParser
:NewDefs
:NoJS


// :d
class Some<A>(value: A) {
  fun get = value
  fun toArray = [value]
  fun mapBad(f) = Some(f(value)) // Notice the extruded type
}
//│ class Some
//│   fun get: ‹∀ 1. get29''#› where 
//│   |		get29''# := A23'
//│   [pretty-printed] get: nothing
//│   fun toArray: ‹∀ 1. toArray30''#› where 
//│   |		toArray30''# := (A23',)
//│   [pretty-printed] toArray: (nothing,)
//│   fun mapBad: ‹∀ 1. mapBad31''#› where 
//│   |		mapBad31''# := (α32'' -> α34'')
//│   |		α32'' <: ((A23',) -> α33'')
//│   |		α33'' <: α33_35
//│   |		α34'' :> α34_36
//│   [pretty-printed] mapBad: (nothing -> anything) -> nothing


let s = Some(1)
//│ fun s: ‹∀ 0. s49'#› where 
//│ |		s49'# := α60'
//│ |		A23_52' :> 1<int,number>
//│ |		α60' :> (Some<> & {Some#A: mut A23_52'..A23_52'}) <: s49'#
//│ [pretty-printed] s: Some & {Some#A = 'A}
//│ |  where
//│ |    'A :> 1

s.value
//│ Typed: 1

s.get
//│ Typed: 1

s.toArray
//│ Typed: (1,)



// FIXME

s.mapBad
//│ Typed: (1 -> anything) -> nothing

s.mapBad(succ)
//│ Typed: nothing


s.map
//│ ╔══[ERROR] class `Some` does not contain member `map`
//│ ║  l.55: 	s.map
//│ ╙──      	 ^^^^
//│ Typed: error

s.map(succ)
//│ ╔══[ERROR] class `Some` does not contain member `map`
//│ ║  l.61: 	s.map(succ)
//│ ╙──      	 ^^^^
//│ Typed: error



module None {
  fun get = error
  fun toArray = []
  fun mapBad(f) = None
}
//│ class None
//│   fun get: ‹∀ 1. get180''#› where 
//│   |		get180''# := ⊥
//│   [pretty-printed] get: nothing
//│   fun toArray: ‹∀ 1. toArray181''#› where 
//│   |		toArray181''# := ()
//│   [pretty-printed] toArray: ()
//│   fun mapBad: ‹∀ 1. mapBad182''#› where 
//│   |		mapBad182''# := (α183'' -> None174)
//│   [pretty-printed] mapBad: anything -> nothing


None.toArray
//│ Typed: ()


// TODO
type Option<A> = Some<A> | None
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing



let opt = if true then Some(123) else None
//│ fun opt: ‹∀ 0. opt197'#› where 
//│ |		opt197'# := (α209' | None<>)
//│ |		A23_201' :> 123<int,number>
//│ |		α209' :> (Some<> & {Some#A: mut A23_201'..A23_201'})
//│ [pretty-printed] opt: None | Some & {Some#A = 'A}
//│ |  where
//│ |    'A :> 123

opt.toArray
//│ Typed: Array[123]

opt.mapBad(succ)
//│ Typed: nothing

opt.map(succ)
//│ ╔══[ERROR] class `Some` does not contain member `map`
//│ ║  l.110: 	opt.map(succ)
//│ ╙──       	   ^^^^
//│ Typed: error



if opt is Some then opt.value else 0
//│ Typed: 0 | 123

if opt is Some(v) then v else 0
//│ Typed: 0 | 123


fun map(x, f) = if x is
  None then None
  Some(v) then Some(f(v))
//│ fun map: ‹∀ 0. map310'#› where 
//│ |		map310'# := ((α311', α312',) -> (None<> | α328'))
//│ |		α311' <: ((None<> & α313') | ((Some<> & α314') & ~(None<>)))
//│ |		α312' <: ((‹∀ 1. value315''›,) -> α327')
//│ |		α314' <: {value: value315_316'}
//│ |		value315'' :> value315_316'
//│ |		α327' <: A23_319'
//│ |		α328' :> (Some<> & {Some#A: mut A23_319'..A23_319'})
//│ [pretty-printed] map: (None | Some & {value: 'value}, 'value -> 'A,) -> (None | Some & {Some#A = 'A})

let mo = map(opt, succ)
//│ fun mo: ‹∀ 0. mo344'#› where 
//│ |		A23_319' :> int<number>
//│ |		α328' :> (Some<> & {Some#A: mut A23_319'..A23_319'})
//│ |		mo344'# := α345'
//│ |		α345' :> (None<> | α328') <: mo344'#
//│ [pretty-printed] mo: None | Some & {Some#A = 'A}
//│ |  where
//│ |    'A :> int

mo.toArray
//│ Typed: Array[int]


