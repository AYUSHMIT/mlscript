:NewParser
:NewDefs
:NoJS


class Some<A>(value: A) {
  fun get = value
  fun toArray = [value]
  // fun mapBad(f) = Some(f(value)) // TODO
  // fun map(f : A => 'b) = Some(f(value)) // TODO
}
//│ class Some
//│   fun get: ‹∀ 1. get28''#› where 
//│   |		get28''# := A23'
//│   [pretty-printed] get: nothing
//│   fun toArray: ‹∀ 1. toArray29''#› where 
//│   |		toArray29''# := (A23',)
//│   [pretty-printed] toArray: (nothing,)


let s = Some(1)
//│ fun s: ‹∀ 0. s35'#› where 
//│ |		s35'# := α41'
//│ |		A23_38' :> 1<int,number>
//│ |		α41' :> (Some<> & {Some#A: mut A23_38'..A23_38'}) <: s35'#
//│ [pretty-printed] s: Some & {Some#A = 'A}
//│ |  where
//│ |    'A :> 1


s.value
//│ Typed: 1

s.get
//│ Typed: 1

s.toArray
//│ Typed: (1,)


// TODO

// s.mapBad

// s.mapBad(succ)


// s.map

// s.map(succ)



module None {
  fun get = error
  fun toArray = []
  // fun mapBad(f) = None // TODO
}
//│ class None
//│   fun get: ‹∀ 1. get81''#› where 
//│   |		get81''# := ⊥
//│   [pretty-printed] get: nothing
//│   fun toArray: ‹∀ 1. toArray82''#› where 
//│   |		toArray82''# := ()
//│   [pretty-printed] toArray: ()


None.toArray
//│ Typed: ()


// TODO
type Option<A> = Some<A> | None
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing



let opt = if true then Some(123) else None
//│ fun opt: ‹∀ 0. opt92'#› where 
//│ |		opt92'# := (α99' | None<>)
//│ |		A23_96' :> 123<int,number>
//│ |		α99' :> (Some<> & {Some#A: mut A23_96'..A23_96'})
//│ [pretty-printed] opt: None | Some & {Some#A = 'A}
//│ |  where
//│ |    'A :> 123

opt.toArray
//│ Typed: Array[123]


// TODO

// opt.mapBad(succ)

// opt.map(succ)



if opt is Some then opt.value else 0
//│ Typed: 0 | 123

if opt is Some(v) then v else 0
//│ Typed: 0 | 123


fun map(x, f) = if x is
  None then None
  Some(v) then Some(f(v))
//│ fun map: ‹∀ 0. map145'#› where 
//│ |		map145'# := ((α146', α147',) -> (None<> | α158'))
//│ |		α146' <: ((None<> & α148') | ((Some<> & α149') & ~(None<>)))
//│ |		α147' <: ((‹∀ 1. value150''›,) -> α157')
//│ |		α149' <: {value: value150_151'}
//│ |		value150'' :> value150_151'
//│ |		α157' <: A23_154'
//│ |		α158' :> (Some<> & {Some#A: mut A23_154'..A23_154'})
//│ [pretty-printed] map: (None | Some & {value: 'value}, 'value -> 'A,) -> (None | Some & {Some#A = 'A})

let mo = map(opt, succ)
//│ fun mo: ‹∀ 0. mo174'#› where 
//│ |		A23_154' :> int<number>
//│ |		α158' :> (Some<> & {Some#A: mut A23_154'..A23_154'})
//│ |		mo174'# := α175'
//│ |		α175' :> (None<> | α158') <: mo174'#
//│ [pretty-printed] mo: None | Some & {Some#A = 'A}
//│ |  where
//│ |    'A :> int

mo.toArray
//│ Typed: Array[int]


