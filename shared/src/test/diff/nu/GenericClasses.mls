:NewParser
:NewDefs
:NoJS


class C<A>
//│ class C[A]()

fun f(x) = if x is C then x
//│ fun f: C['A] -> C['A]


// :d
class C<A>(a: A)
//│ class C[A](a: A)

fun f(x) = if x is C(a) then a
//│ fun f: C['a] -> 'a

let c = C(1)
//│ let c: C[1]

f(c)
//│ 1


class Some<A>(value: A) {
  fun get = value
  fun toArray = [value]
  // fun mapBad(f) = Some(f(value)) // TODO
  // fun map(f : A => 'b) = Some(f(value)) // TODO
}
//│ class Some[A](value: A) {
//│   fun get: A
//│   fun toArray: (A,)
//│ }


let s = Some(1)
//│ let s: Some[1]


s.value
//│ 1

s.get
//│ 1

s.toArray
//│ (1,)


// TODO

// s.mapBad

// s.mapBad(succ)


// s.map

// s.map(succ)



module None {
  fun get = error
  fun toArray = []
  // fun mapBad(f) = None // TODO
}
//│ namespace None() {
//│   fun get: nothing
//│   fun toArray: ()
//│ }


None.toArray
//│ ()


// TODO
type Option<A> = Some<A> | None
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing



let opt = if true then Some(123) else None
//│ let opt: None | Some[123]

opt.toArray
//│ Array[123]


// TODO

// opt.mapBad(succ)

// opt.map(succ)



if opt is Some then opt.value else 0
//│ 0 | 123

if opt is Some(v) then v else 0
//│ 0 | 123


fun map(x, f) = if x is
  None then None
  Some(v) then Some(f(v))
//│ fun map: (None | Some['value], 'value -> 'A,) -> (None | Some['A])

let mo = map(opt, succ)
//│ let mo: None | Some[int]

mo.toArray
//│ Array[int]



// TODO
class Test(n) {
  fun foo = n + 1
  fun bar = n
}
//│ ╔══[ERROR] Class parameters currently need type annotations
//│ ║  l.123: 	class Test(n) {
//│ ╙──       	           ^
//│ class Test(n: error) {
//│   fun bar: error
//│   fun foo: int
//│ }

Test(1)
//│ Test

// :e
Test(true)
//│ Test


:e
class Test<A>(n: A) {
  fun foo = n + 1
}
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.145: 	  fun foo = n + 1
//│ ║         	            ^^^
//│ ╟── reference of type `A` is not an instance of type `int`
//│ ║  l.145: 	  fun foo = n + 1
//│ ║         	            ^
//│ ╟── Note: type parameter A is defined at:
//│ ║  l.144: 	class Test<A>(n: A) {
//│ ╙──       	           ^
//│ class Test[A](n: A) {
//│   fun foo: error | int
//│ }

Test(1)
//│ Test[1]

Test(true)
//│ Test[true]


class Test<A>(n: A) {
  fun foo: A = n
  fun foo1(x: A) = x
  fun id(x) = x
}
//│ class Test[A](n: A) {
//│   fun foo: A
//│   fun foo1: (x: A,) -> A
//│   fun id: 'a -> 'a
//│ }

Test(1)
//│ Test[1]

Test(1).foo
//│ 1

Test("ok").foo
//│ "ok"

let t = Test(1)
//│ let t: Test[1]

t.foo1(true)
//│ 1 | true

t : Test<'a>
//│ Test['a]
//│   where
//│     'a :> 1 | true

t.id
//│ 'a -> 'a

[t.id(1), t.id(true)]
//│ (1, true,)


:e
class TestBad<A> {
  fun foo1(x: A) = x
  fun foo2(x: A) = x + 1
}
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.208: 	  fun foo2(x: A) = x + 1
//│ ║         	                   ^^^
//│ ╟── reference of type `A` is not an instance of type `int`
//│ ║  l.208: 	  fun foo2(x: A) = x + 1
//│ ║         	                   ^
//│ ╟── Note: type parameter A is defined at:
//│ ║  l.206: 	class TestBad<A> {
//│ ╙──       	              ^
//│ class TestBad[A]() {
//│   fun foo1: (x: A,) -> A
//│   fun foo2: (x: A,) -> (error | int)
//│ }

TestBad().foo1
//│ (x: 'A,) -> 'A

TestBad().foo1(1)
//│ 1

x => TestBad().foo1(x)
//│ 'a -> 'a

// :d
let t = TestBad()
//│ let t: forall 'A. TestBad['A]

t.foo1
//│ (x: 'A,) -> 'A

[t.foo1(0), t.foo1(true)]
//│ (0, true,)

t.foo1(0)
//│ 0

t
//│ forall 'A. TestBad['A]


fun foo(x: TestBad<int>) = x.foo1
//│ fun foo: (x: TestBad[int],) -> (x: int,) -> int

foo(t)
//│ (x: int,) -> int

foo(t)(1)
//│ int


TestBad().foo2
//│ (x: anything,) -> (error | int)



class Weird(x: C<'a>)
//│ class Weird(x: C['a])

let w = Weird(c)
//│ let w: Weird

w.x
//│ C['a]

// FIXME
not(w.x.a)
//│ bool


