:NewParser
:NewDefs
:NoJS


class Add<E>(lhs: E, rhs: E)
class Lit(n: int)
//│ 
//│ class Add[E](lhs: E, rhs: E) {
//│ this: 'this
//│ }
//│ class Lit(n: int) {
//│ this: 'this0
//│ }
//│   where
//│     'this0 :> Lit
//│     'this :> Add

fun add11 = Add(Lit(1), Lit(2))
//│ 
//│ fun add11: 'a
//│   where
//│     'a :> Add & {Add#E = 'E}
//│        <: 'add11
//│     'add11 :> Add & {Add#E = 'E}
//│     'E :> Lit

// add11 + 1

// add11


fun eval(e) =
  if e is
    Lit(n) then n
    Add(l, r) then eval(l) + eval(r)
//│ 
//│ fun eval: 'a -> ('n | 'b)
//│   where
//│     'b := int
//│     'n := int
//│     'a <: Lit | Add & {Add#E = 'E} & ~Lit
//│     'E <: 'rhs & 'lhs
//│     'lhs <: 'a
//│     'rhs <: 'a


mixin EvalBase {
  fun eval(e) =
    if e is
      Lit(n) then n: int
      Add(l, r) then this.eval(l) + this.eval(r)
}
//│ 
//│ mixin EvalBase() {
//│ super: 'super
//│ this: 'this
//│ }
//│   where
//│     'this <: {eval: 'eval} & {eval: 'eval0}
//│     'eval0 <: 'lhs -> 'a
//│     'a <: int
//│     'eval <: 'rhs -> 'b
//│     'b <: int


module TestLang: EvalBase
//│ 
//│ namespace TestLang() {
//│ this: 'this
//│ fun eval: 'a -> (int | 'b)
//│ }
//│   where
//│     'b := int
//│     'a <: Lit | Add & {Add#E = 'E} & ~Lit
//│     'E <: 'rhs & 'lhs
//│     'lhs <: 'lhs0
//│     'lhs0 <: 'a
//│     'rhs <: 'rhs0
//│     'rhs0 <: 'a
//│     'this :> TestLang

TestLang.eval
//│ 
//│ 'eval
//│   where
//│     'eval :> 'a -> (int | 'b)
//│     'b := int
//│     'a <: Lit | Add & {Add#E = 'E} & ~Lit
//│     'E <: 'rhs & 'lhs
//│     'lhs <: 'lhs0
//│     'lhs0 <: 'a
//│     'rhs <: 'rhs0
//│     'rhs0 <: 'a
//│ Typed: 'a -> int
//│   where
//│     'a <: Add & {Add#E = 'E} | Lit
//│     'E <: 'a

TestLang.eval(add11)
//│ 
//│ 'a
//│   where
//│     'a :> int | 'b
//│     'b := int
//│ Typed: int


class Neg<A>(expr: A)
//│ 
//│ class Neg[A](expr: A) {
//│ this: 'this
//│ }
//│   where
//│     'this :> Neg

let add2negadd11 = Add(Lit(2), Neg(add11))
//│ 
//│ let add2negadd11: 'a
//│   where
//│     'a :> Add & {Add#E = 'E}
//│     'E :> Neg & {Neg#A = 'A} | Lit
//│     'A :> forall 'b 'E0 'add11. 'b
//│     'b :> Add & {Add#E = 'E0}
//│        <: 'add11
//│     'add11 :> Add & {Add#E = 'E0}
//│     'E0 :> Lit


mixin EvalNeg {
  fun eval(e) =
    if e is Neg(d) then 0 - this.eval(d)
    else super.eval(e)
}
//│ 
//│ mixin EvalNeg() {
//│ super: 'super
//│ this: 'this
//│ }
//│   where
//│     'this <: {eval: 'eval}
//│     'eval <: 'expr -> 'a
//│     'a <: int
//│     'super <: {eval: 'eval0}
//│     'eval0 <: 'b -> 'c


module TestLang: EvalBase, EvalNeg
//│ 
//│ namespace TestLang() {
//│ this: 'this
//│ fun eval: 'a -> ('b | 'c)
//│ }
//│   where
//│     'c :> 'd
//│        <: int
//│     'd :> int | 'e
//│        <: int
//│     'e := int
//│     'b := int
//│     'a <: Neg & {Neg#A = 'A} | 'f & ~Neg
//│     'f <: 'g
//│     'g <: 'h
//│     'h <: Lit | Add & {Add#E = 'E} & ~Lit
//│     'E <: 'rhs & 'lhs
//│     'lhs <: 'lhs0
//│     'lhs0 <: 'a
//│     'rhs <: 'rhs0
//│     'rhs0 <: 'a
//│     'A <: 'expr
//│     'expr <: 'expr0
//│     'expr0 <: 'a
//│     'this :> TestLang

TestLang.eval
//│ 
//│ 'eval
//│   where
//│     'eval :> 'a -> ('b | 'c)
//│     'c :> 'd
//│        <: int
//│     'd :> int | 'e
//│        <: int
//│     'e := int
//│     'b := int
//│     'a <: Neg & {Neg#A = 'A} | 'f & ~Neg
//│     'f <: 'g
//│     'g <: 'h
//│     'h <: Lit | Add & {Add#E = 'E} & ~Lit
//│     'E <: 'rhs & 'lhs
//│     'lhs <: 'lhs0
//│     'lhs0 <: 'a
//│     'rhs <: 'rhs0
//│     'rhs0 <: 'a
//│     'A <: 'expr
//│     'expr <: 'expr0
//│     'expr0 <: 'a
//│ Typed: 'a -> int
//│   where
//│     'a <: Add & {Add#E = 'E} | Lit | Neg & {Neg#A = 'A}
//│     'A <: 'a
//│     'E <: 'a


TestLang.eval(add11)
//│ 
//│ 'a
//│   where
//│     'a :> 'b | 'c
//│     'c :> 'd
//│        <: int
//│     'd :> int | 'e
//│        <: int
//│     'e := int
//│     'b := int
//│ Typed: int

TestLang.eval(Neg(add11))
//│ 
//│ 'a
//│   where
//│     'a :> 'b | 'c
//│     'c :> 'd
//│        <: int
//│     'd :> int | 'e
//│        <: int
//│     'e := int
//│     'b := int
//│ Typed: int

TestLang.eval(Add(Lit(2), Neg(Lit(1))))
//│ 
//│ 'a
//│   where
//│     'a :> 'b | 'c
//│     'c :> 'd
//│        <: int
//│     'd :> int | 'e
//│        <: int
//│     'e := int
//│     'b := int
//│ Typed: int

TestLang.eval(Neg(Neg(add11)))
//│ 
//│ 'a
//│   where
//│     'a :> 'b | 'c
//│     'c :> 'd
//│        <: int
//│     'd :> int | 'e
//│        <: int
//│     'e := int
//│     'b := int
//│ Typed: int


TestLang.eval(add2negadd11)
//│ 
//│ 'a
//│   where
//│     'a :> 'b | 'c
//│     'c :> 'd
//│        <: int
//│     'd :> int | 'e
//│        <: int
//│     'e := int
//│     'b := int
//│ Typed: int

// add11

TestLang.eval(Add(Lit(2), Neg(add11)))
//│ 
//│ 'a
//│   where
//│     'a :> 'b | 'c
//│     'c :> 'd
//│        <: int
//│     'd :> int | 'e
//│        <: int
//│     'e := int
//│     'b := int
//│ Typed: int


