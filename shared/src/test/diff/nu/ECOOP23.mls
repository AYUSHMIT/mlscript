:NewParser
:NewDefs
:NoJS


class Add<E>(lhs: E, rhs: E)
class Lit(n: int)
//│ class Add
//│ class Lit

let add11 = Add(Lit(1), Lit(2))
//│ fun add11: ‹∀ 0. add1130'#› where 
//│ |		add1130'# := α34'
//│ |		α34' :> (Add<> & {Add#E: mut E24_35'..E24_35'}) <: add1130'#
//│ |		E24_35' :> Lit<>
//│ [pretty-printed] add11: Add & {Add#E = 'E}
//│ |  where
//│ |    'E :> Lit


mixin EvalBase {
  fun eval(e) =
    if e is
      Lit(n) then n: int
      Add(l, r) then this.eval(l) + this.eval(r)
}
//│ mixin EvalBase
//│   this: this42' 
//│   |		this42' <: {eval: eval63_64'} & {eval: eval56_57'}
//│   |		eval56_57' <: ((‹∀ 2. lhs52_59'''›,) -> α58_61')
//│   |		lhs52_59''' :> lhs52_60'
//│   |		α58_61' <: int<number>
//│   |		eval63_64' <: ((‹∀ 2. rhs54_66'''›,) -> α65_68')
//│   |		rhs54_66''' :> rhs54_67'
//│   |		α65_68' <: int<number>
//│   super: super43' 
//│   fun eval: ‹∀ 1. eval45''#› where 
//│   |		eval45''# := (α46'' -> (Int | α69''))
//│   |		α46'' <: ((Lit<> & α47'') | ((Add<> & α51'') & ~(Lit<>)))
//│   |		α47'' <: {n: n48_49''}
//│   |		n48_49'' <: int<number>
//│   |		α51'' <: {rhs: rhs54_55''} & {lhs: lhs52_53''}
//│   |		lhs52_53'' <: lhs52_60'
//│   |		rhs54_55'' <: rhs54_67'
//│   |		α69'' :> int<number>
//│   [pretty-printed] eval: (Add & {lhs: anything, rhs: anything} | Lit & {n: int}) -> int


module TestLang: EvalBase
//│ class TestLang

TestLang.eval
//│ Typed: 'rhs -> int
//│   where
//│     'rhs <: Add & {lhs: 'rhs, rhs: 'rhs} | Lit & {n: int}

TestLang.eval(add11)
//│ Typed: int


class Neg<A>(expr: A)
//│ class Neg

let add2negadd11 = Add(Lit(2), Neg(add11))
//│ fun add2negadd11: ‹∀ 0. add2negadd11209'#› where 
//│ |		E24_35' :> E24_189 | Lit<> <: E24_190
//│ |		rhs54_172 :> Lit<> <: ((Lit<> & α47_173) | ((Add<> & α51_175) & ~(Lit<>)))
//│ |		α47_173 :> Lit<> <: {n: n48_174}
//│ |		n48_174 :> Int <: int<number>
//│ |		α51_175 <: {rhs: rhs54_176} & {lhs: lhs52_177}
//│ |		rhs54_176 <: rhs54_172
//│ |		lhs52_177 <: lhs52_178
//│ |		lhs52_178 :> Lit<> <: ((Lit<> & α47_179) | ((Add<> & α51_181) & ~(Lit<>)))
//│ |		α47_179 :> Lit<> <: {n: n48_180}
//│ |		n48_180 :> Int <: int<number>
//│ |		α51_181 <: {rhs: rhs54_182} & {lhs: lhs52_183}
//│ |		rhs54_182 <: rhs54_172
//│ |		lhs52_183 <: lhs52_178
//│ |		add1130_187' :> (Add<> & {Add#E: mut E24_189..E24_190}) | α34_188 <: add1130_192 & α34_191
//│ |		α34_188 :> (Add<> & {Add#E: mut E24_189..E24_190}) | (Add<> & {Add#E: mut E24_189..E24_190}) <: α46_194 & α34_191
//│ |		E24_189 <: lhs52_199 & rhs54_198
//│ |		E24_190 :> E24_189 | Lit<> <: lhs52_199 & rhs54_198
//│ |		α34_191 :> (Add<> & {Add#E: mut E24_189..E24_190}) <: α34_188 & add1130_187'
//│ |		add1130_192 :> (Add<> & {Add#E: mut E24_189..E24_190}) | α34_188 <: α46_194
//│ |		α46_194 :> (Add<> & {Add#E: mut E24_189..E24_190}) <: ((Lit<> & α47_195) | ((Add<> & α51_197) & ~(Lit<>)))
//│ |		α47_195 <: {n: n48_196}
//│ |		n48_196 <: int<number>
//│ |		α51_197 :> (Add<> & {Add#E: mut E24_189..E24_190}) <: {rhs: rhs54_198} & {lhs: lhs52_199}
//│ |		rhs54_198 :> Lit<> <: rhs54_172
//│ |		lhs52_199 :> Lit<> <: lhs52_178
//│ |		add2negadd11209'# := α215'
//│ |		A205_214' :> (Add<> & {Add#E: mut E24_35'..E24_35'}) | α34_191
//│ |		α215' :> (Add<> & {Add#E: mut E24_216'..E24_216'}) <: add2negadd11209'#
//│ |		E24_216' :> (Neg<> & {Neg#A: mut A205_214'..A205_214'}) | Lit<>
//│ [pretty-printed] add2negadd11: Add & {Add#E = 'E}
//│ |  where
//│ |    'E :> Lit | Neg & {Neg#A = 'A}
//│ |    'A :> Add & {Add#E :> 'lhs & 'E0 <: Lit | 'E0}
//│ |    'lhs <: Add & {lhs: 'lhs, rhs: 'lhs} | Lit & {n: int}


mixin EvalNeg {
  fun eval(e) =
    if e is Neg(d) then 0 - this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNeg
//│   this: this252' 
//│   |		this252' <: {eval: eval261_262'}
//│   |		eval261_262' <: ((‹∀ 2. expr258_264'''›,) -> α263_266')
//│   |		expr258_264''' :> expr258_265'
//│   |		α263_266' <: int<number>
//│   super: super253' 
//│   |		super253' <: {eval: eval269_270'}
//│   |		eval269_270' <: ((α268_272',) -> α271_273')
//│   fun eval: ‹∀ 1. eval255''#› where 
//│   |		eval255''# := (α256'' -> (α267'' | α271''))
//│   |		α256'' <: ((Neg<> & α257'') | (α268'' & ~(Neg<>)))
//│   |		α257'' <: {expr: expr258_259''}
//│   |		expr258_259'' <: expr258_265'
//│   |		α267'' :> int<number>
//│   |		α268'' <: α268_272'
//│   |		α271'' :> α271_273'
//│   [pretty-printed] eval: (Neg & {expr: anything} | ~Neg) -> int


module TestLang: EvalBase, EvalNeg
//│ class TestLang

TestLang.eval
//│ Typed: 'expr -> int
//│   where
//│     'expr <: Neg & {expr: 'expr} | (Add & {lhs: 'expr, rhs: 'expr} | Lit & {n: int}) & ~Neg


TestLang.eval(add11)
//│ Typed: int

TestLang.eval(Neg(add11))
//│ Typed: int

TestLang.eval(Add(Lit(2), Neg(Lit(1))))
//│ Typed: int

TestLang.eval(Neg(Neg(add11)))
//│ Typed: int


TestLang.eval(add2negadd11)
//│ Typed: int

TestLang.eval(Add(Lit(2), Neg(add11)))
//│ Typed: int


