:NewParser
:NewDefs
:NoJS


class Add<E>(lhs: E, rhs: E)
class Lit(n: int)
//│ class Add
//│ class Lit

let add11 = Add(Lit(1), Lit(2))
//│ let add11: α33 where 
//│ |		α33 :> (Add<> & {Add#E: mut E24_34..E24_34})
//│ |		E24_34 :> Lit<>
//│ [pretty-printed] add11: Add & {Add#E = 'E}
//│ |  where
//│ |    'E :> Lit


mixin EvalBase {
  fun eval(e) =
    if e is
      Lit(n) then n: int
      Add(l, r) then this.eval(l) + this.eval(r)
}
//│ mixin EvalBase
//│   this: this40' 
//│   |		this40' <: {eval: eval60_61'} & {eval: eval53_54'}
//│   |		eval53_54' <: ((‹∀ 2. lhs49_56'''›,) -> α55_58')
//│   |		lhs49_56''' :> lhs49_57'
//│   |		α55_58' <: int<number>
//│   |		eval60_61' <: ((‹∀ 2. rhs51_63'''›,) -> α62_65')
//│   |		rhs51_63''' :> rhs51_64'
//│   |		α62_65' <: int<number>
//│   super: super41' 
//│   fun eval: (α43'' -> (Int | α66'')) where 
//│   |		α43'' <: ((Lit<> & α44'') | ((Add<> & α48'') & ~(Lit<>)))
//│   |		α44'' <: {n: n45_46''}
//│   |		n45_46'' <: int<number>
//│   |		α48'' <: {rhs: rhs51_52''} & {lhs: lhs49_50''}
//│   |		lhs49_50'' <: lhs49_57'
//│   |		rhs51_52'' <: rhs51_64'
//│   |		α66'' :> int<number>
//│   [pretty-printed] eval: (Add & {lhs: anything, rhs: anything} | Lit & {n: int}) -> int


module TestLang: EvalBase
//│ class TestLang

TestLang.eval
//│ Typed: 'rhs -> int
//│   where
//│     'rhs <: Add & {lhs: 'rhs, rhs: 'rhs} | Lit & {n: int}

TestLang.eval(add11)
//│ Typed: int


class Neg<A>(expr: A)
//│ class Neg

let add2negadd11 = Add(Lit(2), Neg(add11))
//│ let add2negadd11: α150 where 
//│ |		E24_34 :> Lit<> <: lhs49_132 & rhs51_130
//│ |		lhs49_126 :> Lit<> <: ((Lit<> & α44_127) | ((Add<> & α48_129) & ~(Lit<>)))
//│ |		α44_127 :> Lit<> <: {n: n45_128}
//│ |		n45_128 :> Int <: int<number>
//│ |		α48_129 :> (Add<> & {Add#E: mut E24_34..E24_34}) <: {rhs: rhs51_130} & {lhs: lhs49_132}
//│ |		rhs51_130 :> Lit<> <: rhs51_131
//│ |		rhs51_131 :> Lit<> <: ((Lit<> & α44_127) | ((Add<> & α48_129) & ~(Lit<>)))
//│ |		lhs49_132 :> Lit<> <: lhs49_126
//│ |		A141_149 :> (Add<> & {Add#E: mut E24_34..E24_34})
//│ |		α150 :> (Add<> & {Add#E: mut E24_151..E24_151})
//│ |		E24_151 :> (Neg<> & {Neg#A: mut A141_149..A141_149}) | Lit<>
//│ [pretty-printed] add2negadd11: Add & {Add#E = 'E}
//│ |  where
//│ |    'E :> Lit | Neg & {Neg#A = 'A}
//│ |    'A :> Add & {Add#E = 'E0}
//│ |    'E0 :> Lit
//│ |        <: 'lhs
//│ |    'lhs <: Add & {lhs: 'lhs, rhs: 'lhs} | Lit & {n: int}


mixin EvalNeg {
  fun eval(e) =
    if e is Neg(d) then 0 - this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNeg
//│   this: this175' 
//│   |		this175' <: {eval: eval183_184'}
//│   |		eval183_184' <: ((‹∀ 2. expr180_186'''›,) -> α185_188')
//│   |		expr180_186''' :> expr180_187'
//│   |		α185_188' <: int<number>
//│   super: super176' 
//│   |		super176' <: {eval: eval191_192'}
//│   |		eval191_192' <: ((α190_194',) -> α193_195')
//│   fun eval: (α178'' -> (α189'' | α193'')) where 
//│   |		α178'' <: ((Neg<> & α179'') | (α190'' & ~(Neg<>)))
//│   |		α179'' <: {expr: expr180_181''}
//│   |		expr180_181'' <: expr180_187'
//│   |		α189'' :> int<number>
//│   |		α190'' <: α190_194'
//│   |		α193'' :> α193_195'
//│   [pretty-printed] eval: (Neg & {expr: anything} | ~Neg) -> int


module TestLang: EvalBase, EvalNeg
//│ class TestLang

TestLang.eval
//│ Typed: 'rhs -> int
//│   where
//│     'rhs <: Add & {lhs: 'rhs, rhs: 'rhs} | Lit & {n: int} | Neg & {expr: 'rhs}


TestLang.eval(add11)
//│ Typed: int

TestLang.eval(Neg(add11))
//│ Typed: int

TestLang.eval(Add(Lit(2), Neg(Lit(1))))
//│ Typed: int

TestLang.eval(Neg(Neg(add11)))
//│ Typed: int


TestLang.eval(add2negadd11)
//│ Typed: int

TestLang.eval(Add(Lit(2), Neg(add11)))
//│ Typed: int


