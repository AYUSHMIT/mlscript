:NewParser
:NewDefs
:NoJS


class Add<E>(lhs: E, rhs: E)
class Lit(n: int)
//│ class Add
//│ class Lit

let add11 = Add(Lit(1), Lit(2))
//│ let add11: α33 where 
//│ |		α33 :> (Add<> & {Add#E: mut E24_34..E24_34})
//│ |		E24_34 :> Lit<>
//│ [pretty-printed] add11: Add & {Add#E = 'E}
//│ |  where
//│ |    'E :> Lit


mixin EvalBase {
  fun eval(e) =
    if e is
      Lit(n) then n: int
      Add(l, r) then this.eval(l) + this.eval(r)
}
//│ mixin EvalBase
//│   this: this40' 
//│   |		this40' <: {eval: eval61_62'} & {eval: eval54_55'}
//│   |		eval54_55' <: ((‹∀ 2. lhs50_57'''›,) -> α56_59')
//│   |		lhs50_57''' :> lhs50_58'
//│   |		α56_59' <: int<number>
//│   |		eval61_62' <: ((‹∀ 2. rhs52_64'''›,) -> α63_66')
//│   |		rhs52_64''' :> rhs52_65'
//│   |		α63_66' <: int<number>
//│   super: super41' 
//│   fun eval: ‹∀ 1. eval43''#› where 
//│   |		eval43''# := (α44'' -> (Int | α67''))
//│   |		α44'' <: ((Lit<> & α45'') | ((Add<> & α49'') & ~(Lit<>)))
//│   |		α45'' <: {n: n46_47''}
//│   |		n46_47'' <: int<number>
//│   |		α49'' <: {rhs: rhs52_53''} & {lhs: lhs50_51''}
//│   |		lhs50_51'' <: lhs50_58'
//│   |		rhs52_53'' <: rhs52_65'
//│   |		α67'' :> int<number>
//│   [pretty-printed] eval: (Add & {lhs: anything, rhs: anything} | Lit & {n: int}) -> int


module TestLang: EvalBase
//│ class TestLang

TestLang.eval
//│ Typed: 'rhs -> int
//│   where
//│     'rhs <: Add & {lhs: 'rhs, rhs: 'rhs} | Lit & {n: int}

TestLang.eval(add11)
//│ Typed: int


class Neg<A>(expr: A)
//│ class Neg

let add2negadd11 = Add(Lit(2), Neg(add11))
//│ let add2negadd11: α206 where 
//│ |		E24_34 :> Lit<> <: lhs50_191 & rhs52_190
//│ |		rhs52_170 :> Lit<> <: ((Lit<> & α45_171) | ((Add<> & α49_173) & ~(Lit<>)))
//│ |		α45_171 :> Lit<> <: {n: n46_172}
//│ |		n46_172 :> Int <: int<number>
//│ |		α49_173 <: {rhs: rhs52_174} & {lhs: lhs50_175}
//│ |		rhs52_174 <: rhs52_170
//│ |		lhs50_175 <: lhs50_176
//│ |		lhs50_176 :> Lit<> <: ((Lit<> & α45_177) | ((Add<> & α49_179) & ~(Lit<>)))
//│ |		α45_177 :> Lit<> <: {n: n46_178}
//│ |		n46_178 :> Int <: int<number>
//│ |		α49_179 <: {rhs: rhs52_180} & {lhs: lhs50_181}
//│ |		rhs52_180 <: rhs52_170
//│ |		lhs50_181 <: lhs50_176
//│ |		rhs52_190 :> Lit<> <: rhs52_170
//│ |		lhs50_191 :> Lit<> <: lhs50_176
//│ |		A197_205 :> (Add<> & {Add#E: mut E24_34..E24_34})
//│ |		α206 :> (Add<> & {Add#E: mut E24_207..E24_207})
//│ |		E24_207 :> (Neg<> & {Neg#A: mut A197_205..A197_205}) | Lit<>
//│ [pretty-printed] add2negadd11: Add & {Add#E = 'E}
//│ |  where
//│ |    'E :> Lit | Neg & {Neg#A = 'A}
//│ |    'A :> Add & {Add#E = 'E0}
//│ |    'E0 :> Lit
//│ |        <: 'lhs
//│ |    'lhs <: Add & {lhs: 'lhs, rhs: 'lhs} | Lit & {n: int}


mixin EvalNeg {
  fun eval(e) =
    if e is Neg(d) then 0 - this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNeg
//│   this: this237' 
//│   |		this237' <: {eval: eval246_247'}
//│   |		eval246_247' <: ((‹∀ 2. expr243_249'''›,) -> α248_251')
//│   |		expr243_249''' :> expr243_250'
//│   |		α248_251' <: int<number>
//│   super: super238' 
//│   |		super238' <: {eval: eval254_255'}
//│   |		eval254_255' <: ((α253_257',) -> α256_258')
//│   fun eval: ‹∀ 1. eval240''#› where 
//│   |		eval240''# := (α241'' -> (α252'' | α256''))
//│   |		α241'' <: ((Neg<> & α242'') | (α253'' & ~(Neg<>)))
//│   |		α242'' <: {expr: expr243_244''}
//│   |		expr243_244'' <: expr243_250'
//│   |		α252'' :> int<number>
//│   |		α253'' <: α253_257'
//│   |		α256'' :> α256_258'
//│   [pretty-printed] eval: (Neg & {expr: anything} | ~Neg) -> int


module TestLang: EvalBase, EvalNeg
//│ class TestLang

TestLang.eval
//│ Typed: 'expr -> int
//│   where
//│     'expr <: Neg & {expr: 'expr} | (Add & {lhs: 'expr, rhs: 'expr} | Lit & {n: int}) & ~Neg


TestLang.eval(add11)
//│ Typed: int

TestLang.eval(Neg(add11))
//│ Typed: int

TestLang.eval(Add(Lit(2), Neg(Lit(1))))
//│ Typed: int

TestLang.eval(Neg(Neg(add11)))
//│ Typed: int


TestLang.eval(add2negadd11)
//│ Typed: int

TestLang.eval(Add(Lit(2), Neg(add11)))
//│ Typed: int


