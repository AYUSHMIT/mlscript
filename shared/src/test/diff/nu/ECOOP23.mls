:NewParser
:NewDefs
:NoJS


class Add<E>(lhs: E, rhs: E)
class Lit(n: int)
//│ class Add[E](lhs: E, rhs: E)
//│ class Lit(n: int)

fun add11 = Add(Lit(1), Lit(2))
//│ fun add11: Add['E]
//│   where
//│     'E :> Lit

// add11 + 1

// add11


fun eval(e) =
  if e is
    Lit(n) then n
    Add(l, r) then eval(l) + eval(r)
//│ fun eval: 'a -> int
//│   where
//│     'a <: Add['E] | Lit
//│     'E <: 'a


mixin EvalBase {
  fun eval(e) =
    if e is
      Lit(n) then n: int
      Add(l, r) then this.eval(l) + this.eval(r)
}
//│ mixin EvalBase() {
//│   this: {eval: 'lhs -> int}
//│   fun eval: (Add['E] | Lit) -> int
//│ }
//│ where
//│   'E <: 'lhs


module TestLang: EvalBase
//│ namespace TestLang() {
//│   this: {eval: 'E -> int}
//│   fun eval: (Add['E] | Lit) -> int
//│ }
//│ where
//│   'E <: (Add['E0] | Lit) & (Add['E1] | Lit)
//│   'E1 <: Add['E0] | Lit

TestLang.eval
//│ (Add['E] | Lit) -> int
//│   where
//│     'E <: Add[in (Add['E0] | Lit) & 'E1 | 'E0 out 'E1 & 'E0] | Lit

TestLang.eval(add11)
//│ int


class Neg<A>(expr: A)
//│ class Neg[A](expr: A)

let add2negadd11 = Add(Lit(2), Neg(add11))
//│ let add2negadd11: Add['E]
//│   where
//│     'E :> Lit | Neg['A]
//│     'A :> forall 'E0. Add['E0]
//│     'E0 :> Lit


mixin EvalNeg {
  fun eval(e) =
    if e is Neg(d) then 0 - this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNeg() {
//│   super: {eval: 'a -> 'b}
//│   this: {eval: 'expr -> int}
//│   fun eval: (Neg['A] | 'a & ~Neg) -> (int | 'b)
//│ }
//│ where
//│   'A <: 'expr


module TestLang: EvalBase, EvalNeg
//│ namespace TestLang() {
//│   this: {eval: ('A | 'E) -> int}
//│   fun eval: (Add['E] | Lit | Neg['A]) -> int
//│ }
//│ where
//│   'E <: (Add['E0] | Lit | Neg['A0]) & (Add['E1] | Lit | Neg['A1])
//│   'A0 <: Add['E2] | Lit | Neg['A2]
//│   'E0 <: Add['E1] | Lit | Neg['A1]
//│   'A1 <: Add['E2] | Lit | Neg['A2]
//│   'A <: Add['E2] | Lit | Neg['A2]

TestLang.eval
//│ (Add['E] | Lit | Neg['A]) -> int
//│   where
//│     'A <: Add['E0] | Lit | Neg['A0]
//│     'E <: Add[in (Add['E1] | Lit | Neg['A1]) & 'E2 | 'E1 out 'E2 & 'E1] | Lit | Neg[in (Add['E0] | Lit | Neg['A0]) & 'A2 | 'A1 out 'A2 & 'A1]
//│     'A1 <: Add['E0] | Lit | Neg['A0]


TestLang.eval(add11)
//│ int

TestLang.eval(Neg(add11))
//│ int

TestLang.eval(Add(Lit(2), Neg(Lit(1))))
//│ int

TestLang.eval(Neg(Neg(add11)))
//│ int


TestLang.eval(add2negadd11)
//│ int

// add11

TestLang.eval(Add(Lit(2), Neg(add11)))
//│ int


mixin EvalNegNeg {
  fun eval(e) =
    if e is Neg(Neg(d)) then this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNegNeg() {
//│   super: {eval: (Neg[in 'A & (~Neg | Neg[in 'expr out nothing]) out 'A | 'A0] & {Neg#A :> 'A & (~Neg | Neg[in 'expr out nothing]) <: 'A | 'A0} | 'a) -> 'b}
//│   this: {eval: 'expr -> 'b}
//│   fun eval: (Neg['A1] | 'a & ~Neg) -> 'b
//│ }
//│ where
//│   'A1 :> 'A
//│       <: 'A0 & (~Neg | Neg['A2])
//│   'A2 <: 'expr

module TestLang: EvalBase, EvalNeg, EvalNegNeg
//│ namespace TestLang() {
//│   this: {eval: 'E -> int & nothing -> 'a}
//│   fun eval: (Add['E] | Lit | Neg[Neg['A] & 'A0]) -> (int | 'a)
//│ }
//│ where
//│   'A0 <: nothing
//│   'A <: nothing
//│   'E <: (Add['E0] | Lit | Neg[Neg['A1] & 'A2]) & (Add['E1] | Lit | Neg[Neg['A3] & 'A4])
//│   'A4 <: nothing
//│   'A3 <: nothing
//│   'E1 <: Add['E0] | Lit | Neg[Neg['A1] & 'A2]
//│   'A2 <: nothing
//│   'A1 <: nothing

fun mk(n) = if n is
  0 then Lit(0)
  1 then Neg(mk(n))
  _ then Add(mk(n), mk(n))
//│ fun mk: number -> (Lit | 'a)
//│   where
//│     'a :> Neg['A] | Add['E]
//│     'E :> Lit | 'a
//│     'A :> Lit | 'a

TestLang.eval
//│ (Add['E] | Lit | Neg[Neg['A] & 'A0]) -> int
//│   where
//│     'A0 <: nothing
//│     'A <: nothing
//│     'E <: Add[in (Add['E0] | Lit | Neg[Neg['A1] & 'A2]) & 'E1 | 'E0 out 'E1 & 'E0] | Lit | Neg[Neg['A1] & 'A2]
//│     'A2 <: nothing
//│     'A1 <: nothing

TestLang.eval(mk(0))
//│ int


