:NewParser
:NewDefs
:NoJS


class Add<E>(lhs: E, rhs: E)
class Lit(n: int)
//│ 
//│ class Add[E](lhs: E, rhs: E) {
//│ let this: 'this
//│ }
//│ class Lit(n: int) {
//│ let this: 'this0
//│ }

let add11 = Add(Lit(1), Lit(2))
//│ 
//│ let add11: 'a


mixin EvalBase {
  fun eval(e) =
    if e is
      Lit(n) then n: int
      Add(l, r) then this.eval(l) + this.eval(r)
}
//│ /!!!\ Uncaught error: scala.MatchError: TypedNuMxn(mixin EvalBase() {
//│ fun eval = ...
//│ },this39',super40',TypedTypingUnit(List(eval ~> TypedNuFun(1,fun eval = ...,(α42'' -> (Int | α65'')))),None)) (of class mlscript.NuTypeDefs$TypedNuMxn)
//│ 	at: mlscript.Typer.mlscript$Typer$$goDecl$1(Typer.scala:1204)
//│ 	at: mlscript.Typer.$anonfun$expandType$4(Typer.scala:1230)
//│ 	at: scala.collection.immutable.List.map(List.scala:246)
//│ 	at: mlscript.Typer.goLike$1(Typer.scala:1221)
//│ 	at: mlscript.Typer.expandType(Typer.scala:1321)
//│ 	at: mlscript.DiffTests.rec$1(DiffTests.scala:504)
//│ 	at: mlscript.DiffTests.$anonfun$new$3(DiffTests.scala:943)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
//│ 	at: org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)


module TestLang: EvalBase
//│ 
//│ namespace TestLang() {
//│ let this: 'this
//│ fun eval: 'a -> (int | 'b)
//│ }

TestLang.eval
//│ 
//│ 'eval
//│ Typed: 'rhs -> int
//│   where
//│     'rhs <: Add & {lhs: 'rhs, rhs: 'rhs} | Lit & {n: int}

TestLang.eval(add11)
//│ 
//│ 'a
//│ Typed: int


class Neg<A>(expr: A)
//│ 
//│ class Neg[A](expr: A) {
//│ let this: 'this
//│ }

let add2negadd11 = Add(Lit(2), Neg(add11))
//│ 
//│ let add2negadd11: 'a


mixin EvalNeg {
  fun eval(e) =
    if e is Neg(d) then 0 - this.eval(d)
    else super.eval(e)
}
//│ /!!!\ Uncaught error: scala.MatchError: TypedNuMxn(mixin EvalNeg() {
//│ fun eval = ...
//│ },this151',super152',TypedTypingUnit(List(eval ~> TypedNuFun(1,fun eval = ...,(α154'' -> (α165'' | α169'')))),None)) (of class mlscript.NuTypeDefs$TypedNuMxn)
//│ 	at: mlscript.Typer.mlscript$Typer$$goDecl$1(Typer.scala:1204)
//│ 	at: mlscript.Typer.$anonfun$expandType$4(Typer.scala:1230)
//│ 	at: scala.collection.immutable.List.map(List.scala:246)
//│ 	at: mlscript.Typer.goLike$1(Typer.scala:1221)
//│ 	at: mlscript.Typer.expandType(Typer.scala:1321)
//│ 	at: mlscript.DiffTests.rec$1(DiffTests.scala:504)
//│ 	at: mlscript.DiffTests.$anonfun$new$3(DiffTests.scala:943)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
//│ 	at: org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)


module TestLang: EvalBase, EvalNeg
//│ 
//│ namespace TestLang() {
//│ let this: 'this
//│ fun eval: 'a -> ('b | 'c)
//│ }

TestLang.eval
//│ 
//│ 'eval
//│ Typed: 'rhs -> int
//│   where
//│     'rhs <: Add & {lhs: 'rhs, rhs: 'rhs} | Lit & {n: int} | Neg & {expr: 'rhs}


TestLang.eval(add11)
//│ 
//│ 'a
//│ Typed: int

TestLang.eval(Neg(add11))
//│ 
//│ 'a
//│ Typed: int

TestLang.eval(Add(Lit(2), Neg(Lit(1))))
//│ 
//│ 'a
//│ Typed: int

TestLang.eval(Neg(Neg(add11)))
//│ 
//│ 'a
//│ Typed: int


TestLang.eval(add2negadd11)
//│ 
//│ 'a
//│ Typed: int

TestLang.eval(Add(Lit(2), Neg(add11)))
//│ 
//│ 'a
//│ Typed: int


