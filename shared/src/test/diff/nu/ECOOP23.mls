:NewParser
:NewDefs
:NoJS


class Add<E>(lhs: E, rhs: E)
class Lit(n: int)
//│ class Add[E](lhs: E, rhs: E)
//│ class Lit(n: int)

fun add11 = Add(Lit(1), Lit(2))
//│ fun add11: Add[Lit]

// add11 + 1

// add11


fun eval(e) =
  if e is
    Lit(n) then n
    Add(l, r) then eval(l) + eval(r)
//│ fun eval: 'a -> int
//│   where
//│     'a <: Add['a] | Lit


mixin EvalBase {
  fun eval(e) =
    if e is
      Lit(n) then n: int
      Add(l, r) then this.eval(l) + this.eval(r)
}
//│ mixin EvalBase() {
//│   this: {eval: 'lhs -> int}
//│   fun eval: (Add['lhs] | Lit) -> int
//│ }


module TestLang: EvalBase
//│ namespace TestLang() {
//│   this: {eval: 'lhs -> int}
//│   fun eval: (Add['lhs & (Add[Add[anything] | Lit] | Lit)] | Lit) -> int
//│ }

TestLang.eval
//│ (Add[Add[Add[anything] | Lit] | Lit] | Lit) -> int

TestLang.eval(add11)
//│ int


mixin EvalNothing {
  fun eval(e) = e : nothing
}
mixin EvalAddLit {
  fun eval(e) =
    if e is
      Lit(n) then n: int
      Add(l, r) then this.eval(l) + this.eval(r)
    else super.eval(e)
}
module TestLang: EvalNothing, EvalAddLit
//│ mixin EvalNothing() {
//│   fun eval: nothing -> nothing
//│ }
//│ mixin EvalAddLit() {
//│   super: {eval: 'a -> 'b}
//│   this: {eval: 'lhs -> int}
//│   fun eval: (Add['lhs] | Lit | 'a & ~Add & ~Lit) -> (int | 'b)
//│ }
//│ namespace TestLang() {
//│   this: {eval: 'lhs0 -> int}
//│   fun eval: (Add['lhs0 & (Add[Add[anything] | Lit] | Lit)] | Lit) -> int
//│ }

TestLang.eval
//│ (Add[Add[Add[anything] | Lit] | Lit] | Lit) -> int

TestLang.eval(add11)
//│ int


class Neg<A>(expr: A)
//│ class Neg[A](expr: A)

let add2negadd11 = Add(Lit(2), Neg(add11))
//│ let add2negadd11: Add[Lit | Neg[Add[Lit]]]


mixin EvalNeg {
  fun eval(e) =
    if e is Neg(d) then 0 - this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNeg() {
//│   super: {eval: 'a -> 'b}
//│   this: {eval: 'expr -> int}
//│   fun eval: (Neg['expr] | 'a & ~Neg) -> (int | 'b)
//│ }


module TestLang: EvalBase, EvalNeg
//│ namespace TestLang() {
//│   this: {eval: ('expr | 'lhs) -> int}
//│   fun eval: (Add['lhs & (Add[Add[anything] | Lit | Neg[Add[anything] | Lit | Neg[anything]]] | Lit | Neg[Add[anything] | Lit | Neg[anything]])] | Lit | Neg['expr & (Add[anything] | Lit | Neg[anything])]) -> int
//│ }

TestLang.eval
//│ (Add[Add[Add[anything] | Lit | Neg[Add[anything] | Lit | Neg[anything]]] | Lit | Neg[Add[anything] | Lit | Neg[anything]]] | Lit | Neg[Add[anything] | Lit | Neg[anything]]) -> int


TestLang.eval(add11)
//│ int

TestLang.eval(Neg(add11))
//│ int

TestLang.eval(Add(Lit(2), Neg(Lit(1))))
//│ int

TestLang.eval(Neg(Neg(add11)))
//│ int


TestLang.eval(add2negadd11)
//│ int

// add11

TestLang.eval(Add(Lit(2), Neg(add11)))
//│ int


mixin EvalNegNeg {
  fun eval(e) =
    if e is Neg(Neg(d)) then this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNegNeg() {
//│   super: {eval: (Neg['A] | 'a) -> 'b}
//│   this: {eval: 'expr -> 'b}
//│   fun eval: (Neg['A & (~Neg | Neg['expr])] | 'a & ~Neg) -> 'b
//│ }

module TestLang: EvalBase, EvalNeg, EvalNegNeg
//│ namespace TestLang() {
//│   this: {eval: ('expr | 'lhs) -> int & 'expr0 -> 'a}
//│   fun eval: (Add['lhs & (Add[Add[anything] | Lit | Neg[Add[anything] | Lit | Neg[Add[anything] | Lit | Neg[Add[anything] | Lit | Neg[anything]]] | Neg[Neg[Add[anything] | Lit | Neg[anything]] | ~Neg[anything]] & ~Neg]] | Lit | Neg[Add[anything] | Lit | Neg[Add[anything] | Lit | Neg[Add[anything] | Lit | Neg[anything]]] | Neg[Neg[Add[anything] | Lit | Neg[anything]] | ~Neg[anything]] & ~Neg])] | Lit | Neg['expr & (Add[anything] | Lit | Neg['expr0 & (Add[anything] | Lit | Neg[Add[anything] | Lit | Neg[anything]])] | Neg[Neg[Add[anything] | Lit | Neg[anything]] | ~Neg[anything]] & ~Neg)]) -> (int | 'a)
//│ }

fun mk(n) = if n is
  0 then Lit(0)
  1 then Neg(mk(n))
  _ then Add(mk(n), mk(n))
//│ fun mk: number -> 'E
//│   where
//│     'E :> Add['E] | Lit | Neg['E]

TestLang.eval
//│ (Add[Add[Add[anything] | Lit | Neg[Add[anything] | Lit | Neg[Add[anything] | Lit | Neg[Add[anything] | Lit | Neg[anything]]] | Neg[Neg[Add[anything] | Lit | Neg[anything]] | ~Neg[anything]] & ~Neg]] | Lit | Neg[Add[anything] | Lit | Neg[Add[anything] | Lit | Neg[Add[anything] | Lit | Neg[anything]]] | Neg[Neg[Add[anything] | Lit | Neg[anything]] | ~Neg[anything]] & ~Neg]] | Lit | Neg[Add[anything] | Lit | Neg[Add[anything] | Lit | Neg[Add[anything] | Lit | Neg[anything]]] | Neg[Neg[Add[anything] | Lit | Neg[anything]] | ~Neg[anything]] & ~Neg]) -> int

TestLang.eval(mk(0))
//│ int


