:NewParser
:NewDefs
:NoJS


class Add<E>(lhs: E, rhs: E)
class Lit(n: int)
//│ 
//│ class Add[E](lhs: E, rhs: E) {
//│ this: 'this
//│ }
//│ class Lit(n: int) {
//│ this: 'this0
//│ }
//│   where
//│     'this0 :> Lit
//│     'this :> Add

let add11 = Add(Lit(1), Lit(2))
//│ 
//│ let add11: 'a
//│   where
//│     'a :> Add & {Add#E = 'E}
//│     'E :> Lit

fun eval(e) =
  if e is
    // Lit(n) then n: int
    Add(l, r) then eval(l) + eval(r)
//│ ╔══[ERROR] Type mismatch in expression:
//│ ╟── reference of type `anything` is not an instance of type `Add`
//│ ║  l.27: 	  if e is
//│ ║        	     ^
//│ ╟── but it flows into type parameter with expected type `Add`
//│ ║  l.6: 	class Add<E>(lhs: E, rhs: E)
//│ ╙──     	          ^
//│ 
//│ fun eval: 'a -> 'b
//│   where
//│     'b :> int
//│        <: 'c & 'd
//│     'd := int
//│     'c := int
//│     'a :> (forall 'lhs. 'lhs) | (forall 'rhs. 'rhs)
//│        <: Add
//│     'rhs :> anything
//│     'lhs :> anything


mixin EvalBase {
  fun eval(e) =
    if e is
      Lit(n) then n: int
      Add(l, r) then this.eval(l) + this.eval(r)
}
//│ /!!!\ Uncaught error: scala.MatchError: TypedNuMxn(mixin EvalBase() {fun eval = ...},this53',super54',TypedTypingUnit(List(eval ~> TypedNuFun(1,fun eval = (e,) => {if e is ‹(Lit (n,)) then n : int; (Add (l, r,)) then + ((this).eval (l,),) ((this).eval (r,),)›},(α56'' -> (Int | α75'')))),None)) (of class mlscript.NuTypeDefs$TypedNuMxn)
//│ 	at: mlscript.Typer.mlscript$Typer$$goDecl$1(Typer.scala:1210)
//│ 	at: mlscript.Typer.$anonfun$expandType$4(Typer.scala:1238)
//│ 	at: scala.collection.immutable.List.map(List.scala:246)
//│ 	at: mlscript.Typer.goLike$1(Typer.scala:1229)
//│ 	at: mlscript.Typer.expandType(Typer.scala:1325)
//│ 	at: mlscript.DiffTests.rec$1(DiffTests.scala:504)
//│ 	at: mlscript.DiffTests.$anonfun$new$3(DiffTests.scala:943)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
//│ 	at: org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)


module TestLang: EvalBase
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.69: 	module TestLang: EvalBase
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── reference of type `anything` does not match type `Add | Lit`
//│ ║  l.52: 	    if e is
//│ ╙──      	       ^
//│ 
//│ namespace TestLang() {
//│ this: 'this
//│ fun eval: 'a -> (int | 'b)
//│ }
//│   where
//│     'b := int
//│     'a :> (forall 'lhs. 'lhs) | (forall 'rhs. 'rhs)
//│        <: Lit | Add & ~Lit
//│     'rhs :> anything
//│     'lhs :> anything
//│     'this :> TestLang

TestLang.eval
//│ 
//│ 'eval
//│   where
//│     'eval :> 'a -> (int | 'b)
//│     'b := int
//│     'a :> (forall 'lhs. 'lhs) | (forall 'rhs. 'rhs)
//│        <: Lit | Add & ~Lit
//│     'rhs :> anything
//│     'lhs :> anything
//│ Typed: (Add | Lit) -> int

TestLang.eval(add11)
//│ 
//│ 'a
//│   where
//│     'a :> int | 'b
//│     'b := int
//│ Typed: int


class Neg<A>(expr: A)
//│ 
//│ class Neg[A](expr: A) {
//│ this: 'this
//│ }
//│   where
//│     'this :> Neg

let add2negadd11 = Add(Lit(2), Neg(add11))
//│ 
//│ let add2negadd11: 'a
//│   where
//│     'a :> Add & {Add#E = 'E}
//│     'E :> Neg & {Neg#A = 'A} | Lit
//│     'A :> Add & {Add#E = 'E0}
//│     'E0 :> Lit


mixin EvalNeg {
  fun eval(e) =
    if e is Neg(d) then 0 - this.eval(d)
    else super.eval(e)
}
//│ /!!!\ Uncaught error: scala.MatchError: TypedNuMxn(mixin EvalNeg() {fun eval = ...},this120',super121',TypedTypingUnit(List(eval ~> TypedNuFun(1,fun eval = (e,) => {if (is (e,) (Neg (d,),)) then - (0,) ((this).eval (d,),) else (super).eval (e,)},(α123'' -> (α132'' | α136'')))),None)) (of class mlscript.NuTypeDefs$TypedNuMxn)
//│ 	at: mlscript.Typer.mlscript$Typer$$goDecl$1(Typer.scala:1210)
//│ 	at: mlscript.Typer.$anonfun$expandType$4(Typer.scala:1238)
//│ 	at: scala.collection.immutable.List.map(List.scala:246)
//│ 	at: mlscript.Typer.goLike$1(Typer.scala:1229)
//│ 	at: mlscript.Typer.expandType(Typer.scala:1325)
//│ 	at: mlscript.DiffTests.rec$1(DiffTests.scala:504)
//│ 	at: mlscript.DiffTests.$anonfun$new$3(DiffTests.scala:943)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
//│ 	at: org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)


module TestLang: EvalBase, EvalNeg
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.146: 	module TestLang: EvalBase, EvalNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `~Neg` does not match type `Add | Lit`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.52: 	    if e is
//│ ║        	       ^
//│ ╟── from wildcard pattern:
//│ ║  l.131: 	    else super.eval(e)
//│ ╙──       	         ^^^^^^^^^^^^^
//│ 
//│ namespace TestLang() {
//│ this: 'this
//│ fun eval: 'a -> ('b | 'c)
//│ }
//│   where
//│     'c :> 'd
//│        <: int
//│     'd :> int | 'e
//│        <: int
//│     'e := int
//│     'b := int
//│     'a :> (forall 'lhs. 'lhs) | (forall 'rhs. 'rhs) | (forall 'expr. 'expr)
//│        <: Neg | 'f & ~Neg
//│     'f :> ~Neg
//│        <: 'g
//│     'g :> ~Neg
//│        <: 'h
//│     'h :> ~Neg
//│        <: Lit | Add & ~Lit
//│     'expr :> anything
//│     'rhs :> anything
//│     'lhs :> anything
//│     'this :> TestLang

TestLang.eval
//│ 
//│ 'eval
//│   where
//│     'eval :> 'a -> ('b | 'c)
//│     'c :> 'd
//│        <: int
//│     'd :> int | 'e
//│        <: int
//│     'e := int
//│     'b := int
//│     'a :> (forall 'lhs. 'lhs) | (forall 'rhs. 'rhs) | (forall 'expr. 'expr)
//│        <: Neg | 'f & ~Neg
//│     'f :> ~Neg
//│        <: 'g
//│     'g :> ~Neg
//│        <: 'h
//│     'h :> ~Neg
//│        <: Lit | Add & ~Lit
//│     'expr :> anything
//│     'rhs :> anything
//│     'lhs :> anything
//│ Typed: (Add | Lit | Neg) -> int


TestLang.eval(add11)
//│ 
//│ 'a
//│   where
//│     'a :> 'b | 'c
//│     'c :> 'd
//│        <: int
//│     'd :> int | 'e
//│        <: int
//│     'e := int
//│     'b := int
//│ Typed: int

TestLang.eval(Neg(add11))
//│ 
//│ 'a
//│   where
//│     'a :> 'b | 'c
//│     'c :> 'd
//│        <: int
//│     'd :> int | 'e
//│        <: int
//│     'e := int
//│     'b := int
//│ Typed: int

TestLang.eval(Add(Lit(2), Neg(Lit(1))))
//│ 
//│ 'a
//│   where
//│     'a :> 'b | 'c
//│     'c :> 'd
//│        <: int
//│     'd :> int | 'e
//│        <: int
//│     'e := int
//│     'b := int
//│ Typed: int

TestLang.eval(Neg(Neg(add11)))
//│ 
//│ 'a
//│   where
//│     'a :> 'b | 'c
//│     'c :> 'd
//│        <: int
//│     'd :> int | 'e
//│        <: int
//│     'e := int
//│     'b := int
//│ Typed: int


TestLang.eval(add2negadd11)
//│ 
//│ 'a
//│   where
//│     'a :> 'b | 'c
//│     'c :> 'd
//│        <: int
//│     'd :> int | 'e
//│        <: int
//│     'e := int
//│     'b := int
//│ Typed: int

TestLang.eval(Add(Lit(2), Neg(add11)))
//│ 
//│ 'a
//│   where
//│     'a :> 'b | 'c
//│     'c :> 'd
//│        <: int
//│     'd :> int | 'e
//│        <: int
//│     'e := int
//│     'b := int
//│ Typed: int


