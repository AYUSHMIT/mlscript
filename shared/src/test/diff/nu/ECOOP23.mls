:NewParser
:NewDefs
:NoJS


class Add<E>(lhs: E, rhs: E)
class Lit(n: int)
//│ 
//│ class Add[E](lhs: E, rhs: E) {
//│ this: 'this
//│ }
//│ class Lit(n: int) {
//│ this: 'this0
//│ }
//│   where
//│     'this0 :> Lit
//│     'this :> Add

let add11 = Add(Lit(1), Lit(2))
//│ 
//│ let add11: 'a
//│   where
//│     'a :> Add & {Add#E = 'E}
//│     'E :> Lit

fun eval(e) =
  if e is
    Lit(n) then n: int
    Add(l, r) then eval(l) + eval(r)
//│ 
//│ fun eval: 'a -> (int | 'b)
//│   where
//│     'b := int
//│     'a :> (forall 'lhs. 'lhs) | (forall 'rhs. 'rhs)
//│        <: Lit | Add & {Add#E = 'E} & ~Lit
//│     'rhs :> 'E
//│     'lhs :> 'E
//│     'E <: Lit | Add & {Add#E = 'E} & ~Lit


mixin EvalBase {
  fun eval(e) =
    if e is
      Lit(n) then n: int
      Add(l, r) then this.eval(l) + this.eval(r)
}
//│ /!!!\ Uncaught error: scala.MatchError: TypedNuMxn(mixin EvalBase() {fun eval = ...},this59',super60',TypedTypingUnit(List(eval ~> TypedNuFun(1,fun eval = (e,) => {if e is ‹(Lit (n,)) then n : int; (Add (l, r,)) then + ((this).eval (l,),) ((this).eval (r,),)›},(α62'' -> (Int | α88'')))),None)) (of class mlscript.NuTypeDefs$TypedNuMxn)
//│ 	at: mlscript.Typer.mlscript$Typer$$goDecl$1(Typer.scala:1251)
//│ 	at: mlscript.Typer.$anonfun$expandType$4(Typer.scala:1279)
//│ 	at: scala.collection.immutable.List.map(List.scala:246)
//│ 	at: mlscript.Typer.goLike$1(Typer.scala:1270)
//│ 	at: mlscript.Typer.expandType(Typer.scala:1366)
//│ 	at: mlscript.DiffTests.rec$1(DiffTests.scala:504)
//│ 	at: mlscript.DiffTests.$anonfun$new$3(DiffTests.scala:946)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
//│ 	at: org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)


module TestLang: EvalBase
//│ 
//│ namespace TestLang() {
//│ this: 'this
//│ fun eval: 'a -> (int | 'b)
//│ }
//│   where
//│     'b := int
//│     'a :> (forall 'lhs. 'lhs) | (forall 'rhs. 'rhs)
//│        <: Lit | Add & {Add#E = 'E} & ~Lit
//│     'rhs :> 'E0
//│     'lhs :> 'E1
//│     'E1 <: Lit | Add & {Add#E = 'E} & ~Lit
//│     'E <: 'E0 & 'E1
//│     'E0 <: Lit | Add & {Add#E = 'E} & ~Lit
//│     'this :> TestLang

TestLang.eval
//│ 
//│ 'eval
//│   where
//│     'eval :> 'a -> (int | 'b)
//│     'b := int
//│     'a :> (forall 'lhs. 'lhs) | (forall 'rhs. 'rhs)
//│        <: Lit | Add & {Add#E = 'E} & ~Lit
//│     'rhs :> 'E0
//│     'lhs :> 'E1
//│     'E1 <: Lit | Add & {Add#E = 'E} & ~Lit
//│     'E <: 'E0 & 'E1
//│     'E0 <: Lit | Add & {Add#E = 'E} & ~Lit
//│ Typed: 'E -> int
//│   where
//│     'E <: Add & {Add#E = 'E0} | Lit
//│     'E0 <: 'E

TestLang.eval(add11)
//│ 
//│ 'a
//│   where
//│     'a :> int | 'b
//│     'b := int
//│ Typed: int


class Neg<A>(expr: A)
//│ 
//│ class Neg[A](expr: A) {
//│ this: 'this
//│ }
//│   where
//│     'this :> Neg

let add2negadd11 = Add(Lit(2), Neg(add11))
//│ 
//│ let add2negadd11: 'a
//│   where
//│     'a :> Add & {Add#E = 'E}
//│     'E :> Neg & {Neg#A = 'A} | Lit
//│     'A :> Add & {Add#E = 'E0}
//│     'E0 :> Lit
//│         <: 'E1
//│     'E1 :> Lit
//│         <: 'E0 & 'E2 & 'E3
//│     'E3 :> Lit
//│         <: Lit | Add & {Add#E = 'E1} & ~Lit
//│     'E2 :> Lit
//│         <: Lit | Add & {Add#E = 'E1} & ~Lit


mixin EvalNeg {
  fun eval(e) =
    if e is Neg(d) then 0 - this.eval(d)
    else super.eval(e)
}
//│ /!!!\ Uncaught error: scala.MatchError: TypedNuMxn(mixin EvalNeg() {fun eval = ...},this157',super158',TypedTypingUnit(List(eval ~> TypedNuFun(1,fun eval = (e,) => {if (is (e,) (Neg (d,),)) then - (0,) ((this).eval (d,),) else (super).eval (e,)},(α160'' -> (α173'' | α177'')))),None)) (of class mlscript.NuTypeDefs$TypedNuMxn)
//│ 	at: mlscript.Typer.mlscript$Typer$$goDecl$1(Typer.scala:1251)
//│ 	at: mlscript.Typer.$anonfun$expandType$4(Typer.scala:1279)
//│ 	at: scala.collection.immutable.List.map(List.scala:246)
//│ 	at: mlscript.Typer.goLike$1(Typer.scala:1270)
//│ 	at: mlscript.Typer.expandType(Typer.scala:1366)
//│ 	at: mlscript.DiffTests.rec$1(DiffTests.scala:504)
//│ 	at: mlscript.DiffTests.$anonfun$new$3(DiffTests.scala:946)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
//│ 	at: org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)


module TestLang: EvalBase, EvalNeg
//│ 
//│ namespace TestLang() {
//│ this: 'this
//│ fun eval: 'a -> ('b | 'c)
//│ }
//│   where
//│     'c :> 'd
//│        <: int
//│     'd :> int | 'e
//│        <: int
//│     'e := int
//│     'b := int
//│     'a :> (forall 'lhs. 'lhs) | (forall 'rhs. 'rhs) | (forall 'expr. 'expr)
//│        <: Neg & {Neg#A = 'A} | 'f & ~Neg
//│     'expr :> 'A0
//│     'rhs :> 'E
//│     'lhs :> 'E0
//│     'E0 <: Neg & {Neg#A = 'A} | 'f & ~Neg
//│     'A <: 'A0
//│     'A0 <: Neg & {Neg#A = 'A} | 'f & ~Neg
//│     'f <: 'g
//│     'g <: 'h
//│     'h <: Lit | Add & {Add#E = 'E1} & ~Lit
//│     'E1 <: 'E & 'E0
//│     'E <: Neg & {Neg#A = 'A} | 'f & ~Neg
//│     'this :> TestLang

TestLang.eval
//│ 
//│ 'eval
//│   where
//│     'eval :> 'a -> ('b | 'c)
//│     'c :> 'd
//│        <: int
//│     'd :> int | 'e
//│        <: int
//│     'e := int
//│     'b := int
//│     'a :> (forall 'lhs. 'lhs) | (forall 'rhs. 'rhs) | (forall 'expr. 'expr)
//│        <: Neg & {Neg#A = 'A} | 'f & ~Neg
//│     'expr :> 'A0
//│     'rhs :> 'E
//│     'lhs :> 'E0
//│     'E0 <: Neg & {Neg#A = 'A} | 'f & ~Neg
//│     'A <: 'A0
//│     'A0 <: Neg & {Neg#A = 'A} | 'f & ~Neg
//│     'f <: 'g
//│     'g <: 'h
//│     'h <: Lit | Add & {Add#E = 'E1} & ~Lit
//│     'E1 <: 'E & 'E0
//│     'E <: Neg & {Neg#A = 'A} | 'f & ~Neg
//│ Typed: 'E -> int
//│   where
//│     'E <: Add & {Add#E = 'E0} | Lit | Neg & {Neg#A = 'A}
//│     'A <: 'E
//│     'E0 <: 'E


TestLang.eval(add11)
//│ 
//│ 'a
//│   where
//│     'a :> 'b | 'c
//│     'c :> 'd
//│        <: int
//│     'd :> int | 'e
//│        <: int
//│     'e := int
//│     'b := int
//│ Typed: int

TestLang.eval(Neg(add11))
//│ 
//│ 'a
//│   where
//│     'a :> 'b | 'c
//│     'c :> 'd
//│        <: int
//│     'd :> int | 'e
//│        <: int
//│     'e := int
//│     'b := int
//│ Typed: int

TestLang.eval(Add(Lit(2), Neg(Lit(1))))
//│ 
//│ 'a
//│   where
//│     'a :> 'b | 'c
//│     'c :> 'd
//│        <: int
//│     'd :> int | 'e
//│        <: int
//│     'e := int
//│     'b := int
//│ Typed: int

TestLang.eval(Neg(Neg(add11)))
//│ 
//│ 'a
//│   where
//│     'a :> 'b | 'c
//│     'c :> 'd
//│        <: int
//│     'd :> int | 'e
//│        <: int
//│     'e := int
//│     'b := int
//│ Typed: int


TestLang.eval(add2negadd11)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.523: 	TestLang.eval(add2negadd11)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Neg & {Neg#A = ?A}` does not match type `Add & {Add#E = ?E} | Lit`
//│ ║  l.376: 	let add2negadd11 = Add(Lit(2), Neg(add11))
//│ ║         	                               ^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.307: 	    if e is
//│ ║         	       ^
//│ ╟── Note: type parameter E is defined at:
//│ ║  l.6: 	class Add<E>(lhs: E, rhs: E)
//│ ╙──     	          ^
//│ 
//│ 'a
//│   where
//│     'a :> 'b | 'c | error
//│     'c :> 'd
//│        <: int
//│     'd :> int | 'e
//│        <: int
//│     'e := int
//│     'b := int
//│ Typed: error | int

TestLang.eval(Add(Lit(2), Neg(add11)))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.548: 	TestLang.eval(Add(Lit(2), Neg(add11)))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Neg & {Neg#A = ?A}` does not match type `Add & {Add#E = ?E} | Lit`
//│ ║  l.376: 	let add2negadd11 = Add(Lit(2), Neg(add11))
//│ ║         	                               ^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.307: 	    if e is
//│ ║         	       ^
//│ ╟── Note: type parameter E is defined at:
//│ ║  l.6: 	class Add<E>(lhs: E, rhs: E)
//│ ╙──     	          ^
//│ 
//│ 'a
//│   where
//│     'a :> 'b | 'c | error
//│     'c :> 'd
//│        <: int
//│     'd :> int | 'e
//│        <: int
//│     'e := int
//│     'b := int
//│ Typed: error | int


