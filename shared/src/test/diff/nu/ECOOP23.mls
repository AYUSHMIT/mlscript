:NewParser
:NewDefs
:NoJS


class Add<E>(lhs: E, rhs: E)
class Lit(n: int)
//│ class Add
//│ class Lit

let add11 = Add(Lit(1), Lit(2))
//│ let add11: α33 where 
//│ |		α33 :> (Add<> & {Add#E: mut E24_34..E24_34})
//│ |		E24_34 :> Lit<>
//│ [pretty-printed] add11: 'a
//│ |  where
//│ |    'a :> Add & {Add#E = 'E}
//│ |    'E :> Lit


mixin EvalBase {
  fun eval(e) =
    if e is
      Lit(n) then n: int
      Add(l, r) then this.eval(l) + this.eval(r)
}
//│ mixin EvalBase
//│   this: this36' 
//│   |		this36' <: {eval: eval56_57'} & {eval: eval49_50'}
//│   |		eval49_50' <: ((‹∀ 2. lhs45_52'''›,) -> α51_54')
//│   |		lhs45_52''' :> lhs45_53'
//│   |		α51_54' <: int<number>
//│   |		eval56_57' <: ((‹∀ 2. rhs47_59'''›,) -> α58_61')
//│   |		rhs47_59''' :> rhs47_60'
//│   |		α58_61' <: int<number>
//│   super: super37' 
//│   fun eval: (α39'' -> (Int | α62'')) where 
//│   |		α39'' <: ((Lit<> & α40'') | ((Add<> & α44'') & ~(Lit<>)))
//│   |		α40'' <: {n: n41_42''}
//│   |		n41_42'' <: int<number>
//│   |		α44'' <: {rhs: rhs47_48''} & {lhs: lhs45_46''}
//│   |		lhs45_46'' <: lhs45_53'
//│   |		rhs47_48'' <: rhs47_60'
//│   |		α62'' :> int<number>
//│   [pretty-printed] eval: 'a -> (int | 'b)
//│   |  where
//│   |    'b :> int
//│   |    'a <: Lit & 'c | Add & 'd & ~Lit
//│   |    'd <: {rhs: 'rhs} & {lhs: 'lhs}
//│   |    'lhs <: 'lhs0
//│   |    'rhs <: 'rhs0
//│   |    'c <: {n: 'n}
//│   |    'n <: int


module TestLang: EvalBase
//│ class TestLang

TestLang.eval
//│ Typed: 'rhs -> int
//│   where
//│     'rhs <: Add & {lhs: 'rhs, rhs: 'rhs} | Lit & {n: int}

TestLang.eval(add11)
//│ Typed: int


class Neg<A>(expr: A)
//│ class Neg

let add2negadd11 = Add(Lit(2), Neg(add11))
//│ let add2negadd11: α137 where 
//│ |		E24_34 :> Lit<> <: lhs45_119 & rhs47_117
//│ |		lhs45_113 :> Lit<> <: ((Lit<> & α40_114) | ((Add<> & α44_116) & ~(Lit<>)))
//│ |		α40_114 :> Lit<> <: {n: n41_115}
//│ |		n41_115 :> Int <: int<number>
//│ |		α44_116 :> (Add<> & {Add#E: mut E24_34..E24_34}) <: {rhs: rhs47_117} & {lhs: lhs45_119}
//│ |		rhs47_117 :> Lit<> <: rhs47_118
//│ |		rhs47_118 :> Lit<> <: ((Lit<> & α40_114) | ((Add<> & α44_116) & ~(Lit<>)))
//│ |		lhs45_119 :> Lit<> <: lhs45_113
//│ |		A128_136 :> (Add<> & {Add#E: mut E24_34..E24_34})
//│ |		α137 :> (Add<> & {Add#E: mut E24_138..E24_138})
//│ |		E24_138 :> (Neg<> & {Neg#A: mut A128_136..A128_136}) | Lit<>
//│ [pretty-printed] add2negadd11: 'a
//│ |  where
//│ |    'a :> Add & {Add#E = 'E}
//│ |    'E :> Neg & {Neg#A = 'A} | Lit
//│ |    'A :> Add & {Add#E = 'E0}
//│ |    'E0 :> Lit
//│ |        <: 'lhs & 'rhs
//│ |    'lhs :> Lit
//│ |         <: 'lhs0
//│ |    'lhs0 :> Lit
//│ |          <: Lit & 'b | Add & 'c & ~Lit
//│ |    'c :> Add & {Add#E = 'E0}
//│ |       <: {rhs: 'rhs} & {lhs: 'lhs}
//│ |    'rhs :> Lit
//│ |         <: 'rhs0
//│ |    'rhs0 :> Lit
//│ |          <: Lit & 'b | Add & 'c & ~Lit
//│ |    'b :> Lit
//│ |       <: {n: 'n}
//│ |    'n := int


mixin EvalNeg {
  fun eval(e) =
    if e is Neg(d) then 0 - this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNeg
//│   this: this140' 
//│   |		this140' <: {eval: eval148_149'}
//│   |		eval148_149' <: ((‹∀ 2. expr145_151'''›,) -> α150_153')
//│   |		expr145_151''' :> expr145_152'
//│   |		α150_153' <: int<number>
//│   super: super141' 
//│   |		super141' <: {eval: eval156_157'}
//│   |		eval156_157' <: ((α155_159',) -> α158_160')
//│   fun eval: (α143'' -> (α154'' | α158'')) where 
//│   |		α143'' <: ((Neg<> & α144'') | (α155'' & ~(Neg<>)))
//│   |		α144'' <: {expr: expr145_146''}
//│   |		expr145_146'' <: expr145_152'
//│   |		α154'' :> int<number>
//│   |		α155'' <: α155_159'
//│   |		α158'' :> α158_160'
//│   [pretty-printed] eval: 'a -> ('b | 'c)
//│   |  where
//│   |    'c :> 'd
//│   |    'b :> int
//│   |    'a <: Neg & 'e | 'f & ~Neg
//│   |    'f <: 'g
//│   |    'e <: {expr: 'expr}
//│   |    'expr <: 'expr0


module TestLang: EvalBase, EvalNeg
//│ class TestLang

TestLang.eval
//│ Typed: 'rhs -> int
//│   where
//│     'rhs <: Add & {lhs: 'rhs, rhs: 'rhs} | Lit & {n: int} | Neg & {expr: 'rhs}


TestLang.eval(add11)
//│ Typed: int

TestLang.eval(Neg(add11))
//│ Typed: int

TestLang.eval(Add(Lit(2), Neg(Lit(1))))
//│ Typed: int

TestLang.eval(Neg(Neg(add11)))
//│ Typed: int


TestLang.eval(add2negadd11)
//│ Typed: int

TestLang.eval(Add(Lit(2), Neg(add11)))
//│ Typed: int


