:NewParser
:NewDefs
:NoJS


class Add<E>(lhs: E, rhs: E)
class Lit(n: int)
//│ 
//│ class Add[E](lhs: E, rhs: E) {
//│ this: 'this
//│ }
//│ class Lit(n: int) {
//│ this: 'this0
//│ }
//│   where
//│     'this0 :> Lit
//│     'this :> Add

fun add11 = Add(Lit(1), Lit(2))
//│ 
//│ fun add11: Add & {Add#E = 'E}
//│   where
//│     'E :> Lit

// add11 + 1

// add11


fun eval(e) =
  if e is
    Lit(n) then n
    Add(l, r) then eval(l) + eval(r)
//│ 
//│ fun eval: 'a -> int
//│   where
//│     'a <: Lit | Add & {Add#E = 'E} & ~Lit
//│     'E <: 'a


mixin EvalBase {
  fun eval(e) =
    if e is
      Lit(n) then n: int
      Add(l, r) then this.eval(l) + this.eval(r)
}
//│ 
//│ mixin EvalBase() {
//│ super: 'super
//│ this: 'this
//│ fun eval: (Lit | Add & {Add#E = 'E} & ~Lit) -> int
//│ }
//│   where
//│     'E <: 'lhs
//│     'this <: {eval: 'lhs -> int}


module TestLang: EvalBase
//│ 
//│ namespace TestLang() {
//│ this: 'this
//│ fun eval: 'a -> int
//│ }
//│   where
//│     'a <: Lit | Add & {Add#E = 'E} & ~Lit
//│     'E <: 'a
//│     'this :> TestLang

TestLang.eval
//│ 
//│ 'a -> int
//│   where
//│     'a <: Lit | Add & {Add#E = 'E} & ~Lit
//│     'E <: 'a
//│ Typed: 'a -> int
//│   where
//│     'a <: Add & {Add#E = 'E} | Lit
//│     'E <: 'a

TestLang.eval(add11)
//│ 
//│ int
//│ Typed: int


class Neg<A>(expr: A)
//│ 
//│ class Neg[A](expr: A) {
//│ this: 'this
//│ }
//│   where
//│     'this :> Neg

let add2negadd11 = Add(Lit(2), Neg(add11))
//│ 
//│ let add2negadd11: Add & {Add#E = 'E}
//│   where
//│     'E :> Lit | Neg & {Neg#A = 'A}
//│     'A :> forall 'E0. Add & {Add#E = 'E0}
//│     'E0 :> Lit


mixin EvalNeg {
  fun eval(e) =
    if e is Neg(d) then 0 - this.eval(d)
    else super.eval(e)
}
//│ 
//│ mixin EvalNeg() {
//│ super: 'super
//│ this: 'this
//│ fun eval: (Neg & {Neg#A = 'A} | 'a & ~Neg) -> (int | 'b)
//│ }
//│   where
//│     'A <: 'expr
//│     'this <: {eval: 'expr -> int}
//│     'super <: {eval: 'a -> 'b}


module TestLang: EvalBase, EvalNeg
//│ 
//│ namespace TestLang() {
//│ this: 'this
//│ fun eval: 'a -> int
//│ }
//│   where
//│     'a <: Neg & {Neg#A = 'A} | (Lit | Add & {Add#E = 'E} & ~Lit) & ~Neg
//│     'E <: 'a
//│     'A <: 'a
//│     'this :> TestLang

TestLang.eval
//│ 
//│ 'a -> int
//│   where
//│     'a <: Neg & {Neg#A = 'A} | (Lit | Add & {Add#E = 'E} & ~Lit) & ~Neg
//│     'E <: 'a
//│     'A <: 'a
//│ Typed: 'a -> int
//│   where
//│     'a <: Add & {Add#E = 'E} | Lit | Neg & {Neg#A = 'A}
//│     'A <: 'a
//│     'E <: 'a


TestLang.eval(add11)
//│ 
//│ int
//│ Typed: int

TestLang.eval(Neg(add11))
//│ 
//│ int
//│ Typed: int

TestLang.eval(Add(Lit(2), Neg(Lit(1))))
//│ 
//│ int
//│ Typed: int

TestLang.eval(Neg(Neg(add11)))
//│ 
//│ int
//│ Typed: int


TestLang.eval(add2negadd11)
//│ 
//│ int
//│ Typed: int

// add11

TestLang.eval(Add(Lit(2), Neg(add11)))
//│ 
//│ int
//│ Typed: int


mixin EvalNegNeg {
  fun eval(e) =
    if e is Neg(Neg(d)) then this.eval(d)
    else super.eval(e)
}
//│ 
//│ mixin EvalNegNeg() {
//│ super: 'super
//│ this: 'this
//│ fun eval: (Neg & {Neg#A = 'A} | 'a & ~Neg) -> 'b
//│ }
//│   where
//│     'A :> 'A0
//│        <: (Neg & {Neg#A = 'A1} | ~Neg) & 'A2
//│     'A1 :> 'A3
//│         <: 'expr
//│     'this <: {eval: 'expr -> 'b}
//│     'super <: {eval: (Neg & {Neg#A :> (Neg & {Neg#A :> 'expr <: 'expr & 'A3} | ~Neg) & 'A0 <: 'A0 | 'A2}) -> 'b & 'a -> 'b}

module TestLang: EvalBase, EvalNeg, EvalNegNeg
//│ 
//│ namespace TestLang() {
//│ this: 'this
//│ fun eval: 'a -> 'b
//│ }
//│   where
//│     'b :> int
//│     'a <: Neg & {Neg#A = 'A} | (Neg & {Neg#A = 'A0} | (Lit | Add & {Add#E = 'E} & ~Lit) & ~Neg) & ~Neg
//│     'E <: 'a
//│     'A :> 'A0
//│        <: (Neg & {Neg#A = 'A1} | ~Neg) & 'A0
//│     'A1 :> 'A2
//│         <: 'A3
//│     'A0 <: 'a & (Neg & {Neg#A :> 'A3 <: 'A2} | ~Neg)
//│     'A2 <: 'A3
//│     'A3 <: 'a
//│     'this :> TestLang

fun mk(n) = if n is
  0 then Lit(0)
  1 then Neg(mk(n))
  _ then Add(mk(n), mk(n))
//│ 
//│ fun mk: number -> (Lit | 'a)
//│   where
//│     'a :> Add & {Add#E = 'E} | Neg & {Neg#A = 'A}
//│     'A :> Lit | 'a
//│     'E :> Lit | 'a

TestLang.eval
//│ 
//│ 'a -> 'b
//│   where
//│     'b :> int
//│     'a <: Neg & {Neg#A = 'A} | (Neg & {Neg#A = 'A0} | (Lit | Add & {Add#E = 'E} & ~Lit) & ~Neg) & ~Neg
//│     'E <: 'a
//│     'A :> 'A0
//│        <: (Neg & {Neg#A = 'A1} | ~Neg) & 'A0
//│     'A1 :> 'A2
//│         <: 'A3
//│     'A0 <: 'a & (Neg & {Neg#A :> 'A3 <: 'A2} | ~Neg)
//│     'A2 <: 'A3
//│     'A3 <: 'a
//│ Typed: 'a -> int
//│   where
//│     'a <: Add & {Add#E = 'E} | Lit | Neg & {Neg#A = 'A}
//│     'A :> 'A0
//│        <: 'A0 & (~Neg | Neg & {Neg#A = 'A1})
//│     'A0 <: (Neg & {Neg#A :> 'A2 <: 'A1} | ~Neg) & 'a
//│     'A1 <: 'A2
//│     'A2 <: 'a
//│     'E <: 'a

TestLang.eval(mk(0))
//│ 
//│ 'a
//│   where
//│     'a :> int
//│ Typed: int


