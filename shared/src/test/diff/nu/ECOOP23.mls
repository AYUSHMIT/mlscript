:NewParser
:NewDefs
:NoJS


class Add<E>(lhs: E, rhs: E)
class Lit(n: int)
//│ class Add[E](lhs: E, rhs: E) {
//│   this: 'this
//│ }
//│ class Lit(n: int) {
//│   this: 'this0
//│ }
//│   where
//│     'this0 :> Lit
//│     'this :> Add[?]

fun add11 = Add(Lit(1), Lit(2))
//│ fun add11: Add['E]
//│   where
//│     'E :> Lit

// add11 + 1

// add11


fun eval(e) =
  if e is
    Lit(n) then n
    Add(l, r) then eval(l) + eval(r)
//│ fun eval: 'a -> int
//│   where
//│     'a <: Add['E] | Lit
//│     'E <: 'a


mixin EvalBase {
  fun eval(e) =
    if e is
      Lit(n) then n: int
      Add(l, r) then this.eval(l) + this.eval(r)
}
//│ mixin EvalBase() {
//│   super: 'super
//│   this: 'this
//│   fun eval: (Add['E] | Lit) -> int
//│ }
//│   where
//│     'E <: 'lhs
//│     'this <: {eval: 'lhs -> int}


module TestLang: EvalBase
//│ namespace TestLang() {
//│   this: 'this
//│   fun eval: 'a -> int
//│ }
//│   where
//│     'a <: Add['E] | Lit
//│     'E <: 'a
//│     'this :> TestLang

TestLang.eval
//│ 'a -> int
//│   where
//│     'a <: Add['E] | Lit
//│     'E <: 'a

TestLang.eval(add11)
//│ int


class Neg<A>(expr: A)
//│ class Neg[A](expr: A) {
//│   this: 'this
//│ }
//│   where
//│     'this :> Neg[?]

let add2negadd11 = Add(Lit(2), Neg(add11))
//│ let add2negadd11: Add['E]
//│   where
//│     'E :> Lit | Neg['A]
//│     'A :> forall 'E0. Add['E0]
//│     'E0 :> Lit


mixin EvalNeg {
  fun eval(e) =
    if e is Neg(d) then 0 - this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNeg() {
//│   super: 'super
//│   this: 'this
//│   fun eval: (Neg['A] | 'a & ~Neg) -> (int | 'b)
//│ }
//│   where
//│     'A <: 'expr
//│     'this <: {eval: 'expr -> int}
//│     'super <: {eval: 'a -> 'b}


module TestLang: EvalBase, EvalNeg
//│ namespace TestLang() {
//│   this: 'this
//│   fun eval: 'a -> int
//│ }
//│   where
//│     'a <: Add['E] | Lit | Neg['A]
//│     'A <: 'a
//│     'E <: 'a
//│     'this :> TestLang

TestLang.eval
//│ 'a -> int
//│   where
//│     'a <: Add['E] | Lit | Neg['A]
//│     'A <: 'a
//│     'E <: 'a


TestLang.eval(add11)
//│ int

TestLang.eval(Neg(add11))
//│ int

TestLang.eval(Add(Lit(2), Neg(Lit(1))))
//│ int

TestLang.eval(Neg(Neg(add11)))
//│ int


TestLang.eval(add2negadd11)
//│ int

// add11

TestLang.eval(Add(Lit(2), Neg(add11)))
//│ int


mixin EvalNegNeg {
  fun eval(e) =
    if e is Neg(Neg(d)) then this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNegNeg() {
//│   super: 'super
//│   this: 'this
//│   fun eval: (Neg['A] | 'a & ~Neg) -> 'b
//│ }
//│   where
//│     'A :> 'A0
//│        <: 'A1 & (~Neg | Neg['A2])
//│     'A2 <: 'expr
//│     'this <: {eval: 'expr -> 'b}
//│     'super <: {eval: (Neg[in 'A0 & (~Neg | Neg[in 'expr out nothing]) out 'A0 | 'A1] & {Neg#A :> 'A0 & (~Neg | Neg[in 'expr out nothing]) <: 'A0 | 'A1} | 'a) -> 'b}

module TestLang: EvalBase, EvalNeg, EvalNegNeg
//│ namespace TestLang() {
//│   this: 'this
//│   fun eval: 'a -> int
//│ }
//│   where
//│     'a <: Add['E] | Lit | Neg['A]
//│     'A :> 'A0
//│        <: 'A0 & (~Neg | Neg['A1])
//│     'A1 <: 'a
//│     'A0 <: (Neg[in 'a out nothing] | ~Neg[?]) & 'a
//│     'E <: 'a
//│     'this :> TestLang

fun mk(n) = if n is
  0 then Lit(0)
  1 then Neg(mk(n))
  _ then Add(mk(n), mk(n))
//│ fun mk: number -> (Lit | 'a)
//│   where
//│     'a :> Neg['A] | Add['E]
//│     'E :> Lit | 'a
//│     'A :> Lit | 'a

TestLang.eval
//│ 'a -> int
//│   where
//│     'a <: Add['E] | Lit | Neg['A]
//│     'A :> 'A0
//│        <: 'A0 & (~Neg | Neg['A1])
//│     'A1 <: 'a
//│     'A0 <: (Neg[in 'a out nothing] | ~Neg[?]) & 'a
//│     'E <: 'a

TestLang.eval(mk(0))
//│ int


