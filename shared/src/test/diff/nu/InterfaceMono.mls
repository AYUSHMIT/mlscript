:NewDefs
:NoJS

trait Showable {
    fun toString: string
}
//│ trait Showable() {
//│   fun toString: string
//│ }

:e
trait What0 extends woooo
//│ ╔══[ERROR] Could not find definition `woooo`
//│ ║  l.12: 	trait What0 extends woooo
//│ ╙──      	                    ^^^^^
//│ trait What0()

class Point(x: int, y: int) extends Showable {
    fun mlen = x + y
    fun toString = "I'm a point"
}
//│ class Point(x: int, y: int) {
//│   fun mlen: int
//│   fun toString: "I'm a point"
//│ }

class What1(toString: string) extends Showable
//│ class What1(toString: string)

:e
trait NoShow extends What1("hi")
//│ ╔══[ERROR] trait can only inherit from traits
//│ ║  l.31: 	trait NoShow extends What1("hi")
//│ ╙──      	                     ^^^^^^^^^^^
//│ trait NoShow()

:e
class ErrC1 extends Showable
class ErrC2 extends Showable {
    fun toString = 114
}
class ErrC3(toString: string -> string) extends Showable
//│ ╔══[ERROR] Member toString is declared in parent trait but not implemented
//│ ║  l.38: 	class ErrC1 extends Showable
//│ ╙──      	^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in definition of method toString:
//│ ║  l.40: 	    fun toString = 114
//│ ║        	        ^^^^^^^^^^^^^^
//│ ╟── integer literal of type `114` is not an instance of type `string`
//│ ║  l.40: 	    fun toString = 114
//│ ║        	                   ^^^
//│ ╟── but it flows into definition of method toString with expected type `string`
//│ ║  l.40: 	    fun toString = 114
//│ ║        	        ^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.5: 	    fun toString: string
//│ ║       	                  ^^^^^^
//│ ╟── from signature of member toString:
//│ ║  l.5: 	    fun toString: string
//│ ╙──     	        ^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in function type:
//│ ║  l.42: 	class ErrC3(toString: string -> string) extends Showable
//│ ║        	                      ^^^^^^^^^^^^^^^^
//│ ╟── type `string -> string` is not an instance of type `string`
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.5: 	    fun toString: string
//│ ║       	                  ^^^^^^
//│ ╟── from signature of member toString:
//│ ║  l.5: 	    fun toString: string
//│ ╙──     	        ^^^^^^^^^^^^^^^^
//│ class ErrC1()
//│ class ErrC2() {
//│   fun toString: 114
//│ }
//│ class ErrC3(toString: string -> string)

trait Stadt {
    let name: string
}
//│ trait Stadt() {
//│   let name: string
//│ }

trait RefinedStadt extends Stadt {
    let size: int
    fun foo: bool -> int
}
//│ trait RefinedStadt() {
//│   fun foo: bool -> int
//│   let name: string
//│   let size: int
//│ }

trait SizedStadt extends RefinedStadt {
    let size: 1 | 2 | 3
    fun bar: int -> int
}
//│ trait SizedStadt() {
//│   fun bar: int -> int
//│   fun foo: bool -> int
//│   let name: string
//│   let size: 1 | 2 | 3
//│ }

class Goodstatt(size: 1 | 2) extends RefinedStadt {
    let name = "good"
    fun bar(x) = x
    fun foo(t) = if t && true then this.size else 0
}
//│ class Goodstatt(size: 1 | 2) {
//│   fun bar: 'a -> 'a
//│   fun foo: bool -> (0 | 1 | 2)
//│   let name: "good"
//│ }

:e
class Errcity(size: int) extends SizedStadt {
    fun bar = "hahaha"
}
//│ ╔══[ERROR] Member name is declared in parent trait but not implemented
//│ ║  l.117: 	class Errcity(size: int) extends SizedStadt {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.118: 	    fun bar = "hahaha"
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.119: 	}
//│ ╙──       	^
//│ ╔══[ERROR] Member foo is declared in parent trait but not implemented
//│ ║  l.117: 	class Errcity(size: int) extends SizedStadt {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.118: 	    fun bar = "hahaha"
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.119: 	}
//│ ╙──       	^
//│ ╔══[ERROR] Type mismatch in type reference:
//│ ║  l.117: 	class Errcity(size: int) extends SizedStadt {
//│ ║         	                    ^^^
//│ ╟── type `int` does not match type `1 | 2 | 3`
//│ ╟── Note: constraint arises from union type:
//│ ║  l.95: 	    let size: 1 | 2 | 3
//│ ╙──      	              ^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in definition of method bar:
//│ ║  l.118: 	    fun bar = "hahaha"
//│ ║         	        ^^^^^^^^^^^^^^
//│ ╟── string literal of type `"hahaha"` is not a function
//│ ║  l.118: 	    fun bar = "hahaha"
//│ ║         	              ^^^^^^^^
//│ ╟── but it flows into definition of method bar with expected type `int -> int`
//│ ║  l.118: 	    fun bar = "hahaha"
//│ ║         	        ^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.96: 	    fun bar: int -> int
//│ ║        	             ^^^^^^^^^^
//│ ╟── from signature of member bar:
//│ ║  l.96: 	    fun bar: int -> int
//│ ╙──      	        ^^^^^^^^^^^^^^^
//│ class Errcity(size: int) {
//│   fun bar: "hahaha"
//│ }

module Omg extends Stadt {
    fun name = "omg!!!"
    fun cool(x) = x + x
}
//│ module Omg() {
//│   fun cool: int -> int
//│   fun name: "omg!!!"
//│ }

mixin More {
    fun more(x) = x == 1
    fun size = 1
    fun bar(x) = x
}
//│ mixin More() {
//│   fun bar: 'a -> 'a
//│   fun more: number -> bool
//│   fun size: 1
//│ }

mixin Fooo {
    fun foo(x) = 0
}
//│ mixin Fooo() {
//│   fun foo: anything -> 0
//│ }

class Grassberg(name: "grass" | "GRASS") extends More, SizedStadt, Fooo
//│ class Grassberg(name: "GRASS" | "grass") {
//│   fun bar: forall 'a. 'a -> 'a
//│   fun foo: anything -> 0
//│   fun more: number -> bool
//│   fun size: 1
//│ }

:e
class Dirtberg extends More, SizedStadt, Fooo {
    let name = "dirt"
    fun size = 4    // this should not check
}
//│ ╔══[ERROR] Type mismatch in definition of method size:
//│ ║  l.198: 	    fun size = 4    // this should not check
//│ ║         	        ^^^^^^^^
//│ ╟── integer literal of type `4` does not match type `1 | 2 | 3`
//│ ║  l.198: 	    fun size = 4    // this should not check
//│ ║         	               ^
//│ ╟── but it flows into definition of method size with expected type `1 | 2 | 3`
//│ ║  l.198: 	    fun size = 4    // this should not check
//│ ║         	        ^^^^^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.95: 	    let size: 1 | 2 | 3
//│ ╙──      	              ^^^^^^^^^
//│ class Dirtberg() {
//│   fun bar: forall 'a. 'a -> 'a
//│   fun foo: anything -> 0
//│   fun more: number -> bool
//│   let name: "dirt"
//│   fun size: 4
//│ }

class Iceburg(name: string) extends RefinedStadt, More, Fooo
//│ class Iceburg(name: string) {
//│   fun bar: forall 'a. 'a -> 'a
//│   fun foo: anything -> 0
//│   fun more: number -> bool
//│   fun size: 1
//│ }

class A { fun x: int = 1 }
//│ class A() {
//│   fun x: int
//│ }

:e
class B extends A { fun x = "A" }
//│ ╔══[ERROR] Type mismatch in definition of method x:
//│ ║  l.234: 	class B extends A { fun x = "A" }
//│ ║         	                        ^^^^^^^
//│ ╟── string literal of type `"A"` is not an instance of type `int`
//│ ║  l.234: 	class B extends A { fun x = "A" }
//│ ║         	                            ^^^
//│ ╟── but it flows into definition of method x with expected type `int`
//│ ║  l.234: 	class B extends A { fun x = "A" }
//│ ║         	                        ^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.228: 	class A { fun x: int = 1 }
//│ ║         	                 ^^^
//│ ╟── from definition of method x:
//│ ║  l.228: 	class A { fun x: int = 1 }
//│ ╙──       	              ^^^^^^^^^^
//│ class B() {
//│   fun x: "A"
//│ }

class C1[A] { fun a: A = a }
//│ class C1[A]() {
//│   fun a: A
//│ }

class C2 extends C1[int] { fun a = 1 }
//│ class C2() {
//│   fun a: 1
//│ }

// trait MyTrait[A] { type MyTrait#A = A; fun a: A = a }
// freshen/subst
// trait MyTrait[int] { type MyTrait#A = int; fun a: int = a }

trait MyTrait[A] { fun a: A }
//│ trait MyTrait[A]() {
//│   fun a: A
//│ }

// :ns
// :d
// :ds
class C extends MyTrait[int] { fun a = 1 }
//│ class C() {
//│   fun a: 1
//│ }

:e
class C extends MyTrait[int] { fun a = false }
//│ ╔══[ERROR] Type mismatch in definition of method a:
//│ ║  l.282: 	class C extends MyTrait[int] { fun a = false }
//│ ║         	                                   ^^^^^^^^^
//│ ╟── reference of type `false` is not an instance of type `int`
//│ ║  l.282: 	class C extends MyTrait[int] { fun a = false }
//│ ║         	                                       ^^^^^
//│ ╟── but it flows into definition of method a with expected type `int`
//│ ║  l.282: 	class C extends MyTrait[int] { fun a = false }
//│ ║         	                                   ^^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.282: 	class C extends MyTrait[int] { fun a = false }
//│ ║         	                        ^^^
//│ ╟── from signature of member a:
//│ ║  l.268: 	trait MyTrait[A] { fun a: A }
//│ ╙──       	                       ^^^^
//│ class C() {
//│   fun a: false
//│ }


trait T1 { 
    let foo : 1 | 2 | 3 
    fun bar : string | bool
}
trait T2 { 
    let foo : 2 | 3 | 4
    let bar : int | bool
}
//│ trait T1() {
//│   fun bar: bool | string
//│   let foo: 1 | 2 | 3
//│ }
//│ trait T2() {
//│   let bar: bool | int
//│   let foo: 2 | 3 | 4
//│ }

trait T4 extends T1, T2 {
    fun foo: 2
}
//│ trait T4() {
//│   fun bar: bool
//│   fun foo: 2
//│ }

class C1(foo: 2, bar: true) extends T4
//│ class C1(foo: 2, bar: true)

:e
class C3 extends T4{
    fun foo = 3
    fun bar = false
}
//│ ╔══[ERROR] Type mismatch in definition of method foo:
//│ ║  l.333: 	    fun foo = 3
//│ ║         	        ^^^^^^^
//│ ╟── integer literal of type `3` does not match type `2`
//│ ║  l.333: 	    fun foo = 3
//│ ║         	              ^
//│ ╟── but it flows into definition of method foo with expected type `2`
//│ ║  l.333: 	    fun foo = 3
//│ ║         	        ^^^^^^^
//│ ╟── Note: constraint arises from literal type:
//│ ║  l.321: 	    fun foo: 2
//│ ║         	             ^
//│ ╟── from signature of member foo:
//│ ║  l.321: 	    fun foo: 2
//│ ╙──       	        ^^^^^^
//│ class C3() {
//│   fun bar: false
//│   fun foo: 3
//│ }

:e
class C2(foo: int, bar: string) extends T4
//│ ╔══[ERROR] Type mismatch in type reference:
//│ ║  l.357: 	class C2(foo: int, bar: string) extends T4
//│ ║         	              ^^^
//│ ╟── type `int` does not match type `2`
//│ ╟── Note: constraint arises from literal type:
//│ ║  l.321: 	    fun foo: 2
//│ ║         	             ^
//│ ╟── from signature of member foo:
//│ ║  l.321: 	    fun foo: 2
//│ ╙──       	        ^^^^^^
//│ ╔══[ERROR] Type mismatch in type reference:
//│ ║  l.357: 	class C2(foo: int, bar: string) extends T4
//│ ║         	                        ^^^^^^
//│ ╟── type `string` does not match type `bool | int`
//│ ╟── Note: constraint arises from union type:
//│ ║  l.309: 	    let bar : int | bool
//│ ╙──       	              ^^^^^^^^^^
//│ class C2(foo: int, bar: string)

:e
trait T5 extends T4 {
    let foo: 4
}
//│ ╔══[ERROR] Type mismatch in literal type:
//│ ║  l.379: 	    let foo: 4
//│ ║         	             ^
//│ ╟── type `4` does not match type `2`
//│ ╟── Note: constraint arises from literal type:
//│ ║  l.321: 	    fun foo: 2
//│ ║         	             ^
//│ ╟── from signature of member foo:
//│ ║  l.321: 	    fun foo: 2
//│ ╙──       	        ^^^^^^
//│ trait T5() {
//│   fun bar: bool
//│   let foo: 4
//│ }

:e
trait T3 extends T1, T2 {
    let foo: true
}
//│ ╔══[ERROR] Type mismatch in type reference:
//│ ║  l.398: 	    let foo: true
//│ ║         	             ^^^^
//│ ╟── type `true` does not match type `1 | 2 | 3`
//│ ╟── Note: constraint arises from union type:
//│ ║  l.304: 	    let foo : 1 | 2 | 3 
//│ ╙──       	              ^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type reference:
//│ ║  l.398: 	    let foo: true
//│ ║         	             ^^^^
//│ ╟── type `true` does not match type `2 | 3 | 4`
//│ ╟── Note: constraint arises from union type:
//│ ║  l.308: 	    let foo : 2 | 3 | 4
//│ ╙──       	              ^^^^^^^^^
//│ trait T3() {
//│   fun bar: bool
//│   let foo: true
//│ }
