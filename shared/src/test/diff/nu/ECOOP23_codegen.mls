:NewParser
:NewDefs

class Add<E>(lhs: E, rhs: E)
class Lit(n: int)
//│ 
//│ class Add[E](lhs: E, rhs: E) {
//│ this: 'this
//│ }
//│ class Lit(n: int) {
//│ this: 'this0
//│ }
//│   where
//│     'this0 :> Lit
//│     'this :> Add

:js
mixin EvalBase {
  fun eval(e) =
    if e is
      Lit(n) then n: int
      Add(l, r) then this.eval(l) + this.eval(r)
}
//│ 
//│ mixin EvalBase() {
//│ super: 'super
//│ this: 'this
//│ fun eval: (Add & {Add#E = 'E} | Lit) -> int
//│ }
//│   where
//│     'E <: 'lhs
//│     'this <: {eval: 'lhs -> int}
//│ // Query 1
//│ globalThis.EvalBase = function EvalBase(base) {
//│   return (class EvalBase extends base {
//│     constructor(fields) {
//│       super(fields);
//│     }
//│     eval(e) {
//│       const self = this;
//│       return ((() => {
//│         let a;
//│         return (a = e, a instanceof Lit ? ((n) => n)(e.n) : a instanceof Add ? ((l) => ((r) => self.eval(l) + self.eval(r))(e.rhs))(e.lhs) : (() => {
//│           throw new Error("non-exhaustive case expression");
//│         })());
//│       })());
//│     }
//│   });
//│ };
//│ // End of generated code

class Neg<A>(expr: A)
//│ 
//│ class Neg[A](expr: A) {
//│ this: 'this
//│ }
//│   where
//│     'this :> Neg

:js
mixin EvalNeg {
  fun eval(e) =
    if e is Neg(d) then 0 - this.eval(d)
    else super.eval(e)
}
//│ 
//│ mixin EvalNeg() {
//│ super: 'super
//│ this: 'this
//│ fun eval: (Neg & {Neg#A = 'A} | 'a & ~Neg) -> (int | 'b)
//│ }
//│   where
//│     'A <: 'expr
//│     'this <: {eval: 'expr -> int}
//│     'super <: {eval: 'a -> 'b}
//│ // Query 1
//│ globalThis.EvalNeg = function EvalNeg(base) {
//│   return (class EvalNeg extends base {
//│     constructor(fields) {
//│       super(fields);
//│     }
//│     eval(e) {
//│       const self = this;
//│       return ((() => {
//│         return e instanceof Neg ? ((d) => 0 - self.eval(d))(e.expr) : super.eval(e);
//│       })());
//│     }
//│   });
//│ };
//│ // End of generated code

:js
mixin EvalNegNeg {
  fun eval(e) =
    if e is Neg(Neg(d)) then this.eval(d)
    else super.eval(e)
}
//│ 
//│ mixin EvalNegNeg() {
//│ super: 'super
//│ this: 'this
//│ fun eval: (Neg & {Neg#A = 'A} | 'a & ~Neg) -> 'b
//│ }
//│   where
//│     'A :> 'A0
//│        <: 'A1 & (~Neg | Neg & {Neg#A = 'A2})
//│     'A2 :> 'A3
//│         <: 'expr
//│     'this <: {eval: 'expr -> 'b}
//│     'super <: {eval: (Neg & {Neg#A :> 'A0 & (~Neg | Neg & {Neg#A :> 'expr <: 'expr & 'A3}) <: 'A0 | 'A1} | 'a) -> 'b}
//│ // Query 1
//│ globalThis.EvalNegNeg = function EvalNegNeg(base) {
//│   return (class EvalNegNeg extends base {
//│     constructor(fields) {
//│       super(fields);
//│     }
//│     eval(e) {
//│       const self = this;
//│       return ((() => {
//│         return e instanceof Neg ? ((tmp0) => tmp0 instanceof Neg ? ((d) => self.eval(d))(tmp0.expr) : super.eval(e))(e.expr) : super.eval(e);
//│       })());
//│     }
//│   });
//│ };
//│ // End of generated code

:js
module TestLang: EvalBase, EvalNeg, EvalNegNeg
//│ 
//│ namespace TestLang() {
//│ this: 'this
//│ fun eval: 'a -> int
//│ }
//│   where
//│     'a <: Add & {Add#E = 'E} | Lit | Neg & {Neg#A = 'A}
//│     'A :> 'A0
//│        <: 'A0 & (~Neg | Neg & {Neg#A = 'A1})
//│     'A0 <: (Neg & {Neg#A :> 'A2 <: 'A1} | ~Neg) & 'a
//│     'A1 <: 'A2
//│     'A2 <: 'a
//│     'E <: 'a
//│     'this :> TestLang
//│ Code generation crashed:
//│   scala.NotImplementedError: an implementation is missing


:js
fun mk(n) = if n is
  0 then Lit(0)
  1 then Neg(mk(n))
  _ then Add(mk(n), mk(n))
TestLang.eval(mk(0))
//│ 
//│ fun mk: number -> (Lit | 'a)
//│ int
//│   where
//│     'a :> Neg & {Neg#A = 'A} | Add & {Add#E = 'E}
//│     'E :> 'E0 | Lit | 'a
//│        <: 'E1
//│     'A :> 'A0 | Lit | 'a
//│        <: 'A1
//│     'A0 :> Lit | 'b
//│         <: 'A2 & 'c & (Neg & {Neg#A = 'A0} | ~Neg)
//│     'b :> Neg & {Neg#A :> 'A0 <: 'A1} | Add & {Add#E :> 'E0 <: 'E1}
//│     'E1 :> 'E0 | Lit | 'b
//│         <: 'E0
//│     'A1 :> 'A0 | Lit | 'b
//│         <: 'A0 & 'A2
//│     'A2 :> 'A0 | Lit | 'b
//│         <: 'A0 & 'c & (~Neg | Neg & {Neg#A = 'A2})
//│     'c <: Add & {Add#E = 'E0} | Lit | Neg & {Neg#A = 'A2}
//│     'E0 :> Lit | 'b
//│         <: 'c
//│ Typed: int
//│ Code generation encountered an error:
//│   unresolved symbol TestLang
