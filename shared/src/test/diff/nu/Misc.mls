:NewDefs


1
//│ 1
//│ res
//│     = 1

2 + 2
//│ Int
//│ res
//│     = 4

let r = { x: 1 }
//│ let r: {x: 1}
//│ r
//│   = { x: 1 }

r.x + 1
//│ Int
//│ res
//│     = 2


x => x + 1
//│ Int -> Int
//│ res
//│     = [Function: res]

{ y } => y
//│ forall 'a. {y: 'a} -> 'a
//│ res
//│     = [Function: res]

fun f({ y }) = y
//│ fun f: forall 'a. {y: 'a} -> 'a

fun f of { y } = y
//│ fun f: forall 'a. {y: 'a} -> 'a

f({y: 1})
//│ 1
//│ res
//│     = 1


fun f of x, y = x + y
//│ fun f: (Int, Int) -> Int

f of 1, 2
//│ Int
//│ res
//│     = 3


fun f of [x, y] = x + y
//│ fun f: ([Int, Int]) -> Int

f of [1, 2]
//│ Int
//│ res
//│     = 3


let f = (x, y) => x + y
//│ let f: (Int, Int) -> Int
//│ f
//│   = [Function: f4]

f(1, 2)
//│ Int
//│ res
//│     = 3

:e
f([1, 2])
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.76: 	f([1, 2])
//│ ║        	^^^^^^^^^
//│ ╟── argument of type `[[1, 2]]` does not match type `[?a, ?b]`
//│ ║  l.76: 	f([1, 2])
//│ ║        	 ^^^^^^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.65: 	let f = (x, y) => x + y
//│ ╙──      	         ^^^^
//│ Int | error
//│ res
//│     = '1,2undefined'



:pe
let f = ((x, y)) => x + y
//│ ╔══[PARSE ERROR] Expected '=>' or '->' after this parameter section
//│ ║  l.93: 	let f = ((x, y)) => x + y
//│ ╙──      	         ^^^^^^
//│ let f: (Int, Int) -> Int
//│ f
//│   = [Function: f5]

f(1, 2)
//│ Int
//│ res
//│     = 3

:pe
:e
f((1, 2))
//│ ╔══[PARSE ERROR] Expected '=>' or '->' after this parameter section
//│ ║  l.108: 	f((1, 2))
//│ ╙──       	  ^^^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.108: 	f((1, 2))
//│ ║         	^^^^^^^^^
//│ ╟── argument of type `[[1, 2]]` does not match type `[?a, ?b]`
//│ ║  l.108: 	f((1, 2))
//│ ║         	 ^^^^^^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.93: 	let f = ((x, y)) => x + y
//│ ╙──      	         ^^^^^^
//│ Int | error
//│ res
//│     = '1,2undefined'

:e
f([1, 2])
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.126: 	f([1, 2])
//│ ║         	^^^^^^^^^
//│ ╟── argument of type `[[1, 2]]` does not match type `[?a, ?b]`
//│ ║  l.126: 	f([1, 2])
//│ ║         	 ^^^^^^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.93: 	let f = ((x, y)) => x + y
//│ ╙──      	         ^^^^^^
//│ Int | error
//│ res
//│     = '1,2undefined'

:e
f[1, 2]
//│ ╔══[ERROR] Type application syntax is not yet supported
//│ ║  l.141: 	f[1, 2]
//│ ╙──       	^^^^^^^
//│ (Int, Int) -> Int
//│ res
//│     = [Function: f5]


:pe
let f = (((x, y))) => x + y
//│ ╔══[PARSE ERROR] Expected '=>' or '->' after this parameter section
//│ ║  l.151: 	let f = (((x, y))) => x + y
//│ ╙──       	          ^^^^^^
//│ let f: ([Int, Int]) -> Int
//│ f
//│   = [Function: f6]


// * TODO maybe parse as type lambda?
let f = [x, y] => x + y
//│ let f: (Int, Int) -> Int
//│ f
//│   = [Function: f7]

// :e // TODO
f(1, 2)
//│ Int
//│ res
//│     = 3

:e
f([1, 2])
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.173: 	f([1, 2])
//│ ║         	^^^^^^^^^
//│ ╟── argument of type `[[1, 2]]` does not match type `[?a, ?b]`
//│ ║  l.173: 	f([1, 2])
//│ ║         	 ^^^^^^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.161: 	let f = [x, y] => x + y
//│ ╙──       	         ^^^^
//│ Int | error
//│ res
//│     = '1,2undefined'


let f = ([x, y]) => x + y
//│ let f: ([Int, Int]) -> Int
//│ f
//│   = [Function: f8]

f([1, 2])
//│ Int
//│ res
//│     = 3

:e
f(1, 2)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.199: 	f(1, 2)
//│ ║         	^^^^^^^
//│ ╟── argument list of type `[1, 2]` does not match type `[[?a, ?b]]`
//│ ║  l.199: 	f(1, 2)
//│ ╙──       	 ^^^^^^
//│ Int | error
//│ res
//│ Runtime error:
//│   TypeError: number 1 is not iterable (cannot read property Symbol(Symbol.iterator))


let f = [[[x, y]]] => x + y
//│ let f: ([[Int, Int]]) -> Int
//│ f
//│   = [Function: f9]

f([[1, 2]])
//│ Int
//│ res
//│     = 3

