:NewDefs


fun (>>) compose(f, g) = x => g(f(x))
//│ fun (>>) compose: forall 'a 'b 'c. ('a -> 'b, 'b -> 'c) -> 'a -> 'c

:js 
let r = succ >> succ
//│ let r: Int -> Int
//│ // Prelude
//│ function succ(x) {
//│   return x + 1;
//│ }
//│ class TypingUnit1 {}
//│ const typing_unit1 = new TypingUnit1;
//│ // Query 1
//│ globalThis.r = compose(succ, succ);
//│ // End of generated code
//│ r
//│   = [Function (anonymous)]

r(3)
//│ Int
//│ res
//│     = 5

compose(succ, succ)(3)
//│ Int
//│ res
//│     = 5

(succ >> succ)(3)
//│ Int
//│ res
//│     = 5

(succ >> succ) of 3
//│ Int
//│ res
//│     = 5

// * Note the high left-precedence of `of`
:e
succ >> succ of 3
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.44: 	succ >> succ of 3
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Int` is not a function
//│ ║  l.44: 	succ >> succ of 3
//│ ║        	        ^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.4: 	fun (>>) compose(f, g) = x => g(f(x))
//│ ║       	                              ^^^^^^^
//│ ╟── from reference:
//│ ║  l.4: 	fun (>>) compose(f, g) = x => g(f(x))
//│ ╙──     	                              ^
//│ error | Int -> Int
//│ res
//│     = [Function (anonymous)]

:js
let f = (>>)
//│ let f: forall 'a 'b. ((3 | 'a) -> Int, Int -> 'b) -> (Int & 'a) -> (Int | 'b)
//│ // Prelude
//│ class TypingUnit7 {}
//│ const typing_unit7 = new TypingUnit7;
//│ // Query 1
//│ globalThis.f = compose;
//│ // End of generated code
//│ f
//│   = [Function: compose]

f(succ, succ)(3)
//│ Int
//│ res
//│     = 5

(>>)(succ, succ)(3)
//│ Int
//│ res
//│     = 5

(>>) of succ, succ
//│ Int -> Int
//│ res
//│     = [Function (anonymous)]

((>>) of succ, succ) of 3
//│ Int
//│ res
//│     = 5

:e // TODO parse this differently?
(>>) of succ, succ
  of 3
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.94: 	(>>) of succ, succ
//│ ║        	 ^^^^^^^^^^^^^^^^^
//│ ║  l.95: 	  of 3
//│ ║        	^^^^^^
//│ ╟── application of type `Int` is not a function
//│ ║  l.94: 	(>>) of succ, succ
//│ ║        	              ^^^^
//│ ║  l.95: 	  of 3
//│ ║        	^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.4: 	fun (>>) compose(f, g) = x => g(f(x))
//│ ║       	                              ^^^^^^^
//│ ╟── from reference:
//│ ║  l.4: 	fun (>>) compose(f, g) = x => g(f(x))
//│ ╙──     	                              ^
//│ error | Int -> Int
//│ res
//│     = [Function (anonymous)]


:ge // TODO support this syntax for builtin operators
fun oops = (+)
//│ fun oops: (Int, Int) -> Int
//│ Code generation encountered an error:
//│   unresolved symbol +


fun (%) mod = div
//│ fun (%) mod: (Int, Int) -> Int

// TODO builtin `div` should compute *integer* division
12 % 5
//│ Int
//│ res
//│     = 2.4



// TODO support code-gen for non-top-level operator definitions
module Nested {
  fun (++) conc(a, b) = concat(a)(b)
  log("abc" ++ "def")
}
//│ module Nested {
//│   fun (++) conc: (Str, Str) -> Str
//│ }
//│ Code generation encountered an error:
//│   unresolved symbol ++

// TODO
abstract class Nested {
  fun (++) conc: (Int, Int) -> Int
  log("abc" ++ "def")
}
//│ ╔══[ERROR] identifier not found: ++
//│ ║  l.149: 	  log("abc" ++ "def")
//│ ╙──       	            ^^
//│ abstract class Nested {
//│   fun (++) conc: (Int, Int) -> Int
//│ }
//│ Code generation encountered an error:
//│   unresolved symbol ++



fun (??) oops: (Int, Int) => Int
//│ fun (??) oops: (Int, Int) -> Int

1 ?? 2
//│ Int
//│ res
//│     = <no result>
//│       ?? is not implemented

fun (??) oops: (Int, Int) => Int
fun oops(a, b) = a + b
//│ fun oops: (Int, Int) -> Int
//│ fun (??) oops: (Int, Int) -> Int

// FIXME-later (stub symbols) This is actually implemented...
1 ?? 2
//│ Int
//│ res
//│     = <no result>
//│       ?? is not implemented

fun oops: (Int, Int) => Int
fun (??) oops(a, b) = a + b
//│ fun (??) oops: (Int, Int) -> Int
//│ fun oops: (Int, Int) -> Int

1 ?? 2
//│ Int
//│ res
//│     = 3

fun (!?) oops: (Int, Int) => Int
fun (??) oops(a, b) = a + b
//│ fun (??) oops: (Int, Int) -> Int
//│ fun (!?) oops: (Int, Int) -> Int

1 ?? 2
//│ Int
//│ res
//│     = 3

1 !? 2
//│ Int
//│ res
//│     = <no result>
//│       !? is not implemented



// * Note: some misformed definitions

:pe
:e
fun (>>)(f, g) = x => g(f(x))
//│ ╔══[PARSE ERROR] Expected a function name; found parenthesis section instead
//│ ║  l.215: 	fun (>>)(f, g) = x => g(f(x))
//│ ╙──       	        ^^^^^^
//│ ╔══[ERROR] identifier not found: g
//│ ║  l.215: 	fun (>>)(f, g) = x => g(f(x))
//│ ╙──       	                      ^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.215: 	fun (>>)(f, g) = x => g(f(x))
//│ ║         	                        ^^^^
//│ ╟── argument of type `[?a]` does not match type `[?b, ?c]`
//│ ║  l.215: 	fun (>>)(f, g) = x => g(f(x))
//│ ║         	                         ^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.4: 	fun (>>) compose(f, g) = x => g(f(x))
//│ ╙──     	                ^^^^^^
//│ fun (>>) <error>: anything -> error
//│ Code generation encountered an error:
//│   unresolved symbol g

:pe
fun compose(>>)(f, g) = x => g(f(x))
//│ ╔══[PARSE ERROR] Unexpected operator here
//│ ║  l.236: 	fun compose(>>)(f, g) = x => g(f(x))
//│ ╙──       	            ^^
//│ fun compose: forall 'a 'b 'c. () -> ('a -> 'b, 'b -> 'c) -> 'a -> 'c



