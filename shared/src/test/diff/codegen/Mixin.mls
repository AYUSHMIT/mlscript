:NewParser
:NewDefs

:js
:ShowRepl
class Add<E>(lhs: E, rhs: E)
class Lit(n: int)
//│ class Add[E](lhs: E, rhs: E)
//│ class Lit(n: int)
//│ // Prelude
//│ let res;
//│ let typing_unit = {
//│   cache: {},
//│   get Add() {
//│     if (this.cache.Add === undefined) {
//│       class Add {
//│         constructor(lhs, rhs) {
//│           this.lhs = lhs;
//│           this.rhs = rhs;
//│         }
//│       };
//│       this.cache.Add = ((lhs, rhs) => new Add(lhs, rhs));
//│       this.cache.Add["class"] = Add;
//│     }
//│     return this.cache.Add;
//│   },
//│   get Lit() {
//│     if (this.cache.Lit === undefined) {
//│       class Lit {
//│         constructor(n) {
//│           this.n = n;
//│         }
//│       };
//│       this.cache.Lit = ((n) => new Lit(n));
//│       this.cache.Lit["class"] = Lit;
//│     }
//│     return this.cache.Lit;
//│   }
//│ };
//│ globalThis.Add = typing_unit.Add;
//│ globalThis.Lit = typing_unit.Lit;
//│ // End of generated code
//│ ┌ Block at Mixin.mls:6
//│ ├─┬ Prelude
//│ │ ├── Code
//│ │ │   let res;
//│ │ │   let typing_unit = {
//│ │ │     cache: {},
//│ │ │     get Add() {
//│ │ │       if (this.cache.Add === undefined) {
//│ │ │         class Add {
//│ │ │           constructor(lhs, rhs) {
//│ │ │             this.lhs = lhs;
//│ │ │             this.rhs = rhs;
//│ │ │           }
//│ │ │         };
//│ │ │         this.cache.Add = ((lhs, rhs) => new Add(lhs, rhs));
//│ │ │         this.cache.Add["class"] = Add;
//│ │ │       }
//│ │ │       return this.cache.Add;
//│ │ │     },
//│ │ │     get Lit() {
//│ │ │       if (this.cache.Lit === undefined) {
//│ │ │         class Lit {
//│ │ │           constructor(n) {
//│ │ │             this.n = n;
//│ │ │           }
//│ │ │         };
//│ │ │         this.cache.Lit = ((n) => new Lit(n));
//│ │ │         this.cache.Lit["class"] = Lit;
//│ │ │       }
//│ │ │       return this.cache.Lit;
//│ │ │     }
//│ │ │   };
//│ │ │   globalThis.Add = typing_unit.Add;
//│ │ │   globalThis.Lit = typing_unit.Lit;
//│ │ └── Reply
//│ │     [Function (anonymous)] { class: [class Lit] }
//│ └── No queries

:js
:ShowRepl
mixin EvalBase {
  fun eval(e) =
    if e is
      Lit(n) then n: int
      Add(l, r) then this.eval(l) + this.eval(r)
}
//│ mixin EvalBase() {
//│   this: {eval: 'lhs -> int}
//│   fun eval: (Add['lhs] | Lit) -> int
//│ }
//│ // Prelude
//│ let typing_unit1 = {
//│   cache: {},
//│   EvalBase(base) {
//│     if (base === undefined) {
//│       return (class EvalBase {
//│         constructor() {
//│         }
//│         eval(e) {
//│           const self = this;
//│           return ((() => {
//│             let a;
//│             return (a = e, a instanceof Lit["class"] ? ((n) => n)(e.n) : a instanceof Add["class"] ? ((l) => ((r) => self.eval(l) + self.eval(r))(e.rhs))(e.lhs) : (() => {
//│               throw new Error("non-exhaustive case expression");
//│             })());
//│           })());
//│         }
//│       });
//│     } else {
//│       return (class EvalBase extends base {
//│         constructor(...rest) {
//│           super(...rest);
//│         }
//│         eval(e) {
//│           const self = this;
//│           return ((() => {
//│             let a;
//│             return (a = e, a instanceof Lit["class"] ? ((n) => n)(e.n) : a instanceof Add["class"] ? ((l) => ((r) => self.eval(l) + self.eval(r))(e.rhs))(e.lhs) : (() => {
//│               throw new Error("non-exhaustive case expression");
//│             })());
//│           })());
//│         }
//│       });
//│     }
//│   }
//│ };
//│ globalThis.EvalBase = typing_unit1.EvalBase;
//│ // End of generated code
//│ ┌ Block at Mixin.mls:83
//│ ├─┬ Prelude
//│ │ ├── Code
//│ │ │   let typing_unit1 = {
//│ │ │     cache: {},
//│ │ │     EvalBase(base) {
//│ │ │       if (base === undefined) {
//│ │ │         return (class EvalBase {
//│ │ │           constructor() {
//│ │ │           }
//│ │ │           eval(e) {
//│ │ │             const self = this;
//│ │ │             return ((() => {
//│ │ │               let a;
//│ │ │               return (a = e, a instanceof Lit["class"] ? ((n) => n)(e.n) : a instanceof Add["class"] ? ((l) => ((r) => self.eval(l) + self.eval(r))(e.rhs))(e.lhs) : (() => {
//│ │ │                 throw new Error("non-exhaustive case expression");
//│ │ │               })());
//│ │ │             })());
//│ │ │           }
//│ │ │         });
//│ │ │       } else {
//│ │ │         return (class EvalBase extends base {
//│ │ │           constructor(...rest) {
//│ │ │             super(...rest);
//│ │ │           }
//│ │ │           eval(e) {
//│ │ │             const self = this;
//│ │ │             return ((() => {
//│ │ │               let a;
//│ │ │               return (a = e, a instanceof Lit["class"] ? ((n) => n)(e.n) : a instanceof Add["class"] ? ((l) => ((r) => self.eval(l) + self.eval(r))(e.rhs))(e.lhs) : (() => {
//│ │ │                 throw new Error("non-exhaustive case expression");
//│ │ │               })());
//│ │ │             })());
//│ │ │           }
//│ │ │         });
//│ │ │       }
//│ │ │     }
//│ │ │   };
//│ │ │   globalThis.EvalBase = typing_unit1.EvalBase;
//│ │ └── Reply
//│ │     [Function: EvalBase]
//│ └── No queries

:js
:ShowRepl
class Neg<A>(expr: A)
//│ class Neg[A](expr: A)
//│ // Prelude
//│ let typing_unit2 = {
//│   cache: {},
//│   get Neg() {
//│     if (this.cache.Neg === undefined) {
//│       class Neg {
//│         constructor(expr) {
//│           this.expr = expr;
//│         }
//│       };
//│       this.cache.Neg = ((expr) => new Neg(expr));
//│       this.cache.Neg["class"] = Neg;
//│     }
//│     return this.cache.Neg;
//│   }
//│ };
//│ globalThis.Neg = typing_unit2.Neg;
//│ // End of generated code
//│ ┌ Block at Mixin.mls:176
//│ ├─┬ Prelude
//│ │ ├── Code
//│ │ │   let typing_unit2 = {
//│ │ │     cache: {},
//│ │ │     get Neg() {
//│ │ │       if (this.cache.Neg === undefined) {
//│ │ │         class Neg {
//│ │ │           constructor(expr) {
//│ │ │             this.expr = expr;
//│ │ │           }
//│ │ │         };
//│ │ │         this.cache.Neg = ((expr) => new Neg(expr));
//│ │ │         this.cache.Neg["class"] = Neg;
//│ │ │       }
//│ │ │       return this.cache.Neg;
//│ │ │     }
//│ │ │   };
//│ │ │   globalThis.Neg = typing_unit2.Neg;
//│ │ └── Reply
//│ │     [Function (anonymous)] { class: [class Neg] }
//│ └── No queries

:js
:ShowRepl
mixin EvalNeg {
  fun eval(e) =
    if e is Neg(d) then 0 - this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNeg() {
//│   super: {eval: 'a -> 'b}
//│   this: {eval: 'expr -> int}
//│   fun eval: (Neg['expr] | 'a & ~Neg) -> (int | 'b)
//│ }
//│ // Prelude
//│ let typing_unit3 = {
//│   cache: {},
//│   EvalNeg(base) {
//│     if (base === undefined) {
//│       return (class EvalNeg {
//│         constructor() {
//│         }
//│         eval(e) {
//│           const self = this;
//│           return ((() => {
//│             return e instanceof Neg["class"] ? ((d) => 0 - self.eval(d))(e.expr) : super.eval(e);
//│           })());
//│         }
//│       });
//│     } else {
//│       return (class EvalNeg extends base {
//│         constructor(...rest) {
//│           super(...rest);
//│         }
//│         eval(e) {
//│           const self = this;
//│           return ((() => {
//│             return e instanceof Neg["class"] ? ((d) => 0 - self.eval(d))(e.expr) : super.eval(e);
//│           })());
//│         }
//│       });
//│     }
//│   }
//│ };
//│ globalThis.EvalNeg = typing_unit3.EvalNeg;
//│ // End of generated code
//│ ┌ Block at Mixin.mls:221
//│ ├─┬ Prelude
//│ │ ├── Code
//│ │ │   let typing_unit3 = {
//│ │ │     cache: {},
//│ │ │     EvalNeg(base) {
//│ │ │       if (base === undefined) {
//│ │ │         return (class EvalNeg {
//│ │ │           constructor() {
//│ │ │           }
//│ │ │           eval(e) {
//│ │ │             const self = this;
//│ │ │             return ((() => {
//│ │ │               return e instanceof Neg["class"] ? ((d) => 0 - self.eval(d))(e.expr) : super.eval(e);
//│ │ │             })());
//│ │ │           }
//│ │ │         });
//│ │ │       } else {
//│ │ │         return (class EvalNeg extends base {
//│ │ │           constructor(...rest) {
//│ │ │             super(...rest);
//│ │ │           }
//│ │ │           eval(e) {
//│ │ │             const self = this;
//│ │ │             return ((() => {
//│ │ │               return e instanceof Neg["class"] ? ((d) => 0 - self.eval(d))(e.expr) : super.eval(e);
//│ │ │             })());
//│ │ │           }
//│ │ │         });
//│ │ │       }
//│ │ │     }
//│ │ │   };
//│ │ │   globalThis.EvalNeg = typing_unit3.EvalNeg;
//│ │ └── Reply
//│ │     [Function: EvalNeg]
//│ └── No queries

:js
:ShowRepl
mixin EvalNegNeg {
  fun eval(e) =
    if e is Neg(Neg(d)) then this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNegNeg() {
//│   super: {eval: (Neg['A] | 'a) -> 'b}
//│   this: {eval: 'expr -> 'b}
//│   fun eval: (Neg['A & (~Neg | Neg['expr])] | 'a & ~Neg) -> 'b
//│ }
//│ // Prelude
//│ let typing_unit4 = {
//│   cache: {},
//│   EvalNegNeg(base) {
//│     if (base === undefined) {
//│       return (class EvalNegNeg {
//│         constructor() {
//│         }
//│         eval(e) {
//│           const self = this;
//│           return ((() => {
//│             return e instanceof Neg["class"] ? ((tmp0) => tmp0 instanceof Neg["class"] ? ((d) => self.eval(d))(tmp0.expr) : super.eval(e))(e.expr) : super.eval(e);
//│           })());
//│         }
//│       });
//│     } else {
//│       return (class EvalNegNeg extends base {
//│         constructor(...rest) {
//│           super(...rest);
//│         }
//│         eval(e) {
//│           const self = this;
//│           return ((() => {
//│             return e instanceof Neg["class"] ? ((tmp0) => tmp0 instanceof Neg["class"] ? ((d) => self.eval(d))(tmp0.expr) : super.eval(e))(e.expr) : super.eval(e);
//│           })());
//│         }
//│       });
//│     }
//│   }
//│ };
//│ globalThis.EvalNegNeg = typing_unit4.EvalNegNeg;
//│ // End of generated code
//│ ┌ Block at Mixin.mls:302
//│ ├─┬ Prelude
//│ │ ├── Code
//│ │ │   let typing_unit4 = {
//│ │ │     cache: {},
//│ │ │     EvalNegNeg(base) {
//│ │ │       if (base === undefined) {
//│ │ │         return (class EvalNegNeg {
//│ │ │           constructor() {
//│ │ │           }
//│ │ │           eval(e) {
//│ │ │             const self = this;
//│ │ │             return ((() => {
//│ │ │               return e instanceof Neg["class"] ? ((tmp0) => tmp0 instanceof Neg["class"] ? ((d) => self.eval(d))(tmp0.expr) : super.eval(e))(e.expr) : super.eval(e);
//│ │ │             })());
//│ │ │           }
//│ │ │         });
//│ │ │       } else {
//│ │ │         return (class EvalNegNeg extends base {
//│ │ │           constructor(...rest) {
//│ │ │             super(...rest);
//│ │ │           }
//│ │ │           eval(e) {
//│ │ │             const self = this;
//│ │ │             return ((() => {
//│ │ │               return e instanceof Neg["class"] ? ((tmp0) => tmp0 instanceof Neg["class"] ? ((d) => self.eval(d))(tmp0.expr) : super.eval(e))(e.expr) : super.eval(e);
//│ │ │             })());
//│ │ │           }
//│ │ │         });
//│ │ │       }
//│ │ │     }
//│ │ │   };
//│ │ │   globalThis.EvalNegNeg = typing_unit4.EvalNegNeg;
//│ │ └── Reply
//│ │     [Function: EvalNegNeg]
//│ └── No queries

:js
:ShowRepl
module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ module TestLang() {
//│   fun eval: 'a -> int
//│ }
//│ where
//│   'a <: Add['a] | Lit | Neg['A & (~Neg | Neg['a])]
//│   'A <: 'a
//│ // Prelude
//│ let typing_unit5 = {
//│   cache: {},
//│   get TestLang() {
//│     if (this.cache.TestLang === undefined) {
//│       class TestLang extends EvalNegNeg(EvalNeg(EvalBase())) {
//│         constructor(...rest) {
//│           super(...rest);
//│         }
//│       }
//│       this.cache.TestLang = new TestLang();
//│       this.cache.TestLang["class"] = TestLang;
//│     }
//│     return this.cache.TestLang;
//│   }
//│ };
//│ globalThis.TestLang = typing_unit5.TestLang;
//│ // End of generated code
//│ ┌ Block at Mixin.mls:383
//│ ├─┬ Prelude
//│ │ ├── Code
//│ │ │   let typing_unit5 = {
//│ │ │     cache: {},
//│ │ │     get TestLang() {
//│ │ │       if (this.cache.TestLang === undefined) {
//│ │ │         class TestLang extends EvalNegNeg(EvalNeg(EvalBase())) {
//│ │ │           constructor(...rest) {
//│ │ │             super(...rest);
//│ │ │           }
//│ │ │         }
//│ │ │         this.cache.TestLang = new TestLang();
//│ │ │         this.cache.TestLang["class"] = TestLang;
//│ │ │       }
//│ │ │       return this.cache.TestLang;
//│ │ │     }
//│ │ │   };
//│ │ │   globalThis.TestLang = typing_unit5.TestLang;
//│ │ └── Reply
//│ │     TestLang { class: [Function: TestLang] }
//│ └── No queries

:js
:ShowRepl
fun mk(n) = if n is
  0 then Lit(0)
  1 then Neg(mk(n))
  _ then Add(mk(n), mk(n))
TestLang.eval(mk(0))
//│ fun mk: number -> (Lit | 'a)
//│ int
//│ where
//│   'a :> Neg[Lit | 'a] | Add[Lit | 'a]
//│ // Prelude
//│ let typing_unit6 = { cache: {} };
//│ // Query 1
//│ globalThis.mk = function mk(n) {
//│   return n == 0 === true ? Lit(0) : n == 1 === true ? Neg(mk(n)) : Add(mk(n), mk(n));
//│ };
//│ // Query 2
//│ res = TestLang.eval(mk(0));
//│ // End of generated code
//│ ┌ Block at Mixin.mls:433
//│ ├─┬ Prelude
//│ │ ├── Code
//│ │ │   let typing_unit6 = { cache: {} };
//│ │ └── Reply
//│ │     undefined
//│ ├─┬ Query 1/2
//│ │ ├── Prelude: <empty>
//│ │ ├── Code:
//│ │ ├──   globalThis.mk = function mk(n) {
//│ │ ├──     return n == 0 === true ? Lit(0) : n == 1 === true ? Neg(mk(n)) : Add(mk(n), mk(n));
//│ │ ├──   };
//│ │ ├── Intermediate: [Function: mk]
//│ │ └── Reply: [success] [Function: mk]
//│ └─┬ Query 2/2
//│   ├── Prelude: <empty>
//│   ├── Code:
//│   ├──   res = TestLang.eval(mk(0));
//│   ├── Intermediate: 0
//│   └── Reply: [success] 0
//│ res
//│     = [Function: mk]


class Foo(x: int)
//│ class Foo(x: int)


:e
class Bar(x: int, y: int) extends Foo(x + y)
//│ ╔══[ERROR] Unsupported parent specification
//│ ║  l.480: 	class Bar(x: int, y: int) extends Foo(x + y)
//│ ╙──       	                                  ^^^^^^^^^^
//│ class Bar(x: int, y: int)


mixin AA(a: int) {
}
//│ mixin AA()

mixin BB {}
//│ mixin BB()


class C(x: int) extends BB
//│ class C(x: int)

:e
class D(x: int) extends AA(x)
//│ ╔══[ERROR] Unsupported parent specification
//│ ║  l.499: 	class D(x: int) extends AA(x)
//│ ╙──       	                        ^^^^^
//│ class D(x: int)

:e
class E(x: int) extends BB, AA(x)
//│ ╔══[ERROR] Unsupported parent specification
//│ ║  l.506: 	class E(x: int) extends BB, AA(x)
//│ ╙──       	                            ^^^^^
//│ class E(x: int)

