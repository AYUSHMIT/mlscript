

def z: (('a -> 'b) -> (('a -> 'b) & 'c)) -> 'c
//│ z: (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = <missing implementation>

:e
def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ((anything -> nothing) -> anything) -> error
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.9: 	  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ║       	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. (α48_63'' -> α57_67'')›  <:  α48_74'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. (α48_63'' -> α57_67'')›  <:  α48_63''
//│  = [Function: z]

def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v))!)
//│ (('a -> 'b) -> ('c -> 'd & 'a -> 'b) & ('c -> 'd) -> 'e) -> 'e
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = [Function: z1]


def pow1 = z (fun pow0 -> fun n -> fun x ->
    if n > 0 then pow0 (n - 1) x * x
    else 1
  )
//│ pow1: int -> int -> int
//│     = [Function: pow1]

pow1 3 4
//│ res: int
//│    = 64


:e
z (fun self -> 1)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.42: 	z (fun self -> 1)
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `1` is not a function
//│ ║  l.42: 	z (fun self -> 1)
//│ ║        	               ^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.3: 	def z: (('a -> 'b) -> (('a -> 'b) & 'c)) -> 'c
//│ ║       	                       ^^^^^^^^^^
//│ ╟── from intersection type:
//│ ║  l.3: 	def z: (('a -> 'b) -> (('a -> 'b) & 'c)) -> 'c
//│ ╙──     	                      ^^^^^^^^^^^^^^^^^
//│ res: error
//│    = 1


zid = z (fun self -> id)
//│ zid: 'a -> 'a
//│    = [Function: id]

zid 1
//│ res: 1
//│    = 1


zargs = z (fun self -> fun x -> self)
//│ zargs: 'b
//│   where
//│     'b :> anything -> 'b
//│      = [Function (anonymous)]

zargs 1
//│ res: 'b
//│   where
//│     'b :> anything -> 'b
//│    = [Function (anonymous)]

zargs 1 2 3 4
//│ res: 'b
//│   where
//│     'b :> anything -> 'b
//│    = [Function (anonymous)]


loop = z (fun self -> self)
//│ loop: anything -> nothing
//│     = [Function (anonymous)]

:re
loop 1
//│ res: nothing
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded


def pow pow n x =
    if n > 0 then pow (n - 1) x * x
    else 1
//│ pow: (int -> 'a -> int) -> int -> (int & 'a) -> int
//│    = [Function: pow]

def pow = z pow
pow 3 4
//│ pow: int -> int -> int
//│    = [Function: pow2]
//│ res: int
//│    = 64


def oops = z (fun f -> f)
//│ oops: anything -> nothing
//│     = [Function: oops]

:re
oops 1
//│ res: nothing
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded



:NoRecursiveTypes

:e
def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ((anything -> nothing) -> anything) -> error
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.128: 	  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. (α415_430'' -> α424_434'')›  <:  α415_441'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. (α415_430'' -> α424_434'')›  <:  α415_430''
//│  = [Function: z2]

def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v))!)
//│ (('a -> 'b) -> ('c -> 'd & 'a -> 'b) & ('c -> 'd) -> 'e) -> 'e
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = [Function: z3]

:NoCycleCheck

// Exceeds recursion depth limit:
:e
def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ((anything -> nothing) -> anything) -> error
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│ ╔══[ERROR] Subtyping constraint of the form `?a -> ?b <: (forall ?c, ?d, ?e, ?f, ?g. ?c -> ?g) -> ?h` exceeded recursion depth limit (200)
//│ ║  l.152: 	  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. (α592_607'' -> α601_611'')›  <!<  α592_648'
//│ ╟── while constraining:  α592_643'  <!<  α592_648'
//│ ╟── while constraining:  (α592_643',)  <!<  (α592_648',)
//│ ╟── while constraining:  (α592_648' -> α601_652')  <!<  ((α592_643',) -> α595_644')
//│ ╟── while constraining:  ‹∀ 1. (α592_607'' -> α601_611'')›  <!<  ((α592_643',) -> α595_644')
//│ ╟── while constraining:  ‹∀ 1. (α592_607'' -> α601_611'')›  <!<  α592_643'
//│ ╟── while constraining:  α592_638'  <!<  α592_643'
//│ ╟── while constraining:  (α592_638',)  <!<  (α592_643',)
//│ ╟── while constraining:  (α592_643' -> α601_647')  <!<  ((α592_638',) -> α595_639')
//│ ╟── while constraining:  ‹∀ 1. (α592_607'' -> α601_611'')›  <!<  ((α592_638',) -> α595_639')
//│ ╟── while constraining:  ‹∀ 1. (α592_607'' -> α601_611'')›  <!<  α592_638'
//│ ╟── while constraining:  α592_633'  <!<  α592_638'
//│ ╟── while constraining:  (α592_633',)  <!<  (α592_638',)
//│ ╟── while constraining:  (α592_638' -> α601_642')  <!<  ((α592_633',) -> α595_634')
//│ ╟── while constraining:  ‹∀ 1. (α592_607'' -> α601_611'')›  <!<  ((α592_633',) -> α595_634')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  (α592_623' -> α601_627')  <!<  ((α592_618',) -> α595_619')
//│ ╟── while constraining:  ‹∀ 1. (α592_607'' -> α601_611'')›  <!<  ((α592_618',) -> α595_619')
//│ ╟── while constraining:  ‹∀ 1. (α592_607'' -> α601_611'')›  <!<  α592_618'
//│ ╟── while constraining:  α592_613'  <!<  α592_618'
//│ ╟── while constraining:  (α592_613',)  <!<  (α592_618',)
//│ ╟── while constraining:  (α592_618' -> α601_622')  <!<  ((α592_613',) -> α595_614')
//│ ╟── while constraining:  ‹∀ 1. (α592_607'' -> α601_611'')›  <!<  ((α592_613',) -> α595_614')
//│ ╟── while constraining:  ‹∀ 1. (α592_607'' -> α601_611'')›  <!<  α592_613'
//│ ╟── while constraining:  α582'  <!<  α592_613'
//│ ╟── while constraining:  (α582',)  <!<  (α592_613',)
//│ ╟── while constraining:  (α592_613' -> α601_617')  <!<  ((α582',) -> α585')
//│ ╟── while constraining:  ‹∀ 1. (α592_607'' -> α601_611'')›  <!<  ((α582',) -> α585')
//│ ╟── while constraining:  ‹∀ 1. (α592_607'' -> α601_611'')›  <!<  α582'
//│ ╟── while constraining:  (‹∀ 1. (α592_607'' -> α601_611'')›,)  <!<  (α582',)
//│ ╙── while constraining:  (α582' -> α591')  <!<  ((‹∀ 1. (α592_607'' -> α601_611'')›,) -> α612')
//│  = [Function: z4]

def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v))!)
//│ (('a -> 'b) -> ('c -> 'd & 'a -> 'b) & ('c -> 'd) -> 'e) -> 'e
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = [Function: z5]

