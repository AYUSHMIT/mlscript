

def z: (('a -> 'b) -> (('a -> 'b) & 'c)) -> 'c
//│ z: (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = <missing implementation>

:e
def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ╔══[ERROR] Subtyping constraint of the form `?a -> ?b <: (forall ?c, ?d, ?e, ?f, ?g. ?c -> ?g) -> ?h` exceeded recursion depth limit (400)
//│ ║  l.9: 	  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ║       	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. (α42'' -> α49'')›  <!<  α111'
//│ ╟── while constraining:  α106'  <!<  α111'
//│ ╟── while constraining:  (α106',)  <!<  (α111',)
//│ ╟── while constraining:  (α111' -> α115')  <!<  ((α106',) -> α107')
//│ ╟── while constraining:  ‹∀ 1. (α42'' -> α49'')›  <!<  ((α106',) -> α107')
//│ ╟── while constraining:  ‹∀ 1. (α42'' -> α49'')›  <!<  α106'
//│ ╟── while constraining:  α101'  <!<  α106'
//│ ╟── while constraining:  (α101',)  <!<  (α106',)
//│ ╟── while constraining:  (α106' -> α110')  <!<  ((α101',) -> α102')
//│ ╟── while constraining:  ‹∀ 1. (α42'' -> α49'')›  <!<  ((α101',) -> α102')
//│ ╟── while constraining:  ‹∀ 1. (α42'' -> α49'')›  <!<  α101'
//│ ╟── while constraining:  α96'  <!<  α101'
//│ ╟── while constraining:  (α96',)  <!<  (α101',)
//│ ╟── while constraining:  (α101' -> α105')  <!<  ((α96',) -> α97')
//│ ╟── while constraining:  ‹∀ 1. (α42'' -> α49'')›  <!<  ((α96',) -> α97')
//│ ╟── while constraining:  ‹∀ 1. (α42'' -> α49'')›  <!<  α96'
//│ ╟── while constraining:  α91'  <!<  α96'
//│ ╟── while constraining:  (α91',)  <!<  (α96',)
//│ ╟── while constraining:  (α96' -> α100')  <!<  ((α91',) -> α92')
//│ ╟── while constraining:  ‹∀ 1. (α42'' -> α49'')›  <!<  ((α91',) -> α92')
//│ ╟── while constraining:  ‹∀ 1. (α42'' -> α49'')›  <!<  α91'
//│ ╟── while constraining:  α86'  <!<  α91'
//│ ╟── while constraining:  (α86',)  <!<  (α91',)
//│ ╟── while constraining:  (α91' -> α95')  <!<  ((α86',) -> α87')
//│ ╟── while constraining:  ‹∀ 1. (α42'' -> α49'')›  <!<  ((α86',) -> α87')
//│ ╟── while constraining:  ‹∀ 1. (α42'' -> α49'')›  <!<  α86'
//│ ╟── while constraining:  α81'  <!<  α86'
//│ ╟── while constraining:  (α81',)  <!<  (α86',)
//│ ╟── while constraining:  (α86' -> α90')  <!<  ((α81',) -> α82')
//│ ╟── while constraining:  ‹∀ 1. (α42'' -> α49'')›  <!<  ((α81',) -> α82')
//│ ╟── while constraining:  ‹∀ 1. (α42'' -> α49'')›  <!<  α81'
//│ ╟── while constraining:  α76'  <!<  α81'
//│ ╟── while constraining:  (α76',)  <!<  (α81',)
//│ ╟── while constraining:  (α81' -> α85')  <!<  ((α76',) -> α77')
//│ ╟── while constraining:  ‹∀ 1. (α42'' -> α49'')›  <!<  ((α76',) -> α77')
//│ ╟── while constraining:  ‹∀ 1. (α42'' -> α49'')›  <!<  α76'
//│ ╟── while constraining:  α71'  <!<  α76'
//│ ╟── while constraining:  (α71',)  <!<  (α76',)
//│ ╟── while constraining:  (α76' -> α80')  <!<  ((α71',) -> α72')
//│ ╟── while constraining:  ‹∀ 1. (α42'' -> α49'')›  <!<  ((α71',) -> α72')
//│ ╟── while constraining:  ‹∀ 1. (α42'' -> α49'')›  <!<  α71'
//│ ╟── while constraining:  α66'  <!<  α71'
//│ ╟── while constraining:  (α66',)  <!<  (α71',)
//│ ╟── while constraining:  (α71' -> α75')  <!<  ((α66',) -> α67')
//│ ╟── while constraining:  ‹∀ 1. (α42'' -> α49'')›  <!<  ((α66',) -> α67')
//│ ╟── while constraining:  ‹∀ 1. (α42'' -> α49'')›  <!<  α66'
//│ ╟── while constraining:  α61'  <!<  α66'
//│ ╟── while constraining:  (α61',)  <!<  (α66',)
//│ ╟── while constraining:  (α66' -> α70')  <!<  ((α61',) -> α62')
//│ ╟── while constraining:  ‹∀ 1. (α42'' -> α49'')›  <!<  ((α61',) -> α62')
//│ ╟── while constraining:  ‹∀ 1. (α42'' -> α49'')›  <!<  α61'
//│ ╟── while constraining:  α56'  <!<  α61'
//│ ╟── while constraining:  (α56',)  <!<  (α61',)
//│ ╟── while constraining:  (α61' -> α65')  <!<  ((α56',) -> α57')
//│ ╟── while constraining:  ‹∀ 1. (α42'' -> α49'')›  <!<  ((α56',) -> α57')
//│ ╟── while constraining:  ‹∀ 1. (α42'' -> α49'')›  <!<  α56'
//│ ╟── while constraining:  α34'  <!<  α56'
//│ ╟── while constraining:  (α34',)  <!<  (α56',)
//│ ╟── while constraining:  (α56' -> α60')  <!<  ((α34',) -> α37')
//│ ╟── while constraining:  ‹∀ 1. (α42'' -> α49'')›  <!<  ((α34',) -> α37')
//│ ╟── while constraining:  ‹∀ 1. (α42'' -> α49'')›  <!<  α34'
//│ ╟── while constraining:  (‹∀ 1. (α42'' -> α49'')›,)  <!<  (α34',)
//│ ╙── while constraining:  (α34' -> α41')  <!<  ((‹∀ 1. (α42'' -> α49'')›,) -> α55')
//│ ((anything -> nothing) -> anything) -> error
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = [Function: z]


def pow1 = z (fun pow0 -> fun n -> fun x ->
    if n > 0 then pow0 (n - 1) x * x
    else 1
  )
//│ pow1: int -> int -> int
//│     = [Function (anonymous)]

pow1 3 4
//│ res: int
//│    = 64


def pow pow n x =
    if n > 0 then pow (n - 1) x * x
    else 1
//│ pow: (int -> 'a -> int) -> int -> (int & 'a) -> int
//│    = [Function: pow]

def pow = z pow
pow 3 4
//│ pow: int -> int -> int
//│    = [Function (anonymous)]
//│ res: int
//│    = 64


def oops = z (fun f -> f)
//│ oops: anything -> nothing
//│     = [Function (anonymous)]

:re
oops 1
//│ res: nothing
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded


