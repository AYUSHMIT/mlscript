
// * Strangely, why Y does not work (cycle check error),
// * Z type checks find thanks to recursive types...


def z: (('a -> 'b) -> (('a -> 'b) & 'c)) -> 'c
//│ z: (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = <missing implementation>

:e // due to tapping
def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.12: 	  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ║        	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. (α42'' -> α49'')›  <:  α42_61'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. (α42'' -> α49'')›  <:  α42''
//│ (('a -> 'b) -> ('c -> 'd & 'a -> 'b) & ('c -> 'd) -> 'e) -> (error | 'e)
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = [Function: z]


def pow1 = z (fun pow0 -> fun n -> fun x ->
    if n > 0 then pow0 (n - 1) x * x
    else 1
  )
//│ pow1: int -> int -> int
//│     = [Function (anonymous)]

pow1 3 4
//│ res: int
//│    = 64


def pow pow n x =
    if n > 0 then pow (n - 1) x * x
    else 1
//│ pow: (int -> 'a -> int) -> int -> (int & 'a) -> int
//│    = [Function: pow]

def pow = z pow
pow 3 4
//│ pow: int -> int -> int
//│    = [Function (anonymous)]
//│ res: int
//│    = 64


def oops = z (fun f -> f)
//│ oops: anything -> nothing
//│     = [Function (anonymous)]

:re
oops 1
//│ res: nothing
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded



:NoRecursiveTypes

:e
def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.67: 	  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ║        	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. (α229'' -> α236'')›  <:  α229_248'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. (α229'' -> α236'')›  <:  α229''
//│ (('a -> 'b) -> ('c -> 'd & 'a -> 'b) & ('c -> 'd) -> 'e) -> (error | 'e)
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = [Function: z1]

:NoCycleCheck

// Exceeds recursion depth limit:
:e
def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ╔══[ERROR] Subtyping constraint of the form `?a -> ?b <: (forall ?c, ?d, ?e, ?f, ?g. ?c -> ?g) -> ?h` exceeded recursion depth limit (300)
//│ ║  l.84: 	  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ║        	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. (α317'' -> α324'')›  <!<  α317_376'
//│ ╟── while constraining:  α317_371'  <!<  α317_376'
//│ ╟── while constraining:  (α317_371',)  <!<  (α317_376',)
//│ ╟── while constraining:  (α317_376' -> α324_380')  <!<  ((α317_371',) -> α320_372')
//│ ╟── while constraining:  ‹∀ 1. (α317'' -> α324'')›  <!<  ((α317_371',) -> α320_372')
//│ ╟── while constraining:  ‹∀ 1. (α317'' -> α324'')›  <!<  α317_371'
//│ ╟── while constraining:  α317_366'  <!<  α317_371'
//│ ╟── while constraining:  (α317_366',)  <!<  (α317_371',)
//│ ╟── while constraining:  (α317_371' -> α324_375')  <!<  ((α317_366',) -> α320_367')
//│ ╟── while constraining:  ‹∀ 1. (α317'' -> α324'')›  <!<  ((α317_366',) -> α320_367')
//│ ╟── while constraining:  ‹∀ 1. (α317'' -> α324'')›  <!<  α317_366'
//│ ╟── while constraining:  α317_361'  <!<  α317_366'
//│ ╟── while constraining:  (α317_361',)  <!<  (α317_366',)
//│ ╟── while constraining:  (α317_366' -> α324_370')  <!<  ((α317_361',) -> α320_362')
//│ ╟── while constraining:  ‹∀ 1. (α317'' -> α324'')›  <!<  ((α317_361',) -> α320_362')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  (α317_341' -> α324_345')  <!<  ((α317_336',) -> α320_337')
//│ ╟── while constraining:  ‹∀ 1. (α317'' -> α324'')›  <!<  ((α317_336',) -> α320_337')
//│ ╟── while constraining:  ‹∀ 1. (α317'' -> α324'')›  <!<  α317_336'
//│ ╟── while constraining:  α317_331'  <!<  α317_336'
//│ ╟── while constraining:  (α317_331',)  <!<  (α317_336',)
//│ ╟── while constraining:  (α317_336' -> α324_340')  <!<  ((α317_331',) -> α320_332')
//│ ╟── while constraining:  ‹∀ 1. (α317'' -> α324'')›  <!<  ((α317_331',) -> α320_332')
//│ ╟── while constraining:  ‹∀ 1. (α317'' -> α324'')›  <!<  α317_331'
//│ ╟── while constraining:  α309'  <!<  α317_331'
//│ ╟── while constraining:  (α309',)  <!<  (α317_331',)
//│ ╟── while constraining:  (α317_331' -> α324_335')  <!<  ((α309',) -> α312')
//│ ╟── while constraining:  ‹∀ 1. (α317'' -> α324'')›  <!<  ((α309',) -> α312')
//│ ╟── while constraining:  ‹∀ 1. (α317'' -> α324'')›  <!<  α309'
//│ ╟── while constraining:  (‹∀ 1. (α317'' -> α324'')›,)  <!<  (α309',)
//│ ╙── while constraining:  (α309' -> α316')  <!<  ((‹∀ 1. (α317'' -> α324'')›,) -> α330')
//│ ((anything -> nothing) -> anything) -> error
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = [Function: z2]

