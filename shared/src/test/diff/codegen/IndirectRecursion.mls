// * [OBSOLETE:]
// * Strangely, while Y does not work (cycle check error),
// * Z type checks find thanks to recursive types...


def z: (('a -> 'b) -> (('a -> 'b) & 'c)) -> 'c
//│ z: (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = <missing implementation>

// :e // Works since inconsistent constrained types...
:e // No longer signature-checks after fix to freshening levels
def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.13: 	  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ║        	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. (α47_62'' -> α56_66'')›  <:  α47_73'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. (α47_62'' -> α56_66'')›  <:  α47_62''
//│ ((anything -> nothing) -> anything) -> error
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = [Function: z]


def pow1 = z (fun pow0 -> fun n -> fun x ->
    if n > 0 then pow0 (n - 1) x * x
    else 1
  )
//│ pow1: int -> int -> int
//│     = [Function: pow1]

pow1 3 4
//│ res: int
//│    = 64


:e
z (fun self -> 1)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.39: 	z (fun self -> 1)
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `1` is not a function
//│ ║  l.39: 	z (fun self -> 1)
//│ ║        	               ^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.6: 	def z: (('a -> 'b) -> (('a -> 'b) & 'c)) -> 'c
//│ ║       	                       ^^^^^^^^^^
//│ ╟── from intersection type:
//│ ║  l.6: 	def z: (('a -> 'b) -> (('a -> 'b) & 'c)) -> 'c
//│ ╙──     	                      ^^^^^^^^^^^^^^^^^
//│ res: error
//│    = 1


zid = z (fun self -> id)
//│ zid: 'a -> 'a
//│    = [Function: id]

zid 1
//│ res: 1
//│    = 1


zargs = z (fun self -> fun x -> self)
//│ zargs: 'b
//│   where
//│     'b :> anything -> 'b
//│      = [Function (anonymous)]

zargs 1
//│ res: 'b
//│   where
//│     'b :> anything -> 'b
//│    = [Function (anonymous)]

zargs 1 2 3 4
//│ res: 'b
//│   where
//│     'b :> anything -> 'b
//│    = [Function (anonymous)]


loop = z (fun self -> self)
//│ loop: anything -> nothing
//│     = [Function (anonymous)]

:re
loop 1
//│ res: nothing
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded


def pow pow n x =
    if n > 0 then pow (n - 1) x * x
    else 1
//│ pow: (int -> 'a -> int) -> int -> (int & 'a) -> int
//│    = [Function: pow]

def pow = z pow
pow 3 4
//│ pow: int -> int -> int
//│    = [Function: pow2]
//│ res: int
//│    = 64


def oops = z (fun f -> f)
//│ oops: anything -> nothing
//│     = [Function: oops]

:re
oops 1
//│ res: nothing
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded



:NoRecursiveTypes

:e
def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.125: 	  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. (α319_334'' -> α328_338'')›  <:  α319_345'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. (α319_334'' -> α328_338'')›  <:  α319_334''
//│ ((anything -> nothing) -> anything) -> error
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = [Function: z1]

:NoCycleCheck

// Exceeds recursion depth limit:
:e
def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ╔══[ERROR] Subtyping constraint of the form `?a -> ?b <: (forall ?c, ?d, ?e, ?f, ?g. ?g -> ?e) -> ?h` exceeded recursion depth limit (200)
//│ ║  l.142: 	  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. (α401_416'' -> α410_420'')›  <!<  α401_457'
//│ ╟── while constraining:  α401_452'  <!<  α401_457'
//│ ╟── while constraining:  (α401_452',)  <!<  (α401_457',)
//│ ╟── while constraining:  (α401_457' -> α410_461')  <!<  ((α401_452',) -> α404_453')
//│ ╟── while constraining:  ‹∀ 1. (α401_416'' -> α410_420'')›  <!<  ((α401_452',) -> α404_453')
//│ ╟── while constraining:  ‹∀ 1. (α401_416'' -> α410_420'')›  <!<  α401_452'
//│ ╟── while constraining:  α401_447'  <!<  α401_452'
//│ ╟── while constraining:  (α401_447',)  <!<  (α401_452',)
//│ ╟── while constraining:  (α401_452' -> α410_456')  <!<  ((α401_447',) -> α404_448')
//│ ╟── while constraining:  ‹∀ 1. (α401_416'' -> α410_420'')›  <!<  ((α401_447',) -> α404_448')
//│ ╟── while constraining:  ‹∀ 1. (α401_416'' -> α410_420'')›  <!<  α401_447'
//│ ╟── while constraining:  α401_442'  <!<  α401_447'
//│ ╟── while constraining:  (α401_442',)  <!<  (α401_447',)
//│ ╟── while constraining:  (α401_447' -> α410_451')  <!<  ((α401_442',) -> α404_443')
//│ ╟── while constraining:  ‹∀ 1. (α401_416'' -> α410_420'')›  <!<  ((α401_442',) -> α404_443')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  (α401_432' -> α410_436')  <!<  ((α401_427',) -> α404_428')
//│ ╟── while constraining:  ‹∀ 1. (α401_416'' -> α410_420'')›  <!<  ((α401_427',) -> α404_428')
//│ ╟── while constraining:  ‹∀ 1. (α401_416'' -> α410_420'')›  <!<  α401_427'
//│ ╟── while constraining:  α401_422'  <!<  α401_427'
//│ ╟── while constraining:  (α401_422',)  <!<  (α401_427',)
//│ ╟── while constraining:  (α401_427' -> α410_431')  <!<  ((α401_422',) -> α404_423')
//│ ╟── while constraining:  ‹∀ 1. (α401_416'' -> α410_420'')›  <!<  ((α401_422',) -> α404_423')
//│ ╟── while constraining:  ‹∀ 1. (α401_416'' -> α410_420'')›  <!<  α401_422'
//│ ╟── while constraining:  α391'  <!<  α401_422'
//│ ╟── while constraining:  (α391',)  <!<  (α401_422',)
//│ ╟── while constraining:  (α401_422' -> α410_426')  <!<  ((α391',) -> α394')
//│ ╟── while constraining:  ‹∀ 1. (α401_416'' -> α410_420'')›  <!<  ((α391',) -> α394')
//│ ╟── while constraining:  ‹∀ 1. (α401_416'' -> α410_420'')›  <!<  α391'
//│ ╟── while constraining:  (‹∀ 1. (α401_416'' -> α410_420'')›,)  <!<  (α391',)
//│ ╙── while constraining:  (α391' -> α400')  <!<  ((‹∀ 1. (α401_416'' -> α410_420'')›,) -> α421')
//│ ((anything -> nothing) -> anything) -> error
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = [Function: z2]

