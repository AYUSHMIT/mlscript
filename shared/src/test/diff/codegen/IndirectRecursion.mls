

def z: (('a -> 'b) -> (('a -> 'b) & 'c)) -> 'c
//│ z: (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = <missing implementation>

:e
def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ (('a -> 'b) -> ('c -> 'd & 'a -> 'b) & ('c -> 'd) -> 'e) -> (error | 'e)
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.9: 	  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ║       	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 2. (α58_73''' -> α67_77''')›  <:  α58_90''    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 2. (α58_73''' -> α67_77''')›  <:  α58_73'''
//│  = [Function: z]

def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v))!)
//│ (('a -> 'b) -> ('c -> 'd & 'a -> 'b) & ('c -> 'd) -> 'e) -> 'e
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = [Function: z1]


def pow1 = z (fun pow0 -> fun n -> fun x ->
    if n > 0 then pow0 (n - 1) x * x
    else 1
  )
//│ pow1: int -> int -> int
//│     = [Function: pow1]

pow1 3 4
//│ res: int
//│    = 64


:e
z (fun self -> 1)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.42: 	z (fun self -> 1)
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `1` is not a function
//│ ║  l.42: 	z (fun self -> 1)
//│ ║        	               ^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.3: 	def z: (('a -> 'b) -> (('a -> 'b) & 'c)) -> 'c
//│ ║       	                       ^^^^^^^^^^
//│ ╟── from intersection type:
//│ ║  l.3: 	def z: (('a -> 'b) -> (('a -> 'b) & 'c)) -> 'c
//│ ╙──     	                      ^^^^^^^^^^^^^^^^^
//│ res: 1 | error
//│    = 1


zid = z (fun self -> id)
//│ zid: 'a -> 'a
//│    = [Function: id]

zid 1
//│ res: 1
//│    = 1


zargs = z (fun self -> fun x -> self)
//│ zargs: 'b
//│   where
//│     'b :> anything -> 'b
//│      = [Function (anonymous)]

zargs 1
//│ res: 'b
//│   where
//│     'b :> anything -> 'b
//│    = [Function (anonymous)]

zargs 1 2 3 4
//│ res: 'b
//│   where
//│     'b :> anything -> 'b
//│    = [Function (anonymous)]


loop = z (fun self -> self)
//│ loop: anything -> nothing
//│     = [Function (anonymous)]

:re
loop 1
//│ res: nothing
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded


def pow pow n x =
    if n > 0 then pow (n - 1) x * x
    else 1
//│ pow: (int -> 'a -> int) -> int -> (int & 'a) -> int
//│    = [Function: pow]

def pow = z pow
pow 3 4
//│ pow: int -> int -> int
//│    = [Function: pow2]
//│ res: int
//│    = 64


def oops = z (fun f -> f)
//│ oops: anything -> nothing
//│     = [Function: oops]

:re
oops 1
//│ res: nothing
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded



:NoRecursiveTypes

:e
def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ (('a -> 'b) -> ('c -> 'd & 'a -> 'b) & ('c -> 'd) -> 'e) -> (error | 'e)
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.128: 	  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 2. (α588_603''' -> α597_607''')›  <:  α588_620''    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 2. (α588_603''' -> α597_607''')›  <:  α588_603'''
//│  = [Function: z2]

def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v))!)
//│ (('a -> 'b) -> ('c -> 'd & 'a -> 'b) & ('c -> 'd) -> 'e) -> 'e
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = [Function: z3]

:NoCycleCheck

// Exceeds recursion depth limit:
:e
def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ((anything -> nothing) -> anything) -> error
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e. ?b -> ?e <: (forall ?f, ?g, ?h, ?i, ?j. ?h -> ?i) -> ?k` exceeded recursion depth limit (250)
//│ ║  l.152: 	  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  α871_933''  <!<  α871_938''
//│ ╟── while constraining:  (α871_933'',)  <!<  (α871_938'',)
//│ ╟── while constraining:  (α871_938'' -> ‹∀ 3. α880_937''''›)  <!<  ((α871_933'',) -> α874_934'')
//│ ╟── while constraining:  ‹∀ 2. (α871_886''' -> ‹∀ 3. α880_937''''›)›  <!<  ((α871_933'',) -> α874_934'')
//│ ╟── while constraining:  ‹∀ 2. (α871_886''' -> α880_890''')›  <!<  ((α871_933'',) -> α874_934'')
//│ ╟── while constraining:  ‹∀ 2. (α871_886''' -> α880_890''')›  <!<  α871_933''
//│ ╟── while constraining:  α871_928''  <!<  α871_933''
//│ ╟── while constraining:  (α871_928'',)  <!<  (α871_933'',)
//│ ╟── while constraining:  (α871_933'' -> ‹∀ 3. α880_932''''›)  <!<  ((α871_928'',) -> α874_929'')
//│ ╟── while constraining:  ‹∀ 2. (α871_886''' -> ‹∀ 3. α880_932''''›)›  <!<  ((α871_928'',) -> α874_929'')
//│ ╟── while constraining:  ‹∀ 2. (α871_886''' -> α880_890''')›  <!<  ((α871_928'',) -> α874_929'')
//│ ╟── while constraining:  ‹∀ 2. (α871_886''' -> α880_890''')›  <!<  α871_928''
//│ ╟── while constraining:  α871_923''  <!<  α871_928''
//│ ╟── while constraining:  (α871_923'',)  <!<  (α871_928'',)
//│ ╟── while constraining:  (α871_928'' -> ‹∀ 3. α880_927''''›)  <!<  ((α871_923'',) -> α874_924'')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  (α871_898'',)  <!<  (α871_903'',)
//│ ╟── while constraining:  (α871_903'' -> ‹∀ 3. α880_902''''›)  <!<  ((α871_898'',) -> α874_899'')
//│ ╟── while constraining:  ‹∀ 2. (α871_886''' -> ‹∀ 3. α880_902''''›)›  <!<  ((α871_898'',) -> α874_899'')
//│ ╟── while constraining:  ‹∀ 2. (α871_886''' -> α880_890''')›  <!<  ((α871_898'',) -> α874_899'')
//│ ╟── while constraining:  ‹∀ 2. (α871_886''' -> α880_890''')›  <!<  α871_898''
//│ ╟── while constraining:  α851_893''  <!<  α871_898''
//│ ╟── while constraining:  (α851_893'',)  <!<  (α871_898'',)
//│ ╟── while constraining:  (α871_898'' -> ‹∀ 3. α880_897''''›)  <!<  ((α851_893'',) -> α854_894'')
//│ ╟── while constraining:  ‹∀ 2. (α871_886''' -> ‹∀ 3. α880_897''''›)›  <!<  ((α851_893'',) -> α854_894'')
//│ ╟── while constraining:  ‹∀ 2. (α871_886''' -> α880_890''')›  <!<  ((α851_893'',) -> α854_894'')
//│ ╟── while constraining:  ‹∀ 2. (α871_886''' -> α880_890''')›  <!<  α851_893''
//│ ╟── while constraining:  (‹∀ 2. (α871_886''' -> α880_890''')›,)  <!<  (α851_893'',)
//│ ╟── while constraining:  (α851_893'' -> ‹∀ 3. α860_892''''›)  <!<  ((‹∀ 2. (α871_886''' -> α880_890''')›,) -> α891'')
//│ ╟── while constraining:  ‹∀ 2. (α851_866''' -> ‹∀ 3. α860_892''''›)›  <!<  ((‹∀ 2. (α871_886''' -> α880_890''')›,) -> α891'')
//│ ╙── while constraining:  ‹∀ 2. (α851_866''' -> α860_870''')›  <!<  ((‹∀ 2. (α871_886''' -> α880_890''')›,) -> α891'')
//│  = [Function: z4]

def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v))!)
//│ (('a -> 'b) -> ('c -> 'd & 'a -> 'b) & ('c -> 'd) -> 'e) -> 'e
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = [Function: z5]

