
// * Strangely, why Y does not work (cycle check error),
// * Z type checks find thanks to recursive types...


def z: (('a -> 'b) -> (('a -> 'b) & 'c)) -> 'c
//│ z: (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = <missing implementation>

:e // due to tapping
def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.12: 	  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ║        	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. {(α48_59'' -> α58_69'') where: α36' <: ((‹∀ 2. {(α49_64''' -> α51_65''') where: α48_59'' <: ((α48_59'',) -> α50_63''')}›,) -> α58_69'')}›  <:  α48_98'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. {(α48_59'' -> α58_69'') where: α36' <: ((‹∀ 2. {(α49_64''' -> α51_65''') where: α48_59'' <: ((α48_59'',) -> α50_63''')}›,) -> α58_69'')}›  <:  α48_59''
//│ ((forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'a -> 'b -> 'c)) -> anything & (forall 'd, 'e, 'f. ('e -> 'f
//│   where
//│     'd <: 'd -> 'e -> 'f)) -> anything & (forall 'g, 'h, 'i. ('h -> 'i
//│   where
//│     'g <: 'g -> 'h -> 'i)) -> anything & (forall 'j, 'k, 'l. ('k -> 'l
//│   where
//│     'j <: 'j -> 'k -> 'l)) -> anything) -> error
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│ ╔══[ERROR] Cyclic-looking constraint while typing expression; a type annotation may be required
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  α36_169'  <:  ((‹∀ 2. {(α49_201''' -> α51_202''') where: α48_193' <: ((α48_193',) -> α50_200''')}›,) -> α58_267')    TypeVariable  FunctionType
//│ ╙──  ... looks like:  α36'  <:  ((‹∀ 2. {(α49_64''' -> α51_65''') where: α48_59'' <: ((α48_59'',) -> α50_63''')}›,) -> α58_206'')
//│  = [Function: z]


def pow1 = z (fun pow0 -> fun n -> fun x ->
    if n > 0 then pow0 (n - 1) x * x
    else 1
  )
//│ pow1: int -> int -> int
//│     = [Function (anonymous)]

pow1 3 4
//│ res: int
//│    = 64


def pow pow n x =
    if n > 0 then pow (n - 1) x * x
    else 1
//│ pow: (int -> 'a -> int) -> int -> (int & 'a) -> int
//│    = [Function: pow]

def pow = z pow
pow 3 4
//│ pow: int -> int -> int
//│    = [Function (anonymous)]
//│ res: int
//│    = 64


def oops = z (fun f -> f)
//│ oops: anything -> nothing
//│     = [Function (anonymous)]

:re
oops 1
//│ res: nothing
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded



:NoRecursiveTypes

:e
def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.79: 	  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ║        	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. {(α387_398'' -> α397_408'') where: α375' <: ((‹∀ 2. {(α388_403''' -> α390_404''') where: α387_398'' <: ((α387_398'',) -> α389_402''')}›,) -> α397_408'')}›  <:  α387_437'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. {(α387_398'' -> α397_408'') where: α375' <: ((‹∀ 2. {(α388_403''' -> α390_404''') where: α387_398'' <: ((α387_398'',) -> α389_402''')}›,) -> α397_408'')}›  <:  α387_398''
//│ ((forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'a -> 'b -> 'c)) -> anything & (forall 'd, 'e, 'f. ('e -> 'f
//│   where
//│     'd <: 'd -> 'e -> 'f)) -> anything & (forall 'g, 'h, 'i. ('h -> 'i
//│   where
//│     'g <: 'g -> 'h -> 'i)) -> anything & (forall 'j, 'k, 'l. ('k -> 'l
//│   where
//│     'j <: 'j -> 'k -> 'l)) -> anything) -> error
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│ ╔══[ERROR] Cyclic-looking constraint while typing expression; a type annotation may be required
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  α375_508'  <:  ((‹∀ 2. {(α388_540''' -> α390_541''') where: α387_532' <: ((α387_532',) -> α389_539''')}›,) -> α397_611')    TypeVariable  FunctionType
//│ ╙──  ... looks like:  α375'  <:  ((‹∀ 2. {(α388_403''' -> α390_404''') where: α387_398'' <: ((α387_398'',) -> α389_402''')}›,) -> α397_545'')
//│  = [Function: z1]

:NoCycleCheck

// Exceeds recursion depth limit:
// :e
// FIXME should be caught by cycle checker!
def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ╔══[ERROR] Subtyping constraint of the form `?a -> ?b <: (forall ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m. (?h -> ?g
//│   where
//│     ?n <: (forall ?e, ?f, ?o, ?p, ?h, ?i, ?j, ?k, ?l, ?q. (?o -> ?p
//│   where
//│     ?h <: ?h -> ?q)) -> ?g)) -> ?r` exceeded recursion depth limit (300)
//│ ║  l.109: 	  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. {(α624_635'' -> α634_645'') where: α612' <: ((‹∀ 2. {(α625_640''' -> α627_641''') where: α624_635'' <: ((α624_635'',) -> α626_639''')}›,) -> α634_645'')}›  <!<  α624_786'
//│ ╟── while constraining:  α624_772'  <!<  α624_786'
//│ ╟── while constraining:  (α624_772',)  <!<  (α624_786',)
//│ ╟── while constraining:  (α624_786' -> α634_799')  <!<  ((α624_772',) -> α626_782')
//│ ╟── while constraining:  {(α624_786' -> α634_799') where: α612' <: ((‹∀ 2. {(α625_794''' -> α627_795''') where: α624_786' <: ((α624_786',) -> α626_793''')}›,) -> α634_799')}  <!<  ((α624_772',) -> α626_782')
//│ ╟── while constraining:  ‹∀ 1. {(α624_635'' -> α634_645'') where: α612' <: ((‹∀ 2. {(α625_640''' -> α627_641''') where: α624_635'' <: ((α624_635'',) -> α626_639''')}›,) -> α634_645'')}›  <!<  ((α624_772',) -> α626_782')
//│ ╟── while constraining:  ‹∀ 1. {(α624_635'' -> α634_645'') where: α612' <: ((‹∀ 2. {(α625_640''' -> α627_641''') where: α624_635'' <: ((α624_635'',) -> α626_639''')}›,) -> α634_645'')}›  <!<  α624_772'
//│ ╟── while constraining:  α624_758'  <!<  α624_772'
//│ ╟── while constraining:  (α624_758',)  <!<  (α624_772',)
//│ ╟── while constraining:  (α624_772' -> α634_785')  <!<  ((α624_758',) -> α626_768')
//│ ╟── while constraining:  {(α624_772' -> α634_785') where: α612' <: ((‹∀ 2. {(α625_780''' -> α627_781''') where: α624_772' <: ((α624_772',) -> α626_779''')}›,) -> α634_785')}  <!<  ((α624_758',) -> α626_768')
//│ ╟── while constraining:  ‹∀ 1. {(α624_635'' -> α634_645'') where: α612' <: ((‹∀ 2. {(α625_640''' -> α627_641''') where: α624_635'' <: ((α624_635'',) -> α626_639''')}›,) -> α634_645'')}›  <!<  ((α624_758',) -> α626_768')
//│ ╟── while constraining:  ‹∀ 1. {(α624_635'' -> α634_645'') where: α612' <: ((‹∀ 2. {(α625_640''' -> α627_641''') where: α624_635'' <: ((α624_635'',) -> α626_639''')}›,) -> α634_645'')}›  <!<  α624_758'
//│ ╟── while constraining:  α624_744'  <!<  α624_758'
//│ ╟── while constraining:  (α624_744',)  <!<  (α624_758',)
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 1. {(α624_635'' -> α634_645'') where: α612' <: ((‹∀ 2. {(α625_640''' -> α627_641''') where: α624_635'' <: ((α624_635'',) -> α626_639''')}›,) -> α634_645'')}›  <!<  α624_674'
//│ ╟── while constraining:  α624_660'  <!<  α624_674'
//│ ╟── while constraining:  (α624_660',)  <!<  (α624_674',)
//│ ╟── while constraining:  (α624_674' -> α634_687')  <!<  ((α624_660',) -> α626_670')
//│ ╟── while constraining:  {(α624_674' -> α634_687') where: α612' <: ((‹∀ 2. {(α625_682''' -> α627_683''') where: α624_674' <: ((α624_674',) -> α626_681''')}›,) -> α634_687')}  <!<  ((α624_660',) -> α626_670')
//│ ╟── while constraining:  ‹∀ 1. {(α624_635'' -> α634_645'') where: α612' <: ((‹∀ 2. {(α625_640''' -> α627_641''') where: α624_635'' <: ((α624_635'',) -> α626_639''')}›,) -> α634_645'')}›  <!<  ((α624_660',) -> α626_670')
//│ ╟── while constraining:  ‹∀ 1. {(α624_635'' -> α634_645'') where: α612' <: ((‹∀ 2. {(α625_640''' -> α627_641''') where: α624_635'' <: ((α624_635'',) -> α626_639''')}›,) -> α634_645'')}›  <!<  α624_660'
//│ ╟── while constraining:  α613'  <!<  α624_660'
//│ ╟── while constraining:  (α613',)  <!<  (α624_660',)
//│ ╟── while constraining:  (α624_660' -> α634_673')  <!<  ((α613',) -> α615_620')
//│ ╟── while constraining:  {(α624_660' -> α634_673') where: α612' <: ((‹∀ 2. {(α625_668''' -> α627_669''') where: α624_660' <: ((α624_660',) -> α626_667''')}›,) -> α634_673')}  <!<  ((α613',) -> α615_620')
//│ ╟── while constraining:  ‹∀ 1. {(α624_635'' -> α634_645'') where: α612' <: ((‹∀ 2. {(α625_640''' -> α627_641''') where: α624_635'' <: ((α624_635'',) -> α626_639''')}›,) -> α634_645'')}›  <!<  ((α613',) -> α615_620')
//│ ╟── while constraining:  ‹∀ 1. {(α624_635'' -> α634_645'') where: α612' <: ((‹∀ 2. {(α625_640''' -> α627_641''') where: α624_635'' <: ((α624_635'',) -> α626_639''')}›,) -> α634_645'')}›  <!<  α613'
//│ ╟── while constraining:  (‹∀ 1. {(α624_635'' -> α634_645'') where: α612' <: ((‹∀ 2. {(α625_640''' -> α627_641''') where: α624_635'' <: ((α624_635'',) -> α626_639''')}›,) -> α634_645'')}›,)  <!<  (α613',)
//│ ╙── while constraining:  (α613' -> α623')  <!<  ((‹∀ 1. {(α624_635'' -> α634_645'') where: α612' <: ((‹∀ 2. {(α625_640''' -> α627_641''') where: α624_635'' <: ((α624_635'',) -> α626_639''')}›,) -> α634_645'')}›,) -> α659')
//│ ((forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'a -> 'b -> 'c)) -> anything & (forall 'd, 'e, 'f. ('e -> 'f
//│   where
//│     'd <: 'd -> 'e -> 'f)) -> anything & (forall 'g, 'h, 'i. ('h -> 'i
//│   where
//│     'g <: 'g -> 'h -> 'i)) -> anything & (forall 'j, 'k, 'l. ('k -> 'l
//│   where
//│     'j <: 'j -> 'k -> 'l)) -> anything & (forall 'm, 'n, 'o. ('n -> 'o
//│   where
//│     'm <: 'm -> 'n -> 'o)) -> anything & (forall 'p, 'q, 'r. ('q -> 'r
//│   where
//│     'p <: 'p -> 'q -> 'r)) -> anything & (forall 's, 't, 'u. ('t -> 'u
//│   where
//│     's <: 's -> 't -> 'u)) -> anything & (forall 'v, 'w, 'x. ('w -> 'x
//│   where
//│     'v <: 'v -> 'w -> 'x)) -> anything & (forall 'y, 'z, 'a1. ('z -> 'a1
//│   where
//│     'y <: 'y -> 'z -> 'a1)) -> anything & (forall 'b1, 'c1, 'd1. ('c1 -> 'd1
//│   where
//│     'b1 <: 'b1 -> 'c1 -> 'd1)) -> anything & (forall 'e1, 'f1, 'g1. ('f1 -> 'g1
//│   where
//│     'e1 <: 'e1 -> 'f1 -> 'g1)) -> anything & (forall 'h1, 'i1, 'j1. ('i1 -> 'j1
//│   where
//│     'h1 <: 'h1 -> 'i1 -> 'j1)) -> anything) -> error
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│ /!!!\ Uncaught error: java.lang.StackOverflowError

