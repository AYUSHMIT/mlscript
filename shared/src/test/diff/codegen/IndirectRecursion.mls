
// * Strangely, why Y does not work (cycle check error),
// * Z type checks find thanks to recursive types...


def z: (('a -> 'b) -> (('a -> 'b) & 'c)) -> 'c
//│ z: (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = <missing implementation>

// :e
def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ((forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'a -> 'b -> 'c)) -> 'd) -> 'd
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = [Function: z]


def pow1 = z (fun pow0 -> fun n -> fun x ->
    if n > 0 then pow0 (n - 1) x * x
    else 1
  )
//│ pow1: int -> int -> int
//│     = [Function (anonymous)]

pow1 3 4
//│ res: int
//│    = 64


def pow pow n x =
    if n > 0 then pow (n - 1) x * x
    else 1
//│ pow: (int -> 'a -> int) -> int -> (int & 'a) -> int
//│    = [Function: pow]

def pow = z pow
pow 3 4
//│ pow: int -> int -> int
//│    = [Function (anonymous)]
//│ res: int
//│    = 64


def oops = z (fun f -> f)
//│ oops: anything -> nothing
//│     = [Function (anonymous)]

:re
oops 1
//│ res: nothing
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded



:NoRecursiveTypes

:e
def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ((forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'a -> 'b -> 'c)) -> 'd) -> 'd
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition
//│ ║  l.62: 	def z =
//│ ║        	^^^^^^^
//│ ║  l.63: 	  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. {(α226' -> α230'') where: α224' <: ((‹∀ 2. {(α228''' -> α229''') where: α226' <: ((α226',) -> α227''')}›,) -> α230'')}›  <:  ((α226',) -> α244')    PolymorphicType  FunctionType
//│ ╙──  ... looks like:  ‹∀ 1. {(α194'' -> α198'') where: α224' <: ((‹∀ 2. {(α195''' -> α197''') where: α226' <: ((α194'',) -> α196''')}›,) -> α198'')}›  <:  ((α194'',) -> α227''')
//│  = [Function: z1]

:NoCycleCheck

// Exceeds recursion depth limit:
:e
def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ((forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'a -> 'b -> 'c)) -> 'd) -> 'd
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l. ?j -> ?i <: forall ?a, ?b, ?c. ((?a -> ?b) -> (?a -> ?b & ?c)) -> ?c` exceeded recursion depth limit (400)
//│ ║  l.83: 	def z =
//│ ║        	^^^^^^^
//│ ║  l.84: 	  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. {(α285' -> α289'') where: α283' <: ((‹∀ 2. {(α287''' -> α288''') where: α285' <: ((α285',) -> α286''')}›,) -> α289'')}›  <!<  ((α285',) -> α387')
//│ ╟── while constraining:  α285'  <!<  ((α285',) -> α387')
//│ ╟── while constraining:  {(α388' -> α389') where: α285' <: ((α285',) -> α387')}  <!<  (‘a' -> ‘b')
//│ ╟── while constraining:  ‹∀ 2. {(α287''' -> α288''') where: α285' <: ((α285',) -> α286''')}›  <!<  (‘a' -> ‘b')
//│ ╟── while constraining:  (‹∀ 2. {(α287''' -> α288''') where: α285' <: ((α285',) -> α286''')}›,)  <!<  ((‘a' -> ‘b'),)
//│ ╟── while constraining:  ((‘a' -> ‘b') -> ((‘a' -> ‘b') & ‘c'))  <!<  ((‹∀ 2. {(α287''' -> α288''') where: α285' <: ((α285',) -> α286''')}›,) -> α386')
//│ ╟── while constraining:  α283'  <!<  ((‹∀ 2. {(α287''' -> α288''') where: α285' <: ((α285',) -> α286''')}›,) -> α386')
//│ ╟── while constraining:  {(α285' -> α386') where: α283' <: ((‹∀ 2. {(α287''' -> α288''') where: α285' <: ((α285',) -> α286''')}›,) -> α386')}  <!<  ((α285',) -> α383')
//│ ╟── while constraining:  ‹∀ 1. {(α285' -> α289'') where: α283' <: ((‹∀ 2. {(α287''' -> α288''') where: α285' <: ((α285',) -> α286''')}›,) -> α289'')}›  <!<  ((α285',) -> α383')
//│ ╟── while constraining:  α285'  <!<  ((α285',) -> α383')
//│ ╟── while constraining:  {(α384' -> α385') where: α285' <: ((α285',) -> α383')}  <!<  (‘a' -> ‘b')
//│ ╟── while constraining:  ‹∀ 2. {(α287''' -> α288''') where: α285' <: ((α285',) -> α286''')}›  <!<  (‘a' -> ‘b')
//│ ╟── while constraining:  (‹∀ 2. {(α287''' -> α288''') where: α285' <: ((α285',) -> α286''')}›,)  <!<  ((‘a' -> ‘b'),)
//│ ╟── while constraining:  ((‘a' -> ‘b') -> ((‘a' -> ‘b') & ‘c'))  <!<  ((‹∀ 2. {(α287''' -> α288''') where: α285' <: ((α285',) -> α286''')}›,) -> α382')
//│ ╟── while constraining:  α283'  <!<  ((‹∀ 2. {(α287''' -> α288''') where: α285' <: ((α285',) -> α286''')}›,) -> α382')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  α284'  <!<  α285'
//│ ╟── while constraining:  (α284',)  <!<  (α285',)
//│ ╟── while constraining:  (α285' -> α298')  <!<  ((α284',) -> α295')
//│ ╟── while constraining:  {(α285' -> α298') where: α283' <: ((‹∀ 2. {(α287''' -> α288''') where: α285' <: ((α285',) -> α286''')}›,) -> α298')}  <!<  ((α284',) -> α295')
//│ ╟── while constraining:  ‹∀ 1. {(α285' -> α289'') where: α283' <: ((‹∀ 2. {(α287''' -> α288''') where: α285' <: ((α285',) -> α286''')}›,) -> α289'')}›  <!<  ((α284',) -> α295')
//│ ╟── while constraining:  α284'  <!<  ((α284',) -> α295')
//│ ╟── while constraining:  {(α296' -> α297') where: α284' <: ((α284',) -> α295')}  <!<  (‘a' -> ‘b')
//│ ╟── while constraining:  ‹∀ 1. {(α291'' -> α292'') where: α284' <: ((α284',) -> α290'')}›  <!<  (‘a' -> ‘b')
//│ ╟── while constraining:  (‹∀ 1. {(α291'' -> α292'') where: α284' <: ((α284',) -> α290'')}›,)  <!<  ((‘a' -> ‘b'),)
//│ ╟── while constraining:  ((‘a' -> ‘b') -> ((‘a' -> ‘b') & ‘c'))  <!<  ((‹∀ 1. {(α291'' -> α292'') where: α284' <: ((α284',) -> α290'')}›,) -> α293')
//│ ╟── while constraining:  ((‘a' -> ‘b') -> ((‘a' -> ‘b') & ‘c'))  <!<  α283'
//│ ╟── while constraining:  (((‘a' -> ‘b') -> ((‘a' -> ‘b') & ‘c')),)  <!<  (α283',)
//│ ╟── while constraining:  (α283' -> α294')  <!<  (((‘a' -> ‘b') -> ((‘a' -> ‘b') & ‘c')) -> ‘c')
//│ ╟── while constraining:  ‹∀ 0. (α247' -> α258')›  <!<  (((‘a' -> ‘b') -> ((‘a' -> ‘b') & ‘c')) -> ‘c')
//│ ╙── while constraining:  ‹∀ 0. (α247' -> α258')›  <!<  ‹∀ 0. ((('a21' -> 'b22') -> (('a21' -> 'b22') & 'c23')) -> 'c23')›
//│  = [Function: z2]

