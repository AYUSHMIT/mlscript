
// * Strangely, why Y does not work (cycle check error),
// * Z type checks find thanks to recursive types...


def z: (('a -> 'b) -> (('a -> 'b) & 'c)) -> 'c
//│ z: (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = <missing implementation>

// :e // Works since inconsistent constrained types...
def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ((forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'a -> 'b -> 'c)) -> 'd) -> 'd
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│  = [Function: z]


def pow1 = z (fun pow0 -> fun n -> fun x ->
    if n > 0 then pow0 (n - 1) x * x
    else 1
  )
//│ pow1: int -> int -> int
//│     = [Function (anonymous)]

pow1 3 4
//│ res: int
//│    = 64


:e
z (fun self -> 1)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.34: 	z (fun self -> 1)
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `1` is not a function
//│ ║  l.34: 	z (fun self -> 1)
//│ ║        	               ^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.6: 	def z: (('a -> 'b) -> (('a -> 'b) & 'c)) -> 'c
//│ ║       	                       ^^^^^^^^^^
//│ ╟── from intersection type:
//│ ║  l.6: 	def z: (('a -> 'b) -> (('a -> 'b) & 'c)) -> 'c
//│ ╙──     	                      ^^^^^^^^^^^^^^^^^
//│ res: error
//│    = 1


zid = z (fun self -> id)
//│ zid: 'a -> 'a
//│    = [Function: id]

zid 1
//│ res: 1
//│    = 1


zargs = z (fun self -> fun x -> self)
//│ zargs: 'b
//│   where
//│     'b :> anything -> 'b
//│      = [Function (anonymous)]

zargs 1
//│ res: 'b
//│   where
//│     'b :> anything -> 'b
//│    = [Function (anonymous)]

zargs 1 2 3 4
//│ res: 'b
//│   where
//│     'b :> anything -> 'b
//│    = [Function (anonymous)]


loop = z (fun self -> self)
//│ loop: anything -> nothing
//│     = [Function (anonymous)]

:re
loop 1
//│ res: nothing
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded


def pow pow n x =
    if n > 0 then pow (n - 1) x * x
    else 1
//│ pow: (int -> 'a -> int) -> int -> (int & 'a) -> int
//│    = [Function: pow]

def pow = z pow
pow 3 4
//│ pow: int -> int -> int
//│    = [Function (anonymous)]
//│ res: int
//│    = 64


def oops = z (fun f -> f)
//│ oops: anything -> nothing
//│     = [Function (anonymous)]

:re
oops 1
//│ res: nothing
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded



:NoRecursiveTypes

:e
def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ((forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'a -> 'b -> 'c)) -> 'd) -> 'd
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition; a type annotation may be required
//│ ║  l.119: 	def z =
//│ ║         	^^^^^^^
//│ ║  l.120: 	  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. {(α302_342' -> α309_346'') where: α293_340' <: ((‹∀ 2. {(α303_344''' -> α305_345''') where: α302_342' <: ((α302_342',) -> α304_343''')}›,) -> α309_346'')}›  <:  ((α302_342',) -> α304_360')    PolymorphicType  FunctionType
//│ ╙──  ... looks like:  ‹∀ 1. {(α302_310'' -> α309_314'') where: α293' <: ((‹∀ 2. {(α303_312''' -> α305_313''') where: α302_310'' <: ((α302_310'',) -> α304_311''')}›,) -> α309_314'')}›  <:  ((α302_310'',) -> α304_343''')
//│  = [Function: z1]

:NoCycleCheck

// Exceeds recursion depth limit:
// :e
// FIXME should be caught by cycle checker!
def z =
  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ((forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'a -> 'b -> 'c)) -> 'd) -> 'd
//│   <:  z:
//│ (('a -> 'b) -> ('a -> 'b & 'c)) -> 'c
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?d, ?e, ?f, ?g. ?e -> ?d <: forall ?a, ?b, ?c. ((?a -> ?b) -> (?a -> ?b & ?c)) -> ?c` exceeded recursion depth limit (300)
//│ ║  l.141: 	def z =
//│ ║         	^^^^^^^
//│ ║  l.142: 	  (fun f -> (fun x -> f (fun v -> (x x) v)) (fun x -> f (fun v -> (x x) v)))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. {(α372_412' -> α379_416'') where: α363_410' <: ((‹∀ 2. {(α373_414''' -> α375_415''') where: α372_412' <: ((α372_412',) -> α374_413''')}›,) -> α379_416'')}›  <!<  ((α372_412',) -> α374_490')
//│ ╟── while constraining:  α372_412'  <!<  ((α372_412',) -> α374_490')
//│ ╟── while constraining:  {(α373_491' -> α375_492') where: α372_412' <: ((α372_412',) -> α374_490')}  <!<  (‘a' -> ‘b')
//│ ╟── while constraining:  ‹∀ 2. {(α373_414''' -> α375_415''') where: α372_412' <: ((α372_412',) -> α374_413''')}›  <!<  (‘a' -> ‘b')
//│ ╟── while constraining:  (‹∀ 2. {(α373_414''' -> α375_415''') where: α372_412' <: ((α372_412',) -> α374_413''')}›,)  <!<  ((‘a' -> ‘b'),)
//│ ╟── while constraining:  ((‘a' -> ‘b') -> ((‘a' -> ‘b') & ‘c'))  <!<  ((‹∀ 2. {(α373_414''' -> α375_415''') where: α372_412' <: ((α372_412',) -> α374_413''')}›,) -> α379_489')
//│ ╟── while constraining:  α363_410'  <!<  ((‹∀ 2. {(α373_414''' -> α375_415''') where: α372_412' <: ((α372_412',) -> α374_413''')}›,) -> α379_489')
//│ ╟── while constraining:  {(α372_412' -> α379_489') where: α363_410' <: ((‹∀ 2. {(α373_414''' -> α375_415''') where: α372_412' <: ((α372_412',) -> α374_413''')}›,) -> α379_489')}  <!<  ((α372_412',) -> α374_486')
//│ ╟── while constraining:  ‹∀ 1. {(α372_412' -> α379_416'') where: α363_410' <: ((‹∀ 2. {(α373_414''' -> α375_415''') where: α372_412' <: ((α372_412',) -> α374_413''')}›,) -> α379_416'')}›  <!<  ((α372_412',) -> α374_486')
//│ ╟── while constraining:  α372_412'  <!<  ((α372_412',) -> α374_486')
//│ ╟── while constraining:  {(α373_487' -> α375_488') where: α372_412' <: ((α372_412',) -> α374_486')}  <!<  (‘a' -> ‘b')
//│ ╟── while constraining:  ‹∀ 2. {(α373_414''' -> α375_415''') where: α372_412' <: ((α372_412',) -> α374_413''')}›  <!<  (‘a' -> ‘b')
//│ ╟── while constraining:  (‹∀ 2. {(α373_414''' -> α375_415''') where: α372_412' <: ((α372_412',) -> α374_413''')}›,)  <!<  ((‘a' -> ‘b'),)
//│ ╟── while constraining:  ((‘a' -> ‘b') -> ((‘a' -> ‘b') & ‘c'))  <!<  ((‹∀ 2. {(α373_414''' -> α375_415''') where: α372_412' <: ((α372_412',) -> α374_413''')}›,) -> α379_485')
//│ ╟── while constraining:  α363_410'  <!<  ((‹∀ 2. {(α373_414''' -> α375_415''') where: α372_412' <: ((α372_412',) -> α374_413''')}›,) -> α379_485')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  α364_411'  <!<  α372_412'
//│ ╟── while constraining:  (α364_411',)  <!<  (α372_412',)
//│ ╟── while constraining:  (α372_412' -> α379_425')  <!<  ((α364_411',) -> α366_422')
//│ ╟── while constraining:  {(α372_412' -> α379_425') where: α363_410' <: ((‹∀ 2. {(α373_414''' -> α375_415''') where: α372_412' <: ((α372_412',) -> α374_413''')}›,) -> α379_425')}  <!<  ((α364_411',) -> α366_422')
//│ ╟── while constraining:  ‹∀ 1. {(α372_412' -> α379_416'') where: α363_410' <: ((‹∀ 2. {(α373_414''' -> α375_415''') where: α372_412' <: ((α372_412',) -> α374_413''')}›,) -> α379_416'')}›  <!<  ((α364_411',) -> α366_422')
//│ ╟── while constraining:  α364_411'  <!<  ((α364_411',) -> α366_422')
//│ ╟── while constraining:  {(α365_423' -> α367_424') where: α364_411' <: ((α364_411',) -> α366_422')}  <!<  (‘a' -> ‘b')
//│ ╟── while constraining:  ‹∀ 1. {(α365_418'' -> α367_419'') where: α364_411' <: ((α364_411',) -> α366_417'')}›  <!<  (‘a' -> ‘b')
//│ ╟── while constraining:  (‹∀ 1. {(α365_418'' -> α367_419'') where: α364_411' <: ((α364_411',) -> α366_417'')}›,)  <!<  ((‘a' -> ‘b'),)
//│ ╟── while constraining:  ((‘a' -> ‘b') -> ((‘a' -> ‘b') & ‘c'))  <!<  ((‹∀ 1. {(α365_418'' -> α367_419'') where: α364_411' <: ((α364_411',) -> α366_417'')}›,) -> α371_420')
//│ ╟── while constraining:  ((‘a' -> ‘b') -> ((‘a' -> ‘b') & ‘c'))  <!<  α363_410'
//│ ╟── while constraining:  (((‘a' -> ‘b') -> ((‘a' -> ‘b') & ‘c')),)  <!<  (α363_410',)
//│ ╟── while constraining:  (α363_410' -> α385_421')  <!<  (((‘a' -> ‘b') -> ((‘a' -> ‘b') & ‘c')) -> ‘c')
//│ ╟── while constraining:  ‹∀ 0. (α363' -> α385')›  <!<  (((‘a' -> ‘b') -> ((‘a' -> ‘b') & ‘c')) -> ‘c')
//│ ╙── while constraining:  ‹∀ 0. (α363' -> α385')›  <!<  ‹∀ 0. ((('a21_24' -> 'b22_25') -> (('a21_24' -> 'b22_25') & 'c23_26')) -> 'c23_26')›
//│  = [Function: z2]

