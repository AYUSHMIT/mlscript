:PreTyper

abstract class Option[out T]: Some[T] | None
class Some[out T](value: T) extends Option[T]
module None extends Option[nothing]
//│ abstract class Option[T]: None | Some[T]
//│ class Some[T](value: T) extends Option
//│ module None extends Option

abstract class List[out T]: Cons[T] | Nil
class Cons[out T](head: T, tail: List[T]) extends List[T]
module Nil extends List[nothing]
//│ abstract class List[T]: Cons[T] | Nil
//│ class Cons[T](head: T, tail: List[T]) extends List
//│ module Nil extends List

fun sum(acc, xs) = 
  if xs is
    Cons(x, xs) then sum(acc + x, xs)
    Nil then acc
//│ fun sum: (Int, Cons[Int] | Nil) -> Int

// FIXME: Remove redundant `_ -> (ucs$args_xs$Some_0$Cons).1`.
// Why are they everywhere?
:ucs:postprocess.result
fun test(xs) =
  if xs is
    Some(Cons("add", Cons(x, Cons(y, Nil)))) then x + y
    Some(Cons("mul", Cons(x, Cons(y, Nil)))) then x * y
    Some(Cons("sum", xs)) then sum(0, xs)
    Some(Nil) then "nothing"
    None then "nothing"
//│ | | | | | | | Post-processed UCS term:
//│ | | | | | | | case xs*‡ of
//│ | | | | | | |   Some*◊ ->
//│ | | | | | | |     let ucs$args_xs$Some*† = (Some).unapply(xs,)
//│ | | | | | | |     let xs$Some_0*‡ = (ucs$args_xs$Some).0
//│ | | | | | | |     case xs$Some_0*‡ of
//│ | | | | | | |       Cons*◊ ->
//│ | | | | | | |         let ucs$args_xs$Some_0$Cons*† = (Cons).unapply(xs$Some_0,)
//│ | | | | | | |         let xs$Some_0$Cons_0*‡ = (ucs$args_xs$Some_0$Cons).0
//│ | | | | | | |         let xs$Some_0$Cons_1*‡ = (ucs$args_xs$Some_0$Cons).1
//│ | | | | | | |         case xs$Some_0$Cons_0*‡ of
//│ | | | | | | |           "add" ->
//│ | | | | | | |             case xs$Some_0$Cons_1*‡ of
//│ | | | | | | |               Cons*◊ ->
//│ | | | | | | |                 let ucs$args_xs$Some_0$Cons_1$Cons*† = (Cons).unapply(xs$Some_0$Cons_1,)
//│ | | | | | | |                 let x*‡ = (ucs$args_xs$Some_0$Cons_1$Cons).0
//│ | | | | | | |                 let xs$Some_0$Cons_1$Cons_1*‡ = (ucs$args_xs$Some_0$Cons_1$Cons).1
//│ | | | | | | |                 case xs$Some_0$Cons_1$Cons_1*‡ of
//│ | | | | | | |                   Cons*◊ ->
//│ | | | | | | |                     let ucs$args_xs$Some_0$Cons_1$Cons_1$Cons*† = (Cons).unapply(xs$Some_0$Cons_1$Cons_1,)
//│ | | | | | | |                     let y*‡ = (ucs$args_xs$Some_0$Cons_1$Cons_1$Cons).0
//│ | | | | | | |                     let xs$Some_0$Cons_1$Cons_1$Cons_1*‡ = (ucs$args_xs$Some_0$Cons_1$Cons_1$Cons).1
//│ | | | | | | |                     case xs$Some_0$Cons_1$Cons_1$Cons_1*‡ of
//│ | | | | | | |                       Nil*† -> +(x, y,)
//│ | | | | | | |                       _ -> (ucs$args_xs$Some_0$Cons).1
//│ | | | | | | |                   _ -> (ucs$args_xs$Some_0$Cons).1
//│ | | | | | | |               _ -> (ucs$args_xs$Some_0$Cons).1
//│ | | | | | | |           "sum" ->
//│ | | | | | | |             let xs*‡ = (ucs$args_xs$Some_0$Cons).1
//│ | | | | | | |             sum(0, xs,)
//│ | | | | | | |           "mul" ->
//│ | | | | | | |             case xs$Some_0$Cons_1*‡ of
//│ | | | | | | |               Cons*◊ ->
//│ | | | | | | |                 let ucs$args_xs$Some_0$Cons_1$Cons*† = (Cons).unapply(xs$Some_0$Cons_1,)
//│ | | | | | | |                 let x*‡ = (ucs$args_xs$Some_0$Cons_1$Cons).0
//│ | | | | | | |                 let xs$Some_0$Cons_1$Cons_1*‡ = (ucs$args_xs$Some_0$Cons_1$Cons).1
//│ | | | | | | |                 case xs$Some_0$Cons_1$Cons_1*‡ of
//│ | | | | | | |                   Cons*◊ ->
//│ | | | | | | |                     let ucs$args_xs$Some_0$Cons_1$Cons_1$Cons*† = (Cons).unapply(xs$Some_0$Cons_1$Cons_1,)
//│ | | | | | | |                     let y*‡ = (ucs$args_xs$Some_0$Cons_1$Cons_1$Cons).0
//│ | | | | | | |                     let xs$Some_0$Cons_1$Cons_1$Cons_1*‡ = (ucs$args_xs$Some_0$Cons_1$Cons_1$Cons).1
//│ | | | | | | |                     case xs$Some_0$Cons_1$Cons_1$Cons_1*‡ of
//│ | | | | | | |                       Nil*† -> *(x, y,)
//│ | | | | | | |                       _ -> (ucs$args_xs$Some_0$Cons).1
//│ | | | | | | |                   _ -> (ucs$args_xs$Some_0$Cons).1
//│ | | | | | | |               _ -> (ucs$args_xs$Some_0$Cons).1
//│ | | | | | | |       Nil*† -> "nothing"
//│ | | | | | | |   None*† -> "nothing"
//│ fun test: (None | Some[Cons[nothing] | Nil]) -> ("nothing" | Int | List[nothing])
