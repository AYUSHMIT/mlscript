:NoJS
:GeneralizeCurriedFunctions
:NoRecursiveTypes

// ============ Sec 4.2 ============
// alternative: separate `Cons` and `Nil` types with definition of `mem` and `fold_left`

// ------------ Dummy classes to represent the types in the examples ------------

class Nil: {}
class Cons[a]: { head: a; tail: List[a] }
type List[a] = Nil | Cons[a]
//│ Defined class Nil
//│ Defined class Cons[+a]
//│ Defined type alias List[+a]

def Nil = Nil {}
//│ Nil: Nil

def Cons head tail = Cons { head; tail }
//│ Cons: 'b -> (List['a] & 'tail) -> (Cons['a | 'b] with {head: 'b, tail: 'tail})

// ------------ Type signatures for functions used in the examples ------------
// (I guess)

rec def mem x l = case l of
  { Nil -> false
  | Cons -> if eq l.head x then true else mem x l.tail
  }
//│ mem: anything -> 'tail -> bool
//│   where
//│     'tail <: (Cons[?] with {tail: 'tail}) | Nil

rec def fold_left f x l = case l of
  { Nil -> x
  | Cons -> fold_left f (f x l.head) l.tail
  }
//│ fold_left: ('a -> 'head -> 'b & 'b -> 'head0 -> 'b) -> 'a -> ((Cons[?] with {head: 'head, tail: 'tail}) | Nil) -> ('a | 'b)
//│   where
//│     'tail <: (Cons[?] with {head: 'head0, tail: 'tail}) | Nil

// ------------ polymorphic methods ------------

:RecursiveTypes // needed for these recursive defs uses

class Collection[a]: { l: List[a] }
  method Mem x = mem x this.l
  method Fold f x = fold_left f x this.l
//│ Defined class Collection[+a]
//│ Defined Collection.Mem: Collection[?] -> anything -> bool
//│ Defined Collection.Fold: Collection['a] -> ('b -> 'a -> ('b & 'c) & 'd -> 'a -> ('b & 'c)) -> 'd -> ('c | 'd)

def coll_mem c x = c.Mem x
//│ coll_mem: Collection[?] -> anything -> bool

// typo in the paper? it was `fun x -> fun y -> ...`
def simple_and_double c =
  let l1 = c.Fold (fun y -> fun x -> Cons x y) Nil in
  let l2 = c.Fold (fun y -> fun x -> Cons ((x, x),) y) Nil in
  (l1, l2)
//│ simple_and_double: Collection['a | 'a0] -> (forall 'b. Nil | 'b, forall 'c. Nil | 'c,)
//│   where
//│     'c :> (Cons[('a0, 'a0,)] with {tail: Nil}) | (Cons[('a0, 'a0,)] with {tail: 'c})
//│     'b :> (Cons['a] with {tail: Nil}) | (Cons['a] with {tail: 'b})
