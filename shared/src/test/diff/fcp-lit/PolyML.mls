:GeneralizeCurriedFunctions
:NoRecursiveTypes

// ============ Sec 1.1 ============

// i.e. auto
g = fun (f: forall 'a. 'a -> 'a) -> f f
g' = fun f -> f f
//│ g: (forall 'a. 'a -> 'a) -> (forall 'a. 'a -> 'a | 'b)
//│  = [Function: g]
//│ g': ('a -> 'b & 'a) -> 'b
//│   = [Function: g$]

// i.e. auto id (FreezeML F5)
(fun (f: forall 'a. 'a -> 'a) -> f f) (fun x -> x)
(fun f -> f f) (fun x -> x)
//│ res: 'a -> 'a
//│    = [Function (anonymous)]
//│ res: 'a -> 'a
//│    = [Function (anonymous)]

// i.e. (fun auto -> auto id) auto
(fun g -> g (fun x -> x)) (fun f -> f f)
(fun g -> g (fun x -> x)) (fun (f: forall 'a. 'a -> 'a) -> f f)
//│ res: 'a -> 'a
//│    = [Function (anonymous)]
//│ res: 'a -> 'a
//│    = [Function (anonymous)]

// ============ Sec 1.2 ============

fun f -> f (g f)
fun f -> f (g' f)
//│ res: (forall 'a. (forall 'a. 'a -> 'a) -> 'b & 'a -> 'a) -> 'b
//│    = [Function: res]
//│ res: ('a -> 'b & 'c -> 'a & 'c) -> 'b
//│    = [Function: res]

// ============ Sec 4.1 ============

let f = fun x -> x in 
  let g = (fun x -> x) f in
    g g
//│ res: 'a -> 'a
//│    = [Function (anonymous)]

:NoJS

// ============ Sec 4.2 ============
// using FCP to solve method typing issues,
// which is overkill since it can be solved with subtyping and two levels of polymorphism...
// all of the following are typable in the main branch

// ------------ Dummy classes to represent the types in the examples ------------

class List[a]
  method Get: a
//│ Defined class List[+a]
//│ Declared List.Get: List['a] -> 'a

// Used to represent `::` in the papers
def cons[a]: a -> List[a] -> List[a]
//│ cons: 'a -> List['a] -> List['a]

// Used to represent `[]` in the papers
def nil: List['a]
//│ nil: List[nothing]

def match_list: forall 'a 'b. List['a] -> 'b -> ('a -> List['a] -> 'b) -> 'b
//│ match_list: List['a] -> 'b -> ('a -> List['a] -> 'b) -> 'b

// ------------ Type signatures for functions used in the examples ------------
// (I guess)

def mem[a]: a -> List[a] -> bool
//│ mem: anything -> List[?] -> bool

:RecursiveTypes // needed for this recursive def
rec def mem x l = match_list l false (fun head -> fun tail -> if eq head x then true else mem x tail)
//│ 'b -> (forall 'a, 'c, 'd, 'e. (List['a & 'c] & 'd) -> (false | true | 'e))
//│   <:  mem:
//│ anything -> List[?] -> bool
:NoRecursiveTypes




// def fold_left[a, b]: (a -> b -> a) -> a -> List[b] -> a
def fold_left: forall 'a 'b. ('a -> 'b -> 'a) -> 'a -> List['b] -> 'a
//│ fold_left: ('a -> 'b -> 'a) -> 'a -> List['b] -> 'a

rec def fl f x l = match_list l x (fun head -> fun tail -> fl f (f x head) tail)
//│ fl: ('b -> ('c -> ('d & 'e) & 'f) & 'g & 'e -> 'a -> 'e) -> (forall 'h. ('b & 'h) -> (forall 'a0, 'i, 'j, 'k. (List['c & 'a & 'a0 & 'i] & 'j) -> ('h | 'e | 'k)))

rec def fl2 f x l = match_list l x (fun head -> fun tail -> fold_left f (f x head) tail)
//│ fl2: ('c -> ('d -> ('e & 'a) & 'f) & 'a -> 'b -> ('a & 'a0) & 'g) -> (forall 'h. ('c & 'h) -> (forall 'a1, 'i, 'j, 'k, 'b0. (List['d & 'b & 'a1 & 'b0 & 'k] & 'j) -> ('a0 | 'h | 'e | 'i)))

:RecursiveTypes // needed for this recursive def
def fold_left = fl
//│ ('b -> ('c -> ('d & 'e) & 'f) & 'g & 'e -> 'a -> 'e) -> (forall 'h. ('b & 'h) -> (forall 'a0, 'i, 'j, 'k. (List['c & 'a & 'a0 & 'i] & 'j) -> ('h | 'e | 'k)))
//│   <:  fold_left:
//│ ('a -> 'b -> 'a) -> 'a -> List['b] -> 'a
:NoRecursiveTypes

// :e // FIXME? refreshing-extr
def fold_left = fl2
//│ ('c -> ('d -> ('e & 'a) & 'f) & 'a -> 'b -> ('a & 'a0) & 'g) -> (forall 'h. ('c & 'h) -> (forall 'i, 'b0, 'a1, 'j, 'k. (List['d & 'b & 'a1 & 'b0 & 'j] & 'k) -> ('a0 | 'h | 'e | 'i)))
//│   <:  fold_left:
//│ ('a -> 'b -> 'a) -> 'a -> List['b] -> 'a

// :d
// rec def fold_left f x l = match_list l x (fun head -> fun tail -> fold_left f (f x head) tail)

// ------------ polymorphic methods ------------

class Collection[a]: { l: List[a] }
  method Mem x = mem x this.l
  method Fold f x = fold_left f x this.l
//│ Defined class Collection[+a]
//│ Defined Collection.Mem: Collection['a] -> (forall 'a, 'b, 'c. ('b & 'a) -> (bool | 'c))
//│ Defined Collection.Fold: Collection['a] -> (forall 'a0, 'b, 'a1, 'c. ('a0 -> ('b | 'a) -> ('a0 & 'a1) & 'c) -> (forall 'd, 'a2, 'e. ('a0 & 'd & 'a2 & 'e) -> ('a1 | 'e)))

def coll_mem c x = c.Mem x
//│ coll_mem: (Collection['a] & 'b) -> (forall 'c, 'd, 'e, 'f. ('c & 'd & 'e) -> (bool | 'f))

// :e // FIXME — works with :RecursiveTypes
// :e // Works since inconsistent constrained types...
// 
// * Typo in the paper? it was `fun x -> fun y -> ...`
def simple_and_double c =
  let l1 = c.Fold (fun y -> fun x -> cons x y) nil in
  let l2 = c.Fold (fun y -> fun x -> cons ((x, x),) y) nil in
  (l1, l2)
//│ simple_and_double: (Collection['a | 'a0] & 'b) -> (forall 'c, 'd, 'e. List['a | 'c | 'd] | 'e, forall 'f, 'g, 'h, 'i. List[('a0 | 'g, 'a0 | 'g,) | 'h | 'i] | 'f,)

simple_and_double (Collection{l = cons 1 nil})
//│ res: (forall 'a, 'b, 'c. List[1 | 'a | 'b] | 'c, forall 'd, 'e, 'f, 'g. List[(1 | 'd, 1 | 'd,) | 'e | 'f] | 'g,)

// ------------ subtyping & methods ------------

class Float
class Color
class Point: { x: Float; y: Float }
class ColorPoint: Point & { c: Color }
class Circle: { x: Float; y: Float; r: Float }
  method Distance: Point -> Float
//│ Defined class Float
//│ Defined class Color
//│ Defined class Point
//│ Defined class ColorPoint
//│ Defined class Circle
//│ Declared Circle.Distance: Circle -> Point -> Float

c = error : Circle
cp = error : ColorPoint
c.Distance cp
//│ c: Circle
//│ cp: ColorPoint
//│ res: Float
