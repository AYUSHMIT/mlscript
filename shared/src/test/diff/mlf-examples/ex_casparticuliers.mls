:GeneralizeCurriedFunctions

// (*** L'annotation est n�cessaire sur z, mais z n'est utilis� qu'une seule fois. ***)
// type sid = ['a] 'a -> 'a
type Sid = forall 'a. 'a -> 'a
//│ Defined type alias Sid

// let t (z:sid) = ( (fun a -> z) : ['a,'b] 'b -> 'a -> 'a )
def t (z: Sid) = (fun a -> z) : forall 'a 'b. 'b -> 'a -> 'a
//│ t: Sid -> (forall 'a. anything -> 'a -> 'a)
//│  = [Function: t]

// (* Une seule instance, mais polymorphe. *)
// let t z = ( (fun a -> z) : ['a,'b] 'b -> 'a -> 'a );;
def t z = (fun a -> z) : forall 'a 'b. 'b -> 'a -> 'a
//│ t: (‘a -> ‘a) -> (forall 'a. anything -> 'a -> 'a)
//│  = [Function: t1]

def t z = fun a -> z
//│ t: 'a -> anything -> 'a
//│  = [Function: t2]


// (*** Ne type pas avec les value-restriction. Emb�tant. ***)

// type Int = ['a] ('a -> 'a) -> ('a -> 'a)
// ;;
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt

// let zero f x = x
// ;;
def zero f x = x
//│ zero: anything -> (forall 'a. 'a -> 'a)
//│     = [Function: zero]

// let succ (n:Int) = fun f x -> f (n f x)
// ;;
def succ_ty: ChurchInt -> ChurchInt
def succ (n: ChurchInt) = fun f -> fun x -> f (n f x)
def succ' n = fun f -> fun x -> f (n f x)
//│ succ_ty: ChurchInt -> ChurchInt
//│        = <missing implementation>
//│ succ: ChurchInt -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e)))
//│     = [Function: succ]
//│ succ': 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e. ('e -> 'd
//│   where
//│     'b <: 'c -> 'd
//│     'a <: 'b -> 'e -> 'c)))
//│      = [Function: succ]

// * Note: without constrained types we wouldn't get the principal type of succ'

// * Require distrib – see Scratch3
// :e
// succ_ty = succ
// succ_ty = succ'

// let rec to_church n =
//   if n = 0 then zero
//   else succ (to_church (n-1))
// ;;

def to_church_ty: int -> ChurchInt
//│ to_church_ty: int -> ChurchInt
//│             = <missing implementation>

// TODO why does the type inferred for the succ version with *annotated* param work *less* well?
:e
rec def to_church_1 n =
  if n == 0 then zero
  else succ (to_church_1 (n - 1))
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.73: 	rec def to_church_1 n =
//│ ║        	                    ^^^
//│ ║  l.74: 	  if n == 0 then zero
//│ ║        	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.75: 	  else succ (to_church_1 (n - 1))
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.28: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.28: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ to_church_1: int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. (('f & 'c) -> ('f | 'e)
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e)))
//│            = [Function: to_church_1]

rec def to_church_1 n =
  if n == 0 then zero
  else succ_ty (to_church_1 (n - 1))
//│ to_church_1: int -> (anything -> (forall 'a. 'a -> 'a) | ChurchInt)
//│            = <no result>
//│              succ_ty is not implemented

to_church_ty = to_church_1
//│ int -> (anything -> (forall 'a. 'a -> 'a) | ChurchInt)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = <no result>
//│               to_church_1 and succ_ty are not implemented

rec def to_church_2 n =
  if n == 0 then zero
  else succ' (to_church_2 (n - 1))
//│ to_church_2: int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. (('f & 'e) -> ('f | 'c)
//│   where
//│     'a <: 'b -> 'c
//│     'd <: 'a -> 'e -> 'b)))
//│            = [Function: to_church_1]

// FIXME see Scracth2_repro
// to_church_ty = to_church_2

// (* Marche *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1) : Int) f x)
// ;;
rec def to_church_3 n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_3 (n - 1) : ChurchInt) f x)
//│ to_church_3: int -> (forall 'b. 'b -> (forall 'b, 'a, 'c. (('c & 'a) -> 'c
//│   where
//│     'b <: 'a -> 'a & 'a -> 'c)))
//│            = [Function: to_church_3]

// (* Ne Marche Pas *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else (fun f x -> f ((to_church (n-1)) f x) : Int)
// ;;
rec def to_church_4 n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_4 (n - 1)) f x) : ChurchInt
//│ to_church_4: int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd. ('d -> (ChurchInt | 'd)
//│   where
//│     'a <: 'b -> ChurchInt
//│     'c <: 'a -> 'd -> 'b)))
//│            = [Function: to_church_4]


// (* La r�cursion est monomorphe. *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1)) f x)
// ;;
rec def to_church_5 n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_5 (n - 1)) f x)
//│ to_church_5: int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e. (('e & 'c) -> 'e
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e)))
//│            = [Function: to_church_5]


to_church_ty = to_church_1
//│ int -> (anything -> (forall 'a. 'a -> 'a) | ChurchInt)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = <no result>
//│               to_church_1 and succ_ty are not implemented

:e
to_church_ty = to_church_2
//│ int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. (('f & 'e) -> ('f | 'c)
//│   where
//│     'a <: 'b -> 'c
//│     'd <: 'a -> 'e -> 'b)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?to_church_2, ?d, ?e, ?f. ?to_church_2 <: int -> ChurchInt` exceeded recursion depth limit (400)
//│ ║  l.172: 	to_church_ty = to_church_2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  α469'  <!<  ((α676',) -> α677')
//│ ╟── while constraining:  α478'  <!<  ((α676',) -> α677')
//│ ╟── while constraining:  α494'  <!<  ((α676',) -> α677')
//│ ╟── while constraining:  α510'  <!<  ((α676',) -> α677')
//│ ╟── while constraining:  α526'  <!<  ((α676',) -> α677')
//│ ╟── while constraining:  α542'  <!<  ((α676',) -> α677')
//│ ╟── while constraining:  α558'  <!<  ((α676',) -> α677')
//│ ╟── while constraining:  α574'  <!<  ((α676',) -> α677')
//│ ╟── while constraining:  α590'  <!<  ((α676',) -> α677')
//│ ╟── while constraining:  α606'  <!<  ((α676',) -> α677')
//│ ╟── while constraining:  α622'  <!<  ((α676',) -> α677')
//│ ╟── while constraining:  α638'  <!<  ((α676',) -> α677')
//│ ╟── while constraining:  α654'  <!<  ((α676',) -> α677')
//│ ╟── while constraining:  α670'  <!<  ((α676',) -> α677')
//│ ╟── while constraining:  α670'  <!<  ((α672'',) -> α673'')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  α442'  <!<  ((α469',) -> α470')
//│ ╟── while constraining:  α442'  <!<  ((α460'',) -> α467'')
//│ ╟── while constraining:  {(α468'' -> α466'') where: α460'' <: ((α465'',) -> α466''), α442' <: ((α460'',) -> α467'')}  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 3. {(α464'''' -> α462'''') where: α460'' <: ((α461'''',) -> α462''''), α442' <: ((α460'',) -> α463'''')}›  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  (α460'' -> ‹∀ 3. {(α464'''' -> α462'''') where: α460'' <: ((α461'''',) -> α462''''), α442' <: ((α460'',) -> α463'''')}›)  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 2. (α441''' -> ‹∀ 3. {(α453'''' -> α451'''') where: α441''' <: ((α450'''',) -> α451''''), α442' <: ((α441''',) -> α452'''')}›)›  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 2. (α441''' -> ‹∀ 3. {(α453'''' -> α451'''') where: α441''' <: ((α450'''',) -> α451''''), α442' <: ((α441''',) -> α452'''')}›)›  <!<  ‹∀ 0. (('a49' -> 'a49') -> ('a49' -> 'a49'))›
//│ ╟── while constraining:  ‹∀ 2. (α441''' -> ‹∀ 3. {(α453'''' -> α451'''') where: α441''' <: ((α450'''',) -> α451''''), α442' <: ((α441''',) -> α452'''')}›)›  <!<  ChurchInt
//│ ╟── while constraining:  α457'  <!<  ChurchInt
//│ ╟── while constraining:  (α456' -> α457')  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 1. (α439'' -> α440'')›  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  to_church_2438'  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 0. to_church_2212'›  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_church_2212'››  <!<  (Int -> ChurchInt)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. to_church_2212'››  <!<  ‹∀ 0. (Int -> ChurchInt)›
//│ Runtime error:
//│   ReferenceError: to_church_2 is not defined

to_church_ty = to_church_3
//│ int -> (forall 'b. 'b -> (forall 'b, 'a, 'c. (('c & 'a) -> 'c
//│   where
//│     'b <: 'a -> 'a & 'a -> 'c)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_3]

:e
to_church_ty = to_church_4
//│ int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd. ('d -> (ChurchInt | 'd)
//│   where
//│     'a <: 'b -> ChurchInt
//│     'c <: 'a -> 'd -> 'b)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.226: 	to_church_ty = to_church_4
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a` is not a function
//│ ║  l.28: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.28: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                            ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from application:
//│ ║  l.141: 	  else fun f -> fun x -> f ((to_church_4 (n - 1)) f x) : ChurchInt
//│ ╙──       	                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.226: 	to_church_ty = to_church_4
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` is not a function
//│ ║  l.28: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.28: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                            ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from application:
//│ ║  l.141: 	  else fun f -> fun x -> f ((to_church_4 (n - 1)) f x) : ChurchInt
//│ ╙──       	                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?to_church_4, ?b, ?c, ?d. ?to_church_4 <: int -> ChurchInt` exceeded recursion depth limit (400)
//│ ║  l.226: 	to_church_ty = to_church_4
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  α1052'  <!<  ‘a''
//│ ╟── while constraining:  (α1052',)  <!<  (‘a'',)
//│ ╟── while constraining:  (‘a'' -> ‘a'')  <!<  ((α1052',) -> α1053')
//│ ╟── while constraining:  α764'  <!<  ((α1052',) -> α1053')
//│ ╟── while constraining:  α773'  <!<  ((α1052',) -> α1053')
//│ ╟── while constraining:  α790'  <!<  ((α1052',) -> α1053')
//│ ╟── while constraining:  α807'  <!<  ((α1052',) -> α1053')
//│ ╟── while constraining:  α824'  <!<  ((α1052',) -> α1053')
//│ ╟── while constraining:  α841'  <!<  ((α1052',) -> α1053')
//│ ╟── while constraining:  α858'  <!<  ((α1052',) -> α1053')
//│ ╟── while constraining:  α875'  <!<  ((α1052',) -> α1053')
//│ ╟── while constraining:  α892'  <!<  ((α1052',) -> α1053')
//│ ╟── while constraining:  α909'  <!<  ((α1052',) -> α1053')
//│ ╟── while constraining:  α926'  <!<  ((α1052',) -> α1053')
//│ ╟── while constraining:  α943'  <!<  ((α1052',) -> α1053')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  α744'  <!<  ((α764',) -> α765')
//│ ╟── while constraining:  α744'  <!<  ((α755'',) -> α762'')
//│ ╟── while constraining:  {(α763'' -> ChurchInt) where: α755'' <: ((α760'',) -> α761''), α744' <: ((α755'',) -> α762'')}  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 3. {(α759'''' -> ChurchInt) where: α755'' <: ((α756'''',) -> α757''''), α744' <: ((α755'',) -> α758'''')}›  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  (α755'' -> ‹∀ 3. {(α759'''' -> ChurchInt) where: α755'' <: ((α756'''',) -> α757''''), α744' <: ((α755'',) -> α758'''')}›)  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 2. (α743''' -> ‹∀ 3. {(α748'''' -> ChurchInt) where: α743''' <: ((α745'''',) -> α746''''), α744' <: ((α743''',) -> α747'''')}›)›  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 2. (α743''' -> ‹∀ 3. {(α748'''' -> ChurchInt) where: α743''' <: ((α745'''',) -> α746''''), α744' <: ((α743''',) -> α747'''')}›)›  <!<  ‹∀ 0. (('a49' -> 'a49') -> ('a49' -> 'a49'))›
//│ ╟── while constraining:  ‹∀ 2. (α743''' -> ‹∀ 3. {(α748'''' -> ChurchInt) where: α743''' <: ((α745'''',) -> α746''''), α744' <: ((α743''',) -> α747'''')}›)›  <!<  ChurchInt
//│ ╟── while constraining:  α752'  <!<  ChurchInt
//│ ╟── while constraining:  (α751' -> α752')  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 1. (α741'' -> α742'')›  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  to_church_4740'  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 0. to_church_4314'›  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_church_4314'››  <!<  (Int -> ChurchInt)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. to_church_4314'››  <!<  ‹∀ 0. (Int -> ChurchInt)›
//│             = [Function: to_church_4]

:e
to_church_ty = to_church_5
//│ int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e. (('e & 'c) -> 'e
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?to_church_5, ?b, ?c, ?d. ?to_church_5 <: int -> ChurchInt` exceeded recursion depth limit (400)
//│ ║  l.295: 	to_church_ty = to_church_5
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 2. (α1087''' -> ‹∀ 3. {(α1090'''' -> α1092'''') where: α1088' <: ((α1087''',) -> α1089''''), α1087''' <: ((α1091'''',) -> α1092'''')}›)›  <!<  ((α1397',) -> α1403')
//│ ╟── while constraining:  α1088'  <!<  ((α1397',) -> α1403')
//│ ╟── while constraining:  α1088'  <!<  ((α1397',) -> α1399'')
//│ ╟── while constraining:  {(α1400'' -> α1402'') where: α1088' <: ((α1397',) -> α1399''), α1397' <: ((α1401'',) -> α1402'')}  <!<  ((α1390',) -> α1391')
//│ ╟── while constraining:  ‹∀ 3. {(α1394'''' -> α1396'''') where: α1088' <: ((α1397',) -> α1398''''), α1397' <: ((α1395'''',) -> α1396'''')}›  <!<  ((α1390',) -> α1391')
//│ ╟── while constraining:  ‹∀ 3. {(α1394'''' -> α1396'''') where: α1088' <: ((α1397',) -> α1398''''), α1397' <: ((α1395'''',) -> α1396'''')}›  <!<  α1389'
//│ ╟── while constraining:  ‹∀ 3. {(α1394'''' -> α1396'''') where: α1088' <: ((α1392'',) -> α1393''''), α1392'' <: ((α1395'''',) -> α1396'''')}›  <!<  α1389'
//│ ╟── while constraining:  (α1392'' -> ‹∀ 3. {(α1394'''' -> α1396'''') where: α1088' <: ((α1392'',) -> α1393''''), α1392'' <: ((α1395'''',) -> α1396'''')}›)  <!<  ((α1383',) -> α1389')
//│ ╟── while constraining:  ‹∀ 2. (α1087''' -> ‹∀ 3. {(α1090'''' -> α1092'''') where: α1088' <: ((α1087''',) -> α1089''''), α1087''' <: ((α1091'''',) -> α1092'''')}›)›  <!<  ((α1383',) -> α1389')
//│ ╟── while constraining:  α1088'  <!<  ((α1383',) -> α1389')
//│ ╟── while constraining:  α1088'  <!<  ((α1383',) -> α1385'')
//│ ╟── while constraining:  {(α1386'' -> α1388'') where: α1088' <: ((α1383',) -> α1385''), α1383' <: ((α1387'',) -> α1388'')}  <!<  ((α1376',) -> α1377')
//│ ╟── while constraining:  ‹∀ 3. {(α1380'''' -> α1382'''') where: α1088' <: ((α1383',) -> α1384''''), α1383' <: ((α1381'''',) -> α1382'''')}›  <!<  ((α1376',) -> α1377')
//│ ╟── while constraining:  ‹∀ 3. {(α1380'''' -> α1382'''') where: α1088' <: ((α1383',) -> α1384''''), α1383' <: ((α1381'''',) -> α1382'''')}›  <!<  α1375'
//│ ╟── while constraining:  ‹∀ 3. {(α1380'''' -> α1382'''') where: α1088' <: ((α1378'',) -> α1379''''), α1378'' <: ((α1381'''',) -> α1382'''')}›  <!<  α1375'
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  α1088'  <!<  ((α1108',) -> α1109')
//│ ╟── while constraining:  α1088'  <!<  ((α1099'',) -> α1104'')
//│ ╟── while constraining:  {(α1105'' -> α1107'') where: α1088' <: ((α1099'',) -> α1104''), α1099'' <: ((α1106'',) -> α1107'')}  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 3. {(α1101'''' -> α1103'''') where: α1088' <: ((α1099'',) -> α1100''''), α1099'' <: ((α1102'''',) -> α1103'''')}›  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  (α1099'' -> ‹∀ 3. {(α1101'''' -> α1103'''') where: α1088' <: ((α1099'',) -> α1100''''), α1099'' <: ((α1102'''',) -> α1103'''')}›)  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 2. (α1087''' -> ‹∀ 3. {(α1090'''' -> α1092'''') where: α1088' <: ((α1087''',) -> α1089''''), α1087''' <: ((α1091'''',) -> α1092'''')}›)›  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 2. (α1087''' -> ‹∀ 3. {(α1090'''' -> α1092'''') where: α1088' <: ((α1087''',) -> α1089''''), α1087''' <: ((α1091'''',) -> α1092'''')}›)›  <!<  ‹∀ 0. (('a49' -> 'a49') -> ('a49' -> 'a49'))›
//│ ╟── while constraining:  ‹∀ 2. (α1087''' -> ‹∀ 3. {(α1090'''' -> α1092'''') where: α1088' <: ((α1087''',) -> α1089''''), α1087''' <: ((α1091'''',) -> α1092'''')}›)›  <!<  ChurchInt
//│ ╟── while constraining:  α1096'  <!<  ChurchInt
//│ ╟── while constraining:  (α1095' -> α1096')  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 1. (α1085'' -> α1086'')›  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  to_church_51084'  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 0. to_church_5356'›  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_church_5356'››  <!<  (Int -> ChurchInt)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. to_church_5356'››  <!<  ‹∀ 0. (Int -> ChurchInt)›
//│             = [Function: to_church_5]




// (* Echoue avec la value restriction. *)
// let rec (to_church:int -> Int) n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1)) f x)
// ;;


// * It seems this one may need polymorphic recursion...?
// *  ...but it's just a version with succ inlined!?
:e
rec def to_church_ty n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_ty (n - 1)) f x)
//│ int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e. (('e & 'c) -> 'e
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?to_church_ty, ?b, ?c, ?d. ?to_church_ty <: int -> ChurchInt` exceeded recursion depth limit (400)
//│ ║  l.352: 	rec def to_church_ty n =
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.353: 	  if n == 0 then fun f -> fun x -> x
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.354: 	  else fun f -> fun x -> f ((to_church_ty (n - 1)) f x)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 2. (α1460''' -> ‹∀ 3. {(α1463'''' -> α1465'''') where: α1461' <: ((α1460''',) -> α1462''''), α1460''' <: ((α1464'''',) -> α1465'''')}›)›  <!<  ((α1770',) -> α1776')
//│ ╟── while constraining:  α1461'  <!<  ((α1770',) -> α1776')
//│ ╟── while constraining:  α1461'  <!<  ((α1770',) -> α1772'')
//│ ╟── while constraining:  {(α1773'' -> α1775'') where: α1461' <: ((α1770',) -> α1772''), α1770' <: ((α1774'',) -> α1775'')}  <!<  ((α1763',) -> α1764')
//│ ╟── while constraining:  ‹∀ 3. {(α1767'''' -> α1769'''') where: α1461' <: ((α1770',) -> α1771''''), α1770' <: ((α1768'''',) -> α1769'''')}›  <!<  ((α1763',) -> α1764')
//│ ╟── while constraining:  ‹∀ 3. {(α1767'''' -> α1769'''') where: α1461' <: ((α1770',) -> α1771''''), α1770' <: ((α1768'''',) -> α1769'''')}›  <!<  α1762'
//│ ╟── while constraining:  ‹∀ 3. {(α1767'''' -> α1769'''') where: α1461' <: ((α1765'',) -> α1766''''), α1765'' <: ((α1768'''',) -> α1769'''')}›  <!<  α1762'
//│ ╟── while constraining:  (α1765'' -> ‹∀ 3. {(α1767'''' -> α1769'''') where: α1461' <: ((α1765'',) -> α1766''''), α1765'' <: ((α1768'''',) -> α1769'''')}›)  <!<  ((α1756',) -> α1762')
//│ ╟── while constraining:  ‹∀ 2. (α1460''' -> ‹∀ 3. {(α1463'''' -> α1465'''') where: α1461' <: ((α1460''',) -> α1462''''), α1460''' <: ((α1464'''',) -> α1465'''')}›)›  <!<  ((α1756',) -> α1762')
//│ ╟── while constraining:  α1461'  <!<  ((α1756',) -> α1762')
//│ ╟── while constraining:  α1461'  <!<  ((α1756',) -> α1758'')
//│ ╟── while constraining:  {(α1759'' -> α1761'') where: α1461' <: ((α1756',) -> α1758''), α1756' <: ((α1760'',) -> α1761'')}  <!<  ((α1749',) -> α1750')
//│ ╟── while constraining:  ‹∀ 3. {(α1753'''' -> α1755'''') where: α1461' <: ((α1756',) -> α1757''''), α1756' <: ((α1754'''',) -> α1755'''')}›  <!<  ((α1749',) -> α1750')
//│ ╟── while constraining:  ‹∀ 3. {(α1753'''' -> α1755'''') where: α1461' <: ((α1756',) -> α1757''''), α1756' <: ((α1754'''',) -> α1755'''')}›  <!<  α1748'
//│ ╟── while constraining:  ‹∀ 3. {(α1753'''' -> α1755'''') where: α1461' <: ((α1751'',) -> α1752''''), α1751'' <: ((α1754'''',) -> α1755'''')}›  <!<  α1748'
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 2. (α1460''' -> ‹∀ 3. {(α1463'''' -> α1465'''') where: α1461' <: ((α1460''',) -> α1462''''), α1460''' <: ((α1464'''',) -> α1465'''')}›)›  <!<  ((α1481',) -> α1482')
//│ ╟── while constraining:  α1461'  <!<  ((α1481',) -> α1482')
//│ ╟── while constraining:  α1461'  <!<  ((α1472'',) -> α1477'')
//│ ╟── while constraining:  {(α1478'' -> α1480'') where: α1461' <: ((α1472'',) -> α1477''), α1472'' <: ((α1479'',) -> α1480'')}  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 3. {(α1474'''' -> α1476'''') where: α1461' <: ((α1472'',) -> α1473''''), α1472'' <: ((α1475'''',) -> α1476'''')}›  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  (α1472'' -> ‹∀ 3. {(α1474'''' -> α1476'''') where: α1461' <: ((α1472'',) -> α1473''''), α1472'' <: ((α1475'''',) -> α1476'''')}›)  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 2. (α1460''' -> ‹∀ 3. {(α1463'''' -> α1465'''') where: α1461' <: ((α1460''',) -> α1462''''), α1460''' <: ((α1464'''',) -> α1465'''')}›)›  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 2. (α1460''' -> ‹∀ 3. {(α1463'''' -> α1465'''') where: α1461' <: ((α1460''',) -> α1462''''), α1460''' <: ((α1464'''',) -> α1465'''')}›)›  <!<  ‹∀ 0. (('a49' -> 'a49') -> ('a49' -> 'a49'))›
//│ ╟── while constraining:  ‹∀ 2. (α1460''' -> ‹∀ 3. {(α1463'''' -> α1465'''') where: α1461' <: ((α1460''',) -> α1462''''), α1460''' <: ((α1464'''',) -> α1465'''')}›)›  <!<  ChurchInt
//│ ╟── while constraining:  α1469'  <!<  ChurchInt
//│ ╟── while constraining:  (α1468' -> α1469')  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 1. (α1458'' -> α1459'')›  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  to_church_ty1457'  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 0. to_church_ty1413'›  <!<  (Int -> ChurchInt)
//│ ╙── while constraining:  ‹∀ 0. to_church_ty1413'›  <!<  ‹∀ 0. (Int -> ChurchInt)›
//│             = [Function: to_church_ty5]

// * ... since we can fix it by using the annotation for rec calls:
def to_church_ty n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_ty (n - 1)) f x)
//│ int -> (forall 'b. 'b -> (forall 'b, 'a, 'c. (('c & 'a) -> 'c
//│   where
//│     'b <: 'a -> 'a & 'a -> 'c)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_ty6]


// (* �a coince. *)
// let tc n = (to_church n : Int);;
def tc n = to_church_ty n : ChurchInt
def tc n = to_church_1 n : ChurchInt
def tc n = to_church_2 n : ChurchInt
def tc n = to_church_3 n : ChurchInt
//│ tc: int -> ChurchInt
//│   = [Function: tc]
//│ tc: int -> ChurchInt
//│   = <no result>
//│     to_church_1 and succ_ty are not implemented
//│ tc: int -> ChurchInt
//│   where
//│     'a <: (‘a -> ‘a) -> ‘a -> ‘a
//│   = [Function: tc1]
//│ tc: int -> ChurchInt
//│   = [Function: tc2]

// (* Duplicate with to_church1 ("Marche") above *)
// (* Avec la value restriction : �a passe. *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1) : Int) f x)


// (*** Les annotations de type ne commutent pas. ***)
// type sid = ['a] 'a -> 'a
// type z = ['a,'b] ('a -> 'b) -> ('a -> 'b)
type Z = forall 'a 'b. ('a -> 'b) -> ('a -> 'b)
//│ Defined type alias Z

// let f x = (x:sid), ((x:sid):z)
def f x = ((x : Sid), ((x : Sid) : Z))
//│ f: Sid -> (Sid, Z,)
//│  = [Function: f]

// (* Ne type pas ... c'est une instance polymorphe. Interdit. *)
// untype fun x -> (x:sid), (x:z)
fun x -> ((x : Sid), (x : Z))
//│ res: (Sid & Z) -> (Sid, Z,)
//│    = [Function: res]

