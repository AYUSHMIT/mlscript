:GeneralizeCurriedFunctions
:DistributeForalls

// (*** L'annotation est n�cessaire sur z, mais z n'est utilis� qu'une seule fois. ***)
// type sid = ['a] 'a -> 'a
type Sid = forall 'a. 'a -> 'a
//│ Defined type alias Sid

// let t (z:sid) = ( (fun a -> z) : ['a,'b] 'b -> 'a -> 'a )
def t (z: Sid) = (fun a -> z) : forall 'a 'b. 'b -> 'a -> 'a
//│ t: Sid -> (forall 'a. anything -> 'a -> 'a)
//│  = [Function: t]

// (* Une seule instance, mais polymorphe. *)
// let t z = ( (fun a -> z) : ['a,'b] 'b -> 'a -> 'a );;
def t z = (fun a -> z) : forall 'a 'b. 'b -> 'a -> 'a
//│ t: (‘a -> ‘a) -> (forall 'a. anything -> 'a -> 'a)
//│  = [Function: t1]

def t z = fun a -> z
//│ t: 'a -> anything -> 'a
//│  = [Function: t2]


// (*** Ne type pas avec les value-restriction. Emb�tant. ***)

// type Int = ['a] ('a -> 'a) -> ('a -> 'a)
// ;;
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt

// let zero f x = x
// ;;
def zero f x = x
//│ zero: anything -> (forall 'a. 'a -> 'a)
//│     = [Function: zero]

// let succ (n:Int) = fun f x -> f (n f x)
// ;;
def succ_ty: ChurchInt -> ChurchInt
def succ (n: ChurchInt) = fun f -> fun x -> f (n f x)
def succ' n = fun f -> fun x -> f (n f x)
//│ succ_ty: ChurchInt -> ChurchInt
//│        = <missing implementation>
//│ succ: ChurchInt -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e)))
//│     = [Function: succ]
//│ succ': 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e. ('e -> 'd
//│   where
//│     'b <: 'c -> 'd
//│     'a <: 'b -> 'e -> 'c)))
//│      = [Function: succ]

// * Note: without constrained types we wouldn't get the principal type of succ'

// * Require distrib – see Scratch3
// :e
// succ_ty = succ
// succ_ty = succ'

// let rec to_church n =
//   if n = 0 then zero
//   else succ (to_church (n-1))
// ;;

def to_church_ty: int -> ChurchInt
//│ to_church_ty: int -> ChurchInt
//│             = <missing implementation>

// * NOTE:
// *  The type inferred for the succ version with *annotated* param seems less powerful
// *  as the following only successfully type checks with `:DistributeForalls`:
rec def to_church_1 n =
  if n == 0 then zero
  else succ (to_church_1 (n - 1))
//│ to_church_1: int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. (('f & 'c) -> ('f | 'e)
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e)))
//│            = [Function: to_church_1]

rec def to_church_1 n =
  if n == 0 then zero
  else succ_ty (to_church_1 (n - 1))
//│ to_church_1: int -> (anything -> (forall 'a. 'a -> 'a) | ChurchInt)
//│            = <no result>
//│              succ_ty is not implemented

to_church_ty = to_church_1
//│ int -> (anything -> (forall 'a. 'a -> 'a) | ChurchInt)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = <no result>
//│               to_church_1 and succ_ty are not implemented

rec def to_church_2 n =
  if n == 0 then zero
  else succ' (to_church_2 (n - 1))
//│ to_church_2: int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. (('f & 'e) -> ('f | 'c)
//│   where
//│     'a <: 'b -> 'c
//│     'd <: 'a -> 'e -> 'b)))
//│            = [Function: to_church_1]

// FIXME see Scracth2_repro
// to_church_ty = to_church_2

// (* Marche *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1) : Int) f x)
// ;;
rec def to_church_3 n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_3 (n - 1) : ChurchInt) f x)
//│ to_church_3: int -> (forall 'b. 'b -> (forall 'b, 'a, 'c. (('c & 'a) -> 'c
//│   where
//│     'b <: 'a -> 'a & 'a -> 'c)))
//│            = [Function: to_church_3]

// (* Ne Marche Pas *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else (fun f x -> f ((to_church (n-1)) f x) : Int)
// ;;
rec def to_church_4 n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_4 (n - 1)) f x) : ChurchInt
//│ to_church_4: int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd. ('d -> (ChurchInt | 'd)
//│   where
//│     'a <: 'b -> ChurchInt
//│     'c <: 'a -> 'd -> 'b)))
//│            = [Function: to_church_4]


// (* La r�cursion est monomorphe. *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1)) f x)
// ;;
rec def to_church_5 n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_5 (n - 1)) f x)
//│ to_church_5: int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e. (('c & 'e) -> 'c
//│   where
//│     'a <: 'b -> 'c
//│     'd <: 'a -> 'e -> 'b)))
//│            = [Function: to_church_5]


to_church_ty = to_church_1
//│ int -> (anything -> (forall 'a. 'a -> 'a) | ChurchInt)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = <no result>
//│               to_church_1 and succ_ty are not implemented

:e
to_church_ty = to_church_2
//│ int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. (('f & 'e) -> ('f | 'c)
//│   where
//│     'a <: 'b -> 'c
//│     'd <: 'a -> 'e -> 'b)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?to_church_2, ?d, ?e, ?f. ?to_church_2 <: int -> ChurchInt` exceeded recursion depth limit (400)
//│ ║  l.161: 	to_church_ty = to_church_2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (‘a'' -> ‘a'')  <!<  ((α593'',) -> α594'')
//│ ╟── while constraining:  α588''  <!<  ((α593'',) -> α594'')
//│ ╟── while constraining:  {(α596'' -> α594'') where: α588'' <: ((α593'',) -> α594''), α451'' <: ((α588'',) -> α595'')}  <!<  ((α587'',) -> α584'')
//│ ╟── while constraining:  ‹∀ 3. {(α592'''' -> α590'''') where: α588'' <: ((α589'''',) -> α590''''), α451'' <: ((α588'',) -> α591'''')}›  <!<  ((α587'',) -> α584'')
//│ ╟── while constraining:  ‹∀ 3. {(α592'''' -> α590'''') where: α588'' <: ((α589'''',) -> α590''''), α451'' <: ((α588'',) -> α591'''')}›  <!<  α586''
//│ ╟── while constraining:  (α588'' -> ‹∀ 3. {(α592'''' -> α590'''') where: α588'' <: ((α589'''',) -> α590''''), α451'' <: ((α588'',) -> α591'''')}›)  <!<  ((α579'',) -> α586'')
//│ ╟── while constraining:  ‹∀ 2. (α450''' -> ‹∀ 3. {(α455'''' -> α453'''') where: α450''' <: ((α452'''',) -> α453''''), α451'' <: ((α450''',) -> α454'''')}›)›  <!<  ((α579'',) -> α586'')
//│ ╟── while constraining:  α449''  <!<  ((α579'',) -> α586'')
//│ ╟── while constraining:  α451''  <!<  ((α579'',) -> α586'')
//│ ╟── while constraining:  {(α587'' -> α585'') where: α579'' <: ((α584'',) -> α585''), α451'' <: ((α579'',) -> α586'')}  <!<  ((α578'',) -> α575'')
//│ ╟── while constraining:  ‹∀ 3. {(α583'''' -> α581'''') where: α579'' <: ((α580'''',) -> α581''''), α451'' <: ((α579'',) -> α582'''')}›  <!<  ((α578'',) -> α575'')
//│ ╟── while constraining:  ‹∀ 3. {(α583'''' -> α581'''') where: α579'' <: ((α580'''',) -> α581''''), α451'' <: ((α579'',) -> α582'''')}›  <!<  α577''
//│ ╟── while constraining:  (α579'' -> ‹∀ 3. {(α583'''' -> α581'''') where: α579'' <: ((α580'''',) -> α581''''), α451'' <: ((α579'',) -> α582'''')}›)  <!<  ((α570'',) -> α577'')
//│ ╟── while constraining:  ‹∀ 2. (α450''' -> ‹∀ 3. {(α455'''' -> α453'''') where: α450''' <: ((α452'''',) -> α453''''), α451'' <: ((α450''',) -> α454'''')}›)›  <!<  ((α570'',) -> α577'')
//│ ╟── while constraining:  α449''  <!<  ((α570'',) -> α577'')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  α449''  <!<  ((α462'',) -> α469'')
//│ ╟── while constraining:  α448''  <!<  ((α462'',) -> α469'')
//│ ╟── while constraining:  {(α470'' -> α468'') where: α462'' <: ((α467'',) -> α468''), α448'' <: ((α462'',) -> α469'')}  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 3. {(α466'''' -> α464'''') where: α462'' <: ((α463'''',) -> α464''''), α448'' <: ((α462'',) -> α465'''')}›  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  (α462'' -> ‹∀ 3. {(α466'''' -> α464'''') where: α462'' <: ((α463'''',) -> α464''''), α448'' <: ((α462'',) -> α465'''')}›)  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 2. (α447''' -> ‹∀ 3. {(α459'''' -> α457'''') where: α447''' <: ((α456'''',) -> α457''''), α448'' <: ((α447''',) -> α458'''')}›)›  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  α446''  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  (α445'' -> α446'')  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 1. (α428'' -> α429'')›  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  to_church_2427''  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. to_church_2200'›  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_church_2200'››  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_church_2200'››  <!<  ‹∀ 0. (Int -> (('a49' -> 'a49') -> ('a49' -> 'a49')))›
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_church_2200'››  <!<  (Int -> ChurchInt)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. to_church_2200'››  <!<  ‹∀ 0. (Int -> ChurchInt)›
//│ Runtime error:
//│   ReferenceError: to_church_2 is not defined

to_church_ty = to_church_3
//│ int -> (forall 'b. 'b -> (forall 'b, 'a, 'c. (('c & 'a) -> 'c
//│   where
//│     'b <: 'a -> 'a & 'a -> 'c)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_3]

:e
to_church_ty = to_church_4
//│ int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd. ('d -> (ChurchInt | 'd)
//│   where
//│     'a <: 'b -> ChurchInt
//│     'c <: 'a -> 'd -> 'b)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.215: 	to_church_ty = to_church_4
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a` is not a function
//│ ║  l.29: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.29: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                            ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from application:
//│ ║  l.130: 	  else fun f -> fun x -> f ((to_church_4 (n - 1)) f x) : ChurchInt
//│ ╙──       	                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?to_church_4, ?b, ?c, ?d. ?to_church_4 <: int -> ChurchInt` exceeded recursion depth limit (400)
//│ ║  l.215: 	to_church_ty = to_church_4
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (‘a'' -> ‘a'')  <!<  ((α856'',) -> α857'')
//│ ╟── while constraining:  α851''  <!<  ((α856'',) -> α857'')
//│ ╟── while constraining:  {(α859'' -> ChurchInt) where: α851'' <: ((α856'',) -> α857''), α673'' <: ((α851'',) -> α858'')}  <!<  ((α850'',) -> α847'')
//│ ╟── while constraining:  ‹∀ 3. {(α855'''' -> ChurchInt) where: α851'' <: ((α852'''',) -> α853''''), α673'' <: ((α851'',) -> α854'''')}›  <!<  ((α850'',) -> α847'')
//│ ╟── while constraining:  ‹∀ 3. {(α855'''' -> ChurchInt) where: α851'' <: ((α852'''',) -> α853''''), α673'' <: ((α851'',) -> α854'''')}›  <!<  α849''
//│ ╟── while constraining:  (α851'' -> ‹∀ 3. {(α855'''' -> ChurchInt) where: α851'' <: ((α852'''',) -> α853''''), α673'' <: ((α851'',) -> α854'''')}›)  <!<  ((α842'',) -> α849'')
//│ ╟── while constraining:  ‹∀ 2. (α672''' -> ‹∀ 3. {(α677'''' -> ChurchInt) where: α672''' <: ((α674'''',) -> α675''''), α673'' <: ((α672''',) -> α676'''')}›)›  <!<  ((α842'',) -> α849'')
//│ ╟── while constraining:  α673''  <!<  ((α842'',) -> α849'')
//│ ╟── while constraining:  {(α850'' -> ChurchInt) where: α842'' <: ((α847'',) -> α848''), α673'' <: ((α842'',) -> α849'')}  <!<  ((α841'',) -> α838'')
//│ ╟── while constraining:  ‹∀ 3. {(α846'''' -> ChurchInt) where: α842'' <: ((α843'''',) -> α844''''), α673'' <: ((α842'',) -> α845'''')}›  <!<  ((α841'',) -> α838'')
//│ ╟── while constraining:  ‹∀ 3. {(α846'''' -> ChurchInt) where: α842'' <: ((α843'''',) -> α844''''), α673'' <: ((α842'',) -> α845'''')}›  <!<  α840''
//│ ╟── while constraining:  (α842'' -> ‹∀ 3. {(α846'''' -> ChurchInt) where: α842'' <: ((α843'''',) -> α844''''), α673'' <: ((α842'',) -> α845'''')}›)  <!<  ((α833'',) -> α840'')
//│ ╟── while constraining:  ‹∀ 2. (α672''' -> ‹∀ 3. {(α677'''' -> ChurchInt) where: α672''' <: ((α674'''',) -> α675''''), α673'' <: ((α672''',) -> α676'''')}›)›  <!<  ((α833'',) -> α840'')
//│ ╟── while constraining:  α673''  <!<  ((α833'',) -> α840'')
//│ ╟── while constraining:  {(α841'' -> ChurchInt) where: α833'' <: ((α838'',) -> α839''), α673'' <: ((α833'',) -> α840'')}  <!<  ((α832'',) -> α829'')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 2. (α672''' -> ‹∀ 3. {(α677'''' -> ChurchInt) where: α672''' <: ((α674'''',) -> α675''''), α673'' <: ((α672''',) -> α676'''')}›)›  <!<  ((α680'',) -> α687'')
//│ ╟── while constraining:  α673''  <!<  ((α680'',) -> α687'')
//│ ╟── while constraining:  {(α688'' -> ChurchInt) where: α680'' <: ((α685'',) -> α686''), α673'' <: ((α680'',) -> α687'')}  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 3. {(α684'''' -> ChurchInt) where: α680'' <: ((α681'''',) -> α682''''), α673'' <: ((α680'',) -> α683'''')}›  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  (α680'' -> ‹∀ 3. {(α684'''' -> ChurchInt) where: α680'' <: ((α681'''',) -> α682''''), α673'' <: ((α680'',) -> α683'''')}›)  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 2. (α672''' -> ‹∀ 3. {(α677'''' -> ChurchInt) where: α672''' <: ((α674'''',) -> α675''''), α673'' <: ((α672''',) -> α676'''')}›)›  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  α671''  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  (α670'' -> α671'')  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 1. (α660'' -> α661'')›  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  to_church_4659''  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. to_church_4302'›  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_church_4302'››  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_church_4302'››  <!<  ‹∀ 0. (Int -> (('a49' -> 'a49') -> ('a49' -> 'a49')))›
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_church_4302'››  <!<  (Int -> ChurchInt)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. to_church_4302'››  <!<  ‹∀ 0. (Int -> ChurchInt)›
//│             = [Function: to_church_4]

:e
to_church_ty = to_church_5
//│ int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e. (('c & 'e) -> 'c
//│   where
//│     'a <: 'b -> 'c
//│     'd <: 'a -> 'e -> 'b)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?to_church_5, ?b, ?c, ?d. ?to_church_5 <: int -> ChurchInt` exceeded recursion depth limit (400)
//│ ║  l.272: 	to_church_ty = to_church_5
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (‘a'' -> ‘a'')  <!<  ((α1087'',) -> α1088'')
//│ ╟── while constraining:  α1082''  <!<  ((α1087'',) -> α1088'')
//│ ╟── while constraining:  {(α1090'' -> α1088'') where: α1082'' <: ((α1087'',) -> α1088''), α904'' <: ((α1082'',) -> α1089'')}  <!<  ((α1081'',) -> α1078'')
//│ ╟── while constraining:  ‹∀ 3. {(α1086'''' -> α1084'''') where: α1082'' <: ((α1083'''',) -> α1084''''), α904'' <: ((α1082'',) -> α1085'''')}›  <!<  ((α1081'',) -> α1078'')
//│ ╟── while constraining:  ‹∀ 3. {(α1086'''' -> α1084'''') where: α1082'' <: ((α1083'''',) -> α1084''''), α904'' <: ((α1082'',) -> α1085'''')}›  <!<  α1080''
//│ ╟── while constraining:  (α1082'' -> ‹∀ 3. {(α1086'''' -> α1084'''') where: α1082'' <: ((α1083'''',) -> α1084''''), α904'' <: ((α1082'',) -> α1085'''')}›)  <!<  ((α1073'',) -> α1080'')
//│ ╟── while constraining:  ‹∀ 2. (α903''' -> ‹∀ 3. {(α908'''' -> α906'''') where: α903''' <: ((α905'''',) -> α906''''), α904'' <: ((α903''',) -> α907'''')}›)›  <!<  ((α1073'',) -> α1080'')
//│ ╟── while constraining:  α904''  <!<  ((α1073'',) -> α1080'')
//│ ╟── while constraining:  {(α1081'' -> α1079'') where: α1073'' <: ((α1078'',) -> α1079''), α904'' <: ((α1073'',) -> α1080'')}  <!<  ((α1072'',) -> α1069'')
//│ ╟── while constraining:  ‹∀ 3. {(α1077'''' -> α1075'''') where: α1073'' <: ((α1074'''',) -> α1075''''), α904'' <: ((α1073'',) -> α1076'''')}›  <!<  ((α1072'',) -> α1069'')
//│ ╟── while constraining:  ‹∀ 3. {(α1077'''' -> α1075'''') where: α1073'' <: ((α1074'''',) -> α1075''''), α904'' <: ((α1073'',) -> α1076'''')}›  <!<  α1071''
//│ ╟── while constraining:  (α1073'' -> ‹∀ 3. {(α1077'''' -> α1075'''') where: α1073'' <: ((α1074'''',) -> α1075''''), α904'' <: ((α1073'',) -> α1076'''')}›)  <!<  ((α1064'',) -> α1071'')
//│ ╟── while constraining:  ‹∀ 2. (α903''' -> ‹∀ 3. {(α908'''' -> α906'''') where: α903''' <: ((α905'''',) -> α906''''), α904'' <: ((α903''',) -> α907'''')}›)›  <!<  ((α1064'',) -> α1071'')
//│ ╟── while constraining:  α904''  <!<  ((α1064'',) -> α1071'')
//│ ╟── while constraining:  {(α1072'' -> α1070'') where: α1064'' <: ((α1069'',) -> α1070''), α904'' <: ((α1064'',) -> α1071'')}  <!<  ((α1063'',) -> α1060'')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 2. (α903''' -> ‹∀ 3. {(α908'''' -> α906'''') where: α903''' <: ((α905'''',) -> α906''''), α904'' <: ((α903''',) -> α907'''')}›)›  <!<  ((α911'',) -> α918'')
//│ ╟── while constraining:  α904''  <!<  ((α911'',) -> α918'')
//│ ╟── while constraining:  {(α919'' -> α917'') where: α911'' <: ((α916'',) -> α917''), α904'' <: ((α911'',) -> α918'')}  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 3. {(α915'''' -> α913'''') where: α911'' <: ((α912'''',) -> α913''''), α904'' <: ((α911'',) -> α914'''')}›  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  (α911'' -> ‹∀ 3. {(α915'''' -> α913'''') where: α911'' <: ((α912'''',) -> α913''''), α904'' <: ((α911'',) -> α914'''')}›)  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 2. (α903''' -> ‹∀ 3. {(α908'''' -> α906'''') where: α903''' <: ((α905'''',) -> α906''''), α904'' <: ((α903''',) -> α907'''')}›)›  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  α902''  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  (α901'' -> α902'')  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 1. (α891'' -> α892'')›  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  to_church_5890''  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. to_church_5344'›  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_church_5344'››  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_church_5344'››  <!<  ‹∀ 0. (Int -> (('a49' -> 'a49') -> ('a49' -> 'a49')))›
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_church_5344'››  <!<  (Int -> ChurchInt)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. to_church_5344'››  <!<  ‹∀ 0. (Int -> ChurchInt)›
//│             = [Function: to_church_5]




// (* Echoue avec la value restriction. *)
// let rec (to_church:int -> Int) n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1)) f x)
// ;;


// * It seems this one may need polymorphic recursion...?
// *  ...but it's just a version with succ inlined!?
:e
rec def to_church_ty n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_ty (n - 1)) f x)
//│ int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e. (('c & 'e) -> 'c
//│   where
//│     'a <: 'b -> 'c
//│     'd <: 'a -> 'e -> 'b)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?to_church_ty, ?b, ?c, ?d. ?to_church_ty <: int -> ChurchInt` exceeded recursion depth limit (400)
//│ ║  l.329: 	rec def to_church_ty n =
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.330: 	  if n == 0 then fun f -> fun x -> x
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.331: 	  else fun f -> fun x -> f ((to_church_ty (n - 1)) f x)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (‘a'' -> ‘a'')  <!<  ((α1339'',) -> α1340'')
//│ ╟── while constraining:  α1334''  <!<  ((α1339'',) -> α1340'')
//│ ╟── while constraining:  {(α1342'' -> α1340'') where: α1334'' <: ((α1339'',) -> α1340''), α1156'' <: ((α1334'',) -> α1341'')}  <!<  ((α1333'',) -> α1330'')
//│ ╟── while constraining:  ‹∀ 3. {(α1338'''' -> α1336'''') where: α1334'' <: ((α1335'''',) -> α1336''''), α1156'' <: ((α1334'',) -> α1337'''')}›  <!<  ((α1333'',) -> α1330'')
//│ ╟── while constraining:  ‹∀ 3. {(α1338'''' -> α1336'''') where: α1334'' <: ((α1335'''',) -> α1336''''), α1156'' <: ((α1334'',) -> α1337'''')}›  <!<  α1332''
//│ ╟── while constraining:  (α1334'' -> ‹∀ 3. {(α1338'''' -> α1336'''') where: α1334'' <: ((α1335'''',) -> α1336''''), α1156'' <: ((α1334'',) -> α1337'''')}›)  <!<  ((α1325'',) -> α1332'')
//│ ╟── while constraining:  ‹∀ 2. (α1155''' -> ‹∀ 3. {(α1160'''' -> α1158'''') where: α1155''' <: ((α1157'''',) -> α1158''''), α1156'' <: ((α1155''',) -> α1159'''')}›)›  <!<  ((α1325'',) -> α1332'')
//│ ╟── while constraining:  α1156''  <!<  ((α1325'',) -> α1332'')
//│ ╟── while constraining:  {(α1333'' -> α1331'') where: α1325'' <: ((α1330'',) -> α1331''), α1156'' <: ((α1325'',) -> α1332'')}  <!<  ((α1324'',) -> α1321'')
//│ ╟── while constraining:  ‹∀ 3. {(α1329'''' -> α1327'''') where: α1325'' <: ((α1326'''',) -> α1327''''), α1156'' <: ((α1325'',) -> α1328'''')}›  <!<  ((α1324'',) -> α1321'')
//│ ╟── while constraining:  ‹∀ 3. {(α1329'''' -> α1327'''') where: α1325'' <: ((α1326'''',) -> α1327''''), α1156'' <: ((α1325'',) -> α1328'''')}›  <!<  α1323''
//│ ╟── while constraining:  (α1325'' -> ‹∀ 3. {(α1329'''' -> α1327'''') where: α1325'' <: ((α1326'''',) -> α1327''''), α1156'' <: ((α1325'',) -> α1328'''')}›)  <!<  ((α1316'',) -> α1323'')
//│ ╟── while constraining:  ‹∀ 2. (α1155''' -> ‹∀ 3. {(α1160'''' -> α1158'''') where: α1155''' <: ((α1157'''',) -> α1158''''), α1156'' <: ((α1155''',) -> α1159'''')}›)›  <!<  ((α1316'',) -> α1323'')
//│ ╟── while constraining:  α1156''  <!<  ((α1316'',) -> α1323'')
//│ ╟── while constraining:  {(α1324'' -> α1322'') where: α1316'' <: ((α1321'',) -> α1322''), α1156'' <: ((α1316'',) -> α1323'')}  <!<  ((α1315'',) -> α1312'')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  (α1172'' -> ‹∀ 3. {(α1176'''' -> α1174'''') where: α1172'' <: ((α1173'''',) -> α1174''''), α1156'' <: ((α1172'',) -> α1175'''')}›)  <!<  ((α1163'',) -> α1170'')
//│ ╟── while constraining:  ‹∀ 2. (α1155''' -> ‹∀ 3. {(α1160'''' -> α1158'''') where: α1155''' <: ((α1157'''',) -> α1158''''), α1156'' <: ((α1155''',) -> α1159'''')}›)›  <!<  ((α1163'',) -> α1170'')
//│ ╟── while constraining:  α1156''  <!<  ((α1163'',) -> α1170'')
//│ ╟── while constraining:  {(α1171'' -> α1169'') where: α1163'' <: ((α1168'',) -> α1169''), α1156'' <: ((α1163'',) -> α1170'')}  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 3. {(α1167'''' -> α1165'''') where: α1163'' <: ((α1164'''',) -> α1165''''), α1156'' <: ((α1163'',) -> α1166'''')}›  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  (α1163'' -> ‹∀ 3. {(α1167'''' -> α1165'''') where: α1163'' <: ((α1164'''',) -> α1165''''), α1156'' <: ((α1163'',) -> α1166'''')}›)  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 2. (α1155''' -> ‹∀ 3. {(α1160'''' -> α1158'''') where: α1155''' <: ((α1157'''',) -> α1158''''), α1156'' <: ((α1155''',) -> α1159'''')}›)›  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  α1154''  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  (α1153'' -> α1154'')  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 1. (α1143'' -> α1144'')›  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  to_church_ty1142''  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. to_church_ty1098'›  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. to_church_ty1098'›  <!<  ‹∀ 0. (Int -> (('a49' -> 'a49') -> ('a49' -> 'a49')))›
//│ ╟── while constraining:  ‹∀ 0. to_church_ty1098'›  <!<  (Int -> ChurchInt)
//│ ╙── while constraining:  ‹∀ 0. to_church_ty1098'›  <!<  ‹∀ 0. (Int -> ChurchInt)›
//│             = [Function: to_church_ty5]

// * ... since we can fix it by using the annotation for rec calls:
def to_church_ty n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_ty (n - 1)) f x)
//│ int -> (forall 'b. 'b -> (forall 'b, 'a, 'c. (('c & 'a) -> 'c
//│   where
//│     'b <: 'a -> 'a & 'a -> 'c)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_ty6]


// (* �a coince. *)
// let tc n = (to_church n : Int);;
def tc n = to_church_ty n : ChurchInt
def tc n = to_church_1 n : ChurchInt
def tc n = to_church_2 n : ChurchInt
def tc n = to_church_3 n : ChurchInt
//│ tc: int -> ChurchInt
//│   = [Function: tc]
//│ tc: int -> ChurchInt
//│   = <no result>
//│     to_church_1 and succ_ty are not implemented
//│ tc: int -> ChurchInt
//│   where
//│     'a <: (‘a -> ‘a) -> ‘a -> ‘a
//│   = [Function: tc1]
//│ tc: int -> ChurchInt
//│   = [Function: tc2]

// (* Duplicate with to_church1 ("Marche") above *)
// (* Avec la value restriction : �a passe. *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1) : Int) f x)


// (*** Les annotations de type ne commutent pas. ***)
// type sid = ['a] 'a -> 'a
// type z = ['a,'b] ('a -> 'b) -> ('a -> 'b)
type Z = forall 'a 'b. ('a -> 'b) -> ('a -> 'b)
//│ Defined type alias Z

// let f x = (x:sid), ((x:sid):z)
def f x = ((x : Sid), ((x : Sid) : Z))
//│ f: Sid -> (Sid, Z,)
//│  = [Function: f]

// (* Ne type pas ... c'est une instance polymorphe. Interdit. *)
// untype fun x -> (x:sid), (x:z)
fun x -> ((x : Sid), (x : Z))
//│ res: (Sid & Z) -> (Sid, Z,)
//│    = [Function: res]

