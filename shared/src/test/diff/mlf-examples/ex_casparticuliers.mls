// :NoRecursiveTypes // Makes several signature checks fail
:GeneralizeCurriedFunctions
:DistributeForalls

// (*** L'annotation est n�cessaire sur z, mais z n'est utilis� qu'une seule fois. ***)
// type sid = ['a] 'a -> 'a
type Sid = forall 'a. 'a -> 'a
//│ Defined type alias Sid

// let t (z:sid) = ( (fun a -> z) : ['a,'b] 'b -> 'a -> 'a )
def t (z: Sid) = (fun a -> z) : forall 'a 'b. 'b -> 'a -> 'a
//│ t: Sid -> (forall 'a. (anything -> 'a -> 'a
//│   where
//│     'b <: ‘a -> ‘a))
//│   where
//│     'b <: ‘a -> ‘a
//│  = [Function: t]

// (* Une seule instance, mais polymorphe. *)
// let t z = ( (fun a -> z) : ['a,'b] 'b -> 'a -> 'a );;
def t z = (fun a -> z) : forall 'a 'b. 'b -> 'a -> 'a
//│ t: 'b -> (forall 'a. ('b -> 'a -> 'a
//│   where
//│     'b <: ‘a -> ‘a))
//│   where
//│     'b <: ‘a -> ‘a
//│  = [Function: t1]

def t z = fun a -> z
//│ t: 'a -> anything -> 'a
//│  = [Function: t2]


// (*** Ne type pas avec les value-restriction. Emb�tant. ***)

// type Int = ['a] ('a -> 'a) -> ('a -> 'a)
// ;;
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt

// let zero f x = x
// ;;

def zero f x = x
//│ zero: anything -> (forall 'a. 'a -> 'a)
//│     = [Function: zero]

def zero_ty: ChurchInt
//│ zero_ty: ChurchInt
//│        = <missing implementation>

// let succ (n:Int) = fun f x -> f (n f x)
// ;;
def succ_ty: ChurchInt -> ChurchInt
def succ (n: ChurchInt) = fun f -> fun x -> f (n f x)
def succ' n = fun f -> fun x -> f (n f x)
//│ succ_ty: ChurchInt -> ChurchInt
//│        = <missing implementation>
//│ succ: ChurchInt -> (forall 'a, 'b, 'c. (('c -> anything & 'b) -> (forall 'a, 'b, 'd, 'e. ('d -> (forall 'a, 'b, 'd, 'f, 'g. ('g
//│   where
//│     'a <: 'b -> 'd -> 'f
//│     'b <: 'f -> 'g))
//│   where
//│     'a <: 'b -> 'd -> 'e
//│     'b <: 'e -> anything))
//│   where
//│     'a <: 'b -> nothing -> 'c))
//│     = [Function: succ]
//│ succ': (nothing -> nothing -> 'a & 'a) -> (forall 'a, 'b, 'c. (('c -> 'a & 'b) -> (forall 'a, 'b, 'd, 'e. ('d -> (forall 'a, 'b, 'd, 'f, 'g. ('g
//│   where
//│     'a <: 'b -> 'd -> 'f
//│     'b <: 'f -> 'g))
//│   where
//│     'a <: 'b -> 'd -> 'e
//│     'b <: 'e -> 'a))
//│   where
//│     'a <: 'b -> nothing -> 'c))
//│      = [Function: succ]

// * Note: without constrained types we wouldn't get the principal type of succ'

// * Require distrib – see Scratch3
succ_ty = succ
succ_ty = succ'
//│ ChurchInt -> (forall 'a, 'b, 'c. (('c -> anything & 'b) -> (forall 'a, 'b, 'd, 'e. ('d -> (forall 'a, 'b, 'd, 'f, 'g. ('g
//│   where
//│     'a <: 'b -> 'd -> 'f
//│     'b <: 'f -> 'g))
//│   where
//│     'a <: 'b -> 'd -> 'e
//│     'b <: 'e -> anything))
//│   where
//│     'a <: 'b -> nothing -> 'c))
//│   <:  succ_ty:
//│ ChurchInt -> ChurchInt
//│        = [Function: succ]
//│ (nothing -> nothing -> 'a & 'a) -> (forall 'a, 'b, 'c. (('c -> 'a & 'b) -> (forall 'a, 'b, 'd, 'e. ('d -> (forall 'a, 'b, 'd, 'f, 'g. ('g
//│   where
//│     'a <: 'b -> 'd -> 'f
//│     'b <: 'f -> 'g))
//│   where
//│     'a <: 'b -> 'd -> 'e
//│     'b <: 'e -> 'a))
//│   where
//│     'a <: 'b -> nothing -> 'c))
//│   <:  succ_ty:
//│ ChurchInt -> ChurchInt
//│        = [Function: succ]


:e
succ' {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.112: 	succ' {}
//│ ║         	^^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.112: 	succ' {}
//│ ║         	      ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.56: 	def succ' n = fun f -> fun x -> f (n f x)
//│ ╙──      	                                   ^^^
//│ res: ('a -> anything & 'b) -> (forall 'b, 'c, 'd. ('c -> (forall 'b, 'c, 'e, 'f. ('f
//│   where
//│     'g <: 'b -> 'c -> 'e
//│     'b <: 'e -> 'f))
//│   where
//│     'g <: 'b -> 'c -> 'd
//│     'b <: 'd -> anything)) | error
//│   where
//│     'g <: 'b -> nothing -> 'a
//│    = [Function: succ]

fun x -> succ' x x x x x x x x x
//│ res: (nothing -> nothing -> anything & 'a -> nothing -> 'b & 'b -> anything & 'a -> 'a -> 'c & 'c -> anything & 'd -> 'a -> 'a -> 'a -> 'a -> 'a -> 'a -> anything & 'a -> 'a -> 'd & 'a) -> (forall 'a, 'e, 'f, 'g, 'h. ('h
//│   where
//│     'a <: nothing -> nothing -> anything & 'a -> nothing -> 'e & 'e -> anything & 'a -> 'a -> 'f & 'f -> anything & 'a -> 'a -> 'g & 'g -> 'a -> 'a -> 'a -> 'a -> 'a -> 'a -> 'h))
//│    = [Function: succ]


// let rec to_church n =
//   if n = 0 then zero
//   else succ (to_church (n-1))
// ;;

def to_church_ty: int -> ChurchInt
//│ to_church_ty: int -> ChurchInt
//│             = <missing implementation>

// * NOTE:
// *  The type inferred for the succ version with *annotated* param seems less powerful
// *  as the following only successfully type checks with `:DistributeForalls`:
:e // FIXME?
rec def to_church_1 n =
  if n == 0 then zero
  else succ (to_church_1 (n - 1))
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.153: 	rec def to_church_1 n =
//│ ║         	                    ^^^
//│ ║  l.154: 	  if n == 0 then zero
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.155: 	  else succ (to_church_1 (n - 1))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a554` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ to_church_1: int -> (forall 'b. (('a | ‘a554) -> 'a & ('a | ‘a554) -> anything & 'b) -> (forall 'b, 'c, 'd, 'e, 'f. (('f & 'd) -> (forall 'b, 'c, 'd, 'f, 'g, 'h. ('f | 'h
//│   where
//│     'c <: 'b -> 'd -> 'g
//│     'b <: 'g -> 'h))
//│   where
//│     'c <: 'b -> 'd -> 'e
//│     'b <: 'e -> anything)))
//│            = [Function: to_church_1]

rec def to_church_1_t n =
  if n == 0 then zero
  else succ_ty (to_church_1_t (n - 1))
//│ to_church_1_t: int -> (anything -> (forall 'a. 'a -> 'a) | ChurchInt)
//│              = [Function: to_church_1_t]

rec def to_church_1_tt n =
  if n == 0 then zero_ty
  else succ_ty (to_church_1_tt (n - 1))
//│ to_church_1_tt: int -> ChurchInt
//│               = <no result>
//│                 zero_ty is not implemented

// def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))

// * Error happens when destroying constrained types, hinting that this is probably related to polym-recur
// :d
:e
// rec def to_church_1 n =
//   succ (to_church_1 n)
rec def wat =
  succ wat
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.199: 	  succ wat
//│ ║         	  ^^^^^^^^
//│ ╟── type `‘a683` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.199: 	  succ wat
//│ ║         	  ^^^^^^^^
//│ ╟── type `‘a554` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.199: 	  succ wat
//│ ║         	  ^^^^^^^^
//│ ╟── type `‘a685` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ wat: (('a | 'a0 | ‘a554 | ‘a683 | ‘a685) -> anything & ('a | ‘a683) -> 'a & ('a0 | ‘a554 | ‘a685) -> 'a0 & 'b) -> (forall 'b, 'c, 'd, 'e. ('d -> (forall 'b, 'c, 'd, 'f, 'g. ('g
//│   where
//│     'c <: 'b -> 'd -> 'f
//│     'b <: 'f -> 'g))
//│   where
//│     'c <: 'b -> 'd -> 'e
//│     'b <: 'e -> anything))
//│ Runtime error:
//│   ReferenceError: wat is not defined

// works when `succ` is not annotated with the parameter type
:e // FIXME should be caught by cycle checker!
:ng
rec def nani =
  succ' nani
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: ?nani` exceeded recursion depth limit (300)
//│ ║  l.241: 	  succ' nani
//│ ║         	  ^^^^^^^^^^
//│ ╟── while constraining:  (α118_1048',)  <!<  (α118_1065',)
//│ ╟── while constraining:  (α118_1065' -> ‹∀ 5. {(α119_1069^6 -> ‹∀ 6. {α122_1074^7 where: α117_737' <: ((α118_1065',) -> α120_1072^7), α118_1065' <: ((α121_1073^7,) -> α122_1074^7)}›) where: α117_737' <: ((α118_1065',) -> α120_1068^6), α118_1065' <: ((α121_1070^6,) -> α122_1071^6)}›)  <!<  ((α118_1048',) -> α120_1058')
//│ ╟── while constraining:  ‹∀ 3. (α118_743'''' -> ‹∀ 5. {(α119_749^6 -> ‹∀ 6. {α122_754^7 where: α117_737' <: ((α118_743'''',) -> α120_752^7), α118_743'''' <: ((α121_753^7,) -> α122_754^7)}›) where: α117_737' <: ((α118_743'''',) -> α120_748^6), α118_743'''' <: ((α121_750^6,) -> α122_751^6)}›)›  <!<  ((α118_1048',) -> α120_1058')
//│ ╟── while constraining:  α117_737'  <!<  ((α118_1048',) -> α120_1058')
//│ ╟── while constraining:  {(α119_1059' -> ‹∀ 6. {α122_1064^7 where: α117_737' <: ((α118_1048',) -> α120_1062^7), α118_1048' <: ((α121_1063^7,) -> α122_1064^7)}›) where: α117_737' <: ((α118_1048',) -> α120_1058'), α118_1048' <: ((α121_1060',) -> α122_1061')}  <!<  ((α119_1042',) -> α121_1043')
//│ ╟── while constraining:  ‹∀ 5. {(α119_1052^6 -> ‹∀ 6. {α122_1057^7 where: α117_737' <: ((α118_1048',) -> α120_1055^7), α118_1048' <: ((α121_1056^7,) -> α122_1057^7)}›) where: α117_737' <: ((α118_1048',) -> α120_1051^6), α118_1048' <: ((α121_1053^6,) -> α122_1054^6)}›  <!<  ((α119_1042',) -> α121_1043')
//│ ╟── while constraining:  ‹∀ 5. {(α119_1052^6 -> ‹∀ 6. {α122_1057^7 where: α117_737' <: ((α118_1048',) -> α120_1055^7), α118_1048' <: ((α121_1056^7,) -> α122_1057^7)}›) where: α117_737' <: ((α118_1048',) -> α120_1051^6), α118_1048' <: ((α121_1053^6,) -> α122_1054^6)}›  <!<  α120_1041'
//│ ╟── while constraining:  (α118_1048' -> ‹∀ 5. {(α119_1052^6 -> ‹∀ 6. {α122_1057^7 where: α117_737' <: ((α118_1048',) -> α120_1055^7), α118_1048' <: ((α121_1056^7,) -> α122_1057^7)}›) where: α117_737' <: ((α118_1048',) -> α120_1051^6), α118_1048' <: ((α121_1053^6,) -> α122_1054^6)}›)  <!<  ((α118_1031',) -> α120_1041')
//│ ╟── while constraining:  ‹∀ 3. (α118_743'''' -> ‹∀ 5. {(α119_749^6 -> ‹∀ 6. {α122_754^7 where: α117_737' <: ((α118_743'''',) -> α120_752^7), α118_743'''' <: ((α121_753^7,) -> α122_754^7)}›) where: α117_737' <: ((α118_743'''',) -> α120_748^6), α118_743'''' <: ((α121_750^6,) -> α122_751^6)}›)›  <!<  ((α118_1031',) -> α120_1041')
//│ ╟── while constraining:  α117_737'  <!<  ((α118_1031',) -> α120_1041')
//│ ╟── while constraining:  {(α119_1042' -> ‹∀ 6. {α122_1047^7 where: α117_737' <: ((α118_1031',) -> α120_1045^7), α118_1031' <: ((α121_1046^7,) -> α122_1047^7)}›) where: α117_737' <: ((α118_1031',) -> α120_1041'), α118_1031' <: ((α121_1043',) -> α122_1044')}  <!<  ((α119_1025',) -> α121_1026')
//│ ╟── while constraining:  ‹∀ 5. {(α119_1035^6 -> ‹∀ 6. {α122_1040^7 where: α117_737' <: ((α118_1031',) -> α120_1038^7), α118_1031' <: ((α121_1039^7,) -> α122_1040^7)}›) where: α117_737' <: ((α118_1031',) -> α120_1034^6), α118_1031' <: ((α121_1036^6,) -> α122_1037^6)}›  <!<  ((α119_1025',) -> α121_1026')
//│ ╟── while constraining:  ‹∀ 5. {(α119_1035^6 -> ‹∀ 6. {α122_1040^7 where: α117_737' <: ((α118_1031',) -> α120_1038^7), α118_1031' <: ((α121_1039^7,) -> α122_1040^7)}›) where: α117_737' <: ((α118_1031',) -> α120_1034^6), α118_1031' <: ((α121_1036^6,) -> α122_1037^6)}›  <!<  α120_1024'
//│ ╟── while constraining:  (α118_1031' -> ‹∀ 5. {(α119_1035^6 -> ‹∀ 6. {α122_1040^7 where: α117_737' <: ((α118_1031',) -> α120_1038^7), α118_1031' <: ((α121_1039^7,) -> α122_1040^7)}›) where: α117_737' <: ((α118_1031',) -> α120_1034^6), α118_1031' <: ((α121_1036^6,) -> α122_1037^6)}›)  <!<  ((α118_1014',) -> α120_1024')
//│ ╟── while constraining:  ‹∀ 3. (α118_743'''' -> ‹∀ 5. {(α119_749^6 -> ‹∀ 6. {α122_754^7 where: α117_737' <: ((α118_743'''',) -> α120_752^7), α118_743'''' <: ((α121_753^7,) -> α122_754^7)}›) where: α117_737' <: ((α118_743'''',) -> α120_748^6), α118_743'''' <: ((α121_750^6,) -> α122_751^6)}›)›  <!<  ((α118_1014',) -> α120_1024')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  α117_737'  <!<  ((α118_776',) -> α120_786')
//│ ╟── while constraining:  {(α119_787' -> ‹∀ 6. {α122_792^7 where: α117_737' <: ((α118_776',) -> α120_790^7), α118_776' <: ((α121_791^7,) -> α122_792^7)}›) where: α117_737' <: ((α118_776',) -> α120_786'), α118_776' <: ((α121_788',) -> α122_789')}  <!<  ((α119_770',) -> α121_771')
//│ ╟── while constraining:  ‹∀ 5. {(α119_780^6 -> ‹∀ 6. {α122_785^7 where: α117_737' <: ((α118_776',) -> α120_783^7), α118_776' <: ((α121_784^7,) -> α122_785^7)}›) where: α117_737' <: ((α118_776',) -> α120_779^6), α118_776' <: ((α121_781^6,) -> α122_782^6)}›  <!<  ((α119_770',) -> α121_771')
//│ ╟── while constraining:  ‹∀ 5. {(α119_780^6 -> ‹∀ 6. {α122_785^7 where: α117_737' <: ((α118_776',) -> α120_783^7), α118_776' <: ((α121_784^7,) -> α122_785^7)}›) where: α117_737' <: ((α118_776',) -> α120_779^6), α118_776' <: ((α121_781^6,) -> α122_782^6)}›  <!<  α120_769'
//│ ╟── while constraining:  (α118_776' -> ‹∀ 5. {(α119_780^6 -> ‹∀ 6. {α122_785^7 where: α117_737' <: ((α118_776',) -> α120_783^7), α118_776' <: ((α121_784^7,) -> α122_785^7)}›) where: α117_737' <: ((α118_776',) -> α120_779^6), α118_776' <: ((α121_781^6,) -> α122_782^6)}›)  <!<  ((α118_759',) -> α120_769')
//│ ╟── while constraining:  ‹∀ 3. (α118_743'''' -> ‹∀ 5. {(α119_749^6 -> ‹∀ 6. {α122_754^7 where: α117_737' <: ((α118_743'''',) -> α120_752^7), α118_743'''' <: ((α121_753^7,) -> α122_754^7)}›) where: α117_737' <: ((α118_743'''',) -> α120_748^6), α118_743'''' <: ((α121_750^6,) -> α122_751^6)}›)›  <!<  ((α118_759',) -> α120_769')
//│ ╟── while constraining:  α117_737'  <!<  ((α118_759',) -> α120_769')
//│ ╟── while constraining:  {(α119_770' -> ‹∀ 6. {α122_775^7 where: α117_737' <: ((α118_759',) -> α120_773^7), α118_759' <: ((α121_774^7,) -> α122_775^7)}›) where: α117_737' <: ((α118_759',) -> α120_769'), α118_759' <: ((α121_771',) -> α122_772')}  <!<  ((α757',) -> α758')
//│ ╟── while constraining:  ‹∀ 5. {(α119_763^6 -> ‹∀ 6. {α122_768^7 where: α117_737' <: ((α118_759',) -> α120_766^7), α118_759' <: ((α121_767^7,) -> α122_768^7)}›) where: α117_737' <: ((α118_759',) -> α120_762^6), α118_759' <: ((α121_764^6,) -> α122_765^6)}›  <!<  ((α757',) -> α758')
//│ ╟── while constraining:  ‹∀ 5. {(α119_763^6 -> ‹∀ 6. {α122_768^7 where: α117_737' <: ((α118_759',) -> α120_766^7), α118_759' <: ((α121_767^7,) -> α122_768^7)}›) where: α117_737' <: ((α118_759',) -> α120_762^6), α118_759' <: ((α121_764^6,) -> α122_765^6)}›  <!<  α756'
//│ ╟── while constraining:  (α118_759' -> ‹∀ 5. {(α119_763^6 -> ‹∀ 6. {α122_768^7 where: α117_737' <: ((α118_759',) -> α120_766^7), α118_759' <: ((α121_767^7,) -> α122_768^7)}›) where: α117_737' <: ((α118_759',) -> α120_762^6), α118_759' <: ((α121_764^6,) -> α122_765^6)}›)  <!<  ((α755',) -> α756')
//│ ╟── while constraining:  ‹∀ 3. (α118_743'''' -> ‹∀ 5. {(α119_749^6 -> ‹∀ 6. {α122_754^7 where: α117_737' <: ((α118_743'''',) -> α120_752^7), α118_743'''' <: ((α121_753^7,) -> α122_754^7)}›) where: α117_737' <: ((α118_743'''',) -> α120_748^6), α118_743'''' <: ((α121_750^6,) -> α122_751^6)}›)›  <!<  ((α755',) -> α756')
//│ ╟── while constraining:  ‹∀ 3. (α118_743'''' -> ‹∀ 5. {(α119_749^6 -> ‹∀ 6. {α122_754^7 where: α117_737' <: ((α118_743'''',) -> α120_752^7), α118_743'''' <: ((α121_753^7,) -> α122_754^7)}›) where: α117_737' <: ((α118_743'''',) -> α120_748^6), α118_743'''' <: ((α121_750^6,) -> α122_751^6)}›)›  <!<  α117_737'
//│ ╟── while constraining:  ‹∀ 3. (α118_743'''' -> ‹∀ 5. {(α119_749^6 -> ‹∀ 6. {α122_754^7 where: α117_737' <: ((α118_743'''',) -> α120_752^7), α118_743'''' <: ((α121_753^7,) -> α122_754^7)}›) where: α117_737' <: ((α118_743'''',) -> α120_748^6), α118_743'''' <: ((α121_750^6,) -> α122_751^6)}›)›  <!<  nani735'
//│ ╙── while constraining:  α736'  <!<  nani735'
//│ nani: (nothing -> anything & 'a) -> (forall 'a, 'b, 'c, 'd. ('c -> (forall 'a, 'b, 'c, 'e, 'f. ('f
//│   where
//│     'b <: 'a -> 'c -> 'e
//│     'a <: 'e -> 'f))
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> anything))

// * The one with annotated rec occurrence works...
def to_church_1_repro n =
  succ (to_church_ty n)
//│ to_church_1_repro: int -> (forall 'b, 'c, 'd, 'a, 'a0. ((('a | 'a0 | ‘a554 | ‘a683 | ‘a685 | 'd) -> anything & ('a | ‘a683) -> 'a & ('a0 | ‘a554 | ‘a685) -> 'a0 & 'c) -> (forall 'b, 'c, 'e, 'f. ('e -> (forall 'b, 'c, 'e, 'g, 'h. ('h
//│   where
//│     'b <: 'c -> 'e -> 'g
//│     'c <: 'g -> 'h))
//│   where
//│     'b <: 'c -> 'e -> 'f
//│     'c <: 'f -> anything))
//│   where
//│     'b <: 'c -> nothing -> 'd))
//│                  = <no result>
//│                    to_church_ty is not implemented



rec def to_church_1_st n =
  if n == 0 then zero
  else succ_ty (to_church_1_st (n - 1))
//│ to_church_1_st: int -> (anything -> (forall 'a. 'a -> 'a) | ChurchInt)
//│               = [Function: to_church_1_st]

:e // FIXME should be caught by cycle checker!
rec def to_church_2 n =
  if n == 0 then zero
  else succ' (to_church_2 (n - 1))
//│ ╔══[ERROR] Subtyping constraint of the form `?a -> ?b <: ?to_church_2` exceeded recursion depth limit (300)
//│ ║  l.309: 	rec def to_church_2 n =
//│ ║         	                    ^^^
//│ ║  l.310: 	  if n == 0 then zero
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.311: 	  else succ' (to_church_2 (n - 1))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  α117_1434'  <!<  ((α118_1682',) -> α120_1692')
//│ ╟── while constraining:  {(α119_1693' -> ‹∀ 6. {α122_1698^7 where: α117_1434' <: ((α118_1682',) -> α120_1696^7), α118_1682' <: ((α121_1697^7,) -> α122_1698^7)}›) where: α117_1434' <: ((α118_1682',) -> α120_1692'), α118_1682' <: ((α121_1694',) -> α122_1695')}  <!<  ((α119_1676',) -> α121_1677')
//│ ╟── while constraining:  ‹∀ 5. {(α119_1686^6 -> ‹∀ 6. {α122_1691^7 where: α117_1434' <: ((α118_1682',) -> α120_1689^7), α118_1682' <: ((α121_1690^7,) -> α122_1691^7)}›) where: α117_1434' <: ((α118_1682',) -> α120_1685^6), α118_1682' <: ((α121_1687^6,) -> α122_1688^6)}›  <!<  ((α119_1676',) -> α121_1677')
//│ ╟── while constraining:  ‹∀ 5. {(α119_1686^6 -> ‹∀ 6. {α122_1691^7 where: α117_1434' <: ((α118_1682',) -> α120_1689^7), α118_1682' <: ((α121_1690^7,) -> α122_1691^7)}›) where: α117_1434' <: ((α118_1682',) -> α120_1685^6), α118_1682' <: ((α121_1687^6,) -> α122_1688^6)}›  <!<  α120_1675'
//│ ╟── while constraining:  (α118_1682' -> ‹∀ 5. {(α119_1686^6 -> ‹∀ 6. {α122_1691^7 where: α117_1434' <: ((α118_1682',) -> α120_1689^7), α118_1682' <: ((α121_1690^7,) -> α122_1691^7)}›) where: α117_1434' <: ((α118_1682',) -> α120_1685^6), α118_1682' <: ((α121_1687^6,) -> α122_1688^6)}›)  <!<  ((α118_1665',) -> α120_1675')
//│ ╟── while constraining:  ‹∀ 3. (α118_1440'''' -> ‹∀ 5. {(α119_1446^6 -> ‹∀ 6. {α122_1451^7 where: α117_1434' <: ((α118_1440'''',) -> α120_1449^7), α118_1440'''' <: ((α121_1450^7,) -> α122_1451^7)}›) where: α117_1434' <: ((α118_1440'''',) -> α120_1445^6), α118_1440'''' <: ((α121_1447^6,) -> α122_1448^6)}›)›  <!<  ((α118_1665',) -> α120_1675')
//│ ╟── while constraining:  α117_1434'  <!<  ((α118_1665',) -> α120_1675')
//│ ╟── while constraining:  {(α119_1676' -> ‹∀ 6. {α122_1681^7 where: α117_1434' <: ((α118_1665',) -> α120_1679^7), α118_1665' <: ((α121_1680^7,) -> α122_1681^7)}›) where: α117_1434' <: ((α118_1665',) -> α120_1675'), α118_1665' <: ((α121_1677',) -> α122_1678')}  <!<  ((α119_1659',) -> α121_1660')
//│ ╟── while constraining:  ‹∀ 5. {(α119_1669^6 -> ‹∀ 6. {α122_1674^7 where: α117_1434' <: ((α118_1665',) -> α120_1672^7), α118_1665' <: ((α121_1673^7,) -> α122_1674^7)}›) where: α117_1434' <: ((α118_1665',) -> α120_1668^6), α118_1665' <: ((α121_1670^6,) -> α122_1671^6)}›  <!<  ((α119_1659',) -> α121_1660')
//│ ╟── while constraining:  ‹∀ 5. {(α119_1669^6 -> ‹∀ 6. {α122_1674^7 where: α117_1434' <: ((α118_1665',) -> α120_1672^7), α118_1665' <: ((α121_1673^7,) -> α122_1674^7)}›) where: α117_1434' <: ((α118_1665',) -> α120_1668^6), α118_1665' <: ((α121_1670^6,) -> α122_1671^6)}›  <!<  α120_1658'
//│ ╟── while constraining:  (α118_1665' -> ‹∀ 5. {(α119_1669^6 -> ‹∀ 6. {α122_1674^7 where: α117_1434' <: ((α118_1665',) -> α120_1672^7), α118_1665' <: ((α121_1673^7,) -> α122_1674^7)}›) where: α117_1434' <: ((α118_1665',) -> α120_1668^6), α118_1665' <: ((α121_1670^6,) -> α122_1671^6)}›)  <!<  ((α118_1648',) -> α120_1658')
//│ ╟── while constraining:  ‹∀ 3. (α118_1440'''' -> ‹∀ 5. {(α119_1446^6 -> ‹∀ 6. {α122_1451^7 where: α117_1434' <: ((α118_1440'''',) -> α120_1449^7), α118_1440'''' <: ((α121_1450^7,) -> α122_1451^7)}›) where: α117_1434' <: ((α118_1440'''',) -> α120_1445^6), α118_1440'''' <: ((α121_1447^6,) -> α122_1448^6)}›)›  <!<  ((α118_1648',) -> α120_1658')
//│ ╟── while constraining:  α117_1434'  <!<  ((α118_1648',) -> α120_1658')
//│ ╟── while constraining:  {(α119_1659' -> ‹∀ 6. {α122_1664^7 where: α117_1434' <: ((α118_1648',) -> α120_1662^7), α118_1648' <: ((α121_1663^7,) -> α122_1664^7)}›) where: α117_1434' <: ((α118_1648',) -> α120_1658'), α118_1648' <: ((α121_1660',) -> α122_1661')}  <!<  ((α119_1642',) -> α121_1643')
//│ ╟── while constraining:  ‹∀ 5. {(α119_1652^6 -> ‹∀ 6. {α122_1657^7 where: α117_1434' <: ((α118_1648',) -> α120_1655^7), α118_1648' <: ((α121_1656^7,) -> α122_1657^7)}›) where: α117_1434' <: ((α118_1648',) -> α120_1651^6), α118_1648' <: ((α121_1653^6,) -> α122_1654^6)}›  <!<  ((α119_1642',) -> α121_1643')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 5. {(α119_1482^6 -> ‹∀ 6. {α122_1487^7 where: α117_1434' <: ((α118_1478',) -> α120_1485^7), α118_1478' <: ((α121_1486^7,) -> α122_1487^7)}›) where: α117_1434' <: ((α118_1478',) -> α120_1481^6), α118_1478' <: ((α121_1483^6,) -> α122_1484^6)}›  <!<  ((α119_1472',) -> α121_1473')
//│ ╟── while constraining:  ‹∀ 5. {(α119_1482^6 -> ‹∀ 6. {α122_1487^7 where: α117_1434' <: ((α118_1478',) -> α120_1485^7), α118_1478' <: ((α121_1486^7,) -> α122_1487^7)}›) where: α117_1434' <: ((α118_1478',) -> α120_1481^6), α118_1478' <: ((α121_1483^6,) -> α122_1484^6)}›  <!<  α120_1471'
//│ ╟── while constraining:  (α118_1478' -> ‹∀ 5. {(α119_1482^6 -> ‹∀ 6. {α122_1487^7 where: α117_1434' <: ((α118_1478',) -> α120_1485^7), α118_1478' <: ((α121_1486^7,) -> α122_1487^7)}›) where: α117_1434' <: ((α118_1478',) -> α120_1481^6), α118_1478' <: ((α121_1483^6,) -> α122_1484^6)}›)  <!<  ((α118_1461',) -> α120_1471')
//│ ╟── while constraining:  ‹∀ 3. (α118_1440'''' -> ‹∀ 5. {(α119_1446^6 -> ‹∀ 6. {α122_1451^7 where: α117_1434' <: ((α118_1440'''',) -> α120_1449^7), α118_1440'''' <: ((α121_1450^7,) -> α122_1451^7)}›) where: α117_1434' <: ((α118_1440'''',) -> α120_1445^6), α118_1440'''' <: ((α121_1447^6,) -> α122_1448^6)}›)›  <!<  ((α118_1461',) -> α120_1471')
//│ ╟── while constraining:  α117_1434'  <!<  ((α118_1461',) -> α120_1471')
//│ ╟── while constraining:  {(α119_1472' -> ‹∀ 6. {α122_1477^7 where: α117_1434' <: ((α118_1461',) -> α120_1475^7), α118_1461' <: ((α121_1476^7,) -> α122_1477^7)}›) where: α117_1434' <: ((α118_1461',) -> α120_1471'), α118_1461' <: ((α121_1473',) -> α122_1474')}  <!<  ((α1455',) -> α1456')
//│ ╟── while constraining:  ‹∀ 5. {(α119_1465^6 -> ‹∀ 6. {α122_1470^7 where: α117_1434' <: ((α118_1461',) -> α120_1468^7), α118_1461' <: ((α121_1469^7,) -> α122_1470^7)}›) where: α117_1434' <: ((α118_1461',) -> α120_1464^6), α118_1461' <: ((α121_1466^6,) -> α122_1467^6)}›  <!<  ((α1455',) -> α1456')
//│ ╟── while constraining:  ‹∀ 5. {(α119_1465^6 -> ‹∀ 6. {α122_1470^7 where: α117_1434' <: ((α118_1461',) -> α120_1468^7), α118_1461' <: ((α121_1469^7,) -> α122_1470^7)}›) where: α117_1434' <: ((α118_1461',) -> α120_1464^6), α118_1461' <: ((α121_1466^6,) -> α122_1467^6)}›  <!<  α1454'
//│ ╟── while constraining:  (α118_1461' -> ‹∀ 5. {(α119_1465^6 -> ‹∀ 6. {α122_1470^7 where: α117_1434' <: ((α118_1461',) -> α120_1468^7), α118_1461' <: ((α121_1469^7,) -> α122_1470^7)}›) where: α117_1434' <: ((α118_1461',) -> α120_1464^6), α118_1461' <: ((α121_1466^6,) -> α122_1467^6)}›)  <!<  ((α1453',) -> α1454')
//│ ╟── while constraining:  ‹∀ 3. (α118_1440'''' -> ‹∀ 5. {(α119_1446^6 -> ‹∀ 6. {α122_1451^7 where: α117_1434' <: ((α118_1440'''',) -> α120_1449^7), α118_1440'''' <: ((α121_1450^7,) -> α122_1451^7)}›) where: α117_1434' <: ((α118_1440'''',) -> α120_1445^6), α118_1440'''' <: ((α121_1447^6,) -> α122_1448^6)}›)›  <!<  ((α1453',) -> α1454')
//│ ╟── while constraining:  ‹∀ 3. (α118_1440'''' -> ‹∀ 5. {(α119_1446^6 -> ‹∀ 6. {α122_1451^7 where: α117_1434' <: ((α118_1440'''',) -> α120_1449^7), α118_1440'''' <: ((α121_1450^7,) -> α122_1451^7)}›) where: α117_1434' <: ((α118_1440'''',) -> α120_1445^6), α118_1440'''' <: ((α121_1447^6,) -> α122_1448^6)}›)›  <!<  α117_1434'
//│ ╟── while constraining:  ‹∀ 3. (α118_1440'''' -> ‹∀ 5. {(α119_1446^6 -> ‹∀ 6. {α122_1451^7 where: α117_1434' <: ((α118_1440'''',) -> α120_1449^7), α118_1440'''' <: ((α121_1450^7,) -> α122_1451^7)}›) where: α117_1434' <: ((α118_1440'''',) -> α120_1445^6), α118_1440'''' <: ((α121_1447^6,) -> α122_1448^6)}›)›  <!<  α1432'
//│ ╟── while constraining:  α1452'  <!<  α1432'
//│ ╟── while constraining:  (α1424' -> α1452')  <!<  ((α1431',) -> α1432')
//│ ╙── while constraining:  (α1424' -> α1452')  <!<  to_church_21423'
//│ to_church_2: int -> (forall 'a. (nothing -> anything & 'a) -> (forall 'a, 'b, 'c, 'd, 'e. (('e & 'c) -> (forall 'a, 'b, 'c, 'e, 'f, 'g. ('g | 'e
//│   where
//│     'b <: 'a -> 'c -> 'f
//│     'a <: 'f -> 'g))
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> anything)))
//│            = [Function: to_church_1_st]

:e // FIXME should be caught by cycle checker!
// Requires :RecursiveTypes
:ng // FIXME codegen: `ReferenceError: to_church_2 is not defined`
to_church_ty = to_church_2
//│ int -> (forall 'a. (nothing -> anything & 'a) -> (forall 'a, 'b, 'c, 'd, 'e. (('e & 'c) -> (forall 'a, 'b, 'c, 'e, 'f, 'g. ('g | 'e
//│   where
//│     'b <: 'a -> 'c -> 'f
//│     'a <: 'f -> 'g))
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> anything)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r, ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1, ?i1, ?j1, ?k1, ?l1, ?m1, ?n1, ?o1, ?p1, ?q1, ?r1, ?s1, ?t1, ?u1, ?v1, ?w1, ?x1, ?y1, ?z1, ?a2, ?b2, ?c2, ?d2, ?e2, ?f2, ?g2, ?h2, ?i2, ?j2, ?k2, ?l2, ?m2, ?n2, ?o2, ?p2, ?q2, ?r2, ?s2, ?t2, ?u2, ?v2, ?w2, ?x2, ?y2, ?z2, ?a3, ?b3, ?c3, ?d3, ?e3, ?f3, ?g3, ?h3, ?i3, ?j3, ?k3, ?l3, ?m3, ?n3, ?o3, ?p3, ?q3, ?to_church_2, ?r3, ?s3, ?t3, ?u3, ?v3, ?w3, ?x3, ?y3, ?z3, ?a4, ?b4, ?c4, ?d4, ?e4, ?f4, ?g4, ?h4, ?i4, ?j4, ?k4, ?l4, ?m4, ?n4, ?o4, ?p4, ?q4, ?r4, ?s4, ?t4, ?u4, ?v4, ?w4, ?x4, ?y4, ?z4, ?a5, ?b5, ?c5, ?d5, ?e5, ?f5, ?g5, ?h5, ?i5, ?j5, ?k5, ?l5, ?m5, ?n5, ?o5, ?p5, ?q5, ?r5, ?s5. ?to_church_2 <: int -> ChurchInt` exceeded recursion depth limit (300)
//│ ║  l.363: 	to_church_ty = to_church_2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (‘a'' -> ‘a'')  <!<  α118_2437''
//│ ╟── while constraining:  α118_2420''  <!<  α118_2437''
//│ ╟── while constraining:  (α118_2420'',)  <!<  (α118_2437'',)
//│ ╟── while constraining:  (α118_2437'' -> ‹∀ 5. {(α119_2441^6 -> ‹∀ 6. {α122_2446^7 where: α117_2074'' <: ((α118_2437'',) -> α120_2444^7), α118_2437'' <: ((α121_2445^7,) -> α122_2446^7)}›) where: α117_2074'' <: ((α118_2437'',) -> α120_2440^6), α118_2437'' <: ((α121_2442^6,) -> α122_2443^6)}›)  <!<  ((α118_2420'',) -> α120_2430'')
//│ ╟── while constraining:  ‹∀ 3. (α118_2026'''' -> ‹∀ 5. {(α119_2076^6 -> ‹∀ 6. {α122_2081^7 where: α117_2074'' <: ((α118_2026'''',) -> α120_2079^7), α118_2026'''' <: ((α121_2080^7,) -> α122_2081^7)}›) where: α117_2074'' <: ((α118_2026'''',) -> α120_2075^6), α118_2026'''' <: ((α121_2077^6,) -> α122_2078^6)}›)›  <!<  ((α118_2420'',) -> α120_2430'')
//│ ╟── while constraining:  α117_2074''  <!<  ((α118_2420'',) -> α120_2430'')
//│ ╟── while constraining:  {(α119_2431'' -> ‹∀ 6. {α122_2436^7 where: α117_2074'' <: ((α118_2420'',) -> α120_2434^7), α118_2420'' <: ((α121_2435^7,) -> α122_2436^7)}›) where: α117_2074'' <: ((α118_2420'',) -> α120_2430''), α118_2420'' <: ((α121_2432'',) -> α122_2433'')}  <!<  ((α119_2414'',) -> α121_2415'')
//│ ╟── while constraining:  ‹∀ 5. {(α119_2424^6 -> ‹∀ 6. {α122_2429^7 where: α117_2074'' <: ((α118_2420'',) -> α120_2427^7), α118_2420'' <: ((α121_2428^7,) -> α122_2429^7)}›) where: α117_2074'' <: ((α118_2420'',) -> α120_2423^6), α118_2420'' <: ((α121_2425^6,) -> α122_2426^6)}›  <!<  ((α119_2414'',) -> α121_2415'')
//│ ╟── while constraining:  ‹∀ 5. {(α119_2424^6 -> ‹∀ 6. {α122_2429^7 where: α117_2074'' <: ((α118_2420'',) -> α120_2427^7), α118_2420'' <: ((α121_2428^7,) -> α122_2429^7)}›) where: α117_2074'' <: ((α118_2420'',) -> α120_2423^6), α118_2420'' <: ((α121_2425^6,) -> α122_2426^6)}›  <!<  α120_2413''
//│ ╟── while constraining:  (α118_2420'' -> ‹∀ 5. {(α119_2424^6 -> ‹∀ 6. {α122_2429^7 where: α117_2074'' <: ((α118_2420'',) -> α120_2427^7), α118_2420'' <: ((α121_2428^7,) -> α122_2429^7)}›) where: α117_2074'' <: ((α118_2420'',) -> α120_2423^6), α118_2420'' <: ((α121_2425^6,) -> α122_2426^6)}›)  <!<  ((α118_2403'',) -> α120_2413'')
//│ ╟── while constraining:  ‹∀ 3. (α118_2026'''' -> ‹∀ 5. {(α119_2076^6 -> ‹∀ 6. {α122_2081^7 where: α117_2074'' <: ((α118_2026'''',) -> α120_2079^7), α118_2026'''' <: ((α121_2080^7,) -> α122_2081^7)}›) where: α117_2074'' <: ((α118_2026'''',) -> α120_2075^6), α118_2026'''' <: ((α121_2077^6,) -> α122_2078^6)}›)›  <!<  ((α118_2403'',) -> α120_2413'')
//│ ╟── while constraining:  α117_2074''  <!<  ((α118_2403'',) -> α120_2413'')
//│ ╟── while constraining:  {(α119_2414'' -> ‹∀ 6. {α122_2419^7 where: α117_2074'' <: ((α118_2403'',) -> α120_2417^7), α118_2403'' <: ((α121_2418^7,) -> α122_2419^7)}›) where: α117_2074'' <: ((α118_2403'',) -> α120_2413''), α118_2403'' <: ((α121_2415'',) -> α122_2416'')}  <!<  ((α119_2397'',) -> α121_2398'')
//│ ╟── while constraining:  ‹∀ 5. {(α119_2407^6 -> ‹∀ 6. {α122_2412^7 where: α117_2074'' <: ((α118_2403'',) -> α120_2410^7), α118_2403'' <: ((α121_2411^7,) -> α122_2412^7)}›) where: α117_2074'' <: ((α118_2403'',) -> α120_2406^6), α118_2403'' <: ((α121_2408^6,) -> α122_2409^6)}›  <!<  ((α119_2397'',) -> α121_2398'')
//│ ╟── while constraining:  ‹∀ 5. {(α119_2407^6 -> ‹∀ 6. {α122_2412^7 where: α117_2074'' <: ((α118_2403'',) -> α120_2410^7), α118_2403'' <: ((α121_2411^7,) -> α122_2412^7)}›) where: α117_2074'' <: ((α118_2403'',) -> α120_2406^6), α118_2403'' <: ((α121_2408^6,) -> α122_2409^6)}›  <!<  α120_2396''
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  (α118_2250'' -> ‹∀ 5. {(α119_2254^6 -> ‹∀ 6. {α122_2259^7 where: α117_2074'' <: ((α118_2250'',) -> α120_2257^7), α118_2250'' <: ((α121_2258^7,) -> α122_2259^7)}›) where: α117_2074'' <: ((α118_2250'',) -> α120_2253^6), α118_2250'' <: ((α121_2255^6,) -> α122_2256^6)}›)  <!<  ((α118_2233'',) -> α120_2243'')
//│ ╟── while constraining:  ‹∀ 3. (α118_2026'''' -> ‹∀ 5. {(α119_2076^6 -> ‹∀ 6. {α122_2081^7 where: α117_2074'' <: ((α118_2026'''',) -> α120_2079^7), α118_2026'''' <: ((α121_2080^7,) -> α122_2081^7)}›) where: α117_2074'' <: ((α118_2026'''',) -> α120_2075^6), α118_2026'''' <: ((α121_2077^6,) -> α122_2078^6)}›)›  <!<  ((α118_2233'',) -> α120_2243'')
//│ ╟── while constraining:  α117_2074''  <!<  ((α118_2233'',) -> α120_2243'')
//│ ╟── while constraining:  {(α119_2244'' -> ‹∀ 6. {α122_2249^7 where: α117_2074'' <: ((α118_2233'',) -> α120_2247^7), α118_2233'' <: ((α121_2248^7,) -> α122_2249^7)}›) where: α117_2074'' <: ((α118_2233'',) -> α120_2243''), α118_2233'' <: ((α121_2245'',) -> α122_2246'')}  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 5. {(α119_2237^6 -> ‹∀ 6. {α122_2242^7 where: α117_2074'' <: ((α118_2233'',) -> α120_2240^7), α118_2233'' <: ((α121_2241^7,) -> α122_2242^7)}›) where: α117_2074'' <: ((α118_2233'',) -> α120_2236^6), α118_2233'' <: ((α121_2238^6,) -> α122_2239^6)}›  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  (α118_2233'' -> ‹∀ 5. {(α119_2237^6 -> ‹∀ 6. {α122_2242^7 where: α117_2074'' <: ((α118_2233'',) -> α120_2240^7), α118_2233'' <: ((α121_2241^7,) -> α122_2242^7)}›) where: α117_2074'' <: ((α118_2233'',) -> α120_2236^6), α118_2233'' <: ((α121_2238^6,) -> α122_2239^6)}›)  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 3. (α118_2026'''' -> ‹∀ 5. {(α119_2076^6 -> ‹∀ 6. {α122_2081^7 where: α117_2074'' <: ((α118_2026'''',) -> α120_2079^7), α118_2026'''' <: ((α121_2080^7,) -> α122_2081^7)}›) where: α117_2074'' <: ((α118_2026'''',) -> α120_2075^6), α118_2026'''' <: ((α121_2077^6,) -> α122_2078^6)}›)›  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  α1452_2025''  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  (α1424_2024'' -> α1452_2025'')  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  to_church_21423_2023''  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. to_church_21423'›  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. to_church_21423'›  <!<  ‹∀ 0. (Int -> (('a53' -> 'a53') -> ('a53' -> 'a53')))›
//│ ╟── while constraining:  ‹∀ 0. to_church_21423'›  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_church_21423'››  <!<  (Int -> ChurchInt)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. to_church_21423'››  <!<  ‹∀ 0. (Int -> ChurchInt)›

// (* Marche *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1) : Int) f x)
// ;;

:e // FIXME?
rec def to_church_3 n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_3 (n - 1) : ChurchInt) f x)
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.416: 	rec def to_church_3 n =
//│ ║         	                    ^^^
//│ ║  l.417: 	  if n == 0 then fun f -> fun x -> x
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.418: 	  else fun f -> fun x -> f ((to_church_3 (n - 1) : ChurchInt) f x)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a2563` is not an instance of type `'a2562`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── from reference:
//│ ║  l.418: 	  else fun f -> fun x -> f ((to_church_3 (n - 1) : ChurchInt) f x)
//│ ╙──       	                                                                ^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.416: 	rec def to_church_3 n =
//│ ║         	                    ^^^
//│ ║  l.417: 	  if n == 0 then fun f -> fun x -> x
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.418: 	  else fun f -> fun x -> f ((to_church_3 (n - 1) : ChurchInt) f x)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a2562` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── but it flows into application with expected type `‘a`
//│ ║  l.418: 	  else fun f -> fun x -> f ((to_church_3 (n - 1) : ChurchInt) f x)
//│ ║         	                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ to_church_3: int -> (('a | ‘a2562 | ‘a2563) -> 'b & ('a | ‘a2562 | ‘a2563) -> (‘a2562 & 'a)) -> (forall 'c. (‘a2562 & 'c & 'a) -> (‘a2562 | 'c | 'b))
//│            = [Function: to_church_3]

// (* Ne Marche Pas *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else (fun f x -> f ((to_church (n-1)) f x) : Int)
// ;;
rec def to_church_4 n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_4 (n - 1)) f x) : ChurchInt
//│ to_church_4: int -> ((ChurchInt | 'a) -> (anything -> nothing) -> nothing -> anything) -> (forall 'b. ('b & 'a) -> (ChurchInt | 'b))
//│            = [Function: to_church_4]


// (* La r�cursion est monomorphe. *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1)) f x)
// ;;

rec def to_church_5 n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_5 (n - 1)) f x)
//│ to_church_5: int -> ('a -> ('a & 'b)) -> (forall 'c. ('c & 'a) -> ('c | 'b))
//│            = [Function: to_church_5]


:e // FIXME?
to_church_ty = to_church_1
//│ int -> (forall 'b. (('a | 'a0 | ‘a554 | ‘a683 | ‘a685) -> anything & ('a | ‘a683) -> 'a & ('a0 | ‘a554 | ‘a685) -> 'a0 & 'b) -> (forall 'b, 'c, 'd, 'e, 'f. (('f & 'd) -> (forall 'b, 'c, 'd, 'f, 'g, 'h. ('f | 'h
//│   where
//│     'c <: 'b -> 'd -> 'g
//│     'b <: 'g -> 'h))
//│   where
//│     'c <: 'b -> 'd -> 'e
//│     'b <: 'e -> anything)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.480: 	to_church_ty = to_church_1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a683` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.480: 	to_church_ty = to_church_1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.480: 	to_church_ty = to_church_1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a685` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.480: 	to_church_ty = to_church_1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a554` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│             = [Function: to_church_1]

to_church_ty = to_church_1_t
//│ int -> (anything -> (forall 'a. 'a -> 'a) | ChurchInt)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_1_t]

to_church_ty = to_church_1_tt
//│ int -> ChurchInt
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = <no result>
//│               to_church_1_tt and zero_ty are not implemented

to_church_ty = to_church_1_st
//│ int -> (anything -> (forall 'a. 'a -> 'a) | ChurchInt)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_1_st]

:e // FIXME should be caught by cycle checker!
:ng
to_church_ty = to_church_2
//│ int -> (forall 'a. (nothing -> anything & 'a) -> (forall 'a, 'b, 'c, 'd, 'e. (('e & 'c) -> (forall 'a, 'b, 'c, 'e, 'f, 'g. ('g | 'e
//│   where
//│     'b <: 'a -> 'c -> 'f
//│     'a <: 'f -> 'g))
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> anything)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r, ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1, ?i1, ?j1, ?k1, ?l1, ?m1, ?n1, ?o1, ?p1, ?q1, ?r1, ?s1, ?t1, ?u1, ?v1, ?w1, ?x1, ?y1, ?z1, ?a2, ?b2, ?c2, ?d2, ?e2, ?f2, ?g2, ?h2, ?i2, ?j2, ?k2, ?l2, ?m2, ?n2, ?o2, ?p2, ?q2, ?r2, ?s2, ?t2, ?u2, ?v2, ?w2, ?x2, ?y2, ?z2, ?a3, ?b3, ?c3, ?d3, ?e3, ?f3, ?g3, ?h3, ?i3, ?j3, ?k3, ?l3, ?m3, ?n3, ?o3, ?p3, ?q3, ?to_church_2, ?r3, ?s3, ?t3, ?u3, ?v3, ?w3, ?x3, ?y3, ?z3, ?a4, ?b4, ?c4, ?d4, ?e4, ?f4, ?g4, ?h4, ?i4, ?j4, ?k4, ?l4, ?m4, ?n4, ?o4, ?p4, ?q4, ?r4, ?s4, ?t4, ?u4, ?v4, ?w4, ?x4, ?y4, ?z4, ?a5, ?b5, ?c5, ?d5, ?e5, ?f5, ?g5, ?h5, ?i5, ?j5, ?k5, ?l5, ?m5, ?n5, ?o5, ?p5, ?q5, ?r5, ?s5. ?to_church_2 <: int -> ChurchInt` exceeded recursion depth limit (300)
//│ ║  l.549: 	to_church_ty = to_church_2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (‘a'' -> ‘a'')  <!<  α118_3325''
//│ ╟── while constraining:  α118_3308''  <!<  α118_3325''
//│ ╟── while constraining:  (α118_3308'',)  <!<  (α118_3325'',)
//│ ╟── while constraining:  (α118_3325'' -> ‹∀ 5. {(α119_3329^6 -> ‹∀ 6. {α122_3334^7 where: α117_2962'' <: ((α118_3325'',) -> α120_3332^7), α118_3325'' <: ((α121_3333^7,) -> α122_3334^7)}›) where: α117_2962'' <: ((α118_3325'',) -> α120_3328^6), α118_3325'' <: ((α121_3330^6,) -> α122_3331^6)}›)  <!<  ((α118_3308'',) -> α120_3318'')
//│ ╟── while constraining:  ‹∀ 3. (α118_2914'''' -> ‹∀ 5. {(α119_2964^6 -> ‹∀ 6. {α122_2969^7 where: α117_2962'' <: ((α118_2914'''',) -> α120_2967^7), α118_2914'''' <: ((α121_2968^7,) -> α122_2969^7)}›) where: α117_2962'' <: ((α118_2914'''',) -> α120_2963^6), α118_2914'''' <: ((α121_2965^6,) -> α122_2966^6)}›)›  <!<  ((α118_3308'',) -> α120_3318'')
//│ ╟── while constraining:  α117_2962''  <!<  ((α118_3308'',) -> α120_3318'')
//│ ╟── while constraining:  {(α119_3319'' -> ‹∀ 6. {α122_3324^7 where: α117_2962'' <: ((α118_3308'',) -> α120_3322^7), α118_3308'' <: ((α121_3323^7,) -> α122_3324^7)}›) where: α117_2962'' <: ((α118_3308'',) -> α120_3318''), α118_3308'' <: ((α121_3320'',) -> α122_3321'')}  <!<  ((α119_3302'',) -> α121_3303'')
//│ ╟── while constraining:  ‹∀ 5. {(α119_3312^6 -> ‹∀ 6. {α122_3317^7 where: α117_2962'' <: ((α118_3308'',) -> α120_3315^7), α118_3308'' <: ((α121_3316^7,) -> α122_3317^7)}›) where: α117_2962'' <: ((α118_3308'',) -> α120_3311^6), α118_3308'' <: ((α121_3313^6,) -> α122_3314^6)}›  <!<  ((α119_3302'',) -> α121_3303'')
//│ ╟── while constraining:  ‹∀ 5. {(α119_3312^6 -> ‹∀ 6. {α122_3317^7 where: α117_2962'' <: ((α118_3308'',) -> α120_3315^7), α118_3308'' <: ((α121_3316^7,) -> α122_3317^7)}›) where: α117_2962'' <: ((α118_3308'',) -> α120_3311^6), α118_3308'' <: ((α121_3313^6,) -> α122_3314^6)}›  <!<  α120_3301''
//│ ╟── while constraining:  (α118_3308'' -> ‹∀ 5. {(α119_3312^6 -> ‹∀ 6. {α122_3317^7 where: α117_2962'' <: ((α118_3308'',) -> α120_3315^7), α118_3308'' <: ((α121_3316^7,) -> α122_3317^7)}›) where: α117_2962'' <: ((α118_3308'',) -> α120_3311^6), α118_3308'' <: ((α121_3313^6,) -> α122_3314^6)}›)  <!<  ((α118_3291'',) -> α120_3301'')
//│ ╟── while constraining:  ‹∀ 3. (α118_2914'''' -> ‹∀ 5. {(α119_2964^6 -> ‹∀ 6. {α122_2969^7 where: α117_2962'' <: ((α118_2914'''',) -> α120_2967^7), α118_2914'''' <: ((α121_2968^7,) -> α122_2969^7)}›) where: α117_2962'' <: ((α118_2914'''',) -> α120_2963^6), α118_2914'''' <: ((α121_2965^6,) -> α122_2966^6)}›)›  <!<  ((α118_3291'',) -> α120_3301'')
//│ ╟── while constraining:  α117_2962''  <!<  ((α118_3291'',) -> α120_3301'')
//│ ╟── while constraining:  {(α119_3302'' -> ‹∀ 6. {α122_3307^7 where: α117_2962'' <: ((α118_3291'',) -> α120_3305^7), α118_3291'' <: ((α121_3306^7,) -> α122_3307^7)}›) where: α117_2962'' <: ((α118_3291'',) -> α120_3301''), α118_3291'' <: ((α121_3303'',) -> α122_3304'')}  <!<  ((α119_3285'',) -> α121_3286'')
//│ ╟── while constraining:  ‹∀ 5. {(α119_3295^6 -> ‹∀ 6. {α122_3300^7 where: α117_2962'' <: ((α118_3291'',) -> α120_3298^7), α118_3291'' <: ((α121_3299^7,) -> α122_3300^7)}›) where: α117_2962'' <: ((α118_3291'',) -> α120_3294^6), α118_3291'' <: ((α121_3296^6,) -> α122_3297^6)}›  <!<  ((α119_3285'',) -> α121_3286'')
//│ ╟── while constraining:  ‹∀ 5. {(α119_3295^6 -> ‹∀ 6. {α122_3300^7 where: α117_2962'' <: ((α118_3291'',) -> α120_3298^7), α118_3291'' <: ((α121_3299^7,) -> α122_3300^7)}›) where: α117_2962'' <: ((α118_3291'',) -> α120_3294^6), α118_3291'' <: ((α121_3296^6,) -> α122_3297^6)}›  <!<  α120_3284''
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  (α118_3138'' -> ‹∀ 5. {(α119_3142^6 -> ‹∀ 6. {α122_3147^7 where: α117_2962'' <: ((α118_3138'',) -> α120_3145^7), α118_3138'' <: ((α121_3146^7,) -> α122_3147^7)}›) where: α117_2962'' <: ((α118_3138'',) -> α120_3141^6), α118_3138'' <: ((α121_3143^6,) -> α122_3144^6)}›)  <!<  ((α118_3121'',) -> α120_3131'')
//│ ╟── while constraining:  ‹∀ 3. (α118_2914'''' -> ‹∀ 5. {(α119_2964^6 -> ‹∀ 6. {α122_2969^7 where: α117_2962'' <: ((α118_2914'''',) -> α120_2967^7), α118_2914'''' <: ((α121_2968^7,) -> α122_2969^7)}›) where: α117_2962'' <: ((α118_2914'''',) -> α120_2963^6), α118_2914'''' <: ((α121_2965^6,) -> α122_2966^6)}›)›  <!<  ((α118_3121'',) -> α120_3131'')
//│ ╟── while constraining:  α117_2962''  <!<  ((α118_3121'',) -> α120_3131'')
//│ ╟── while constraining:  {(α119_3132'' -> ‹∀ 6. {α122_3137^7 where: α117_2962'' <: ((α118_3121'',) -> α120_3135^7), α118_3121'' <: ((α121_3136^7,) -> α122_3137^7)}›) where: α117_2962'' <: ((α118_3121'',) -> α120_3131''), α118_3121'' <: ((α121_3133'',) -> α122_3134'')}  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 5. {(α119_3125^6 -> ‹∀ 6. {α122_3130^7 where: α117_2962'' <: ((α118_3121'',) -> α120_3128^7), α118_3121'' <: ((α121_3129^7,) -> α122_3130^7)}›) where: α117_2962'' <: ((α118_3121'',) -> α120_3124^6), α118_3121'' <: ((α121_3126^6,) -> α122_3127^6)}›  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  (α118_3121'' -> ‹∀ 5. {(α119_3125^6 -> ‹∀ 6. {α122_3130^7 where: α117_2962'' <: ((α118_3121'',) -> α120_3128^7), α118_3121'' <: ((α121_3129^7,) -> α122_3130^7)}›) where: α117_2962'' <: ((α118_3121'',) -> α120_3124^6), α118_3121'' <: ((α121_3126^6,) -> α122_3127^6)}›)  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 3. (α118_2914'''' -> ‹∀ 5. {(α119_2964^6 -> ‹∀ 6. {α122_2969^7 where: α117_2962'' <: ((α118_2914'''',) -> α120_2967^7), α118_2914'''' <: ((α121_2968^7,) -> α122_2969^7)}›) where: α117_2962'' <: ((α118_2914'''',) -> α120_2963^6), α118_2914'''' <: ((α121_2965^6,) -> α122_2966^6)}›)›  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  α1452_2913''  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  (α1424_2912'' -> α1452_2913'')  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  to_church_21423_2911''  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. to_church_21423'›  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. to_church_21423'›  <!<  ‹∀ 0. (Int -> (('a53' -> 'a53') -> ('a53' -> 'a53')))›
//│ ╟── while constraining:  ‹∀ 0. to_church_21423'›  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_church_21423'››  <!<  (Int -> ChurchInt)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. to_church_21423'››  <!<  ‹∀ 0. (Int -> ChurchInt)›

:e // FIXME?
to_church_ty = to_church_3
//│ int -> (('a | ‘a2562 | ‘a2563) -> 'b & ('a | ‘a2562 | ‘a2563) -> (‘a2562 & 'a)) -> (forall 'c. (‘a2562 & 'c & 'a) -> (‘a2562 | 'c | 'b))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.596: 	to_church_ty = to_church_3
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a2563` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.596: 	to_church_ty = to_church_3
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a2562` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.596: 	to_church_ty = to_church_3
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── from application:
//│ ║  l.418: 	  else fun f -> fun x -> f ((to_church_3 (n - 1) : ChurchInt) f x)
//│ ╙──       	                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.596: 	to_church_ty = to_church_3
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a` is not an instance of type `'a2562`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│             = [Function: to_church_3]

:e
to_church_ty = to_church_4
//│ int -> ((ChurchInt | 'a) -> (anything -> nothing) -> nothing -> anything) -> (forall 'b. ('b & 'a) -> (ChurchInt | 'b))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.642: 	to_church_ty = to_church_4
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `(?a -> ?a) -> ?a -> ?a` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                            ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.642: 	to_church_ty = to_church_4
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a` is not a function
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                            ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from application:
//│ ║  l.461: 	  else fun f -> fun x -> f ((to_church_4 (n - 1)) f x) : ChurchInt
//│ ╙──       	                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│             = [Function: to_church_4]

// :e
to_church_ty = to_church_5
//│ int -> ('a -> ('a & 'b)) -> (forall 'c. ('c & 'a) -> ('c | 'b))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_5]




// (* Echoue avec la value restriction. *)
// let rec (to_church:int -> Int) n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1)) f x)
// ;;


// // * It seems this one may need polymorphic recursion...?
// // *  ...but it's just a version with succ inlined!?
// :e
rec def to_church_ty n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_ty (n - 1)) f x)
//│ int -> ('a -> ('a & 'b)) -> (forall 'c. ('c & 'a) -> ('c | 'b))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_ty6]

// * ... since we can fix it by using the annotation for rec calls:
def to_church_ty n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_ty (n - 1)) f x)
//│ int -> (forall 'a, 'b. ('a -> 'b & 'a -> 'a & 'b) -> (forall 'b, 'a0, 'c. ('c -> (forall 'b, 'c, 'a1, 'd. ('c | 'd
//│   where
//│     'b <: ('a1 | 'c) -> 'a1 & ('a1 | 'c) -> 'd))
//│   where
//│     'b <: ('a0 | 'c) -> 'a0 & ('a0 | 'c) -> 'b)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_ty7]


// (* �a coince. *)
// let tc n = (to_church n : Int);;

:e // FIXME?
def tc n = to_church_1 n : ChurchInt
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.715: 	def tc n = to_church_1 n : ChurchInt
//│ ║         	           ^^^^^^^^^^^^^
//│ ╟── type `‘a683` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ tc: int -> ChurchInt
//│   = [Function: tc]

def tc n = to_church_ty n : ChurchInt
//│ tc: int -> ChurchInt
//│   = [Function: tc1]

:e // FIXME should be caught by cycle checker!
def tc n = to_church_2 n : ChurchInt // Requires :RecursiveTypes
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r, ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1, ?i1, ?j1, ?k1, ?l1, ?m1, ?n1, ?o1. ?o1 <: ChurchInt` exceeded recursion depth limit (300)
//│ ║  l.733: 	def tc n = to_church_2 n : ChurchInt // Requires :RecursiveTypes
//│ ║         	           ^^^^^^^^^^^^^
//│ ╟── while constraining:  (α121_5837'''',)  <!<  (‘a'''',)
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  ((α121_5837'''',) -> α122_5839'''')
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α118_5836''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α118_5835''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α118_5834''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α118_5833''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α118_5832''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α118_5831''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α118_5830''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α118_5829''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α118_5828''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α118_5827''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α118_5826''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α118_5825''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α118_5824''''
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  α117_4189''''  <!<  ((α118_4141'''',) -> α120_4344'''')
//│ ╟── while constraining:  {(α119_4345'''' -> ‹∀ 6. {α122_4350^7 where: α117_4189'''' <: ((α118_4141'''',) -> α120_4348^7), α118_4141'''' <: ((α121_4349^7,) -> α122_4350^7)}›) where: α117_4189'''' <: ((α118_4141'''',) -> α120_4344''''), α118_4141'''' <: ((α121_4346'''',) -> α122_4347'''')}  <!<  ((α119_4135'''',) -> α121_4136'''')
//│ ╟── while constraining:  ‹∀ 5. {(α119_4338^6 -> ‹∀ 6. {α122_4343^7 where: α117_4189'''' <: ((α118_4141'''',) -> α120_4341^7), α118_4141'''' <: ((α121_4342^7,) -> α122_4343^7)}›) where: α117_4189'''' <: ((α118_4141'''',) -> α120_4337^6), α118_4141'''' <: ((α121_4339^6,) -> α122_4340^6)}›  <!<  ((α119_4135'''',) -> α121_4136'''')
//│ ╟── while constraining:  ‹∀ 5. {(α119_4338^6 -> ‹∀ 6. {α122_4343^7 where: α117_4189'''' <: ((α118_4141'''',) -> α120_4341^7), α118_4141'''' <: ((α121_4342^7,) -> α122_4343^7)}›) where: α117_4189'''' <: ((α118_4141'''',) -> α120_4337^6), α118_4141'''' <: ((α121_4339^6,) -> α122_4340^6)}›  <!<  α120_4134''''
//│ ╟── while constraining:  (α118_4141'''' -> ‹∀ 5. {(α119_4338^6 -> ‹∀ 6. {α122_4343^7 where: α117_4189'''' <: ((α118_4141'''',) -> α120_4341^7), α118_4141'''' <: ((α121_4342^7,) -> α122_4343^7)}›) where: α117_4189'''' <: ((α118_4141'''',) -> α120_4337^6), α118_4141'''' <: ((α121_4339^6,) -> α122_4340^6)}›)  <!<  ((α118_3931'''',) -> α120_4134'''')
//│ ╟── while constraining:  ‹∀ 3. (α118_3725'''' -> ‹∀ 5. {(α119_3775^6 -> ‹∀ 6. {α122_3780^7 where: α117_3773'''' <: ((α118_3725'''',) -> α120_3778^7), α118_3725'''' <: ((α121_3779^7,) -> α122_3780^7)}›) where: α117_3773'''' <: ((α118_3725'''',) -> α120_3774^6), α118_3725'''' <: ((α121_3776^6,) -> α122_3777^6)}›)›  <!<  ((α118_3931'''',) -> α120_4134'''')
//│ ╟── while constraining:  α117_3979''''  <!<  ((α118_3931'''',) -> α120_4134'''')
//│ ╟── while constraining:  {(α119_4135'''' -> ‹∀ 6. {α122_4140^7 where: α117_3979'''' <: ((α118_3931'''',) -> α120_4138^7), α118_3931'''' <: ((α121_4139^7,) -> α122_4140^7)}›) where: α117_3979'''' <: ((α118_3931'''',) -> α120_4134''''), α118_3931'''' <: ((α121_4136'''',) -> α122_4137'''')}  <!<  (‘a'''' -> ‘a'''')
//│ ╟── while constraining:  ‹∀ 5. {(α119_4128^6 -> ‹∀ 6. {α122_4133^7 where: α117_3979'''' <: ((α118_3931'''',) -> α120_4131^7), α118_3931'''' <: ((α121_4132^7,) -> α122_4133^7)}›) where: α117_3979'''' <: ((α118_3931'''',) -> α120_4127^6), α118_3931'''' <: ((α121_4129^6,) -> α122_4130^6)}›  <!<  (‘a'''' -> ‘a'''')
//│ ╟── while constraining:  (α118_3931'''' -> ‹∀ 5. {(α119_4128^6 -> ‹∀ 6. {α122_4133^7 where: α117_3979'''' <: ((α118_3931'''',) -> α120_4131^7), α118_3931'''' <: ((α121_4132^7,) -> α122_4133^7)}›) where: α117_3979'''' <: ((α118_3931'''',) -> α120_4127^6), α118_3931'''' <: ((α121_4129^6,) -> α122_4130^6)}›)  <!<  ((‘a'''' -> ‘a'''') -> (‘a'''' -> ‘a''''))
//│ ╟── while constraining:  ‹∀ 3. (α118_3725'''' -> ‹∀ 5. {(α119_3775^6 -> ‹∀ 6. {α122_3780^7 where: α117_3773'''' <: ((α118_3725'''',) -> α120_3778^7), α118_3725'''' <: ((α121_3779^7,) -> α122_3780^7)}›) where: α117_3773'''' <: ((α118_3725'''',) -> α120_3774^6), α118_3725'''' <: ((α121_3776^6,) -> α122_3777^6)}›)›  <!<  ((‘a'''' -> ‘a'''') -> (‘a'''' -> ‘a''''))
//│ ╟── while constraining:  α3721_3930''''  <!<  ((‘a'''' -> ‘a'''') -> (‘a'''' -> ‘a''''))
//│ ╟── while constraining:  ‹∀ 3. α3721''''›  <!<  ((‘a'''' -> ‘a'''') -> (‘a'''' -> ‘a''''))
//│ ╟── while constraining:  ‹∀ 3. α3721''''›  <!<  ‹∀ 0. (('a53' -> 'a53') -> ('a53' -> 'a53'))›
//│ ╙── while constraining:  ‹∀ 3. α3721''''›  <!<  ChurchInt
//│ tc: int -> ChurchInt
//│   = [Function: tc2]

// FIXME stupid type
def tc n = to_church_3 n
//│ tc: int -> (forall 'a, 'b. (('a | ‘a2562 | ‘a2563) -> 'b & ('a | ‘a2562 | ‘a2563) -> (‘a2562 & 'a)) -> (forall 'c. (‘a2562 & 'a & 'c) -> (‘a2562 | 'c | 'b)))
//│   = [Function: tc3]
// FIXME
tc 1 id
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.777: 	tc 1 id
//│ ║         	^^^^^^^
//│ ╟── type `‘a25626098` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── from application:
//│ ║  l.418: 	  else fun f -> fun x -> f ((to_church_3 (n - 1) : ChurchInt) f x)
//│ ╙──       	                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: (‘a25626098 & 'a) -> (‘a25626098 | ‘a25636100 | 'a) | error
//│    = [Function (anonymous)]
// FIXME
tc: int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.793: 	tc: int -> ChurchInt
//│ ║         	^^
//│ ╟── type `‘a2563` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ res: int -> ChurchInt
//│    = [Function: tc3]

// FIXME
def tc n = to_church_3 n : ChurchInt
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.807: 	def tc n = to_church_3 n : ChurchInt
//│ ║         	           ^^^^^^^^^^^^^
//│ ╟── type `‘a2563` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ tc: int -> ChurchInt
//│   = [Function: tc4]

// (* Duplicate with to_church1 ("Marche") above *)
// (* Avec la value restriction : �a passe. *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1) : Int) f x)


// (*** Les annotations de type ne commutent pas. ***)
// type sid = ['a] 'a -> 'a
// type z = ['a,'b] ('a -> 'b) -> ('a -> 'b)
type Z = forall 'a 'b. ('a -> 'b) -> ('a -> 'b)
//│ Defined type alias Z

// let f x = (x:sid), ((x:sid):z)
def f x = ((x : Sid), ((x : Sid) : Z))
//│ f: Sid -> (Sid, Z,)
//│  = [Function: f]

// (* Ne type pas ... c'est une instance polymorphe. Interdit. *)
// untype fun x -> (x:sid), (x:z)
fun x -> ((x : Sid), (x : Z))
//│ res: (Sid & Z) -> (Sid, Z,)
//│    = [Function: res]

