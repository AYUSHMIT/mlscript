// :NoRecursiveTypes // Makes several signature checks fail
:GeneralizeCurriedFunctions
:DistributeForalls

// (*** L'annotation est n�cessaire sur z, mais z n'est utilis� qu'une seule fois. ***)
// type sid = ['a] 'a -> 'a
type Sid = forall 'a. 'a -> 'a
//│ Defined type alias Sid

// let t (z:sid) = ( (fun a -> z) : ['a,'b] 'b -> 'a -> 'a )
def t (z: Sid) = (fun a -> z) : forall 'a 'b. 'b -> 'a -> 'a
//│ t: Sid -> (forall 'a. (anything -> 'a -> 'a
//│   where
//│     'b <: ‘a -> ‘a))
//│   where
//│     'b <: ‘a -> ‘a
//│  = [Function: t]

// (* Une seule instance, mais polymorphe. *)
// let t z = ( (fun a -> z) : ['a,'b] 'b -> 'a -> 'a );;
def t z = (fun a -> z) : forall 'a 'b. 'b -> 'a -> 'a
//│ t: 'b -> (forall 'a. ('b -> 'a -> 'a
//│   where
//│     'b <: ‘a -> ‘a))
//│   where
//│     'b <: ‘a -> ‘a
//│  = [Function: t1]

def t z = fun a -> z
//│ t: 'a -> anything -> 'a
//│  = [Function: t2]


// (*** Ne type pas avec les value-restriction. Emb�tant. ***)

// type Int = ['a] ('a -> 'a) -> ('a -> 'a)
// ;;
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt

// let zero f x = x
// ;;

def zero f x = x
//│ zero: anything -> (forall 'a. 'a -> 'a)
//│     = [Function: zero]

def zero_ty: ChurchInt
//│ zero_ty: ChurchInt
//│        = <missing implementation>

// let succ (n:Int) = fun f x -> f (n f x)
// ;;
def succ_ty: ChurchInt -> ChurchInt
def succ (n: ChurchInt) = fun f -> fun x -> f (n f x)
def succ' n = fun f -> fun x -> f (n f x)
//│ succ_ty: ChurchInt -> ChurchInt
//│        = <missing implementation>
//│ succ: ChurchInt -> (forall 'a, 'b, 'c. (('c -> anything & 'b) -> (forall 'a, 'b, 'd, 'e. ('d -> (forall 'a, 'b, 'd, 'f, 'g. ('g
//│   where
//│     'a <: 'b -> 'd -> 'f
//│     'b <: 'f -> 'g))
//│   where
//│     'a <: 'b -> 'd -> 'e
//│     'b <: 'e -> anything))
//│   where
//│     'a <: 'b -> nothing -> 'c))
//│     = [Function: succ]
//│ succ': (nothing -> nothing -> 'a & 'a) -> (forall 'a, 'b, 'c. (('c -> 'a & 'b) -> (forall 'a, 'b, 'd, 'e. ('d -> (forall 'a, 'b, 'd, 'f, 'g. ('g
//│   where
//│     'a <: 'b -> 'd -> 'f
//│     'b <: 'f -> 'g))
//│   where
//│     'a <: 'b -> 'd -> 'e
//│     'b <: 'e -> 'a))
//│   where
//│     'a <: 'b -> nothing -> 'c))
//│      = [Function: succ]

// * Note: without constrained types we wouldn't get the principal type of succ'

// * Require distrib – see Scratch3
succ_ty = succ
succ_ty = succ'
//│ ChurchInt -> (forall 'a, 'b, 'c. (('c -> anything & 'b) -> (forall 'a, 'b, 'd, 'e. ('d -> (forall 'a, 'b, 'd, 'f, 'g. ('g
//│   where
//│     'a <: 'b -> 'd -> 'f
//│     'b <: 'f -> 'g))
//│   where
//│     'a <: 'b -> 'd -> 'e
//│     'b <: 'e -> anything))
//│   where
//│     'a <: 'b -> nothing -> 'c))
//│   <:  succ_ty:
//│ ChurchInt -> ChurchInt
//│        = [Function: succ]
//│ (nothing -> nothing -> 'a & 'a) -> (forall 'a, 'b, 'c. (('c -> 'a & 'b) -> (forall 'a, 'b, 'd, 'e. ('d -> (forall 'a, 'b, 'd, 'f, 'g. ('g
//│   where
//│     'a <: 'b -> 'd -> 'f
//│     'b <: 'f -> 'g))
//│   where
//│     'a <: 'b -> 'd -> 'e
//│     'b <: 'e -> 'a))
//│   where
//│     'a <: 'b -> nothing -> 'c))
//│   <:  succ_ty:
//│ ChurchInt -> ChurchInt
//│        = [Function: succ]

// :d
succ'
//│ res: (nothing -> nothing -> 'a & 'a) -> (forall 'a, 'b, 'c. (('c -> 'a & 'b) -> (forall 'a, 'b, 'd, 'e. ('d -> (forall 'a, 'b, 'd, 'f, 'g. ('g
//│   where
//│     'a <: 'b -> 'd -> 'f
//│     'b <: 'f -> 'g))
//│   where
//│     'a <: 'b -> 'd -> 'e
//│     'b <: 'e -> 'a))
//│   where
//│     'a <: 'b -> nothing -> 'c))
//│    = [Function: succ]

// :d
// :e
succ' {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.125: 	succ' {}
//│ ║         	^^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.125: 	succ' {}
//│ ║         	      ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.56: 	def succ' n = fun f -> fun x -> f (n f x)
//│ ╙──      	                                   ^^^
//│ res: ('a -> anything & 'b) -> (forall 'b, 'c, 'd. ('c -> (forall 'b, 'c, 'e, 'f. ('f
//│   where
//│     'g <: 'b -> 'c -> 'e
//│     'b <: 'e -> 'f))
//│   where
//│     'g <: 'b -> 'c -> 'd
//│     'b <: 'd -> anything)) | error
//│   where
//│     'g <: 'b -> nothing -> 'a
//│    = [Function: succ]

succ' {} {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.146: 	succ' {} {}
//│ ║         	^^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.146: 	succ' {} {}
//│ ║         	      ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.56: 	def succ' n = fun f -> fun x -> f (n f x)
//│ ╙──      	                                   ^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.146: 	succ' {} {}
//│ ║         	^^^^^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.146: 	succ' {} {}
//│ ║         	      ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.56: 	def succ' n = fun f -> fun x -> f (n f x)
//│ ╙──      	                                   ^^^
//│ res: 'a -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'd <: 'e -> 'a -> 'b
//│     'e <: 'b -> 'c)) | error
//│   where
//│     'd <: 'e -> 'a -> 'f
//│     'e <: 'f -> anything
//│    = [Function: succ]

succ' {} {} {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.174: 	succ' {} {} {}
//│ ║         	^^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.174: 	succ' {} {} {}
//│ ║         	      ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.56: 	def succ' n = fun f -> fun x -> f (n f x)
//│ ╙──      	                                   ^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.174: 	succ' {} {} {}
//│ ║         	^^^^^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.174: 	succ' {} {} {}
//│ ║         	      ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.56: 	def succ' n = fun f -> fun x -> f (n f x)
//│ ╙──      	                                   ^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.174: 	succ' {} {} {}
//│ ║         	^^^^^^^^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.174: 	succ' {} {} {}
//│ ║         	      ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.56: 	def succ' n = fun f -> fun x -> f (n f x)
//│ ╙──      	                                   ^^^
//│ res: error | 'a
//│   where
//│     'b <: 'c -> anything -> 'd
//│     'c <: 'd -> 'a
//│    = [Function: succ]

fun x -> succ' x x x x x x x x x
//│ res: (nothing -> nothing -> anything & 'a -> nothing -> 'b & 'b -> anything & 'a -> 'a -> 'c & 'c -> anything & 'd -> 'a -> 'a -> 'a -> 'a -> 'a -> 'a -> anything & 'a -> 'a -> 'd & 'a) -> (forall 'a, 'e, 'f, 'g, 'h. ('h
//│   where
//│     'a <: nothing -> nothing -> anything & 'a -> nothing -> 'e & 'e -> anything & 'a -> 'a -> 'f & 'f -> anything & 'a -> 'a -> 'g & 'g -> 'a -> 'a -> 'a -> 'a -> 'a -> 'a -> 'h))
//│    = [Function: succ]


// let rec to_church n =
//   if n = 0 then zero
//   else succ (to_church (n-1))
// ;;

def to_church_ty: int -> ChurchInt
//│ to_church_ty: int -> ChurchInt
//│             = <missing implementation>

// * NOTE:
// *  The type inferred for the succ version with *annotated* param seems less powerful
// *  as the following only successfully type checks with `:DistributeForalls`:
:e // FIXME?
rec def to_church_1 n =
  if n == 0 then zero
  else succ (to_church_1 (n - 1))
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.228: 	rec def to_church_1 n =
//│ ║         	                    ^^^
//│ ║  l.229: 	  if n == 0 then zero
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.230: 	  else succ (to_church_1 (n - 1))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a694` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ to_church_1: int -> (forall 'b. (('a | ‘a694) -> 'a & ('a | ‘a694) -> anything & 'b) -> (forall 'b, 'c, 'd, 'e, 'f. (('f & 'd) -> (forall 'b, 'c, 'd, 'f, 'g, 'h. ('f | 'h
//│   where
//│     'c <: 'b -> 'd -> 'g
//│     'b <: 'g -> 'h))
//│   where
//│     'c <: 'b -> 'd -> 'e
//│     'b <: 'e -> anything)))
//│            = [Function: to_church_1]

rec def to_church_1_t n =
  if n == 0 then zero
  else succ_ty (to_church_1_t (n - 1))
//│ to_church_1_t: int -> (anything -> (forall 'a. 'a -> 'a) | ChurchInt)
//│              = [Function: to_church_1_t]

rec def to_church_1_tt n =
  if n == 0 then zero_ty
  else succ_ty (to_church_1_tt (n - 1))
//│ to_church_1_tt: int -> ChurchInt
//│               = <no result>
//│                 zero_ty is not implemented

// def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))

// * Error happens when destroying constrained types, hinting that this is probably related to polym-recur
// :d
:e
// rec def to_church_1 n =
//   succ (to_church_1 n)
rec def wat =
  succ wat
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.274: 	  succ wat
//│ ║         	  ^^^^^^^^
//│ ╟── type `‘a823` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.274: 	  succ wat
//│ ║         	  ^^^^^^^^
//│ ╟── type `‘a694` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.274: 	  succ wat
//│ ║         	  ^^^^^^^^
//│ ╟── type `‘a825` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ wat: (('a | 'a0 | ‘a694 | ‘a823 | ‘a825) -> anything & ('a | ‘a823) -> 'a & ('a0 | ‘a694 | ‘a825) -> 'a0 & 'b) -> (forall 'b, 'c, 'd, 'e. ('d -> (forall 'b, 'c, 'd, 'f, 'g. ('g
//│   where
//│     'c <: 'b -> 'd -> 'f
//│     'b <: 'f -> 'g))
//│   where
//│     'c <: 'b -> 'd -> 'e
//│     'b <: 'e -> anything))
//│ Runtime error:
//│   ReferenceError: wat is not defined

// works when `succ` is not annotated with the parameter type
:e // FIXME should be caught by cycle checker!
:ng
rec def nani =
  succ' nani
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: ?nani` exceeded recursion depth limit (300)
//│ ║  l.316: 	  succ' nani
//│ ║         	  ^^^^^^^^^^
//│ ╟── while constraining:  (α118_1188',)  <!<  (α118_1205',)
//│ ╟── while constraining:  (α118_1205' -> ‹∀ 5. {(α119_1209^6 -> ‹∀ 6. {α122_1214^7 where: α117_877' <: ((α118_1205',) -> α120_1212^7), α118_1205' <: ((α121_1213^7,) -> α122_1214^7)}›) where: α117_877' <: ((α118_1205',) -> α120_1208^6), α118_1205' <: ((α121_1210^6,) -> α122_1211^6)}›)  <!<  ((α118_1188',) -> α120_1198')
//│ ╟── while constraining:  ‹∀ 3. (α118_883'''' -> ‹∀ 5. {(α119_889^6 -> ‹∀ 6. {α122_894^7 where: α117_877' <: ((α118_883'''',) -> α120_892^7), α118_883'''' <: ((α121_893^7,) -> α122_894^7)}›) where: α117_877' <: ((α118_883'''',) -> α120_888^6), α118_883'''' <: ((α121_890^6,) -> α122_891^6)}›)›  <!<  ((α118_1188',) -> α120_1198')
//│ ╟── while constraining:  α117_877'  <!<  ((α118_1188',) -> α120_1198')
//│ ╟── while constraining:  {(α119_1199' -> ‹∀ 6. {α122_1204^7 where: α117_877' <: ((α118_1188',) -> α120_1202^7), α118_1188' <: ((α121_1203^7,) -> α122_1204^7)}›) where: α117_877' <: ((α118_1188',) -> α120_1198'), α118_1188' <: ((α121_1200',) -> α122_1201')}  <!<  ((α119_1182',) -> α121_1183')
//│ ╟── while constraining:  ‹∀ 5. {(α119_1192^6 -> ‹∀ 6. {α122_1197^7 where: α117_877' <: ((α118_1188',) -> α120_1195^7), α118_1188' <: ((α121_1196^7,) -> α122_1197^7)}›) where: α117_877' <: ((α118_1188',) -> α120_1191^6), α118_1188' <: ((α121_1193^6,) -> α122_1194^6)}›  <!<  ((α119_1182',) -> α121_1183')
//│ ╟── while constraining:  ‹∀ 5. {(α119_1192^6 -> ‹∀ 6. {α122_1197^7 where: α117_877' <: ((α118_1188',) -> α120_1195^7), α118_1188' <: ((α121_1196^7,) -> α122_1197^7)}›) where: α117_877' <: ((α118_1188',) -> α120_1191^6), α118_1188' <: ((α121_1193^6,) -> α122_1194^6)}›  <!<  α120_1181'
//│ ╟── while constraining:  (α118_1188' -> ‹∀ 5. {(α119_1192^6 -> ‹∀ 6. {α122_1197^7 where: α117_877' <: ((α118_1188',) -> α120_1195^7), α118_1188' <: ((α121_1196^7,) -> α122_1197^7)}›) where: α117_877' <: ((α118_1188',) -> α120_1191^6), α118_1188' <: ((α121_1193^6,) -> α122_1194^6)}›)  <!<  ((α118_1171',) -> α120_1181')
//│ ╟── while constraining:  ‹∀ 3. (α118_883'''' -> ‹∀ 5. {(α119_889^6 -> ‹∀ 6. {α122_894^7 where: α117_877' <: ((α118_883'''',) -> α120_892^7), α118_883'''' <: ((α121_893^7,) -> α122_894^7)}›) where: α117_877' <: ((α118_883'''',) -> α120_888^6), α118_883'''' <: ((α121_890^6,) -> α122_891^6)}›)›  <!<  ((α118_1171',) -> α120_1181')
//│ ╟── while constraining:  α117_877'  <!<  ((α118_1171',) -> α120_1181')
//│ ╟── while constraining:  {(α119_1182' -> ‹∀ 6. {α122_1187^7 where: α117_877' <: ((α118_1171',) -> α120_1185^7), α118_1171' <: ((α121_1186^7,) -> α122_1187^7)}›) where: α117_877' <: ((α118_1171',) -> α120_1181'), α118_1171' <: ((α121_1183',) -> α122_1184')}  <!<  ((α119_1165',) -> α121_1166')
//│ ╟── while constraining:  ‹∀ 5. {(α119_1175^6 -> ‹∀ 6. {α122_1180^7 where: α117_877' <: ((α118_1171',) -> α120_1178^7), α118_1171' <: ((α121_1179^7,) -> α122_1180^7)}›) where: α117_877' <: ((α118_1171',) -> α120_1174^6), α118_1171' <: ((α121_1176^6,) -> α122_1177^6)}›  <!<  ((α119_1165',) -> α121_1166')
//│ ╟── while constraining:  ‹∀ 5. {(α119_1175^6 -> ‹∀ 6. {α122_1180^7 where: α117_877' <: ((α118_1171',) -> α120_1178^7), α118_1171' <: ((α121_1179^7,) -> α122_1180^7)}›) where: α117_877' <: ((α118_1171',) -> α120_1174^6), α118_1171' <: ((α121_1176^6,) -> α122_1177^6)}›  <!<  α120_1164'
//│ ╟── while constraining:  (α118_1171' -> ‹∀ 5. {(α119_1175^6 -> ‹∀ 6. {α122_1180^7 where: α117_877' <: ((α118_1171',) -> α120_1178^7), α118_1171' <: ((α121_1179^7,) -> α122_1180^7)}›) where: α117_877' <: ((α118_1171',) -> α120_1174^6), α118_1171' <: ((α121_1176^6,) -> α122_1177^6)}›)  <!<  ((α118_1154',) -> α120_1164')
//│ ╟── while constraining:  ‹∀ 3. (α118_883'''' -> ‹∀ 5. {(α119_889^6 -> ‹∀ 6. {α122_894^7 where: α117_877' <: ((α118_883'''',) -> α120_892^7), α118_883'''' <: ((α121_893^7,) -> α122_894^7)}›) where: α117_877' <: ((α118_883'''',) -> α120_888^6), α118_883'''' <: ((α121_890^6,) -> α122_891^6)}›)›  <!<  ((α118_1154',) -> α120_1164')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  α117_877'  <!<  ((α118_916',) -> α120_926')
//│ ╟── while constraining:  {(α119_927' -> ‹∀ 6. {α122_932^7 where: α117_877' <: ((α118_916',) -> α120_930^7), α118_916' <: ((α121_931^7,) -> α122_932^7)}›) where: α117_877' <: ((α118_916',) -> α120_926'), α118_916' <: ((α121_928',) -> α122_929')}  <!<  ((α119_910',) -> α121_911')
//│ ╟── while constraining:  ‹∀ 5. {(α119_920^6 -> ‹∀ 6. {α122_925^7 where: α117_877' <: ((α118_916',) -> α120_923^7), α118_916' <: ((α121_924^7,) -> α122_925^7)}›) where: α117_877' <: ((α118_916',) -> α120_919^6), α118_916' <: ((α121_921^6,) -> α122_922^6)}›  <!<  ((α119_910',) -> α121_911')
//│ ╟── while constraining:  ‹∀ 5. {(α119_920^6 -> ‹∀ 6. {α122_925^7 where: α117_877' <: ((α118_916',) -> α120_923^7), α118_916' <: ((α121_924^7,) -> α122_925^7)}›) where: α117_877' <: ((α118_916',) -> α120_919^6), α118_916' <: ((α121_921^6,) -> α122_922^6)}›  <!<  α120_909'
//│ ╟── while constraining:  (α118_916' -> ‹∀ 5. {(α119_920^6 -> ‹∀ 6. {α122_925^7 where: α117_877' <: ((α118_916',) -> α120_923^7), α118_916' <: ((α121_924^7,) -> α122_925^7)}›) where: α117_877' <: ((α118_916',) -> α120_919^6), α118_916' <: ((α121_921^6,) -> α122_922^6)}›)  <!<  ((α118_899',) -> α120_909')
//│ ╟── while constraining:  ‹∀ 3. (α118_883'''' -> ‹∀ 5. {(α119_889^6 -> ‹∀ 6. {α122_894^7 where: α117_877' <: ((α118_883'''',) -> α120_892^7), α118_883'''' <: ((α121_893^7,) -> α122_894^7)}›) where: α117_877' <: ((α118_883'''',) -> α120_888^6), α118_883'''' <: ((α121_890^6,) -> α122_891^6)}›)›  <!<  ((α118_899',) -> α120_909')
//│ ╟── while constraining:  α117_877'  <!<  ((α118_899',) -> α120_909')
//│ ╟── while constraining:  {(α119_910' -> ‹∀ 6. {α122_915^7 where: α117_877' <: ((α118_899',) -> α120_913^7), α118_899' <: ((α121_914^7,) -> α122_915^7)}›) where: α117_877' <: ((α118_899',) -> α120_909'), α118_899' <: ((α121_911',) -> α122_912')}  <!<  ((α897',) -> α898')
//│ ╟── while constraining:  ‹∀ 5. {(α119_903^6 -> ‹∀ 6. {α122_908^7 where: α117_877' <: ((α118_899',) -> α120_906^7), α118_899' <: ((α121_907^7,) -> α122_908^7)}›) where: α117_877' <: ((α118_899',) -> α120_902^6), α118_899' <: ((α121_904^6,) -> α122_905^6)}›  <!<  ((α897',) -> α898')
//│ ╟── while constraining:  ‹∀ 5. {(α119_903^6 -> ‹∀ 6. {α122_908^7 where: α117_877' <: ((α118_899',) -> α120_906^7), α118_899' <: ((α121_907^7,) -> α122_908^7)}›) where: α117_877' <: ((α118_899',) -> α120_902^6), α118_899' <: ((α121_904^6,) -> α122_905^6)}›  <!<  α896'
//│ ╟── while constraining:  (α118_899' -> ‹∀ 5. {(α119_903^6 -> ‹∀ 6. {α122_908^7 where: α117_877' <: ((α118_899',) -> α120_906^7), α118_899' <: ((α121_907^7,) -> α122_908^7)}›) where: α117_877' <: ((α118_899',) -> α120_902^6), α118_899' <: ((α121_904^6,) -> α122_905^6)}›)  <!<  ((α895',) -> α896')
//│ ╟── while constraining:  ‹∀ 3. (α118_883'''' -> ‹∀ 5. {(α119_889^6 -> ‹∀ 6. {α122_894^7 where: α117_877' <: ((α118_883'''',) -> α120_892^7), α118_883'''' <: ((α121_893^7,) -> α122_894^7)}›) where: α117_877' <: ((α118_883'''',) -> α120_888^6), α118_883'''' <: ((α121_890^6,) -> α122_891^6)}›)›  <!<  ((α895',) -> α896')
//│ ╟── while constraining:  ‹∀ 3. (α118_883'''' -> ‹∀ 5. {(α119_889^6 -> ‹∀ 6. {α122_894^7 where: α117_877' <: ((α118_883'''',) -> α120_892^7), α118_883'''' <: ((α121_893^7,) -> α122_894^7)}›) where: α117_877' <: ((α118_883'''',) -> α120_888^6), α118_883'''' <: ((α121_890^6,) -> α122_891^6)}›)›  <!<  α117_877'
//│ ╟── while constraining:  ‹∀ 3. (α118_883'''' -> ‹∀ 5. {(α119_889^6 -> ‹∀ 6. {α122_894^7 where: α117_877' <: ((α118_883'''',) -> α120_892^7), α118_883'''' <: ((α121_893^7,) -> α122_894^7)}›) where: α117_877' <: ((α118_883'''',) -> α120_888^6), α118_883'''' <: ((α121_890^6,) -> α122_891^6)}›)›  <!<  nani875'
//│ ╙── while constraining:  α876'  <!<  nani875'
//│ nani: (nothing -> anything & 'a) -> (forall 'a, 'b, 'c, 'd. ('c -> (forall 'a, 'b, 'c, 'e, 'f. ('f
//│   where
//│     'b <: 'a -> 'c -> 'e
//│     'a <: 'e -> 'f))
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> anything))

// * The one with annotated rec occurrence works...
def to_church_1_repro n =
  succ (to_church_ty n)
//│ to_church_1_repro: int -> (forall 'b, 'c, 'd, 'a, 'a0. ((('a | 'a0 | ‘a694 | ‘a823 | ‘a825 | 'd) -> anything & ('a | ‘a823) -> 'a & ('a0 | ‘a694 | ‘a825) -> 'a0 & 'c) -> (forall 'b, 'c, 'e, 'f. ('e -> (forall 'b, 'c, 'e, 'g, 'h. ('h
//│   where
//│     'b <: 'c -> 'e -> 'g
//│     'c <: 'g -> 'h))
//│   where
//│     'b <: 'c -> 'e -> 'f
//│     'c <: 'f -> anything))
//│   where
//│     'b <: 'c -> nothing -> 'd))
//│                  = <no result>
//│                    to_church_ty is not implemented



rec def to_church_1_st n =
  if n == 0 then zero
  else succ_ty (to_church_1_st (n - 1))
//│ to_church_1_st: int -> (anything -> (forall 'a. 'a -> 'a) | ChurchInt)
//│               = [Function: to_church_1_st]

:e // FIXME should be caught by cycle checker!
rec def to_church_2 n =
  if n == 0 then zero
  else succ' (to_church_2 (n - 1))
//│ ╔══[ERROR] Subtyping constraint of the form `?a -> ?b <: ?to_church_2` exceeded recursion depth limit (300)
//│ ║  l.384: 	rec def to_church_2 n =
//│ ║         	                    ^^^
//│ ║  l.385: 	  if n == 0 then zero
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.386: 	  else succ' (to_church_2 (n - 1))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  α117_1574'  <!<  ((α118_1822',) -> α120_1832')
//│ ╟── while constraining:  {(α119_1833' -> ‹∀ 6. {α122_1838^7 where: α117_1574' <: ((α118_1822',) -> α120_1836^7), α118_1822' <: ((α121_1837^7,) -> α122_1838^7)}›) where: α117_1574' <: ((α118_1822',) -> α120_1832'), α118_1822' <: ((α121_1834',) -> α122_1835')}  <!<  ((α119_1816',) -> α121_1817')
//│ ╟── while constraining:  ‹∀ 5. {(α119_1826^6 -> ‹∀ 6. {α122_1831^7 where: α117_1574' <: ((α118_1822',) -> α120_1829^7), α118_1822' <: ((α121_1830^7,) -> α122_1831^7)}›) where: α117_1574' <: ((α118_1822',) -> α120_1825^6), α118_1822' <: ((α121_1827^6,) -> α122_1828^6)}›  <!<  ((α119_1816',) -> α121_1817')
//│ ╟── while constraining:  ‹∀ 5. {(α119_1826^6 -> ‹∀ 6. {α122_1831^7 where: α117_1574' <: ((α118_1822',) -> α120_1829^7), α118_1822' <: ((α121_1830^7,) -> α122_1831^7)}›) where: α117_1574' <: ((α118_1822',) -> α120_1825^6), α118_1822' <: ((α121_1827^6,) -> α122_1828^6)}›  <!<  α120_1815'
//│ ╟── while constraining:  (α118_1822' -> ‹∀ 5. {(α119_1826^6 -> ‹∀ 6. {α122_1831^7 where: α117_1574' <: ((α118_1822',) -> α120_1829^7), α118_1822' <: ((α121_1830^7,) -> α122_1831^7)}›) where: α117_1574' <: ((α118_1822',) -> α120_1825^6), α118_1822' <: ((α121_1827^6,) -> α122_1828^6)}›)  <!<  ((α118_1805',) -> α120_1815')
//│ ╟── while constraining:  ‹∀ 3. (α118_1580'''' -> ‹∀ 5. {(α119_1586^6 -> ‹∀ 6. {α122_1591^7 where: α117_1574' <: ((α118_1580'''',) -> α120_1589^7), α118_1580'''' <: ((α121_1590^7,) -> α122_1591^7)}›) where: α117_1574' <: ((α118_1580'''',) -> α120_1585^6), α118_1580'''' <: ((α121_1587^6,) -> α122_1588^6)}›)›  <!<  ((α118_1805',) -> α120_1815')
//│ ╟── while constraining:  α117_1574'  <!<  ((α118_1805',) -> α120_1815')
//│ ╟── while constraining:  {(α119_1816' -> ‹∀ 6. {α122_1821^7 where: α117_1574' <: ((α118_1805',) -> α120_1819^7), α118_1805' <: ((α121_1820^7,) -> α122_1821^7)}›) where: α117_1574' <: ((α118_1805',) -> α120_1815'), α118_1805' <: ((α121_1817',) -> α122_1818')}  <!<  ((α119_1799',) -> α121_1800')
//│ ╟── while constraining:  ‹∀ 5. {(α119_1809^6 -> ‹∀ 6. {α122_1814^7 where: α117_1574' <: ((α118_1805',) -> α120_1812^7), α118_1805' <: ((α121_1813^7,) -> α122_1814^7)}›) where: α117_1574' <: ((α118_1805',) -> α120_1808^6), α118_1805' <: ((α121_1810^6,) -> α122_1811^6)}›  <!<  ((α119_1799',) -> α121_1800')
//│ ╟── while constraining:  ‹∀ 5. {(α119_1809^6 -> ‹∀ 6. {α122_1814^7 where: α117_1574' <: ((α118_1805',) -> α120_1812^7), α118_1805' <: ((α121_1813^7,) -> α122_1814^7)}›) where: α117_1574' <: ((α118_1805',) -> α120_1808^6), α118_1805' <: ((α121_1810^6,) -> α122_1811^6)}›  <!<  α120_1798'
//│ ╟── while constraining:  (α118_1805' -> ‹∀ 5. {(α119_1809^6 -> ‹∀ 6. {α122_1814^7 where: α117_1574' <: ((α118_1805',) -> α120_1812^7), α118_1805' <: ((α121_1813^7,) -> α122_1814^7)}›) where: α117_1574' <: ((α118_1805',) -> α120_1808^6), α118_1805' <: ((α121_1810^6,) -> α122_1811^6)}›)  <!<  ((α118_1788',) -> α120_1798')
//│ ╟── while constraining:  ‹∀ 3. (α118_1580'''' -> ‹∀ 5. {(α119_1586^6 -> ‹∀ 6. {α122_1591^7 where: α117_1574' <: ((α118_1580'''',) -> α120_1589^7), α118_1580'''' <: ((α121_1590^7,) -> α122_1591^7)}›) where: α117_1574' <: ((α118_1580'''',) -> α120_1585^6), α118_1580'''' <: ((α121_1587^6,) -> α122_1588^6)}›)›  <!<  ((α118_1788',) -> α120_1798')
//│ ╟── while constraining:  α117_1574'  <!<  ((α118_1788',) -> α120_1798')
//│ ╟── while constraining:  {(α119_1799' -> ‹∀ 6. {α122_1804^7 where: α117_1574' <: ((α118_1788',) -> α120_1802^7), α118_1788' <: ((α121_1803^7,) -> α122_1804^7)}›) where: α117_1574' <: ((α118_1788',) -> α120_1798'), α118_1788' <: ((α121_1800',) -> α122_1801')}  <!<  ((α119_1782',) -> α121_1783')
//│ ╟── while constraining:  ‹∀ 5. {(α119_1792^6 -> ‹∀ 6. {α122_1797^7 where: α117_1574' <: ((α118_1788',) -> α120_1795^7), α118_1788' <: ((α121_1796^7,) -> α122_1797^7)}›) where: α117_1574' <: ((α118_1788',) -> α120_1791^6), α118_1788' <: ((α121_1793^6,) -> α122_1794^6)}›  <!<  ((α119_1782',) -> α121_1783')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 5. {(α119_1622^6 -> ‹∀ 6. {α122_1627^7 where: α117_1574' <: ((α118_1618',) -> α120_1625^7), α118_1618' <: ((α121_1626^7,) -> α122_1627^7)}›) where: α117_1574' <: ((α118_1618',) -> α120_1621^6), α118_1618' <: ((α121_1623^6,) -> α122_1624^6)}›  <!<  ((α119_1612',) -> α121_1613')
//│ ╟── while constraining:  ‹∀ 5. {(α119_1622^6 -> ‹∀ 6. {α122_1627^7 where: α117_1574' <: ((α118_1618',) -> α120_1625^7), α118_1618' <: ((α121_1626^7,) -> α122_1627^7)}›) where: α117_1574' <: ((α118_1618',) -> α120_1621^6), α118_1618' <: ((α121_1623^6,) -> α122_1624^6)}›  <!<  α120_1611'
//│ ╟── while constraining:  (α118_1618' -> ‹∀ 5. {(α119_1622^6 -> ‹∀ 6. {α122_1627^7 where: α117_1574' <: ((α118_1618',) -> α120_1625^7), α118_1618' <: ((α121_1626^7,) -> α122_1627^7)}›) where: α117_1574' <: ((α118_1618',) -> α120_1621^6), α118_1618' <: ((α121_1623^6,) -> α122_1624^6)}›)  <!<  ((α118_1601',) -> α120_1611')
//│ ╟── while constraining:  ‹∀ 3. (α118_1580'''' -> ‹∀ 5. {(α119_1586^6 -> ‹∀ 6. {α122_1591^7 where: α117_1574' <: ((α118_1580'''',) -> α120_1589^7), α118_1580'''' <: ((α121_1590^7,) -> α122_1591^7)}›) where: α117_1574' <: ((α118_1580'''',) -> α120_1585^6), α118_1580'''' <: ((α121_1587^6,) -> α122_1588^6)}›)›  <!<  ((α118_1601',) -> α120_1611')
//│ ╟── while constraining:  α117_1574'  <!<  ((α118_1601',) -> α120_1611')
//│ ╟── while constraining:  {(α119_1612' -> ‹∀ 6. {α122_1617^7 where: α117_1574' <: ((α118_1601',) -> α120_1615^7), α118_1601' <: ((α121_1616^7,) -> α122_1617^7)}›) where: α117_1574' <: ((α118_1601',) -> α120_1611'), α118_1601' <: ((α121_1613',) -> α122_1614')}  <!<  ((α1595',) -> α1596')
//│ ╟── while constraining:  ‹∀ 5. {(α119_1605^6 -> ‹∀ 6. {α122_1610^7 where: α117_1574' <: ((α118_1601',) -> α120_1608^7), α118_1601' <: ((α121_1609^7,) -> α122_1610^7)}›) where: α117_1574' <: ((α118_1601',) -> α120_1604^6), α118_1601' <: ((α121_1606^6,) -> α122_1607^6)}›  <!<  ((α1595',) -> α1596')
//│ ╟── while constraining:  ‹∀ 5. {(α119_1605^6 -> ‹∀ 6. {α122_1610^7 where: α117_1574' <: ((α118_1601',) -> α120_1608^7), α118_1601' <: ((α121_1609^7,) -> α122_1610^7)}›) where: α117_1574' <: ((α118_1601',) -> α120_1604^6), α118_1601' <: ((α121_1606^6,) -> α122_1607^6)}›  <!<  α1594'
//│ ╟── while constraining:  (α118_1601' -> ‹∀ 5. {(α119_1605^6 -> ‹∀ 6. {α122_1610^7 where: α117_1574' <: ((α118_1601',) -> α120_1608^7), α118_1601' <: ((α121_1609^7,) -> α122_1610^7)}›) where: α117_1574' <: ((α118_1601',) -> α120_1604^6), α118_1601' <: ((α121_1606^6,) -> α122_1607^6)}›)  <!<  ((α1593',) -> α1594')
//│ ╟── while constraining:  ‹∀ 3. (α118_1580'''' -> ‹∀ 5. {(α119_1586^6 -> ‹∀ 6. {α122_1591^7 where: α117_1574' <: ((α118_1580'''',) -> α120_1589^7), α118_1580'''' <: ((α121_1590^7,) -> α122_1591^7)}›) where: α117_1574' <: ((α118_1580'''',) -> α120_1585^6), α118_1580'''' <: ((α121_1587^6,) -> α122_1588^6)}›)›  <!<  ((α1593',) -> α1594')
//│ ╟── while constraining:  ‹∀ 3. (α118_1580'''' -> ‹∀ 5. {(α119_1586^6 -> ‹∀ 6. {α122_1591^7 where: α117_1574' <: ((α118_1580'''',) -> α120_1589^7), α118_1580'''' <: ((α121_1590^7,) -> α122_1591^7)}›) where: α117_1574' <: ((α118_1580'''',) -> α120_1585^6), α118_1580'''' <: ((α121_1587^6,) -> α122_1588^6)}›)›  <!<  α117_1574'
//│ ╟── while constraining:  ‹∀ 3. (α118_1580'''' -> ‹∀ 5. {(α119_1586^6 -> ‹∀ 6. {α122_1591^7 where: α117_1574' <: ((α118_1580'''',) -> α120_1589^7), α118_1580'''' <: ((α121_1590^7,) -> α122_1591^7)}›) where: α117_1574' <: ((α118_1580'''',) -> α120_1585^6), α118_1580'''' <: ((α121_1587^6,) -> α122_1588^6)}›)›  <!<  α1572'
//│ ╟── while constraining:  α1592'  <!<  α1572'
//│ ╟── while constraining:  (α1564' -> α1592')  <!<  ((α1571',) -> α1572')
//│ ╙── while constraining:  (α1564' -> α1592')  <!<  to_church_21563'
//│ to_church_2: int -> (forall 'a. (nothing -> anything & 'a) -> (forall 'a, 'b, 'c, 'd, 'e. (('e & 'c) -> (forall 'a, 'b, 'c, 'e, 'f, 'g. ('g | 'e
//│   where
//│     'b <: 'a -> 'c -> 'f
//│     'a <: 'f -> 'g))
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> anything)))
//│            = [Function: to_church_1_st]

:e // FIXME should be caught by cycle checker!
// Requires :RecursiveTypes
:ng // FIXME codegen: `ReferenceError: to_church_2 is not defined`
to_church_ty = to_church_2
//│ int -> (forall 'a. (nothing -> anything & 'a) -> (forall 'a, 'b, 'c, 'd, 'e. (('e & 'c) -> (forall 'a, 'b, 'c, 'e, 'f, 'g. ('g | 'e
//│   where
//│     'b <: 'a -> 'c -> 'f
//│     'a <: 'f -> 'g))
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> anything)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r, ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1, ?i1, ?j1, ?k1, ?l1, ?m1, ?n1, ?o1, ?p1, ?q1, ?r1, ?s1, ?t1, ?u1, ?v1, ?w1, ?x1, ?y1, ?z1, ?a2, ?b2, ?c2, ?d2, ?e2, ?f2, ?g2, ?h2, ?i2, ?j2, ?k2, ?l2, ?m2, ?n2, ?o2, ?p2, ?q2, ?r2, ?s2, ?t2, ?u2, ?v2, ?w2, ?x2, ?y2, ?z2, ?a3, ?b3, ?c3, ?d3, ?e3, ?f3, ?g3, ?h3, ?i3, ?j3, ?k3, ?l3, ?m3, ?n3, ?o3, ?p3, ?q3, ?to_church_2, ?r3, ?s3, ?t3, ?u3, ?v3, ?w3, ?x3, ?y3, ?z3, ?a4, ?b4, ?c4, ?d4, ?e4, ?f4, ?g4, ?h4, ?i4, ?j4, ?k4, ?l4, ?m4, ?n4, ?o4, ?p4, ?q4, ?r4, ?s4, ?t4, ?u4, ?v4, ?w4, ?x4, ?y4, ?z4, ?a5, ?b5, ?c5, ?d5, ?e5, ?f5, ?g5, ?h5, ?i5, ?j5, ?k5, ?l5, ?m5, ?n5, ?o5, ?p5, ?q5, ?r5, ?s5. ?to_church_2 <: int -> ChurchInt` exceeded recursion depth limit (300)
//│ ║  l.438: 	to_church_ty = to_church_2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (‘a'' -> ‘a'')  <!<  α118_2577''
//│ ╟── while constraining:  α118_2560''  <!<  α118_2577''
//│ ╟── while constraining:  (α118_2560'',)  <!<  (α118_2577'',)
//│ ╟── while constraining:  (α118_2577'' -> ‹∀ 5. {(α119_2581^6 -> ‹∀ 6. {α122_2586^7 where: α117_2214'' <: ((α118_2577'',) -> α120_2584^7), α118_2577'' <: ((α121_2585^7,) -> α122_2586^7)}›) where: α117_2214'' <: ((α118_2577'',) -> α120_2580^6), α118_2577'' <: ((α121_2582^6,) -> α122_2583^6)}›)  <!<  ((α118_2560'',) -> α120_2570'')
//│ ╟── while constraining:  ‹∀ 3. (α118_2166'''' -> ‹∀ 5. {(α119_2216^6 -> ‹∀ 6. {α122_2221^7 where: α117_2214'' <: ((α118_2166'''',) -> α120_2219^7), α118_2166'''' <: ((α121_2220^7,) -> α122_2221^7)}›) where: α117_2214'' <: ((α118_2166'''',) -> α120_2215^6), α118_2166'''' <: ((α121_2217^6,) -> α122_2218^6)}›)›  <!<  ((α118_2560'',) -> α120_2570'')
//│ ╟── while constraining:  α117_2214''  <!<  ((α118_2560'',) -> α120_2570'')
//│ ╟── while constraining:  {(α119_2571'' -> ‹∀ 6. {α122_2576^7 where: α117_2214'' <: ((α118_2560'',) -> α120_2574^7), α118_2560'' <: ((α121_2575^7,) -> α122_2576^7)}›) where: α117_2214'' <: ((α118_2560'',) -> α120_2570''), α118_2560'' <: ((α121_2572'',) -> α122_2573'')}  <!<  ((α119_2554'',) -> α121_2555'')
//│ ╟── while constraining:  ‹∀ 5. {(α119_2564^6 -> ‹∀ 6. {α122_2569^7 where: α117_2214'' <: ((α118_2560'',) -> α120_2567^7), α118_2560'' <: ((α121_2568^7,) -> α122_2569^7)}›) where: α117_2214'' <: ((α118_2560'',) -> α120_2563^6), α118_2560'' <: ((α121_2565^6,) -> α122_2566^6)}›  <!<  ((α119_2554'',) -> α121_2555'')
//│ ╟── while constraining:  ‹∀ 5. {(α119_2564^6 -> ‹∀ 6. {α122_2569^7 where: α117_2214'' <: ((α118_2560'',) -> α120_2567^7), α118_2560'' <: ((α121_2568^7,) -> α122_2569^7)}›) where: α117_2214'' <: ((α118_2560'',) -> α120_2563^6), α118_2560'' <: ((α121_2565^6,) -> α122_2566^6)}›  <!<  α120_2553''
//│ ╟── while constraining:  (α118_2560'' -> ‹∀ 5. {(α119_2564^6 -> ‹∀ 6. {α122_2569^7 where: α117_2214'' <: ((α118_2560'',) -> α120_2567^7), α118_2560'' <: ((α121_2568^7,) -> α122_2569^7)}›) where: α117_2214'' <: ((α118_2560'',) -> α120_2563^6), α118_2560'' <: ((α121_2565^6,) -> α122_2566^6)}›)  <!<  ((α118_2543'',) -> α120_2553'')
//│ ╟── while constraining:  ‹∀ 3. (α118_2166'''' -> ‹∀ 5. {(α119_2216^6 -> ‹∀ 6. {α122_2221^7 where: α117_2214'' <: ((α118_2166'''',) -> α120_2219^7), α118_2166'''' <: ((α121_2220^7,) -> α122_2221^7)}›) where: α117_2214'' <: ((α118_2166'''',) -> α120_2215^6), α118_2166'''' <: ((α121_2217^6,) -> α122_2218^6)}›)›  <!<  ((α118_2543'',) -> α120_2553'')
//│ ╟── while constraining:  α117_2214''  <!<  ((α118_2543'',) -> α120_2553'')
//│ ╟── while constraining:  {(α119_2554'' -> ‹∀ 6. {α122_2559^7 where: α117_2214'' <: ((α118_2543'',) -> α120_2557^7), α118_2543'' <: ((α121_2558^7,) -> α122_2559^7)}›) where: α117_2214'' <: ((α118_2543'',) -> α120_2553''), α118_2543'' <: ((α121_2555'',) -> α122_2556'')}  <!<  ((α119_2537'',) -> α121_2538'')
//│ ╟── while constraining:  ‹∀ 5. {(α119_2547^6 -> ‹∀ 6. {α122_2552^7 where: α117_2214'' <: ((α118_2543'',) -> α120_2550^7), α118_2543'' <: ((α121_2551^7,) -> α122_2552^7)}›) where: α117_2214'' <: ((α118_2543'',) -> α120_2546^6), α118_2543'' <: ((α121_2548^6,) -> α122_2549^6)}›  <!<  ((α119_2537'',) -> α121_2538'')
//│ ╟── while constraining:  ‹∀ 5. {(α119_2547^6 -> ‹∀ 6. {α122_2552^7 where: α117_2214'' <: ((α118_2543'',) -> α120_2550^7), α118_2543'' <: ((α121_2551^7,) -> α122_2552^7)}›) where: α117_2214'' <: ((α118_2543'',) -> α120_2546^6), α118_2543'' <: ((α121_2548^6,) -> α122_2549^6)}›  <!<  α120_2536''
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  (α118_2390'' -> ‹∀ 5. {(α119_2394^6 -> ‹∀ 6. {α122_2399^7 where: α117_2214'' <: ((α118_2390'',) -> α120_2397^7), α118_2390'' <: ((α121_2398^7,) -> α122_2399^7)}›) where: α117_2214'' <: ((α118_2390'',) -> α120_2393^6), α118_2390'' <: ((α121_2395^6,) -> α122_2396^6)}›)  <!<  ((α118_2373'',) -> α120_2383'')
//│ ╟── while constraining:  ‹∀ 3. (α118_2166'''' -> ‹∀ 5. {(α119_2216^6 -> ‹∀ 6. {α122_2221^7 where: α117_2214'' <: ((α118_2166'''',) -> α120_2219^7), α118_2166'''' <: ((α121_2220^7,) -> α122_2221^7)}›) where: α117_2214'' <: ((α118_2166'''',) -> α120_2215^6), α118_2166'''' <: ((α121_2217^6,) -> α122_2218^6)}›)›  <!<  ((α118_2373'',) -> α120_2383'')
//│ ╟── while constraining:  α117_2214''  <!<  ((α118_2373'',) -> α120_2383'')
//│ ╟── while constraining:  {(α119_2384'' -> ‹∀ 6. {α122_2389^7 where: α117_2214'' <: ((α118_2373'',) -> α120_2387^7), α118_2373'' <: ((α121_2388^7,) -> α122_2389^7)}›) where: α117_2214'' <: ((α118_2373'',) -> α120_2383''), α118_2373'' <: ((α121_2385'',) -> α122_2386'')}  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 5. {(α119_2377^6 -> ‹∀ 6. {α122_2382^7 where: α117_2214'' <: ((α118_2373'',) -> α120_2380^7), α118_2373'' <: ((α121_2381^7,) -> α122_2382^7)}›) where: α117_2214'' <: ((α118_2373'',) -> α120_2376^6), α118_2373'' <: ((α121_2378^6,) -> α122_2379^6)}›  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  (α118_2373'' -> ‹∀ 5. {(α119_2377^6 -> ‹∀ 6. {α122_2382^7 where: α117_2214'' <: ((α118_2373'',) -> α120_2380^7), α118_2373'' <: ((α121_2381^7,) -> α122_2382^7)}›) where: α117_2214'' <: ((α118_2373'',) -> α120_2376^6), α118_2373'' <: ((α121_2378^6,) -> α122_2379^6)}›)  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 3. (α118_2166'''' -> ‹∀ 5. {(α119_2216^6 -> ‹∀ 6. {α122_2221^7 where: α117_2214'' <: ((α118_2166'''',) -> α120_2219^7), α118_2166'''' <: ((α121_2220^7,) -> α122_2221^7)}›) where: α117_2214'' <: ((α118_2166'''',) -> α120_2215^6), α118_2166'''' <: ((α121_2217^6,) -> α122_2218^6)}›)›  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  α1592_2165''  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  (α1564_2164'' -> α1592_2165'')  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  to_church_21563_2163''  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. to_church_21563'›  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. to_church_21563'›  <!<  ‹∀ 0. (Int -> (('a53' -> 'a53') -> ('a53' -> 'a53')))›
//│ ╟── while constraining:  ‹∀ 0. to_church_21563'›  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_church_21563'››  <!<  (Int -> ChurchInt)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. to_church_21563'››  <!<  ‹∀ 0. (Int -> ChurchInt)›

// (* Marche *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1) : Int) f x)
// ;;

:e // FIXME?
rec def to_church_3 n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_3 (n - 1) : ChurchInt) f x)
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.491: 	rec def to_church_3 n =
//│ ║         	                    ^^^
//│ ║  l.492: 	  if n == 0 then fun f -> fun x -> x
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.493: 	  else fun f -> fun x -> f ((to_church_3 (n - 1) : ChurchInt) f x)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a2703` is not an instance of type `'a2702`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── from reference:
//│ ║  l.493: 	  else fun f -> fun x -> f ((to_church_3 (n - 1) : ChurchInt) f x)
//│ ╙──       	                                                                ^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.491: 	rec def to_church_3 n =
//│ ║         	                    ^^^
//│ ║  l.492: 	  if n == 0 then fun f -> fun x -> x
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.493: 	  else fun f -> fun x -> f ((to_church_3 (n - 1) : ChurchInt) f x)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a2702` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── but it flows into application with expected type `‘a`
//│ ║  l.493: 	  else fun f -> fun x -> f ((to_church_3 (n - 1) : ChurchInt) f x)
//│ ║         	                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ to_church_3: int -> (('a | ‘a2702 | ‘a2703) -> 'b & ('a | ‘a2702 | ‘a2703) -> (‘a2702 & 'a)) -> (forall 'c. (‘a2702 & 'c & 'a) -> (‘a2702 | 'c | 'b))
//│            = [Function: to_church_3]

// (* Ne Marche Pas *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else (fun f x -> f ((to_church (n-1)) f x) : Int)
// ;;
rec def to_church_4 n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_4 (n - 1)) f x) : ChurchInt
//│ to_church_4: int -> ((ChurchInt | 'a) -> (anything -> nothing) -> nothing -> anything) -> (forall 'b. ('b & 'a) -> (ChurchInt | 'b))
//│            = [Function: to_church_4]


// (* La r�cursion est monomorphe. *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1)) f x)
// ;;

rec def to_church_5 n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_5 (n - 1)) f x)
//│ to_church_5: int -> ('a -> ('a & 'b)) -> (forall 'c. ('c & 'a) -> ('c | 'b))
//│            = [Function: to_church_5]


:e // FIXME?
to_church_ty = to_church_1
//│ int -> (forall 'b. (('a | 'a0 | ‘a694 | ‘a823 | ‘a825) -> anything & ('a | ‘a823) -> 'a & ('a0 | ‘a694 | ‘a825) -> 'a0 & 'b) -> (forall 'b, 'c, 'd, 'e, 'f. (('f & 'd) -> (forall 'b, 'c, 'd, 'f, 'g, 'h. ('f | 'h
//│   where
//│     'c <: 'b -> 'd -> 'g
//│     'b <: 'g -> 'h))
//│   where
//│     'c <: 'b -> 'd -> 'e
//│     'b <: 'e -> anything)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.555: 	to_church_ty = to_church_1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a823` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.555: 	to_church_ty = to_church_1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.555: 	to_church_ty = to_church_1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a825` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.555: 	to_church_ty = to_church_1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a694` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│             = [Function: to_church_1]

to_church_ty = to_church_1_t
//│ int -> (anything -> (forall 'a. 'a -> 'a) | ChurchInt)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_1_t]

to_church_ty = to_church_1_tt
//│ int -> ChurchInt
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = <no result>
//│               to_church_1_tt and zero_ty are not implemented

to_church_ty = to_church_1_st
//│ int -> (anything -> (forall 'a. 'a -> 'a) | ChurchInt)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_1_st]

:e // FIXME should be caught by cycle checker!
:ng
to_church_ty = to_church_2
//│ int -> (forall 'a. (nothing -> anything & 'a) -> (forall 'a, 'b, 'c, 'd, 'e. (('e & 'c) -> (forall 'a, 'b, 'c, 'e, 'f, 'g. ('g | 'e
//│   where
//│     'b <: 'a -> 'c -> 'f
//│     'a <: 'f -> 'g))
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> anything)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r, ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1, ?i1, ?j1, ?k1, ?l1, ?m1, ?n1, ?o1, ?p1, ?q1, ?r1, ?s1, ?t1, ?u1, ?v1, ?w1, ?x1, ?y1, ?z1, ?a2, ?b2, ?c2, ?d2, ?e2, ?f2, ?g2, ?h2, ?i2, ?j2, ?k2, ?l2, ?m2, ?n2, ?o2, ?p2, ?q2, ?r2, ?s2, ?t2, ?u2, ?v2, ?w2, ?x2, ?y2, ?z2, ?a3, ?b3, ?c3, ?d3, ?e3, ?f3, ?g3, ?h3, ?i3, ?j3, ?k3, ?l3, ?m3, ?n3, ?o3, ?p3, ?q3, ?to_church_2, ?r3, ?s3, ?t3, ?u3, ?v3, ?w3, ?x3, ?y3, ?z3, ?a4, ?b4, ?c4, ?d4, ?e4, ?f4, ?g4, ?h4, ?i4, ?j4, ?k4, ?l4, ?m4, ?n4, ?o4, ?p4, ?q4, ?r4, ?s4, ?t4, ?u4, ?v4, ?w4, ?x4, ?y4, ?z4, ?a5, ?b5, ?c5, ?d5, ?e5, ?f5, ?g5, ?h5, ?i5, ?j5, ?k5, ?l5, ?m5, ?n5, ?o5, ?p5, ?q5, ?r5, ?s5. ?to_church_2 <: int -> ChurchInt` exceeded recursion depth limit (300)
//│ ║  l.624: 	to_church_ty = to_church_2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (‘a'' -> ‘a'')  <!<  α118_3465''
//│ ╟── while constraining:  α118_3448''  <!<  α118_3465''
//│ ╟── while constraining:  (α118_3448'',)  <!<  (α118_3465'',)
//│ ╟── while constraining:  (α118_3465'' -> ‹∀ 5. {(α119_3469^6 -> ‹∀ 6. {α122_3474^7 where: α117_3102'' <: ((α118_3465'',) -> α120_3472^7), α118_3465'' <: ((α121_3473^7,) -> α122_3474^7)}›) where: α117_3102'' <: ((α118_3465'',) -> α120_3468^6), α118_3465'' <: ((α121_3470^6,) -> α122_3471^6)}›)  <!<  ((α118_3448'',) -> α120_3458'')
//│ ╟── while constraining:  ‹∀ 3. (α118_3054'''' -> ‹∀ 5. {(α119_3104^6 -> ‹∀ 6. {α122_3109^7 where: α117_3102'' <: ((α118_3054'''',) -> α120_3107^7), α118_3054'''' <: ((α121_3108^7,) -> α122_3109^7)}›) where: α117_3102'' <: ((α118_3054'''',) -> α120_3103^6), α118_3054'''' <: ((α121_3105^6,) -> α122_3106^6)}›)›  <!<  ((α118_3448'',) -> α120_3458'')
//│ ╟── while constraining:  α117_3102''  <!<  ((α118_3448'',) -> α120_3458'')
//│ ╟── while constraining:  {(α119_3459'' -> ‹∀ 6. {α122_3464^7 where: α117_3102'' <: ((α118_3448'',) -> α120_3462^7), α118_3448'' <: ((α121_3463^7,) -> α122_3464^7)}›) where: α117_3102'' <: ((α118_3448'',) -> α120_3458''), α118_3448'' <: ((α121_3460'',) -> α122_3461'')}  <!<  ((α119_3442'',) -> α121_3443'')
//│ ╟── while constraining:  ‹∀ 5. {(α119_3452^6 -> ‹∀ 6. {α122_3457^7 where: α117_3102'' <: ((α118_3448'',) -> α120_3455^7), α118_3448'' <: ((α121_3456^7,) -> α122_3457^7)}›) where: α117_3102'' <: ((α118_3448'',) -> α120_3451^6), α118_3448'' <: ((α121_3453^6,) -> α122_3454^6)}›  <!<  ((α119_3442'',) -> α121_3443'')
//│ ╟── while constraining:  ‹∀ 5. {(α119_3452^6 -> ‹∀ 6. {α122_3457^7 where: α117_3102'' <: ((α118_3448'',) -> α120_3455^7), α118_3448'' <: ((α121_3456^7,) -> α122_3457^7)}›) where: α117_3102'' <: ((α118_3448'',) -> α120_3451^6), α118_3448'' <: ((α121_3453^6,) -> α122_3454^6)}›  <!<  α120_3441''
//│ ╟── while constraining:  (α118_3448'' -> ‹∀ 5. {(α119_3452^6 -> ‹∀ 6. {α122_3457^7 where: α117_3102'' <: ((α118_3448'',) -> α120_3455^7), α118_3448'' <: ((α121_3456^7,) -> α122_3457^7)}›) where: α117_3102'' <: ((α118_3448'',) -> α120_3451^6), α118_3448'' <: ((α121_3453^6,) -> α122_3454^6)}›)  <!<  ((α118_3431'',) -> α120_3441'')
//│ ╟── while constraining:  ‹∀ 3. (α118_3054'''' -> ‹∀ 5. {(α119_3104^6 -> ‹∀ 6. {α122_3109^7 where: α117_3102'' <: ((α118_3054'''',) -> α120_3107^7), α118_3054'''' <: ((α121_3108^7,) -> α122_3109^7)}›) where: α117_3102'' <: ((α118_3054'''',) -> α120_3103^6), α118_3054'''' <: ((α121_3105^6,) -> α122_3106^6)}›)›  <!<  ((α118_3431'',) -> α120_3441'')
//│ ╟── while constraining:  α117_3102''  <!<  ((α118_3431'',) -> α120_3441'')
//│ ╟── while constraining:  {(α119_3442'' -> ‹∀ 6. {α122_3447^7 where: α117_3102'' <: ((α118_3431'',) -> α120_3445^7), α118_3431'' <: ((α121_3446^7,) -> α122_3447^7)}›) where: α117_3102'' <: ((α118_3431'',) -> α120_3441''), α118_3431'' <: ((α121_3443'',) -> α122_3444'')}  <!<  ((α119_3425'',) -> α121_3426'')
//│ ╟── while constraining:  ‹∀ 5. {(α119_3435^6 -> ‹∀ 6. {α122_3440^7 where: α117_3102'' <: ((α118_3431'',) -> α120_3438^7), α118_3431'' <: ((α121_3439^7,) -> α122_3440^7)}›) where: α117_3102'' <: ((α118_3431'',) -> α120_3434^6), α118_3431'' <: ((α121_3436^6,) -> α122_3437^6)}›  <!<  ((α119_3425'',) -> α121_3426'')
//│ ╟── while constraining:  ‹∀ 5. {(α119_3435^6 -> ‹∀ 6. {α122_3440^7 where: α117_3102'' <: ((α118_3431'',) -> α120_3438^7), α118_3431'' <: ((α121_3439^7,) -> α122_3440^7)}›) where: α117_3102'' <: ((α118_3431'',) -> α120_3434^6), α118_3431'' <: ((α121_3436^6,) -> α122_3437^6)}›  <!<  α120_3424''
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  (α118_3278'' -> ‹∀ 5. {(α119_3282^6 -> ‹∀ 6. {α122_3287^7 where: α117_3102'' <: ((α118_3278'',) -> α120_3285^7), α118_3278'' <: ((α121_3286^7,) -> α122_3287^7)}›) where: α117_3102'' <: ((α118_3278'',) -> α120_3281^6), α118_3278'' <: ((α121_3283^6,) -> α122_3284^6)}›)  <!<  ((α118_3261'',) -> α120_3271'')
//│ ╟── while constraining:  ‹∀ 3. (α118_3054'''' -> ‹∀ 5. {(α119_3104^6 -> ‹∀ 6. {α122_3109^7 where: α117_3102'' <: ((α118_3054'''',) -> α120_3107^7), α118_3054'''' <: ((α121_3108^7,) -> α122_3109^7)}›) where: α117_3102'' <: ((α118_3054'''',) -> α120_3103^6), α118_3054'''' <: ((α121_3105^6,) -> α122_3106^6)}›)›  <!<  ((α118_3261'',) -> α120_3271'')
//│ ╟── while constraining:  α117_3102''  <!<  ((α118_3261'',) -> α120_3271'')
//│ ╟── while constraining:  {(α119_3272'' -> ‹∀ 6. {α122_3277^7 where: α117_3102'' <: ((α118_3261'',) -> α120_3275^7), α118_3261'' <: ((α121_3276^7,) -> α122_3277^7)}›) where: α117_3102'' <: ((α118_3261'',) -> α120_3271''), α118_3261'' <: ((α121_3273'',) -> α122_3274'')}  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 5. {(α119_3265^6 -> ‹∀ 6. {α122_3270^7 where: α117_3102'' <: ((α118_3261'',) -> α120_3268^7), α118_3261'' <: ((α121_3269^7,) -> α122_3270^7)}›) where: α117_3102'' <: ((α118_3261'',) -> α120_3264^6), α118_3261'' <: ((α121_3266^6,) -> α122_3267^6)}›  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  (α118_3261'' -> ‹∀ 5. {(α119_3265^6 -> ‹∀ 6. {α122_3270^7 where: α117_3102'' <: ((α118_3261'',) -> α120_3268^7), α118_3261'' <: ((α121_3269^7,) -> α122_3270^7)}›) where: α117_3102'' <: ((α118_3261'',) -> α120_3264^6), α118_3261'' <: ((α121_3266^6,) -> α122_3267^6)}›)  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 3. (α118_3054'''' -> ‹∀ 5. {(α119_3104^6 -> ‹∀ 6. {α122_3109^7 where: α117_3102'' <: ((α118_3054'''',) -> α120_3107^7), α118_3054'''' <: ((α121_3108^7,) -> α122_3109^7)}›) where: α117_3102'' <: ((α118_3054'''',) -> α120_3103^6), α118_3054'''' <: ((α121_3105^6,) -> α122_3106^6)}›)›  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  α1592_3053''  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  (α1564_3052'' -> α1592_3053'')  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  to_church_21563_3051''  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. to_church_21563'›  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. to_church_21563'›  <!<  ‹∀ 0. (Int -> (('a53' -> 'a53') -> ('a53' -> 'a53')))›
//│ ╟── while constraining:  ‹∀ 0. to_church_21563'›  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_church_21563'››  <!<  (Int -> ChurchInt)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. to_church_21563'››  <!<  ‹∀ 0. (Int -> ChurchInt)›

:e // FIXME?
to_church_ty = to_church_3
//│ int -> (('a | ‘a2702 | ‘a2703) -> 'b & ('a | ‘a2702 | ‘a2703) -> (‘a2702 & 'a)) -> (forall 'c. (‘a2702 & 'c & 'a) -> (‘a2702 | 'c | 'b))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.671: 	to_church_ty = to_church_3
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a2703` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.671: 	to_church_ty = to_church_3
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a2702` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.671: 	to_church_ty = to_church_3
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── from application:
//│ ║  l.493: 	  else fun f -> fun x -> f ((to_church_3 (n - 1) : ChurchInt) f x)
//│ ╙──       	                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.671: 	to_church_ty = to_church_3
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a` is not an instance of type `'a2702`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│             = [Function: to_church_3]

:e
to_church_ty = to_church_4
//│ int -> ((ChurchInt | 'a) -> (anything -> nothing) -> nothing -> anything) -> (forall 'b. ('b & 'a) -> (ChurchInt | 'b))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.717: 	to_church_ty = to_church_4
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `(?a -> ?a) -> ?a -> ?a` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                            ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.717: 	to_church_ty = to_church_4
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a` is not a function
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                            ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from application:
//│ ║  l.536: 	  else fun f -> fun x -> f ((to_church_4 (n - 1)) f x) : ChurchInt
//│ ╙──       	                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│             = [Function: to_church_4]

// :e
to_church_ty = to_church_5
//│ int -> ('a -> ('a & 'b)) -> (forall 'c. ('c & 'a) -> ('c | 'b))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_5]




// (* Echoue avec la value restriction. *)
// let rec (to_church:int -> Int) n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1)) f x)
// ;;


// // * It seems this one may need polymorphic recursion...?
// // *  ...but it's just a version with succ inlined!?
// :e
rec def to_church_ty n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_ty (n - 1)) f x)
//│ int -> ('a -> ('a & 'b)) -> (forall 'c. ('c & 'a) -> ('c | 'b))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_ty6]

// * ... since we can fix it by using the annotation for rec calls:
def to_church_ty n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_ty (n - 1)) f x)
//│ int -> (forall 'a, 'b. ('a -> 'b & 'a -> 'a & 'b) -> (forall 'b, 'a0, 'c. ('c -> (forall 'b, 'c, 'a1, 'd. ('c | 'd
//│   where
//│     'b <: ('a1 | 'c) -> 'a1 & ('a1 | 'c) -> 'd))
//│   where
//│     'b <: ('a0 | 'c) -> 'a0 & ('a0 | 'c) -> 'b)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_ty7]


// (* �a coince. *)
// let tc n = (to_church n : Int);;

:e // FIXME?
def tc n = to_church_1 n : ChurchInt
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.790: 	def tc n = to_church_1 n : ChurchInt
//│ ║         	           ^^^^^^^^^^^^^
//│ ╟── type `‘a823` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ tc: int -> ChurchInt
//│   = [Function: tc]

def tc n = to_church_ty n : ChurchInt
//│ tc: int -> ChurchInt
//│   = [Function: tc1]

:e // FIXME should be caught by cycle checker!
def tc n = to_church_2 n : ChurchInt // Requires :RecursiveTypes
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r, ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1, ?i1, ?j1, ?k1, ?l1, ?m1, ?n1, ?o1. ?o1 <: ChurchInt` exceeded recursion depth limit (300)
//│ ║  l.808: 	def tc n = to_church_2 n : ChurchInt // Requires :RecursiveTypes
//│ ║         	           ^^^^^^^^^^^^^
//│ ╟── while constraining:  (α121_5977'''',)  <!<  (‘a'''',)
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  ((α121_5977'''',) -> α122_5979'''')
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α118_5976''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α118_5975''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α118_5974''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α118_5973''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α118_5972''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α118_5971''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α118_5970''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α118_5969''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α118_5968''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α118_5967''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α118_5966''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α118_5965''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α118_5964''''
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  α117_4329''''  <!<  ((α118_4281'''',) -> α120_4484'''')
//│ ╟── while constraining:  {(α119_4485'''' -> ‹∀ 6. {α122_4490^7 where: α117_4329'''' <: ((α118_4281'''',) -> α120_4488^7), α118_4281'''' <: ((α121_4489^7,) -> α122_4490^7)}›) where: α117_4329'''' <: ((α118_4281'''',) -> α120_4484''''), α118_4281'''' <: ((α121_4486'''',) -> α122_4487'''')}  <!<  ((α119_4275'''',) -> α121_4276'''')
//│ ╟── while constraining:  ‹∀ 5. {(α119_4478^6 -> ‹∀ 6. {α122_4483^7 where: α117_4329'''' <: ((α118_4281'''',) -> α120_4481^7), α118_4281'''' <: ((α121_4482^7,) -> α122_4483^7)}›) where: α117_4329'''' <: ((α118_4281'''',) -> α120_4477^6), α118_4281'''' <: ((α121_4479^6,) -> α122_4480^6)}›  <!<  ((α119_4275'''',) -> α121_4276'''')
//│ ╟── while constraining:  ‹∀ 5. {(α119_4478^6 -> ‹∀ 6. {α122_4483^7 where: α117_4329'''' <: ((α118_4281'''',) -> α120_4481^7), α118_4281'''' <: ((α121_4482^7,) -> α122_4483^7)}›) where: α117_4329'''' <: ((α118_4281'''',) -> α120_4477^6), α118_4281'''' <: ((α121_4479^6,) -> α122_4480^6)}›  <!<  α120_4274''''
//│ ╟── while constraining:  (α118_4281'''' -> ‹∀ 5. {(α119_4478^6 -> ‹∀ 6. {α122_4483^7 where: α117_4329'''' <: ((α118_4281'''',) -> α120_4481^7), α118_4281'''' <: ((α121_4482^7,) -> α122_4483^7)}›) where: α117_4329'''' <: ((α118_4281'''',) -> α120_4477^6), α118_4281'''' <: ((α121_4479^6,) -> α122_4480^6)}›)  <!<  ((α118_4071'''',) -> α120_4274'''')
//│ ╟── while constraining:  ‹∀ 3. (α118_3865'''' -> ‹∀ 5. {(α119_3915^6 -> ‹∀ 6. {α122_3920^7 where: α117_3913'''' <: ((α118_3865'''',) -> α120_3918^7), α118_3865'''' <: ((α121_3919^7,) -> α122_3920^7)}›) where: α117_3913'''' <: ((α118_3865'''',) -> α120_3914^6), α118_3865'''' <: ((α121_3916^6,) -> α122_3917^6)}›)›  <!<  ((α118_4071'''',) -> α120_4274'''')
//│ ╟── while constraining:  α117_4119''''  <!<  ((α118_4071'''',) -> α120_4274'''')
//│ ╟── while constraining:  {(α119_4275'''' -> ‹∀ 6. {α122_4280^7 where: α117_4119'''' <: ((α118_4071'''',) -> α120_4278^7), α118_4071'''' <: ((α121_4279^7,) -> α122_4280^7)}›) where: α117_4119'''' <: ((α118_4071'''',) -> α120_4274''''), α118_4071'''' <: ((α121_4276'''',) -> α122_4277'''')}  <!<  (‘a'''' -> ‘a'''')
//│ ╟── while constraining:  ‹∀ 5. {(α119_4268^6 -> ‹∀ 6. {α122_4273^7 where: α117_4119'''' <: ((α118_4071'''',) -> α120_4271^7), α118_4071'''' <: ((α121_4272^7,) -> α122_4273^7)}›) where: α117_4119'''' <: ((α118_4071'''',) -> α120_4267^6), α118_4071'''' <: ((α121_4269^6,) -> α122_4270^6)}›  <!<  (‘a'''' -> ‘a'''')
//│ ╟── while constraining:  (α118_4071'''' -> ‹∀ 5. {(α119_4268^6 -> ‹∀ 6. {α122_4273^7 where: α117_4119'''' <: ((α118_4071'''',) -> α120_4271^7), α118_4071'''' <: ((α121_4272^7,) -> α122_4273^7)}›) where: α117_4119'''' <: ((α118_4071'''',) -> α120_4267^6), α118_4071'''' <: ((α121_4269^6,) -> α122_4270^6)}›)  <!<  ((‘a'''' -> ‘a'''') -> (‘a'''' -> ‘a''''))
//│ ╟── while constraining:  ‹∀ 3. (α118_3865'''' -> ‹∀ 5. {(α119_3915^6 -> ‹∀ 6. {α122_3920^7 where: α117_3913'''' <: ((α118_3865'''',) -> α120_3918^7), α118_3865'''' <: ((α121_3919^7,) -> α122_3920^7)}›) where: α117_3913'''' <: ((α118_3865'''',) -> α120_3914^6), α118_3865'''' <: ((α121_3916^6,) -> α122_3917^6)}›)›  <!<  ((‘a'''' -> ‘a'''') -> (‘a'''' -> ‘a''''))
//│ ╟── while constraining:  α3861_4070''''  <!<  ((‘a'''' -> ‘a'''') -> (‘a'''' -> ‘a''''))
//│ ╟── while constraining:  ‹∀ 3. α3861''''›  <!<  ((‘a'''' -> ‘a'''') -> (‘a'''' -> ‘a''''))
//│ ╟── while constraining:  ‹∀ 3. α3861''''›  <!<  ‹∀ 0. (('a53' -> 'a53') -> ('a53' -> 'a53'))›
//│ ╙── while constraining:  ‹∀ 3. α3861''''›  <!<  ChurchInt
//│ tc: int -> ChurchInt
//│   = [Function: tc2]

// FIXME stupid type
def tc n = to_church_3 n
//│ tc: int -> (forall 'a, 'b. (('a | ‘a2702 | ‘a2703) -> 'b & ('a | ‘a2702 | ‘a2703) -> (‘a2702 & 'a)) -> (forall 'c. (‘a2702 & 'a & 'c) -> (‘a2702 | 'c | 'b)))
//│   = [Function: tc3]
// FIXME
tc 1 id
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.852: 	tc 1 id
//│ ║         	^^^^^^^
//│ ╟── type `‘a27026238` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── from application:
//│ ║  l.493: 	  else fun f -> fun x -> f ((to_church_3 (n - 1) : ChurchInt) f x)
//│ ╙──       	                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: (‘a27026238 & 'a) -> (‘a27026238 | ‘a27036240 | 'a) | error
//│    = [Function (anonymous)]
// FIXME
tc: int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.868: 	tc: int -> ChurchInt
//│ ║         	^^
//│ ╟── type `‘a2703` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ res: int -> ChurchInt
//│    = [Function: tc3]

// FIXME
def tc n = to_church_3 n : ChurchInt
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.882: 	def tc n = to_church_3 n : ChurchInt
//│ ║         	           ^^^^^^^^^^^^^
//│ ╟── type `‘a2703` is not an instance of type `'a`
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.38: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ tc: int -> ChurchInt
//│   = [Function: tc4]

// (* Duplicate with to_church1 ("Marche") above *)
// (* Avec la value restriction : �a passe. *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1) : Int) f x)


// (*** Les annotations de type ne commutent pas. ***)
// type sid = ['a] 'a -> 'a
// type z = ['a,'b] ('a -> 'b) -> ('a -> 'b)
type Z = forall 'a 'b. ('a -> 'b) -> ('a -> 'b)
//│ Defined type alias Z

// let f x = (x:sid), ((x:sid):z)
def f x = ((x : Sid), ((x : Sid) : Z))
//│ f: Sid -> (Sid, Z,)
//│  = [Function: f]

// (* Ne type pas ... c'est une instance polymorphe. Interdit. *)
// untype fun x -> (x:sid), (x:z)
fun x -> ((x : Sid), (x : Z))
//│ res: (Sid & Z) -> (Sid, Z,)
//│    = [Function: res]

