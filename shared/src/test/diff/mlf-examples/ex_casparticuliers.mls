// :NoRecursiveTypes // Makes several signature checks fail
:GeneralizeCurriedFunctions
:DistributeForalls

// (*** L'annotation est n�cessaire sur z, mais z n'est utilis� qu'une seule fois. ***)
// type sid = ['a] 'a -> 'a
type Sid = forall 'a. 'a -> 'a
//│ Defined type alias Sid

// let t (z:sid) = ( (fun a -> z) : ['a,'b] 'b -> 'a -> 'a )
def t (z: Sid) = (fun a -> z) : forall 'a 'b. 'b -> 'a -> 'a
//│ t: Sid -> (forall 'a. (anything -> 'a -> 'a
//│   where
//│     'b <: ‘a -> ‘a))
//│  = [Function: t]

// (* Une seule instance, mais polymorphe. *)
// let t z = ( (fun a -> z) : ['a,'b] 'b -> 'a -> 'a );;
def t z = (fun a -> z) : forall 'a 'b. 'b -> 'a -> 'a
//│ t: (nothing -> 'b & 'b) -> (forall 'a. ('b -> 'a -> 'a
//│   where
//│     'b <: ‘a -> ‘a))
//│  = [Function: t1]

def t z = fun a -> z
//│ t: 'a -> anything -> 'a
//│  = [Function: t2]


// (*** Ne type pas avec les value-restriction. Emb�tant. ***)

// type Int = ['a] ('a -> 'a) -> ('a -> 'a)
// ;;
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt

// let zero f x = x
// ;;

def zero f x = x
//│ zero: anything -> (forall 'a. 'a -> 'a)
//│     = [Function: zero]

def zero_ty: ChurchInt
//│ zero_ty: ChurchInt
//│        = <missing implementation>

// let succ (n:Int) = fun f x -> f (n f x)
// ;;
def succ_ty: ChurchInt -> ChurchInt
def succ (n: ChurchInt) = fun f -> fun x -> f (n f x)
def succ' n = fun f -> fun x -> f (n f x)
//│ succ_ty: ChurchInt -> ChurchInt
//│        = <missing implementation>
//│ succ: ChurchInt -> (forall 'a, 'b. (('b -> anything & 'a) -> (forall 'c, 'd. ('c -> (forall 'e, 'a, 'c, 'f, 'g. ('g
//│   where
//│     'e <: 'a -> 'c -> 'f
//│     'a <: 'f -> 'g))
//│   where
//│     'e <: 'a -> 'c -> 'd
//│     'a <: 'd -> anything))
//│   where
//│     'e <: 'a -> nothing -> 'b))
//│     = [Function: succ]
//│ succ': (nothing -> nothing -> 'a & 'a) -> (forall 'b, 'c. (('c -> 'a & 'b) -> (forall 'd, 'e. ('d -> (forall 'a, 'b, 'd, 'f, 'g. ('g
//│   where
//│     'a <: 'b -> 'd -> 'f
//│     'b <: 'f -> 'g))
//│   where
//│     'a <: 'b -> 'd -> 'e
//│     'b <: 'e -> 'a))
//│   where
//│     'a <: 'b -> nothing -> 'c))
//│      = [Function: succ]

// * Note: without constrained types we wouldn't get the principal type of succ'

// * Require distrib – see Scratch3
succ_ty = succ
succ_ty = succ'
//│ ChurchInt -> (forall 'a, 'b. (('b -> anything & 'a) -> (forall 'c, 'd. ('c -> (forall 'e, 'a, 'c, 'f, 'g. ('g
//│   where
//│     'e <: 'a -> 'c -> 'f
//│     'a <: 'f -> 'g))
//│   where
//│     'e <: 'a -> 'c -> 'd
//│     'a <: 'd -> anything))
//│   where
//│     'e <: 'a -> nothing -> 'b))
//│   <:  succ_ty:
//│ ChurchInt -> ChurchInt
//│        = [Function: succ]
//│ (nothing -> nothing -> 'a & 'a) -> (forall 'b, 'c. (('c -> 'a & 'b) -> (forall 'd, 'e. ('d -> (forall 'a, 'b, 'd, 'f, 'g. ('g
//│   where
//│     'a <: 'b -> 'd -> 'f
//│     'b <: 'f -> 'g))
//│   where
//│     'a <: 'b -> 'd -> 'e
//│     'b <: 'e -> 'a))
//│   where
//│     'a <: 'b -> nothing -> 'c))
//│   <:  succ_ty:
//│ ChurchInt -> ChurchInt
//│        = [Function: succ]


:e
succ' {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.108: 	succ' {}
//│ ║         	^^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.108: 	succ' {}
//│ ║         	      ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.52: 	def succ' n = fun f -> fun x -> f (n f x)
//│ ╙──      	                                   ^^^
//│ res: ('a -> anything & 'b) -> (forall 'c, 'd. ('c -> (forall 'b, 'c, 'e, 'f. ('f
//│   where
//│     'g <: 'b -> 'c -> 'e
//│     'b <: 'e -> 'f))
//│   where
//│     'g <: 'b -> 'c -> 'd
//│     'b <: 'd -> anything)) | error
//│   where
//│     'g <: 'b -> nothing -> 'a
//│    = [Function: succ]

fun x -> succ' x x x x x x x x x
//│ res: (nothing -> nothing -> anything & nothing -> anything & 'a -> nothing -> 'b & 'b -> anything & 'c -> 'a -> 'a -> 'a -> 'a -> 'a -> 'a -> anything & 'a -> 'a -> 'c & 'a) -> (forall 'a, 'd, 'e, 'f. ('f
//│   where
//│     'a <: nothing -> nothing -> anything & nothing -> anything & 'a -> nothing -> 'd & 'd -> anything & 'a -> 'a -> 'e & 'e -> 'a -> 'a -> 'a -> 'a -> 'a -> 'a -> 'f))
//│    = [Function: succ]


// let rec to_church n =
//   if n = 0 then zero
//   else succ (to_church (n-1))
// ;;

def to_church_ty: int -> ChurchInt
//│ to_church_ty: int -> ChurchInt
//│             = <missing implementation>

// * NOTE:
// *  The type inferred for the succ version with *annotated* param seems less powerful
// *  as the following only successfully type checks with `:DistributeForalls`:
:e // FIXME?
rec def to_church_1 n =
  if n == 0 then zero
  else succ (to_church_1 (n - 1))
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.149: 	rec def to_church_1 n =
//│ ║         	                    ^^^
//│ ║  l.150: 	  if n == 0 then zero
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.151: 	  else succ (to_church_1 (n - 1))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a559` is not an instance of type `'a`
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ to_church_1: int -> (forall 'b, 'c. (('a | ‘a559) -> 'a & ('a | ‘a559) -> anything & 'b) -> (forall 'b, 'd, 'e, 'f. (('f & 'd) -> (forall 'b, 'c, 'd, 'f, 'g, 'h. ('f | 'h
//│   where
//│     'c <: 'b -> 'd -> 'g
//│     'b <: 'g -> 'h))
//│   where
//│     'c <: 'b -> 'd -> 'e
//│     'b <: 'e -> anything)))
//│            = [Function: to_church_1]

rec def to_church_1_t n =
  if n == 0 then zero
  else succ_ty (to_church_1_t (n - 1))
//│ to_church_1_t: int -> (anything -> (forall 'a. 'a -> 'a) | ChurchInt)
//│              = [Function: to_church_1_t]

rec def to_church_1_tt n =
  if n == 0 then zero_ty
  else succ_ty (to_church_1_tt (n - 1))
//│ to_church_1_tt: int -> ChurchInt
//│               = <no result>
//│                 zero_ty is not implemented

// def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))

// * Error happens when destroying constrained types, hinting that this is probably related to polym-recur
// :d
:e
// rec def to_church_1 n =
//   succ (to_church_1 n)
rec def wat =
  succ wat
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.195: 	  succ wat
//│ ║         	  ^^^^^^^^
//│ ╟── type `‘a689` is not an instance of type `'a`
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.195: 	  succ wat
//│ ║         	  ^^^^^^^^
//│ ╟── type `‘a559` is not an instance of type `'a`
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.195: 	  succ wat
//│ ║         	  ^^^^^^^^
//│ ╟── type `‘a691` is not an instance of type `'a`
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ wat: (('a | 'a0 | ‘a559 | ‘a689 | ‘a691) -> anything & ('a | ‘a689) -> 'a & ('a0 | ‘a559 | ‘a691) -> 'a0 & 'b) -> (forall 'c, 'd. ('c -> (forall 'b, 'e, 'c, 'f, 'g. ('g
//│   where
//│     'e <: 'b -> 'c -> 'f
//│     'b <: 'f -> 'g))
//│   where
//│     'e <: 'b -> 'c -> 'd
//│     'b <: 'd -> anything))
//│ Runtime error:
//│   ReferenceError: wat is not defined

// works when `succ` is not annotated with the parameter type
:e // FIXME should be caught by cycle checker!
:ng
rec def nani =
  succ' nani
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: ?nani` exceeded recursion depth limit (300)
//│ ║  l.237: 	  succ' nani
//│ ║         	  ^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 3. (α115_750'''' -> ‹∀ 4. {‹∀ 5. (α116_756^6 -> ‹∀ 6. {α119_761^7 where: α114_744' <: ((α115_750'''',) -> α117_759^7), α115_750'''' <: ((α118_760^7,) -> α119_761^7)}›)› where: α114_744' <: ((α115_750'''',) -> α117_755^6), α115_750'''' <: ((α118_757^6,) -> α119_758^6)}›)›  <!<  ((α115_990',) -> α117_1000')
//│ ╟── while constraining:  ‹∀ 2. ‹∀ 3. (α115_750'''' -> ‹∀ 4. {‹∀ 5. (α116_756^6 -> ‹∀ 6. {α119_761^7 where: α114_744' <: ((α115_750'''',) -> α117_759^7), α115_750'''' <: ((α118_760^7,) -> α119_761^7)}›)› where: α114_744' <: ((α115_750'''',) -> α117_755^6), α115_750'''' <: ((α118_757^6,) -> α119_758^6)}›)››  <!<  ((α115_990',) -> α117_1000')
//│ ╟── while constraining:  α114_744'  <!<  ((α115_990',) -> α117_1000')
//│ ╟── while constraining:  {‹∀ 5. (α116_994^6 -> ‹∀ 6. {α119_999^7 where: α114_744' <: ((α115_990',) -> α117_997^7), α115_990' <: ((α118_998^7,) -> α119_999^7)}›)› where: α114_744' <: ((α115_990',) -> α117_1000'), α115_990' <: ((α118_1002',) -> α119_1003')}  <!<  ((α116_987',) -> α118_988')
//│ ╟── while constraining:  ‹∀ 4. {‹∀ 5. (α116_994^6 -> ‹∀ 6. {α119_999^7 where: α114_744' <: ((α115_990',) -> α117_997^7), α115_990' <: ((α118_998^7,) -> α119_999^7)}›)› where: α114_744' <: ((α115_990',) -> α117_993^6), α115_990' <: ((α118_995^6,) -> α119_996^6)}›  <!<  ((α116_987',) -> α118_988')
//│ ╟── while constraining:  ‹∀ 4. {‹∀ 5. (α116_994^6 -> ‹∀ 6. {α119_999^7 where: α114_744' <: ((α115_990',) -> α117_997^7), α115_990' <: ((α118_998^7,) -> α119_999^7)}›)› where: α114_744' <: ((α115_990',) -> α117_993^6), α115_990' <: ((α118_995^6,) -> α119_996^6)}›  <!<  α117_986'
//│ ╟── while constraining:  (α115_990' -> ‹∀ 4. {‹∀ 5. (α116_994^6 -> ‹∀ 6. {α119_999^7 where: α114_744' <: ((α115_990',) -> α117_997^7), α115_990' <: ((α118_998^7,) -> α119_999^7)}›)› where: α114_744' <: ((α115_990',) -> α117_993^6), α115_990' <: ((α118_995^6,) -> α119_996^6)}›)  <!<  ((α115_976',) -> α117_986')
//│ ╟── while constraining:  ‹∀ 3. (α115_750'''' -> ‹∀ 4. {‹∀ 5. (α116_756^6 -> ‹∀ 6. {α119_761^7 where: α114_744' <: ((α115_750'''',) -> α117_759^7), α115_750'''' <: ((α118_760^7,) -> α119_761^7)}›)› where: α114_744' <: ((α115_750'''',) -> α117_755^6), α115_750'''' <: ((α118_757^6,) -> α119_758^6)}›)›  <!<  ((α115_976',) -> α117_986')
//│ ╟── while constraining:  ‹∀ 2. ‹∀ 3. (α115_750'''' -> ‹∀ 4. {‹∀ 5. (α116_756^6 -> ‹∀ 6. {α119_761^7 where: α114_744' <: ((α115_750'''',) -> α117_759^7), α115_750'''' <: ((α118_760^7,) -> α119_761^7)}›)› where: α114_744' <: ((α115_750'''',) -> α117_755^6), α115_750'''' <: ((α118_757^6,) -> α119_758^6)}›)››  <!<  ((α115_976',) -> α117_986')
//│ ╟── while constraining:  α114_744'  <!<  ((α115_976',) -> α117_986')
//│ ╟── while constraining:  {‹∀ 5. (α116_980^6 -> ‹∀ 6. {α119_985^7 where: α114_744' <: ((α115_976',) -> α117_983^7), α115_976' <: ((α118_984^7,) -> α119_985^7)}›)› where: α114_744' <: ((α115_976',) -> α117_986'), α115_976' <: ((α118_988',) -> α119_989')}  <!<  ((α116_973',) -> α118_974')
//│ ╟── while constraining:  ‹∀ 4. {‹∀ 5. (α116_980^6 -> ‹∀ 6. {α119_985^7 where: α114_744' <: ((α115_976',) -> α117_983^7), α115_976' <: ((α118_984^7,) -> α119_985^7)}›)› where: α114_744' <: ((α115_976',) -> α117_979^6), α115_976' <: ((α118_981^6,) -> α119_982^6)}›  <!<  ((α116_973',) -> α118_974')
//│ ╟── while constraining:  ‹∀ 4. {‹∀ 5. (α116_980^6 -> ‹∀ 6. {α119_985^7 where: α114_744' <: ((α115_976',) -> α117_983^7), α115_976' <: ((α118_984^7,) -> α119_985^7)}›)› where: α114_744' <: ((α115_976',) -> α117_979^6), α115_976' <: ((α118_981^6,) -> α119_982^6)}›  <!<  α117_972'
//│ ╟── while constraining:  (α115_976' -> ‹∀ 4. {‹∀ 5. (α116_980^6 -> ‹∀ 6. {α119_985^7 where: α114_744' <: ((α115_976',) -> α117_983^7), α115_976' <: ((α118_984^7,) -> α119_985^7)}›)› where: α114_744' <: ((α115_976',) -> α117_979^6), α115_976' <: ((α118_981^6,) -> α119_982^6)}›)  <!<  ((α115_962',) -> α117_972')
//│ ╟── while constraining:  ‹∀ 3. (α115_750'''' -> ‹∀ 4. {‹∀ 5. (α116_756^6 -> ‹∀ 6. {α119_761^7 where: α114_744' <: ((α115_750'''',) -> α117_759^7), α115_750'''' <: ((α118_760^7,) -> α119_761^7)}›)› where: α114_744' <: ((α115_750'''',) -> α117_755^6), α115_750'''' <: ((α118_757^6,) -> α119_758^6)}›)›  <!<  ((α115_962',) -> α117_972')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 4. {‹∀ 5. (α116_784^6 -> ‹∀ 6. {α119_789^7 where: α114_744' <: ((α115_780',) -> α117_787^7), α115_780' <: ((α118_788^7,) -> α119_789^7)}›)› where: α114_744' <: ((α115_780',) -> α117_783^6), α115_780' <: ((α118_785^6,) -> α119_786^6)}›  <!<  ((α116_777',) -> α118_778')
//│ ╟── while constraining:  ‹∀ 4. {‹∀ 5. (α116_784^6 -> ‹∀ 6. {α119_789^7 where: α114_744' <: ((α115_780',) -> α117_787^7), α115_780' <: ((α118_788^7,) -> α119_789^7)}›)› where: α114_744' <: ((α115_780',) -> α117_783^6), α115_780' <: ((α118_785^6,) -> α119_786^6)}›  <!<  α117_776'
//│ ╟── while constraining:  (α115_780' -> ‹∀ 4. {‹∀ 5. (α116_784^6 -> ‹∀ 6. {α119_789^7 where: α114_744' <: ((α115_780',) -> α117_787^7), α115_780' <: ((α118_788^7,) -> α119_789^7)}›)› where: α114_744' <: ((α115_780',) -> α117_783^6), α115_780' <: ((α118_785^6,) -> α119_786^6)}›)  <!<  ((α115_766',) -> α117_776')
//│ ╟── while constraining:  ‹∀ 3. (α115_750'''' -> ‹∀ 4. {‹∀ 5. (α116_756^6 -> ‹∀ 6. {α119_761^7 where: α114_744' <: ((α115_750'''',) -> α117_759^7), α115_750'''' <: ((α118_760^7,) -> α119_761^7)}›)› where: α114_744' <: ((α115_750'''',) -> α117_755^6), α115_750'''' <: ((α118_757^6,) -> α119_758^6)}›)›  <!<  ((α115_766',) -> α117_776')
//│ ╟── while constraining:  ‹∀ 2. ‹∀ 3. (α115_750'''' -> ‹∀ 4. {‹∀ 5. (α116_756^6 -> ‹∀ 6. {α119_761^7 where: α114_744' <: ((α115_750'''',) -> α117_759^7), α115_750'''' <: ((α118_760^7,) -> α119_761^7)}›)› where: α114_744' <: ((α115_750'''',) -> α117_755^6), α115_750'''' <: ((α118_757^6,) -> α119_758^6)}›)››  <!<  ((α115_766',) -> α117_776')
//│ ╟── while constraining:  α114_744'  <!<  ((α115_766',) -> α117_776')
//│ ╟── while constraining:  {‹∀ 5. (α116_770^6 -> ‹∀ 6. {α119_775^7 where: α114_744' <: ((α115_766',) -> α117_773^7), α115_766' <: ((α118_774^7,) -> α119_775^7)}›)› where: α114_744' <: ((α115_766',) -> α117_776'), α115_766' <: ((α118_778',) -> α119_779')}  <!<  ((α764',) -> α765')
//│ ╟── while constraining:  ‹∀ 4. {‹∀ 5. (α116_770^6 -> ‹∀ 6. {α119_775^7 where: α114_744' <: ((α115_766',) -> α117_773^7), α115_766' <: ((α118_774^7,) -> α119_775^7)}›)› where: α114_744' <: ((α115_766',) -> α117_769^6), α115_766' <: ((α118_771^6,) -> α119_772^6)}›  <!<  ((α764',) -> α765')
//│ ╟── while constraining:  ‹∀ 4. {‹∀ 5. (α116_770^6 -> ‹∀ 6. {α119_775^7 where: α114_744' <: ((α115_766',) -> α117_773^7), α115_766' <: ((α118_774^7,) -> α119_775^7)}›)› where: α114_744' <: ((α115_766',) -> α117_769^6), α115_766' <: ((α118_771^6,) -> α119_772^6)}›  <!<  α763'
//│ ╟── while constraining:  (α115_766' -> ‹∀ 4. {‹∀ 5. (α116_770^6 -> ‹∀ 6. {α119_775^7 where: α114_744' <: ((α115_766',) -> α117_773^7), α115_766' <: ((α118_774^7,) -> α119_775^7)}›)› where: α114_744' <: ((α115_766',) -> α117_769^6), α115_766' <: ((α118_771^6,) -> α119_772^6)}›)  <!<  ((α762',) -> α763')
//│ ╟── while constraining:  ‹∀ 3. (α115_750'''' -> ‹∀ 4. {‹∀ 5. (α116_756^6 -> ‹∀ 6. {α119_761^7 where: α114_744' <: ((α115_750'''',) -> α117_759^7), α115_750'''' <: ((α118_760^7,) -> α119_761^7)}›)› where: α114_744' <: ((α115_750'''',) -> α117_755^6), α115_750'''' <: ((α118_757^6,) -> α119_758^6)}›)›  <!<  ((α762',) -> α763')
//│ ╟── while constraining:  ‹∀ 2. ‹∀ 3. (α115_750'''' -> ‹∀ 4. {‹∀ 5. (α116_756^6 -> ‹∀ 6. {α119_761^7 where: α114_744' <: ((α115_750'''',) -> α117_759^7), α115_750'''' <: ((α118_760^7,) -> α119_761^7)}›)› where: α114_744' <: ((α115_750'''',) -> α117_755^6), α115_750'''' <: ((α118_757^6,) -> α119_758^6)}›)››  <!<  ((α762',) -> α763')
//│ ╟── while constraining:  ‹∀ 2. ‹∀ 3. (α115_750'''' -> ‹∀ 4. {‹∀ 5. (α116_756^6 -> ‹∀ 6. {α119_761^7 where: α114_744' <: ((α115_750'''',) -> α117_759^7), α115_750'''' <: ((α118_760^7,) -> α119_761^7)}›)› where: α114_744' <: ((α115_750'''',) -> α117_755^6), α115_750'''' <: ((α118_757^6,) -> α119_758^6)}›)››  <!<  α114_744'
//│ ╟── while constraining:  ‹∀ 2. ‹∀ 3. (α115_750'''' -> ‹∀ 4. {‹∀ 5. (α116_756^6 -> ‹∀ 6. {α119_761^7 where: α114_744' <: ((α115_750'''',) -> α117_759^7), α115_750'''' <: ((α118_760^7,) -> α119_761^7)}›)› where: α114_744' <: ((α115_750'''',) -> α117_755^6), α115_750'''' <: ((α118_757^6,) -> α119_758^6)}›)››  <!<  nani742'
//│ ╙── while constraining:  α743'  <!<  nani742'
//│ nani: (nothing -> anything & 'a) -> (forall 'b, 'c. ('b -> (forall 'a, 'd, 'b, 'e, 'f. ('f
//│   where
//│     'd <: 'a -> 'b -> 'e
//│     'a <: 'e -> 'f))
//│   where
//│     'd <: 'a -> 'b -> 'c
//│     'a <: 'c -> anything))

// * The one with annotated rec occurrence works...
def to_church_1_repro n =
  succ (to_church_ty n)
//│ to_church_1_repro: int -> (forall 'b, 'c. ((('a | 'a0 | ‘a559 | ‘a689 | ‘a691 | 'c) -> anything & ('a | ‘a689) -> 'a & ('a0 | ‘a559 | ‘a691) -> 'a0 & 'b) -> (forall 'd, 'e. ('d -> (forall 'f, 'b, 'd, 'g, 'h. ('h
//│   where
//│     'f <: 'b -> 'd -> 'g
//│     'b <: 'g -> 'h))
//│   where
//│     'f <: 'b -> 'd -> 'e
//│     'b <: 'e -> anything))
//│   where
//│     'f <: 'b -> nothing -> 'c))
//│                  = <no result>
//│                    to_church_ty is not implemented



rec def to_church_1_st n =
  if n == 0 then zero
  else succ_ty (to_church_1_st (n - 1))
//│ to_church_1_st: int -> (anything -> (forall 'a. 'a -> 'a) | ChurchInt)
//│               = [Function: to_church_1_st]

:e // FIXME should be caught by cycle checker!
rec def to_church_2 n =
  if n == 0 then zero
  else succ' (to_church_2 (n - 1))
//│ ╔══[ERROR] Subtyping constraint of the form `?a -> ?b <: ?to_church_2` exceeded recursion depth limit (300)
//│ ║  l.305: 	rec def to_church_2 n =
//│ ║         	                    ^^^
//│ ║  l.306: 	  if n == 0 then zero
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.307: 	  else succ' (to_church_2 (n - 1))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 2. ‹∀ 3. (α115_1356'''' -> ‹∀ 4. {‹∀ 5. (α116_1362^6 -> ‹∀ 6. {α119_1367^7 where: α114_1350' <: ((α115_1356'''',) -> α117_1365^7), α115_1356'''' <: ((α118_1366^7,) -> α119_1367^7)}›)› where: α114_1350' <: ((α115_1356'''',) -> α117_1361^6), α115_1356'''' <: ((α118_1363^6,) -> α119_1364^6)}›)››  <!<  ((α115_1545',) -> α117_1555')
//│ ╟── while constraining:  α114_1350'  <!<  ((α115_1545',) -> α117_1555')
//│ ╟── while constraining:  {‹∀ 5. (α116_1549^6 -> ‹∀ 6. {α119_1554^7 where: α114_1350' <: ((α115_1545',) -> α117_1552^7), α115_1545' <: ((α118_1553^7,) -> α119_1554^7)}›)› where: α114_1350' <: ((α115_1545',) -> α117_1555'), α115_1545' <: ((α118_1557',) -> α119_1558')}  <!<  ((α116_1542',) -> α118_1543')
//│ ╟── while constraining:  ‹∀ 4. {‹∀ 5. (α116_1549^6 -> ‹∀ 6. {α119_1554^7 where: α114_1350' <: ((α115_1545',) -> α117_1552^7), α115_1545' <: ((α118_1553^7,) -> α119_1554^7)}›)› where: α114_1350' <: ((α115_1545',) -> α117_1548^6), α115_1545' <: ((α118_1550^6,) -> α119_1551^6)}›  <!<  ((α116_1542',) -> α118_1543')
//│ ╟── while constraining:  ‹∀ 4. {‹∀ 5. (α116_1549^6 -> ‹∀ 6. {α119_1554^7 where: α114_1350' <: ((α115_1545',) -> α117_1552^7), α115_1545' <: ((α118_1553^7,) -> α119_1554^7)}›)› where: α114_1350' <: ((α115_1545',) -> α117_1548^6), α115_1545' <: ((α118_1550^6,) -> α119_1551^6)}›  <!<  α117_1541'
//│ ╟── while constraining:  (α115_1545' -> ‹∀ 4. {‹∀ 5. (α116_1549^6 -> ‹∀ 6. {α119_1554^7 where: α114_1350' <: ((α115_1545',) -> α117_1552^7), α115_1545' <: ((α118_1553^7,) -> α119_1554^7)}›)› where: α114_1350' <: ((α115_1545',) -> α117_1548^6), α115_1545' <: ((α118_1550^6,) -> α119_1551^6)}›)  <!<  ((α115_1531',) -> α117_1541')
//│ ╟── while constraining:  ‹∀ 3. (α115_1356'''' -> ‹∀ 4. {‹∀ 5. (α116_1362^6 -> ‹∀ 6. {α119_1367^7 where: α114_1350' <: ((α115_1356'''',) -> α117_1365^7), α115_1356'''' <: ((α118_1366^7,) -> α119_1367^7)}›)› where: α114_1350' <: ((α115_1356'''',) -> α117_1361^6), α115_1356'''' <: ((α118_1363^6,) -> α119_1364^6)}›)›  <!<  ((α115_1531',) -> α117_1541')
//│ ╟── while constraining:  ‹∀ 2. ‹∀ 3. (α115_1356'''' -> ‹∀ 4. {‹∀ 5. (α116_1362^6 -> ‹∀ 6. {α119_1367^7 where: α114_1350' <: ((α115_1356'''',) -> α117_1365^7), α115_1356'''' <: ((α118_1366^7,) -> α119_1367^7)}›)› where: α114_1350' <: ((α115_1356'''',) -> α117_1361^6), α115_1356'''' <: ((α118_1363^6,) -> α119_1364^6)}›)››  <!<  ((α115_1531',) -> α117_1541')
//│ ╟── while constraining:  α114_1350'  <!<  ((α115_1531',) -> α117_1541')
//│ ╟── while constraining:  {‹∀ 5. (α116_1535^6 -> ‹∀ 6. {α119_1540^7 where: α114_1350' <: ((α115_1531',) -> α117_1538^7), α115_1531' <: ((α118_1539^7,) -> α119_1540^7)}›)› where: α114_1350' <: ((α115_1531',) -> α117_1541'), α115_1531' <: ((α118_1543',) -> α119_1544')}  <!<  ((α116_1528',) -> α118_1529')
//│ ╟── while constraining:  ‹∀ 4. {‹∀ 5. (α116_1535^6 -> ‹∀ 6. {α119_1540^7 where: α114_1350' <: ((α115_1531',) -> α117_1538^7), α115_1531' <: ((α118_1539^7,) -> α119_1540^7)}›)› where: α114_1350' <: ((α115_1531',) -> α117_1534^6), α115_1531' <: ((α118_1536^6,) -> α119_1537^6)}›  <!<  ((α116_1528',) -> α118_1529')
//│ ╟── while constraining:  ‹∀ 4. {‹∀ 5. (α116_1535^6 -> ‹∀ 6. {α119_1540^7 where: α114_1350' <: ((α115_1531',) -> α117_1538^7), α115_1531' <: ((α118_1539^7,) -> α119_1540^7)}›)› where: α114_1350' <: ((α115_1531',) -> α117_1534^6), α115_1531' <: ((α118_1536^6,) -> α119_1537^6)}›  <!<  α117_1527'
//│ ╟── while constraining:  (α115_1531' -> ‹∀ 4. {‹∀ 5. (α116_1535^6 -> ‹∀ 6. {α119_1540^7 where: α114_1350' <: ((α115_1531',) -> α117_1538^7), α115_1531' <: ((α118_1539^7,) -> α119_1540^7)}›)› where: α114_1350' <: ((α115_1531',) -> α117_1534^6), α115_1531' <: ((α118_1536^6,) -> α119_1537^6)}›)  <!<  ((α115_1517',) -> α117_1527')
//│ ╟── while constraining:  ‹∀ 3. (α115_1356'''' -> ‹∀ 4. {‹∀ 5. (α116_1362^6 -> ‹∀ 6. {α119_1367^7 where: α114_1350' <: ((α115_1356'''',) -> α117_1365^7), α115_1356'''' <: ((α118_1366^7,) -> α119_1367^7)}›)› where: α114_1350' <: ((α115_1356'''',) -> α117_1361^6), α115_1356'''' <: ((α118_1363^6,) -> α119_1364^6)}›)›  <!<  ((α115_1517',) -> α117_1527')
//│ ╟── while constraining:  ‹∀ 2. ‹∀ 3. (α115_1356'''' -> ‹∀ 4. {‹∀ 5. (α116_1362^6 -> ‹∀ 6. {α119_1367^7 where: α114_1350' <: ((α115_1356'''',) -> α117_1365^7), α115_1356'''' <: ((α118_1366^7,) -> α119_1367^7)}›)› where: α114_1350' <: ((α115_1356'''',) -> α117_1361^6), α115_1356'''' <: ((α118_1363^6,) -> α119_1364^6)}›)››  <!<  ((α115_1517',) -> α117_1527')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  (α115_1391' -> ‹∀ 4. {‹∀ 5. (α116_1395^6 -> ‹∀ 6. {α119_1400^7 where: α114_1350' <: ((α115_1391',) -> α117_1398^7), α115_1391' <: ((α118_1399^7,) -> α119_1400^7)}›)› where: α114_1350' <: ((α115_1391',) -> α117_1394^6), α115_1391' <: ((α118_1396^6,) -> α119_1397^6)}›)  <!<  ((α115_1377',) -> α117_1387')
//│ ╟── while constraining:  ‹∀ 3. (α115_1356'''' -> ‹∀ 4. {‹∀ 5. (α116_1362^6 -> ‹∀ 6. {α119_1367^7 where: α114_1350' <: ((α115_1356'''',) -> α117_1365^7), α115_1356'''' <: ((α118_1366^7,) -> α119_1367^7)}›)› where: α114_1350' <: ((α115_1356'''',) -> α117_1361^6), α115_1356'''' <: ((α118_1363^6,) -> α119_1364^6)}›)›  <!<  ((α115_1377',) -> α117_1387')
//│ ╟── while constraining:  ‹∀ 2. ‹∀ 3. (α115_1356'''' -> ‹∀ 4. {‹∀ 5. (α116_1362^6 -> ‹∀ 6. {α119_1367^7 where: α114_1350' <: ((α115_1356'''',) -> α117_1365^7), α115_1356'''' <: ((α118_1366^7,) -> α119_1367^7)}›)› where: α114_1350' <: ((α115_1356'''',) -> α117_1361^6), α115_1356'''' <: ((α118_1363^6,) -> α119_1364^6)}›)››  <!<  ((α115_1377',) -> α117_1387')
//│ ╟── while constraining:  α114_1350'  <!<  ((α115_1377',) -> α117_1387')
//│ ╟── while constraining:  {‹∀ 5. (α116_1381^6 -> ‹∀ 6. {α119_1386^7 where: α114_1350' <: ((α115_1377',) -> α117_1384^7), α115_1377' <: ((α118_1385^7,) -> α119_1386^7)}›)› where: α114_1350' <: ((α115_1377',) -> α117_1387'), α115_1377' <: ((α118_1389',) -> α119_1390')}  <!<  ((α1371',) -> α1372')
//│ ╟── while constraining:  ‹∀ 4. {‹∀ 5. (α116_1381^6 -> ‹∀ 6. {α119_1386^7 where: α114_1350' <: ((α115_1377',) -> α117_1384^7), α115_1377' <: ((α118_1385^7,) -> α119_1386^7)}›)› where: α114_1350' <: ((α115_1377',) -> α117_1380^6), α115_1377' <: ((α118_1382^6,) -> α119_1383^6)}›  <!<  ((α1371',) -> α1372')
//│ ╟── while constraining:  ‹∀ 4. {‹∀ 5. (α116_1381^6 -> ‹∀ 6. {α119_1386^7 where: α114_1350' <: ((α115_1377',) -> α117_1384^7), α115_1377' <: ((α118_1385^7,) -> α119_1386^7)}›)› where: α114_1350' <: ((α115_1377',) -> α117_1380^6), α115_1377' <: ((α118_1382^6,) -> α119_1383^6)}›  <!<  α1370'
//│ ╟── while constraining:  (α115_1377' -> ‹∀ 4. {‹∀ 5. (α116_1381^6 -> ‹∀ 6. {α119_1386^7 where: α114_1350' <: ((α115_1377',) -> α117_1384^7), α115_1377' <: ((α118_1385^7,) -> α119_1386^7)}›)› where: α114_1350' <: ((α115_1377',) -> α117_1380^6), α115_1377' <: ((α118_1382^6,) -> α119_1383^6)}›)  <!<  ((α1369',) -> α1370')
//│ ╟── while constraining:  ‹∀ 3. (α115_1356'''' -> ‹∀ 4. {‹∀ 5. (α116_1362^6 -> ‹∀ 6. {α119_1367^7 where: α114_1350' <: ((α115_1356'''',) -> α117_1365^7), α115_1356'''' <: ((α118_1366^7,) -> α119_1367^7)}›)› where: α114_1350' <: ((α115_1356'''',) -> α117_1361^6), α115_1356'''' <: ((α118_1363^6,) -> α119_1364^6)}›)›  <!<  ((α1369',) -> α1370')
//│ ╟── while constraining:  ‹∀ 2. ‹∀ 3. (α115_1356'''' -> ‹∀ 4. {‹∀ 5. (α116_1362^6 -> ‹∀ 6. {α119_1367^7 where: α114_1350' <: ((α115_1356'''',) -> α117_1365^7), α115_1356'''' <: ((α118_1366^7,) -> α119_1367^7)}›)› where: α114_1350' <: ((α115_1356'''',) -> α117_1361^6), α115_1356'''' <: ((α118_1363^6,) -> α119_1364^6)}›)››  <!<  ((α1369',) -> α1370')
//│ ╟── while constraining:  ‹∀ 2. ‹∀ 3. (α115_1356'''' -> ‹∀ 4. {‹∀ 5. (α116_1362^6 -> ‹∀ 6. {α119_1367^7 where: α114_1350' <: ((α115_1356'''',) -> α117_1365^7), α115_1356'''' <: ((α118_1366^7,) -> α119_1367^7)}›)› where: α114_1350' <: ((α115_1356'''',) -> α117_1361^6), α115_1356'''' <: ((α118_1363^6,) -> α119_1364^6)}›)››  <!<  α114_1350'
//│ ╟── while constraining:  ‹∀ 2. ‹∀ 3. (α115_1356'''' -> ‹∀ 4. {‹∀ 5. (α116_1362^6 -> ‹∀ 6. {α119_1367^7 where: α114_1350' <: ((α115_1356'''',) -> α117_1365^7), α115_1356'''' <: ((α118_1366^7,) -> α119_1367^7)}›)› where: α114_1350' <: ((α115_1356'''',) -> α117_1361^6), α115_1356'''' <: ((α118_1363^6,) -> α119_1364^6)}›)››  <!<  α1348'
//│ ╟── while constraining:  α1368'  <!<  α1348'
//│ ╟── while constraining:  (α1340' -> α1368')  <!<  ((α1347',) -> α1348')
//│ ╙── while constraining:  (α1340' -> α1368')  <!<  to_church_21339'
//│ to_church_2: int -> (forall 'a. (nothing -> anything & 'a) -> (forall 'a, 'b, 'c, 'd. (('d & 'b) -> (forall 'a, 'e, 'b, 'd, 'f, 'g. ('g | 'd
//│   where
//│     'e <: 'a -> 'b -> 'f
//│     'a <: 'f -> 'g))
//│   where
//│     'e <: 'a -> 'b -> 'c
//│     'a <: 'c -> anything)))
//│            = [Function: to_church_1_st]

:e // FIXME should be caught by cycle checker!
// Requires :RecursiveTypes
:ng // FIXME codegen: `ReferenceError: to_church_2 is not defined`
to_church_ty = to_church_2
//│ int -> (forall 'a. (nothing -> anything & 'a) -> (forall 'a, 'b, 'c, 'd. (('d & 'b) -> (forall 'a, 'e, 'b, 'd, 'f, 'g. ('g | 'd
//│   where
//│     'e <: 'a -> 'b -> 'f
//│     'a <: 'f -> 'g))
//│   where
//│     'e <: 'a -> 'b -> 'c
//│     'a <: 'c -> anything)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r, ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1, ?i1, ?j1, ?k1, ?l1, ?m1, ?n1, ?o1, ?p1, ?q1, ?r1, ?s1, ?t1, ?u1, ?v1, ?w1, ?x1, ?y1, ?z1, ?a2, ?b2, ?c2, ?d2, ?e2, ?f2, ?g2, ?h2, ?i2, ?j2, ?k2, ?l2, ?m2, ?n2, ?o2, ?p2, ?q2, ?r2, ?s2, ?t2, ?u2, ?v2, ?w2, ?x2, ?y2, ?z2, ?a3, ?b3, ?c3, ?d3, ?e3, ?f3, ?g3, ?h3, ?i3, ?j3, ?k3, ?l3, ?m3, ?n3, ?to_church_2, ?o3, ?p3, ?q3, ?r3, ?s3, ?t3, ?u3, ?v3, ?w3, ?x3, ?y3, ?z3, ?a4, ?b4, ?c4, ?d4, ?e4, ?f4, ?g4, ?h4, ?i4, ?j4, ?k4, ?l4, ?m4, ?n4, ?o4, ?p4, ?q4, ?r4, ?s4, ?t4, ?u4, ?v4, ?w4, ?x4, ?y4, ?z4, ?a5, ?b5, ?c5, ?d5, ?e5, ?f5, ?g5, ?h5, ?i5, ?j5, ?k5, ?l5, ?m5, ?n5. ?to_church_2 <: int -> ChurchInt` exceeded recursion depth limit (300)
//│ ║  l.359: 	to_church_ty = to_church_2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (‘a'' -> ‘a'')  <!<  α115_2223''
//│ ╟── while constraining:  α115_2209''  <!<  α115_2223''
//│ ╟── while constraining:  (α115_2209'',)  <!<  (α115_2223'',)
//│ ╟── while constraining:  (α115_2223'' -> ‹∀ 4. {‹∀ 5. (α116_2227^6 -> ‹∀ 6. {α119_2232^7 where: α114_1917'' <: ((α115_2223'',) -> α117_2230^7), α115_2223'' <: ((α118_2231^7,) -> α119_2232^7)}›)› where: α114_1917'' <: ((α115_2223'',) -> α117_2226^6), α115_2223'' <: ((α118_2228^6,) -> α119_2229^6)}›)  <!<  ((α115_2209'',) -> α117_2219'')
//│ ╟── while constraining:  ‹∀ 3. (α115_1872'''' -> ‹∀ 4. {‹∀ 5. (α116_1919^6 -> ‹∀ 6. {α119_1924^7 where: α114_1917'' <: ((α115_1872'''',) -> α117_1922^7), α115_1872'''' <: ((α118_1923^7,) -> α119_1924^7)}›)› where: α114_1917'' <: ((α115_1872'''',) -> α117_1918^6), α115_1872'''' <: ((α118_1920^6,) -> α119_1921^6)}›)›  <!<  ((α115_2209'',) -> α117_2219'')
//│ ╟── while constraining:  ‹∀ 2. ‹∀ 3. (α115_1872'''' -> ‹∀ 4. {‹∀ 5. (α116_1919^6 -> ‹∀ 6. {α119_1924^7 where: α114_1917'' <: ((α115_1872'''',) -> α117_1922^7), α115_1872'''' <: ((α118_1923^7,) -> α119_1924^7)}›)› where: α114_1917'' <: ((α115_1872'''',) -> α117_1918^6), α115_1872'''' <: ((α118_1920^6,) -> α119_1921^6)}›)››  <!<  ((α115_2209'',) -> α117_2219'')
//│ ╟── while constraining:  α114_1917''  <!<  ((α115_2209'',) -> α117_2219'')
//│ ╟── while constraining:  {‹∀ 5. (α116_2213^6 -> ‹∀ 6. {α119_2218^7 where: α114_1917'' <: ((α115_2209'',) -> α117_2216^7), α115_2209'' <: ((α118_2217^7,) -> α119_2218^7)}›)› where: α114_1917'' <: ((α115_2209'',) -> α117_2219''), α115_2209'' <: ((α118_2221'',) -> α119_2222'')}  <!<  ((α116_2206'',) -> α118_2207'')
//│ ╟── while constraining:  ‹∀ 4. {‹∀ 5. (α116_2213^6 -> ‹∀ 6. {α119_2218^7 where: α114_1917'' <: ((α115_2209'',) -> α117_2216^7), α115_2209'' <: ((α118_2217^7,) -> α119_2218^7)}›)› where: α114_1917'' <: ((α115_2209'',) -> α117_2212^6), α115_2209'' <: ((α118_2214^6,) -> α119_2215^6)}›  <!<  ((α116_2206'',) -> α118_2207'')
//│ ╟── while constraining:  ‹∀ 4. {‹∀ 5. (α116_2213^6 -> ‹∀ 6. {α119_2218^7 where: α114_1917'' <: ((α115_2209'',) -> α117_2216^7), α115_2209'' <: ((α118_2217^7,) -> α119_2218^7)}›)› where: α114_1917'' <: ((α115_2209'',) -> α117_2212^6), α115_2209'' <: ((α118_2214^6,) -> α119_2215^6)}›  <!<  α117_2205''
//│ ╟── while constraining:  (α115_2209'' -> ‹∀ 4. {‹∀ 5. (α116_2213^6 -> ‹∀ 6. {α119_2218^7 where: α114_1917'' <: ((α115_2209'',) -> α117_2216^7), α115_2209'' <: ((α118_2217^7,) -> α119_2218^7)}›)› where: α114_1917'' <: ((α115_2209'',) -> α117_2212^6), α115_2209'' <: ((α118_2214^6,) -> α119_2215^6)}›)  <!<  ((α115_2195'',) -> α117_2205'')
//│ ╟── while constraining:  ‹∀ 3. (α115_1872'''' -> ‹∀ 4. {‹∀ 5. (α116_1919^6 -> ‹∀ 6. {α119_1924^7 where: α114_1917'' <: ((α115_1872'''',) -> α117_1922^7), α115_1872'''' <: ((α118_1923^7,) -> α119_1924^7)}›)› where: α114_1917'' <: ((α115_1872'''',) -> α117_1918^6), α115_1872'''' <: ((α118_1920^6,) -> α119_1921^6)}›)›  <!<  ((α115_2195'',) -> α117_2205'')
//│ ╟── while constraining:  ‹∀ 2. ‹∀ 3. (α115_1872'''' -> ‹∀ 4. {‹∀ 5. (α116_1919^6 -> ‹∀ 6. {α119_1924^7 where: α114_1917'' <: ((α115_1872'''',) -> α117_1922^7), α115_1872'''' <: ((α118_1923^7,) -> α119_1924^7)}›)› where: α114_1917'' <: ((α115_1872'''',) -> α117_1918^6), α115_1872'''' <: ((α118_1920^6,) -> α119_1921^6)}›)››  <!<  ((α115_2195'',) -> α117_2205'')
//│ ╟── while constraining:  α114_1917''  <!<  ((α115_2195'',) -> α117_2205'')
//│ ╟── while constraining:  {‹∀ 5. (α116_2199^6 -> ‹∀ 6. {α119_2204^7 where: α114_1917'' <: ((α115_2195'',) -> α117_2202^7), α115_2195'' <: ((α118_2203^7,) -> α119_2204^7)}›)› where: α114_1917'' <: ((α115_2195'',) -> α117_2205''), α115_2195'' <: ((α118_2207'',) -> α119_2208'')}  <!<  ((α116_2192'',) -> α118_2193'')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 2. ‹∀ 3. (α115_1872'''' -> ‹∀ 4. {‹∀ 5. (α116_1919^6 -> ‹∀ 6. {α119_1924^7 where: α114_1917'' <: ((α115_1872'''',) -> α117_1922^7), α115_1872'''' <: ((α118_1923^7,) -> α119_1924^7)}›)› where: α114_1917'' <: ((α115_1872'''',) -> α117_1918^6), α115_1872'''' <: ((α118_1920^6,) -> α119_1921^6)}›)››  <!<  ((α115_2069'',) -> α117_2079'')
//│ ╟── while constraining:  α114_1917''  <!<  ((α115_2069'',) -> α117_2079'')
//│ ╟── while constraining:  {‹∀ 5. (α116_2073^6 -> ‹∀ 6. {α119_2078^7 where: α114_1917'' <: ((α115_2069'',) -> α117_2076^7), α115_2069'' <: ((α118_2077^7,) -> α119_2078^7)}›)› where: α114_1917'' <: ((α115_2069'',) -> α117_2079''), α115_2069'' <: ((α118_2081'',) -> α119_2082'')}  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 4. {‹∀ 5. (α116_2073^6 -> ‹∀ 6. {α119_2078^7 where: α114_1917'' <: ((α115_2069'',) -> α117_2076^7), α115_2069'' <: ((α118_2077^7,) -> α119_2078^7)}›)› where: α114_1917'' <: ((α115_2069'',) -> α117_2072^6), α115_2069'' <: ((α118_2074^6,) -> α119_2075^6)}›  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  (α115_2069'' -> ‹∀ 4. {‹∀ 5. (α116_2073^6 -> ‹∀ 6. {α119_2078^7 where: α114_1917'' <: ((α115_2069'',) -> α117_2076^7), α115_2069'' <: ((α118_2077^7,) -> α119_2078^7)}›)› where: α114_1917'' <: ((α115_2069'',) -> α117_2072^6), α115_2069'' <: ((α118_2074^6,) -> α119_2075^6)}›)  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 3. (α115_1872'''' -> ‹∀ 4. {‹∀ 5. (α116_1919^6 -> ‹∀ 6. {α119_1924^7 where: α114_1917'' <: ((α115_1872'''',) -> α117_1922^7), α115_1872'''' <: ((α118_1923^7,) -> α119_1924^7)}›)› where: α114_1917'' <: ((α115_1872'''',) -> α117_1918^6), α115_1872'''' <: ((α118_1920^6,) -> α119_1921^6)}›)›  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 2. ‹∀ 3. (α115_1872'''' -> ‹∀ 4. {‹∀ 5. (α116_1919^6 -> ‹∀ 6. {α119_1924^7 where: α114_1917'' <: ((α115_1872'''',) -> α117_1922^7), α115_1872'''' <: ((α118_1923^7,) -> α119_1924^7)}›)› where: α114_1917'' <: ((α115_1872'''',) -> α117_1918^6), α115_1872'''' <: ((α118_1920^6,) -> α119_1921^6)}›)››  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  α1368_1871''  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  (α1340_1870'' -> α1368_1871'')  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  to_church_21339_1869''  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. to_church_21339'›  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. to_church_21339'›  <!<  ‹∀ 0. (Int -> (('a60' -> 'a60') -> ('a60' -> 'a60')))›
//│ ╟── while constraining:  ‹∀ 0. to_church_21339'›  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_church_21339'››  <!<  (Int -> ChurchInt)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. to_church_21339'››  <!<  ‹∀ 0. (Int -> ChurchInt)›

// (* Marche *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1) : Int) f x)
// ;;

:e // FIXME?
rec def to_church_3 n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_3 (n - 1) : ChurchInt) f x)
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.412: 	rec def to_church_3 n =
//│ ║         	                    ^^^
//│ ║  l.413: 	  if n == 0 then fun f -> fun x -> x
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.414: 	  else fun f -> fun x -> f ((to_church_3 (n - 1) : ChurchInt) f x)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a2345` is not an instance of type `'a2344`
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── from reference:
//│ ║  l.414: 	  else fun f -> fun x -> f ((to_church_3 (n - 1) : ChurchInt) f x)
//│ ╙──       	                                                                ^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.412: 	rec def to_church_3 n =
//│ ║         	                    ^^^
//│ ║  l.413: 	  if n == 0 then fun f -> fun x -> x
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.414: 	  else fun f -> fun x -> f ((to_church_3 (n - 1) : ChurchInt) f x)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a2344` is not an instance of type `'a`
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── but it flows into application with expected type `‘a`
//│ ║  l.414: 	  else fun f -> fun x -> f ((to_church_3 (n - 1) : ChurchInt) f x)
//│ ║         	                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ to_church_3: int -> (('a | ‘a2344 | ‘a2345) -> 'b & ('a | ‘a2344 | ‘a2345) -> (‘a2344 & 'a)) -> (forall 'c. (‘a2344 & 'c & 'a) -> (‘a2344 | 'c | 'b))
//│            = [Function: to_church_3]

// (* Ne Marche Pas *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else (fun f x -> f ((to_church (n-1)) f x) : Int)
// ;;
rec def to_church_4 n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_4 (n - 1)) f x) : ChurchInt
//│ to_church_4: int -> ((ChurchInt | 'a) -> (anything -> nothing) -> nothing -> anything) -> (forall 'b. ('b & 'a) -> (ChurchInt | 'b))
//│            = [Function: to_church_4]


// (* La r�cursion est monomorphe. *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1)) f x)
// ;;

rec def to_church_5 n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_5 (n - 1)) f x)
//│ to_church_5: int -> ('a -> ('a & 'b)) -> (forall 'c. ('c & 'a) -> ('c | 'b))
//│            = [Function: to_church_5]


:e // FIXME?
to_church_ty = to_church_1
//│ int -> (forall 'b, 'c. (('a | 'a0 | ‘a559 | ‘a689 | ‘a691) -> anything & ('a | ‘a689) -> 'a & ('a0 | ‘a559 | ‘a691) -> 'a0 & 'b) -> (forall 'b, 'd, 'e, 'f. (('f & 'd) -> (forall 'b, 'c, 'd, 'f, 'g, 'h. ('f | 'h
//│   where
//│     'c <: 'b -> 'd -> 'g
//│     'b <: 'g -> 'h))
//│   where
//│     'c <: 'b -> 'd -> 'e
//│     'b <: 'e -> anything)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.476: 	to_church_ty = to_church_1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a689` is not an instance of type `'a`
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.476: 	to_church_ty = to_church_1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a` is not an instance of type `'a`
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.476: 	to_church_ty = to_church_1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a691` is not an instance of type `'a`
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.476: 	to_church_ty = to_church_1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a559` is not an instance of type `'a`
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│             = [Function: to_church_1]

to_church_ty = to_church_1_t
//│ int -> (anything -> (forall 'a. 'a -> 'a) | ChurchInt)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_1_t]

to_church_ty = to_church_1_tt
//│ int -> ChurchInt
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = <no result>
//│               to_church_1_tt and zero_ty are not implemented

to_church_ty = to_church_1_st
//│ int -> (anything -> (forall 'a. 'a -> 'a) | ChurchInt)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_1_st]

:e // FIXME should be caught by cycle checker!
:ng
to_church_ty = to_church_2
//│ int -> (forall 'a. (nothing -> anything & 'a) -> (forall 'a, 'b, 'c, 'd. (('d & 'b) -> (forall 'a, 'e, 'b, 'd, 'f, 'g. ('g | 'd
//│   where
//│     'e <: 'a -> 'b -> 'f
//│     'a <: 'f -> 'g))
//│   where
//│     'e <: 'a -> 'b -> 'c
//│     'a <: 'c -> anything)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r, ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1, ?i1, ?j1, ?k1, ?l1, ?m1, ?n1, ?o1, ?p1, ?q1, ?r1, ?s1, ?t1, ?u1, ?v1, ?w1, ?x1, ?y1, ?z1, ?a2, ?b2, ?c2, ?d2, ?e2, ?f2, ?g2, ?h2, ?i2, ?j2, ?k2, ?l2, ?m2, ?n2, ?o2, ?p2, ?q2, ?r2, ?s2, ?t2, ?u2, ?v2, ?w2, ?x2, ?y2, ?z2, ?a3, ?b3, ?c3, ?d3, ?e3, ?f3, ?g3, ?h3, ?i3, ?j3, ?k3, ?l3, ?m3, ?n3, ?to_church_2, ?o3, ?p3, ?q3, ?r3, ?s3, ?t3, ?u3, ?v3, ?w3, ?x3, ?y3, ?z3, ?a4, ?b4, ?c4, ?d4, ?e4, ?f4, ?g4, ?h4, ?i4, ?j4, ?k4, ?l4, ?m4, ?n4, ?o4, ?p4, ?q4, ?r4, ?s4, ?t4, ?u4, ?v4, ?w4, ?x4, ?y4, ?z4, ?a5, ?b5, ?c5, ?d5, ?e5, ?f5, ?g5, ?h5, ?i5, ?j5, ?k5, ?l5, ?m5, ?n5. ?to_church_2 <: int -> ChurchInt` exceeded recursion depth limit (300)
//│ ║  l.545: 	to_church_ty = to_church_2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (‘a'' -> ‘a'')  <!<  α115_3045''
//│ ╟── while constraining:  α115_3031''  <!<  α115_3045''
//│ ╟── while constraining:  (α115_3031'',)  <!<  (α115_3045'',)
//│ ╟── while constraining:  (α115_3045'' -> ‹∀ 4. {‹∀ 5. (α116_3049^6 -> ‹∀ 6. {α119_3054^7 where: α114_2739'' <: ((α115_3045'',) -> α117_3052^7), α115_3045'' <: ((α118_3053^7,) -> α119_3054^7)}›)› where: α114_2739'' <: ((α115_3045'',) -> α117_3048^6), α115_3045'' <: ((α118_3050^6,) -> α119_3051^6)}›)  <!<  ((α115_3031'',) -> α117_3041'')
//│ ╟── while constraining:  ‹∀ 3. (α115_2694'''' -> ‹∀ 4. {‹∀ 5. (α116_2741^6 -> ‹∀ 6. {α119_2746^7 where: α114_2739'' <: ((α115_2694'''',) -> α117_2744^7), α115_2694'''' <: ((α118_2745^7,) -> α119_2746^7)}›)› where: α114_2739'' <: ((α115_2694'''',) -> α117_2740^6), α115_2694'''' <: ((α118_2742^6,) -> α119_2743^6)}›)›  <!<  ((α115_3031'',) -> α117_3041'')
//│ ╟── while constraining:  ‹∀ 2. ‹∀ 3. (α115_2694'''' -> ‹∀ 4. {‹∀ 5. (α116_2741^6 -> ‹∀ 6. {α119_2746^7 where: α114_2739'' <: ((α115_2694'''',) -> α117_2744^7), α115_2694'''' <: ((α118_2745^7,) -> α119_2746^7)}›)› where: α114_2739'' <: ((α115_2694'''',) -> α117_2740^6), α115_2694'''' <: ((α118_2742^6,) -> α119_2743^6)}›)››  <!<  ((α115_3031'',) -> α117_3041'')
//│ ╟── while constraining:  α114_2739''  <!<  ((α115_3031'',) -> α117_3041'')
//│ ╟── while constraining:  {‹∀ 5. (α116_3035^6 -> ‹∀ 6. {α119_3040^7 where: α114_2739'' <: ((α115_3031'',) -> α117_3038^7), α115_3031'' <: ((α118_3039^7,) -> α119_3040^7)}›)› where: α114_2739'' <: ((α115_3031'',) -> α117_3041''), α115_3031'' <: ((α118_3043'',) -> α119_3044'')}  <!<  ((α116_3028'',) -> α118_3029'')
//│ ╟── while constraining:  ‹∀ 4. {‹∀ 5. (α116_3035^6 -> ‹∀ 6. {α119_3040^7 where: α114_2739'' <: ((α115_3031'',) -> α117_3038^7), α115_3031'' <: ((α118_3039^7,) -> α119_3040^7)}›)› where: α114_2739'' <: ((α115_3031'',) -> α117_3034^6), α115_3031'' <: ((α118_3036^6,) -> α119_3037^6)}›  <!<  ((α116_3028'',) -> α118_3029'')
//│ ╟── while constraining:  ‹∀ 4. {‹∀ 5. (α116_3035^6 -> ‹∀ 6. {α119_3040^7 where: α114_2739'' <: ((α115_3031'',) -> α117_3038^7), α115_3031'' <: ((α118_3039^7,) -> α119_3040^7)}›)› where: α114_2739'' <: ((α115_3031'',) -> α117_3034^6), α115_3031'' <: ((α118_3036^6,) -> α119_3037^6)}›  <!<  α117_3027''
//│ ╟── while constraining:  (α115_3031'' -> ‹∀ 4. {‹∀ 5. (α116_3035^6 -> ‹∀ 6. {α119_3040^7 where: α114_2739'' <: ((α115_3031'',) -> α117_3038^7), α115_3031'' <: ((α118_3039^7,) -> α119_3040^7)}›)› where: α114_2739'' <: ((α115_3031'',) -> α117_3034^6), α115_3031'' <: ((α118_3036^6,) -> α119_3037^6)}›)  <!<  ((α115_3017'',) -> α117_3027'')
//│ ╟── while constraining:  ‹∀ 3. (α115_2694'''' -> ‹∀ 4. {‹∀ 5. (α116_2741^6 -> ‹∀ 6. {α119_2746^7 where: α114_2739'' <: ((α115_2694'''',) -> α117_2744^7), α115_2694'''' <: ((α118_2745^7,) -> α119_2746^7)}›)› where: α114_2739'' <: ((α115_2694'''',) -> α117_2740^6), α115_2694'''' <: ((α118_2742^6,) -> α119_2743^6)}›)›  <!<  ((α115_3017'',) -> α117_3027'')
//│ ╟── while constraining:  ‹∀ 2. ‹∀ 3. (α115_2694'''' -> ‹∀ 4. {‹∀ 5. (α116_2741^6 -> ‹∀ 6. {α119_2746^7 where: α114_2739'' <: ((α115_2694'''',) -> α117_2744^7), α115_2694'''' <: ((α118_2745^7,) -> α119_2746^7)}›)› where: α114_2739'' <: ((α115_2694'''',) -> α117_2740^6), α115_2694'''' <: ((α118_2742^6,) -> α119_2743^6)}›)››  <!<  ((α115_3017'',) -> α117_3027'')
//│ ╟── while constraining:  α114_2739''  <!<  ((α115_3017'',) -> α117_3027'')
//│ ╟── while constraining:  {‹∀ 5. (α116_3021^6 -> ‹∀ 6. {α119_3026^7 where: α114_2739'' <: ((α115_3017'',) -> α117_3024^7), α115_3017'' <: ((α118_3025^7,) -> α119_3026^7)}›)› where: α114_2739'' <: ((α115_3017'',) -> α117_3027''), α115_3017'' <: ((α118_3029'',) -> α119_3030'')}  <!<  ((α116_3014'',) -> α118_3015'')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 2. ‹∀ 3. (α115_2694'''' -> ‹∀ 4. {‹∀ 5. (α116_2741^6 -> ‹∀ 6. {α119_2746^7 where: α114_2739'' <: ((α115_2694'''',) -> α117_2744^7), α115_2694'''' <: ((α118_2745^7,) -> α119_2746^7)}›)› where: α114_2739'' <: ((α115_2694'''',) -> α117_2740^6), α115_2694'''' <: ((α118_2742^6,) -> α119_2743^6)}›)››  <!<  ((α115_2891'',) -> α117_2901'')
//│ ╟── while constraining:  α114_2739''  <!<  ((α115_2891'',) -> α117_2901'')
//│ ╟── while constraining:  {‹∀ 5. (α116_2895^6 -> ‹∀ 6. {α119_2900^7 where: α114_2739'' <: ((α115_2891'',) -> α117_2898^7), α115_2891'' <: ((α118_2899^7,) -> α119_2900^7)}›)› where: α114_2739'' <: ((α115_2891'',) -> α117_2901''), α115_2891'' <: ((α118_2903'',) -> α119_2904'')}  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 4. {‹∀ 5. (α116_2895^6 -> ‹∀ 6. {α119_2900^7 where: α114_2739'' <: ((α115_2891'',) -> α117_2898^7), α115_2891'' <: ((α118_2899^7,) -> α119_2900^7)}›)› where: α114_2739'' <: ((α115_2891'',) -> α117_2894^6), α115_2891'' <: ((α118_2896^6,) -> α119_2897^6)}›  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  (α115_2891'' -> ‹∀ 4. {‹∀ 5. (α116_2895^6 -> ‹∀ 6. {α119_2900^7 where: α114_2739'' <: ((α115_2891'',) -> α117_2898^7), α115_2891'' <: ((α118_2899^7,) -> α119_2900^7)}›)› where: α114_2739'' <: ((α115_2891'',) -> α117_2894^6), α115_2891'' <: ((α118_2896^6,) -> α119_2897^6)}›)  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 3. (α115_2694'''' -> ‹∀ 4. {‹∀ 5. (α116_2741^6 -> ‹∀ 6. {α119_2746^7 where: α114_2739'' <: ((α115_2694'''',) -> α117_2744^7), α115_2694'''' <: ((α118_2745^7,) -> α119_2746^7)}›)› where: α114_2739'' <: ((α115_2694'''',) -> α117_2740^6), α115_2694'''' <: ((α118_2742^6,) -> α119_2743^6)}›)›  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 2. ‹∀ 3. (α115_2694'''' -> ‹∀ 4. {‹∀ 5. (α116_2741^6 -> ‹∀ 6. {α119_2746^7 where: α114_2739'' <: ((α115_2694'''',) -> α117_2744^7), α115_2694'''' <: ((α118_2745^7,) -> α119_2746^7)}›)› where: α114_2739'' <: ((α115_2694'''',) -> α117_2740^6), α115_2694'''' <: ((α118_2742^6,) -> α119_2743^6)}›)››  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  α1368_2693''  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  (α1340_2692'' -> α1368_2693'')  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  to_church_21339_2691''  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. to_church_21339'›  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. to_church_21339'›  <!<  ‹∀ 0. (Int -> (('a60' -> 'a60') -> ('a60' -> 'a60')))›
//│ ╟── while constraining:  ‹∀ 0. to_church_21339'›  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_church_21339'››  <!<  (Int -> ChurchInt)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. to_church_21339'››  <!<  ‹∀ 0. (Int -> ChurchInt)›

:e // FIXME?
to_church_ty = to_church_3
//│ int -> (('a | ‘a2344 | ‘a2345) -> 'b & ('a | ‘a2344 | ‘a2345) -> (‘a2344 & 'a)) -> (forall 'c. (‘a2344 & 'c & 'a) -> (‘a2344 | 'c | 'b))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.592: 	to_church_ty = to_church_3
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a2345` is not an instance of type `'a`
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.592: 	to_church_ty = to_church_3
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a2344` is not an instance of type `'a`
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.592: 	to_church_ty = to_church_3
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a` is not an instance of type `'a`
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── from application:
//│ ║  l.414: 	  else fun f -> fun x -> f ((to_church_3 (n - 1) : ChurchInt) f x)
//│ ╙──       	                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.592: 	to_church_ty = to_church_3
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a` is not an instance of type `'a2344`
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│             = [Function: to_church_3]

:e
to_church_ty = to_church_4
//│ int -> ((ChurchInt | 'a) -> (anything -> nothing) -> nothing -> anything) -> (forall 'b. ('b & 'a) -> (ChurchInt | 'b))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.638: 	to_church_ty = to_church_4
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `(?a -> ?a) -> ?a -> ?a` is not an instance of type `'a`
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                            ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.638: 	to_church_ty = to_church_4
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a` is not a function
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                            ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from application:
//│ ║  l.457: 	  else fun f -> fun x -> f ((to_church_4 (n - 1)) f x) : ChurchInt
//│ ╙──       	                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│             = [Function: to_church_4]

// :e
to_church_ty = to_church_5
//│ int -> ('a -> ('a & 'b)) -> (forall 'c. ('c & 'a) -> ('c | 'b))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_5]




// (* Echoue avec la value restriction. *)
// let rec (to_church:int -> Int) n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1)) f x)
// ;;


// // * It seems this one may need polymorphic recursion...?
// // *  ...but it's just a version with succ inlined!?
// :e
rec def to_church_ty n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_ty (n - 1)) f x)
//│ int -> ('a -> ('a & 'b)) -> (forall 'c. ('c & 'a) -> ('c | 'b))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_ty6]

// * ... since we can fix it by using the annotation for rec calls:
def to_church_ty n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_ty (n - 1)) f x)
//│ int -> (forall 'a, 'b. ('a -> 'b & 'a -> 'a & 'b) -> (forall 'a0, 'c. ('c -> (forall 'b, 'c, 'a1, 'd. ('c | 'd
//│   where
//│     'b <: ('a1 | 'c) -> 'a1 & ('a1 | 'c) -> 'd))
//│   where
//│     'b <: ('a0 | 'c) -> 'a0 & ('a0 | 'c) -> 'b)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_ty7]


// (* �a coince. *)
// let tc n = (to_church n : Int);;

:e // FIXME?
def tc n = to_church_1 n : ChurchInt
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.711: 	def tc n = to_church_1 n : ChurchInt
//│ ║         	           ^^^^^^^^^^^^^
//│ ╟── type `‘a689` is not an instance of type `'a`
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ tc: int -> ChurchInt
//│   = [Function: tc]

def tc n = to_church_ty n : ChurchInt
//│ tc: int -> ChurchInt
//│   = [Function: tc1]

:e // FIXME should be caught by cycle checker!
def tc n = to_church_2 n : ChurchInt // Requires :RecursiveTypes
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r, ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1, ?i1, ?j1, ?k1, ?l1. ?l1 <: ChurchInt` exceeded recursion depth limit (300)
//│ ║  l.729: 	def tc n = to_church_2 n : ChurchInt // Requires :RecursiveTypes
//│ ║         	           ^^^^^^^^^^^^^
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α115_5422''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α115_5421''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α115_5420''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α115_5419''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α115_5418''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α115_5417''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α115_5416''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α115_5415''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α115_5414''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α115_5413''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α115_5412''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α115_5411''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α115_5410''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α1369_5409''''
//│ ╟── while constraining:  (‘a'''' -> ‘a'''')  <!<  α115_5408''''
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 4. {‹∀ 5. (α116_4019^6 -> ‹∀ 6. {α119_4024^7 where: α114_3877'''' <: ((α115_3832'''',) -> α117_4022^7), α115_3832'''' <: ((α118_4023^7,) -> α119_4024^7)}›)› where: α114_3877'''' <: ((α115_3832'''',) -> α117_4018^6), α115_3832'''' <: ((α118_4020^6,) -> α119_4021^6)}›  <!<  ((α116_3829'''',) -> α118_3830'''')
//│ ╟── while constraining:  ‹∀ 4. {‹∀ 5. (α116_4019^6 -> ‹∀ 6. {α119_4024^7 where: α114_3877'''' <: ((α115_3832'''',) -> α117_4022^7), α115_3832'''' <: ((α118_4023^7,) -> α119_4024^7)}›)› where: α114_3877'''' <: ((α115_3832'''',) -> α117_4018^6), α115_3832'''' <: ((α118_4020^6,) -> α119_4021^6)}›  <!<  α117_3828''''
//│ ╟── while constraining:  (α115_3832'''' -> ‹∀ 4. {‹∀ 5. (α116_4019^6 -> ‹∀ 6. {α119_4024^7 where: α114_3877'''' <: ((α115_3832'''',) -> α117_4022^7), α115_3832'''' <: ((α118_4023^7,) -> α119_4024^7)}›)› where: α114_3877'''' <: ((α115_3832'''',) -> α117_4018^6), α115_3832'''' <: ((α118_4020^6,) -> α119_4021^6)}›)  <!<  ((α115_3635'''',) -> α117_3828'''')
//│ ╟── while constraining:  ‹∀ 3. (α115_3439'''' -> ‹∀ 4. {‹∀ 5. (α116_3486^6 -> ‹∀ 6. {α119_3491^7 where: α114_3484'''' <: ((α115_3439'''',) -> α117_3489^7), α115_3439'''' <: ((α118_3490^7,) -> α119_3491^7)}›)› where: α114_3484'''' <: ((α115_3439'''',) -> α117_3485^6), α115_3439'''' <: ((α118_3487^6,) -> α119_3488^6)}›)›  <!<  ((α115_3635'''',) -> α117_3828'''')
//│ ╟── while constraining:  ‹∀ 2. ‹∀ 3. (α115_3439'''' -> ‹∀ 4. {‹∀ 5. (α116_3486^6 -> ‹∀ 6. {α119_3491^7 where: α114_3484'''' <: ((α115_3439'''',) -> α117_3489^7), α115_3439'''' <: ((α118_3490^7,) -> α119_3491^7)}›)› where: α114_3484'''' <: ((α115_3439'''',) -> α117_3485^6), α115_3439'''' <: ((α118_3487^6,) -> α119_3488^6)}›)››  <!<  ((α115_3635'''',) -> α117_3828'''')
//│ ╟── while constraining:  α114_3680''''  <!<  ((α115_3635'''',) -> α117_3828'''')
//│ ╟── while constraining:  {‹∀ 5. (α116_3822^6 -> ‹∀ 6. {α119_3827^7 where: α114_3680'''' <: ((α115_3635'''',) -> α117_3825^7), α115_3635'''' <: ((α118_3826^7,) -> α119_3827^7)}›)› where: α114_3680'''' <: ((α115_3635'''',) -> α117_3828''''), α115_3635'''' <: ((α118_3830'''',) -> α119_3831'''')}  <!<  (‘a'''' -> ‘a'''')
//│ ╟── while constraining:  ‹∀ 4. {‹∀ 5. (α116_3822^6 -> ‹∀ 6. {α119_3827^7 where: α114_3680'''' <: ((α115_3635'''',) -> α117_3825^7), α115_3635'''' <: ((α118_3826^7,) -> α119_3827^7)}›)› where: α114_3680'''' <: ((α115_3635'''',) -> α117_3821^6), α115_3635'''' <: ((α118_3823^6,) -> α119_3824^6)}›  <!<  (‘a'''' -> ‘a'''')
//│ ╟── while constraining:  (α115_3635'''' -> ‹∀ 4. {‹∀ 5. (α116_3822^6 -> ‹∀ 6. {α119_3827^7 where: α114_3680'''' <: ((α115_3635'''',) -> α117_3825^7), α115_3635'''' <: ((α118_3826^7,) -> α119_3827^7)}›)› where: α114_3680'''' <: ((α115_3635'''',) -> α117_3821^6), α115_3635'''' <: ((α118_3823^6,) -> α119_3824^6)}›)  <!<  ((‘a'''' -> ‘a'''') -> (‘a'''' -> ‘a''''))
//│ ╟── while constraining:  ‹∀ 3. (α115_3439'''' -> ‹∀ 4. {‹∀ 5. (α116_3486^6 -> ‹∀ 6. {α119_3491^7 where: α114_3484'''' <: ((α115_3439'''',) -> α117_3489^7), α115_3439'''' <: ((α118_3490^7,) -> α119_3491^7)}›)› where: α114_3484'''' <: ((α115_3439'''',) -> α117_3485^6), α115_3439'''' <: ((α118_3487^6,) -> α119_3488^6)}›)›  <!<  ((‘a'''' -> ‘a'''') -> (‘a'''' -> ‘a''''))
//│ ╟── while constraining:  ‹∀ 2. ‹∀ 3. (α115_3439'''' -> ‹∀ 4. {‹∀ 5. (α116_3486^6 -> ‹∀ 6. {α119_3491^7 where: α114_3484'''' <: ((α115_3439'''',) -> α117_3489^7), α115_3439'''' <: ((α118_3490^7,) -> α119_3491^7)}›)› where: α114_3484'''' <: ((α115_3439'''',) -> α117_3485^6), α115_3439'''' <: ((α118_3487^6,) -> α119_3488^6)}›)››  <!<  ((‘a'''' -> ‘a'''') -> (‘a'''' -> ‘a''''))
//│ ╟── while constraining:  α3435_3634''''  <!<  ((‘a'''' -> ‘a'''') -> (‘a'''' -> ‘a''''))
//│ ╟── while constraining:  ‹∀ 3. α3435''''›  <!<  ((‘a'''' -> ‘a'''') -> (‘a'''' -> ‘a''''))
//│ ╟── while constraining:  ‹∀ 3. α3435''''›  <!<  ‹∀ 0. (('a60' -> 'a60') -> ('a60' -> 'a60'))›
//│ ╙── while constraining:  ‹∀ 3. α3435''''›  <!<  ChurchInt
//│ tc: int -> ChurchInt
//│   = [Function: tc2]

// FIXME stupid type
def tc n = to_church_3 n
//│ tc: int -> (forall 'a, 'b. (('a | ‘a2344 | ‘a2345) -> 'b & ('a | ‘a2344 | ‘a2345) -> (‘a2344 & 'a)) -> (forall 'c. (‘a2344 & 'a & 'c) -> (‘a2344 | 'c | 'b)))
//│   = [Function: tc3]
// FIXME
tc 1 id
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.773: 	tc 1 id
//│ ║         	^^^^^^^
//│ ╟── type `‘a23445673` is not an instance of type `'a`
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── from application:
//│ ║  l.414: 	  else fun f -> fun x -> f ((to_church_3 (n - 1) : ChurchInt) f x)
//│ ╙──       	                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: (‘a23445673 & 'a) -> (‘a23445673 | ‘a23455675 | 'a) | error
//│    = [Function (anonymous)]
// FIXME
tc: int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.789: 	tc: int -> ChurchInt
//│ ║         	^^
//│ ╟── type `‘a2345` is not an instance of type `'a`
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ res: int -> ChurchInt
//│    = [Function: tc3]

// FIXME
def tc n = to_church_3 n : ChurchInt
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.803: 	def tc n = to_church_3 n : ChurchInt
//│ ║         	           ^^^^^^^^^^^^^
//│ ╟── type `‘a2345` is not an instance of type `'a`
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ tc: int -> ChurchInt
//│   = [Function: tc4]

// (* Duplicate with to_church1 ("Marche") above *)
// (* Avec la value restriction : �a passe. *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1) : Int) f x)


// (*** Les annotations de type ne commutent pas. ***)
// type sid = ['a] 'a -> 'a
// type z = ['a,'b] ('a -> 'b) -> ('a -> 'b)
type Z = forall 'a 'b. ('a -> 'b) -> ('a -> 'b)
//│ Defined type alias Z

// let f x = (x:sid), ((x:sid):z)
def f x = ((x : Sid), ((x : Sid) : Z))
//│ f: Sid -> (Sid, Z,)
//│  = [Function: f]

// (* Ne type pas ... c'est une instance polymorphe. Interdit. *)
// untype fun x -> (x:sid), (x:z)
fun x -> ((x : Sid), (x : Z))
//│ res: (Sid & Z) -> (Sid, Z,)
//│    = [Function: res]

