:GeneralizeCurriedFunctions
:DistributeForalls

// (*** L'annotation est n�cessaire sur z, mais z n'est utilis� qu'une seule fois. ***)
// type sid = ['a] 'a -> 'a
type Sid = forall 'a. 'a -> 'a
//│ Defined type alias Sid

// let t (z:sid) = ( (fun a -> z) : ['a,'b] 'b -> 'a -> 'a )
def t (z: Sid) = (fun a -> z) : forall 'a 'b. 'b -> 'a -> 'a
//│ t: Sid -> (forall 'a. anything -> 'a -> 'a)
//│  = [Function: t]

// (* Une seule instance, mais polymorphe. *)
// let t z = ( (fun a -> z) : ['a,'b] 'b -> 'a -> 'a );;
def t z = (fun a -> z) : forall 'a 'b. 'b -> 'a -> 'a
//│ t: (‘a -> ‘a) -> (forall 'a. anything -> 'a -> 'a)
//│  = [Function: t1]

def t z = fun a -> z
//│ t: 'a -> anything -> 'a
//│  = [Function: t2]


// (*** Ne type pas avec les value-restriction. Emb�tant. ***)

// type Int = ['a] ('a -> 'a) -> ('a -> 'a)
// ;;
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt

// let zero f x = x
// ;;
def zero f x = x
//│ zero: anything -> (forall 'a. 'a -> 'a)
//│     = [Function: zero]

// let succ (n:Int) = fun f x -> f (n f x)
// ;;
def succ_ty: ChurchInt -> ChurchInt
def succ (n: ChurchInt) = fun f -> fun x -> f (n f x)
def succ' n = fun f -> fun x -> f (n f x)
//│ succ_ty: ChurchInt -> ChurchInt
//│        = <missing implementation>
//│ succ: ChurchInt -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e)))
//│     = [Function: succ]
//│ succ': 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e. ('e -> 'd
//│   where
//│     'b <: 'c -> 'd
//│     'a <: 'b -> 'e -> 'c)))
//│      = [Function: succ]

// * Note: without constrained types we wouldn't get the principal type of succ'

// * Require distrib – see Scratch3
// :e
// succ_ty = succ
// succ_ty = succ'

// let rec to_church n =
//   if n = 0 then zero
//   else succ (to_church (n-1))
// ;;

def to_church_ty: int -> ChurchInt
//│ to_church_ty: int -> ChurchInt
//│             = <missing implementation>

// * NOTE:
// *  The type inferred for the succ version with *annotated* param seems less powerful
// *  as the following only successfully type checks with `:DistributeForalls`:
rec def to_church_1 n =
  if n == 0 then zero
  else succ (to_church_1 (n - 1))
//│ to_church_1: int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. (('f & 'c) -> ('f | 'e)
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e)))
//│            = [Function: to_church_1]

rec def to_church_1_st n =
  if n == 0 then zero
  else succ_ty (to_church_1 (n - 1))
//│ to_church_1_st: int -> (anything -> (forall 'a. 'a -> 'a) | ChurchInt)
//│               = <no result>
//│                 succ_ty is not implemented

to_church_ty = to_church_1
//│ int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. (('f & 'c) -> ('f | 'e)
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_1]

rec def to_church_2 n =
  if n == 0 then zero
  else succ' (to_church_2 (n - 1))
//│ to_church_2: int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. (('f & 'e) -> ('f | 'c)
//│   where
//│     'a <: 'b -> 'c
//│     'd <: 'a -> 'e -> 'b)))
//│            = [Function: to_church_1]

// FIXME see Scracth2_repro
// to_church_ty = to_church_2

// (* Marche *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1) : Int) f x)
// ;;
rec def to_church_3 n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_3 (n - 1) : ChurchInt) f x)
//│ to_church_3: int -> (forall 'b. 'b -> (forall 'b, 'a, 'c. (('c & 'a) -> 'c
//│   where
//│     'b <: 'a -> 'a & 'a -> 'c)))
//│            = [Function: to_church_3]

// (* Ne Marche Pas *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else (fun f x -> f ((to_church (n-1)) f x) : Int)
// ;;
rec def to_church_4 n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_4 (n - 1)) f x) : ChurchInt
//│ to_church_4: int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd. ('d -> (ChurchInt | 'd)
//│   where
//│     'a <: 'b -> ChurchInt
//│     'c <: 'a -> 'd -> 'b)))
//│            = [Function: to_church_4]


// (* La r�cursion est monomorphe. *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1)) f x)
// ;;
rec def to_church_5 n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_5 (n - 1)) f x)
//│ to_church_5: int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e. (('c & 'e) -> 'c
//│   where
//│     'a <: 'b -> 'c
//│     'd <: 'a -> 'e -> 'b)))
//│            = [Function: to_church_5]


to_church_ty = to_church_1
//│ int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. (('f & 'c) -> ('f | 'e)
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_1]

to_church_ty = to_church_1_st
//│ int -> (anything -> (forall 'a. 'a -> 'a) | ChurchInt)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = <no result>
//│               to_church_1_st and succ_ty are not implemented

:e
to_church_ty = to_church_2
//│ int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. (('f & 'e) -> ('f | 'c)
//│   where
//│     'a <: 'b -> 'c
//│     'd <: 'a -> 'e -> 'b)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?to_church_2, ?d, ?e, ?f. ?to_church_2 <: int -> ChurchInt` exceeded recursion depth limit (400)
//│ ║  l.172: 	to_church_ty = to_church_2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (‘a'' -> ‘a'')  <!<  ((α686'',) -> α687'')
//│ ╟── while constraining:  α681''  <!<  ((α686'',) -> α687'')
//│ ╟── while constraining:  {(α689'' -> α687'') where: α681'' <: ((α686'',) -> α687''), α544'' <: ((α681'',) -> α688'')}  <!<  ((α680'',) -> α677'')
//│ ╟── while constraining:  ‹∀ 3. {(α685'''' -> α683'''') where: α681'' <: ((α682'''',) -> α683''''), α544'' <: ((α681'',) -> α684'''')}›  <!<  ((α680'',) -> α677'')
//│ ╟── while constraining:  ‹∀ 3. {(α685'''' -> α683'''') where: α681'' <: ((α682'''',) -> α683''''), α544'' <: ((α681'',) -> α684'''')}›  <!<  α679''
//│ ╟── while constraining:  (α681'' -> ‹∀ 3. {(α685'''' -> α683'''') where: α681'' <: ((α682'''',) -> α683''''), α544'' <: ((α681'',) -> α684'''')}›)  <!<  ((α672'',) -> α679'')
//│ ╟── while constraining:  ‹∀ 2. (α543''' -> ‹∀ 3. {(α548'''' -> α546'''') where: α543''' <: ((α545'''',) -> α546''''), α544'' <: ((α543''',) -> α547'''')}›)›  <!<  ((α672'',) -> α679'')
//│ ╟── while constraining:  α542''  <!<  ((α672'',) -> α679'')
//│ ╟── while constraining:  α544''  <!<  ((α672'',) -> α679'')
//│ ╟── while constraining:  {(α680'' -> α678'') where: α672'' <: ((α677'',) -> α678''), α544'' <: ((α672'',) -> α679'')}  <!<  ((α671'',) -> α668'')
//│ ╟── while constraining:  ‹∀ 3. {(α676'''' -> α674'''') where: α672'' <: ((α673'''',) -> α674''''), α544'' <: ((α672'',) -> α675'''')}›  <!<  ((α671'',) -> α668'')
//│ ╟── while constraining:  ‹∀ 3. {(α676'''' -> α674'''') where: α672'' <: ((α673'''',) -> α674''''), α544'' <: ((α672'',) -> α675'''')}›  <!<  α670''
//│ ╟── while constraining:  (α672'' -> ‹∀ 3. {(α676'''' -> α674'''') where: α672'' <: ((α673'''',) -> α674''''), α544'' <: ((α672'',) -> α675'''')}›)  <!<  ((α663'',) -> α670'')
//│ ╟── while constraining:  ‹∀ 2. (α543''' -> ‹∀ 3. {(α548'''' -> α546'''') where: α543''' <: ((α545'''',) -> α546''''), α544'' <: ((α543''',) -> α547'''')}›)›  <!<  ((α663'',) -> α670'')
//│ ╟── while constraining:  α542''  <!<  ((α663'',) -> α670'')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  α542''  <!<  ((α555'',) -> α562'')
//│ ╟── while constraining:  α541''  <!<  ((α555'',) -> α562'')
//│ ╟── while constraining:  {(α563'' -> α561'') where: α555'' <: ((α560'',) -> α561''), α541'' <: ((α555'',) -> α562'')}  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 3. {(α559'''' -> α557'''') where: α555'' <: ((α556'''',) -> α557''''), α541'' <: ((α555'',) -> α558'''')}›  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  (α555'' -> ‹∀ 3. {(α559'''' -> α557'''') where: α555'' <: ((α556'''',) -> α557''''), α541'' <: ((α555'',) -> α558'''')}›)  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 2. (α540''' -> ‹∀ 3. {(α552'''' -> α550'''') where: α540''' <: ((α549'''',) -> α550''''), α541'' <: ((α540''',) -> α551'''')}›)›  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  α539''  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  (α538'' -> α539'')  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 1. (α521'' -> α522'')›  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  to_church_2520''  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. to_church_2249'›  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_church_2249'››  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_church_2249'››  <!<  ‹∀ 0. (Int -> (('a49' -> 'a49') -> ('a49' -> 'a49')))›
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_church_2249'››  <!<  (Int -> ChurchInt)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. to_church_2249'››  <!<  ‹∀ 0. (Int -> ChurchInt)›
//│ Runtime error:
//│   ReferenceError: to_church_2 is not defined

to_church_ty = to_church_3
//│ int -> (forall 'b. 'b -> (forall 'b, 'a, 'c. (('c & 'a) -> 'c
//│   where
//│     'b <: 'a -> 'a & 'a -> 'c)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_3]

:e
to_church_ty = to_church_4
//│ int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd. ('d -> (ChurchInt | 'd)
//│   where
//│     'a <: 'b -> ChurchInt
//│     'c <: 'a -> 'd -> 'b)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.226: 	to_church_ty = to_church_4
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a` is not a function
//│ ║  l.29: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.29: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                            ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from application:
//│ ║  l.132: 	  else fun f -> fun x -> f ((to_church_4 (n - 1)) f x) : ChurchInt
//│ ╙──       	                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?to_church_4, ?b, ?c, ?d. ?to_church_4 <: int -> ChurchInt` exceeded recursion depth limit (400)
//│ ║  l.226: 	to_church_ty = to_church_4
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (‘a'' -> ‘a'')  <!<  ((α949'',) -> α950'')
//│ ╟── while constraining:  α944''  <!<  ((α949'',) -> α950'')
//│ ╟── while constraining:  {(α952'' -> ChurchInt) where: α944'' <: ((α949'',) -> α950''), α766'' <: ((α944'',) -> α951'')}  <!<  ((α943'',) -> α940'')
//│ ╟── while constraining:  ‹∀ 3. {(α948'''' -> ChurchInt) where: α944'' <: ((α945'''',) -> α946''''), α766'' <: ((α944'',) -> α947'''')}›  <!<  ((α943'',) -> α940'')
//│ ╟── while constraining:  ‹∀ 3. {(α948'''' -> ChurchInt) where: α944'' <: ((α945'''',) -> α946''''), α766'' <: ((α944'',) -> α947'''')}›  <!<  α942''
//│ ╟── while constraining:  (α944'' -> ‹∀ 3. {(α948'''' -> ChurchInt) where: α944'' <: ((α945'''',) -> α946''''), α766'' <: ((α944'',) -> α947'''')}›)  <!<  ((α935'',) -> α942'')
//│ ╟── while constraining:  ‹∀ 2. (α765''' -> ‹∀ 3. {(α770'''' -> ChurchInt) where: α765''' <: ((α767'''',) -> α768''''), α766'' <: ((α765''',) -> α769'''')}›)›  <!<  ((α935'',) -> α942'')
//│ ╟── while constraining:  α766''  <!<  ((α935'',) -> α942'')
//│ ╟── while constraining:  {(α943'' -> ChurchInt) where: α935'' <: ((α940'',) -> α941''), α766'' <: ((α935'',) -> α942'')}  <!<  ((α934'',) -> α931'')
//│ ╟── while constraining:  ‹∀ 3. {(α939'''' -> ChurchInt) where: α935'' <: ((α936'''',) -> α937''''), α766'' <: ((α935'',) -> α938'''')}›  <!<  ((α934'',) -> α931'')
//│ ╟── while constraining:  ‹∀ 3. {(α939'''' -> ChurchInt) where: α935'' <: ((α936'''',) -> α937''''), α766'' <: ((α935'',) -> α938'''')}›  <!<  α933''
//│ ╟── while constraining:  (α935'' -> ‹∀ 3. {(α939'''' -> ChurchInt) where: α935'' <: ((α936'''',) -> α937''''), α766'' <: ((α935'',) -> α938'''')}›)  <!<  ((α926'',) -> α933'')
//│ ╟── while constraining:  ‹∀ 2. (α765''' -> ‹∀ 3. {(α770'''' -> ChurchInt) where: α765''' <: ((α767'''',) -> α768''''), α766'' <: ((α765''',) -> α769'''')}›)›  <!<  ((α926'',) -> α933'')
//│ ╟── while constraining:  α766''  <!<  ((α926'',) -> α933'')
//│ ╟── while constraining:  {(α934'' -> ChurchInt) where: α926'' <: ((α931'',) -> α932''), α766'' <: ((α926'',) -> α933'')}  <!<  ((α925'',) -> α922'')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 2. (α765''' -> ‹∀ 3. {(α770'''' -> ChurchInt) where: α765''' <: ((α767'''',) -> α768''''), α766'' <: ((α765''',) -> α769'''')}›)›  <!<  ((α773'',) -> α780'')
//│ ╟── while constraining:  α766''  <!<  ((α773'',) -> α780'')
//│ ╟── while constraining:  {(α781'' -> ChurchInt) where: α773'' <: ((α778'',) -> α779''), α766'' <: ((α773'',) -> α780'')}  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 3. {(α777'''' -> ChurchInt) where: α773'' <: ((α774'''',) -> α775''''), α766'' <: ((α773'',) -> α776'''')}›  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  (α773'' -> ‹∀ 3. {(α777'''' -> ChurchInt) where: α773'' <: ((α774'''',) -> α775''''), α766'' <: ((α773'',) -> α776'''')}›)  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 2. (α765''' -> ‹∀ 3. {(α770'''' -> ChurchInt) where: α765''' <: ((α767'''',) -> α768''''), α766'' <: ((α765''',) -> α769'''')}›)›  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  α764''  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  (α763'' -> α764'')  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 1. (α753'' -> α754'')›  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  to_church_4752''  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. to_church_4351'›  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_church_4351'››  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_church_4351'››  <!<  ‹∀ 0. (Int -> (('a49' -> 'a49') -> ('a49' -> 'a49')))›
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_church_4351'››  <!<  (Int -> ChurchInt)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. to_church_4351'››  <!<  ‹∀ 0. (Int -> ChurchInt)›
//│             = [Function: to_church_4]

:e
to_church_ty = to_church_5
//│ int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e. (('c & 'e) -> 'c
//│   where
//│     'a <: 'b -> 'c
//│     'd <: 'a -> 'e -> 'b)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?to_church_5, ?b, ?c, ?d. ?to_church_5 <: int -> ChurchInt` exceeded recursion depth limit (400)
//│ ║  l.283: 	to_church_ty = to_church_5
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (‘a'' -> ‘a'')  <!<  ((α1180'',) -> α1181'')
//│ ╟── while constraining:  α1175''  <!<  ((α1180'',) -> α1181'')
//│ ╟── while constraining:  {(α1183'' -> α1181'') where: α1175'' <: ((α1180'',) -> α1181''), α997'' <: ((α1175'',) -> α1182'')}  <!<  ((α1174'',) -> α1171'')
//│ ╟── while constraining:  ‹∀ 3. {(α1179'''' -> α1177'''') where: α1175'' <: ((α1176'''',) -> α1177''''), α997'' <: ((α1175'',) -> α1178'''')}›  <!<  ((α1174'',) -> α1171'')
//│ ╟── while constraining:  ‹∀ 3. {(α1179'''' -> α1177'''') where: α1175'' <: ((α1176'''',) -> α1177''''), α997'' <: ((α1175'',) -> α1178'''')}›  <!<  α1173''
//│ ╟── while constraining:  (α1175'' -> ‹∀ 3. {(α1179'''' -> α1177'''') where: α1175'' <: ((α1176'''',) -> α1177''''), α997'' <: ((α1175'',) -> α1178'''')}›)  <!<  ((α1166'',) -> α1173'')
//│ ╟── while constraining:  ‹∀ 2. (α996''' -> ‹∀ 3. {(α1001'''' -> α999'''') where: α996''' <: ((α998'''',) -> α999''''), α997'' <: ((α996''',) -> α1000'''')}›)›  <!<  ((α1166'',) -> α1173'')
//│ ╟── while constraining:  α997''  <!<  ((α1166'',) -> α1173'')
//│ ╟── while constraining:  {(α1174'' -> α1172'') where: α1166'' <: ((α1171'',) -> α1172''), α997'' <: ((α1166'',) -> α1173'')}  <!<  ((α1165'',) -> α1162'')
//│ ╟── while constraining:  ‹∀ 3. {(α1170'''' -> α1168'''') where: α1166'' <: ((α1167'''',) -> α1168''''), α997'' <: ((α1166'',) -> α1169'''')}›  <!<  ((α1165'',) -> α1162'')
//│ ╟── while constraining:  ‹∀ 3. {(α1170'''' -> α1168'''') where: α1166'' <: ((α1167'''',) -> α1168''''), α997'' <: ((α1166'',) -> α1169'''')}›  <!<  α1164''
//│ ╟── while constraining:  (α1166'' -> ‹∀ 3. {(α1170'''' -> α1168'''') where: α1166'' <: ((α1167'''',) -> α1168''''), α997'' <: ((α1166'',) -> α1169'''')}›)  <!<  ((α1157'',) -> α1164'')
//│ ╟── while constraining:  ‹∀ 2. (α996''' -> ‹∀ 3. {(α1001'''' -> α999'''') where: α996''' <: ((α998'''',) -> α999''''), α997'' <: ((α996''',) -> α1000'''')}›)›  <!<  ((α1157'',) -> α1164'')
//│ ╟── while constraining:  α997''  <!<  ((α1157'',) -> α1164'')
//│ ╟── while constraining:  {(α1165'' -> α1163'') where: α1157'' <: ((α1162'',) -> α1163''), α997'' <: ((α1157'',) -> α1164'')}  <!<  ((α1156'',) -> α1153'')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 2. (α996''' -> ‹∀ 3. {(α1001'''' -> α999'''') where: α996''' <: ((α998'''',) -> α999''''), α997'' <: ((α996''',) -> α1000'''')}›)›  <!<  ((α1004'',) -> α1011'')
//│ ╟── while constraining:  α997''  <!<  ((α1004'',) -> α1011'')
//│ ╟── while constraining:  {(α1012'' -> α1010'') where: α1004'' <: ((α1009'',) -> α1010''), α997'' <: ((α1004'',) -> α1011'')}  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 3. {(α1008'''' -> α1006'''') where: α1004'' <: ((α1005'''',) -> α1006''''), α997'' <: ((α1004'',) -> α1007'''')}›  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  (α1004'' -> ‹∀ 3. {(α1008'''' -> α1006'''') where: α1004'' <: ((α1005'''',) -> α1006''''), α997'' <: ((α1004'',) -> α1007'''')}›)  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 2. (α996''' -> ‹∀ 3. {(α1001'''' -> α999'''') where: α996''' <: ((α998'''',) -> α999''''), α997'' <: ((α996''',) -> α1000'''')}›)›  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  α995''  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  (α994'' -> α995'')  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 1. (α984'' -> α985'')›  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  to_church_5983''  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. to_church_5393'›  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_church_5393'››  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_church_5393'››  <!<  ‹∀ 0. (Int -> (('a49' -> 'a49') -> ('a49' -> 'a49')))›
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_church_5393'››  <!<  (Int -> ChurchInt)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. to_church_5393'››  <!<  ‹∀ 0. (Int -> ChurchInt)›
//│             = [Function: to_church_5]




// (* Echoue avec la value restriction. *)
// let rec (to_church:int -> Int) n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1)) f x)
// ;;


// * It seems this one may need polymorphic recursion...?
// *  ...but it's just a version with succ inlined!?
:e
rec def to_church_ty n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_ty (n - 1)) f x)
//│ int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e. (('c & 'e) -> 'c
//│   where
//│     'a <: 'b -> 'c
//│     'd <: 'a -> 'e -> 'b)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?to_church_ty, ?b, ?c, ?d. ?to_church_ty <: int -> ChurchInt` exceeded recursion depth limit (400)
//│ ║  l.340: 	rec def to_church_ty n =
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.341: 	  if n == 0 then fun f -> fun x -> x
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.342: 	  else fun f -> fun x -> f ((to_church_ty (n - 1)) f x)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (‘a'' -> ‘a'')  <!<  ((α1432'',) -> α1433'')
//│ ╟── while constraining:  α1427''  <!<  ((α1432'',) -> α1433'')
//│ ╟── while constraining:  {(α1435'' -> α1433'') where: α1427'' <: ((α1432'',) -> α1433''), α1249'' <: ((α1427'',) -> α1434'')}  <!<  ((α1426'',) -> α1423'')
//│ ╟── while constraining:  ‹∀ 3. {(α1431'''' -> α1429'''') where: α1427'' <: ((α1428'''',) -> α1429''''), α1249'' <: ((α1427'',) -> α1430'''')}›  <!<  ((α1426'',) -> α1423'')
//│ ╟── while constraining:  ‹∀ 3. {(α1431'''' -> α1429'''') where: α1427'' <: ((α1428'''',) -> α1429''''), α1249'' <: ((α1427'',) -> α1430'''')}›  <!<  α1425''
//│ ╟── while constraining:  (α1427'' -> ‹∀ 3. {(α1431'''' -> α1429'''') where: α1427'' <: ((α1428'''',) -> α1429''''), α1249'' <: ((α1427'',) -> α1430'''')}›)  <!<  ((α1418'',) -> α1425'')
//│ ╟── while constraining:  ‹∀ 2. (α1248''' -> ‹∀ 3. {(α1253'''' -> α1251'''') where: α1248''' <: ((α1250'''',) -> α1251''''), α1249'' <: ((α1248''',) -> α1252'''')}›)›  <!<  ((α1418'',) -> α1425'')
//│ ╟── while constraining:  α1249''  <!<  ((α1418'',) -> α1425'')
//│ ╟── while constraining:  {(α1426'' -> α1424'') where: α1418'' <: ((α1423'',) -> α1424''), α1249'' <: ((α1418'',) -> α1425'')}  <!<  ((α1417'',) -> α1414'')
//│ ╟── while constraining:  ‹∀ 3. {(α1422'''' -> α1420'''') where: α1418'' <: ((α1419'''',) -> α1420''''), α1249'' <: ((α1418'',) -> α1421'''')}›  <!<  ((α1417'',) -> α1414'')
//│ ╟── while constraining:  ‹∀ 3. {(α1422'''' -> α1420'''') where: α1418'' <: ((α1419'''',) -> α1420''''), α1249'' <: ((α1418'',) -> α1421'''')}›  <!<  α1416''
//│ ╟── while constraining:  (α1418'' -> ‹∀ 3. {(α1422'''' -> α1420'''') where: α1418'' <: ((α1419'''',) -> α1420''''), α1249'' <: ((α1418'',) -> α1421'''')}›)  <!<  ((α1409'',) -> α1416'')
//│ ╟── while constraining:  ‹∀ 2. (α1248''' -> ‹∀ 3. {(α1253'''' -> α1251'''') where: α1248''' <: ((α1250'''',) -> α1251''''), α1249'' <: ((α1248''',) -> α1252'''')}›)›  <!<  ((α1409'',) -> α1416'')
//│ ╟── while constraining:  α1249''  <!<  ((α1409'',) -> α1416'')
//│ ╟── while constraining:  {(α1417'' -> α1415'') where: α1409'' <: ((α1414'',) -> α1415''), α1249'' <: ((α1409'',) -> α1416'')}  <!<  ((α1408'',) -> α1405'')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  (α1265'' -> ‹∀ 3. {(α1269'''' -> α1267'''') where: α1265'' <: ((α1266'''',) -> α1267''''), α1249'' <: ((α1265'',) -> α1268'''')}›)  <!<  ((α1256'',) -> α1263'')
//│ ╟── while constraining:  ‹∀ 2. (α1248''' -> ‹∀ 3. {(α1253'''' -> α1251'''') where: α1248''' <: ((α1250'''',) -> α1251''''), α1249'' <: ((α1248''',) -> α1252'''')}›)›  <!<  ((α1256'',) -> α1263'')
//│ ╟── while constraining:  α1249''  <!<  ((α1256'',) -> α1263'')
//│ ╟── while constraining:  {(α1264'' -> α1262'') where: α1256'' <: ((α1261'',) -> α1262''), α1249'' <: ((α1256'',) -> α1263'')}  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 3. {(α1260'''' -> α1258'''') where: α1256'' <: ((α1257'''',) -> α1258''''), α1249'' <: ((α1256'',) -> α1259'''')}›  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  (α1256'' -> ‹∀ 3. {(α1260'''' -> α1258'''') where: α1256'' <: ((α1257'''',) -> α1258''''), α1249'' <: ((α1256'',) -> α1259'''')}›)  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 2. (α1248''' -> ‹∀ 3. {(α1253'''' -> α1251'''') where: α1248''' <: ((α1250'''',) -> α1251''''), α1249'' <: ((α1248''',) -> α1252'''')}›)›  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  α1247''  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  (α1246'' -> α1247'')  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 1. (α1236'' -> α1237'')›  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  to_church_ty1235''  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. to_church_ty1191'›  <!<  (Int -> ((‘a'' -> ‘a'') -> (‘a'' -> ‘a'')))
//│ ╟── while constraining:  ‹∀ 0. to_church_ty1191'›  <!<  ‹∀ 0. (Int -> (('a49' -> 'a49') -> ('a49' -> 'a49')))›
//│ ╟── while constraining:  ‹∀ 0. to_church_ty1191'›  <!<  (Int -> ChurchInt)
//│ ╙── while constraining:  ‹∀ 0. to_church_ty1191'›  <!<  ‹∀ 0. (Int -> ChurchInt)›
//│             = [Function: to_church_ty6]

// * ... since we can fix it by using the annotation for rec calls:
def to_church_ty n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_ty (n - 1)) f x)
//│ int -> (forall 'b. 'b -> (forall 'b, 'a, 'c. (('c & 'a) -> 'c
//│   where
//│     'b <: 'a -> 'a & 'a -> 'c)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_ty7]


// (* �a coince. *)
// let tc n = (to_church n : Int);;
def tc n = to_church_ty n : ChurchInt
def tc n = to_church_1 n : ChurchInt
def tc n = to_church_2 n : ChurchInt
def tc n = to_church_3 n : ChurchInt
//│ tc: int -> ChurchInt
//│   = [Function: tc]
//│ tc: int -> ChurchInt
//│   = [Function: tc1]
//│ tc: int -> ChurchInt
//│   where
//│     'a <: (‘a -> ‘a) -> ‘a -> ‘a
//│   = [Function: tc2]
//│ tc: int -> ChurchInt
//│   = [Function: tc3]

// (* Duplicate with to_church1 ("Marche") above *)
// (* Avec la value restriction : �a passe. *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1) : Int) f x)


// (*** Les annotations de type ne commutent pas. ***)
// type sid = ['a] 'a -> 'a
// type z = ['a,'b] ('a -> 'b) -> ('a -> 'b)
type Z = forall 'a 'b. ('a -> 'b) -> ('a -> 'b)
//│ Defined type alias Z

// let f x = (x:sid), ((x:sid):z)
def f x = ((x : Sid), ((x : Sid) : Z))
//│ f: Sid -> (Sid, Z,)
//│  = [Function: f]

// (* Ne type pas ... c'est une instance polymorphe. Interdit. *)
// untype fun x -> (x:sid), (x:z)
fun x -> ((x : Sid), (x : Z))
//│ res: (Sid & Z) -> (Sid, Z,)
//│    = [Function: res]

