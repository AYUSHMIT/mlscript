// :NoRecursiveTypes // Makes several signature checks fail
:GeneralizeCurriedFunctions
:DistributeForalls

// (*** L'annotation est n�cessaire sur z, mais z n'est utilis� qu'une seule fois. ***)
// type sid = ['a] 'a -> 'a
type Sid = forall 'a. 'a -> 'a
//│ Defined type alias Sid

// let t (z:sid) = ( (fun a -> z) : ['a,'b] 'b -> 'a -> 'a )
def t (z: Sid) = (fun a -> z) : forall 'a 'b. 'b -> 'a -> 'a
//│ t: Sid -> (forall 'a. anything -> 'a -> 'a)
//│  = [Function: t]

// (* Une seule instance, mais polymorphe. *)
// let t z = ( (fun a -> z) : ['a,'b] 'b -> 'a -> 'a );;
def t z = (fun a -> z) : forall 'a 'b. 'b -> 'a -> 'a
//│ t: (‘a39 -> ‘a39) -> (forall 'a. anything -> 'a -> 'a)
//│  = [Function: t1]

def t z = fun a -> z
//│ t: 'a -> anything -> 'a
//│  = [Function: t2]


// (*** Ne type pas avec les value-restriction. Emb�tant. ***)

// type Int = ['a] ('a -> 'a) -> ('a -> 'a)
// ;;
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt

// let zero f x = x
// ;;

def zero f x = x
//│ zero: anything -> (forall 'a. 'a -> 'a)
//│     = [Function: zero]

def zero_ty: ChurchInt
//│ zero_ty: ChurchInt
//│        = <missing implementation>

// let succ (n:Int) = fun f x -> f (n f x)
// ;;
def succ_ty: ChurchInt -> ChurchInt
def succ (n: ChurchInt) = fun f -> fun x -> f (n f x)
def succ' n = fun f -> fun x -> f (n f x)
//│ succ_ty: ChurchInt -> ChurchInt
//│        = <missing implementation>
//│ succ: ChurchInt -> (forall 'b, 'c, 'd, 'e, 'a, 'f, 'g. (('a -> 'a & ('a | 'e | 'f) -> 'g & 'c) -> (forall 'b, 'c, 'd, 'e, 'a, 'f, 'g, 'h, 'i, 'j. (('d & 'a & 'h) -> ('j | 'g)
//│   where
//│     'b <: 'c -> 'h -> ('f & 'i)
//│     'c <: ('a | 'i | 'e) -> 'j))
//│   where
//│     'b <: 'c -> 'd -> 'e))
//│     = [Function: succ]
//│ succ': ('a -> 'b -> 'c & 'd) -> (forall 'a, 'c, 'd, 'e, 'f, 'g, 'h, 'i. ((('g | 'h | 'c) -> 'i & 'a & 'e) -> (forall 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l. (('b & 'f & 'j) -> ('l | 'i)
//│   where
//│     'd <: 'e -> 'j -> ('h & 'k)
//│     'e <: ('k | 'g | 'c) -> 'l))
//│   where
//│     'd <: 'e -> 'f -> 'g))
//│      = [Function: succ]

// * Note: without constrained types we wouldn't get the principal type of succ'

// * Used to require distrib – see Scratch3
succ_ty = succ
succ_ty = succ'
//│ ChurchInt -> (forall 'b, 'c, 'd, 'e, 'a, 'f, 'g. (('a -> 'a & ('a | 'e | 'f) -> 'g & 'c) -> (forall 'b, 'c, 'd, 'e, 'a, 'f, 'g, 'h, 'i, 'j. (('d & 'a & 'h) -> ('j | 'g)
//│   where
//│     'b <: 'c -> 'h -> ('f & 'i)
//│     'c <: ('a | 'i | 'e) -> 'j))
//│   where
//│     'b <: 'c -> 'd -> 'e))
//│   <:  succ_ty:
//│ ChurchInt -> ChurchInt
//│        = [Function: succ]
//│ ('a -> 'b -> 'c & 'd) -> (forall 'a, 'c, 'd, 'e, 'f, 'g, 'h, 'i. ((('g | 'h | 'c) -> 'i & 'a & 'e) -> (forall 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l. (('b & 'f & 'j) -> ('l | 'i)
//│   where
//│     'd <: 'e -> 'j -> ('h & 'k)
//│     'e <: ('k | 'g | 'c) -> 'l))
//│   where
//│     'd <: 'e -> 'f -> 'g))
//│   <:  succ_ty:
//│ ChurchInt -> ChurchInt
//│        = [Function: succ]

// :d
succ'
//│ res: ('a -> 'b -> 'c & 'd) -> (forall 'a, 'c, 'd, 'e, 'f, 'g, 'h, 'i. ((('g | 'h | 'c) -> 'i & 'a & 'e) -> (forall 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l. (('b & 'f & 'j) -> ('l | 'i)
//│   where
//│     'd <: 'e -> 'j -> ('h & 'k)
//│     'e <: ('k | 'g | 'c) -> 'l))
//│   where
//│     'd <: 'e -> 'f -> 'g))
//│    = [Function: succ]

// Legit error: (bad bounds)
// :d
:e // due to tapping
succ' {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.103: 	succ' {}
//│ ║         	^^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.103: 	succ' {}
//│ ║         	      ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.48: 	def succ' n = fun f -> fun x -> f (n f x)
//│ ╙──      	                                   ^^^
//│ res: error
//│    = [Function: succ]

:e // due to tapping
succ' {} {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.117: 	succ' {} {}
//│ ║         	^^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.117: 	succ' {} {}
//│ ║         	      ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.48: 	def succ' n = fun f -> fun x -> f (n f x)
//│ ╙──      	                                   ^^^
//│ res: error
//│    = [Function: succ]

:e
succ' {} {} {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.131: 	succ' {} {} {}
//│ ║         	^^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.131: 	succ' {} {} {}
//│ ║         	      ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.48: 	def succ' n = fun f -> fun x -> f (n f x)
//│ ╙──      	                                   ^^^
//│ res: error
//│    = [Function: succ]

fun x -> succ' x x x x x x x x x
//│ res: ('a -> 'b -> 'b -> 'b -> 'b -> 'b -> 'b -> 'c & 'b -> 'b -> 'a & 'b) -> 'c
//│    = [Function: succ]


// let rec to_church n =
//   if n = 0 then zero
//   else succ (to_church (n-1))
// ;;

def to_church_ty: int -> ChurchInt
//│ to_church_ty: int -> ChurchInt
//│             = <missing implementation>

// * NOTE:
// *  The type inferred for the succ version with *annotated* param seems less powerful
// *  as the following only successfully type checks with `:DistributeForalls`:
// :e // FIXME? // due to gen lam bod?
rec def to_church_1 n =
  if n == 0 then zero
  else succ (to_church_1 (n - 1))
//│ to_church_1: int -> (forall 'a, 'b, 'c, 'd. (('a0 | 'a | ‘a517 | 'b) -> 'c & ('a0 | ‘a517) -> (‘a517 & 'a0) & 'a -> 'a & 'd) -> (forall 'a0, 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h. ((‘a517 & 'c & 'a0 & 'a & 'f) -> ('c | 'h)
//│   where
//│     'e <: 'd -> 'f -> ('b & 'g)
//│     'd <: ('a0 | 'a | ‘a517 | 'g) -> 'h)))
//│            = [Function: to_church_1]

rec def to_church_1_t n =
  if n == 0 then zero
  else succ_ty (to_church_1_t (n - 1))
//│ to_church_1_t: int -> (anything -> (forall 'a. 'a -> 'a) | ChurchInt)
//│              = [Function: to_church_1_t]

rec def to_church_1_tt n =
  if n == 0 then zero_ty
  else succ_ty (to_church_1_tt (n - 1))
//│ to_church_1_tt: int -> ChurchInt
//│               = <no result>
//│                 zero_ty is not implemented

// def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))

// * Error happens when destroying constrained types, hinting that this is probably related to polym-recur
// :d
// :e // due to gen lam bod?
:re
// rec def to_church_1 n =
//   succ (to_church_1 n)
:e // FIXME?
rec def wat =
  succ wat
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.194: 	  succ wat
//│ ║         	  ^^^^^^^^
//│ ╟── type `‘a517` is not an instance of type `'a642`
//│ ║  l.30: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.30: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ wat: (('a | 'a0 | 'a1 | ‘a517 | 'b) -> 'c & 'a1 -> 'a1 & 'a -> 'a & ('a0 | ‘a517) -> (‘a517 & ‘a642 & 'a0) & 'd) -> (forall 'a, 'a0, 'a1, 'b, 'c, 'd, 'e, 'f, 'g, 'h. ((‘a517 & ‘a642 & 'a & 'a0 & 'a1 & 'f) -> ('h | 'c)
//│   where
//│     'e <: 'd -> 'f -> ('b & 'g)
//│     'd <: ('a | 'a0 | 'a1 | ‘a517 | 'g) -> 'h))
//│ Runtime error:
//│   ReferenceError: wat is not defined

// works when `succ` is not annotated with the parameter type
:e // FIXME should be caught by cycle checker! // due to tapping
:ng
rec def nani =
  succ' nani
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: ?nani` exceeded recursion depth limit (300)
//│ ║  l.215: 	  succ' nani
//│ ║         	  ^^^^^^^^^^
//│ ╟── while constraining:  (α111_947',)  <!<  (α111_961',)
//│ ╟── while constraining:  (α111_961' -> ‹∀ 3. {(α112_968'''' -> α115_970'''') where: α110_690' <: ((α111_961',) -> α113_965''''), α111_961' <: ((α114_969'''',) -> α115_970'''')}›)  <!<  ((α111_947',) -> α113_957')
//│ ╟── while constraining:  ‹∀ 2. (α111_695''' -> ‹∀ 3. {(α112_702'''' -> α115_704'''') where: α110_690' <: ((α111_695''',) -> α113_701''''), α111_695''' <: ((α114_703'''',) -> α115_704'''')}›)›  <!<  ((α111_947',) -> α113_957')
//│ ╟── while constraining:  α110_690'  <!<  ((α111_947',) -> α113_957')
//│ ╟── while constraining:  {(α112_958' -> α115_960') where: α110_690' <: ((α111_947',) -> α113_957'), α111_947' <: ((α114_959',) -> α115_960')}  <!<  ((α112_944',) -> α114_945')
//│ ╟── while constraining:  ‹∀ 3. {(α112_954'''' -> α115_956'''') where: α110_690' <: ((α111_947',) -> α113_951''''), α111_947' <: ((α114_955'''',) -> α115_956'''')}›  <!<  ((α112_944',) -> α114_945')
//│ ╟── while constraining:  ‹∀ 3. {(α112_954'''' -> α115_956'''') where: α110_690' <: ((α111_947',) -> α113_951''''), α111_947' <: ((α114_955'''',) -> α115_956'''')}›  <!<  α113_943'
//│ ╟── while constraining:  (α111_947' -> ‹∀ 3. {(α112_954'''' -> α115_956'''') where: α110_690' <: ((α111_947',) -> α113_951''''), α111_947' <: ((α114_955'''',) -> α115_956'''')}›)  <!<  ((α111_933',) -> α113_943')
//│ ╟── while constraining:  ‹∀ 2. (α111_695''' -> ‹∀ 3. {(α112_702'''' -> α115_704'''') where: α110_690' <: ((α111_695''',) -> α113_701''''), α111_695''' <: ((α114_703'''',) -> α115_704'''')}›)›  <!<  ((α111_933',) -> α113_943')
//│ ╟── while constraining:  α110_690'  <!<  ((α111_933',) -> α113_943')
//│ ╟── while constraining:  {(α112_944' -> α115_946') where: α110_690' <: ((α111_933',) -> α113_943'), α111_933' <: ((α114_945',) -> α115_946')}  <!<  ((α112_930',) -> α114_931')
//│ ╟── while constraining:  ‹∀ 3. {(α112_940'''' -> α115_942'''') where: α110_690' <: ((α111_933',) -> α113_937''''), α111_933' <: ((α114_941'''',) -> α115_942'''')}›  <!<  ((α112_930',) -> α114_931')
//│ ╟── while constraining:  ‹∀ 3. {(α112_940'''' -> α115_942'''') where: α110_690' <: ((α111_933',) -> α113_937''''), α111_933' <: ((α114_941'''',) -> α115_942'''')}›  <!<  α113_929'
//│ ╟── while constraining:  (α111_933' -> ‹∀ 3. {(α112_940'''' -> α115_942'''') where: α110_690' <: ((α111_933',) -> α113_937''''), α111_933' <: ((α114_941'''',) -> α115_942'''')}›)  <!<  ((α111_919',) -> α113_929')
//│ ╟── while constraining:  ‹∀ 2. (α111_695''' -> ‹∀ 3. {(α112_702'''' -> α115_704'''') where: α110_690' <: ((α111_695''',) -> α113_701''''), α111_695''' <: ((α114_703'''',) -> α115_704'''')}›)›  <!<  ((α111_919',) -> α113_929')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  α110_690'  <!<  ((α111_723',) -> α113_733')
//│ ╟── while constraining:  {(α112_734' -> α115_736') where: α110_690' <: ((α111_723',) -> α113_733'), α111_723' <: ((α114_735',) -> α115_736')}  <!<  ((α112_720',) -> α114_721')
//│ ╟── while constraining:  ‹∀ 3. {(α112_730'''' -> α115_732'''') where: α110_690' <: ((α111_723',) -> α113_727''''), α111_723' <: ((α114_731'''',) -> α115_732'''')}›  <!<  ((α112_720',) -> α114_721')
//│ ╟── while constraining:  ‹∀ 3. {(α112_730'''' -> α115_732'''') where: α110_690' <: ((α111_723',) -> α113_727''''), α111_723' <: ((α114_731'''',) -> α115_732'''')}›  <!<  α113_719'
//│ ╟── while constraining:  (α111_723' -> ‹∀ 3. {(α112_730'''' -> α115_732'''') where: α110_690' <: ((α111_723',) -> α113_727''''), α111_723' <: ((α114_731'''',) -> α115_732'''')}›)  <!<  ((α111_709',) -> α113_719')
//│ ╟── while constraining:  ‹∀ 2. (α111_695''' -> ‹∀ 3. {(α112_702'''' -> α115_704'''') where: α110_690' <: ((α111_695''',) -> α113_701''''), α111_695''' <: ((α114_703'''',) -> α115_704'''')}›)›  <!<  ((α111_709',) -> α113_719')
//│ ╟── while constraining:  α110_690'  <!<  ((α111_709',) -> α113_719')
//│ ╟── while constraining:  {(α112_720' -> α115_722') where: α110_690' <: ((α111_709',) -> α113_719'), α111_709' <: ((α114_721',) -> α115_722')}  <!<  ((α707',) -> α708')
//│ ╟── while constraining:  ‹∀ 3. {(α112_716'''' -> α115_718'''') where: α110_690' <: ((α111_709',) -> α113_713''''), α111_709' <: ((α114_717'''',) -> α115_718'''')}›  <!<  ((α707',) -> α708')
//│ ╟── while constraining:  ‹∀ 3. {(α112_716'''' -> α115_718'''') where: α110_690' <: ((α111_709',) -> α113_713''''), α111_709' <: ((α114_717'''',) -> α115_718'''')}›  <!<  α706'
//│ ╟── while constraining:  (α111_709' -> ‹∀ 3. {(α112_716'''' -> α115_718'''') where: α110_690' <: ((α111_709',) -> α113_713''''), α111_709' <: ((α114_717'''',) -> α115_718'''')}›)  <!<  ((α705',) -> α706')
//│ ╟── while constraining:  ‹∀ 2. (α111_695''' -> ‹∀ 3. {(α112_702'''' -> α115_704'''') where: α110_690' <: ((α111_695''',) -> α113_701''''), α111_695''' <: ((α114_703'''',) -> α115_704'''')}›)›  <!<  ((α705',) -> α706')
//│ ╟── while constraining:  ‹∀ 2. (α111_695''' -> ‹∀ 3. {(α112_702'''' -> α115_704'''') where: α110_690' <: ((α111_695''',) -> α113_701''''), α111_695''' <: ((α114_703'''',) -> α115_704'''')}›)›  <!<  α110_690'
//│ ╟── while constraining:  ‹∀ 2. (α111_695''' -> ‹∀ 3. {(α112_702'''' -> α115_704'''') where: α110_690' <: ((α111_695''',) -> α113_701''''), α111_695''' <: ((α114_703'''',) -> α115_704'''')}›)›  <!<  nani688'
//│ ╙── while constraining:  α689'  <!<  nani688'
//│ nani: ('a -> 'b & 'c & nothing -> anything) -> (forall 'a, 'b, 'c, 'd, 'e, 'f, 'g. ('e -> ('g | 'b)
//│   where
//│     'd <: 'c -> 'e -> ('a & 'f)
//│     'c <: 'f -> 'g))

// * The one with annotated rec occurrence works...
def to_church_1_repro n =
  succ (to_church_ty n)
//│ to_church_1_repro: int -> (forall 'b, 'c, 'd, 'e, 'a, 'a0, 'a1, 'f, 'g. ((('a | 'a0 | 'a1 | ‘a517 | 'e | 'f) -> 'g & 'a1 -> 'a1 & 'a -> 'a & ('a0 | ‘a517) -> (‘a517 & ‘a642 & 'a0) & 'c) -> (forall 'b, 'c, 'd, 'e, 'a, 'a0, 'a1, 'f, 'g, 'h, 'i, 'j. ((‘a517 & ‘a642 & 'd & 'a & 'a0 & 'a1 & 'h) -> ('j | 'g)
//│   where
//│     'b <: 'c -> 'h -> ('f & 'i)
//│     'c <: ('a | 'a0 | 'a1 | ‘a517 | 'i | 'e) -> 'j))
//│   where
//│     'b <: 'c -> 'd -> 'e))
//│                  = <no result>
//│                    to_church_ty is not implemented



rec def to_church_1_st n =
  if n == 0 then zero
  else succ_ty (to_church_1_st (n - 1))
//│ to_church_1_st: int -> (anything -> (forall 'a. 'a -> 'a) | ChurchInt)
//│               = [Function: to_church_1_st]

// FIXME should be caught by cycle checker!
rec def to_church_2 n =
  if n == 0 then zero
  else succ' (to_church_2 (n - 1))
//│ ╔══[ERROR] Subtyping constraint of the form `?a -> ?b <: ?to_church_2` exceeded recursion depth limit (300)
//│ ║  l.277: 	rec def to_church_2 n =
//│ ║         	                    ^^^
//│ ║  l.278: 	  if n == 0 then zero
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.279: 	  else succ' (to_church_2 (n - 1))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  α110_1622'  <!<  ((α111_1828',) -> α113_1838')
//│ ╟── while constraining:  {(α112_1839' -> α115_1841') where: α110_1622' <: ((α111_1828',) -> α113_1838'), α111_1828' <: ((α114_1840',) -> α115_1841')}  <!<  ((α112_1825',) -> α114_1826')
//│ ╟── while constraining:  ‹∀ 3. {(α112_1835'''' -> α115_1837'''') where: α110_1622' <: ((α111_1828',) -> α113_1832''''), α111_1828' <: ((α114_1836'''',) -> α115_1837'''')}›  <!<  ((α112_1825',) -> α114_1826')
//│ ╟── while constraining:  ‹∀ 3. {(α112_1835'''' -> α115_1837'''') where: α110_1622' <: ((α111_1828',) -> α113_1832''''), α111_1828' <: ((α114_1836'''',) -> α115_1837'''')}›  <!<  α113_1824'
//│ ╟── while constraining:  (α111_1828' -> ‹∀ 3. {(α112_1835'''' -> α115_1837'''') where: α110_1622' <: ((α111_1828',) -> α113_1832''''), α111_1828' <: ((α114_1836'''',) -> α115_1837'''')}›)  <!<  ((α111_1814',) -> α113_1824')
//│ ╟── while constraining:  ‹∀ 2. (α111_1627''' -> ‹∀ 3. {(α112_1634'''' -> α115_1636'''') where: α110_1622' <: ((α111_1627''',) -> α113_1633''''), α111_1627''' <: ((α114_1635'''',) -> α115_1636'''')}›)›  <!<  ((α111_1814',) -> α113_1824')
//│ ╟── while constraining:  α110_1622'  <!<  ((α111_1814',) -> α113_1824')
//│ ╟── while constraining:  {(α112_1825' -> α115_1827') where: α110_1622' <: ((α111_1814',) -> α113_1824'), α111_1814' <: ((α114_1826',) -> α115_1827')}  <!<  ((α112_1811',) -> α114_1812')
//│ ╟── while constraining:  ‹∀ 3. {(α112_1821'''' -> α115_1823'''') where: α110_1622' <: ((α111_1814',) -> α113_1818''''), α111_1814' <: ((α114_1822'''',) -> α115_1823'''')}›  <!<  ((α112_1811',) -> α114_1812')
//│ ╟── while constraining:  ‹∀ 3. {(α112_1821'''' -> α115_1823'''') where: α110_1622' <: ((α111_1814',) -> α113_1818''''), α111_1814' <: ((α114_1822'''',) -> α115_1823'''')}›  <!<  α113_1810'
//│ ╟── while constraining:  (α111_1814' -> ‹∀ 3. {(α112_1821'''' -> α115_1823'''') where: α110_1622' <: ((α111_1814',) -> α113_1818''''), α111_1814' <: ((α114_1822'''',) -> α115_1823'''')}›)  <!<  ((α111_1800',) -> α113_1810')
//│ ╟── while constraining:  ‹∀ 2. (α111_1627''' -> ‹∀ 3. {(α112_1634'''' -> α115_1636'''') where: α110_1622' <: ((α111_1627''',) -> α113_1633''''), α111_1627''' <: ((α114_1635'''',) -> α115_1636'''')}›)›  <!<  ((α111_1800',) -> α113_1810')
//│ ╟── while constraining:  α110_1622'  <!<  ((α111_1800',) -> α113_1810')
//│ ╟── while constraining:  {(α112_1811' -> α115_1813') where: α110_1622' <: ((α111_1800',) -> α113_1810'), α111_1800' <: ((α114_1812',) -> α115_1813')}  <!<  ((α112_1797',) -> α114_1798')
//│ ╟── while constraining:  ‹∀ 3. {(α112_1807'''' -> α115_1809'''') where: α110_1622' <: ((α111_1800',) -> α113_1804''''), α111_1800' <: ((α114_1808'''',) -> α115_1809'''')}›  <!<  ((α112_1797',) -> α114_1798')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 3. {(α112_1667'''' -> α115_1669'''') where: α110_1622' <: ((α111_1660',) -> α113_1664''''), α111_1660' <: ((α114_1668'''',) -> α115_1669'''')}›  <!<  ((α112_1657',) -> α114_1658')
//│ ╟── while constraining:  ‹∀ 3. {(α112_1667'''' -> α115_1669'''') where: α110_1622' <: ((α111_1660',) -> α113_1664''''), α111_1660' <: ((α114_1668'''',) -> α115_1669'''')}›  <!<  α113_1656'
//│ ╟── while constraining:  (α111_1660' -> ‹∀ 3. {(α112_1667'''' -> α115_1669'''') where: α110_1622' <: ((α111_1660',) -> α113_1664''''), α111_1660' <: ((α114_1668'''',) -> α115_1669'''')}›)  <!<  ((α111_1646',) -> α113_1656')
//│ ╟── while constraining:  ‹∀ 2. (α111_1627''' -> ‹∀ 3. {(α112_1634'''' -> α115_1636'''') where: α110_1622' <: ((α111_1627''',) -> α113_1633''''), α111_1627''' <: ((α114_1635'''',) -> α115_1636'''')}›)›  <!<  ((α111_1646',) -> α113_1656')
//│ ╟── while constraining:  α110_1622'  <!<  ((α111_1646',) -> α113_1656')
//│ ╟── while constraining:  {(α112_1657' -> α115_1659') where: α110_1622' <: ((α111_1646',) -> α113_1656'), α111_1646' <: ((α114_1658',) -> α115_1659')}  <!<  ((α1640',) -> α1641')
//│ ╟── while constraining:  ‹∀ 3. {(α112_1653'''' -> α115_1655'''') where: α110_1622' <: ((α111_1646',) -> α113_1650''''), α111_1646' <: ((α114_1654'''',) -> α115_1655'''')}›  <!<  ((α1640',) -> α1641')
//│ ╟── while constraining:  ‹∀ 3. {(α112_1653'''' -> α115_1655'''') where: α110_1622' <: ((α111_1646',) -> α113_1650''''), α111_1646' <: ((α114_1654'''',) -> α115_1655'''')}›  <!<  α1639'
//│ ╟── while constraining:  (α111_1646' -> ‹∀ 3. {(α112_1653'''' -> α115_1655'''') where: α110_1622' <: ((α111_1646',) -> α113_1650''''), α111_1646' <: ((α114_1654'''',) -> α115_1655'''')}›)  <!<  ((α1638',) -> α1639')
//│ ╟── while constraining:  ‹∀ 2. (α111_1627''' -> ‹∀ 3. {(α112_1634'''' -> α115_1636'''') where: α110_1622' <: ((α111_1627''',) -> α113_1633''''), α111_1627''' <: ((α114_1635'''',) -> α115_1636'''')}›)›  <!<  ((α1638',) -> α1639')
//│ ╟── while constraining:  ‹∀ 2. (α111_1627''' -> ‹∀ 3. {(α112_1634'''' -> α115_1636'''') where: α110_1622' <: ((α111_1627''',) -> α113_1633''''), α111_1627''' <: ((α114_1635'''',) -> α115_1636'''')}›)›  <!<  α110_1622'
//│ ╟── while constraining:  ‹∀ 2. (α111_1627''' -> ‹∀ 3. {(α112_1634'''' -> α115_1636'''') where: α110_1622' <: ((α111_1627''',) -> α113_1633''''), α111_1627''' <: ((α114_1635'''',) -> α115_1636'''')}›)›  <!<  α1620'
//│ ╟── while constraining:  α1637'  <!<  α1620'
//│ ╟── while constraining:  (α1612' -> α1637')  <!<  ((α1619',) -> α1620')
//│ ╙── while constraining:  (α1612' -> α1637')  <!<  to_church_21611'
//│ to_church_2: int -> (forall 'a, 'b, 'c. (('a | 'd) -> 'b & 'c & 'd -> anything) -> (forall 'a, 'd, 'b, 'c, 'e, 'f, 'g, 'h. (('b & 'd & 'f) -> ('h | 'b)
//│   where
//│     'e <: 'c -> 'f -> ('a & 'g)
//│     'c <: ('g | 'd) -> 'h)))
//│            = [Function: to_church_1_st]

// :e // FIXME should be caught by cycle checker!
// Requires :RecursiveTypes
:ng // FIXME codegen: `ReferenceError: to_church_2 is not defined`
// :e // due to tapping
:e // FIXME? refreshing-extr
// FIXME should be caught by cycle checker!
to_church_ty = to_church_2
//│ int -> (forall 'a, 'b, 'c. (('a | 'd) -> 'b & 'c & 'd -> anything) -> (forall 'a, 'd, 'b, 'c, 'e, 'f, 'g, 'h. (('b & 'd & 'f) -> ('h | 'b)
//│   where
//│     'e <: 'c -> 'f -> ('a & 'g)
//│     'c <: ('g | 'd) -> 'h)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r, ?to_church_2, ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1, ?i1, ?j1, ?k1, ?l1, ?m1, ?n1, ?o1, ?p1, ?q1, ?r1, ?s1, ?t1, ?u1, ?v1, ?w1, ?x1, ?y1, ?z1, ?a2, ?b2, ?c2, ?d2, ?e2, ?f2, ?g2, ?h2, ?i2, ?j2, ?k2, ?l2, ?m2, ?n2, ?o2, ?p2, ?q2, ?r2, ?s2, ?t2, ?u2, ?v2, ?w2, ?x2, ?y2, ?z2, ?a3, ?b3, ?c3, ?d3, ?e3, ?f3, ?g3, ?h3, ?i3, ?j3, ?k3, ?l3, ?m3, ?n3, ?o3, ?p3, ?q3, ?r3, ?s3, ?t3, ?u3, ?v3, ?w3, ?x3, ?y3, ?z3, ?a4, ?b4, ?c4, ?d4, ?e4, ?f4, ?g4, ?h4, ?i4, ?j4, ?k4, ?l4, ?m4, ?n4, ?o4, ?p4, ?q4, ?r4, ?s4, ?t4, ?u4, ?v4, ?w4, ?x4, ?y4, ?z4, ?a5, ?b5, ?c5, ?d5, ?e5, ?f5, ?g5, ?h5, ?i5, ?j5. ?to_church_2 <: int -> ChurchInt` exceeded recursion depth limit (300)
//│ ║  l.331: 	to_church_ty = to_church_2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (‘a' -> ‘a')  <!<  α111_2767'
//│ ╟── while constraining:  α111_2755'  <!<  α111_2767'
//│ ╟── while constraining:  (α111_2755',)  <!<  (α111_2767',)
//│ ╟── while constraining:  (α111_2767' -> ‹∀ 3. {(α112_2772'''' -> α115_2774'''') where: α110_2483' <: ((α111_2767',) -> α113_2771''''), α111_2767' <: ((α114_2773'''',) -> α115_2774'''')}›)  <!<  ((α111_2755',) -> α113_2763')
//│ ╟── while constraining:  ‹∀ 2. (α111_2417''' -> ‹∀ 3. {(α112_2499'''' -> α115_2501'''') where: α110_2483' <: ((α111_2417''',) -> α113_2484''''), α111_2417''' <: ((α114_2500'''',) -> α115_2501'''')}›)›  <!<  ((α111_2755',) -> α113_2763')
//│ ╟── while constraining:  α110_2483'  <!<  ((α111_2755',) -> α113_2763')
//│ ╟── while constraining:  {(α112_2764' -> α115_2766') where: α110_2483' <: ((α111_2755',) -> α113_2763'), α111_2755' <: ((α114_2765',) -> α115_2766')}  <!<  ((α112_2752',) -> α114_2753')
//│ ╟── while constraining:  ‹∀ 3. {(α112_2760'''' -> α115_2762'''') where: α110_2483' <: ((α111_2755',) -> α113_2759''''), α111_2755' <: ((α114_2761'''',) -> α115_2762'''')}›  <!<  ((α112_2752',) -> α114_2753')
//│ ╟── while constraining:  ‹∀ 3. {(α112_2760'''' -> α115_2762'''') where: α110_2483' <: ((α111_2755',) -> α113_2759''''), α111_2755' <: ((α114_2761'''',) -> α115_2762'''')}›  <!<  α113_2751'
//│ ╟── while constraining:  (α111_2755' -> ‹∀ 3. {(α112_2760'''' -> α115_2762'''') where: α110_2483' <: ((α111_2755',) -> α113_2759''''), α111_2755' <: ((α114_2761'''',) -> α115_2762'''')}›)  <!<  ((α111_2743',) -> α113_2751')
//│ ╟── while constraining:  ‹∀ 2. (α111_2417''' -> ‹∀ 3. {(α112_2499'''' -> α115_2501'''') where: α110_2483' <: ((α111_2417''',) -> α113_2484''''), α111_2417''' <: ((α114_2500'''',) -> α115_2501'''')}›)›  <!<  ((α111_2743',) -> α113_2751')
//│ ╟── while constraining:  α110_2483'  <!<  ((α111_2743',) -> α113_2751')
//│ ╟── while constraining:  {(α112_2752' -> α115_2754') where: α110_2483' <: ((α111_2743',) -> α113_2751'), α111_2743' <: ((α114_2753',) -> α115_2754')}  <!<  ((α112_2740',) -> α114_2741')
//│ ╟── while constraining:  ‹∀ 3. {(α112_2748'''' -> α115_2750'''') where: α110_2483' <: ((α111_2743',) -> α113_2747''''), α111_2743' <: ((α114_2749'''',) -> α115_2750'''')}›  <!<  ((α112_2740',) -> α114_2741')
//│ ╟── while constraining:  ‹∀ 3. {(α112_2748'''' -> α115_2750'''') where: α110_2483' <: ((α111_2743',) -> α113_2747''''), α111_2743' <: ((α114_2749'''',) -> α115_2750'''')}›  <!<  α113_2739'
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 3. {(α112_2640'''' -> α115_2642'''') where: α110_2483' <: ((α111_2635',) -> α113_2639''''), α111_2635' <: ((α114_2641'''',) -> α115_2642'''')}›  <!<  α113_2631'
//│ ╟── while constraining:  (α111_2635' -> ‹∀ 3. {(α112_2640'''' -> α115_2642'''') where: α110_2483' <: ((α111_2635',) -> α113_2639''''), α111_2635' <: ((α114_2641'''',) -> α115_2642'''')}›)  <!<  ((α111_2623',) -> α113_2631')
//│ ╟── while constraining:  ‹∀ 2. (α111_2417''' -> ‹∀ 3. {(α112_2499'''' -> α115_2501'''') where: α110_2483' <: ((α111_2417''',) -> α113_2484''''), α111_2417''' <: ((α114_2500'''',) -> α115_2501'''')}›)›  <!<  ((α111_2623',) -> α113_2631')
//│ ╟── while constraining:  α110_2483'  <!<  ((α111_2623',) -> α113_2631')
//│ ╟── while constraining:  {(α112_2632' -> α115_2634') where: α110_2483' <: ((α111_2623',) -> α113_2631'), α111_2623' <: ((α114_2633',) -> α115_2634')}  <!<  (‘a' -> ‘a')
//│ ╟── while constraining:  ‹∀ 3. {(α112_2628'''' -> α115_2630'''') where: α110_2483' <: ((α111_2623',) -> α113_2627''''), α111_2623' <: ((α114_2629'''',) -> α115_2630'''')}›  <!<  (‘a' -> ‘a')
//│ ╟── while constraining:  (α111_2623' -> ‹∀ 3. {(α112_2628'''' -> α115_2630'''') where: α110_2483' <: ((α111_2623',) -> α113_2627''''), α111_2623' <: ((α114_2629'''',) -> α115_2630'''')}›)  <!<  ((‘a' -> ‘a') -> (‘a' -> ‘a'))
//│ ╟── while constraining:  ‹∀ 2. (α111_2417''' -> ‹∀ 3. {(α112_2499'''' -> α115_2501'''') where: α110_2483' <: ((α111_2417''',) -> α113_2484''''), α111_2417''' <: ((α114_2500'''',) -> α115_2501'''')}›)›  <!<  ((‘a' -> ‘a') -> (‘a' -> ‘a'))
//│ ╟── while constraining:  α1637_2416'  <!<  ((‘a' -> ‘a') -> (‘a' -> ‘a'))
//│ ╟── while constraining:  (α1612_2415' -> α1637_2416')  <!<  (Int -> ((‘a' -> ‘a') -> (‘a' -> ‘a')))
//│ ╟── while constraining:  to_church_21611_2414'  <!<  (Int -> ((‘a' -> ‘a') -> (‘a' -> ‘a')))
//│ ╟── while constraining:  ‹∀ 0. to_church_21611'›  <!<  (Int -> ((‘a' -> ‘a') -> (‘a' -> ‘a')))
//│ ╟── while constraining:  ‹∀ 0. to_church_21611'›  <!<  ‹∀ 0. (Int -> (('a51' -> 'a51') -> ('a51' -> 'a51')))›
//│ ╟── while constraining:  ‹∀ 0. to_church_21611'›  <!<  (Int -> ChurchInt)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. to_church_21611'››  <!<  (Int -> ChurchInt)

// (* Marche *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1) : Int) f x)
// ;;

// :e // FIXME?
rec def to_church_3 n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_3 (n - 1) : ChurchInt) f x)
//│ to_church_3: int -> (('a | ‘a2984) -> (‘a2984 & 'b) & ('a | ‘a2984) -> (‘a2984 & 'a)) -> (forall 'c. (‘a2984 & 'c & 'a) -> (‘a2984 | 'c | 'b))
//│            = [Function: to_church_3]

// (* Ne Marche Pas *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else (fun f x -> f ((to_church (n-1)) f x) : Int)
// ;;
rec def to_church_4 n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_4 (n - 1)) f x) : ChurchInt
//│ to_church_4: int -> ((ChurchInt | 'a) -> ChurchInt) -> (forall 'b. ('b & 'a) -> (ChurchInt | 'b))
//│            = [Function: to_church_4]


// (* La r�cursion est monomorphe. *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1)) f x)
// ;;

rec def to_church_5 n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_5 (n - 1)) f x)
//│ to_church_5: int -> ('a -> ('a & 'b)) -> (forall 'c. ('c & 'a) -> ('c | 'b))
//│            = [Function: to_church_5]


:e // FIXME? // due to gen lam bod?
to_church_ty = to_church_1
//│ int -> (forall 'a, 'b, 'c, 'd. (('a0 | 'a1 | 'a | ‘a517 | 'b) -> 'c & 'a -> 'a & 'a0 -> 'a0 & ('a1 | ‘a517) -> (‘a517 & ‘a642 & 'a1) & 'd) -> (forall 'a0, 'a1, 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h. ((‘a517 & ‘a642 & 'c & 'a0 & 'a1 & 'a & 'f) -> ('c | 'h)
//│   where
//│     'e <: 'd -> 'f -> ('b & 'g)
//│     'd <: ('a0 | 'a1 | 'a | ‘a517 | 'g) -> 'h)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.413: 	to_church_ty = to_church_1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a517` is not an instance of type `'a`
//│ ║  l.30: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.30: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│             = [Function: to_church_1]

to_church_ty = to_church_1_t
//│ int -> (anything -> (forall 'a. 'a -> 'a) | ChurchInt)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_1_t]

to_church_ty = to_church_1_tt
//│ int -> ChurchInt
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = <no result>
//│               to_church_1_tt and zero_ty are not implemented

to_church_ty = to_church_1_st
//│ int -> (anything -> (forall 'a. 'a -> 'a) | ChurchInt)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_1_st]

// :e // FIXME should be caught by cycle checker!
:ng
:e // due to tapping
// FIXME should be caught by cycle checker!
to_church_ty = to_church_2
//│ int -> (forall 'a, 'b, 'c. (('a | 'd) -> 'b & 'c & 'd -> anything) -> (forall 'a, 'd, 'b, 'c, 'e, 'f, 'g, 'h. (('b & 'd & 'f) -> ('h | 'b)
//│   where
//│     'e <: 'c -> 'f -> ('a & 'g)
//│     'c <: ('g | 'd) -> 'h)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r, ?to_church_2, ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1, ?i1, ?j1, ?k1, ?l1, ?m1, ?n1, ?o1, ?p1, ?q1, ?r1, ?s1, ?t1, ?u1, ?v1, ?w1, ?x1, ?y1, ?z1, ?a2, ?b2, ?c2, ?d2, ?e2, ?f2, ?g2, ?h2, ?i2, ?j2, ?k2, ?l2, ?m2, ?n2, ?o2, ?p2, ?q2, ?r2, ?s2, ?t2, ?u2, ?v2, ?w2, ?x2, ?y2, ?z2, ?a3, ?b3, ?c3, ?d3, ?e3, ?f3, ?g3, ?h3, ?i3, ?j3, ?k3, ?l3, ?m3, ?n3, ?o3, ?p3, ?q3, ?r3, ?s3, ?t3, ?u3, ?v3, ?w3, ?x3, ?y3, ?z3, ?a4, ?b4, ?c4, ?d4, ?e4, ?f4, ?g4, ?h4, ?i4, ?j4, ?k4, ?l4, ?m4, ?n4, ?o4, ?p4, ?q4, ?r4, ?s4, ?t4, ?u4, ?v4, ?w4, ?x4, ?y4, ?z4, ?a5, ?b5, ?c5, ?d5, ?e5, ?f5, ?g5, ?h5, ?i5, ?j5. ?to_church_2 <: int -> ChurchInt` exceeded recursion depth limit (300)
//│ ║  l.454: 	to_church_ty = to_church_2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (‘a' -> ‘a')  <!<  α111_3657'
//│ ╟── while constraining:  α111_3645'  <!<  α111_3657'
//│ ╟── while constraining:  (α111_3645',)  <!<  (α111_3657',)
//│ ╟── while constraining:  (α111_3657' -> ‹∀ 3. {(α112_3662'''' -> α115_3664'''') where: α110_3373' <: ((α111_3657',) -> α113_3661''''), α111_3657' <: ((α114_3663'''',) -> α115_3664'''')}›)  <!<  ((α111_3645',) -> α113_3653')
//│ ╟── while constraining:  ‹∀ 2. (α111_3307''' -> ‹∀ 3. {(α112_3389'''' -> α115_3391'''') where: α110_3373' <: ((α111_3307''',) -> α113_3374''''), α111_3307''' <: ((α114_3390'''',) -> α115_3391'''')}›)›  <!<  ((α111_3645',) -> α113_3653')
//│ ╟── while constraining:  α110_3373'  <!<  ((α111_3645',) -> α113_3653')
//│ ╟── while constraining:  {(α112_3654' -> α115_3656') where: α110_3373' <: ((α111_3645',) -> α113_3653'), α111_3645' <: ((α114_3655',) -> α115_3656')}  <!<  ((α112_3642',) -> α114_3643')
//│ ╟── while constraining:  ‹∀ 3. {(α112_3650'''' -> α115_3652'''') where: α110_3373' <: ((α111_3645',) -> α113_3649''''), α111_3645' <: ((α114_3651'''',) -> α115_3652'''')}›  <!<  ((α112_3642',) -> α114_3643')
//│ ╟── while constraining:  ‹∀ 3. {(α112_3650'''' -> α115_3652'''') where: α110_3373' <: ((α111_3645',) -> α113_3649''''), α111_3645' <: ((α114_3651'''',) -> α115_3652'''')}›  <!<  α113_3641'
//│ ╟── while constraining:  (α111_3645' -> ‹∀ 3. {(α112_3650'''' -> α115_3652'''') where: α110_3373' <: ((α111_3645',) -> α113_3649''''), α111_3645' <: ((α114_3651'''',) -> α115_3652'''')}›)  <!<  ((α111_3633',) -> α113_3641')
//│ ╟── while constraining:  ‹∀ 2. (α111_3307''' -> ‹∀ 3. {(α112_3389'''' -> α115_3391'''') where: α110_3373' <: ((α111_3307''',) -> α113_3374''''), α111_3307''' <: ((α114_3390'''',) -> α115_3391'''')}›)›  <!<  ((α111_3633',) -> α113_3641')
//│ ╟── while constraining:  α110_3373'  <!<  ((α111_3633',) -> α113_3641')
//│ ╟── while constraining:  {(α112_3642' -> α115_3644') where: α110_3373' <: ((α111_3633',) -> α113_3641'), α111_3633' <: ((α114_3643',) -> α115_3644')}  <!<  ((α112_3630',) -> α114_3631')
//│ ╟── while constraining:  ‹∀ 3. {(α112_3638'''' -> α115_3640'''') where: α110_3373' <: ((α111_3633',) -> α113_3637''''), α111_3633' <: ((α114_3639'''',) -> α115_3640'''')}›  <!<  ((α112_3630',) -> α114_3631')
//│ ╟── while constraining:  ‹∀ 3. {(α112_3638'''' -> α115_3640'''') where: α110_3373' <: ((α111_3633',) -> α113_3637''''), α111_3633' <: ((α114_3639'''',) -> α115_3640'''')}›  <!<  α113_3629'
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 3. {(α112_3530'''' -> α115_3532'''') where: α110_3373' <: ((α111_3525',) -> α113_3529''''), α111_3525' <: ((α114_3531'''',) -> α115_3532'''')}›  <!<  α113_3521'
//│ ╟── while constraining:  (α111_3525' -> ‹∀ 3. {(α112_3530'''' -> α115_3532'''') where: α110_3373' <: ((α111_3525',) -> α113_3529''''), α111_3525' <: ((α114_3531'''',) -> α115_3532'''')}›)  <!<  ((α111_3513',) -> α113_3521')
//│ ╟── while constraining:  ‹∀ 2. (α111_3307''' -> ‹∀ 3. {(α112_3389'''' -> α115_3391'''') where: α110_3373' <: ((α111_3307''',) -> α113_3374''''), α111_3307''' <: ((α114_3390'''',) -> α115_3391'''')}›)›  <!<  ((α111_3513',) -> α113_3521')
//│ ╟── while constraining:  α110_3373'  <!<  ((α111_3513',) -> α113_3521')
//│ ╟── while constraining:  {(α112_3522' -> α115_3524') where: α110_3373' <: ((α111_3513',) -> α113_3521'), α111_3513' <: ((α114_3523',) -> α115_3524')}  <!<  (‘a' -> ‘a')
//│ ╟── while constraining:  ‹∀ 3. {(α112_3518'''' -> α115_3520'''') where: α110_3373' <: ((α111_3513',) -> α113_3517''''), α111_3513' <: ((α114_3519'''',) -> α115_3520'''')}›  <!<  (‘a' -> ‘a')
//│ ╟── while constraining:  (α111_3513' -> ‹∀ 3. {(α112_3518'''' -> α115_3520'''') where: α110_3373' <: ((α111_3513',) -> α113_3517''''), α111_3513' <: ((α114_3519'''',) -> α115_3520'''')}›)  <!<  ((‘a' -> ‘a') -> (‘a' -> ‘a'))
//│ ╟── while constraining:  ‹∀ 2. (α111_3307''' -> ‹∀ 3. {(α112_3389'''' -> α115_3391'''') where: α110_3373' <: ((α111_3307''',) -> α113_3374''''), α111_3307''' <: ((α114_3390'''',) -> α115_3391'''')}›)›  <!<  ((‘a' -> ‘a') -> (‘a' -> ‘a'))
//│ ╟── while constraining:  α1637_3306'  <!<  ((‘a' -> ‘a') -> (‘a' -> ‘a'))
//│ ╟── while constraining:  (α1612_3305' -> α1637_3306')  <!<  (Int -> ((‘a' -> ‘a') -> (‘a' -> ‘a')))
//│ ╟── while constraining:  to_church_21611_3304'  <!<  (Int -> ((‘a' -> ‘a') -> (‘a' -> ‘a')))
//│ ╟── while constraining:  ‹∀ 0. to_church_21611'›  <!<  (Int -> ((‘a' -> ‘a') -> (‘a' -> ‘a')))
//│ ╟── while constraining:  ‹∀ 0. to_church_21611'›  <!<  ‹∀ 0. (Int -> (('a51' -> 'a51') -> ('a51' -> 'a51')))›
//│ ╟── while constraining:  ‹∀ 0. to_church_21611'›  <!<  (Int -> ChurchInt)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. to_church_21611'››  <!<  (Int -> ChurchInt)

:e // FIXME?
to_church_ty = to_church_3
//│ int -> (('a | ‘a2984) -> (‘a2984 & 'b) & ('a | ‘a2984) -> (‘a2984 & 'a)) -> (forall 'c. (‘a2984 & 'c & 'a) -> (‘a2984 | 'c | 'b))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.498: 	to_church_ty = to_church_3
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a2984` is not an instance of type `'a`
//│ ║  l.30: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.30: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│             = [Function: to_church_3]

:e
to_church_ty = to_church_4
//│ int -> ((ChurchInt | 'a) -> ChurchInt) -> (forall 'b. ('b & 'a) -> (ChurchInt | 'b))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.514: 	to_church_ty = to_church_4
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `(?a -> ?a) -> ?a -> ?a` is not an instance of type `'a`
//│ ║  l.30: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                            ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.30: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│             = [Function: to_church_4]

// :e
to_church_ty = to_church_5
//│ int -> ('a -> ('a & 'b)) -> (forall 'c. ('c & 'a) -> ('c | 'b))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_5]




// (* Echoue avec la value restriction. *)
// let rec (to_church:int -> Int) n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1)) f x)
// ;;


// // * It seems this one may need polymorphic recursion...?
// // *  ...but it's just a version with succ inlined!?
// :e
rec def to_church_ty n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_ty (n - 1)) f x)
//│ int -> ('a -> ('a & 'b)) -> (forall 'c. ('c & 'a) -> ('c | 'b))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_ty6]

// * ... since we can fix it by using the annotation for rec calls:
def to_church_ty n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_ty (n - 1)) f x)
//│ int -> (forall 'a, 'b, 'c, 'a0, 'd. (('a | 'b) -> 'c & 'a0 -> ('a & 'a0) & 'd) -> (forall 'a, 'b, 'c, 'a0, 'd, 'a1, 'e. (('e & 'b & 'a0 & 'a1) -> ('e | 'c)
//│   where
//│     'd <: ('a | 'a1) -> ('b & 'a0 & 'a1) & ('a | 'a1) -> 'e)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_ty7]


// (* �a coince. *)
// let tc n = (to_church n : Int);;

// :e // FIXME? // due to gen lam bod?
:e // FIXME?
def tc n = to_church_1 n : ChurchInt
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.574: 	def tc n = to_church_1 n : ChurchInt
//│ ║         	           ^^^^^^^^^^^^^
//│ ╟── type `‘a517` is not an instance of type `'a`
//│ ║  l.30: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.30: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ tc: int -> ChurchInt
//│   = [Function: tc]

def tc n = to_church_ty n : ChurchInt
//│ tc: int -> ChurchInt
//│   = [Function: tc1]

// FIXME should be caught by cycle checker!
def tc n = to_church_2 n : ChurchInt // Requires :RecursiveTypes
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: ChurchInt` exceeded recursion depth limit (300)
//│ ║  l.592: 	def tc n = to_church_2 n : ChurchInt // Requires :RecursiveTypes
//│ ║         	           ^^^^^^^^^^^^^
//│ ╟── while constraining:  (‘a4380'' -> ‘a4380'')  <!<  α111_4518''
//│ ╟── while constraining:  α111_4506''  <!<  α111_4518''
//│ ╟── while constraining:  (α111_4506'',)  <!<  (α111_4518'',)
//│ ╟── while constraining:  (α111_4518'' -> ‹∀ 3. {(α112_4523'''' -> α115_4525'''') where: α110_4230'' <: ((α111_4518'',) -> α113_4522''''), α111_4518'' <: ((α114_4524'''',) -> α115_4525'''')}›)  <!<  ((α111_4506'',) -> α113_4514'')
//│ ╟── while constraining:  ‹∀ 2. (α111_4164''' -> ‹∀ 3. {(α112_4246'''' -> α115_4248'''') where: α110_4230'' <: ((α111_4164''',) -> α113_4231''''), α111_4164''' <: ((α114_4247'''',) -> α115_4248'''')}›)›  <!<  ((α111_4506'',) -> α113_4514'')
//│ ╟── while constraining:  α110_4230''  <!<  ((α111_4506'',) -> α113_4514'')
//│ ╟── while constraining:  {(α112_4515'' -> α115_4517'') where: α110_4230'' <: ((α111_4506'',) -> α113_4514''), α111_4506'' <: ((α114_4516'',) -> α115_4517'')}  <!<  ((α112_4503'',) -> α114_4504'')
//│ ╟── while constraining:  ‹∀ 3. {(α112_4511'''' -> α115_4513'''') where: α110_4230'' <: ((α111_4506'',) -> α113_4510''''), α111_4506'' <: ((α114_4512'''',) -> α115_4513'''')}›  <!<  ((α112_4503'',) -> α114_4504'')
//│ ╟── while constraining:  ‹∀ 3. {(α112_4511'''' -> α115_4513'''') where: α110_4230'' <: ((α111_4506'',) -> α113_4510''''), α111_4506'' <: ((α114_4512'''',) -> α115_4513'''')}›  <!<  α113_4502''
//│ ╟── while constraining:  (α111_4506'' -> ‹∀ 3. {(α112_4511'''' -> α115_4513'''') where: α110_4230'' <: ((α111_4506'',) -> α113_4510''''), α111_4506'' <: ((α114_4512'''',) -> α115_4513'''')}›)  <!<  ((α111_4494'',) -> α113_4502'')
//│ ╟── while constraining:  ‹∀ 2. (α111_4164''' -> ‹∀ 3. {(α112_4246'''' -> α115_4248'''') where: α110_4230'' <: ((α111_4164''',) -> α113_4231''''), α111_4164''' <: ((α114_4247'''',) -> α115_4248'''')}›)›  <!<  ((α111_4494'',) -> α113_4502'')
//│ ╟── while constraining:  α110_4230''  <!<  ((α111_4494'',) -> α113_4502'')
//│ ╟── while constraining:  {(α112_4503'' -> α115_4505'') where: α110_4230'' <: ((α111_4494'',) -> α113_4502''), α111_4494'' <: ((α114_4504'',) -> α115_4505'')}  <!<  ((α112_4491'',) -> α114_4492'')
//│ ╟── while constraining:  ‹∀ 3. {(α112_4499'''' -> α115_4501'''') where: α110_4230'' <: ((α111_4494'',) -> α113_4498''''), α111_4494'' <: ((α114_4500'''',) -> α115_4501'''')}›  <!<  ((α112_4491'',) -> α114_4492'')
//│ ╟── while constraining:  ‹∀ 3. {(α112_4499'''' -> α115_4501'''') where: α110_4230'' <: ((α111_4494'',) -> α113_4498''''), α111_4494'' <: ((α114_4500'''',) -> α115_4501'''')}›  <!<  α113_4490''
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  {(α112_4407'' -> α115_4409'') where: α110_4230'' <: ((α111_4398'',) -> α113_4406''), α111_4398'' <: ((α114_4408'',) -> α115_4409'')}  <!<  ((α112_4395'',) -> α114_4396'')
//│ ╟── while constraining:  ‹∀ 3. {(α112_4403'''' -> α115_4405'''') where: α110_4230'' <: ((α111_4398'',) -> α113_4402''''), α111_4398'' <: ((α114_4404'''',) -> α115_4405'''')}›  <!<  ((α112_4395'',) -> α114_4396'')
//│ ╟── while constraining:  ‹∀ 3. {(α112_4403'''' -> α115_4405'''') where: α110_4230'' <: ((α111_4398'',) -> α113_4402''''), α111_4398'' <: ((α114_4404'''',) -> α115_4405'''')}›  <!<  α113_4394''
//│ ╟── while constraining:  (α111_4398'' -> ‹∀ 3. {(α112_4403'''' -> α115_4405'''') where: α110_4230'' <: ((α111_4398'',) -> α113_4402''''), α111_4398'' <: ((α114_4404'''',) -> α115_4405'''')}›)  <!<  ((α111_4386'',) -> α113_4394'')
//│ ╟── while constraining:  ‹∀ 2. (α111_4164''' -> ‹∀ 3. {(α112_4246'''' -> α115_4248'''') where: α110_4230'' <: ((α111_4164''',) -> α113_4231''''), α111_4164''' <: ((α114_4247'''',) -> α115_4248'''')}›)›  <!<  ((α111_4386'',) -> α113_4394'')
//│ ╟── while constraining:  α110_4230''  <!<  ((α111_4386'',) -> α113_4394'')
//│ ╟── while constraining:  {(α112_4395'' -> α115_4397'') where: α110_4230'' <: ((α111_4386'',) -> α113_4394''), α111_4386'' <: ((α114_4396'',) -> α115_4397'')}  <!<  ((α4383'',) -> α4384'')
//│ ╟── while constraining:  ‹∀ 3. {(α112_4391'''' -> α115_4393'''') where: α110_4230'' <: ((α111_4386'',) -> α113_4390''''), α111_4386'' <: ((α114_4392'''',) -> α115_4393'''')}›  <!<  ((α4383'',) -> α4384'')
//│ ╟── while constraining:  ‹∀ 3. {(α112_4391'''' -> α115_4393'''') where: α110_4230'' <: ((α111_4386'',) -> α113_4390''''), α111_4386'' <: ((α114_4392'''',) -> α115_4393'''')}›  <!<  α4382''
//│ ╟── while constraining:  (α111_4386'' -> ‹∀ 3. {(α112_4391'''' -> α115_4393'''') where: α110_4230'' <: ((α111_4386'',) -> α113_4390''''), α111_4386'' <: ((α114_4392'''',) -> α115_4393'''')}›)  <!<  ((α4381'',) -> α4382'')
//│ ╟── while constraining:  ‹∀ 2. (α111_4164''' -> ‹∀ 3. {(α112_4246'''' -> α115_4248'''') where: α110_4230'' <: ((α111_4164''',) -> α113_4231''''), α111_4164''' <: ((α114_4247'''',) -> α115_4248'''')}›)›  <!<  ((α4381'',) -> α4382'')
//│ ╟── while constraining:  α110_4230''  <!<  ((α4381'',) -> α4382'')
//│ ╟── while constraining:  ‹∀ 2. (α111_4164''' -> ‹∀ 3. {(α112_4246'''' -> α115_4248'''') where: α110_4230'' <: ((α111_4164''',) -> α113_4231''''), α111_4164''' <: ((α114_4247'''',) -> α115_4248'''')}›)›  <!<  ‹∀ 0. (('a51' -> 'a51') -> ('a51' -> 'a51'))›
//│ ╟── while constraining:  ‹∀ 2. (α111_4164''' -> ‹∀ 3. {(α112_4246'''' -> α115_4248'''') where: α110_4230'' <: ((α111_4164''',) -> α113_4231''''), α111_4164''' <: ((α114_4247'''',) -> α115_4248'''')}›)›  <!<  ChurchInt
//│ ╙── while constraining:  α4160''  <!<  ChurchInt
//│ tc: int -> ChurchInt
//│   = [Function: tc2]

// FIXME stupid type
def tc n = to_church_3 n
//│ tc: int -> (('a | ‘a2984) -> (‘a2984 & 'b) & ('a | ‘a2984) -> (‘a2984 & 'a)) -> (forall 'c. (‘a2984 & 'a & 'c) -> (‘a2984 | 'c | 'b))
//│   = [Function: tc3]

tc 1 id
//│ res: (‘a2984 & 'a) -> (‘a2984 | 'a)
//│    = [Function (anonymous)]

// FIXME
tc: int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.641: 	tc: int -> ChurchInt
//│ ║         	^^
//│ ╟── type `‘a2984` is not an instance of type `'a`
//│ ║  l.30: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.30: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│ res: int -> ChurchInt
//│    = [Function: tc3]

// FIXME
def tc n = to_church_3 n : ChurchInt
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.655: 	def tc n = to_church_3 n : ChurchInt
//│ ║         	           ^^^^^^^^^^^^^
//│ ╟── type `‘a4931` is not an instance of type `'a2984`
//│ ║  l.30: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.30: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                        ^^
//│ ╟── from reference:
//│ ║  l.383: 	  else fun f -> fun x -> f ((to_church_3 (n - 1) : ChurchInt) f x)
//│ ╙──       	                                                                ^
//│ tc: int -> ChurchInt
//│   = [Function: tc4]

// (* Duplicate with to_church1 ("Marche") above *)
// (* Avec la value restriction : �a passe. *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1) : Int) f x)


// (*** Les annotations de type ne commutent pas. ***)
// type sid = ['a] 'a -> 'a
// type z = ['a,'b] ('a -> 'b) -> ('a -> 'b)
type Z = forall 'a 'b. ('a -> 'b) -> ('a -> 'b)
//│ Defined type alias Z

// let f x = (x:sid), ((x:sid):z)

// :e // due to tapping
def f x = ((x : Sid), ((x : Sid) : Z))
//│ f: Sid -> (Sid, Z,)
//│  = [Function: f]

// (* Ne type pas ... c'est une instance polymorphe. Interdit. *)
// untype fun x -> (x:sid), (x:z)
fun x -> ((x : Sid), (x : Z))
//│ res: (Sid & Z) -> (Sid, Z,)
//│    = [Function: res]

