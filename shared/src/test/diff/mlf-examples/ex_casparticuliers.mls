// :NoRecursiveTypes // Makes several signature checks fail
:GeneralizeCurriedFunctions
:DistributeForalls

// (*** L'annotation est n�cessaire sur z, mais z n'est utilis� qu'une seule fois. ***)
// type sid = ['a] 'a -> 'a
type Sid = forall 'a. 'a -> 'a
//│ Defined type alias Sid

// let t (z:sid) = ( (fun a -> z) : ['a,'b] 'b -> 'a -> 'a )
def t (z: Sid) = (fun a -> z) : forall 'a 'b. 'b -> 'a -> 'a
//│ t: Sid -> (forall 'a. (anything -> 'a -> 'a
//│   where
//│     'b <: ‘a -> ‘a))
//│  = [Function: t]

// (* Une seule instance, mais polymorphe. *)
// let t z = ( (fun a -> z) : ['a,'b] 'b -> 'a -> 'a );;
def t z = (fun a -> z) : forall 'a 'b. 'b -> 'a -> 'a
//│ t: (‘a -> ‘a & 'b) -> (forall 'a. ('b -> 'a -> 'a
//│   where
//│     'b <: ‘a -> ‘a))
//│  = [Function: t1]

def t z = fun a -> z
//│ t: 'a -> anything -> 'a
//│  = [Function: t2]


// (*** Ne type pas avec les value-restriction. Emb�tant. ***)

// type Int = ['a] ('a -> 'a) -> ('a -> 'a)
// ;;
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt

// let zero f x = x
// ;;

def zero f x = x
//│ zero: anything -> (forall 'a. 'a -> 'a)
//│     = [Function: zero]

def zero_ty: ChurchInt
//│ zero_ty: ChurchInt
//│        = <missing implementation>

// let succ (n:Int) = fun f x -> f (n f x)
// ;;
def succ_ty: ChurchInt -> ChurchInt
def succ (n: ChurchInt) = fun f -> fun x -> f (n f x)
def succ' n = fun f -> fun x -> f (n f x)
//│ succ_ty: ChurchInt -> ChurchInt
//│        = <missing implementation>
//│ succ: ChurchInt -> (forall 'a, 'b. ((nothing -> anything & 'b) -> (forall 'a, 'b, 'c. ('c -> (forall 'a, 'b, 'c, 'd, 'e. ('e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e))
//│   where
//│     'a <: nothing -> nothing -> anything
//│     'b <: nothing -> anything
//│     'a <: nothing -> nothing -> anything
//│     'b <: nothing -> anything))
//│   where
//│     'a <: nothing -> nothing -> anything
//│     'a <: nothing -> nothing -> anything))
//│     = [Function: succ]
//│ succ': (nothing -> nothing -> 'a & 'a) -> (forall 'a, 'b. ((nothing -> 'a & 'b) -> (forall 'a, 'b, 'c. ('c -> (forall 'a, 'b, 'c, 'd, 'e. ('e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e))
//│   where
//│     'a <: nothing -> nothing -> 'a
//│     'b <: nothing -> 'a
//│     'a <: nothing -> nothing -> 'a
//│     'b <: nothing -> 'a))
//│   where
//│     'a <: nothing -> nothing -> 'a
//│     'a <: nothing -> nothing -> 'a))
//│      = [Function: succ]

// * Note: without constrained types we wouldn't get the principal type of succ'

// * Require distrib – see Scratch3
succ_ty = succ
succ_ty = succ'
//│ ChurchInt -> (forall 'a, 'b. ((nothing -> anything & 'b) -> (forall 'a, 'b, 'c. ('c -> (forall 'a, 'b, 'c, 'd, 'e. ('e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e))
//│   where
//│     'a <: nothing -> nothing -> anything
//│     'b <: nothing -> anything
//│     'a <: nothing -> nothing -> anything
//│     'b <: nothing -> anything))
//│   where
//│     'a <: nothing -> nothing -> anything
//│     'a <: nothing -> nothing -> anything))
//│   <:  succ_ty:
//│ ChurchInt -> ChurchInt
//│        = [Function: succ]
//│ (nothing -> nothing -> 'a & 'a) -> (forall 'a, 'b. ((nothing -> 'a & 'b) -> (forall 'a, 'b, 'c. ('c -> (forall 'a, 'b, 'c, 'd, 'e. ('e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e))
//│   where
//│     'a <: nothing -> nothing -> 'a
//│     'b <: nothing -> 'a
//│     'a <: nothing -> nothing -> 'a
//│     'b <: nothing -> 'a))
//│   where
//│     'a <: nothing -> nothing -> 'a
//│     'a <: nothing -> nothing -> 'a))
//│   <:  succ_ty:
//│ ChurchInt -> ChurchInt
//│        = [Function: succ]

// :d
succ'
//│ res: (nothing -> nothing -> 'a & 'a) -> (forall 'a, 'b. ((nothing -> 'a & 'b) -> (forall 'a, 'b, 'c. ('c -> (forall 'a, 'b, 'c, 'd, 'e. ('e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e))
//│   where
//│     'a <: nothing -> nothing -> 'a
//│     'b <: nothing -> 'a
//│     'a <: nothing -> nothing -> 'a
//│     'b <: nothing -> 'a))
//│   where
//│     'a <: nothing -> nothing -> 'a
//│     'a <: nothing -> nothing -> 'a))
//│    = [Function: succ]

// Legit error: (bad bounds)
// :d
:e // due to tapping
succ' {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.137: 	succ' {}
//│ ║         	^^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.137: 	succ' {}
//│ ║         	      ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.52: 	def succ' n = fun f -> fun x -> f (n f x)
//│ ╙──      	                                   ^^^
//│ res: error
//│    = [Function: succ]

:e // due to tapping
succ' {} {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.151: 	succ' {} {}
//│ ║         	^^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.151: 	succ' {} {}
//│ ║         	      ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.52: 	def succ' n = fun f -> fun x -> f (n f x)
//│ ╙──      	                                   ^^^
//│ res: error
//│    = [Function: succ]

:e
succ' {} {} {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.165: 	succ' {} {} {}
//│ ║         	^^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.165: 	succ' {} {} {}
//│ ║         	      ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.52: 	def succ' n = fun f -> fun x -> f (n f x)
//│ ╙──      	                                   ^^^
//│ res: error
//│    = [Function: succ]

fun x -> succ' x x x x x x x x x
//│ res: (nothing -> nothing -> anything & nothing -> anything & nothing -> 'a -> 'a -> 'a -> 'a -> 'a -> 'a -> anything & 'a) -> (forall 'a, 'b, 'c, 'd, 'e. ('e
//│   where
//│     'a <: nothing -> nothing -> anything & 'b -> nothing -> anything & 'b -> 'c -> anything & 'b -> 'c -> 'd & nothing -> anything & 'd -> 'a -> 'a -> 'a -> 'a -> 'a -> 'a -> 'e & 'b & 'c))
//│    = [Function: succ]


// let rec to_church n =
//   if n = 0 then zero
//   else succ (to_church (n-1))
// ;;

def to_church_ty: int -> ChurchInt
//│ to_church_ty: int -> ChurchInt
//│             = <missing implementation>

// * NOTE:
// *  The type inferred for the succ version with *annotated* param seems less powerful
// *  as the following only successfully type checks with `:DistributeForalls`:
// :e // FIXME? // due to gen lam bod?
rec def to_church_1 n =
  if n == 0 then zero
  else succ (to_church_1 (n - 1))
//│ to_church_1: int -> (forall 'a, 'b. ((nothing -> anything & 'b) -> (forall 'a, 'b, 'c, 'd. (('c & 'd) -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('c | 'f
//│   where
//│     'a <: 'b -> 'd -> 'e
//│     'b <: 'e -> 'f))
//│   where
//│     'a <: nothing -> nothing -> anything
//│     'b <: nothing -> anything
//│     'a <: nothing -> nothing -> anything
//│     'b <: nothing -> anything))
//│   where
//│     'a <: nothing -> nothing -> anything))
//│            = [Function: to_church_1]

rec def to_church_1_t n =
  if n == 0 then zero
  else succ_ty (to_church_1_t (n - 1))
//│ to_church_1_t: int -> (anything -> (forall 'a. 'a -> 'a) | ChurchInt)
//│              = [Function: to_church_1_t]

rec def to_church_1_tt n =
  if n == 0 then zero_ty
  else succ_ty (to_church_1_tt (n - 1))
//│ to_church_1_tt: int -> ChurchInt
//│               = <no result>
//│                 zero_ty is not implemented

// def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))

// * Error happens when destroying constrained types, hinting that this is probably related to polym-recur
// :d
// :e // due to gen lam bod?
:re
// rec def to_church_1 n =
//   succ (to_church_1 n)
rec def wat =
  succ wat
//│ wat: (nothing -> anything & 'a) -> (forall 'b, 'a, 'c. ('c -> (forall 'b, 'a, 'c, 'd, 'e. ('e
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e))
//│   where
//│     'b <: nothing -> nothing -> anything
//│     'a <: nothing -> anything
//│     'b <: nothing -> nothing -> anything
//│     'a <: nothing -> anything))
//│   where
//│     'b <: nothing -> nothing -> anything
//│ Runtime error:
//│   ReferenceError: wat is not defined

// works when `succ` is not annotated with the parameter type
:e // FIXME should be caught by cycle checker! // due to tapping
:ng
rec def nani =
  succ' nani
//│ ╔══[ERROR] Cyclic-looking constraint while typing expression
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  α133_1654'  <:  ((α134_1722',) -> α136_1723')    TypeVariable  FunctionType
//│ ╙──  ... looks like:  α133_1654'  <:  ((α134_1667'''',) -> α136_1668'''')
//│ nani: (nothing -> anything & 'a) -> (forall 'b, 'a, 'c. ('c -> (forall 'b, 'a, 'c, 'd, 'e. ('e
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e))
//│   where
//│     'b <: nothing -> nothing -> anything
//│     'a <: nothing -> anything
//│     'b <: nothing -> nothing -> anything
//│     'a <: nothing -> anything))
//│   where
//│     'b <: nothing -> nothing -> anything

// * The one with annotated rec occurrence works...
def to_church_1_repro n =
  succ (to_church_ty n)
//│ to_church_1_repro: int -> (forall 'a, 'b. ((nothing -> anything & 'b) -> (forall 'a, 'b, 'c. ('c -> (forall 'a, 'b, 'c, 'd, 'e. ('e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e))
//│   where
//│     'a <: nothing -> nothing -> anything
//│     'b <: nothing -> anything
//│     'a <: nothing -> nothing -> anything
//│     'b <: nothing -> anything))
//│   where
//│     'a <: nothing -> nothing -> anything
//│     'a <: nothing -> nothing -> anything))
//│                  = <no result>
//│                    to_church_ty is not implemented



rec def to_church_1_st n =
  if n == 0 then zero
  else succ_ty (to_church_1_st (n - 1))
//│ to_church_1_st: int -> (anything -> (forall 'a. 'a -> 'a) | ChurchInt)
//│               = [Function: to_church_1_st]

:e // FIXME should be caught by cycle checker! // due to tapping
rec def to_church_2 n =
  if n == 0 then zero
  else succ' (to_church_2 (n - 1))
//│ ╔══[ERROR] Cyclic-looking constraint while typing expression
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  α133_1842'  <:  ((α134_1925',) -> α136_1926')    TypeVariable  FunctionType
//│ ╙──  ... looks like:  α133_1842'  <:  ((α134_1855'''',) -> α136_1856'''')
//│ to_church_2: int -> (forall 'a, 'b. ((nothing -> anything & 'b) -> (forall 'a, 'b, 'c, 'd. (('c & 'd) -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('f | 'c
//│   where
//│     'a <: 'b -> 'd -> 'e
//│     'b <: 'e -> 'f))
//│   where
//│     'a <: nothing -> nothing -> anything
//│     'b <: nothing -> anything
//│     'a <: nothing -> nothing -> anything
//│     'b <: nothing -> anything))
//│   where
//│     'a <: nothing -> nothing -> anything))
//│            = [Function: to_church_1_st]

// :e // FIXME should be caught by cycle checker!
// Requires :RecursiveTypes
:ng // FIXME codegen: `ReferenceError: to_church_2 is not defined`
// :e // due to tapping
:e // FIXME? refreshing-extr
to_church_ty = to_church_2
//│ int -> (forall 'a, 'b. ((nothing -> anything & 'b) -> (forall 'a, 'b, 'c, 'd. (('c & 'd) -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('f | 'c
//│   where
//│     'a <: 'b -> 'd -> 'e
//│     'b <: 'e -> 'f))
//│   where
//│     'a <: nothing -> nothing -> anything
//│     'b <: nothing -> anything
//│     'a <: nothing -> nothing -> anything
//│     'b <: nothing -> anything))
//│   where
//│     'a <: nothing -> nothing -> anything))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Cyclic-looking constraint while typing expression
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  α133_2026'  <:  ((α134_2132',) -> α136_2133')    TypeVariable  FunctionType
//│ ╙──  ... looks like:  α133_1842'  <:  ((α134_2027'''',) -> α136_2028'''')

// (* Marche *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1) : Int) f x)
// ;;

// :e // FIXME?
rec def to_church_3 n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_3 (n - 1) : ChurchInt) f x)
//│ to_church_3: int -> ('a -> 'b & 'a -> 'a) -> (forall 'c. ('c & 'a) -> ('c | 'b))
//│            = [Function: to_church_3]

// (* Ne Marche Pas *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else (fun f x -> f ((to_church (n-1)) f x) : Int)
// ;;
rec def to_church_4 n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_4 (n - 1)) f x) : ChurchInt
//│ to_church_4: int -> (nothing -> anything) -> (forall 'a. 'a -> (ChurchInt | 'a))
//│            = [Function: to_church_4]


// (* La r�cursion est monomorphe. *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1)) f x)
// ;;

rec def to_church_5 n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_5 (n - 1)) f x)
//│ to_church_5: int -> ('a -> ('a & 'b)) -> (forall 'c. ('c & 'a) -> ('c | 'b))
//│            = [Function: to_church_5]


// :e // FIXME? // due to gen lam bod?
to_church_ty = to_church_1
//│ int -> (forall 'a, 'b. ((nothing -> anything & 'b) -> (forall 'a, 'b, 'c, 'd. (('c & 'd) -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('c | 'f
//│   where
//│     'a <: 'b -> 'd -> 'e
//│     'b <: 'e -> 'f))
//│   where
//│     'a <: nothing -> nothing -> anything
//│     'b <: nothing -> anything
//│     'a <: nothing -> nothing -> anything
//│     'b <: nothing -> anything))
//│   where
//│     'a <: nothing -> nothing -> anything))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_1]

to_church_ty = to_church_1_t
//│ int -> (anything -> (forall 'a. 'a -> 'a) | ChurchInt)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_1_t]

to_church_ty = to_church_1_tt
//│ int -> ChurchInt
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = <no result>
//│               to_church_1_tt and zero_ty are not implemented

to_church_ty = to_church_1_st
//│ int -> (anything -> (forall 'a. 'a -> 'a) | ChurchInt)
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_1_st]

// :e // FIXME should be caught by cycle checker!
:ng
:e // due to tapping
to_church_ty = to_church_2
//│ int -> (forall 'a, 'b. ((nothing -> anything & 'b) -> (forall 'a, 'b, 'c, 'd. (('c & 'd) -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('f | 'c
//│   where
//│     'a <: 'b -> 'd -> 'e
//│     'b <: 'e -> 'f))
//│   where
//│     'a <: nothing -> nothing -> anything
//│     'b <: nothing -> anything
//│     'a <: nothing -> nothing -> anything
//│     'b <: nothing -> anything))
//│   where
//│     'a <: nothing -> nothing -> anything))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Cyclic-looking constraint while typing expression
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  α133_2559'  <:  ((α134_2665',) -> α136_2666')    TypeVariable  FunctionType
//│ ╙──  ... looks like:  α133_1842'  <:  ((α134_2560'''',) -> α136_2561'''')

// :e // FIXME?
to_church_ty = to_church_3
//│ int -> ('a -> 'b & 'a -> 'a) -> (forall 'c. ('c & 'a) -> ('c | 'b))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_3]

:e
to_church_ty = to_church_4
//│ int -> (nothing -> anything) -> (forall 'a. 'a -> (ChurchInt | 'a))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.447: 	to_church_ty = to_church_4
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `(?a -> ?a) -> ?a -> ?a` is not an instance of type `'a`
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║        	                            ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──      	                        ^^
//│             = [Function: to_church_4]

// :e
to_church_ty = to_church_5
//│ int -> ('a -> ('a & 'b)) -> (forall 'c. ('c & 'a) -> ('c | 'b))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_5]




// (* Echoue avec la value restriction. *)
// let rec (to_church:int -> Int) n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1)) f x)
// ;;


// // * It seems this one may need polymorphic recursion...?
// // *  ...but it's just a version with succ inlined!?
// :e
rec def to_church_ty n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_ty (n - 1)) f x)
//│ int -> ('a -> ('a & 'b)) -> (forall 'c. ('c & 'a) -> ('c | 'b))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_ty6]

// * ... since we can fix it by using the annotation for rec calls:
def to_church_ty n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church_ty (n - 1)) f x)
//│ int -> (forall 'b, 'a, 'c. (nothing -> 'b & 'a -> 'a & 'c) -> (forall 'b, 'c, 'a0, 'a1, 'd. (('d & 'b) -> (forall 'b, 'c, 'd, 'a2, 'e. ('d | 'e
//│   where
//│     'c <: 'a2 -> 'a2 & 'a2 -> 'e
//│     'b <: 'a2))
//│   where
//│     'c <: 'a0 -> 'a0 & nothing -> 'b
//│     'c <: 'a1 -> 'a1 & nothing -> 'b)))
//│   <:  to_church_ty:
//│ int -> ChurchInt
//│             = [Function: to_church_ty7]


// (* �a coince. *)
// let tc n = (to_church n : Int);;

// :e // FIXME? // due to gen lam bod?
def tc n = to_church_1 n : ChurchInt
//│ tc: (int & 'a) -> (forall 'a. (ChurchInt
//│   where
//│     'a <: int))
//│   = [Function: tc]

def tc n = to_church_ty n : ChurchInt
//│ tc: int -> ChurchInt
//│   = [Function: tc1]

:e // FIXME should be caught by cycle checker!
def tc n = to_church_2 n : ChurchInt // Requires :RecursiveTypes
//│ ╔══[ERROR] Cyclic-looking constraint while typing expression
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  α133_3333''''  <:  ((α134_3334'''',) -> α136_3335'''')    TypeVariable  FunctionType
//│ ╙──  ... looks like:  α133_3181''''  <:  ((α134_3182'''',) -> α136_3183'''')
//│ tc: anything -> ChurchInt
//│   = [Function: tc2]

// FIXME stupid type
def tc n = to_church_3 n
//│ tc: (int & 'b) -> (forall 'b, 'a, 'c. (('a -> 'c & 'a -> 'a) -> (forall 'd. ('a & 'd) -> ('d | 'c))
//│   where
//│     'b <: int
//│     'b <: int))
//│   = [Function: tc3]
// FIXME
tc 1 id
//│ res: 'a -> 'a
//│    = [Function (anonymous)]
// FIXME
tc: int -> ChurchInt
//│ res: int -> ChurchInt
//│    = [Function: tc3]

// FIXME
def tc n = to_church_3 n : ChurchInt
//│ tc: (int & 'a) -> (forall 'a. (ChurchInt
//│   where
//│     'a <: int))
//│   = [Function: tc4]

// (* Duplicate with to_church1 ("Marche") above *)
// (* Avec la value restriction : �a passe. *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1) : Int) f x)


// (*** Les annotations de type ne commutent pas. ***)
// type sid = ['a] 'a -> 'a
// type z = ['a,'b] ('a -> 'b) -> ('a -> 'b)
type Z = forall 'a 'b. ('a -> 'b) -> ('a -> 'b)
//│ Defined type alias Z

// let f x = (x:sid), ((x:sid):z)

// :e // due to tapping
def f x = ((x : Sid), ((x : Sid) : Z))
//│ f: Sid -> (Sid, Z,)
//│  = [Function: f]

// (* Ne type pas ... c'est une instance polymorphe. Interdit. *)
// untype fun x -> (x:sid), (x:z)
fun x -> ((x : Sid), (x : Z))
//│ res: (Sid & Z) -> (Sid, Z,)
//│    = [Function: res]

