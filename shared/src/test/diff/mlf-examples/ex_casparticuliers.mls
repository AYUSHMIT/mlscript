:GeneralizeCurriedFunctions

// (*** L'annotation est n�cessaire sur z, mais z n'est utilis� qu'une seule fois. ***)
// type sid = ['a] 'a -> 'a
type Sid = forall 'a. 'a -> 'a
//│ Defined type alias Sid

// let t (z:sid) = ( (fun a -> z) : ['a,'b] 'b -> 'a -> 'a )
def t (z: Sid) = (fun a -> z) : forall 'a 'b. 'b -> 'a -> 'a
//│ t: Sid -> (forall 'a. anything -> 'a -> 'a)
//│  = [Function: t]

// (* Une seule instance, mais polymorphe. *)
// let t z = ( (fun a -> z) : ['a,'b] 'b -> 'a -> 'a );;
def t z = (fun a -> z) : forall 'a 'b. 'b -> 'a -> 'a
//│ t: (‘a -> ‘a) -> (forall 'a. anything -> 'a -> 'a)
//│  = [Function: t1]

def t z = fun a -> z
//│ t: 'a -> anything -> 'a
//│  = [Function: t2]


// (*** Ne type pas avec les value-restriction. Emb�tant. ***)

// type Int = ['a] ('a -> 'a) -> ('a -> 'a)
// ;;
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt

// let zero f x = x
// ;;
def zero f x = x
//│ zero: anything -> (forall 'a. 'a -> 'a)
//│     = [Function: zero]

// let succ (n:Int) = fun f x -> f (n f x)
// ;;
def succ (n: ChurchInt) = fun f -> fun x -> f (n f x)
def succ' n = fun f -> fun x -> f (n f x)
//│ succ: ChurchInt -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd. ('b -> 'd
//│   where
//│     'e <: 'a -> 'b -> 'c
//│     'a <: 'c -> 'd)))
//│     = [Function: succ]
//│ succ': 'a -> (forall 'b. 'b -> (forall 'b, 'c, 'd, 'e. ('e -> 'd
//│   where
//│     'b <: 'c -> 'd
//│     'a <: 'b -> 'e -> 'c)))
//│      = [Function: succ]

// let rec to_church n =
//   if n = 0 then zero
//   else succ (to_church (n-1))
// ;;
// FIXME: only works with explicit declaration for `succ`
//        might be an instance when we need constrained types to get the principal type
// def succ: ChurchInt -> ChurchInt
rec def to_church n =
  if n == 0 then zero
  else succ (to_church (n - 1))
rec def to_church' n =
  if n == 0 then zero
  else succ' (to_church' (n - 1))
//│ to_church: int -> (forall 'a. (‘a -> ‘a & 'a) -> (forall 'a, 'b, 'c, 'd, 'e. (('e & 'b) -> ('e | 'd)
//│   where
//│     'f <: 'a -> 'b -> 'c
//│     'a <: 'c -> 'd)))
//│          = [Function: to_church]
//│ to_church': int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e. (('e & 'd) -> ('e | 'c)
//│   where
//│     'a <: 'b -> 'c
//│     'f <: 'a -> 'd -> 'b)))
//│           = [Function: to_church]

// (* Marche *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1) : Int) f x)
// ;;
rec def to_church n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church (n - 1) : ChurchInt) f x)
//│ to_church: int -> (forall 'b. (('a | ‘a) -> ‘a & ('a | ‘a) -> 'a & 'b) -> (forall 'a0, 'c. (('c & 'a0) -> 'c
//│   where
//│     'b <: 'a0 -> 'a0 & 'a0 -> 'c)))
//│          = [Function: to_church1]

// (* Ne Marche Pas *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else (fun f x -> f ((to_church (n-1)) f x) : Int)
// ;;
rec def to_church n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church (n - 1)) f x) : ChurchInt
//│ to_church: int -> (forall 'a. 'a -> (forall 'a, 'b, 'c. ('b -> (ChurchInt | 'b)
//│   where
//│     'd <: 'a -> 'b -> 'c
//│     'a <: 'c -> ChurchInt)))
//│          = [Function: to_church2]


// (* La r�cursion est monomorphe. *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1)) f x)
// ;;
rec def to_church n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church (n - 1)) f x)
//│ to_church: int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd. (('c & 'd) -> 'c
//│   where
//│     'a <: 'b -> 'c
//│     'e <: 'a -> 'd -> 'b)))
//│          = [Function: to_church3]

// (* Echoue avec la value restriction. *)
// let rec (to_church:int -> Int) n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1)) f x)
// ;;
// FIXME: principal type for constrained types
def to_church: int -> ChurchInt
rec def to_church n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church (n - 1)) f x)
//│ to_church: int -> ChurchInt
//│          = <missing implementation>
//│ int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd. (('c & 'd) -> 'c
//│   where
//│     'a <: 'b -> 'c
//│     'e <: 'a -> 'd -> 'b)))
//│   <:  to_church:
//│ int -> ChurchInt
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r, ?s, ?t, ?to_church, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1, ?i1, ?j1, ?k1, ?l1, ?m1, ?n1, ?o1, ?p1, ?q1, ?r1, ?s1, ?t1, ?u1, ?v1, ?w1, ?x1, ?y1, ?z1, ?a2, ?b2, ?c2, ?d2, ?e2, ?f2, ?g2, ?h2, ?i2, ?j2, ?k2, ?l2, ?m2, ?n2, ?o2, ?p2, ?q2, ?r2, ?s2, ?t2, ?u2, ?v2, ?w2, ?x2, ?y2, ?z2, ?a3, ?b3, ?c3, ?d3, ?e3, ?f3, ?g3, ?h3, ?i3, ?j3, ?k3, ?l3, ?m3, ?n3, ?o3, ?p3, ?q3, ?r3, ?s3, ?t3, ?u3, ?v3, ?w3, ?x3, ?y3, ?z3, ?a4, ?b4, ?c4, ?d4, ?e4, ?f4, ?g4, ?h4, ?i4, ?j4, ?k4, ?l4, ?m4, ?n4, ?o4, ?p4, ?q4, ?r4, ?s4, ?t4, ?u4, ?v4, ?w4, ?x4, ?y4, ?z4, ?a5, ?b5, ?c5, ?d5, ?e5, ?f5, ?g5, ?h5, ?i5, ?j5, ?k5, ?l5, ?m5, ?n5, ?o5, ?p5, ?q5, ?r5, ?s5, ?t5, ?u5, ?v5, ?w5, ?x5, ?y5, ?z5, ?a6, ?b6, ?c6, ?d6, ?e6, ?f6. ?to_church <: int -> ChurchInt` exceeded recursion depth limit (400)
//│ ║  l.125: 	rec def to_church n =
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.126: 	  if n == 0 then fun f -> fun x -> x
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.127: 	  else fun f -> fun x -> f ((to_church (n - 1)) f x)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  α405'  <!<  α708'
//│ ╟── while constraining:  α424'  <!<  α708'
//│ ╟── while constraining:  α443'  <!<  α708'
//│ ╟── while constraining:  α462'  <!<  α708'
//│ ╟── while constraining:  α481'  <!<  α708'
//│ ╟── while constraining:  α500'  <!<  α708'
//│ ╟── while constraining:  α519'  <!<  α708'
//│ ╟── while constraining:  α538'  <!<  α708'
//│ ╟── while constraining:  α557'  <!<  α708'
//│ ╟── while constraining:  α576'  <!<  α708'
//│ ╟── while constraining:  α595'  <!<  α708'
//│ ╟── while constraining:  α614'  <!<  α708'
//│ ╟── while constraining:  α633'  <!<  α708'
//│ ╟── while constraining:  α652'  <!<  α708'
//│ ╟── while constraining:  α671'  <!<  α708'
//│ ╟── while constraining:  α690'  <!<  α708'
//│ ╟── while constraining:  α709'  <!<  α708'
//│ ╟── while constraining:  α709'  <!<  α720''
//│ ╟── while constraining:  (α709',)  <!<  (α720'',)
//│ ╟── while constraining:  (α720'' -> ‹∀ 3. (α341''' <: ((α721'''',) -> α722''''), α347' <: ((α720'',) -> α723'''') => (α724'''' -> α722''''))›)  <!<  ((α709',) -> α717')
//│ ╟── while constraining:  ‹∀ 2. (α341''' -> ‹∀ 3. (α341''' <: ((α349'''',) -> α350''''), α347' <: ((α341''',) -> α348'''') => (α342'''' -> α350''''))›)›  <!<  ((α709',) -> α717')
//│ ╟── while constraining:  α347'  <!<  ((α709',) -> α717')
//│ ╟── while constraining:  α347'  <!<  ((α709',) -> α713'')
//│ ╟── while constraining:  (α708' <: ((α711'',) -> α712''), α347' <: ((α709',) -> α713'') => (α714'' -> α712''))  <!<  ((α699',) -> α700')
//│ ╟── while constraining:  ‹∀ 3. (α708' <: ((α702'''',) -> α703''''), α347' <: ((α709',) -> α710'''') => (α705'''' -> α703''''))›  <!<  ((α699',) -> α700')
//│ ╟── while constraining:  ‹∀ 3. (α708' <: ((α702'''',) -> α703''''), α347' <: ((α709',) -> α710'''') => (α705'''' -> α703''''))›  <!<  α698'
//│ ╟── while constraining:  ‹∀ 3. (α341''' <: ((α702'''',) -> α703''''), α347' <: ((α701'',) -> α704'''') => (α705'''' -> α703''''))›  <!<  α698'
//│ ╟── while constraining:  (α701'' -> ‹∀ 3. (α341''' <: ((α702'''',) -> α703''''), α347' <: ((α701'',) -> α704'''') => (α705'''' -> α703''''))›)  <!<  ((α690',) -> α698')
//│ ╟── while constraining:  ‹∀ 2. (α341''' -> ‹∀ 3. (α341''' <: ((α349'''',) -> α350''''), α347' <: ((α341''',) -> α348'''') => (α342'''' -> α350''''))›)›  <!<  ((α690',) -> α698')
//│ ╟── while constraining:  α347'  <!<  ((α690',) -> α698')
//│ ╟── while constraining:  α347'  <!<  ((α690',) -> α694'')
//│ ╟── while constraining:  (α689' <: ((α692'',) -> α693''), α347' <: ((α690',) -> α694'') => (α695'' -> α693''))  <!<  ((α680',) -> α681')
//│ ╟── while constraining:  ‹∀ 3. (α689' <: ((α683'''',) -> α684''''), α347' <: ((α690',) -> α691'''') => (α686'''' -> α684''''))›  <!<  ((α680',) -> α681')
//│ ╟── while constraining:  ‹∀ 3. (α689' <: ((α683'''',) -> α684''''), α347' <: ((α690',) -> α691'''') => (α686'''' -> α684''''))›  <!<  α679'
//│ ╟── while constraining:  ‹∀ 3. (α341''' <: ((α683'''',) -> α684''''), α347' <: ((α682'',) -> α685'''') => (α686'''' -> α684''''))›  <!<  α679'
//│ ╟── while constraining:  (α682'' -> ‹∀ 3. (α341''' <: ((α683'''',) -> α684''''), α347' <: ((α682'',) -> α685'''') => (α686'''' -> α684''''))›)  <!<  ((α671',) -> α679')
//│ ╟── while constraining:  ‹∀ 2. (α341''' -> ‹∀ 3. (α341''' <: ((α349'''',) -> α350''''), α347' <: ((α341''',) -> α348'''') => (α342'''' -> α350''''))›)›  <!<  ((α671',) -> α679')
//│ ╟── while constraining:  α347'  <!<  ((α671',) -> α679')
//│ ╟── while constraining:  α347'  <!<  ((α671',) -> α675'')
//│ ╟── while constraining:  (α670' <: ((α673'',) -> α674''), α347' <: ((α671',) -> α675'') => (α676'' -> α674''))  <!<  ((α661',) -> α662')
//│ ╟── while constraining:  ‹∀ 3. (α670' <: ((α664'''',) -> α665''''), α347' <: ((α671',) -> α672'''') => (α667'''' -> α665''''))›  <!<  ((α661',) -> α662')
//│ ╟── while constraining:  ‹∀ 3. (α670' <: ((α664'''',) -> α665''''), α347' <: ((α671',) -> α672'''') => (α667'''' -> α665''''))›  <!<  α660'
//│ ╟── while constraining:  ‹∀ 3. (α341''' <: ((α664'''',) -> α665''''), α347' <: ((α663'',) -> α666'''') => (α667'''' -> α665''''))›  <!<  α660'
//│ ╟── while constraining:  (α663'' -> ‹∀ 3. (α341''' <: ((α664'''',) -> α665''''), α347' <: ((α663'',) -> α666'''') => (α667'''' -> α665''''))›)  <!<  ((α652',) -> α660')
//│ ╟── while constraining:  ‹∀ 2. (α341''' -> ‹∀ 3. (α341''' <: ((α349'''',) -> α350''''), α347' <: ((α341''',) -> α348'''') => (α342'''' -> α350''''))›)›  <!<  ((α652',) -> α660')
//│ ╟── while constraining:  α347'  <!<  ((α652',) -> α660')
//│ ╟── while constraining:  α347'  <!<  ((α652',) -> α656'')
//│ ╟── while constraining:  (α651' <: ((α654'',) -> α655''), α347' <: ((α652',) -> α656'') => (α657'' -> α655''))  <!<  ((α642',) -> α643')
//│ ╟── while constraining:  ‹∀ 3. (α651' <: ((α645'''',) -> α646''''), α347' <: ((α652',) -> α653'''') => (α648'''' -> α646''''))›  <!<  ((α642',) -> α643')
//│ ╟── while constraining:  ‹∀ 3. (α651' <: ((α645'''',) -> α646''''), α347' <: ((α652',) -> α653'''') => (α648'''' -> α646''''))›  <!<  α641'
//│ ╟── while constraining:  ‹∀ 3. (α341''' <: ((α645'''',) -> α646''''), α347' <: ((α644'',) -> α647'''') => (α648'''' -> α646''''))›  <!<  α641'
//│ ╟── while constraining:  (α644'' -> ‹∀ 3. (α341''' <: ((α645'''',) -> α646''''), α347' <: ((α644'',) -> α647'''') => (α648'''' -> α646''''))›)  <!<  ((α633',) -> α641')
//│ ╟── while constraining:  ‹∀ 2. (α341''' -> ‹∀ 3. (α341''' <: ((α349'''',) -> α350''''), α347' <: ((α341''',) -> α348'''') => (α342'''' -> α350''''))›)›  <!<  ((α633',) -> α641')
//│ ╟── while constraining:  α347'  <!<  ((α633',) -> α641')
//│ ╟── while constraining:  α347'  <!<  ((α633',) -> α637'')
//│ ╟── while constraining:  (α632' <: ((α635'',) -> α636''), α347' <: ((α633',) -> α637'') => (α638'' -> α636''))  <!<  ((α623',) -> α624')
//│ ╟── while constraining:  ‹∀ 3. (α632' <: ((α626'''',) -> α627''''), α347' <: ((α633',) -> α634'''') => (α629'''' -> α627''''))›  <!<  ((α623',) -> α624')
//│ ╟── while constraining:  ‹∀ 3. (α632' <: ((α626'''',) -> α627''''), α347' <: ((α633',) -> α634'''') => (α629'''' -> α627''''))›  <!<  α622'
//│ ╟── while constraining:  ‹∀ 3. (α341''' <: ((α626'''',) -> α627''''), α347' <: ((α625'',) -> α628'''') => (α629'''' -> α627''''))›  <!<  α622'
//│ ╟── while constraining:  (α625'' -> ‹∀ 3. (α341''' <: ((α626'''',) -> α627''''), α347' <: ((α625'',) -> α628'''') => (α629'''' -> α627''''))›)  <!<  ((α614',) -> α622')
//│ ╟── while constraining:  ‹∀ 2. (α341''' -> ‹∀ 3. (α341''' <: ((α349'''',) -> α350''''), α347' <: ((α341''',) -> α348'''') => (α342'''' -> α350''''))›)›  <!<  ((α614',) -> α622')
//│ ╟── while constraining:  α347'  <!<  ((α614',) -> α622')
//│ ╟── while constraining:  α347'  <!<  ((α614',) -> α618'')
//│ ╟── while constraining:  (α613' <: ((α616'',) -> α617''), α347' <: ((α614',) -> α618'') => (α619'' -> α617''))  <!<  ((α604',) -> α605')
//│ ╟── while constraining:  ‹∀ 3. (α613' <: ((α607'''',) -> α608''''), α347' <: ((α614',) -> α615'''') => (α610'''' -> α608''''))›  <!<  ((α604',) -> α605')
//│ ╟── while constraining:  ‹∀ 3. (α613' <: ((α607'''',) -> α608''''), α347' <: ((α614',) -> α615'''') => (α610'''' -> α608''''))›  <!<  α603'
//│ ╟── while constraining:  ‹∀ 3. (α341''' <: ((α607'''',) -> α608''''), α347' <: ((α606'',) -> α609'''') => (α610'''' -> α608''''))›  <!<  α603'
//│ ╟── while constraining:  (α606'' -> ‹∀ 3. (α341''' <: ((α607'''',) -> α608''''), α347' <: ((α606'',) -> α609'''') => (α610'''' -> α608''''))›)  <!<  ((α595',) -> α603')
//│ ╟── while constraining:  ‹∀ 2. (α341''' -> ‹∀ 3. (α341''' <: ((α349'''',) -> α350''''), α347' <: ((α341''',) -> α348'''') => (α342'''' -> α350''''))›)›  <!<  ((α595',) -> α603')
//│ ╟── while constraining:  α347'  <!<  ((α595',) -> α603')
//│ ╟── while constraining:  α347'  <!<  ((α595',) -> α599'')
//│ ╟── while constraining:  (α594' <: ((α597'',) -> α598''), α347' <: ((α595',) -> α599'') => (α600'' -> α598''))  <!<  ((α585',) -> α586')
//│ ╟── while constraining:  ‹∀ 3. (α594' <: ((α588'''',) -> α589''''), α347' <: ((α595',) -> α596'''') => (α591'''' -> α589''''))›  <!<  ((α585',) -> α586')
//│ ╟── while constraining:  ‹∀ 3. (α594' <: ((α588'''',) -> α589''''), α347' <: ((α595',) -> α596'''') => (α591'''' -> α589''''))›  <!<  α584'
//│ ╟── while constraining:  ‹∀ 3. (α341''' <: ((α588'''',) -> α589''''), α347' <: ((α587'',) -> α590'''') => (α591'''' -> α589''''))›  <!<  α584'
//│ ╟── while constraining:  (α587'' -> ‹∀ 3. (α341''' <: ((α588'''',) -> α589''''), α347' <: ((α587'',) -> α590'''') => (α591'''' -> α589''''))›)  <!<  ((α576',) -> α584')
//│ ╟── while constraining:  ‹∀ 2. (α341''' -> ‹∀ 3. (α341''' <: ((α349'''',) -> α350''''), α347' <: ((α341''',) -> α348'''') => (α342'''' -> α350''''))›)›  <!<  ((α576',) -> α584')
//│ ╟── while constraining:  α347'  <!<  ((α576',) -> α584')
//│ ╟── while constraining:  α347'  <!<  ((α576',) -> α580'')
//│ ╟── while constraining:  (α575' <: ((α578'',) -> α579''), α347' <: ((α576',) -> α580'') => (α581'' -> α579''))  <!<  ((α566',) -> α567')
//│ ╟── while constraining:  ‹∀ 3. (α575' <: ((α569'''',) -> α570''''), α347' <: ((α576',) -> α577'''') => (α572'''' -> α570''''))›  <!<  ((α566',) -> α567')
//│ ╟── while constraining:  ‹∀ 3. (α575' <: ((α569'''',) -> α570''''), α347' <: ((α576',) -> α577'''') => (α572'''' -> α570''''))›  <!<  α565'
//│ ╟── while constraining:  ‹∀ 3. (α341''' <: ((α569'''',) -> α570''''), α347' <: ((α568'',) -> α571'''') => (α572'''' -> α570''''))›  <!<  α565'
//│ ╟── while constraining:  (α568'' -> ‹∀ 3. (α341''' <: ((α569'''',) -> α570''''), α347' <: ((α568'',) -> α571'''') => (α572'''' -> α570''''))›)  <!<  ((α557',) -> α565')
//│ ╟── while constraining:  ‹∀ 2. (α341''' -> ‹∀ 3. (α341''' <: ((α349'''',) -> α350''''), α347' <: ((α341''',) -> α348'''') => (α342'''' -> α350''''))›)›  <!<  ((α557',) -> α565')
//│ ╟── while constraining:  α347'  <!<  ((α557',) -> α565')
//│ ╟── while constraining:  α347'  <!<  ((α557',) -> α561'')
//│ ╟── while constraining:  (α556' <: ((α559'',) -> α560''), α347' <: ((α557',) -> α561'') => (α562'' -> α560''))  <!<  ((α547',) -> α548')
//│ ╟── while constraining:  ‹∀ 3. (α556' <: ((α550'''',) -> α551''''), α347' <: ((α557',) -> α558'''') => (α553'''' -> α551''''))›  <!<  ((α547',) -> α548')
//│ ╟── while constraining:  ‹∀ 3. (α556' <: ((α550'''',) -> α551''''), α347' <: ((α557',) -> α558'''') => (α553'''' -> α551''''))›  <!<  α546'
//│ ╟── while constraining:  ‹∀ 3. (α341''' <: ((α550'''',) -> α551''''), α347' <: ((α549'',) -> α552'''') => (α553'''' -> α551''''))›  <!<  α546'
//│ ╟── while constraining:  (α549'' -> ‹∀ 3. (α341''' <: ((α550'''',) -> α551''''), α347' <: ((α549'',) -> α552'''') => (α553'''' -> α551''''))›)  <!<  ((α538',) -> α546')
//│ ╟── while constraining:  ‹∀ 2. (α341''' -> ‹∀ 3. (α341''' <: ((α349'''',) -> α350''''), α347' <: ((α341''',) -> α348'''') => (α342'''' -> α350''''))›)›  <!<  ((α538',) -> α546')
//│ ╟── while constraining:  α347'  <!<  ((α538',) -> α546')
//│ ╟── while constraining:  α347'  <!<  ((α538',) -> α542'')
//│ ╟── while constraining:  (α537' <: ((α540'',) -> α541''), α347' <: ((α538',) -> α542'') => (α543'' -> α541''))  <!<  ((α528',) -> α529')
//│ ╟── while constraining:  ‹∀ 3. (α537' <: ((α531'''',) -> α532''''), α347' <: ((α538',) -> α539'''') => (α534'''' -> α532''''))›  <!<  ((α528',) -> α529')
//│ ╟── while constraining:  ‹∀ 3. (α537' <: ((α531'''',) -> α532''''), α347' <: ((α538',) -> α539'''') => (α534'''' -> α532''''))›  <!<  α527'
//│ ╟── while constraining:  ‹∀ 3. (α341''' <: ((α531'''',) -> α532''''), α347' <: ((α530'',) -> α533'''') => (α534'''' -> α532''''))›  <!<  α527'
//│ ╟── while constraining:  (α530'' -> ‹∀ 3. (α341''' <: ((α531'''',) -> α532''''), α347' <: ((α530'',) -> α533'''') => (α534'''' -> α532''''))›)  <!<  ((α519',) -> α527')
//│ ╟── while constraining:  ‹∀ 2. (α341''' -> ‹∀ 3. (α341''' <: ((α349'''',) -> α350''''), α347' <: ((α341''',) -> α348'''') => (α342'''' -> α350''''))›)›  <!<  ((α519',) -> α527')
//│ ╟── while constraining:  α347'  <!<  ((α519',) -> α527')
//│ ╟── while constraining:  α347'  <!<  ((α519',) -> α523'')
//│ ╟── while constraining:  (α518' <: ((α521'',) -> α522''), α347' <: ((α519',) -> α523'') => (α524'' -> α522''))  <!<  ((α509',) -> α510')
//│ ╟── while constraining:  ‹∀ 3. (α518' <: ((α512'''',) -> α513''''), α347' <: ((α519',) -> α520'''') => (α515'''' -> α513''''))›  <!<  ((α509',) -> α510')
//│ ╟── while constraining:  ‹∀ 3. (α518' <: ((α512'''',) -> α513''''), α347' <: ((α519',) -> α520'''') => (α515'''' -> α513''''))›  <!<  α508'
//│ ╟── while constraining:  ‹∀ 3. (α341''' <: ((α512'''',) -> α513''''), α347' <: ((α511'',) -> α514'''') => (α515'''' -> α513''''))›  <!<  α508'
//│ ╟── while constraining:  (α511'' -> ‹∀ 3. (α341''' <: ((α512'''',) -> α513''''), α347' <: ((α511'',) -> α514'''') => (α515'''' -> α513''''))›)  <!<  ((α500',) -> α508')
//│ ╟── while constraining:  ‹∀ 2. (α341''' -> ‹∀ 3. (α341''' <: ((α349'''',) -> α350''''), α347' <: ((α341''',) -> α348'''') => (α342'''' -> α350''''))›)›  <!<  ((α500',) -> α508')
//│ ╟── while constraining:  α347'  <!<  ((α500',) -> α508')
//│ ╟── while constraining:  α347'  <!<  ((α500',) -> α504'')
//│ ╟── while constraining:  (α499' <: ((α502'',) -> α503''), α347' <: ((α500',) -> α504'') => (α505'' -> α503''))  <!<  ((α490',) -> α491')
//│ ╟── while constraining:  ‹∀ 3. (α499' <: ((α493'''',) -> α494''''), α347' <: ((α500',) -> α501'''') => (α496'''' -> α494''''))›  <!<  ((α490',) -> α491')
//│ ╟── while constraining:  ‹∀ 3. (α499' <: ((α493'''',) -> α494''''), α347' <: ((α500',) -> α501'''') => (α496'''' -> α494''''))›  <!<  α489'
//│ ╟── while constraining:  ‹∀ 3. (α341''' <: ((α493'''',) -> α494''''), α347' <: ((α492'',) -> α495'''') => (α496'''' -> α494''''))›  <!<  α489'
//│ ╟── while constraining:  (α492'' -> ‹∀ 3. (α341''' <: ((α493'''',) -> α494''''), α347' <: ((α492'',) -> α495'''') => (α496'''' -> α494''''))›)  <!<  ((α481',) -> α489')
//│ ╟── while constraining:  ‹∀ 2. (α341''' -> ‹∀ 3. (α341''' <: ((α349'''',) -> α350''''), α347' <: ((α341''',) -> α348'''') => (α342'''' -> α350''''))›)›  <!<  ((α481',) -> α489')
//│ ╟── while constraining:  α347'  <!<  ((α481',) -> α489')
//│ ╟── while constraining:  α347'  <!<  ((α481',) -> α485'')
//│ ╟── while constraining:  (α480' <: ((α483'',) -> α484''), α347' <: ((α481',) -> α485'') => (α486'' -> α484''))  <!<  ((α471',) -> α472')
//│ ╟── while constraining:  ‹∀ 3. (α480' <: ((α474'''',) -> α475''''), α347' <: ((α481',) -> α482'''') => (α477'''' -> α475''''))›  <!<  ((α471',) -> α472')
//│ ╟── while constraining:  ‹∀ 3. (α480' <: ((α474'''',) -> α475''''), α347' <: ((α481',) -> α482'''') => (α477'''' -> α475''''))›  <!<  α470'
//│ ╟── while constraining:  ‹∀ 3. (α341''' <: ((α474'''',) -> α475''''), α347' <: ((α473'',) -> α476'''') => (α477'''' -> α475''''))›  <!<  α470'
//│ ╟── while constraining:  (α473'' -> ‹∀ 3. (α341''' <: ((α474'''',) -> α475''''), α347' <: ((α473'',) -> α476'''') => (α477'''' -> α475''''))›)  <!<  ((α462',) -> α470')
//│ ╟── while constraining:  ‹∀ 2. (α341''' -> ‹∀ 3. (α341''' <: ((α349'''',) -> α350''''), α347' <: ((α341''',) -> α348'''') => (α342'''' -> α350''''))›)›  <!<  ((α462',) -> α470')
//│ ╟── while constraining:  α347'  <!<  ((α462',) -> α470')
//│ ╟── while constraining:  α347'  <!<  ((α462',) -> α466'')
//│ ╟── while constraining:  (α461' <: ((α464'',) -> α465''), α347' <: ((α462',) -> α466'') => (α467'' -> α465''))  <!<  ((α452',) -> α453')
//│ ╟── while constraining:  ‹∀ 3. (α461' <: ((α455'''',) -> α456''''), α347' <: ((α462',) -> α463'''') => (α458'''' -> α456''''))›  <!<  ((α452',) -> α453')
//│ ╟── while constraining:  ‹∀ 3. (α461' <: ((α455'''',) -> α456''''), α347' <: ((α462',) -> α463'''') => (α458'''' -> α456''''))›  <!<  α451'
//│ ╟── while constraining:  ‹∀ 3. (α341''' <: ((α455'''',) -> α456''''), α347' <: ((α454'',) -> α457'''') => (α458'''' -> α456''''))›  <!<  α451'
//│ ╟── while constraining:  (α454'' -> ‹∀ 3. (α341''' <: ((α455'''',) -> α456''''), α347' <: ((α454'',) -> α457'''') => (α458'''' -> α456''''))›)  <!<  ((α443',) -> α451')
//│ ╟── while constraining:  ‹∀ 2. (α341''' -> ‹∀ 3. (α341''' <: ((α349'''',) -> α350''''), α347' <: ((α341''',) -> α348'''') => (α342'''' -> α350''''))›)›  <!<  ((α443',) -> α451')
//│ ╟── while constraining:  α347'  <!<  ((α443',) -> α451')
//│ ╟── while constraining:  α347'  <!<  ((α443',) -> α447'')
//│ ╟── while constraining:  (α442' <: ((α445'',) -> α446''), α347' <: ((α443',) -> α447'') => (α448'' -> α446''))  <!<  ((α433',) -> α434')
//│ ╟── while constraining:  ‹∀ 3. (α442' <: ((α436'''',) -> α437''''), α347' <: ((α443',) -> α444'''') => (α439'''' -> α437''''))›  <!<  ((α433',) -> α434')
//│ ╟── while constraining:  ‹∀ 3. (α442' <: ((α436'''',) -> α437''''), α347' <: ((α443',) -> α444'''') => (α439'''' -> α437''''))›  <!<  α432'
//│ ╟── while constraining:  ‹∀ 3. (α341''' <: ((α436'''',) -> α437''''), α347' <: ((α435'',) -> α438'''') => (α439'''' -> α437''''))›  <!<  α432'
//│ ╟── while constraining:  (α435'' -> ‹∀ 3. (α341''' <: ((α436'''',) -> α437''''), α347' <: ((α435'',) -> α438'''') => (α439'''' -> α437''''))›)  <!<  ((α424',) -> α432')
//│ ╟── while constraining:  ‹∀ 2. (α341''' -> ‹∀ 3. (α341''' <: ((α349'''',) -> α350''''), α347' <: ((α341''',) -> α348'''') => (α342'''' -> α350''''))›)›  <!<  ((α424',) -> α432')
//│ ╟── while constraining:  α347'  <!<  ((α424',) -> α432')
//│ ╟── while constraining:  α347'  <!<  ((α424',) -> α428'')
//│ ╟── while constraining:  (α423' <: ((α426'',) -> α427''), α347' <: ((α424',) -> α428'') => (α429'' -> α427''))  <!<  ((α414',) -> α415')
//│ ╟── while constraining:  ‹∀ 3. (α423' <: ((α417'''',) -> α418''''), α347' <: ((α424',) -> α425'''') => (α420'''' -> α418''''))›  <!<  ((α414',) -> α415')
//│ ╟── while constraining:  ‹∀ 3. (α423' <: ((α417'''',) -> α418''''), α347' <: ((α424',) -> α425'''') => (α420'''' -> α418''''))›  <!<  α413'
//│ ╟── while constraining:  ‹∀ 3. (α341''' <: ((α417'''',) -> α418''''), α347' <: ((α416'',) -> α419'''') => (α420'''' -> α418''''))›  <!<  α413'
//│ ╟── while constraining:  (α416'' -> ‹∀ 3. (α341''' <: ((α417'''',) -> α418''''), α347' <: ((α416'',) -> α419'''') => (α420'''' -> α418''''))›)  <!<  ((α405',) -> α413')
//│ ╟── while constraining:  ‹∀ 2. (α341''' -> ‹∀ 3. (α341''' <: ((α349'''',) -> α350''''), α347' <: ((α341''',) -> α348'''') => (α342'''' -> α350''''))›)›  <!<  ((α405',) -> α413')
//│ ╟── while constraining:  α347'  <!<  ((α405',) -> α413')
//│ ╟── while constraining:  α347'  <!<  ((α405',) -> α409'')
//│ ╟── while constraining:  (α404' <: ((α407'',) -> α408''), α347' <: ((α405',) -> α409'') => (α410'' -> α408''))  <!<  ((α395',) -> α396')
//│ ╟── while constraining:  ‹∀ 3. (α404' <: ((α398'''',) -> α399''''), α347' <: ((α405',) -> α406'''') => (α401'''' -> α399''''))›  <!<  ((α395',) -> α396')
//│ ╟── while constraining:  ‹∀ 3. (α404' <: ((α398'''',) -> α399''''), α347' <: ((α405',) -> α406'''') => (α401'''' -> α399''''))›  <!<  α394'
//│ ╟── while constraining:  ‹∀ 3. (α341''' <: ((α398'''',) -> α399''''), α347' <: ((α397'',) -> α400'''') => (α401'''' -> α399''''))›  <!<  α394'
//│ ╟── while constraining:  (α397'' -> ‹∀ 3. (α341''' <: ((α398'''',) -> α399''''), α347' <: ((α397'',) -> α400'''') => (α401'''' -> α399''''))›)  <!<  ((α393',) -> α394')
//│ ╟── while constraining:  ‹∀ 2. (α341''' -> ‹∀ 3. (α341''' <: ((α349'''',) -> α350''''), α347' <: ((α341''',) -> α348'''') => (α342'''' -> α350''''))›)›  <!<  ((α393',) -> α394')
//│ ╟── while constraining:  α347'  <!<  ((α393',) -> α394')
//│ ╟── while constraining:  α347'  <!<  ((α384'',) -> α391'')
//│ ╟── while constraining:  (α341''' <: ((α389'',) -> α390''), α347' <: ((α384'',) -> α391'') => (α392'' -> α390''))  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 3. (α341''' <: ((α385'''',) -> α386''''), α347' <: ((α384'',) -> α387'''') => (α388'''' -> α386''''))›  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  (α384'' -> ‹∀ 3. (α341''' <: ((α385'''',) -> α386''''), α347' <: ((α384'',) -> α387'''') => (α388'''' -> α386''''))›)  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 2. (α341''' -> ‹∀ 3. (α341''' <: ((α349'''',) -> α350''''), α347' <: ((α341''',) -> α348'''') => (α342'''' -> α350''''))›)›  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 2. (α341''' -> ‹∀ 3. (α341''' <: ((α349'''',) -> α350''''), α347' <: ((α341''',) -> α348'''') => (α342'''' -> α350''''))›)›  <!<  ‹∀ 0. (('a49' -> 'a49') -> ('a49' -> 'a49'))›
//│ ╟── while constraining:  ‹∀ 2. (α341''' -> ‹∀ 3. (α341''' <: ((α349'''',) -> α350''''), α347' <: ((α341''',) -> α348'''') => (α342'''' -> α350''''))›)›  <!<  ChurchInt
//│ ╟── while constraining:  α381'  <!<  ChurchInt
//│ ╟── while constraining:  (α380' -> α381')  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 1. (α333'' -> α351'')›  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  to_church376'  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 0. to_church332'›  <!<  (Int -> ChurchInt)
//│ ╙── while constraining:  ‹∀ 0. to_church332'›  <!<  ‹∀ 0. (Int -> ChurchInt)›
//│          = [Function: to_church4]

:e // not precise enough
rec def to_church' n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church' (n - 1)) f x)
to_church = to_church'
//│ to_church': int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd. (('c & 'd) -> 'c
//│   where
//│     'a <: 'b -> 'c
//│     'e <: 'a -> 'd -> 'b)))
//│           = [Function: to_church4]
//│ int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd. (('c & 'd) -> 'c
//│   where
//│     'a <: 'b -> 'c
//│     'e <: 'a -> 'd -> 'b)))
//│   <:  to_church:
//│ int -> ChurchInt
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r, ?s, ?t, ?to_church', ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1, ?i1, ?j1, ?k1, ?l1, ?m1, ?n1, ?o1, ?p1, ?q1, ?r1, ?s1, ?t1, ?u1, ?v1, ?w1, ?x1, ?y1, ?z1, ?a2, ?b2, ?c2, ?d2, ?e2, ?f2, ?g2, ?h2, ?i2, ?j2, ?k2, ?l2, ?m2, ?n2, ?o2, ?p2, ?q2, ?r2, ?s2, ?t2, ?u2, ?v2, ?w2, ?x2, ?y2, ?z2, ?a3, ?b3, ?c3, ?d3, ?e3, ?f3, ?g3, ?h3, ?i3, ?j3, ?k3, ?l3, ?m3, ?n3, ?o3, ?p3, ?q3, ?r3, ?s3, ?t3, ?u3, ?v3, ?w3, ?x3, ?y3, ?z3, ?a4, ?b4, ?c4, ?d4, ?e4, ?f4, ?g4, ?h4, ?i4, ?j4, ?k4, ?l4, ?m4, ?n4, ?o4, ?p4, ?q4, ?r4, ?s4, ?t4, ?u4, ?v4, ?w4, ?x4, ?y4, ?z4, ?a5, ?b5, ?c5, ?d5, ?e5, ?f5, ?g5, ?h5, ?i5, ?j5, ?k5, ?l5, ?m5, ?n5, ?o5, ?p5, ?q5, ?r5, ?s5, ?t5, ?u5, ?v5, ?w5, ?x5, ?y5, ?z5, ?a6, ?b6, ?c6, ?d6, ?e6, ?f6. ?to_church' <: int -> ChurchInt` exceeded recursion depth limit (400)
//│ ║  l.320: 	to_church = to_church'
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  α1003'  <!<  α1287'
//│ ╟── while constraining:  α1022'  <!<  α1287'
//│ ╟── while constraining:  α1041'  <!<  α1287'
//│ ╟── while constraining:  α1060'  <!<  α1287'
//│ ╟── while constraining:  α1079'  <!<  α1287'
//│ ╟── while constraining:  α1098'  <!<  α1287'
//│ ╟── while constraining:  α1117'  <!<  α1287'
//│ ╟── while constraining:  α1136'  <!<  α1287'
//│ ╟── while constraining:  α1155'  <!<  α1287'
//│ ╟── while constraining:  α1174'  <!<  α1287'
//│ ╟── while constraining:  α1193'  <!<  α1287'
//│ ╟── while constraining:  α1212'  <!<  α1287'
//│ ╟── while constraining:  α1231'  <!<  α1287'
//│ ╟── while constraining:  α1250'  <!<  α1287'
//│ ╟── while constraining:  α1269'  <!<  α1287'
//│ ╟── while constraining:  α1288'  <!<  α1287'
//│ ╟── while constraining:  α1288'  <!<  α1299''
//│ ╟── while constraining:  (α1288',)  <!<  (α1299'',)
//│ ╟── while constraining:  (α1299'' -> ‹∀ 3. (α898''' <: ((α1300'''',) -> α1301''''), α904' <: ((α1299'',) -> α1302'''') => (α1303'''' -> α1301''''))›)  <!<  ((α1288',) -> α1296')
//│ ╟── while constraining:  ‹∀ 2. (α898''' -> ‹∀ 3. (α898''' <: ((α906'''',) -> α907''''), α904' <: ((α898''',) -> α905'''') => (α899'''' -> α907''''))›)›  <!<  ((α1288',) -> α1296')
//│ ╟── while constraining:  α904'  <!<  ((α1288',) -> α1296')
//│ ╟── while constraining:  α904'  <!<  ((α1288',) -> α1292'')
//│ ╟── while constraining:  (α1287' <: ((α1290'',) -> α1291''), α904' <: ((α1288',) -> α1292'') => (α1293'' -> α1291''))  <!<  ((α1278',) -> α1279')
//│ ╟── while constraining:  ‹∀ 3. (α1287' <: ((α1281'''',) -> α1282''''), α904' <: ((α1288',) -> α1289'''') => (α1284'''' -> α1282''''))›  <!<  ((α1278',) -> α1279')
//│ ╟── while constraining:  ‹∀ 3. (α1287' <: ((α1281'''',) -> α1282''''), α904' <: ((α1288',) -> α1289'''') => (α1284'''' -> α1282''''))›  <!<  α1277'
//│ ╟── while constraining:  ‹∀ 3. (α898''' <: ((α1281'''',) -> α1282''''), α904' <: ((α1280'',) -> α1283'''') => (α1284'''' -> α1282''''))›  <!<  α1277'
//│ ╟── while constraining:  (α1280'' -> ‹∀ 3. (α898''' <: ((α1281'''',) -> α1282''''), α904' <: ((α1280'',) -> α1283'''') => (α1284'''' -> α1282''''))›)  <!<  ((α1269',) -> α1277')
//│ ╟── while constraining:  ‹∀ 2. (α898''' -> ‹∀ 3. (α898''' <: ((α906'''',) -> α907''''), α904' <: ((α898''',) -> α905'''') => (α899'''' -> α907''''))›)›  <!<  ((α1269',) -> α1277')
//│ ╟── while constraining:  α904'  <!<  ((α1269',) -> α1277')
//│ ╟── while constraining:  α904'  <!<  ((α1269',) -> α1273'')
//│ ╟── while constraining:  (α1268' <: ((α1271'',) -> α1272''), α904' <: ((α1269',) -> α1273'') => (α1274'' -> α1272''))  <!<  ((α1259',) -> α1260')
//│ ╟── while constraining:  ‹∀ 3. (α1268' <: ((α1262'''',) -> α1263''''), α904' <: ((α1269',) -> α1270'''') => (α1265'''' -> α1263''''))›  <!<  ((α1259',) -> α1260')
//│ ╟── while constraining:  ‹∀ 3. (α1268' <: ((α1262'''',) -> α1263''''), α904' <: ((α1269',) -> α1270'''') => (α1265'''' -> α1263''''))›  <!<  α1258'
//│ ╟── while constraining:  ‹∀ 3. (α898''' <: ((α1262'''',) -> α1263''''), α904' <: ((α1261'',) -> α1264'''') => (α1265'''' -> α1263''''))›  <!<  α1258'
//│ ╟── while constraining:  (α1261'' -> ‹∀ 3. (α898''' <: ((α1262'''',) -> α1263''''), α904' <: ((α1261'',) -> α1264'''') => (α1265'''' -> α1263''''))›)  <!<  ((α1250',) -> α1258')
//│ ╟── while constraining:  ‹∀ 2. (α898''' -> ‹∀ 3. (α898''' <: ((α906'''',) -> α907''''), α904' <: ((α898''',) -> α905'''') => (α899'''' -> α907''''))›)›  <!<  ((α1250',) -> α1258')
//│ ╟── while constraining:  α904'  <!<  ((α1250',) -> α1258')
//│ ╟── while constraining:  α904'  <!<  ((α1250',) -> α1254'')
//│ ╟── while constraining:  (α1249' <: ((α1252'',) -> α1253''), α904' <: ((α1250',) -> α1254'') => (α1255'' -> α1253''))  <!<  ((α1240',) -> α1241')
//│ ╟── while constraining:  ‹∀ 3. (α1249' <: ((α1243'''',) -> α1244''''), α904' <: ((α1250',) -> α1251'''') => (α1246'''' -> α1244''''))›  <!<  ((α1240',) -> α1241')
//│ ╟── while constraining:  ‹∀ 3. (α1249' <: ((α1243'''',) -> α1244''''), α904' <: ((α1250',) -> α1251'''') => (α1246'''' -> α1244''''))›  <!<  α1239'
//│ ╟── while constraining:  ‹∀ 3. (α898''' <: ((α1243'''',) -> α1244''''), α904' <: ((α1242'',) -> α1245'''') => (α1246'''' -> α1244''''))›  <!<  α1239'
//│ ╟── while constraining:  (α1242'' -> ‹∀ 3. (α898''' <: ((α1243'''',) -> α1244''''), α904' <: ((α1242'',) -> α1245'''') => (α1246'''' -> α1244''''))›)  <!<  ((α1231',) -> α1239')
//│ ╟── while constraining:  ‹∀ 2. (α898''' -> ‹∀ 3. (α898''' <: ((α906'''',) -> α907''''), α904' <: ((α898''',) -> α905'''') => (α899'''' -> α907''''))›)›  <!<  ((α1231',) -> α1239')
//│ ╟── while constraining:  α904'  <!<  ((α1231',) -> α1239')
//│ ╟── while constraining:  α904'  <!<  ((α1231',) -> α1235'')
//│ ╟── while constraining:  (α1230' <: ((α1233'',) -> α1234''), α904' <: ((α1231',) -> α1235'') => (α1236'' -> α1234''))  <!<  ((α1221',) -> α1222')
//│ ╟── while constraining:  ‹∀ 3. (α1230' <: ((α1224'''',) -> α1225''''), α904' <: ((α1231',) -> α1232'''') => (α1227'''' -> α1225''''))›  <!<  ((α1221',) -> α1222')
//│ ╟── while constraining:  ‹∀ 3. (α1230' <: ((α1224'''',) -> α1225''''), α904' <: ((α1231',) -> α1232'''') => (α1227'''' -> α1225''''))›  <!<  α1220'
//│ ╟── while constraining:  ‹∀ 3. (α898''' <: ((α1224'''',) -> α1225''''), α904' <: ((α1223'',) -> α1226'''') => (α1227'''' -> α1225''''))›  <!<  α1220'
//│ ╟── while constraining:  (α1223'' -> ‹∀ 3. (α898''' <: ((α1224'''',) -> α1225''''), α904' <: ((α1223'',) -> α1226'''') => (α1227'''' -> α1225''''))›)  <!<  ((α1212',) -> α1220')
//│ ╟── while constraining:  ‹∀ 2. (α898''' -> ‹∀ 3. (α898''' <: ((α906'''',) -> α907''''), α904' <: ((α898''',) -> α905'''') => (α899'''' -> α907''''))›)›  <!<  ((α1212',) -> α1220')
//│ ╟── while constraining:  α904'  <!<  ((α1212',) -> α1220')
//│ ╟── while constraining:  α904'  <!<  ((α1212',) -> α1216'')
//│ ╟── while constraining:  (α1211' <: ((α1214'',) -> α1215''), α904' <: ((α1212',) -> α1216'') => (α1217'' -> α1215''))  <!<  ((α1202',) -> α1203')
//│ ╟── while constraining:  ‹∀ 3. (α1211' <: ((α1205'''',) -> α1206''''), α904' <: ((α1212',) -> α1213'''') => (α1208'''' -> α1206''''))›  <!<  ((α1202',) -> α1203')
//│ ╟── while constraining:  ‹∀ 3. (α1211' <: ((α1205'''',) -> α1206''''), α904' <: ((α1212',) -> α1213'''') => (α1208'''' -> α1206''''))›  <!<  α1201'
//│ ╟── while constraining:  ‹∀ 3. (α898''' <: ((α1205'''',) -> α1206''''), α904' <: ((α1204'',) -> α1207'''') => (α1208'''' -> α1206''''))›  <!<  α1201'
//│ ╟── while constraining:  (α1204'' -> ‹∀ 3. (α898''' <: ((α1205'''',) -> α1206''''), α904' <: ((α1204'',) -> α1207'''') => (α1208'''' -> α1206''''))›)  <!<  ((α1193',) -> α1201')
//│ ╟── while constraining:  ‹∀ 2. (α898''' -> ‹∀ 3. (α898''' <: ((α906'''',) -> α907''''), α904' <: ((α898''',) -> α905'''') => (α899'''' -> α907''''))›)›  <!<  ((α1193',) -> α1201')
//│ ╟── while constraining:  α904'  <!<  ((α1193',) -> α1201')
//│ ╟── while constraining:  α904'  <!<  ((α1193',) -> α1197'')
//│ ╟── while constraining:  (α1192' <: ((α1195'',) -> α1196''), α904' <: ((α1193',) -> α1197'') => (α1198'' -> α1196''))  <!<  ((α1183',) -> α1184')
//│ ╟── while constraining:  ‹∀ 3. (α1192' <: ((α1186'''',) -> α1187''''), α904' <: ((α1193',) -> α1194'''') => (α1189'''' -> α1187''''))›  <!<  ((α1183',) -> α1184')
//│ ╟── while constraining:  ‹∀ 3. (α1192' <: ((α1186'''',) -> α1187''''), α904' <: ((α1193',) -> α1194'''') => (α1189'''' -> α1187''''))›  <!<  α1182'
//│ ╟── while constraining:  ‹∀ 3. (α898''' <: ((α1186'''',) -> α1187''''), α904' <: ((α1185'',) -> α1188'''') => (α1189'''' -> α1187''''))›  <!<  α1182'
//│ ╟── while constraining:  (α1185'' -> ‹∀ 3. (α898''' <: ((α1186'''',) -> α1187''''), α904' <: ((α1185'',) -> α1188'''') => (α1189'''' -> α1187''''))›)  <!<  ((α1174',) -> α1182')
//│ ╟── while constraining:  ‹∀ 2. (α898''' -> ‹∀ 3. (α898''' <: ((α906'''',) -> α907''''), α904' <: ((α898''',) -> α905'''') => (α899'''' -> α907''''))›)›  <!<  ((α1174',) -> α1182')
//│ ╟── while constraining:  α904'  <!<  ((α1174',) -> α1182')
//│ ╟── while constraining:  α904'  <!<  ((α1174',) -> α1178'')
//│ ╟── while constraining:  (α1173' <: ((α1176'',) -> α1177''), α904' <: ((α1174',) -> α1178'') => (α1179'' -> α1177''))  <!<  ((α1164',) -> α1165')
//│ ╟── while constraining:  ‹∀ 3. (α1173' <: ((α1167'''',) -> α1168''''), α904' <: ((α1174',) -> α1175'''') => (α1170'''' -> α1168''''))›  <!<  ((α1164',) -> α1165')
//│ ╟── while constraining:  ‹∀ 3. (α1173' <: ((α1167'''',) -> α1168''''), α904' <: ((α1174',) -> α1175'''') => (α1170'''' -> α1168''''))›  <!<  α1163'
//│ ╟── while constraining:  ‹∀ 3. (α898''' <: ((α1167'''',) -> α1168''''), α904' <: ((α1166'',) -> α1169'''') => (α1170'''' -> α1168''''))›  <!<  α1163'
//│ ╟── while constraining:  (α1166'' -> ‹∀ 3. (α898''' <: ((α1167'''',) -> α1168''''), α904' <: ((α1166'',) -> α1169'''') => (α1170'''' -> α1168''''))›)  <!<  ((α1155',) -> α1163')
//│ ╟── while constraining:  ‹∀ 2. (α898''' -> ‹∀ 3. (α898''' <: ((α906'''',) -> α907''''), α904' <: ((α898''',) -> α905'''') => (α899'''' -> α907''''))›)›  <!<  ((α1155',) -> α1163')
//│ ╟── while constraining:  α904'  <!<  ((α1155',) -> α1163')
//│ ╟── while constraining:  α904'  <!<  ((α1155',) -> α1159'')
//│ ╟── while constraining:  (α1154' <: ((α1157'',) -> α1158''), α904' <: ((α1155',) -> α1159'') => (α1160'' -> α1158''))  <!<  ((α1145',) -> α1146')
//│ ╟── while constraining:  ‹∀ 3. (α1154' <: ((α1148'''',) -> α1149''''), α904' <: ((α1155',) -> α1156'''') => (α1151'''' -> α1149''''))›  <!<  ((α1145',) -> α1146')
//│ ╟── while constraining:  ‹∀ 3. (α1154' <: ((α1148'''',) -> α1149''''), α904' <: ((α1155',) -> α1156'''') => (α1151'''' -> α1149''''))›  <!<  α1144'
//│ ╟── while constraining:  ‹∀ 3. (α898''' <: ((α1148'''',) -> α1149''''), α904' <: ((α1147'',) -> α1150'''') => (α1151'''' -> α1149''''))›  <!<  α1144'
//│ ╟── while constraining:  (α1147'' -> ‹∀ 3. (α898''' <: ((α1148'''',) -> α1149''''), α904' <: ((α1147'',) -> α1150'''') => (α1151'''' -> α1149''''))›)  <!<  ((α1136',) -> α1144')
//│ ╟── while constraining:  ‹∀ 2. (α898''' -> ‹∀ 3. (α898''' <: ((α906'''',) -> α907''''), α904' <: ((α898''',) -> α905'''') => (α899'''' -> α907''''))›)›  <!<  ((α1136',) -> α1144')
//│ ╟── while constraining:  α904'  <!<  ((α1136',) -> α1144')
//│ ╟── while constraining:  α904'  <!<  ((α1136',) -> α1140'')
//│ ╟── while constraining:  (α1135' <: ((α1138'',) -> α1139''), α904' <: ((α1136',) -> α1140'') => (α1141'' -> α1139''))  <!<  ((α1126',) -> α1127')
//│ ╟── while constraining:  ‹∀ 3. (α1135' <: ((α1129'''',) -> α1130''''), α904' <: ((α1136',) -> α1137'''') => (α1132'''' -> α1130''''))›  <!<  ((α1126',) -> α1127')
//│ ╟── while constraining:  ‹∀ 3. (α1135' <: ((α1129'''',) -> α1130''''), α904' <: ((α1136',) -> α1137'''') => (α1132'''' -> α1130''''))›  <!<  α1125'
//│ ╟── while constraining:  ‹∀ 3. (α898''' <: ((α1129'''',) -> α1130''''), α904' <: ((α1128'',) -> α1131'''') => (α1132'''' -> α1130''''))›  <!<  α1125'
//│ ╟── while constraining:  (α1128'' -> ‹∀ 3. (α898''' <: ((α1129'''',) -> α1130''''), α904' <: ((α1128'',) -> α1131'''') => (α1132'''' -> α1130''''))›)  <!<  ((α1117',) -> α1125')
//│ ╟── while constraining:  ‹∀ 2. (α898''' -> ‹∀ 3. (α898''' <: ((α906'''',) -> α907''''), α904' <: ((α898''',) -> α905'''') => (α899'''' -> α907''''))›)›  <!<  ((α1117',) -> α1125')
//│ ╟── while constraining:  α904'  <!<  ((α1117',) -> α1125')
//│ ╟── while constraining:  α904'  <!<  ((α1117',) -> α1121'')
//│ ╟── while constraining:  (α1116' <: ((α1119'',) -> α1120''), α904' <: ((α1117',) -> α1121'') => (α1122'' -> α1120''))  <!<  ((α1107',) -> α1108')
//│ ╟── while constraining:  ‹∀ 3. (α1116' <: ((α1110'''',) -> α1111''''), α904' <: ((α1117',) -> α1118'''') => (α1113'''' -> α1111''''))›  <!<  ((α1107',) -> α1108')
//│ ╟── while constraining:  ‹∀ 3. (α1116' <: ((α1110'''',) -> α1111''''), α904' <: ((α1117',) -> α1118'''') => (α1113'''' -> α1111''''))›  <!<  α1106'
//│ ╟── while constraining:  ‹∀ 3. (α898''' <: ((α1110'''',) -> α1111''''), α904' <: ((α1109'',) -> α1112'''') => (α1113'''' -> α1111''''))›  <!<  α1106'
//│ ╟── while constraining:  (α1109'' -> ‹∀ 3. (α898''' <: ((α1110'''',) -> α1111''''), α904' <: ((α1109'',) -> α1112'''') => (α1113'''' -> α1111''''))›)  <!<  ((α1098',) -> α1106')
//│ ╟── while constraining:  ‹∀ 2. (α898''' -> ‹∀ 3. (α898''' <: ((α906'''',) -> α907''''), α904' <: ((α898''',) -> α905'''') => (α899'''' -> α907''''))›)›  <!<  ((α1098',) -> α1106')
//│ ╟── while constraining:  α904'  <!<  ((α1098',) -> α1106')
//│ ╟── while constraining:  α904'  <!<  ((α1098',) -> α1102'')
//│ ╟── while constraining:  (α1097' <: ((α1100'',) -> α1101''), α904' <: ((α1098',) -> α1102'') => (α1103'' -> α1101''))  <!<  ((α1088',) -> α1089')
//│ ╟── while constraining:  ‹∀ 3. (α1097' <: ((α1091'''',) -> α1092''''), α904' <: ((α1098',) -> α1099'''') => (α1094'''' -> α1092''''))›  <!<  ((α1088',) -> α1089')
//│ ╟── while constraining:  ‹∀ 3. (α1097' <: ((α1091'''',) -> α1092''''), α904' <: ((α1098',) -> α1099'''') => (α1094'''' -> α1092''''))›  <!<  α1087'
//│ ╟── while constraining:  ‹∀ 3. (α898''' <: ((α1091'''',) -> α1092''''), α904' <: ((α1090'',) -> α1093'''') => (α1094'''' -> α1092''''))›  <!<  α1087'
//│ ╟── while constraining:  (α1090'' -> ‹∀ 3. (α898''' <: ((α1091'''',) -> α1092''''), α904' <: ((α1090'',) -> α1093'''') => (α1094'''' -> α1092''''))›)  <!<  ((α1079',) -> α1087')
//│ ╟── while constraining:  ‹∀ 2. (α898''' -> ‹∀ 3. (α898''' <: ((α906'''',) -> α907''''), α904' <: ((α898''',) -> α905'''') => (α899'''' -> α907''''))›)›  <!<  ((α1079',) -> α1087')
//│ ╟── while constraining:  α904'  <!<  ((α1079',) -> α1087')
//│ ╟── while constraining:  α904'  <!<  ((α1079',) -> α1083'')
//│ ╟── while constraining:  (α1078' <: ((α1081'',) -> α1082''), α904' <: ((α1079',) -> α1083'') => (α1084'' -> α1082''))  <!<  ((α1069',) -> α1070')
//│ ╟── while constraining:  ‹∀ 3. (α1078' <: ((α1072'''',) -> α1073''''), α904' <: ((α1079',) -> α1080'''') => (α1075'''' -> α1073''''))›  <!<  ((α1069',) -> α1070')
//│ ╟── while constraining:  ‹∀ 3. (α1078' <: ((α1072'''',) -> α1073''''), α904' <: ((α1079',) -> α1080'''') => (α1075'''' -> α1073''''))›  <!<  α1068'
//│ ╟── while constraining:  ‹∀ 3. (α898''' <: ((α1072'''',) -> α1073''''), α904' <: ((α1071'',) -> α1074'''') => (α1075'''' -> α1073''''))›  <!<  α1068'
//│ ╟── while constraining:  (α1071'' -> ‹∀ 3. (α898''' <: ((α1072'''',) -> α1073''''), α904' <: ((α1071'',) -> α1074'''') => (α1075'''' -> α1073''''))›)  <!<  ((α1060',) -> α1068')
//│ ╟── while constraining:  ‹∀ 2. (α898''' -> ‹∀ 3. (α898''' <: ((α906'''',) -> α907''''), α904' <: ((α898''',) -> α905'''') => (α899'''' -> α907''''))›)›  <!<  ((α1060',) -> α1068')
//│ ╟── while constraining:  α904'  <!<  ((α1060',) -> α1068')
//│ ╟── while constraining:  α904'  <!<  ((α1060',) -> α1064'')
//│ ╟── while constraining:  (α1059' <: ((α1062'',) -> α1063''), α904' <: ((α1060',) -> α1064'') => (α1065'' -> α1063''))  <!<  ((α1050',) -> α1051')
//│ ╟── while constraining:  ‹∀ 3. (α1059' <: ((α1053'''',) -> α1054''''), α904' <: ((α1060',) -> α1061'''') => (α1056'''' -> α1054''''))›  <!<  ((α1050',) -> α1051')
//│ ╟── while constraining:  ‹∀ 3. (α1059' <: ((α1053'''',) -> α1054''''), α904' <: ((α1060',) -> α1061'''') => (α1056'''' -> α1054''''))›  <!<  α1049'
//│ ╟── while constraining:  ‹∀ 3. (α898''' <: ((α1053'''',) -> α1054''''), α904' <: ((α1052'',) -> α1055'''') => (α1056'''' -> α1054''''))›  <!<  α1049'
//│ ╟── while constraining:  (α1052'' -> ‹∀ 3. (α898''' <: ((α1053'''',) -> α1054''''), α904' <: ((α1052'',) -> α1055'''') => (α1056'''' -> α1054''''))›)  <!<  ((α1041',) -> α1049')
//│ ╟── while constraining:  ‹∀ 2. (α898''' -> ‹∀ 3. (α898''' <: ((α906'''',) -> α907''''), α904' <: ((α898''',) -> α905'''') => (α899'''' -> α907''''))›)›  <!<  ((α1041',) -> α1049')
//│ ╟── while constraining:  α904'  <!<  ((α1041',) -> α1049')
//│ ╟── while constraining:  α904'  <!<  ((α1041',) -> α1045'')
//│ ╟── while constraining:  (α1040' <: ((α1043'',) -> α1044''), α904' <: ((α1041',) -> α1045'') => (α1046'' -> α1044''))  <!<  ((α1031',) -> α1032')
//│ ╟── while constraining:  ‹∀ 3. (α1040' <: ((α1034'''',) -> α1035''''), α904' <: ((α1041',) -> α1042'''') => (α1037'''' -> α1035''''))›  <!<  ((α1031',) -> α1032')
//│ ╟── while constraining:  ‹∀ 3. (α1040' <: ((α1034'''',) -> α1035''''), α904' <: ((α1041',) -> α1042'''') => (α1037'''' -> α1035''''))›  <!<  α1030'
//│ ╟── while constraining:  ‹∀ 3. (α898''' <: ((α1034'''',) -> α1035''''), α904' <: ((α1033'',) -> α1036'''') => (α1037'''' -> α1035''''))›  <!<  α1030'
//│ ╟── while constraining:  (α1033'' -> ‹∀ 3. (α898''' <: ((α1034'''',) -> α1035''''), α904' <: ((α1033'',) -> α1036'''') => (α1037'''' -> α1035''''))›)  <!<  ((α1022',) -> α1030')
//│ ╟── while constraining:  ‹∀ 2. (α898''' -> ‹∀ 3. (α898''' <: ((α906'''',) -> α907''''), α904' <: ((α898''',) -> α905'''') => (α899'''' -> α907''''))›)›  <!<  ((α1022',) -> α1030')
//│ ╟── while constraining:  α904'  <!<  ((α1022',) -> α1030')
//│ ╟── while constraining:  α904'  <!<  ((α1022',) -> α1026'')
//│ ╟── while constraining:  (α1021' <: ((α1024'',) -> α1025''), α904' <: ((α1022',) -> α1026'') => (α1027'' -> α1025''))  <!<  ((α1012',) -> α1013')
//│ ╟── while constraining:  ‹∀ 3. (α1021' <: ((α1015'''',) -> α1016''''), α904' <: ((α1022',) -> α1023'''') => (α1018'''' -> α1016''''))›  <!<  ((α1012',) -> α1013')
//│ ╟── while constraining:  ‹∀ 3. (α1021' <: ((α1015'''',) -> α1016''''), α904' <: ((α1022',) -> α1023'''') => (α1018'''' -> α1016''''))›  <!<  α1011'
//│ ╟── while constraining:  ‹∀ 3. (α898''' <: ((α1015'''',) -> α1016''''), α904' <: ((α1014'',) -> α1017'''') => (α1018'''' -> α1016''''))›  <!<  α1011'
//│ ╟── while constraining:  (α1014'' -> ‹∀ 3. (α898''' <: ((α1015'''',) -> α1016''''), α904' <: ((α1014'',) -> α1017'''') => (α1018'''' -> α1016''''))›)  <!<  ((α1003',) -> α1011')
//│ ╟── while constraining:  ‹∀ 2. (α898''' -> ‹∀ 3. (α898''' <: ((α906'''',) -> α907''''), α904' <: ((α898''',) -> α905'''') => (α899'''' -> α907''''))›)›  <!<  ((α1003',) -> α1011')
//│ ╟── while constraining:  α904'  <!<  ((α1003',) -> α1011')
//│ ╟── while constraining:  α904'  <!<  ((α1003',) -> α1007'')
//│ ╟── while constraining:  (α1002' <: ((α1005'',) -> α1006''), α904' <: ((α1003',) -> α1007'') => (α1008'' -> α1006''))  <!<  ((α993',) -> α994')
//│ ╟── while constraining:  ‹∀ 3. (α1002' <: ((α996'''',) -> α997''''), α904' <: ((α1003',) -> α1004'''') => (α999'''' -> α997''''))›  <!<  ((α993',) -> α994')
//│ ╟── while constraining:  ‹∀ 3. (α1002' <: ((α996'''',) -> α997''''), α904' <: ((α1003',) -> α1004'''') => (α999'''' -> α997''''))›  <!<  α992'
//│ ╟── while constraining:  ‹∀ 3. (α898''' <: ((α996'''',) -> α997''''), α904' <: ((α995'',) -> α998'''') => (α999'''' -> α997''''))›  <!<  α992'
//│ ╟── while constraining:  (α995'' -> ‹∀ 3. (α898''' <: ((α996'''',) -> α997''''), α904' <: ((α995'',) -> α998'''') => (α999'''' -> α997''''))›)  <!<  ((α984',) -> α992')
//│ ╟── while constraining:  ‹∀ 2. (α898''' -> ‹∀ 3. (α898''' <: ((α906'''',) -> α907''''), α904' <: ((α898''',) -> α905'''') => (α899'''' -> α907''''))›)›  <!<  ((α984',) -> α992')
//│ ╟── while constraining:  α904'  <!<  ((α984',) -> α992')
//│ ╟── while constraining:  α904'  <!<  ((α984',) -> α988'')
//│ ╟── while constraining:  (α983' <: ((α986'',) -> α987''), α904' <: ((α984',) -> α988'') => (α989'' -> α987''))  <!<  ((α974',) -> α975')
//│ ╟── while constraining:  ‹∀ 3. (α983' <: ((α977'''',) -> α978''''), α904' <: ((α984',) -> α985'''') => (α980'''' -> α978''''))›  <!<  ((α974',) -> α975')
//│ ╟── while constraining:  ‹∀ 3. (α983' <: ((α977'''',) -> α978''''), α904' <: ((α984',) -> α985'''') => (α980'''' -> α978''''))›  <!<  α973'
//│ ╟── while constraining:  ‹∀ 3. (α898''' <: ((α977'''',) -> α978''''), α904' <: ((α976'',) -> α979'''') => (α980'''' -> α978''''))›  <!<  α973'
//│ ╟── while constraining:  (α976'' -> ‹∀ 3. (α898''' <: ((α977'''',) -> α978''''), α904' <: ((α976'',) -> α979'''') => (α980'''' -> α978''''))›)  <!<  ((α972',) -> α973')
//│ ╟── while constraining:  ‹∀ 2. (α898''' -> ‹∀ 3. (α898''' <: ((α906'''',) -> α907''''), α904' <: ((α898''',) -> α905'''') => (α899'''' -> α907''''))›)›  <!<  ((α972',) -> α973')
//│ ╟── while constraining:  α904'  <!<  ((α972',) -> α973')
//│ ╟── while constraining:  α904'  <!<  ((α963'',) -> α970'')
//│ ╟── while constraining:  (α898''' <: ((α968'',) -> α969''), α904' <: ((α963'',) -> α970'') => (α971'' -> α969''))  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 3. (α898''' <: ((α964'''',) -> α965''''), α904' <: ((α963'',) -> α966'''') => (α967'''' -> α965''''))›  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  (α963'' -> ‹∀ 3. (α898''' <: ((α964'''',) -> α965''''), α904' <: ((α963'',) -> α966'''') => (α967'''' -> α965''''))›)  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 2. (α898''' -> ‹∀ 3. (α898''' <: ((α906'''',) -> α907''''), α904' <: ((α898''',) -> α905'''') => (α899'''' -> α907''''))›)›  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 2. (α898''' -> ‹∀ 3. (α898''' <: ((α906'''',) -> α907''''), α904' <: ((α898''',) -> α905'''') => (α899'''' -> α907''''))›)›  <!<  ‹∀ 0. (('a49' -> 'a49') -> ('a49' -> 'a49'))›
//│ ╟── while constraining:  ‹∀ 2. (α898''' -> ‹∀ 3. (α898''' <: ((α906'''',) -> α907''''), α904' <: ((α898''',) -> α905'''') => (α899'''' -> α907''''))›)›  <!<  ChurchInt
//│ ╟── while constraining:  α960'  <!<  ChurchInt
//│ ╟── while constraining:  (α959' -> α960')  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 1. (α890'' -> α908'')›  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  to_church'955'  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 0. to_church'889'›  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_church'889'››  <!<  (Int -> ChurchInt)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. to_church'889'››  <!<  ‹∀ 0. (Int -> ChurchInt)›
//│          = [Function: to_church4]

// emulates annotated rec def
def to_church' n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church' (n - 1)) f x)
//│ to_church': int -> (forall 'a. (nothing -> anything & 'a) -> (forall 'a, 'b, 'c, 'd, 'e. (('d & 'c & 'e) -> 'd
//│   where
//│     'f <: 'b -> 'c
//│     'a <: 'c -> 'd
//│     'g <: 'a -> 'e -> 'b)))
//│           = [Function: to_church4]

// (* �a coince. *)
// let tc n = (to_church n : Int);;
def tc n = to_church n : ChurchInt
//│ tc: int -> ChurchInt
//│   = [Function: tc]

// (* Duplicate with to_church1 ("Marche") above *)
// (* Avec la value restriction : �a passe. *)
// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1) : Int) f x)


// (*** Les annotations de type ne commutent pas. ***)
// type sid = ['a] 'a -> 'a
// type z = ['a,'b] ('a -> 'b) -> ('a -> 'b)
type Z = forall 'a 'b. ('a -> 'b) -> ('a -> 'b)
//│ Defined type alias Z

// let f x = (x:sid), ((x:sid):z)
def f x = ((x : Sid), ((x : Sid) : Z))
//│ f: Sid -> (Sid, Z,)
//│  = [Function: f]

// (* Ne type pas ... c'est une instance polymorphe. Interdit. *)
// untype fun x -> (x:sid), (x:z)
fun x -> ((x : Sid), (x : Z))
//│ res: (Sid & Z) -> (Sid, Z,)
//│    = [Function: res]
