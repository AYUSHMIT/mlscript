:NoRecursiveTypes
:GeneralizeCurriedFunctions

// type bot = 0;;
type Bot = forall 'a. 'a
//│ Defined type alias Bot

// (* Rank 6 with intersection types, untypable in predicative System F,
//    typable in impredicative System F *)


// let imp (z : bot) =
//   (fun (x : ['a] ('a -> 'u) -> 'v) -> x x)
//   (fun (y : 'a -> bot) -> y z y);;
def imp (z: Bot) =
  (fun (x: forall 'a. ('a -> 'u) -> 'v) -> x x)
  (fun (y: 'a -> Bot) -> y z y)
def imp' z =
  (fun x -> x x)
  (fun y -> y z y)
//│ imp: Bot -> 'b
//│   where
//│     'c :> forall 'a. ('a -> 'u) -> 'v
//│        <: (forall 'a. ('a -> 'u) -> 'v) & 'c -> 'd
//│     'u <: Bot
//│     'd <: 'b
//│     'e := Bot
//│     'f :> 'a0 -> Bot
//│        <: 'a0 -> Bot & 'e -> 'g
//│     'g <: 'f -> 'h
//│     'a0 <: ‘a
//│     'h <: 'v
//│    = [Function: imp]
//│ imp': 'a -> 'b
//│   where
//│     'c :> forall 'd, 'e, 'f, 'a. ('e -> 'f
//│   where
//│     'd <: 'e -> 'f
//│     'e <: 'a -> 'd)
//│        <: 'c -> 'g
//│     'g <: 'b
//│     = [Function: imp]


// (* Quelques constantes. *)

// type sid = ['a] 'a -> 'a
type Sid = forall 'a. 'a -> 'a
//│ Defined type alias Sid

// let id = fun x -> x
// ;;
def id = fun x -> x
//│ id: 'a -> 'a
//│   = [Function: id]

// let delta = fun (x:sid) -> x x
// ;;
def delta = fun (x: Sid) -> x x
def delta' = fun x -> x x
//│ delta: Sid -> 'a
//│   where
//│     'b :> Sid
//│        <: Sid & 'b -> 'a
//│      = [Function: delta]
//│ delta': 'a -> 'b
//│   where
//│     'a <: 'a -> 'b
//│       = [Function: delta]

// delta id ;;
delta id
delta' id
//│ res: Sid
//│    = [Function: id]
//│ res: 'a -> 'a
//│    = [Function: id]

// let t a b c d e = (fun x -> a x x) ((fun y -> b (c y)) (d e)) ;;
def t a b c d e = (fun x -> a x x) ((fun y -> b (c y)) (d e))
//│ t: 'a -> (forall 'b. 'b -> (forall 'c. 'c -> (forall 'd. 'd -> (forall 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n. ('g -> 'j
//│   where
//│     'c <: 'e -> 'f
//│     'd <: 'g -> 'h
//│     'i <: 'j
//│     'h <: 'e
//│     'k <: 'l
//│     'm <: 'k
//│     'a <: 'l -> 'n
//│     'b <: 'f -> 'm
//│     'n <: 'l -> 'i)))))
//│  = [Function: t]

// let t w z a b = (fun y -> (fun x -> w (x y) z) a) b ;;
def t w z a b = (fun y -> (fun x -> w (x y) z) a) b
//│ t: 'a -> (forall 'b. 'b -> (forall 'c. 'c -> (forall 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k. ('k -> 'e
//│   where
//│     'd <: 'e
//│     'f <: 'g -> 'h
//│     'a <: 'h -> 'i
//│     'i <: 'b -> 'j
//│     'j <: 'd
//│     'c <: 'f
//│     'k <: 'g))))
//│  = [Function: t1]

// let t y a = (fun x -> x (x y)) ((fun z -> z) (fun x -> a x)) ;;
def t y a = (fun x -> x (x y)) ((fun z -> z) (fun x -> a x))
//│ t: 'a -> (forall 'b, 'c, 'd, 'e. ('f -> 'g
//│   where
//│     'b <: 'c
//│     'd :> forall 'f, 'h, 'i. ('h -> 'i
//│   where
//│     'f <: 'h -> 'i)
//│        <: 'b
//│     'c <: 'a -> 'j & 'j -> 'e
//│     'e <: 'g))
//│  = [Function: t2]

// (* Rank 1 *)
// (fun x -> fun y -> x y) (fun y -> fun x -> x y) ;;
(fun x -> fun y -> x y) (fun y -> fun x -> x y)
//│ res: 'a -> 'b
//│   where
//│     'c <: 'a -> 'b
//│    = [Function (anonymous)]

// (* Rank 3 *)
// (fun x -> fun y -> x) delta ;;
(fun x -> fun y -> x) delta
(fun x -> fun y -> x) delta'
//│ res: anything -> (forall 'a, 'b. (Sid -> 'b
//│   where
//│     'a :> Sid
//│        <: Sid & 'a -> 'b))
//│    = [Function (anonymous)]
//│ res: anything -> (forall 'a, 'b. ('a -> 'b
//│   where
//│     'a <: 'a -> 'b))
//│    = [Function (anonymous)]

// (* Rank 5 *)
// (fun x -> fun y -> x y) (fun y -> fun x -> x y) delta ;;
(fun x -> fun y -> x y) (fun y -> fun x -> x y) delta
(fun x -> fun y -> x y) (fun y -> fun x -> x y) delta'
//│ res: 'a -> 'b
//│   where
//│     'a <: (forall 'c, 'd. (Sid -> 'd
//│   where
//│     'c :> Sid
//│        <: Sid & 'c -> 'd)) -> 'b
//│    = [Function (anonymous)]
//│ res: 'a -> 'b
//│   where
//│     'a <: (forall 'c, 'd. ('c -> 'd
//│   where
//│     'c <: 'c -> 'd)) -> 'b
//│    = [Function (anonymous)]

// (* Rank 8 *)
// (fun (x:sid) -> x x x x x) id delta ;;
(fun (x: Sid) -> x x x x x) id delta
(fun x -> x x x x x) id delta'
//│ res: Sid -> 'a
//│   where
//│     'b :> Sid
//│        <: Sid & 'b -> 'a
//│    = [Function: delta]
//│ res: 'a -> 'b
//│   where
//│     'a <: 'a -> 'b
//│    = [Function: delta]

// (* Rank 2 *)
// type sk = ['a,'b] 'a -> 'b -> 'a;;
// (fun (f:sk) -> fun x -> f f x) (fun v -> fun w -> v) ;;
type Sk = forall 'a 'b. 'a -> 'b -> 'a
(fun (f: Sk) -> fun x -> f f x) (fun v -> fun w -> v)
(fun f -> fun x -> f f x) (fun v -> fun w -> v)
//│ Defined type alias Sk
//│ res: 'a -> 'b
//│   where
//│     'c <: 'a -> 'b
//│     'd <: 'd -> 'c
//│    = [Function (anonymous)]
//│ res: 'a -> 'b
//│   where
//│     'c <: 'c -> 'd
//│     'd <: 'a -> 'b
//│    = [Function (anonymous)]

// (* Rank 3 *)
// (fun t -> fun k -> t k) (fun (f:sk) -> fun x -> f f x) (fun v -> fun w -> v);;
(fun t -> fun k -> t k) (fun (f: Sk) -> fun x -> f f x) (fun v -> fun w -> v)
(fun t -> fun k -> t k) (fun f -> fun x -> f f x) (fun v -> fun w -> v)
//│ res: 'a -> 'b
//│   where
//│     'c <: 'c -> 'd
//│     'd <: 'a -> 'b
//│    = [Function (anonymous)]
//│ res: 'a -> 'b
//│   where
//│     'c <: 'c -> 'd
//│     'd <: 'a -> 'b
//│    = [Function (anonymous)]


// let k = fun x y -> x
// let k' = fun x y -> y
// let app = fun f x -> f x
// let two = fun f x -> f (f x)
// let three = fun f x -> f (f (f x))
def k = fun x -> fun y -> x
def k2 = fun x -> fun y -> y
def app = fun f -> fun x -> f x
def two = fun f -> fun x -> f (f x)
def three = fun f -> fun x -> f (f (f x))
//│ k: 'a -> anything -> 'a
//│  = [Function: k]
//│ k2: anything -> (forall 'a. 'a -> 'a)
//│   = [Function: k2]
//│ app: 'a -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c))
//│    = [Function: app]
//│ two: 'a -> (forall 'a, 'b, 'c, 'd. ('b -> 'd
//│   where
//│     'a <: 'b -> 'c & 'c -> 'd))
//│    = [Function: two]
//│ three: 'a -> (forall 'a, 'b, 'c, 'd, 'e. ('b -> 'e
//│   where
//│     'a <: 'b -> 'c & 'c -> 'd & 'd -> 'e))
//│      = [Function: three]


// * Tony noticed this did not work before this commit generalizing the LHS of ascriptions...
(app id): Sid
//│ res: Sid
//│    = [Function (anonymous)]
// * this one worked:
let t = app id in t: Sid
//│ res: Sid
//│    = [Function (anonymous)]


// type Int = ['a] ('a -> 'a) -> ('a -> 'a)
// ;;
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt

// (* Factorial of two and three *)
// (* Only ONE annotation ! *)
// let t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n:Int) -> n (fun v -> k') k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k') (fun f -> fun x -> f (p k' f x))) (fun s -> s k' k') k) g) x)) two ;;
def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ t: 'a -> 'b
//│   where
//│     'c <: 'd
//│     'd <: (forall 'e. 'e -> (forall 'e, 'f, 'g, 'h. ('f -> 'h
//│   where
//│     'e <: 'f -> 'g & 'g -> 'h))) -> 'b
//│     'i :> forall 'j. 'j -> (forall 'k, 'l, 'm, 'n, 'o. (ChurchInt -> 'p
//│   where
//│     'l :> ChurchInt
//│        <: ChurchInt & ('k -> 'k -> (forall 'q. 'q -> 'q)) -> 'm
//│     'm <: (forall 'k, 'r. 'r -> 'k -> 'r) -> 'n
//│     'n <: (forall 's. 's -> (forall 's, 't, 'u. ('t -> 'u
//│   where
//│     's <: 't -> 'u))) -> 'o
//│     'o <: (forall 'v. 'v -> (forall 'k, 'j, 'l, 'w, 'x, 'y, 'z. ('a1 -> 'b1
//│   where
//│     'j <: 'w -> 'x
//│     'l <: (forall 'c1. 'c1 -> (forall 'k, 'c1, 'd1, 'e1. ('d1 -> 'f1
//│   where
//│     'c1 <: ('k -> (forall 'q. 'q -> 'q)) -> 'g1
//│     'd1 <: 'g1 -> 'e1
//│     'e1 <: (forall 'h1. 'h1 -> (forall 'k, 'c1, 'h1, 'i1, 'j1. ('k1 -> 'l1
//│   where
//│     'c1 <: ('k -> (forall 'q. 'q -> 'q)) -> 'i1
//│     'h1 <: 'm1 -> 'l1
//│     'i1 <: 'h1 -> 'j1
//│     'j1 <: 'k1 -> 'm1))) -> 'f1))) -> 'y & 'n1 -> 'z
//│     'y <: (forall 'k, 'o1, 'p1. ('o1 -> 'q1
//│   where
//│     'o1 <: ('k -> (forall 'q. 'q -> 'q)) -> 'p1
//│     'p1 <: ('k -> (forall 'q. 'q -> 'q)) -> 'q1)) -> 'k
//│     'k <: (forall 'k, 'r. 'r -> 'k -> 'r) -> 'w
//│     'x <: 'v -> 'n1
//│     'z <: 'a1 -> 'b1))) -> 'p))
//│        <: ('k -> 'a) -> 'r1 & 'r1 -> 's1 & 's1 -> 'c
//│  = [Function: t3]
//│ t2: 'a -> 'b
//│   where
//│     'c <: (forall 'd. 'd -> (forall 'd, 'e, 'f, 'g. ('e -> 'g
//│   where
//│     'd <: 'e -> 'f & 'f -> 'g))) -> 'b
//│     'h :> forall 'i. 'i -> (forall 'j, 'k, 'l, 'm, 'n. ('k -> 'o
//│   where
//│     'k <: ('j -> 'j -> (forall 'p. 'p -> 'p)) -> 'l
//│     'l <: (forall 'j, 'q. 'q -> 'j -> 'q) -> 'm
//│     'm <: (forall 'r. 'r -> (forall 'r, 's, 't. ('s -> 't
//│   where
//│     'r <: 's -> 't))) -> 'n
//│     'n <: (forall 'u. 'u -> (forall 'j, 'i, 'k, 'v, 'w, 'x, 'y, 'z, 'a1. ('w -> 'x
//│   where
//│     'v <: 'w -> 'x
//│     'i <: 'y -> 'z
//│     'k <: (forall 'b1. 'b1 -> (forall 'b1, 'c1, 'd1. ('d1 -> 'e1
//│   where
//│     'c1 <: (forall 'f1. 'f1 -> (forall 'j, 'b1, 'f1, 'g1, 'h1, 'i1, 'j1, 'k1. ('k1 -> 'h1
//│   where
//│     'f1 <: 'g1 -> 'h1
//│     'i1 <: 'f1 -> 'j1
//│     'j1 <: 'k1 -> 'g1
//│     'b1 <: ('j -> (forall 'p. 'p -> 'p)) -> 'i1))) -> 'e1
//│     'b1 <: ('j -> (forall 'p. 'p -> 'p)) -> 'l1
//│     'd1 <: 'l1 -> 'c1))) -> 'a1 & 'm1 -> 'v
//│     'a1 <: (forall 'j, 'n1, 'o1. ('n1 -> 'p1
//│   where
//│     'n1 <: ('j -> (forall 'p. 'p -> 'p)) -> 'o1
//│     'o1 <: ('j -> (forall 'p. 'p -> 'p)) -> 'p1)) -> 'j
//│     'j <: (forall 'j, 'q. 'q -> 'j -> 'q) -> 'y
//│     'z <: 'u -> 'm1))) -> 'o))
//│        <: ('j -> 'a) -> 'q1 & 'q1 -> 'r1 & 'r1 -> 's1
//│     's1 <: 'c
//│   = [Function: t21]

// FIXME
t id succ 0
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.329: 	t id succ 0
//│ ║         	^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  α680_1156  <:  ((‹∀ 0. ‹∀ 1. (α588'' -> ‹∀ 2. (α589''' -> α589''')›)››,) -> α682_1179)    TypeVariable  FunctionType
//│ ╙──  ... looks like:  α680^7  <:  ((‹∀ 0. ‹∀ 1. (α588'' -> ‹∀ 2. (α589''' -> α589''')›)››,) -> α682_1159^8)
//│ res: error | int
//│    = 2

t2 id succ 0
//│ res: int
//│    = 2

// let t y = (fun h -> h (h (h (h (fun x -> y))))) (fun f -> fun (n:Int) -> n (fun v -> k') k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k') (fun f -> fun x -> f (p k' f x))) (fun s -> s k' k') k) g) x)) three
def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
//│ t: 'a -> 'b
//│   where
//│     'c <: (forall 'd. 'd -> (forall 'd, 'e, 'f, 'g, 'h. ('e -> 'h
//│   where
//│     'd <: 'e -> 'f & 'f -> 'g & 'g -> 'h))) -> 'b
//│     'i :> forall 'j. 'j -> (forall 'k, 'l, 'm, 'n. (ChurchInt -> 'o
//│   where
//│     'k <: (forall 'p. 'p -> (forall 'j, 'q, 'r, 's, 'l, 't. ('u -> 'v
//│   where
//│     'q <: (forall 'w, 'x. 'x -> 'w -> 'x) -> 'y
//│     'r <: 'p -> 'z
//│     's <: 'u -> 'v
//│     'j <: 'y -> 'r
//│     'l <: (forall 'a1. 'a1 -> (forall 'w, 'a1, 'b1, 'c1. ('b1 -> 'd1
//│   where
//│     'a1 <: ('w -> (forall 'e1. 'e1 -> 'e1)) -> 'f1
//│     'b1 <: 'f1 -> 'c1
//│     'c1 <: (forall 'g1. 'g1 -> (forall 'w, 'a1, 'g1, 'h1, 'i1. ('j1 -> 'k1
//│   where
//│     'a1 <: ('w -> (forall 'e1. 'e1 -> 'e1)) -> 'h1
//│     'g1 <: 'l1 -> 'k1
//│     'h1 <: 'g1 -> 'i1
//│     'i1 <: 'j1 -> 'l1))) -> 'd1))) -> 't & 'z -> 's
//│     't <: (forall 'w, 'm1, 'n1. ('n1 -> 'o1
//│   where
//│     'm1 <: ('w -> (forall 'e1. 'e1 -> 'e1)) -> 'o1
//│     'n1 <: ('w -> (forall 'e1. 'e1 -> 'e1)) -> 'm1)) -> 'q))) -> 'o
//│     'l :> ChurchInt
//│        <: ChurchInt & ('w -> 'w -> (forall 'e1. 'e1 -> 'e1)) -> 'm
//│     'm <: (forall 'w, 'x. 'x -> 'w -> 'x) -> 'n
//│     'n <: (forall 'w. 'w -> (forall 'w, 'p1, 'q1. ('p1 -> 'q1
//│   where
//│     'w <: 'p1 -> 'q1))) -> 'k))
//│        <: ('w -> 'a) -> 'r1 & 'r1 -> 's1 & 's1 -> 't1
//│     't1 <: 'c
//│  = [Function: t4]
//│ t2: 'a -> 'b
//│   where
//│     'c <: (forall 'd. 'd -> (forall 'd, 'e, 'f, 'g, 'h. ('e -> 'h
//│   where
//│     'd <: 'e -> 'f & 'f -> 'g & 'g -> 'h))) -> 'b
//│     'i :> forall 'j. 'j -> (forall 'k, 'l, 'm, 'n, 'o. ('l -> 'p
//│   where
//│     'l <: ('k -> 'k -> (forall 'q. 'q -> 'q)) -> 'm
//│     'm <: (forall 'k, 'r. 'r -> 'k -> 'r) -> 'n
//│     'n <: (forall 's. 's -> (forall 's, 't, 'u. ('t -> 'u
//│   where
//│     's <: 't -> 'u))) -> 'o
//│     'o <: (forall 'v. 'v -> (forall 'k, 'j, 'l, 'w, 'x, 'y, 'z. ('a1 -> 'b1
//│   where
//│     'j <: 'w -> 'x
//│     'l <: (forall 'c1. 'c1 -> (forall 'k, 'c1, 'd1, 'e1. ('d1 -> 'f1
//│   where
//│     'c1 <: ('k -> (forall 'q. 'q -> 'q)) -> 'g1
//│     'd1 <: 'g1 -> 'e1
//│     'e1 <: (forall 'h1. 'h1 -> (forall 'k, 'c1, 'h1, 'i1, 'j1, 'k1, 'l1. ('k1 -> 'm1
//│   where
//│     'i1 <: 'h1 -> 'j1
//│     'j1 <: 'k1 -> 'l1
//│     'c1 <: ('k -> (forall 'q. 'q -> 'q)) -> 'i1
//│     'h1 <: 'l1 -> 'm1))) -> 'f1))) -> 'y & 'n1 -> 'z
//│     'y <: (forall 'k, 'o1, 'p1. ('o1 -> 'q1
//│   where
//│     'o1 <: ('k -> (forall 'q. 'q -> 'q)) -> 'p1
//│     'p1 <: ('k -> (forall 'q. 'q -> 'q)) -> 'q1)) -> 'k
//│     'k <: (forall 'k, 'r. 'r -> 'k -> 'r) -> 'w
//│     'x <: 'v -> 'n1
//│     'z <: 'a1 -> 'b1))) -> 'p))
//│        <: ('k -> 'a) -> 'r1 & 'r1 -> 's1 & 's1 -> 't1
//│     't1 <: 'c
//│   = [Function: t22]

// (* This comment is from the ORIGINAL PAGE: *)
// (* Factorial of three. Exposed bugs in old implementation. This one works correctly, but the generated files take up to 3.8GB, and it takes about 1 hour on a 2GHz PIII box to get the result. You can see the final judgement here. Yes, the result is the Church numeral for 6. *)

// (* We test that the result is 6: *)
// let succ n = n + 1 ;;
// t id succ 0 ;;

// FIXME
t id succ 0
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.426: 	t id succ 0
//│ ║         	^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  α1699_2270  <:  ((‹∀ 0. ‹∀ 1. (α588'' -> ‹∀ 2. (α589''' -> α589''')›)››,) -> α1701_2299)    TypeVariable  FunctionType
//│ ╙──  ... looks like:  α1699^7  <:  ((‹∀ 0. ‹∀ 1. (α588'' -> ‹∀ 2. (α589''' -> α589''')›)››,) -> α1701_2273^8)
//│ res: error
//│    = 6

:e // TODO try without cycle check // works with quantif extrus
t2 id succ 0
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.437: 	t2 id succ 0
//│ ║         	^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  int<number>  <:  α589_3123    ClassTag  TypeVariable
//│ ╙──  ... looks like:  int<number>  <:  α589'''
//│ res: error
//│    = 6

// let t (z : 0) = let x = (fun (y: ['t > 0] 'a -> 't) -> y z y) in x x;;
def t (z: nothing) = let x = fun (y: forall 't. 'a -> 't) -> y z y in x x
//│ t: nothing -> 'b
//│   where
//│     'a <: forall 't. 'a0 -> 't
//│     'c <: 'b
//│     'd :> forall 't. 'a0 -> 't
//│        <: (forall 't. 'a0 -> 't) & 'e -> 'f
//│     'f <: 'd -> 'g
//│     'e :> 'h
//│        <: nothing
//│     'g <: ‘t
//│     'h :> forall 't0. 'a -> 't0
//│        <: (forall 't0. 'a -> 't0) & 'e -> 'i
//│     'i <: 'h -> 'c
//│  = [Function: t5]

// (* Plus petit. *)
// type tt = ['b = 0] ['c > ['a] ['d = ['t] 'a -> 't] ['e] 'd -> 'e] 'b -> 'c ;;
// let t (z : 0) = let x = (fun (y: ['t > 0] 'a -> 't) -> y z) in x x;;
type Tt = forall 'b 'c. ('b & nothing) -> ('c | (forall 'a 'd 'e. ('d & (forall 't. 'a -> 't))) -> 'e)
def t (z: nothing) = let x = fun (y: forall 't. 'a -> 't) -> y z in x x
//│ Defined type alias Tt
//│ t: nothing -> 'b
//│   where
//│     'c <: ‘t
//│     'd :> 'd
//│        <: nothing
//│     'e :> forall 't. 'a -> 't
//│        <: (forall 't. 'a -> 't) & 'd -> 'f
//│     'a <: forall 't0. 'a0 -> 't0
//│     'f <: 'b
//│     'g :> forall 't0. 'a0 -> 't0
//│        <: (forall 't0. 'a0 -> 't0) & 'd -> 'c
//│  = [Function: t6]

// (*
//     * Rank 3, untypable in System F?
//       (fun x -> z (x (fun f -> fun u -> f u)) (x (fun v -> fun g -> g v))) (fun y -> y y y)
// FIXME: z is free???

//     * Untypable at any rank
//       (fun x -> x x) (fun x -> x x)
:e // TODO show failure without cycle check // works with quantif extrus
:re
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.492: 	(fun x -> x x) (fun x -> x x)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. {(α3410' -> α3411') where: α3410' <: ((α3410',) -> α3411')}›  <:  α3410_3417    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. {(α3410' -> α3411') where: α3410' <: ((α3410',) -> α3411')}›  <:  α3410'
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

//     * Rank 3, untypable in F2 but F3
//       (fun f x -> f (f x)) (fun f x -> f (f x)) (fun v w -> v)
(fun f -> fun x -> f (f x)) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ res: 'a -> 'b
//│   where
//│     'c <: 'a -> 'd & 'd -> 'b
//│    = [Function (anonymous)]

//     * Rank 4, alternate formulation, untypeable in F2, but F3
//       (fun two k -> two two k)(fun f x -> f (f x)) (fun v w -> v)
(fun two -> fun k -> two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ res: 'a -> 'b
//│   where
//│     'c <: 'a -> 'd & 'd -> 'b
//│    = [Function (anonymous)]

//     * Rank 5, causes huge blowup. Do not attempt to output skeletons !
//       (fun two k -> two two two k)(fun f -x -> f (f x)) (fun v w -> v)
// * Note: the only example in this file that requires `:GeneralizeCurriedFunctions`
(fun two -> fun k -> two two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ res: 'a -> 'b
//│   where
//│     'c <: 'a -> 'd & 'd -> 'b
//│    = [Function (anonymous)]



//  ?????
//     * Factorial of two, using the Y combinator
//       (fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))

// *)
:e // works with quantif extrus
:re
(fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.537: 	(fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. {(α3586_3641'' -> α3588_3643'') where: α3586_3641'' <: ((α3586_3641'',) -> α3587_3642''), α3582_3639 <: ((α3587_3642'',) -> α3588_3643'')}›  <:  α3586_3648    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. {(α3586'' -> α3588'') where: α3586_3641'' <: ((α3586'',) -> α3587''), α3582_3639 <: ((α3587'',) -> α3588'')}›  <:  α3586_3641''
//│ res: 'a -> (forall 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm. ('c -> 'd
//│   where
//│     'b <: 'c -> 'd
//│     'e <: (forall 'n, 'o, 'p, 'f. ('n -> 'f
//│   where
//│     'n <: ('o -> (forall 'q. 'q -> 'q)) -> 'p
//│     'p <: ('o -> (forall 'r. 'r -> 'r)) -> 'f)) -> 'g
//│     's <: 'h -> 'i
//│     't <: (forall 'u, 'j, 'k, 'l. 'u -> (forall 'o, 'u, 'j, 'v, 'w, 'k, 'l. ('v -> 'l
//│   where
//│     'u <: ('o -> (forall 'x. 'x -> 'x)) -> 'j
//│     'v <: 'j -> 'w
//│     'w <: (forall 'y, 'k. 'y -> (forall 'o, 'u, 'y, 'z, 'a1, 'b1, 'k. ('a1 -> 'k
//│   where
//│     'z <: 'y -> 'o
//│     'o <: 'a1 -> 'b1
//│     'u <: ('o -> (forall 'c1. 'c1 -> 'c1)) -> 'z
//│     'y <: 'b1 -> 'k))) -> 'l))) -> 'e & 'm -> 'b
//│     'g <: (forall 'o, 'd1. 'd1 -> 'o -> 'd1) -> 'h
//│     'i <: 'a -> 'm)) | error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded


