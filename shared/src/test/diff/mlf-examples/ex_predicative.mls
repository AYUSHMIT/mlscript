:NoRecursiveTypes
:GeneralizeCurriedFunctions

// type bot = 0;;
type Bot = forall 'a. 'a
//│ Defined type alias Bot

// (* Rank 6 with intersection types, untypable in predicative System F,
//    typable in impredicative System F *)


// let imp (z : bot) =
//   (fun (x : ['a] ('a -> 'u) -> 'v) -> x x)
//   (fun (y : 'a -> bot) -> y z y);;
def imp (z: Bot) =
  (fun (x: forall 'a. ('a -> 'u) -> 'v) -> x x)
  (fun (y: 'a -> Bot) -> y z y)
def imp' z =
  (fun x -> x x)
  (fun y -> y z y)
//│ /!!!\ Uncaught error: java.util.NoSuchElementException: key not found: Bot
//│ 	at: scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:635)
//│ 	at: scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:633)
//│ 	at: scala.collection.immutable.HashMap.apply(HashMap.scala:132)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expandWith(TyperDatatypes.scala:334)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expand(TyperDatatypes.scala:332)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65(ConstraintSolver.scala:674)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65$adapted(ConstraintSolver.scala:432)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$62(ConstraintSolver.scala:432)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)


// (* Quelques constantes. *)

// type sid = ['a] 'a -> 'a
type Sid = forall 'a. 'a -> 'a
//│ Defined type alias Sid

// let id = fun x -> x
// ;;
def id = fun x -> x
//│ id: 'a -> 'a
//│   = [Function: id]

// let delta = fun (x:sid) -> x x
// ;;
def delta = fun (x: Sid) -> x x
def delta' = fun x -> x x
//│ delta: Sid -> (forall 'a, 'b. ('b
//│   where
//│     'a <: 'a -> 'b))
//│      = [Function: delta]
//│ delta': ('a -> anything & 'a) -> (forall 'a, 'b. ('b
//│   where
//│     'a <: 'a -> 'b))
//│       = [Function: delta]

// delta id ;;
delta id
delta' id
//│ /!!!\ Uncaught error: java.util.NoSuchElementException: key not found: Sid
//│ 	at: scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:635)
//│ 	at: scala.collection.immutable.HashMap.apply(HashMap.scala:132)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expandWith(TyperDatatypes.scala:334)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expand(TyperDatatypes.scala:332)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65(ConstraintSolver.scala:674)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65$adapted(ConstraintSolver.scala:432)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$62(ConstraintSolver.scala:432)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)

// let t a b c d e = (fun x -> a x x) ((fun y -> b (c y)) (d e)) ;;
def t a b c d e = (fun x -> a x x) ((fun y -> b (c y)) (d e))
//│ t: (nothing -> nothing -> 'a & 'b) -> (forall 'a, 'c. (nothing -> 'a & 'c) -> (forall 'a, 'd. (nothing -> 'a & 'd) -> (forall 'a. (nothing -> 'a & 'a) -> (forall 'e. 'e -> (forall 'a, 'b. ('f
//│   where
//│     'b <: (forall 'c, 'd, 'g, 'h, 'i. ('h
//│   where
//│     'c <: 'g -> 'h
//│     'd <: 'i -> 'g)) -> (forall 'c, 'd, 'g, 'h, 'i. ('h
//│   where
//│     'c <: 'g -> 'h
//│     'd <: 'i -> 'g)) -> 'f
//│     'a <: 'e -> 'i))))))
//│  = [Function: t]

// let t w z a b = (fun y -> (fun x -> w (x y) z) a) b ;;
def t w z a b = (fun y -> (fun x -> w (x y) z) a) b
//│ t: (nothing -> nothing -> 'a & 'b) -> (forall 'c. 'c -> (forall 'a, 'd. (nothing -> 'a & 'd) -> (forall 'e. 'e -> (forall 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h. ('g
//│   where
//│     'b <: 'f -> 'c -> 'g
//│     'a <: 'h -> 'f
//│     'd <: 'h -> 'a & 'a
//│     'e <: 'h)))))
//│  = [Function: t1]

// let t y a = (fun x -> x (x y)) ((fun z -> z) (fun x -> a x)) ;;
def t y a = (fun x -> x (x y)) ((fun z -> z) (fun x -> a x))
//│ t: 'a -> (nothing -> anything) -> (forall 'a, 'b, 'c, 'd. ('d
//│   where
//│     'b <: 'a -> 'c & 'c -> 'd
//│     'a <: anything))
//│  = [Function: t2]

// (* Rank 1 *)
// (fun x -> fun y -> x y) (fun y -> fun x -> x y) ;;
(fun x -> fun y -> x y) (fun y -> fun x -> x y)
//│ res: 'a -> (forall 'a, 'b. ('b
//│   where
//│     'c <: 'a -> 'b))
//│    = [Function (anonymous)]

// (* Rank 3 *)
// (fun x -> fun y -> x) delta ;;
(fun x -> fun y -> x) delta
(fun x -> fun y -> x) delta'
//│ res: anything -> Sid -> (forall 'a, 'b. ('b
//│   where
//│     'a <: 'a -> 'b))
//│    = [Function (anonymous)]
//│ res: anything -> (forall 'a. ('a -> anything & 'a) -> (forall 'a, 'b. ('b
//│   where
//│     'a <: 'a -> 'b)))
//│    = [Function (anonymous)]

// (* Rank 5 *)
// (fun x -> fun y -> x y) (fun y -> fun x -> x y) delta ;;
(fun x -> fun y -> x y) (fun y -> fun x -> x y) delta
(fun x -> fun y -> x y) (fun y -> fun x -> x y) delta'
//│ res: 'a
//│   where
//│     'b <: (Sid -> (forall 'c, 'd. ('d
//│   where
//│     'c <: 'c -> 'd))) -> 'a
//│    = [Function (anonymous)]
//│ res: 'a
//│   where
//│     'b <: (forall 'c. ('c -> anything & 'c) -> (forall 'c, 'd. ('d
//│   where
//│     'c <: 'c -> 'd))) -> 'a
//│    = [Function (anonymous)]

// (* Rank 8 *)
// (fun (x:sid) -> x x x x x) id delta ;;
(fun (x: Sid) -> x x x x x) id delta
(fun x -> x x x x x) id delta'
//│ /!!!\ Uncaught error: java.util.NoSuchElementException: key not found: Sid
//│ 	at: scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:635)
//│ 	at: scala.collection.immutable.HashMap.apply(HashMap.scala:132)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expandWith(TyperDatatypes.scala:334)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expand(TyperDatatypes.scala:332)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65(ConstraintSolver.scala:674)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65$adapted(ConstraintSolver.scala:432)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$62(ConstraintSolver.scala:432)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)

// (* Rank 2 *)
// type sk = ['a,'b] 'a -> 'b -> 'a;;
// (fun (f:sk) -> fun x -> f f x) (fun v -> fun w -> v) ;;
type Sk = forall 'a 'b. 'a -> 'b -> 'a
(fun (f: Sk) -> fun x -> f f x) (fun v -> fun w -> v)
(fun f -> fun x -> f f x) (fun v -> fun w -> v)
//│ Defined type alias Sk
//│ /!!!\ Uncaught error: java.util.NoSuchElementException: key not found: Sk
//│ 	at: scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:635)
//│ 	at: scala.collection.immutable.HashMap.apply(HashMap.scala:132)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expandWith(TyperDatatypes.scala:334)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expand(TyperDatatypes.scala:332)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65(ConstraintSolver.scala:674)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65$adapted(ConstraintSolver.scala:432)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$62(ConstraintSolver.scala:432)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)

// (* Rank 3 *)
// (fun t -> fun k -> t k) (fun (f:sk) -> fun x -> f f x) (fun v -> fun w -> v);;
(fun t -> fun k -> t k) (fun (f: Sk) -> fun x -> f f x) (fun v -> fun w -> v)
(fun t -> fun k -> t k) (fun f -> fun x -> f f x) (fun v -> fun w -> v)
//│ /!!!\ Uncaught error: java.util.NoSuchElementException: key not found: Sk
//│ 	at: scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:635)
//│ 	at: scala.collection.immutable.HashMap.apply(HashMap.scala:132)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expandWith(TyperDatatypes.scala:334)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expand(TyperDatatypes.scala:332)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65(ConstraintSolver.scala:674)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65$adapted(ConstraintSolver.scala:432)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$62(ConstraintSolver.scala:432)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)


// let k = fun x y -> x
// let k' = fun x y -> y
// let app = fun f x -> f x
// let two = fun f x -> f (f x)
// let three = fun f x -> f (f (f x))
def k = fun x -> fun y -> x
def k2 = fun x -> fun y -> y
def app = fun f -> fun x -> f x
def two = fun f -> fun x -> f (f x)
def three = fun f -> fun x -> f (f (f x))
//│ k: 'a -> anything -> 'a
//│  = [Function: k]
//│ k2: anything -> (forall 'a. 'a -> 'a)
//│   = [Function: k2]
//│ app: (nothing -> 'a & 'a) -> (forall 'b. 'b -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'a <: 'b -> 'c)))
//│    = [Function: app]
//│ two: (nothing -> 'a & 'a) -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd. ('d
//│   where
//│     'a <: 'b -> 'c & 'c -> 'd)))
//│    = [Function: two]
//│ three: (nothing -> 'a & 'a) -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e. ('e
//│   where
//│     'a <: 'b -> 'c & 'c -> 'd & 'd -> 'e)))
//│      = [Function: three]


// * Tony noticed this did not work before this commit generalizing the LHS of ascriptions...
(app id): Sid
//│ res: Sid
//│    = [Function (anonymous)]
// * this one worked:
let t = app id in t: Sid
//│ res: Sid
//│    = [Function (anonymous)]


// type Int = ['a] ('a -> 'a) -> ('a -> 'a)
// ;;
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt

// (* Factorial of two and three *)
// (* Only ONE annotation ! *)
// let t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n:Int) -> n (fun v -> k') k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k') (fun f -> fun x -> f (p k' f x))) (fun s -> s k' k') k) g) x)) two ;;

// :e // due to tapping
def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ /!!!\ Uncaught error: java.lang.StackOverflowError

// FIXME
t id succ 0
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.249: 	t id succ 0
//│ ║         	^^^^^^^^^
//│ ╟── function of type `?a -> ?a` is not an instance of type `int`
//│ ║  l.42: 	def id = fun x -> x
//│ ║        	         ^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.249: 	t id succ 0
//│ ╙──       	  ^^
//│ res: error
//│    = 2

//:e // due to tapping
t2 id succ 0
//│ ╔══[ERROR] identifier not found: t2
//│ ║  l.263: 	t2 id succ 0
//│ ╙──       	^^
//│ res: error
//│    = 2

// let t y = (fun h -> h (h (h (h (fun x -> y))))) (fun f -> fun (n:Int) -> n (fun v -> k') k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k') (fun f -> fun x -> f (p k' f x))) (fun s -> s k' k') k) g) x)) three

// :e // due to tapping
def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
//│ /!!!\ Uncaught error: java.lang.StackOverflowError

// (* This comment is from the ORIGINAL PAGE: *)
// (* Factorial of three. Exposed bugs in old implementation. This one works correctly, but the generated files take up to 3.8GB, and it takes about 1 hour on a 2GHz PIII box to get the result. You can see the final judgement here. Yes, the result is the Church numeral for 6. *)

// (* We test that the result is 6: *)
// let succ n = n + 1 ;;
// t id succ 0 ;;

// FIXME
t id succ 0
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.285: 	t id succ 0
//│ ║         	^^^^^^^^^
//│ ╟── function of type `?a -> ?a` is not an instance of type `int`
//│ ║  l.42: 	def id = fun x -> x
//│ ║        	         ^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.285: 	t id succ 0
//│ ╙──       	  ^^
//│ res: error
//│    = 6

// :e // TODO try without cycle check // works with quantif extrus
t2 id succ 0
//│ ╔══[ERROR] identifier not found: t2
//│ ║  l.299: 	t2 id succ 0
//│ ╙──       	^^
//│ res: error
//│    = 6

// let t (z : 0) = let x = (fun (y: ['t > 0] 'a -> 't) -> y z y) in x x;;
def t (z: nothing) = let x = fun (y: forall 't. 'a -> 't) -> y z y in x x
//│ t: nothing -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'a <: 'b -> 'a -> 'c
//│     'b <: 'a -> anything))
//│  = [Function: t5]

// (* Plus petit. *)
// type tt = ['b = 0] ['c > ['a] ['d = ['t] 'a -> 't] ['e] 'd -> 'e] 'b -> 'c ;;
// let t (z : 0) = let x = (fun (y: ['t > 0] 'a -> 't) -> y z) in x x;;
type Tt = forall 'b 'c. ('b & nothing) -> ('c | (forall 'a 'd 'e. ('d & (forall 't. 'a -> 't))) -> 'e)
def t (z: nothing) = let x = fun (y: forall 't. 'a -> 't) -> y z in x x
//│ Defined type alias Tt
//│ t: nothing -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'a <: 'b -> 'c
//│     'b <: 'b -> anything))
//│  = [Function: t6]

// (*
//     * Rank 3, untypable in System F?
//       (fun x -> z (x (fun f -> fun u -> f u)) (x (fun v -> fun g -> g v))) (fun y -> y y y)
// FIXME: z is free???

//     * Untypable at any rank
//       (fun x -> x x) (fun x -> x x)
// :e // TODO show failure without cycle check // works with quantif extrus
:re
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b. ?b -> (forall ?c, ?d, ?a, ?b. (?d
//│   where
//│     ?c <: ?b -> ?d)) <: (forall ?e, ?f. ?f -> (forall ?g, ?h, ?e, ?f. (?h
//│   where
//│     ?g <: ?f -> ?h))) -> ?i` exceeded recursion depth limit (300)
//│ ║  l.335: 	(fun x -> x x) (fun x -> x x)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. (α3505' -> ‹∀ 1. {α3506'' where: α3505' <: ((α3505',) -> α3506'')}›)›  <!<  α3505_3549
//│ ╟── while constraining:  α3505_3545  <!<  α3505_3549
//│ ╟── while constraining:  (α3505_3545,)  <!<  (α3505_3549,)
//│ ╟── while constraining:  (α3505_3549 -> ‹∀ 1. {α3506_3551'' where: α3505_3549 <: ((α3505_3549,) -> α3506_3551'')}›)  <!<  ((α3505_3545,) -> α3506_3548)
//│ ╟── while constraining:  ‹∀ 0. (α3505' -> ‹∀ 1. {α3506'' where: α3505' <: ((α3505',) -> α3506'')}›)›  <!<  ((α3505_3545,) -> α3506_3548)
//│ ╟── while constraining:  ‹∀ 0. (α3505' -> ‹∀ 1. {α3506'' where: α3505' <: ((α3505',) -> α3506'')}›)›  <!<  α3505_3545
//│ ╟── while constraining:  α3505_3541  <!<  α3505_3545
//│ ╟── while constraining:  (α3505_3541,)  <!<  (α3505_3545,)
//│ ╟── while constraining:  (α3505_3545 -> ‹∀ 1. {α3506_3547'' where: α3505_3545 <: ((α3505_3545,) -> α3506_3547'')}›)  <!<  ((α3505_3541,) -> α3506_3544)
//│ ╟── while constraining:  ‹∀ 0. (α3505' -> ‹∀ 1. {α3506'' where: α3505' <: ((α3505',) -> α3506'')}›)›  <!<  ((α3505_3541,) -> α3506_3544)
//│ ╟── while constraining:  ‹∀ 0. (α3505' -> ‹∀ 1. {α3506'' where: α3505' <: ((α3505',) -> α3506'')}›)›  <!<  α3505_3541
//│ ╟── while constraining:  α3505_3537  <!<  α3505_3541
//│ ╟── while constraining:  (α3505_3537,)  <!<  (α3505_3541,)
//│ ╟── while constraining:  (α3505_3541 -> ‹∀ 1. {α3506_3543'' where: α3505_3541 <: ((α3505_3541,) -> α3506_3543'')}›)  <!<  ((α3505_3537,) -> α3506_3540)
//│ ╟── while constraining:  ‹∀ 0. (α3505' -> ‹∀ 1. {α3506'' where: α3505' <: ((α3505',) -> α3506'')}›)›  <!<  ((α3505_3537,) -> α3506_3540)
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 0. (α3505' -> ‹∀ 1. {α3506'' where: α3505' <: ((α3505',) -> α3506'')}›)›  <!<  ((α3505_3517,) -> α3506_3520)
//│ ╟── while constraining:  ‹∀ 0. (α3505' -> ‹∀ 1. {α3506'' where: α3505' <: ((α3505',) -> α3506'')}›)›  <!<  α3505_3517
//│ ╟── while constraining:  α3505_3513  <!<  α3505_3517
//│ ╟── while constraining:  (α3505_3513,)  <!<  (α3505_3517,)
//│ ╟── while constraining:  (α3505_3517 -> ‹∀ 1. {α3506_3519'' where: α3505_3517 <: ((α3505_3517,) -> α3506_3519'')}›)  <!<  ((α3505_3513,) -> α3506_3516)
//│ ╟── while constraining:  ‹∀ 0. (α3505' -> ‹∀ 1. {α3506'' where: α3505' <: ((α3505',) -> α3506'')}›)›  <!<  ((α3505_3513,) -> α3506_3516)
//│ ╟── while constraining:  ‹∀ 0. (α3505' -> ‹∀ 1. {α3506'' where: α3505' <: ((α3505',) -> α3506'')}›)›  <!<  α3505_3513
//│ ╟── while constraining:  α3502_3509  <!<  α3505_3513
//│ ╟── while constraining:  (α3502_3509,)  <!<  (α3505_3513,)
//│ ╟── while constraining:  (α3505_3513 -> ‹∀ 1. {α3506_3515'' where: α3505_3513 <: ((α3505_3513,) -> α3506_3515'')}›)  <!<  ((α3502_3509,) -> α3503_3512)
//│ ╟── while constraining:  ‹∀ 0. (α3505' -> ‹∀ 1. {α3506'' where: α3505' <: ((α3505',) -> α3506'')}›)›  <!<  ((α3502_3509,) -> α3503_3512)
//│ ╟── while constraining:  ‹∀ 0. (α3505' -> ‹∀ 1. {α3506'' where: α3505' <: ((α3505',) -> α3506'')}›)›  <!<  α3502_3509
//│ ╟── while constraining:  (‹∀ 0. (α3505' -> ‹∀ 1. {α3506'' where: α3505' <: ((α3505',) -> α3506'')}›)›,)  <!<  (α3502_3509,)
//│ ╟── while constraining:  (α3502_3509 -> ‹∀ 1. {α3503_3511'' where: α3502_3509 <: ((α3502_3509,) -> α3503_3511'')}›)  <!<  ((‹∀ 0. (α3505' -> ‹∀ 1. {α3506'' where: α3505' <: ((α3505',) -> α3506'')}›)›,) -> α3508)
//│ ╙── while constraining:  ‹∀ 0. (α3502' -> ‹∀ 1. {α3503'' where: α3502' <: ((α3502',) -> α3503'')}›)›  <!<  ((‹∀ 0. (α3505' -> ‹∀ 1. {α3506'' where: α3505' <: ((α3505',) -> α3506'')}›)›,) -> α3508)
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

//     * Rank 3, untypable in F2 but F3
//       (fun f x -> f (f x)) (fun f x -> f (f x)) (fun v w -> v)
(fun f -> fun x -> f (f x)) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ res: 'a
//│   where
//│     'b <: (forall 'c. 'c -> anything -> 'c) -> 'd & 'd -> 'a
//│    = [Function (anonymous)]

//     * Rank 4, alternate formulation, untypeable in F2, but F3
//       (fun two k -> two two k)(fun f x -> f (f x)) (fun v w -> v)
(fun two -> fun k -> two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ res: 'a
//│   where
//│     'b <: 'b -> (forall 'c. 'c -> anything -> 'c) -> 'a
//│    = [Function (anonymous)]

//     * Rank 5, causes huge blowup. Do not attempt to output skeletons !
//       (fun two k -> two two two k)(fun f -x -> f (f x)) (fun v w -> v)
// * Note: the only example in this file that requires `:GeneralizeCurriedFunctions`
// :e // due to not stashing...?
(fun two -> fun k -> two two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ res: 'a
//│   where
//│     'b <: 'b -> 'b -> (forall 'c. 'c -> anything -> 'c) -> 'a
//│    = [Function (anonymous)]



//  ?????
//     * Factorial of two, using the Y combinator
//       (fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))

// *)
// :e // works with quantif extrus
:re
(fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b. ?b -> (forall ?c, ?d, ?e, ?a, ?b. (?e
//│   where
//│     ?f <: ?d -> ?e
//│     ?c <: ?b -> ?d)) <: (forall ?g, ?h. ?h -> (forall ?i, ?j, ?k, ?g, ?h. (?k
//│   where
//│     ?i <: ?h -> ?j
//│     ?f <: ?j -> ?k))) -> ?l` exceeded recursion depth limit (300)
//│ ║  l.414: 	(fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))
//│ ║         	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 2. (α7156''' -> ‹∀ 3. {α7158'''' where: α7156''' <: ((α7156''',) -> α7157''''), α7149' <: ((α7157'''',) -> α7158'''')}›)›  <!<  α7156_7233''
//│ ╟── while constraining:  α7156_7226''  <!<  α7156_7233''
//│ ╟── while constraining:  (α7156_7226'',)  <!<  (α7156_7233'',)
//│ ╟── while constraining:  (α7156_7233'' -> ‹∀ 3. {α7158_7236'''' where: α7156_7233'' <: ((α7156_7233'',) -> α7157_7235''''), α7149' <: ((α7157_7235'''',) -> α7158_7236'''')}›)  <!<  ((α7156_7226'',) -> α7157_7230'')
//│ ╟── while constraining:  ‹∀ 2. (α7156''' -> ‹∀ 3. {α7158'''' where: α7156''' <: ((α7156''',) -> α7157''''), α7149' <: ((α7157'''',) -> α7158'''')}›)›  <!<  ((α7156_7226'',) -> α7157_7230'')
//│ ╟── while constraining:  ‹∀ 2. (α7156''' -> ‹∀ 3. {α7158'''' where: α7156''' <: ((α7156''',) -> α7157''''), α7149' <: ((α7157'''',) -> α7158'''')}›)›  <!<  α7156_7226''
//│ ╟── while constraining:  α7156_7219''  <!<  α7156_7226''
//│ ╟── while constraining:  (α7156_7219'',)  <!<  (α7156_7226'',)
//│ ╟── while constraining:  (α7156_7226'' -> ‹∀ 3. {α7158_7229'''' where: α7156_7226'' <: ((α7156_7226'',) -> α7157_7228''''), α7149' <: ((α7157_7228'''',) -> α7158_7229'''')}›)  <!<  ((α7156_7219'',) -> α7157_7223'')
//│ ╟── while constraining:  ‹∀ 2. (α7156''' -> ‹∀ 3. {α7158'''' where: α7156''' <: ((α7156''',) -> α7157''''), α7149' <: ((α7157'''',) -> α7158'''')}›)›  <!<  ((α7156_7219'',) -> α7157_7223'')
//│ ╟── while constraining:  ‹∀ 2. (α7156''' -> ‹∀ 3. {α7158'''' where: α7156''' <: ((α7156''',) -> α7157''''), α7149' <: ((α7157'''',) -> α7158'''')}›)›  <!<  α7156_7219''
//│ ╟── while constraining:  α7156_7212''  <!<  α7156_7219''
//│ ╟── while constraining:  (α7156_7212'',)  <!<  (α7156_7219'',)
//│ ╟── while constraining:  (α7156_7219'' -> ‹∀ 3. {α7158_7222'''' where: α7156_7219'' <: ((α7156_7219'',) -> α7157_7221''''), α7149' <: ((α7157_7221'''',) -> α7158_7222'''')}›)  <!<  ((α7156_7212'',) -> α7157_7216'')
//│ ╟── while constraining:  ‹∀ 2. (α7156''' -> ‹∀ 3. {α7158'''' where: α7156''' <: ((α7156''',) -> α7157''''), α7149' <: ((α7157'''',) -> α7158'''')}›)›  <!<  ((α7156_7212'',) -> α7157_7216'')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 2. (α7156''' -> ‹∀ 3. {α7158'''' where: α7156''' <: ((α7156''',) -> α7157''''), α7149' <: ((α7157'''',) -> α7158'''')}›)›  <!<  ((α7156_7177'',) -> α7157_7181'')
//│ ╟── while constraining:  ‹∀ 2. (α7156''' -> ‹∀ 3. {α7158'''' where: α7156''' <: ((α7156''',) -> α7157''''), α7149' <: ((α7157'''',) -> α7158'''')}›)›  <!<  α7156_7177''
//│ ╟── while constraining:  α7156_7170''  <!<  α7156_7177''
//│ ╟── while constraining:  (α7156_7170'',)  <!<  (α7156_7177'',)
//│ ╟── while constraining:  (α7156_7177'' -> ‹∀ 3. {α7158_7180'''' where: α7156_7177'' <: ((α7156_7177'',) -> α7157_7179''''), α7149' <: ((α7157_7179'''',) -> α7158_7180'''')}›)  <!<  ((α7156_7170'',) -> α7157_7174'')
//│ ╟── while constraining:  ‹∀ 2. (α7156''' -> ‹∀ 3. {α7158'''' where: α7156''' <: ((α7156''',) -> α7157''''), α7149' <: ((α7157'''',) -> α7158'''')}›)›  <!<  ((α7156_7170'',) -> α7157_7174'')
//│ ╟── while constraining:  ‹∀ 2. (α7156''' -> ‹∀ 3. {α7158'''' where: α7156''' <: ((α7156''',) -> α7157''''), α7149' <: ((α7157'''',) -> α7158'''')}›)›  <!<  α7156_7170''
//│ ╟── while constraining:  α7150_7163''  <!<  α7156_7170''
//│ ╟── while constraining:  (α7150_7163'',)  <!<  (α7156_7170'',)
//│ ╟── while constraining:  (α7156_7170'' -> ‹∀ 3. {α7158_7173'''' where: α7156_7170'' <: ((α7156_7170'',) -> α7157_7172''''), α7149' <: ((α7157_7172'''',) -> α7158_7173'''')}›)  <!<  ((α7150_7163'',) -> α7151_7169'')
//│ ╟── while constraining:  ‹∀ 2. (α7156''' -> ‹∀ 3. {α7158'''' where: α7156''' <: ((α7156''',) -> α7157''''), α7149' <: ((α7157'''',) -> α7158'''')}›)›  <!<  ((α7150_7163'',) -> α7151_7169'')
//│ ╟── while constraining:  ‹∀ 2. (α7156''' -> ‹∀ 3. {α7158'''' where: α7156''' <: ((α7156''',) -> α7157''''), α7149' <: ((α7157'''',) -> α7158'''')}›)›  <!<  α7150_7163''
//│ ╟── while constraining:  (‹∀ 2. (α7156''' -> ‹∀ 3. {α7158'''' where: α7156''' <: ((α7156''',) -> α7157''''), α7149' <: ((α7157'''',) -> α7158'''')}›)›,)  <!<  (α7150_7163'',)
//│ ╟── while constraining:  (α7150_7163'' -> ‹∀ 3. {α7152_7166'''' where: α7149' <: ((α7151_7165'''',) -> α7152_7166''''), α7150_7163'' <: ((α7150_7163'',) -> α7151_7165'''')}›)  <!<  ((‹∀ 2. (α7156''' -> ‹∀ 3. {α7158'''' where: α7156''' <: ((α7156''',) -> α7157''''), α7149' <: ((α7157'''',) -> α7158'''')}›)›,) -> α7162'')
//│ ╙── while constraining:  ‹∀ 2. (α7150''' -> ‹∀ 3. {α7152'''' where: α7149' <: ((α7151'''',) -> α7152''''), α7150''' <: ((α7150''',) -> α7151'''')}›)›  <!<  ((‹∀ 2. (α7156''' -> ‹∀ 3. {α7158'''' where: α7156''' <: ((α7156''',) -> α7157''''), α7149' <: ((α7157'''',) -> α7158'''')}›)›,) -> α7162'')
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded


