:NoRecursiveTypes
:GeneralizeCurriedFunctions

// type bot = 0;;
type Bot = forall 'a. 'a
//│ Defined type alias Bot

// (* Rank 6 with intersection types, untypable in predicative System F,
//    typable in impredicative System F *)


// let imp (z : bot) =
//   (fun (x : ['a] ('a -> 'u) -> 'v) -> x x)
//   (fun (y : 'a -> bot) -> y z y);;
def imp (z: Bot) =
  (fun (x: forall 'a. ('a -> 'u) -> 'v) -> x x)
  (fun (y: 'a -> Bot) -> y z y)
def imp' z =
  (fun x -> x x)
  (fun y -> y z y)
//│ imp: Bot -> (forall 'a, 'b, 'c. ('b
//│   where
//│     'a <: 'a -> 'b
//│     'c <: ‘a & ‘a66))
//│    = [Function: imp]
//│ imp': ('a -> 'a -> anything & 'a -> 'a -> (forall 'b. ('a -> 'b -> anything & 'b) -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'b <: 'a -> 'b -> 'c))) -> anything & 'a) -> (forall 'a, 'd, 'e, 'f. ('e
//│   where
//│     'd <: 'd -> 'e
//│     'a <: 'a -> 'f -> anything & 'a -> 'f -> (forall 'b. ('a -> 'b -> anything & 'b) -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'b <: 'a -> 'b -> 'c))) -> anything & 'f & 'a -> 'g -> anything & 'a -> 'g -> (forall 'b. ('a -> 'b -> anything & 'b) -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'b <: 'a -> 'b -> 'c))) -> anything & 'g & 'a -> 'h -> anything & 'a -> 'h -> (forall 'b. ('a -> 'b -> anything & 'b) -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'b <: 'a -> 'b -> 'c))) -> anything & 'h & 'a -> 'i -> anything & 'a -> 'i -> (forall 'b. ('a -> 'b -> anything & 'b) -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'b <: 'a -> 'b -> 'c))) -> anything & 'i))
//│     = [Function: imp]


// (* Quelques constantes. *)

// type sid = ['a] 'a -> 'a
type Sid = forall 'a. 'a -> 'a
//│ Defined type alias Sid

// let id = fun x -> x
// ;;
def id = fun x -> x
//│ id: 'a -> 'a
//│   = [Function: id]

// let delta = fun (x:sid) -> x x
// ;;
def delta = fun (x: Sid) -> x x
def delta' = fun x -> x x
//│ delta: Sid -> (forall 'a, 'b. ('b
//│   where
//│     'a <: 'a -> 'b))
//│      = [Function: delta]
//│ delta': ('a -> anything & 'a) -> (forall 'a, 'b. ('b
//│   where
//│     'a <: 'a -> 'b))
//│       = [Function: delta]

// delta id ;;
delta id
delta' id
//│ res: 'a
//│   where
//│     'b <: 'b -> 'a
//│    = [Function: id]
//│ res: 'a
//│   where
//│     'b <: 'b -> 'a
//│    = [Function: id]

// let t a b c d e = (fun x -> a x x) ((fun y -> b (c y)) (d e)) ;;
def t a b c d e = (fun x -> a x x) ((fun y -> b (c y)) (d e))
//│ t: (nothing -> nothing -> 'a & 'b) -> (forall 'a, 'b, 'c. ((nothing -> 'a & 'c) -> (forall 'a, 'b, 'c, 'd. ((nothing -> 'a & 'd) -> (forall 'a, 'b, 'c, 'd. ((nothing -> 'a & 'a) -> (forall 'a, 'b, 'c, 'd, 'e. ('e -> (forall 'a, 'b, 'c, 'd. ('f
//│   where
//│     'b <: (forall 'c, 'd, 'g, 'h, 'i. ('h
//│   where
//│     'c <: 'g -> 'h
//│     'd <: 'i -> 'g)) -> (forall 'c, 'd, 'g, 'h, 'i. ('h
//│   where
//│     'c <: 'g -> 'h
//│     'd <: 'i -> 'g)) -> 'f
//│     'b <: nothing -> nothing -> 'a
//│     'c <: nothing -> 'a
//│     'd <: nothing -> 'a
//│     'a <: 'e -> 'i))
//│   where
//│     'b <: nothing -> nothing -> 'a
//│     'c <: nothing -> 'a
//│     'd <: nothing -> 'a
//│     'a <: nothing -> 'a
//│     'b <: nothing -> nothing -> 'a
//│     'c <: nothing -> 'a
//│     'd <: nothing -> 'a
//│     'a <: nothing -> 'a))
//│   where
//│     'b <: nothing -> nothing -> 'a
//│     'c <: nothing -> 'a
//│     'd <: nothing -> 'a
//│     'b <: nothing -> nothing -> 'a
//│     'c <: nothing -> 'a
//│     'd <: nothing -> 'a))
//│   where
//│     'b <: nothing -> nothing -> 'a
//│     'c <: nothing -> 'a
//│     'b <: nothing -> nothing -> 'a
//│     'c <: nothing -> 'a))
//│   where
//│     'b <: nothing -> nothing -> 'a
//│     'b <: nothing -> nothing -> 'a))
//│  = [Function: t]

// let t w z a b = (fun y -> (fun x -> w (x y) z) a) b ;;
def t w z a b = (fun y -> (fun x -> w (x y) z) a) b
//│ t: (nothing -> nothing -> 'a & 'b) -> (forall 'a, 'b, 'c. ('c -> (forall 'a, 'b, 'd. ((nothing -> 'a & 'd) -> (forall 'a, 'b, 'd, 'e. ('e -> (forall 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h. ('g
//│   where
//│     'b <: 'f -> 'c -> 'g
//│     'a <: 'h -> 'f
//│     'b <: nothing -> nothing -> 'a
//│     'd <: 'h -> 'a & 'a
//│     'b <: nothing -> nothing -> 'a
//│     'd <: nothing -> 'a
//│     'e <: 'h))
//│   where
//│     'b <: nothing -> nothing -> 'a
//│     'd <: nothing -> 'a
//│     'b <: nothing -> nothing -> 'a
//│     'd <: nothing -> 'a))
//│   where
//│     'b <: nothing -> nothing -> 'a
//│     'b <: nothing -> nothing -> 'a))
//│   where
//│     'b <: nothing -> nothing -> 'a
//│     'b <: nothing -> nothing -> 'a))
//│  = [Function: t1]

// let t y a = (fun x -> x (x y)) ((fun z -> z) (fun x -> a x)) ;;
def t y a = (fun x -> x (x y)) ((fun z -> z) (fun x -> a x))
//│ t: 'a -> (forall 'a, 'b. ((nothing -> 'b & 'b) -> (forall 'a, 'b, 'c, 'd, 'e. ('e
//│   where
//│     'c <: 'a -> 'd & 'd -> 'e
//│     'a <: 'b
//│     'b <: nothing -> 'b))
//│   where
//│     'a <: 'b
//│     'a <: 'b))
//│  = [Function: t2]

// (* Rank 1 *)
// (fun x -> fun y -> x y) (fun y -> fun x -> x y) ;;
(fun x -> fun y -> x y) (fun y -> fun x -> x y)
//│ res: 'a -> (forall 'a, 'b. ('b
//│   where
//│     'c <: 'a -> 'b))
//│   where
//│     'c <: nothing -> anything
//│     'c <: nothing -> anything
//│    = [Function (anonymous)]

// (* Rank 3 *)
// (fun x -> fun y -> x) delta ;;
(fun x -> fun y -> x) delta
(fun x -> fun y -> x) delta'
//│ res: anything -> Sid -> (forall 'a, 'b. ('b
//│   where
//│     'a <: 'a -> 'b))
//│    = [Function (anonymous)]
//│ res: anything -> (forall 'a. ('a -> anything & 'a) -> (forall 'a, 'b. ('b
//│   where
//│     'a <: 'a -> 'b)))
//│    = [Function (anonymous)]

// (* Rank 5 *)
// (fun x -> fun y -> x y) (fun y -> fun x -> x y) delta ;;
(fun x -> fun y -> x y) (fun y -> fun x -> x y) delta
(fun x -> fun y -> x y) (fun y -> fun x -> x y) delta'
//│ res: 'a
//│   where
//│     'b <: (Sid -> (forall 'c, 'd. ('d
//│   where
//│     'c <: 'c -> 'd))) -> 'a
//│    = [Function (anonymous)]
//│ res: 'a
//│   where
//│     'b <: (forall 'c. ('c -> anything & 'c) -> (forall 'c, 'd. ('d
//│   where
//│     'c <: 'c -> 'd))) -> 'a
//│    = [Function (anonymous)]

// (* Rank 8 *)
// (fun (x:sid) -> x x x x x) id delta ;;
(fun (x: Sid) -> x x x x x) id delta
(fun x -> x x x x x) id delta'
//│ res: Sid -> (forall 'a, 'b. ('b
//│   where
//│     'a <: 'a -> 'b))
//│    = [Function: delta]
//│ res: ('a -> anything & 'a) -> (forall 'a, 'b. ('b
//│   where
//│     'a <: 'a -> 'b))
//│    = [Function: delta]

// (* Rank 2 *)
// type sk = ['a,'b] 'a -> 'b -> 'a;;
// (fun (f:sk) -> fun x -> f f x) (fun v -> fun w -> v) ;;
type Sk = forall 'a 'b. 'a -> 'b -> 'a
(fun (f: Sk) -> fun x -> f f x) (fun v -> fun w -> v)
(fun f -> fun x -> f f x) (fun v -> fun w -> v)
//│ Defined type alias Sk
//│ res: 'a -> (forall 'a, 'b. ('b
//│   where
//│     'c <: 'c -> 'a -> 'b))
//│   where
//│     'c <: 'c -> 'c -> anything
//│     'c <: 'c -> 'c -> anything
//│    = [Function (anonymous)]
//│ res: 'a -> (forall 'a, 'b. ('b
//│   where
//│     'c <: 'c -> 'a -> 'b))
//│   where
//│     'c <: 'c -> 'c -> anything
//│     'c <: 'c -> 'c -> anything
//│    = [Function (anonymous)]

// (* Rank 3 *)
// (fun t -> fun k -> t k) (fun (f:sk) -> fun x -> f f x) (fun v -> fun w -> v);;
(fun t -> fun k -> t k) (fun (f: Sk) -> fun x -> f f x) (fun v -> fun w -> v)
(fun t -> fun k -> t k) (fun f -> fun x -> f f x) (fun v -> fun w -> v)
//│ res: 'a
//│   where
//│     'b <: (forall 'c. 'c -> anything -> 'c) -> 'a
//│    = [Function (anonymous)]
//│ res: 'a
//│   where
//│     'b <: (forall 'c. 'c -> anything -> 'c) -> 'a
//│    = [Function (anonymous)]


// let k = fun x y -> x
// let k' = fun x y -> y
// let app = fun f x -> f x
// let two = fun f x -> f (f x)
// let three = fun f x -> f (f (f x))
def k = fun x -> fun y -> x
def k2 = fun x -> fun y -> y
def app = fun f -> fun x -> f x
def two = fun f -> fun x -> f (f x)
def three = fun f -> fun x -> f (f (f x))
//│ k: 'a -> anything -> 'a
//│  = [Function: k]
//│ k2: anything -> (forall 'a. 'a -> 'a)
//│   = [Function: k2]
//│ app: (nothing -> 'a & 'a) -> (forall 'a, 'b. ('b -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'a <: 'b -> 'c))
//│   where
//│     'a <: nothing -> 'a
//│     'a <: nothing -> 'a))
//│    = [Function: app]
//│ two: (nothing -> 'a & 'a) -> (forall 'a, 'b. ('b -> (forall 'a, 'b, 'c, 'd. ('d
//│   where
//│     'a <: 'b -> 'c & 'c -> 'd))
//│   where
//│     'a <: nothing -> 'a
//│     'a <: nothing -> 'a))
//│    = [Function: two]
//│ three: (nothing -> 'a & 'a) -> (forall 'a, 'b. ('b -> (forall 'a, 'b, 'c, 'd, 'e. ('e
//│   where
//│     'a <: 'b -> 'c & 'c -> 'd & 'd -> 'e))
//│   where
//│     'a <: nothing -> 'a
//│     'a <: nothing -> 'a))
//│      = [Function: three]


// * Tony noticed this did not work before this commit generalizing the LHS of ascriptions...
(app id): Sid
//│ res: Sid
//│    = [Function (anonymous)]
// * this one worked:
let t = app id in t: Sid
//│ res: Sid
//│    = [Function (anonymous)]


// type Int = ['a] ('a -> 'a) -> ('a -> 'a)
// ;;
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt

// (* Factorial of two and three *)
// (* Only ONE annotation ! *)
// let t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n:Int) -> n (fun v -> k') k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k') (fun f -> fun x -> f (p k' f x))) (fun s -> s k' k') k) g) x)) two ;;

// :e // due to tapping
def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ /!!!\ Uncaught error: java.lang.StackOverflowError

// FIXME
t id succ 0
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.309: 	t id succ 0
//│ ║         	^^^^^^^^^
//│ ╟── function of type `?a -> ?a` is not an instance of type `int`
//│ ║  l.51: 	def id = fun x -> x
//│ ║        	         ^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.309: 	t id succ 0
//│ ╙──       	  ^^
//│ res: error
//│    = 2

//:e // due to tapping
t2 id succ 0
//│ ╔══[ERROR] identifier not found: t2
//│ ║  l.323: 	t2 id succ 0
//│ ╙──       	^^
//│ res: error
//│    = 2

// let t y = (fun h -> h (h (h (h (fun x -> y))))) (fun f -> fun (n:Int) -> n (fun v -> k') k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k') (fun f -> fun x -> f (p k' f x))) (fun s -> s k' k') k) g) x)) three

// :e // due to tapping
def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
//│ /!!!\ Uncaught error: java.lang.StackOverflowError

// (* This comment is from the ORIGINAL PAGE: *)
// (* Factorial of three. Exposed bugs in old implementation. This one works correctly, but the generated files take up to 3.8GB, and it takes about 1 hour on a 2GHz PIII box to get the result. You can see the final judgement here. Yes, the result is the Church numeral for 6. *)

// (* We test that the result is 6: *)
// let succ n = n + 1 ;;
// t id succ 0 ;;

// FIXME
t id succ 0
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.345: 	t id succ 0
//│ ║         	^^^^^^^^^
//│ ╟── function of type `?a -> ?a` is not an instance of type `int`
//│ ║  l.51: 	def id = fun x -> x
//│ ║        	         ^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.345: 	t id succ 0
//│ ╙──       	  ^^
//│ res: error
//│    = 6

// :e // TODO try without cycle check // works with quantif extrus
t2 id succ 0
//│ ╔══[ERROR] identifier not found: t2
//│ ║  l.359: 	t2 id succ 0
//│ ╙──       	^^
//│ res: error
//│    = 6

// let t (z : 0) = let x = (fun (y: ['t > 0] 'a -> 't) -> y z y) in x x;;
def t (z: nothing) = let x = fun (y: forall 't. 'a -> 't) -> y z y in x x
//│ t: nothing -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'a <: 'b -> 'a -> 'c
//│     'b <: 'a -> anything))
//│  = [Function: t5]

// (* Plus petit. *)
// type tt = ['b = 0] ['c > ['a] ['d = ['t] 'a -> 't] ['e] 'd -> 'e] 'b -> 'c ;;
// let t (z : 0) = let x = (fun (y: ['t > 0] 'a -> 't) -> y z) in x x;;
type Tt = forall 'b 'c. ('b & nothing) -> ('c | (forall 'a 'd 'e. ('d & (forall 't. 'a -> 't))) -> 'e)
def t (z: nothing) = let x = fun (y: forall 't. 'a -> 't) -> y z in x x
//│ Defined type alias Tt
//│ t: nothing -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'a <: 'b -> 'c
//│     'b <: 'b -> anything))
//│  = [Function: t6]

// (*
//     * Rank 3, untypable in System F?
//       (fun x -> z (x (fun f -> fun u -> f u)) (x (fun v -> fun g -> g v))) (fun y -> y y y)
// FIXME: z is free???

//     * Untypable at any rank
//       (fun x -> x x) (fun x -> x x)
// :e // TODO show failure without cycle check // works with quantif extrus
:re
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b. ?b -> (forall ?c, ?d, ?a, ?b. (?d
//│   where
//│     ?c <: ?b -> ?d)) <: (forall ?e, ?f. ?f -> (forall ?g, ?h, ?e, ?f. (?h
//│   where
//│     ?g <: ?f -> ?h))) -> ?i` exceeded recursion depth limit (300)
//│ ║  l.395: 	(fun x -> x x) (fun x -> x x)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. (α6881' -> ‹∀ 1. {α6882'' where: α6881' <: ((α6881',) -> α6882'')}›)›  <!<  α6881_6925
//│ ╟── while constraining:  α6881_6921  <!<  α6881_6925
//│ ╟── while constraining:  (α6881_6921,)  <!<  (α6881_6925,)
//│ ╟── while constraining:  (α6881_6925 -> ‹∀ 1. {α6882_6927'' where: α6881_6925 <: ((α6881_6925,) -> α6882_6927'')}›)  <!<  ((α6881_6921,) -> α6882_6924)
//│ ╟── while constraining:  ‹∀ 0. (α6881' -> ‹∀ 1. {α6882'' where: α6881' <: ((α6881',) -> α6882'')}›)›  <!<  ((α6881_6921,) -> α6882_6924)
//│ ╟── while constraining:  ‹∀ 0. (α6881' -> ‹∀ 1. {α6882'' where: α6881' <: ((α6881',) -> α6882'')}›)›  <!<  α6881_6921
//│ ╟── while constraining:  α6881_6917  <!<  α6881_6921
//│ ╟── while constraining:  (α6881_6917,)  <!<  (α6881_6921,)
//│ ╟── while constraining:  (α6881_6921 -> ‹∀ 1. {α6882_6923'' where: α6881_6921 <: ((α6881_6921,) -> α6882_6923'')}›)  <!<  ((α6881_6917,) -> α6882_6920)
//│ ╟── while constraining:  ‹∀ 0. (α6881' -> ‹∀ 1. {α6882'' where: α6881' <: ((α6881',) -> α6882'')}›)›  <!<  ((α6881_6917,) -> α6882_6920)
//│ ╟── while constraining:  ‹∀ 0. (α6881' -> ‹∀ 1. {α6882'' where: α6881' <: ((α6881',) -> α6882'')}›)›  <!<  α6881_6917
//│ ╟── while constraining:  α6881_6913  <!<  α6881_6917
//│ ╟── while constraining:  (α6881_6913,)  <!<  (α6881_6917,)
//│ ╟── while constraining:  (α6881_6917 -> ‹∀ 1. {α6882_6919'' where: α6881_6917 <: ((α6881_6917,) -> α6882_6919'')}›)  <!<  ((α6881_6913,) -> α6882_6916)
//│ ╟── while constraining:  ‹∀ 0. (α6881' -> ‹∀ 1. {α6882'' where: α6881' <: ((α6881',) -> α6882'')}›)›  <!<  ((α6881_6913,) -> α6882_6916)
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 0. (α6881' -> ‹∀ 1. {α6882'' where: α6881' <: ((α6881',) -> α6882'')}›)›  <!<  ((α6881_6893,) -> α6882_6896)
//│ ╟── while constraining:  ‹∀ 0. (α6881' -> ‹∀ 1. {α6882'' where: α6881' <: ((α6881',) -> α6882'')}›)›  <!<  α6881_6893
//│ ╟── while constraining:  α6881_6889  <!<  α6881_6893
//│ ╟── while constraining:  (α6881_6889,)  <!<  (α6881_6893,)
//│ ╟── while constraining:  (α6881_6893 -> ‹∀ 1. {α6882_6895'' where: α6881_6893 <: ((α6881_6893,) -> α6882_6895'')}›)  <!<  ((α6881_6889,) -> α6882_6892)
//│ ╟── while constraining:  ‹∀ 0. (α6881' -> ‹∀ 1. {α6882'' where: α6881' <: ((α6881',) -> α6882'')}›)›  <!<  ((α6881_6889,) -> α6882_6892)
//│ ╟── while constraining:  ‹∀ 0. (α6881' -> ‹∀ 1. {α6882'' where: α6881' <: ((α6881',) -> α6882'')}›)›  <!<  α6881_6889
//│ ╟── while constraining:  α6878_6885  <!<  α6881_6889
//│ ╟── while constraining:  (α6878_6885,)  <!<  (α6881_6889,)
//│ ╟── while constraining:  (α6881_6889 -> ‹∀ 1. {α6882_6891'' where: α6881_6889 <: ((α6881_6889,) -> α6882_6891'')}›)  <!<  ((α6878_6885,) -> α6879_6888)
//│ ╟── while constraining:  ‹∀ 0. (α6881' -> ‹∀ 1. {α6882'' where: α6881' <: ((α6881',) -> α6882'')}›)›  <!<  ((α6878_6885,) -> α6879_6888)
//│ ╟── while constraining:  ‹∀ 0. (α6881' -> ‹∀ 1. {α6882'' where: α6881' <: ((α6881',) -> α6882'')}›)›  <!<  α6878_6885
//│ ╟── while constraining:  (‹∀ 0. (α6881' -> ‹∀ 1. {α6882'' where: α6881' <: ((α6881',) -> α6882'')}›)›,)  <!<  (α6878_6885,)
//│ ╟── while constraining:  (α6878_6885 -> ‹∀ 1. {α6879_6887'' where: α6878_6885 <: ((α6878_6885,) -> α6879_6887'')}›)  <!<  ((‹∀ 0. (α6881' -> ‹∀ 1. {α6882'' where: α6881' <: ((α6881',) -> α6882'')}›)›,) -> α6884)
//│ ╙── while constraining:  ‹∀ 0. (α6878' -> ‹∀ 1. {α6879'' where: α6878' <: ((α6878',) -> α6879'')}›)›  <!<  ((‹∀ 0. (α6881' -> ‹∀ 1. {α6882'' where: α6881' <: ((α6881',) -> α6882'')}›)›,) -> α6884)
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

//     * Rank 3, untypable in F2 but F3
//       (fun f x -> f (f x)) (fun f x -> f (f x)) (fun v w -> v)
(fun f -> fun x -> f (f x)) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ res: 'a
//│   where
//│     'b <: (forall 'c. 'c -> anything -> 'c) -> 'd & 'd -> 'a
//│    = [Function (anonymous)]

//     * Rank 4, alternate formulation, untypeable in F2, but F3
//       (fun two k -> two two k)(fun f x -> f (f x)) (fun v w -> v)
(fun two -> fun k -> two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ res: 'a
//│   where
//│     'b <: 'b -> (forall 'c. 'c -> anything -> 'c) -> 'a
//│    = [Function (anonymous)]

//     * Rank 5, causes huge blowup. Do not attempt to output skeletons !
//       (fun two k -> two two two k)(fun f -x -> f (f x)) (fun v w -> v)
// * Note: the only example in this file that requires `:GeneralizeCurriedFunctions`
// :e // due to not stashing...?
(fun two -> fun k -> two two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e. ?c -> (forall ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?a, ?b, ?c, ?d, ?e, ?n, ?o, ?p, ?q. (?g -> (forall ?f, ?g, ?r, ?l, ?m, ?a, ?b, ?c, ?d, ?e, ?s, ?t. (?r
//│   where
//│     ?f <: ?c -> ?s))
//│   where
//│     ?f <: ?c -> ?p
//│     ?f <: ?c -> ?n)) <: (forall ?u, ?v, ?w, ?x, ?y. ?y -> (forall ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1, ?i1, ?u, ?v, ?w, ?x. (?a1 -> (forall ?z, ?a1, ?j1, ?k1, ?u, ?v, ?w, ?x. (?k1
//│   where
//│     ?z <: ?a1 -> ?j1 & ?j1 -> ?k1))
//│   where
//│     ?z <: ?b1 -> ?c1 & ?d1 -> ?e1
//│     ?z <: ?f1 -> ?g1 & ?h1 -> ?i1))) -> ?l1` took too many steps and ran out of fuel (5000)
//│ ║  l.459: 	(fun two -> fun k -> two two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟──  + ‹∀ 1. {‹∀ 2. {(α12572_38570''' -> ‹∀ 3. {α12574_38572'''' where: α12571_38549 <: ((α12572_38570''',) -> α12573_38571''''), α12571_38549 <: ((α12573_38571'''',) -> α12574_38572'''')}›) where: α12571_38549 <: ((α12572_38562''',) -> α12573_38563'''), α12571_38549 <: ((α12573_38564''',) -> α12574_38565''')}› where: α12571_38549 <: ((α12572_38554'',) -> α12573_38555''), α12571_38549 <: ((α12573_38556'',) -> α12574_38557'')}›
//│ ║  l.459: 	(fun two -> fun k -> two two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ ║         	                                              ^^^^^^^^^^^^^^^^
//│ ╟──  + ‹∀ 1. {‹∀ 2. {(α12572_38570''' -> ‹∀ 3. {α12574_38572'''' where: α12571_38549 <: ((α12572_38570''',) -> α12573_38571''''), α12571_38549 <: ((α12573_38571'''',) -> α12574_38572'''')}›) where: α12571_38549 <: ((α12572_38562''',) -> α12573_38563'''), α12571_38549 <: ((α12573_38564''',) -> α12574_38565''')}› where: α12571_38549 <: ((α12572_38554'',) -> α12573_38555''), α12571_38549 <: ((α12573_38556'',) -> α12574_38557'')}›
//│ ║  l.459: 	(fun two -> fun k -> two two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ ║         	                                              ^^^^^^^^^^^^^^^^
//│ ╟──  + ‹∀ 1. {‹∀ 2. {(α12572_38570''' -> ‹∀ 3. {α12574_38572'''' where: α12571_38549 <: ((α12572_38570''',) -> α12573_38571''''), α12571_38549 <: ((α12573_38571'''',) -> α12574_38572'''')}›) where: α12571_38549 <: ((α12572_38562''',) -> α12573_38563'''), α12571_38549 <: ((α12573_38564''',) -> α12574_38565''')}› where: α12571_38549 <: ((α12572_38554'',) -> α12573_38555''), α12571_38549 <: ((α12573_38556'',) -> α12574_38557'')}›
//│ ║  l.459: 	(fun two -> fun k -> two two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ ║         	                                                          ^^^
//│ ╟──  + α12573_35915
//│ ║  l.459: 	(fun two -> fun k -> two two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ ║         	                                                          ^^^
//│ ╙──  - α12571_41153
//│ res: error
//│    = [Function (anonymous)]



//  ?????
//     * Factorial of two, using the Y combinator
//       (fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))

// *)
// :e // works with quantif extrus
:re
(fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d. (?d -> (forall ?e, ?f, ?g, ?c, ?d. (?g
//│   where
//│     ?h <: ?f -> ?g
//│     ?e <: ?d -> ?f))
//│   where
//│     ?h <: ?a -> ?b) <: (forall ?i, ?j, ?k, ?l. (?l -> (forall ?m, ?n, ?o, ?i, ?l. (?o
//│   where
//│     ?m <: ?l -> ?n
//│     ?h <: ?n -> ?o))
//│   where
//│     ?h <: ?j -> ?k)) -> ?p` exceeded recursion depth limit (300)
//│ ║  l.498: 	(fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))
//│ ║         	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 2. {(α42086''' -> ‹∀ 3. {α42088'''' where: α42086''' <: ((α42086''',) -> α42087''''), α42077' <: ((α42087'''',) -> α42088'''')}›) where: α42077' <: ((α42087_42090''',) -> α42088_42091''')}›  <!<  α42086_42187''
//│ ╟── while constraining:  α42086_42178''  <!<  α42086_42187''
//│ ╟── while constraining:  (α42086_42178'',)  <!<  (α42086_42187'',)
//│ ╟── while constraining:  (α42086_42187'' -> ‹∀ 3. {α42088_42190'''' where: α42086_42187'' <: ((α42086_42187'',) -> α42087_42189''''), α42077' <: ((α42087_42189'''',) -> α42088_42190'''')}›)  <!<  ((α42086_42178'',) -> α42087_42182'')
//│ ╟── while constraining:  {(α42086_42187'' -> ‹∀ 3. {α42088_42190'''' where: α42086_42187'' <: ((α42086_42187'',) -> α42087_42189''''), α42077' <: ((α42087_42189'''',) -> α42088_42190'''')}›) where: α42077' <: ((α42087_42185'',) -> α42088_42186'')}  <!<  ((α42086_42178'',) -> α42087_42182'')
//│ ╟── while constraining:  ‹∀ 2. {(α42086''' -> ‹∀ 3. {α42088'''' where: α42086''' <: ((α42086''',) -> α42087''''), α42077' <: ((α42087'''',) -> α42088'''')}›) where: α42077' <: ((α42087_42090''',) -> α42088_42091''')}›  <!<  ((α42086_42178'',) -> α42087_42182'')
//│ ╟── while constraining:  ‹∀ 2. {(α42086''' -> ‹∀ 3. {α42088'''' where: α42086''' <: ((α42086''',) -> α42087''''), α42077' <: ((α42087'''',) -> α42088'''')}›) where: α42077' <: ((α42087_42090''',) -> α42088_42091''')}›  <!<  α42086_42178''
//│ ╟── while constraining:  α42086_42169''  <!<  α42086_42178''
//│ ╟── while constraining:  (α42086_42169'',)  <!<  (α42086_42178'',)
//│ ╟── while constraining:  (α42086_42178'' -> ‹∀ 3. {α42088_42181'''' where: α42086_42178'' <: ((α42086_42178'',) -> α42087_42180''''), α42077' <: ((α42087_42180'''',) -> α42088_42181'''')}›)  <!<  ((α42086_42169'',) -> α42087_42173'')
//│ ╟── while constraining:  {(α42086_42178'' -> ‹∀ 3. {α42088_42181'''' where: α42086_42178'' <: ((α42086_42178'',) -> α42087_42180''''), α42077' <: ((α42087_42180'''',) -> α42088_42181'''')}›) where: α42077' <: ((α42087_42176'',) -> α42088_42177'')}  <!<  ((α42086_42169'',) -> α42087_42173'')
//│ ╟── while constraining:  ‹∀ 2. {(α42086''' -> ‹∀ 3. {α42088'''' where: α42086''' <: ((α42086''',) -> α42087''''), α42077' <: ((α42087'''',) -> α42088'''')}›) where: α42077' <: ((α42087_42090''',) -> α42088_42091''')}›  <!<  ((α42086_42169'',) -> α42087_42173'')
//│ ╟── while constraining:  ‹∀ 2. {(α42086''' -> ‹∀ 3. {α42088'''' where: α42086''' <: ((α42086''',) -> α42087''''), α42077' <: ((α42087'''',) -> α42088'''')}›) where: α42077' <: ((α42087_42090''',) -> α42088_42091''')}›  <!<  α42086_42169''
//│ ╟── while constraining:  α42086_42160''  <!<  α42086_42169''
//│ ╟── while constraining:  (α42086_42160'',)  <!<  (α42086_42169'',)
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  (α42086_42106'',)  <!<  (α42086_42115'',)
//│ ╟── while constraining:  (α42086_42115'' -> ‹∀ 3. {α42088_42118'''' where: α42086_42115'' <: ((α42086_42115'',) -> α42087_42117''''), α42077' <: ((α42087_42117'''',) -> α42088_42118'''')}›)  <!<  ((α42086_42106'',) -> α42087_42110'')
//│ ╟── while constraining:  {(α42086_42115'' -> ‹∀ 3. {α42088_42118'''' where: α42086_42115'' <: ((α42086_42115'',) -> α42087_42117''''), α42077' <: ((α42087_42117'''',) -> α42088_42118'''')}›) where: α42077' <: ((α42087_42113'',) -> α42088_42114'')}  <!<  ((α42086_42106'',) -> α42087_42110'')
//│ ╟── while constraining:  ‹∀ 2. {(α42086''' -> ‹∀ 3. {α42088'''' where: α42086''' <: ((α42086''',) -> α42087''''), α42077' <: ((α42087'''',) -> α42088'''')}›) where: α42077' <: ((α42087_42090''',) -> α42088_42091''')}›  <!<  ((α42086_42106'',) -> α42087_42110'')
//│ ╟── while constraining:  ‹∀ 2. {(α42086''' -> ‹∀ 3. {α42088'''' where: α42086''' <: ((α42086''',) -> α42087''''), α42077' <: ((α42087'''',) -> α42088'''')}›) where: α42077' <: ((α42087_42090''',) -> α42088_42091''')}›  <!<  α42086_42106''
//│ ╟── while constraining:  α42078_42097''  <!<  α42086_42106''
//│ ╟── while constraining:  (α42078_42097'',)  <!<  (α42086_42106'',)
//│ ╟── while constraining:  (α42086_42106'' -> ‹∀ 3. {α42088_42109'''' where: α42086_42106'' <: ((α42086_42106'',) -> α42087_42108''''), α42077' <: ((α42087_42108'''',) -> α42088_42109'''')}›)  <!<  ((α42078_42097'',) -> α42079_42103'')
//│ ╟── while constraining:  {(α42086_42106'' -> ‹∀ 3. {α42088_42109'''' where: α42086_42106'' <: ((α42086_42106'',) -> α42087_42108''''), α42077' <: ((α42087_42108'''',) -> α42088_42109'''')}›) where: α42077' <: ((α42087_42104'',) -> α42088_42105'')}  <!<  ((α42078_42097'',) -> α42079_42103'')
//│ ╟── while constraining:  ‹∀ 2. {(α42086''' -> ‹∀ 3. {α42088'''' where: α42086''' <: ((α42086''',) -> α42087''''), α42077' <: ((α42087'''',) -> α42088'''')}›) where: α42077' <: ((α42087_42090''',) -> α42088_42091''')}›  <!<  ((α42078_42097'',) -> α42079_42103'')
//│ ╟── while constraining:  ‹∀ 2. {(α42086''' -> ‹∀ 3. {α42088'''' where: α42086''' <: ((α42086''',) -> α42087''''), α42077' <: ((α42087'''',) -> α42088'''')}›) where: α42077' <: ((α42087_42090''',) -> α42088_42091''')}›  <!<  α42078_42097''
//│ ╟── while constraining:  (‹∀ 2. {(α42086''' -> ‹∀ 3. {α42088'''' where: α42086''' <: ((α42086''',) -> α42087''''), α42077' <: ((α42087'''',) -> α42088'''')}›) where: α42077' <: ((α42087_42090''',) -> α42088_42091''')}›,)  <!<  (α42078_42097'',)
//│ ╟── while constraining:  (α42078_42097'' -> ‹∀ 3. {α42080_42100'''' where: α42077' <: ((α42079_42099'''',) -> α42080_42100''''), α42078_42097'' <: ((α42078_42097'',) -> α42079_42099'''')}›)  <!<  ((‹∀ 2. {(α42086''' -> ‹∀ 3. {α42088'''' where: α42086''' <: ((α42086''',) -> α42087''''), α42077' <: ((α42087'''',) -> α42088'''')}›) where: α42077' <: ((α42087_42090''',) -> α42088_42091''')}›,) -> α42094'')
//│ ╟── while constraining:  {(α42078_42097'' -> ‹∀ 3. {α42080_42100'''' where: α42077' <: ((α42079_42099'''',) -> α42080_42100''''), α42078_42097'' <: ((α42078_42097'',) -> α42079_42099'''')}›) where: α42077' <: ((α42079_42095'',) -> α42080_42096'')}  <!<  ((‹∀ 2. {(α42086''' -> ‹∀ 3. {α42088'''' where: α42086''' <: ((α42086''',) -> α42087''''), α42077' <: ((α42087'''',) -> α42088'''')}›) where: α42077' <: ((α42087_42090''',) -> α42088_42091''')}›,) -> α42094'')
//│ ╙── while constraining:  ‹∀ 2. {(α42078''' -> ‹∀ 3. {α42080'''' where: α42077' <: ((α42079'''',) -> α42080''''), α42078''' <: ((α42078''',) -> α42079'''')}›) where: α42077' <: ((α42079_42081''',) -> α42080_42082''')}›  <!<  ((‹∀ 2. {(α42086''' -> ‹∀ 3. {α42088'''' where: α42086''' <: ((α42086''',) -> α42087''''), α42077' <: ((α42087'''',) -> α42088'''')}›) where: α42077' <: ((α42087_42090''',) -> α42088_42091''')}›,) -> α42094'')
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded


