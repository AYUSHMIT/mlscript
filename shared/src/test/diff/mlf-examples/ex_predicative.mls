:NoRecursiveTypes
:GeneralizeCurriedFunctions

// type bot = 0;;
type Bot = forall 'a. 'a
//│ Defined type alias Bot

// (* Rank 6 with intersection types, untypable in predicative System F,
//    typable in impredicative System F *)


// let imp (z : bot) =
//   (fun (x : ['a] ('a -> 'u) -> 'v) -> x x)
//   (fun (y : 'a -> bot) -> y z y);;
def imp (z: Bot) =
  (fun (x: forall 'a. ('a -> 'u) -> 'v) -> x x)
  (fun (y: 'a -> Bot) -> y z y)
def imp' z =
  (fun x -> x x)
  (fun y -> y z y)
//│ imp: Bot -> nothing
//│    = [Function: imp]
//│ imp': ('a -> 'a -> (forall 'b, 'c. ('a -> 'b -> 'c & 'b) -> 'c) -> 'd & 'a) -> 'd
//│     = [Function: imp]


// (* Quelques constantes. *)

// type sid = ['a] 'a -> 'a
type Sid = forall 'a. 'a -> 'a
//│ Defined type alias Sid

// let id = fun x -> x
// ;;
def id = fun x -> x
//│ id: 'a -> 'a
//│   = [Function: id]

// let delta = fun (x:sid) -> x x
// ;;
def delta = fun (x: Sid) -> x x
def delta' = fun x -> x x
//│ delta: Sid -> Sid
//│      = [Function: delta]
//│ delta': ('a -> 'b & 'a) -> 'b
//│       = [Function: delta]

// delta id ;;
delta id
delta' id
//│ res: Sid
//│    = [Function: id]
//│ res: 'a -> 'a
//│    = [Function: id]

// let t a b c d e = (fun x -> a x x) ((fun y -> b (c y)) (d e)) ;;
def t a b c d e = (fun x -> a x x) ((fun y -> b (c y)) (d e))
//│ t: ('a -> 'a -> 'b & 'c) -> (forall 'a, 'c, 'd, 'e, 'f, 'g, 'h. (('f -> ('a & 'd & 'g) & 'h) -> (forall 'a, 'c, 'd, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o. (('m -> ('f & 'k & 'n) & 'o) -> (forall 'a, 'c, 'd, 'f, 'g, 'h, 'i, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r, 's, 't, 'u, 'v, 'w, 'x. (('v -> ('m & 't & 'w) & 'x) -> (forall 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r, 's, 't, 'u, 'v, 'w, 'x, 'y, 'z, 'a1, 'b1, 'c1. (('v & 'c1) -> ('z | 'q | 'j | 'e | 'b)
//│   where
//│     'c <: ('s | 'l | 'g | 'y) -> ('s | 'l | 'g | 'y) -> 'z
//│     'h <: ('a1 | 'u | 'n) -> ('a & 'd & 'i & 'p & 'y)
//│     'o <: ('w | 'b1) -> ('f & 'k & 'r & 'a1)
//│     'x <: 'c1 -> ('m & 't & 'b1)))
//│   where
//│     'c <: ('p | 'l | 'g) -> ('p | 'l | 'g) -> 'q
//│     'h <: ('r | 'n) -> ('a & 'd & 'i & 'p & 's)
//│     'o <: 't -> ('f & 'k & 'r & 'u)))
//│   where
//│     'c <: ('i | 'g) -> ('i | 'g) -> 'j
//│     'h <: 'k -> ('a & 'd & 'i & 'l)))
//│   where
//│     'c <: 'd -> 'd -> 'e))
//│  = [Function: t]

// let t w z a b = (fun y -> (fun x -> w (x y) z) a) b ;;
def t w z a b = (fun y -> (fun x -> w (x y) z) a) b
//│ t: ('a -> 'b -> 'c & 'd) -> (forall 'b, 'd, 'e, 'f, 'g. (('b & 'f) -> (forall 'a, 'd, 'e, 'f, 'h, 'i, 'j, 'k, 'l. (('j -> ('a & 'e & 'h & 'k) & 'l) -> (forall 'a, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o. (('j & 'o) -> ('n | 'i | 'g | 'c)
//│   where
//│     'd <: ('m | 'k) -> 'f -> 'n
//│     'l <: 'o -> ('a & 'e & 'h & 'm)))
//│   where
//│     'd <: 'h -> 'f -> 'i))
//│   where
//│     'd <: 'e -> 'f -> 'g))
//│  = [Function: t1]

// let t y a = (fun x -> x (x y)) ((fun z -> z) (fun x -> a x)) ;;
def t y a = (fun x -> x (x y)) ((fun z -> z) (fun x -> a x))
//│ t: 'a -> (forall 'a, 'b, 'c, 'd, 'e. ((('c | 'a) -> ('c & 'd & 'e) & ('b | 'a) -> ('c & 'd) & 'd -> 'e) -> 'e
//│   where
//│     'a <: 'b & 'c))
//│  = [Function: t2]

// (* Rank 1 *)
// (fun x -> fun y -> x y) (fun y -> fun x -> x y) ;;
(fun x -> fun y -> x y) (fun y -> fun x -> x y)
//│ res: ('a & 'b) -> (forall 'c, 'd. ('b -> 'd) -> 'd | 'c)
//│   where
//│     'e <: 'a -> 'c
//│    = [Function (anonymous)]

// (* Rank 3 *)
// (fun x -> fun y -> x) delta ;;
(fun x -> fun y -> x) delta
(fun x -> fun y -> x) delta'
//│ res: anything -> Sid -> Sid
//│    = [Function (anonymous)]
//│ res: anything -> (forall 'a, 'b. ('a -> 'b & 'a) -> 'b)
//│    = [Function (anonymous)]

// (* Rank 5 *)
// (fun x -> fun y -> x y) (fun y -> fun x -> x y) delta ;;
(fun x -> fun y -> x y) (fun y -> fun x -> x y) delta
(fun x -> fun y -> x y) (fun y -> fun x -> x y) delta'
//│ res: ((Sid -> Sid) -> 'a) -> 'a
//│    = [Function (anonymous)]
//│ res: ((forall 'a, 'b. ('a -> 'b & 'a) -> 'b) -> 'c) -> 'c
//│    = [Function (anonymous)]

// (* Rank 8 *)
// (fun (x:sid) -> x x x x x) id delta ;;
(fun (x: Sid) -> x x x x x) id delta
(fun x -> x x x x x) id delta'
//│ res: Sid -> Sid
//│    = [Function: delta]
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: delta]

// (* Rank 2 *)
// type sk = ['a,'b] 'a -> 'b -> 'a;;
// (fun (f:sk) -> fun x -> f f x) (fun v -> fun w -> v) ;;
type Sk = forall 'a 'b. 'a -> 'b -> 'a
(fun (f: Sk) -> fun x -> f f x) (fun v -> fun w -> v)
(fun f -> fun x -> f f x) (fun v -> fun w -> v)
//│ Defined type alias Sk
//│ res: 'a -> (Sk | 'b)
//│   where
//│     'c <: 'c -> 'a -> 'b
//│    = [Function (anonymous)]
//│ res: 'a -> (forall 'b, 'c. 'c -> anything -> 'c | 'b)
//│   where
//│     'd <: 'd -> 'a -> 'b
//│    = [Function (anonymous)]

// (* Rank 3 *)
// (fun t -> fun k -> t k) (fun (f:sk) -> fun x -> f f x) (fun v -> fun w -> v);;
(fun t -> fun k -> t k) (fun (f: Sk) -> fun x -> f f x) (fun v -> fun w -> v)
(fun t -> fun k -> t k) (fun f -> fun x -> f f x) (fun v -> fun w -> v)
//│ res: 'a -> (Sk | 'b)
//│   where
//│     'c <: 'c -> 'a -> 'b
//│     'd <: 'd -> 'a -> 'b
//│    = [Function (anonymous)]
//│ res: 'a -> (forall 'b, 'c. 'c -> anything -> 'c | 'b)
//│   where
//│     'd <: 'd -> 'a -> 'b
//│     'e <: 'e -> 'a -> 'b
//│    = [Function (anonymous)]


// let k = fun x y -> x
// let k' = fun x y -> y
// let app = fun f x -> f x
// let two = fun f x -> f (f x)
// let three = fun f x -> f (f (f x))
def k = fun x -> fun y -> x
def k2 = fun x -> fun y -> y
def app = fun f -> fun x -> f x
def two = fun f -> fun x -> f (f x)
def three = fun f -> fun x -> f (f (f x))
//│ k: 'a -> anything -> 'a
//│  = [Function: k]
//│ k2: anything -> (forall 'a. 'a -> 'a)
//│   = [Function: k2]
//│ app: ('a -> 'b & 'c) -> (forall 'a, 'b, 'c, 'd, 'e. (('a & 'd) -> ('e | 'b)
//│   where
//│     'c <: 'd -> 'e))
//│    = [Function: app]
//│ two: (('a | 'b) -> 'c & 'd -> 'a & 'e) -> (forall 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h. (('d & 'f) -> ('h | 'c)
//│   where
//│     'e <: 'f -> ('b & 'g) & ('g | 'a) -> 'h))
//│    = [Function: two]
//│ three: ('a -> 'b & ('c | 'd) -> 'e & ('b | 'f) -> 'c & 'g) -> (forall 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k. (('a & 'h) -> ('k | 'e)
//│   where
//│     'g <: 'h -> ('f & 'i) & ('i | 'b) -> ('d & 'j) & ('j | 'c) -> 'k))
//│      = [Function: three]


// * Tony noticed this did not work before this commit generalizing the LHS of ascriptions...
(app id): Sid
//│ res: Sid
//│    = [Function (anonymous)]
// * this one worked:
let t = app id in t: Sid
//│ res: Sid
//│    = [Function (anonymous)]


// type Int = ['a] ('a -> 'a) -> ('a -> 'a)
// ;;
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt

// (* Factorial of two and three *)
// (* Only ONE annotation ! *)
// let t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n:Int) -> n (fun v -> k') k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k') (fun f -> fun x -> f (p k' f x))) (fun s -> s k' k') k) g) x)) two ;;

// FIXME
// :e // due to tapping
def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ ╔══[ERROR] Cyclic-looking constraint while typing lambda expression
//│ ║  l.210: 	def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ ║         	                                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  α1205_1267''''  <:  ((‹∀ 0. ‹∀ 1. (α1052'' -> ‹∀ 2. (α1053''' -> α1053''')›)››,) -> α1207_1316'''')    TypeVariable  FunctionType
//│ ╙──  ... looks like:  α1205^7  <:  ((‹∀ 0. ‹∀ 1. (α1052'' -> ‹∀ 2. (α1053''' -> α1053''')›)››,) -> α1207_1274^8)
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.210: 	def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ ║         	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  α1205_1496''  <:  ((‹∀ 0. ‹∀ 1. (α1052'' -> ‹∀ 2. (α1053''' -> α1053''')›)››,) -> α1207_1545'')    TypeVariable  FunctionType
//│ ╙──  ... looks like:  α1205^7  <:  ((‹∀ 0. ‹∀ 1. (α1052'' -> ‹∀ 2. (α1053''' -> α1053''')›)››,) -> α1207_1503^8)
//│ t: anything -> error
//│  = [Function: t3]
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?b, ?c, ?d, ?e, ?f. ?e -> (forall ?g, ?h, ?i. (?g -> ?i
//│   where
//│     ?e <: ?g -> ?h & ?h -> ?i))) -> ?j` took too many steps and ran out of fuel (5000)
//│ ║  l.211: 	def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ ║         	           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟──  + ‹∀ 6. (α1614^7 -> α1616^7)›
//│ ╟──  + ‹∀ 6. (α1614^7 -> α1616^7)›
//│ ╟──  + ‹∀ 6. (α1614^7 -> α1616^7)›
//│ ╟──  + ‹∀ 6. (α1614^7 -> α1616^7)›
//│ ║  l.211: 	def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ ║         	                                                                                                                                                                          ^
//│ ╟──  + ‹∀ 6. (α1614^7 -> α1616^7)›
//│ ╟──  + ‹∀ 6. (α1614^7 -> α1616^7)›
//│ ╟──  + ‹∀ 6. (α1614^7 -> α1616^7)›
//│ ╟──  + ‹∀ 6. (α1614^7 -> α1616^7)›
//│ ║  l.167: 	def k2 = fun x -> fun y -> y
//│ ║         	                           ^
//│ ╟──  + ‹∀ 6. (α1614^7 -> α1616^7)›
//│ ║  l.211: 	def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ ║         	                                                                                                                                                                   ^^^^^^^^
//│ ╟──  + ‹∀ 6. (α1614^7 -> α1616^7)›
//│ ║  l.211: 	def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ ║         	                                                                                                                                                                   ^^^^^^^^
//│ ╟──  + ‹∀ 6. (α1614^7 -> α1616^7)›
//│ ║  l.211: 	def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ ║         	                                                                                                                                                                   ^^^^^^^^
//│ ╟──  + ‹∀ 6. (α1614^7 -> α1616^7)›
//│ ║  l.211: 	def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ ║         	                                                                                                                                                                   ^^^^^^^^
//│ ╟──  + ‹∀ 6. (α1614^7 -> α1616^7)›
//│ ╟──  + ‹∀ 6. (α1614^7 -> α1616^7)›
//│ ╟──  + α1583_2903''
//│ ╟──  - ((‹∀ 0. ‹∀ 1. (α1052'' -> ‹∀ 2. (α1053''' -> α1053''')›)››,) -> α1585_3036'')
//│ ║  l.211: 	def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ ╙──       	                                                                                                                                       ^^^^
//│ t2: (nothing -> anything) -> error
//│   = [Function: t21]

// FIXME
t id succ 0
//│ res: error
//│    = 2

// FIXME
//:e // due to tapping
t2 id succ 0
//│ res: error
//│    = 2

// let t y = (fun h -> h (h (h (h (fun x -> y))))) (fun f -> fun (n:Int) -> n (fun v -> k') k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k') (fun f -> fun x -> f (p k' f x))) (fun s -> s k' k') k) g) x)) three

// FIXME
// :e // due to tapping
def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
//│ ╔══[ERROR] Cyclic-looking constraint while typing lambda expression
//│ ║  l.279: 	def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
//│ ║         	                                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  α3694_3758''''  <:  ((‹∀ 0. ‹∀ 1. (α1052'' -> ‹∀ 2. (α1053''' -> α1053''')›)››,) -> α3696_3810'''')    TypeVariable  FunctionType
//│ ╙──  ... looks like:  α3694^7  <:  ((‹∀ 0. ‹∀ 1. (α1052'' -> ‹∀ 2. (α1053''' -> α1053''')›)››,) -> α3696_3766^8)
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.279: 	def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
//│ ║         	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  α3694_3991''  <:  ((‹∀ 0. ‹∀ 1. (α1052'' -> ‹∀ 2. (α1053''' -> α1053''')›)››,) -> α3696_4043'')    TypeVariable  FunctionType
//│ ╙──  ... looks like:  α3694^7  <:  ((‹∀ 0. ‹∀ 1. (α1052'' -> ‹∀ 2. (α1053''' -> α1053''')›)››,) -> α3696_3999^8)
//│ t: anything -> error
//│  = [Function: t4]
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?b, ?c, ?d, ?e, ?f, ?g, ?h. ?f -> (forall ?i, ?j, ?k, ?l. (?i -> ?l
//│   where
//│     ?f <: ?i -> ?j & ?j -> ?k & ?k -> ?l))) -> ?m` took too many steps and ran out of fuel (5000)
//│ ║  l.280: 	def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
//│ ║         	           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟──  + (α4111_6915'' -> α4113_6917'')
//│ ║  l.280: 	def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
//│ ║         	                                                                                                                                                                                ^^^^^^^^^^^^^^^^
//│ ╟──  + ‹∀ 6. (α4111^7 -> α4113^7)›
//│ ║  l.280: 	def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
//│ ║         	                                                                                                                                                                                ^^^^^^^^^^^^^^^^
//│ ╟──  - ((‹∀ 0. ‹∀ 1. (α1052'' -> ‹∀ 2. (α1053''' -> α1053''')›)››,) -> α4084_6627'')
//│ ║  l.280: 	def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
//│ ║         	                                                                                                                                       ^^^^
//│ ╟──  - ((‹∀ 0. ‹∀ 1. (α1052'' -> ‹∀ 2. (α1053''' -> α1053''')›)››,) -> α4084_6627'')
//│ ║  l.280: 	def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
//│ ║         	                                                                                                                                       ^^^^
//│ ╟──  - ((‹∀ 0. ‹∀ 1. (α1052'' -> ‹∀ 2. (α1053''' -> α1053''')›)››,) -> α4084_6627'')
//│ ╟──  - α4082_4952''
//│ ╟──  - α4082_4952''
//│ ╟──  - α4082_4952''
//│ ║  l.170: 	def three = fun f -> fun x -> f (f (f x))
//│ ║         	                                      ^
//│ ╟──  - α4082_4952''
//│ ╙──  - α1111_4948''
//│ t2: (nothing -> anything) -> error
//│   = [Function: t22]

// (* This comment is from the ORIGINAL PAGE: *)
// (* Factorial of three. Exposed bugs in old implementation. This one works correctly, but the generated files take up to 3.8GB, and it takes about 1 hour on a 2GHz PIII box to get the result. You can see the final judgement here. Yes, the result is the Church numeral for 6. *)

// (* We test that the result is 6: *)
// let succ n = n + 1 ;;
// t id succ 0 ;;

// FIXME
t id succ 0
//│ res: error
//│    = 6

// :e // TODO try without cycle check // works with quantif extrus
// :e // FIXME? refreshing-extr
t2 id succ 0
//│ res: error
//│    = 6

// let t (z : 0) = let x = (fun (y: ['t > 0] 'a -> 't) -> y z y) in x x;;
def t (z: nothing) = let x = fun (y: forall 't. 'a -> 't) -> y z y in x x
//│ t: nothing -> nothing
//│  = [Function: t5]

// (* Plus petit. *)
// type tt = ['b = 0] ['c > ['a] ['d = ['t] 'a -> 't] ['e] 'd -> 'e] 'b -> 'c ;;
// let t (z : 0) = let x = (fun (y: ['t > 0] 'a -> 't) -> y z) in x x;;
type Tt = forall 'b 'c. ('b & nothing) -> ('c | (forall 'a 'd 'e. ('d & (forall 't. 'a -> 't))) -> 'e)
def t (z: nothing) = let x = fun (y: forall 't. 'a -> 't) -> y z in x x
//│ Defined type alias Tt
//│ t: nothing -> nothing
//│  = [Function: t6]

// (*
//     * Rank 3, untypable in System F?
//       (fun x -> z (x (fun f -> fun u -> f u)) (x (fun v -> fun g -> g v))) (fun y -> y y y)
// FIXME: z is free???

//     * Untypable at any rank
//       (fun x -> x x) (fun x -> x x)
// :e // TODO show failure without cycle check // works with quantif extrus
:re
:e // FIXME? refreshing-extr
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.365: 	(fun x -> x x) (fun x -> x x)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. (α7367' -> α7368')›  <:  α7367_7374    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. (α7367' -> α7368')›  <:  α7367'
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

//     * Rank 3, untypable in F2 but F3
//       (fun f x -> f (f x)) (fun f x -> f (f x)) (fun v w -> v)
:e // FIXME?
(fun f -> fun x -> f (f x)) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.379: 	(fun f -> fun x -> f (f x)) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. (α7425_7481'' -> α7424_7480)›  <:  α7392_7447    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. (α7425'' -> α7424')›  <:  α7392'
//│ res: error
//│    = [Function (anonymous)]

//     * Rank 4, alternate formulation, untypeable in F2, but F3
//       (fun two k -> two two k)(fun f x -> f (f x)) (fun v w -> v)
:e // FIXME?
(fun two -> fun k -> two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.392: 	(fun two -> fun k -> two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. (α7574_7663'' -> α7573_7662)›  <:  α7497_7629    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. (α7574'' -> α7573')›  <:  α7497'
//│ res: error
//│    = [Function (anonymous)]

//     * Rank 5, causes huge blowup. Do not attempt to output skeletons !
//       (fun two k -> two two two k)(fun f -x -> f (f x)) (fun v w -> v)
// * Note: the only example in this file that requires `:GeneralizeCurriedFunctions`
// :e // due to not stashing...?
:e // FIXME? refreshing-extr
(fun two -> fun k -> two two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.407: 	(fun two -> fun k -> two two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  α7674_7955  <:  ((α7675_8068,) -> α7676_8069)    TypeVariable  FunctionType
//│ ╙──  ... looks like:  α7674'  <:  ((α7675_7960'',) -> α7676_7961'')
//│ res: error
//│    = [Function (anonymous)]



//  ?????
//     * Factorial of two, using the Y combinator
//       (fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))

// *)
// :e // works with quantif extrus
:e // FIXME? refreshing-extr
:re
(fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.427: 	(fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))
//│ ║         	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. {(α8081'' -> α8083'') where: α8075' <: ((α8082'',) -> α8083'')}›  <:  α8081_8095'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. {(α8081'' -> α8083'') where: α8075' <: ((α8082'',) -> α8083'')}›  <:  α8081''
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded


