// type bot = 0;;
type Bot = forall 'a. 'a
//│ Defined type alias Bot

// (* Rank 6 with intersection types, untypable in predicative System F,
//    typable in impredicative System F *)


// let imp (z : bot) =
//   (fun (x : ['a] ('a -> 'u) -> 'v) -> x x)
//   (fun (y : 'a -> bot) -> y z y);;
def imp (z: Bot) =
  (fun (x: forall 'a. ('a -> 'u) -> 'v) -> x x)
  (fun (y: 'a -> Bot) -> y z y)
def imp' z =
  (fun x -> x x)
  (fun y -> y z y)
//│ imp: Bot -> nothing
//│    = [Function: imp]
//│ imp': ('a -> 'a -> (forall 'b, 'c. ('a -> 'b -> 'c & 'b) -> 'c) -> 'd & 'a) -> 'd
//│     = [Function: imp]


// (* Quelques constantes. *)

// type sid = ['a] 'a -> 'a
type Sid = forall 'a. 'a -> 'a
//│ Defined type alias Sid

// let id = fun x -> x
// ;;
def id = fun x -> x
//│ id: 'a -> 'a
//│   = [Function: id]

// let delta = fun (x:sid) -> x x
// ;;
def delta = fun (x: Sid) -> x x
def delta' = fun x -> x x
//│ delta: Sid -> Sid
//│      = [Function: delta]
//│ delta': ('a -> 'b & 'a) -> 'b
//│       = [Function: delta]

// delta id ;;
delta id
delta' id
//│ res: Sid
//│    = [Function: id]
//│ res: 'a -> 'a
//│    = [Function: id]

// let t a b c d e = (fun x -> a x x) ((fun y -> b (c y)) (d e)) ;;
def t a b c d e = (fun x -> a x x) ((fun y -> b (c y)) (d e))
//│ t: ('a -> 'a -> 'b) -> ('c -> 'a) -> ('d -> 'c) -> ('e -> 'd) -> 'e -> 'b
//│  = [Function: t]

// let t w z a b = (fun y -> (fun x -> w (x y) z) a) b ;;
def t w z a b = (fun y -> (fun x -> w (x y) z) a) b
//│ t: ('a -> 'b -> 'c) -> 'b -> ('d -> 'a) -> 'd -> 'c
//│  = [Function: t1]

// let t y a = (fun x -> x (x y)) ((fun z -> z) (fun x -> a x)) ;;
def t y a = (fun x -> x (x y)) ((fun z -> z) (fun x -> a x))
//│ t: 'a -> ('a -> 'b & 'b -> 'c) -> 'c
//│  = [Function: t2]

// (* Rank 1 *)
// (fun x -> fun y -> x y) (fun y -> fun x -> x y) ;;
(fun x -> fun y -> x y) (fun y -> fun x -> x y)
//│ res: 'a -> ('a -> 'b) -> 'b
//│    = [Function (anonymous)]

// (* Rank 3 *)
// (fun x -> fun y -> x) delta ;;
(fun x -> fun y -> x) delta
(fun x -> fun y -> x) delta'
//│ res: anything -> Sid -> Sid
//│    = [Function (anonymous)]
//│ res: anything -> (forall 'a, 'b. ('a -> 'b & 'a) -> 'b)
//│    = [Function (anonymous)]

// (* Rank 5 *)
// (fun x -> fun y -> x y) (fun y -> fun x -> x y) delta ;;
(fun x -> fun y -> x y) (fun y -> fun x -> x y) delta
(fun x -> fun y -> x y) (fun y -> fun x -> x y) delta'
//│ res: ((Sid -> Sid) -> 'a) -> 'a
//│    = [Function (anonymous)]
//│ res: ((forall 'a, 'b. ('a -> 'b & 'a) -> 'b) -> 'c) -> 'c
//│    = [Function (anonymous)]

// (* Rank 8 *)
// (fun (x:sid) -> x x x x x) id delta ;;
(fun (x: Sid) -> x x x x x) id delta
(fun x -> x x x x x) id delta'
//│ res: Sid -> Sid
//│    = [Function: delta]
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: delta]

// (* Rank 2 *)
// type sk = ['a,'b] 'a -> 'b -> 'a;;
// (fun (f:sk) -> fun x -> f f x) (fun v -> fun w -> v) ;;
type Sk = forall 'a 'b. 'a -> 'b -> 'a
(fun (f: Sk) -> fun x -> f f x) (fun v -> fun w -> v)
(fun f -> fun x -> f f x) (fun v -> fun w -> v)
//│ Defined type alias Sk
//│ res: anything -> Sk
//│    = [Function (anonymous)]
//│ res: anything -> (forall 'a. 'a -> anything -> 'a)
//│    = [Function (anonymous)]

// (* Rank 3 *)
// (fun t -> fun k -> t k) (fun (f:sk) -> fun x -> f f x) (fun v -> fun w -> v);;
(fun t -> fun k -> t k) (fun (f: Sk) -> fun x -> f f x) (fun v -> fun w -> v)
(fun t -> fun k -> t k) (fun f -> fun x -> f f x) (fun v -> fun w -> v)
//│ res: anything -> Sk
//│    = [Function (anonymous)]
//│ res: anything -> (forall 'a. 'a -> anything -> 'a)
//│    = [Function (anonymous)]


// let k = fun x y -> x
// let k' = fun x y -> y
// let app = fun f x -> f x
// let two = fun f x -> f (f x)
// let three = fun f x -> f (f (f x))
def k = fun x -> fun y -> x
def k2 = fun x -> fun y -> y
def app = fun f -> fun x -> f x
def two = fun f -> fun x -> f (f x)
def three = fun f -> fun x -> f (f (f x))
//│ k: 'a -> anything -> 'a
//│  = [Function: k]
//│ k2: anything -> 'a -> 'a
//│   = [Function: k2]
//│ app: ('a -> 'b) -> 'a -> 'b
//│    = [Function: app]
//│ two: ('a -> 'b & 'c -> 'a) -> 'c -> 'b
//│    = [Function: two]
//│ three: ('a -> 'b & 'c -> 'd & 'b -> 'c) -> 'a -> 'd
//│      = [Function: three]

// type Int = ['a] ('a -> 'a) -> ('a -> 'a)
// ;;
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt

// (* Factorial of two and three *)
// (* Only ONE annotation ! *)
// let t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n:Int) -> n (fun v -> k') k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k') (fun f -> fun x -> f (p k' f x))) (fun s -> s k' k') k) g) x)) two ;;
// FIXME
def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ t: 'a -> (('b -> 'c & 'd) -> ('b & 'e) -> ('c | 'f)
//│   where
//│     'g <: (((forall 'a, 'h. 'a -> 'h -> 'h) -> 'i & 'a) -> ('i -> (('j -> 'k & 'l) -> 'm -> 'k
//│   where
//│     'a <: (forall 'a, 'h. 'a -> 'h -> 'h) -> 'l -> 'm -> 'j) -> 'n) -> 'n) -> (((forall 'a, 'h. 'a -> 'h -> 'h) -> (forall 'a, 'h. 'a -> 'h -> 'h) -> 'o) -> 'o) -> (forall 'a, 'p. 'p -> 'a -> 'p) -> 'q & 'r -> 'e -> 'f
//│     's <: 'q -> 'd -> 'r)
//│  = [Function: t3]
//│ t2: 'a -> (forall 'b, 'c, 'd. ('c -> 'e -> 'f
//│   where
//│     'g <: 'b -> 'c -> 'd
//│     'h <: (((forall 'a, 'i. 'a -> 'i -> 'i) -> 'j & 'a) -> ('j -> (('k -> 'l & 'm) -> 'n -> 'l
//│   where
//│     'a <: (forall 'a, 'i. 'a -> 'i -> 'i) -> 'm -> 'n -> 'k) -> 'o) -> 'o) -> (((forall 'a, 'i. 'a -> 'i -> 'i) -> (forall 'a, 'i. 'a -> 'i -> 'i) -> 'p) -> 'p) -> (forall 'a, 'q. 'q -> 'a -> 'q) -> 'b & 'd -> 'e -> 'f))
//│   = [Function: t21]

// FIXME
t id succ 0
t2 id succ 0
//│ res: int
//│    = 2
//│ res: nothing
//│    = 2

// let t y = (fun h -> h (h (h (h (fun x -> y))))) (fun f -> fun (n:Int) -> n (fun v -> k') k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k') (fun f -> fun x -> f (p k' f x))) (fun s -> s k' k') k) g) x)) three
// FIXME
def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
//│ t: 'a -> (forall 'b, 'c, 'd. (('e -> 'f & 'c) -> ('e & 'g) -> ('f | 'h)
//│   where
//│     'i <: 'b -> 'c -> 'd
//│     'j <: (((forall 'a, 'k. 'a -> 'k -> 'k) -> 'l & 'a) -> ('l -> (('m -> 'n & 'o) -> 'p -> 'n
//│   where
//│     'a <: (forall 'a, 'k. 'a -> 'k -> 'k) -> 'o -> 'p -> 'm) -> 'q) -> 'q) -> (((forall 'a, 'k. 'a -> 'k -> 'k) -> (forall 'a, 'k. 'a -> 'k -> 'k) -> 'r) -> 'r) -> (forall 'a, 's. 's -> 'a -> 's) -> 'b & 'd -> 'g -> 'h))
//│  = [Function: t4]
//│ t2: 'a -> (forall 'b, 'c, 'd. ('c -> 'e -> 'f
//│   where
//│     'g <: 'b -> 'c -> 'd
//│     'h <: (((forall 'a, 'i. 'a -> 'i -> 'i) -> 'j & 'a) -> ('j -> (('k -> 'l & 'm) -> 'n -> 'l
//│   where
//│     'a <: (forall 'a, 'i. 'a -> 'i -> 'i) -> 'm -> 'n -> 'k) -> 'o) -> 'o) -> (((forall 'a, 'i. 'a -> 'i -> 'i) -> (forall 'a, 'i. 'a -> 'i -> 'i) -> 'p) -> 'p) -> (forall 'a, 'q. 'q -> 'a -> 'q) -> 'b & 'd -> 'e -> 'f))
//│   = [Function: t22]

// (* This comment is from the ORIGINAL PAGE: *)
// (* Factorial of three. Exposed bugs in old implementation. This one works correctly, but the generated files take up to 3.8GB, and it takes about 1 hour on a 2GHz PIII box to get the result. You can see the final judgement here. Yes, the result is the Church numeral for 6. *)

// (* We test that the result is 6: *)
// let succ n = n + 1 ;;
// t id succ 0 ;;
// FIXME
t id succ 0
t2 id succ 0
//│ res: int
//│    = 6
//│ res: nothing
//│    = 6

// let t (z : 0) = let x = (fun (y: ['t > 0] 'a -> 't) -> y z y) in x x;;
def t (z: nothing) = let x = fun (y: forall 't. 'a -> 't) -> y z y in x x
//│ t: nothing -> nothing
//│  = [Function: t5]

// (* Plus petit. *)
// type tt = ['b = 0] ['c > ['a] ['d = ['t] 'a -> 't] ['e] 'd -> 'e] 'b -> 'c ;;
// let t (z : 0) = let x = (fun (y: ['t > 0] 'a -> 't) -> y z) in x x;;
type Tt = forall 'b 'c. ('b & nothing) -> ('c | (forall 'a 'd 'e. ('d & (forall 't. 'a -> 't))) -> 'e)
def t (z: nothing) = let x = fun (y: forall 't. 'a -> 't) -> y z in x x
//│ Defined type alias Tt
//│ t: nothing -> nothing
//│  = [Function: t6]

// (*
//     * Rank 3, untypable in System F?
//       (fun x -> z (x (fun f -> fun u -> f u)) (x (fun v -> fun g -> g v))) (fun y -> y y y)
// FIXME: z is free???

//     * Untypable at any rank
//       (fun x -> x x) (fun x -> x x)
:e
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Subtyping constraint of the form `?a -> ?b <: (forall ?c, ?d. ?d -> ?c) -> ?e` exceeded recursion depth limit (400)
//│ ║  l.233: 	(fun x -> x x) (fun x -> x x)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. (α1119' -> α1120')›  <!<  α1144
//│ ╟── while constraining:  α1142  <!<  α1144
//│ ╟── while constraining:  (α1142,)  <!<  (α1144,)
//│ ╟── while constraining:  (α1144 -> α1145)  <!<  ((α1142,) -> α1143)
//│ ╟── while constraining:  ‹∀ 0. (α1119' -> α1120')›  <!<  ((α1142,) -> α1143)
//│ ╟── while constraining:  ‹∀ 0. (α1119' -> α1120')›  <!<  α1142
//│ ╟── while constraining:  α1140  <!<  α1142
//│ ╟── while constraining:  (α1140,)  <!<  (α1142,)
//│ ╟── while constraining:  (α1142 -> α1143)  <!<  ((α1140,) -> α1141)
//│ ╟── while constraining:  ‹∀ 0. (α1119' -> α1120')›  <!<  ((α1140,) -> α1141)
//│ ╟── while constraining:  ‹∀ 0. (α1119' -> α1120')›  <!<  α1140
//│ ╟── while constraining:  α1138  <!<  α1140
//│ ╟── while constraining:  (α1138,)  <!<  (α1140,)
//│ ╟── while constraining:  (α1140 -> α1141)  <!<  ((α1138,) -> α1139)
//│ ╟── while constraining:  ‹∀ 0. (α1119' -> α1120')›  <!<  ((α1138,) -> α1139)
//│ ╟── while constraining:  ‹∀ 0. (α1119' -> α1120')›  <!<  α1138
//│ ╟── while constraining:  α1136  <!<  α1138
//│ ╟── while constraining:  (α1136,)  <!<  (α1138,)
//│ ╟── while constraining:  (α1138 -> α1139)  <!<  ((α1136,) -> α1137)
//│ ╟── while constraining:  ‹∀ 0. (α1119' -> α1120')›  <!<  ((α1136,) -> α1137)
//│ ╟── while constraining:  ‹∀ 0. (α1119' -> α1120')›  <!<  α1136
//│ ╟── while constraining:  α1134  <!<  α1136
//│ ╟── while constraining:  (α1134,)  <!<  (α1136,)
//│ ╟── while constraining:  (α1136 -> α1137)  <!<  ((α1134,) -> α1135)
//│ ╟── while constraining:  ‹∀ 0. (α1119' -> α1120')›  <!<  ((α1134,) -> α1135)
//│ ╟── while constraining:  ‹∀ 0. (α1119' -> α1120')›  <!<  α1134
//│ ╟── while constraining:  α1132  <!<  α1134
//│ ╟── while constraining:  (α1132,)  <!<  (α1134,)
//│ ╟── while constraining:  (α1134 -> α1135)  <!<  ((α1132,) -> α1133)
//│ ╟── while constraining:  ‹∀ 0. (α1119' -> α1120')›  <!<  ((α1132,) -> α1133)
//│ ╟── while constraining:  ‹∀ 0. (α1119' -> α1120')›  <!<  α1132
//│ ╟── while constraining:  α1130  <!<  α1132
//│ ╟── while constraining:  (α1130,)  <!<  (α1132,)
//│ ╟── while constraining:  (α1132 -> α1133)  <!<  ((α1130,) -> α1131)
//│ ╟── while constraining:  ‹∀ 0. (α1119' -> α1120')›  <!<  ((α1130,) -> α1131)
//│ ╟── while constraining:  ‹∀ 0. (α1119' -> α1120')›  <!<  α1130
//│ ╟── while constraining:  α1128  <!<  α1130
//│ ╟── while constraining:  (α1128,)  <!<  (α1130,)
//│ ╟── while constraining:  (α1130 -> α1131)  <!<  ((α1128,) -> α1129)
//│ ╟── while constraining:  ‹∀ 0. (α1119' -> α1120')›  <!<  ((α1128,) -> α1129)
//│ ╟── while constraining:  ‹∀ 0. (α1119' -> α1120')›  <!<  α1128
//│ ╟── while constraining:  α1126  <!<  α1128
//│ ╟── while constraining:  (α1126,)  <!<  (α1128,)
//│ ╟── while constraining:  (α1128 -> α1129)  <!<  ((α1126,) -> α1127)
//│ ╟── while constraining:  ‹∀ 0. (α1119' -> α1120')›  <!<  ((α1126,) -> α1127)
//│ ╟── while constraining:  ‹∀ 0. (α1119' -> α1120')›  <!<  α1126
//│ ╟── while constraining:  α1124  <!<  α1126
//│ ╟── while constraining:  (α1124,)  <!<  (α1126,)
//│ ╟── while constraining:  (α1126 -> α1127)  <!<  ((α1124,) -> α1125)
//│ ╟── while constraining:  ‹∀ 0. (α1119' -> α1120')›  <!<  ((α1124,) -> α1125)
//│ ╟── while constraining:  ‹∀ 0. (α1119' -> α1120')›  <!<  α1124
//│ ╟── while constraining:  α1122  <!<  α1124
//│ ╟── while constraining:  (α1122,)  <!<  (α1124,)
//│ ╟── while constraining:  (α1124 -> α1125)  <!<  ((α1122,) -> α1123)
//│ ╟── while constraining:  ‹∀ 0. (α1119' -> α1120')›  <!<  ((α1122,) -> α1123)
//│ ╟── while constraining:  ‹∀ 0. (α1119' -> α1120')›  <!<  α1122
//│ ╟── while constraining:  α1117  <!<  α1122
//│ ╟── while constraining:  (α1117,)  <!<  (α1122,)
//│ ╟── while constraining:  (α1122 -> α1123)  <!<  ((α1117,) -> α1118)
//│ ╟── while constraining:  ‹∀ 0. (α1119' -> α1120')›  <!<  ((α1117,) -> α1118)
//│ ╟── while constraining:  ‹∀ 0. (α1119' -> α1120')›  <!<  α1117
//│ ╟── while constraining:  (‹∀ 0. (α1119' -> α1120')›,)  <!<  (α1117,)
//│ ╙── while constraining:  (α1117 -> α1118)  <!<  ((‹∀ 0. (α1119' -> α1120')›,) -> α1121)
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

//     * Rank 3, untypable in F2 but F3
//       (fun f x -> f (f x)) (fun f x -> f (f x)) (fun v w -> v)
(fun f -> fun x -> f (f x)) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ res: 'a -> 'b
//│   where
//│     'a :> 'b
//│     'b :> anything -> anything -> 'a
//│    = [Function (anonymous)]

//     * Rank 4, alternate formulation, untypeable in F2, but F3
//       (fun two k -> two two k)(fun f x -> f (f x)) (fun v w -> v)
(fun two -> fun k -> two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ res: 'a -> 'b
//│   where
//│     'a :> 'b
//│     'b :> anything -> anything -> 'a
//│    = [Function (anonymous)]

//     * Rank 5, causes huge blowup. Do not attempt to output skeletons !
//       (fun two k -> two two two k)(fun f -x -> f (f x)) (fun v w -> v)
(fun two -> fun k -> two two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ res: 'a -> 'b
//│   where
//│     'a :> 'c
//│     'c :> anything -> 'a | 'b
//│     'b :> anything -> 'c
//│    = [Function (anonymous)]



//  ?????
//     * Factorial of two, using the Y combinator
//       (fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))

// *)
:e
(fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))
//│ ╔══[ERROR] Subtyping constraint of the form `?a -> ?b <: (forall ?c, ?d, ?e. (?e -> ?d
//│   where
//│     ?f <: ?c -> ?d)) -> ?g` exceeded recursion depth limit (400)
//│ ║  l.340: 	(fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))
//│ ║         	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. (α1289 <: ((α1294',) -> α1295') => (α1293' -> α1295'))›  <!<  α1332
//│ ╟── while constraining:  α1329  <!<  α1332
//│ ╟── while constraining:  (α1329,)  <!<  (α1332,)
//│ ╟── while constraining:  (α1332 -> α1331)  <!<  ((α1329,) -> α1327)
//│ ╟── while constraining:  (α1289 <: ((α1330,) -> α1331) => (α1332 -> α1331))  <!<  ((α1329,) -> α1327)
//│ ╟── while constraining:  ‹∀ 0. (α1289 <: ((α1294',) -> α1295') => (α1293' -> α1295'))›  <!<  ((α1329,) -> α1327)
//│ ╟── while constraining:  ‹∀ 0. (α1289 <: ((α1294',) -> α1295') => (α1293' -> α1295'))›  <!<  α1329
//│ ╟── while constraining:  α1326  <!<  α1329
//│ ╟── while constraining:  (α1326,)  <!<  (α1329,)
//│ ╟── while constraining:  (α1329 -> α1328)  <!<  ((α1326,) -> α1324)
//│ ╟── while constraining:  (α1289 <: ((α1327,) -> α1328) => (α1329 -> α1328))  <!<  ((α1326,) -> α1324)
//│ ╟── while constraining:  ‹∀ 0. (α1289 <: ((α1294',) -> α1295') => (α1293' -> α1295'))›  <!<  ((α1326,) -> α1324)
//│ ╟── while constraining:  ‹∀ 0. (α1289 <: ((α1294',) -> α1295') => (α1293' -> α1295'))›  <!<  α1326
//│ ╟── while constraining:  α1323  <!<  α1326
//│ ╟── while constraining:  (α1323,)  <!<  (α1326,)
//│ ╟── while constraining:  (α1326 -> α1325)  <!<  ((α1323,) -> α1321)
//│ ╟── while constraining:  (α1289 <: ((α1324,) -> α1325) => (α1326 -> α1325))  <!<  ((α1323,) -> α1321)
//│ ╟── while constraining:  ‹∀ 0. (α1289 <: ((α1294',) -> α1295') => (α1293' -> α1295'))›  <!<  ((α1323,) -> α1321)
//│ ╟── while constraining:  ‹∀ 0. (α1289 <: ((α1294',) -> α1295') => (α1293' -> α1295'))›  <!<  α1323
//│ ╟── while constraining:  α1320  <!<  α1323
//│ ╟── while constraining:  (α1320,)  <!<  (α1323,)
//│ ╟── while constraining:  (α1323 -> α1322)  <!<  ((α1320,) -> α1318)
//│ ╟── while constraining:  (α1289 <: ((α1321,) -> α1322) => (α1323 -> α1322))  <!<  ((α1320,) -> α1318)
//│ ╟── while constraining:  ‹∀ 0. (α1289 <: ((α1294',) -> α1295') => (α1293' -> α1295'))›  <!<  ((α1320,) -> α1318)
//│ ╟── while constraining:  ‹∀ 0. (α1289 <: ((α1294',) -> α1295') => (α1293' -> α1295'))›  <!<  α1320
//│ ╟── while constraining:  α1317  <!<  α1320
//│ ╟── while constraining:  (α1317,)  <!<  (α1320,)
//│ ╟── while constraining:  (α1320 -> α1319)  <!<  ((α1317,) -> α1315)
//│ ╟── while constraining:  (α1289 <: ((α1318,) -> α1319) => (α1320 -> α1319))  <!<  ((α1317,) -> α1315)
//│ ╟── while constraining:  ‹∀ 0. (α1289 <: ((α1294',) -> α1295') => (α1293' -> α1295'))›  <!<  ((α1317,) -> α1315)
//│ ╟── while constraining:  ‹∀ 0. (α1289 <: ((α1294',) -> α1295') => (α1293' -> α1295'))›  <!<  α1317
//│ ╟── while constraining:  α1314  <!<  α1317
//│ ╟── while constraining:  (α1314,)  <!<  (α1317,)
//│ ╟── while constraining:  (α1317 -> α1316)  <!<  ((α1314,) -> α1312)
//│ ╟── while constraining:  (α1289 <: ((α1315,) -> α1316) => (α1317 -> α1316))  <!<  ((α1314,) -> α1312)
//│ ╟── while constraining:  ‹∀ 0. (α1289 <: ((α1294',) -> α1295') => (α1293' -> α1295'))›  <!<  ((α1314,) -> α1312)
//│ ╟── while constraining:  ‹∀ 0. (α1289 <: ((α1294',) -> α1295') => (α1293' -> α1295'))›  <!<  α1314
//│ ╟── while constraining:  α1311  <!<  α1314
//│ ╟── while constraining:  (α1311,)  <!<  (α1314,)
//│ ╟── while constraining:  (α1314 -> α1313)  <!<  ((α1311,) -> α1309)
//│ ╟── while constraining:  (α1289 <: ((α1312,) -> α1313) => (α1314 -> α1313))  <!<  ((α1311,) -> α1309)
//│ ╟── while constraining:  ‹∀ 0. (α1289 <: ((α1294',) -> α1295') => (α1293' -> α1295'))›  <!<  ((α1311,) -> α1309)
//│ ╟── while constraining:  ‹∀ 0. (α1289 <: ((α1294',) -> α1295') => (α1293' -> α1295'))›  <!<  α1311
//│ ╟── while constraining:  α1308  <!<  α1311
//│ ╟── while constraining:  (α1308,)  <!<  (α1311,)
//│ ╟── while constraining:  (α1311 -> α1310)  <!<  ((α1308,) -> α1306)
//│ ╟── while constraining:  (α1289 <: ((α1309,) -> α1310) => (α1311 -> α1310))  <!<  ((α1308,) -> α1306)
//│ ╟── while constraining:  ‹∀ 0. (α1289 <: ((α1294',) -> α1295') => (α1293' -> α1295'))›  <!<  ((α1308,) -> α1306)
//│ ╟── while constraining:  ‹∀ 0. (α1289 <: ((α1294',) -> α1295') => (α1293' -> α1295'))›  <!<  α1308
//│ ╟── while constraining:  α1305  <!<  α1308
//│ ╟── while constraining:  (α1305,)  <!<  (α1308,)
//│ ╟── while constraining:  (α1308 -> α1307)  <!<  ((α1305,) -> α1303)
//│ ╟── while constraining:  (α1289 <: ((α1306,) -> α1307) => (α1308 -> α1307))  <!<  ((α1305,) -> α1303)
//│ ╟── while constraining:  ‹∀ 0. (α1289 <: ((α1294',) -> α1295') => (α1293' -> α1295'))›  <!<  ((α1305,) -> α1303)
//│ ╟── while constraining:  ‹∀ 0. (α1289 <: ((α1294',) -> α1295') => (α1293' -> α1295'))›  <!<  α1305
//│ ╟── while constraining:  α1302  <!<  α1305
//│ ╟── while constraining:  (α1302,)  <!<  (α1305,)
//│ ╟── while constraining:  (α1305 -> α1304)  <!<  ((α1302,) -> α1300)
//│ ╟── while constraining:  (α1289 <: ((α1303,) -> α1304) => (α1305 -> α1304))  <!<  ((α1302,) -> α1300)
//│ ╟── while constraining:  ‹∀ 0. (α1289 <: ((α1294',) -> α1295') => (α1293' -> α1295'))›  <!<  ((α1302,) -> α1300)
//│ ╟── while constraining:  ‹∀ 0. (α1289 <: ((α1294',) -> α1295') => (α1293' -> α1295'))›  <!<  α1302
//│ ╟── while constraining:  α1299  <!<  α1302
//│ ╟── while constraining:  (α1299,)  <!<  (α1302,)
//│ ╟── while constraining:  (α1302 -> α1301)  <!<  ((α1299,) -> α1297)
//│ ╟── while constraining:  (α1289 <: ((α1300,) -> α1301) => (α1302 -> α1301))  <!<  ((α1299,) -> α1297)
//│ ╟── while constraining:  ‹∀ 0. (α1289 <: ((α1294',) -> α1295') => (α1293' -> α1295'))›  <!<  ((α1299,) -> α1297)
//│ ╟── while constraining:  ‹∀ 0. (α1289 <: ((α1294',) -> α1295') => (α1293' -> α1295'))›  <!<  α1299
//│ ╟── while constraining:  α1290  <!<  α1299
//│ ╟── while constraining:  (α1290,)  <!<  (α1299,)
//│ ╟── while constraining:  (α1299 -> α1298)  <!<  ((α1290,) -> α1291)
//│ ╟── while constraining:  (α1289 <: ((α1297,) -> α1298) => (α1299 -> α1298))  <!<  ((α1290,) -> α1291)
//│ ╟── while constraining:  ‹∀ 0. (α1289 <: ((α1294',) -> α1295') => (α1293' -> α1295'))›  <!<  ((α1290,) -> α1291)
//│ ╟── while constraining:  ‹∀ 0. (α1289 <: ((α1294',) -> α1295') => (α1293' -> α1295'))›  <!<  α1290
//│ ╟── while constraining:  (‹∀ 0. (α1289 <: ((α1294',) -> α1295') => (α1293' -> α1295'))›,)  <!<  (α1290,)
//│ ╙── while constraining:  (α1290 -> α1292)  <!<  ((‹∀ 0. (α1289 <: ((α1294',) -> α1295') => (α1293' -> α1295'))›,) -> α1296)
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

