:NoRecursiveTypes
:GeneralizeCurriedFunctions

// type bot = 0;;
type Bot = forall 'a. 'a
//│ Defined type alias Bot

// (* Rank 6 with intersection types, untypable in predicative System F,
//    typable in impredicative System F *)


// let imp (z : bot) =
//   (fun (x : ['a] ('a -> 'u) -> 'v) -> x x)
//   (fun (y : 'a -> bot) -> y z y);;
def imp (z: Bot) =
  (fun (x: forall 'a. ('a -> 'u) -> 'v) -> x x)
  (fun (y: 'a -> Bot) -> y z y)
def imp' z =
  (fun x -> x x)
  (fun y -> y z y)
//│ imp: Bot -> 'a
//│    = [Function: imp]
//│ imp': ('a -> ('b -> ((forall 'c, 'd, 'e. ('a -> ('c -> 'd & 'e) & 'c) -> 'd | 'f) -> ('g & 'h & 'i) & 'j & 'k) & 'l) & 'a & 'b) -> 'i
//│     = [Function: imp$]


// (* Quelques constantes. *)

// type sid = ['a] 'a -> 'a
type Sid = forall 'a. 'a -> 'a
//│ Defined type alias Sid

// let id = fun x -> x
// ;;
def id = fun x -> x
//│ id: 'a -> 'a
//│   = [Function: id]

// let delta = fun (x:sid) -> x x
// ;;
def delta = fun (x: Sid) -> x x
def delta' = fun x -> x x
//│ delta: Sid -> (Sid | 'a)
//│      = [Function: delta]
//│ delta': ('a -> 'b & 'a) -> 'b
//│       = [Function: delta$]

// delta id ;;
delta id
delta' id
//│ res: Sid
//│    = [Function: id]
//│ res: 'a -> 'a
//│    = [Function: id]

// let t a b c d e = (fun x -> a x x) ((fun y -> b (c y)) (d e)) ;;
def t a b c d e = (fun x -> a x x) ((fun y -> b (c y)) (d e))
//│ t: 'a -> (forall 'b. 'b -> (forall 'c. 'c -> (forall 'd. 'd -> (forall 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n. ('j -> 'm
//│   where
//│     'c <: 'i -> 'e
//│     'b <: 'e -> ('f & 'g & 'h)
//│     'a <: 'h -> ('h -> ('l & 'm) & 'n)
//│     'd <: 'j -> ('i & 'k))))))
//│  = [Function: t]

// let t w z a b = (fun y -> (fun x -> w (x y) z) a) b ;;
def t w z a b = (fun y -> (fun x -> w (x y) z) a) b
//│ t: 'a -> (forall 'b. 'b -> (forall 'c. 'c -> (forall 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j. (('d & 'j) -> 'h
//│   where
//│     'a <: 'e -> ('b -> ('f & 'g & 'h) & 'i)
//│     'c <: 'd -> 'e))))
//│  = [Function: t1]

// let t y a = (fun x -> x (x y)) ((fun z -> z) (fun x -> a x)) ;;
def t y a = (fun x -> x (x y)) ((fun z -> z) (fun x -> a x))
//│ t: 'a -> (forall 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i. (('a | 'b) -> ('c & 'd & 'e) & 'e -> ('f & 'g & 'h) & 'i) -> 'h)
//│  = [Function: t2]

// (* Rank 1 *)
// (fun x -> fun y -> x y) (fun y -> fun x -> x y) ;;
(fun x -> fun y -> x y) (fun y -> fun x -> x y)
//│ res: 'a -> 'b
//│   where
//│     forall 'c. 'c -> (forall 'd, 'e. ('c -> 'd & 'e) -> 'd) <: 'a -> 'b
//│    = [Function (anonymous)]

// (* Rank 3 *)
// (fun x -> fun y -> x) delta ;;
(fun x -> fun y -> x) delta
(fun x -> fun y -> x) delta'
//│ res: 'a -> (forall 'b. Sid -> (Sid | 'b))
//│    = [Function (anonymous)]
//│ res: 'a -> (forall 'b, 'c. ('b -> 'c & 'b) -> 'c)
//│    = [Function (anonymous)]

// (* Rank 5 *)
// (fun x -> fun y -> x y) (fun y -> fun x -> x y) delta ;;
(fun x -> fun y -> x y) (fun y -> fun x -> x y) delta
(fun x -> fun y -> x y) (fun y -> fun x -> x y) delta'
//│ res: ((forall 'a. Sid -> (Sid | 'a)) -> 'b & 'c) -> 'b
//│    = [Function (anonymous)]
//│ res: ((forall 'a, 'b. ('a -> 'b & 'a) -> 'b) -> 'c & 'd) -> 'c
//│    = [Function (anonymous)]

// (* Rank 8 *)
// (fun (x:sid) -> x x x x x) id delta ;;
(fun (x: Sid) -> x x x x x) id delta
(fun x -> x x x x x) id delta'
//│ res: Sid -> (Sid | 'a)
//│    = [Function: delta]
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: delta$]

// (* Rank 2 *)
// type sk = ['a,'b] 'a -> 'b -> 'a;;
// (fun (f:sk) -> fun x -> f f x) (fun v -> fun w -> v) ;;
type Sk = forall 'a 'b. 'a -> 'b -> 'a
(fun (f: Sk) -> fun x -> f f x) (fun v -> fun w -> v)
(fun f -> fun x -> f f x) (fun v -> fun w -> v)
//│ Defined type alias Sk
//│ res: ('a & 'b) -> (Sk | 'c)
//│    = [Function (anonymous)]
//│ res: 'a -> 'b
//│   where
//│     forall 'c. 'c -> (forall 'd. 'd -> 'c) <: (forall 'c. 'c -> (forall 'd. 'd -> 'c)) -> ('a -> 'b & 'e)
//│    = [Function (anonymous)]

// (* Rank 3 *)
// (fun t -> fun k -> t k) (fun (f:sk) -> fun x -> f f x) (fun v -> fun w -> v);;
(fun t -> fun k -> t k) (fun (f: Sk) -> fun x -> f f x) (fun v -> fun w -> v)
(fun t -> fun k -> t k) (fun f -> fun x -> f f x) (fun v -> fun w -> v)
//│ res: ('a & 'b) -> (Sk | 'c)
//│    = [Function (anonymous)]
//│ res: 'a -> 'b
//│   where
//│     forall 'c. 'c -> (forall 'd. 'd -> 'c) <: (forall 'c. 'c -> (forall 'd. 'd -> 'c)) -> ('a -> 'b & 'e)
//│    = [Function (anonymous)]


// let k = fun x y -> x
// let k' = fun x y -> y
// let app = fun f x -> f x
// let two = fun f x -> f (f x)
// let three = fun f x -> f (f (f x))
def k = fun x -> fun y -> x
def k2 = fun x -> fun y -> y
def app = fun f -> fun x -> f x
def two = fun f -> fun x -> f (f x)
def three = fun f -> fun x -> f (f (f x))
//│ k: 'a -> (forall 'b. 'b -> 'a)
//│  = [Function: k]
//│ k2: 'a -> (forall 'b. 'b -> 'b)
//│   = [Function: k2]
//│ app: 'a -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c))
//│    = [Function: app]
//│ two: 'a -> (forall 'a, 'b, 'c, 'd. ('b -> 'd
//│   where
//│     'a <: 'b -> 'c & 'c -> 'd))
//│    = [Function: two]
//│ three: 'a -> (forall 'a, 'b, 'c, 'd, 'e. ('b -> 'e
//│   where
//│     'a <: 'b -> 'c & 'c -> 'd & 'd -> 'e))
//│      = [Function: three]


// * Tony noticed this did not work before this commit generalizing the LHS of ascriptions...
// :e // TODO this works when generalizing the LHS of ascriptions
(app id): Sid
//│ res: Sid
//│    = [Function (anonymous)]
// * this one worked:
let t = app id in t: Sid
//│ res: Sid
//│    = [Function (anonymous)]


// type Int = ['a] ('a -> 'a) -> ('a -> 'a)
// ;;
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt

// (* Factorial of two and three *)
// (* Only ONE annotation ! *)
// let t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n:Int) -> n (fun v -> k') k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k') (fun f -> fun x -> f (p k' f x))) (fun s -> s k' k') k) g) x)) two ;;

:e // FIXME?
def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.189: 	def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ ║         	                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  α953_992^6  <:  ((‹∀ 0. ‹∀ 1. (α823_826'' -> ‹∀ 2. (α824_825''' -> α824_825''')›)››,) -> α955_1020^6)    TypeVariable  FunctionType
//│ ╙──  ... looks like:  α953_992^6  <:  ((‹∀ 0. ‹∀ 1. (α823_826'' -> ‹∀ 2. (α824_825''' -> α824_825''')›)››,) -> α955_993^8)
//│ t: 'b -> (forall 'b, 'c, 'd, 'e, 'f, 'g, 'h. ('c & 'd) -> (forall 'b, 'c, 'i, 'j, 'e, 'f, 'g. (('i & 'a & 'k & 'l) -> ('k | 'j)
//│   where
//│     'c <: 'i -> 'j
//│     ChurchInt -> (forall 'b, 'c, 'i, 'j, 'm, 'e, 'f. ('c & 'm) -> (forall 'b, 'i, 'j, 'e, 'f. (('i & 'a0 & 'n & 'o) -> ('n | 'j)
//│   where
//│     'c <: 'i -> 'j
//│     ChurchInt -> (forall 'b, 'c, 'i, 'j, 'p, 'e. ('c & 'p) -> (forall 'b, 'c, 'i, 'j, 'e. (('i & 'a1 & 'q & 'r) -> ('q | 'j)
//│   where
//│     'c <: 'i -> 'j
//│     forall 's. 's -> 'b | 'e <: (error | 't | 'u) -> ('p -> ('a1 -> ('a1 & 'q) & 'v) & 'w))) | 'x) | 'f <: (error | 'u | 'y) -> ('m -> ('a0 -> ('a0 & 'n) & 'z) & 'a1))) | 'b1) | 'g <: (error | 'u) -> ('d -> ('a -> ('a & 'k) & 'c1) & 'd1))) | 'h)
//│  = [Function: t3]

// :e // fails after new-refreshing-extrusion
// :e // Works since inconsistent constrained types...
def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) two
//│ t2: 'a -> (forall 'b. 'b -> (forall 'a, 'c, 'd, 'e. ('f -> 'g
//│   where
//│     forall 'h. 'h -> (forall 'h, 'i, 'j, 'k. ('i -> 'k
//│   where
//│     'h <: 'i -> 'j & 'j -> 'k)) | 'l <: (forall 'm. 'm -> (forall 'm. (('n -> ((forall 'o. 'o -> (forall 'm, 'o, 'p, 'q. ('r -> 'q
//│   where
//│     'o <: 'p -> 'q
//│     'm <: (forall 's. 's -> (forall 't. 't -> 't)) -> ('o -> ('r -> 'p & 'u) & 'v)))) -> 'w & 'x) & 'y) -> 'w
//│   where
//│     'm <: (forall 's. 's -> (forall 't. 't -> 't)) -> 'n))) -> ((((forall 's. 's -> (forall 't. 't -> 't)) -> ((forall 's. 's -> (forall 't. 't -> 't)) -> 'z & 'a1) & 'b1) -> 'z) -> ((forall 'c1. 'c1 -> (forall 'd1. 'd1 -> 'c1)) -> 'e1 & 'f1) & 'g1) & 'h1 -> ('f -> 'g & 'i1)
//│     ((forall 'j1. 'j1 -> (forall 's. 's -> (forall 't. 't -> 't))) -> ((forall 'c1. 'c1 -> (forall 'd1. 'd1 -> 'c1)) -> ((forall 'k1. 'k1 -> (forall 'k1, 'l1, 'm1. ('l1 -> 'm1
//│   where
//│     'k1 <: 'l1 -> 'm1))) -> ((forall 'n1. 'n1 -> (forall 'a, 'c, 'd. ('o1 -> 'p1
//│   where
//│     'q1 <: (forall 'm. 'm -> (forall 'm. (('n -> ((forall 'o. 'o -> (forall 'm, 'o, 'p, 'q. ('r -> 'q
//│   where
//│     'o <: 'p -> 'q
//│     'm <: (forall 's. 's -> (forall 't. 't -> 't)) -> ('o -> ('r -> 'p & 'u) & 'v)))) -> 'w & 'x) & 'y) -> 'w
//│   where
//│     'm <: (forall 's. 's -> (forall 't. 't -> 't)) -> 'n))) -> ((((forall 's. 's -> (forall 't. 't -> 't)) -> ((forall 's. 's -> (forall 't. 't -> 't)) -> 'z & 'a1) & 'b1) -> 'z) -> ((forall 'c1. 'c1 -> (forall 'd1. 'd1 -> 'c1)) -> 'r1 & 's1) & 't1) & 'u1 -> ('o1 -> 'p1 & 'v1)
//│     ((forall 'j1. 'j1 -> (forall 's. 's -> (forall 't. 't -> 't))) -> ((forall 'c1. 'c1 -> (forall 'd1. 'd1 -> 'c1)) -> ((forall 'k1. 'k1 -> (forall 'k1, 'l1, 'm1. ('l1 -> 'm1
//│   where
//│     'k1 <: 'l1 -> 'm1))) -> ((forall 'w1. 'w1 -> (forall 'a, 'c. ('x1 -> 'y1
//│   where
//│     'z1 <: (forall 'm. 'm -> (forall 'm. (('n -> ((forall 'o. 'o -> (forall 'm, 'o, 'p, 'q. ('r -> 'q
//│   where
//│     'o <: 'p -> 'q
//│     'm <: (forall 's. 's -> (forall 't. 't -> 't)) -> ('o -> ('r -> 'p & 'u) & 'v)))) -> 'w & 'x) & 'y) -> 'w
//│   where
//│     'm <: (forall 's. 's -> (forall 't. 't -> 't)) -> 'n))) -> ((((forall 's. 's -> (forall 't. 't -> 't)) -> ((forall 's. 's -> (forall 't. 't -> 't)) -> 'z & 'a1) & 'b1) -> 'z) -> ((forall 'c1. 'c1 -> (forall 'd1. 'd1 -> 'c1)) -> 'a2 & 'b2) & 'c2) & 'd2 -> ('x1 -> 'y1 & 'e2)
//│     forall 'f2. 'f2 -> 'a | 'c <: 'a2 -> ('w1 -> 'd2 & 'g2)))) -> 'h2 & 'i2) & 'j2) & 'k2) & 'z1) -> 'h2 | 'd <: 'r1 -> ('n1 -> 'u1 & 'l2)))) -> 'm2 & 'n2) & 'o2) & 'p2) & 'q1) -> 'm2 | 'e <: 'e1 -> ('b -> 'h1 & 'q2))) | 'r2)
//│   = [Function: t21]

// :e // fails since the fix to spurious-TV-cycles // succeeds since the fix to the fix to spurious-TV-cycles...
t id succ 0
//│ res: int
//│    = 2

//:e // due to tapping
t2 id succ 0
//│ res: int
//│    = 2

// let t y = (fun h -> h (h (h (h (fun x -> y))))) (fun f -> fun (n:Int) -> n (fun v -> k') k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k') (fun f -> fun x -> f (p k' f x))) (fun s -> s k' k') k) g) x)) three

// :e // due to tapping
:e // fails since the fix to spurious-TV-cycles
def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
def t2 y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun n -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.258: 	def t y = (fun h -> h (h (h (fun x -> y)))) (fun f -> fun (n: ChurchInt) -> n (fun v -> k2) k app (fun g -> fun x -> n (f (n (fun p -> fun s -> s (p k2) (fun f -> fun x -> f (p k2 f x))) (fun s -> s k2 k2) k) g) x)) three
//│ ║         	                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  α2159_2198^6  <:  ((‹∀ 0. ‹∀ 1. (α823_826'' -> ‹∀ 2. (α824_825''' -> α824_825''')›)››,) -> α2161_2226^6)    TypeVariable  FunctionType
//│ ╙──  ... looks like:  α2159_2198^6  <:  ((‹∀ 0. ‹∀ 1. (α823_826'' -> ‹∀ 2. (α824_825''' -> α824_825''')›)››,) -> α2161_2199^8)
//│ t: 'b -> (forall 'b, 'c, 'd, 'e, 'f, 'g, 'h. ('c & 'd) -> (forall 'b, 'c, 'i, 'j, 'e, 'f, 'g. (('i & 'a & 'k & 'l) -> ('k | 'j)
//│   where
//│     'c <: 'i -> 'j
//│     ChurchInt -> (forall 'b, 'c, 'i, 'j, 'm, 'e, 'f. ('c & 'm) -> (forall 'b, 'i, 'j, 'e, 'f. (('i & 'a0 & 'n & 'o) -> ('n | 'j)
//│   where
//│     'c <: 'i -> 'j
//│     ChurchInt -> (forall 'b, 'c, 'i, 'j, 'p, 'e. ('c & 'p) -> (forall 'b, 'c, 'i, 'j, 'e. (('i & 'a1 & 'q & 'r) -> ('q | 'j)
//│   where
//│     'c <: 'i -> 'j
//│     forall 's. 's -> 'b | 'e <: (error | 't | 'u) -> ('p -> ('a1 -> ('a1 & 'q) & 'v) & 'w))) | 'x) | 'f <: (error | 'u | 'y) -> ('m -> ('a0 -> ('a0 & 'n) & 'z) & 'a1))) | 'b1) | 'g <: (error | 'u) -> ('d -> ('a -> ('a & 'k) & 'c1) & 'd1))) | 'h)
//│  = [Function: t4]
//│ t2: 'a -> (forall 'b. 'b -> (forall 'a, 'c, 'd, 'e. ('f -> 'g
//│   where
//│     forall 'h. 'h -> (forall 'h, 'i, 'j, 'k, 'l. ('i -> 'l
//│   where
//│     'h <: 'i -> 'j & 'j -> 'k & 'k -> 'l)) | 'm <: (forall 'n. 'n -> (forall 'n. (('o -> ((forall 'p. 'p -> (forall 'n. ('q -> 'r
//│   where
//│     'p <: 's -> 'r
//│     'n <: (forall 't. 't -> (forall 'u. 'u -> 'u)) -> ('p -> ('q -> 's & 'v) & 'w)))) -> 'x & 'y) & 'z) -> 'x
//│   where
//│     'n <: (forall 't. 't -> (forall 'u. 'u -> 'u)) -> 'o))) -> ((((forall 't. 't -> (forall 'u. 'u -> 'u)) -> ((forall 't. 't -> (forall 'u. 'u -> 'u)) -> 'a1 & 'b1) & 'c1) -> 'a1) -> ((forall 'd1. 'd1 -> (forall 'e1. 'e1 -> 'd1)) -> 'f1 & 'g1) & 'h1) & 'i1 -> ('f -> 'g & 'j1)
//│     ((forall 'k1. 'k1 -> (forall 't. 't -> (forall 'u. 'u -> 'u))) -> ((forall 'd1. 'd1 -> (forall 'e1. 'e1 -> 'd1)) -> ((forall 'l1. 'l1 -> (forall 'l1, 'm1, 'n1. ('m1 -> 'n1
//│   where
//│     'l1 <: 'm1 -> 'n1))) -> ((forall 'o1. 'o1 -> (forall 'a, 'c, 'd. ('p1 -> 'q1
//│   where
//│     'r1 <: (forall 'n. 'n -> (forall 'n. (('o -> ((forall 'p. 'p -> (forall 'n. ('q -> 'r
//│   where
//│     'p <: 's -> 'r
//│     'n <: (forall 't. 't -> (forall 'u. 'u -> 'u)) -> ('p -> ('q -> 's & 'v) & 'w)))) -> 'x & 'y) & 'z) -> 'x
//│   where
//│     'n <: (forall 't. 't -> (forall 'u. 'u -> 'u)) -> 'o))) -> ((((forall 't. 't -> (forall 'u. 'u -> 'u)) -> ((forall 't. 't -> (forall 'u. 'u -> 'u)) -> 'a1 & 'b1) & 'c1) -> 'a1) -> ((forall 'd1. 'd1 -> (forall 'e1. 'e1 -> 'd1)) -> 's1 & 't1) & 'u1) & 'v1 -> ('p1 -> 'q1 & 'w1)
//│     ((forall 'k1. 'k1 -> (forall 't. 't -> (forall 'u. 'u -> 'u))) -> ((forall 'd1. 'd1 -> (forall 'e1. 'e1 -> 'd1)) -> ((forall 'l1. 'l1 -> (forall 'l1, 'm1, 'n1. ('m1 -> 'n1
//│   where
//│     'l1 <: 'm1 -> 'n1))) -> ((forall 'x1. 'x1 -> (forall 'a, 'c. ('y1 -> 'z1
//│   where
//│     'a2 <: (forall 'n. 'n -> (forall 'n. (('o -> ((forall 'p. 'p -> (forall 'n. ('q -> 'r
//│   where
//│     'p <: 's -> 'r
//│     'n <: (forall 't. 't -> (forall 'u. 'u -> 'u)) -> ('p -> ('q -> 's & 'v) & 'w)))) -> 'x & 'y) & 'z) -> 'x
//│   where
//│     'n <: (forall 't. 't -> (forall 'u. 'u -> 'u)) -> 'o))) -> ((((forall 't. 't -> (forall 'u. 'u -> 'u)) -> ((forall 't. 't -> (forall 'u. 'u -> 'u)) -> 'a1 & 'b1) & 'c1) -> 'a1) -> ((forall 'd1. 'd1 -> (forall 'e1. 'e1 -> 'd1)) -> 'b2 & 'c2) & 'd2) & 'e2 -> ('y1 -> 'z1 & 'f2)
//│     forall 'g2. 'g2 -> 'a | 'c <: 'b2 -> ('x1 -> 'e2 & 'h2)))) -> 'i2 & 'j2) & 'k2) & 'l2) & 'a2) -> 'i2 | 'd <: 's1 -> ('o1 -> 'v1 & 'm2)))) -> 'n2 & 'o2) & 'p2) & 'q2) & 'r1) -> 'n2 | 'e <: 'f1 -> ('b -> 'i1 & 'r2))) | 's2)
//│   = [Function: t22]

// (* This comment is from the ORIGINAL PAGE: *)
// (* Factorial of three. Exposed bugs in old implementation. This one works correctly, but the generated files take up to 3.8GB, and it takes about 1 hour on a 2GHz PIII box to get the result. You can see the final judgement here. Yes, the result is the Church numeral for 6. *)

// (* We test that the result is 6: *)
// let succ n = n + 1 ;;
// t id succ 0 ;;

// :e // fails since the fix to spurious-TV-cycles // succeeds since the fix to the fix to spurious-TV-cycles...
t id succ 0
//│ res: int
//│    = 6

// :e // TODO try without cycle check // works with quantif extrus
// :e // FIXME? refreshing-extr
:e // Fails since inconsistent constrained types
t2 id succ 0
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.325: 	t2 id succ 0
//│ ║         	^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  int<number>  <:  α824_3766    ClassTag  TypeVariable
//│ ╙──  ... looks like:  int<number>  <:  α824_825'''
//│ res: error
//│    = 6

// let t (z : 0) = let x = (fun (y: ['t > 0] 'a -> 't) -> y z y) in x x;;
def t (z: nothing) = let x = fun (y: forall 't. 'a -> 't) -> y z y in x x
//│ t: nothing -> 'a
//│  = [Function: t5]

// (* Plus petit. *)
// type tt = ['b = 0] ['c > ['a] ['d = ['t] 'a -> 't] ['e] 'd -> 'e] 'b -> 'c ;;
// let t (z : 0) = let x = (fun (y: ['t > 0] 'a -> 't) -> y z) in x x;;
type Tt = forall 'b 'c. ('b & nothing) -> ('c | (forall 'a 'd 'e. ('d & (forall 't. 'a -> 't))) -> 'e)
def t (z: nothing) = let x = fun (y: forall 't. 'a -> 't) -> y z in x x
//│ Defined type alias Tt
//│ t: nothing -> 'a
//│  = [Function: t6]

// (*
//     * Rank 3, untypable in System F?
//       (fun x -> z (x (fun f -> fun u -> f u)) (x (fun v -> fun g -> g v))) (fun y -> y y y)
// FIXME: z is free???

//     * Untypable at any rank
//       (fun x -> x x) (fun x -> x x)
// :e // TODO show failure without cycle check // works with quantif extrus
:re
:e // FIXME? refreshing-extr
(fun x -> x x) (fun x -> x x)
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.359: 	(fun x -> x x) (fun x -> x x)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. (α3901_3903' -> α3902_3904')›  <:  α3901_3910    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. (α3901_3903' -> α3902_3904')›  <:  α3901_3903'
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

//     * Rank 3, untypable in F2 but F3
//       (fun f x -> f (f x)) (fun f x -> f (f x)) (fun v w -> v)
(fun f -> fun x -> f (f x)) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ res: 'a -> 'b
//│   where
//│     'c -> 'd
//│   where
//│     forall 'e. 'e -> (forall 'f. 'f -> 'e) <: 'c -> 'g & 'g -> 'd <: 'a -> 'h & 'h -> 'b
//│    = [Function (anonymous)]

//     * Rank 4, alternate formulation, untypeable in F2, but F3
//       (fun two k -> two two k)(fun f x -> f (f x)) (fun v w -> v)
// :e // fails after new-refreshing-extrusion // Works since inconsistent constrained types...
(fun two -> fun k -> two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ res: 'a -> 'b
//│   where
//│     'c -> 'd
//│   where
//│     forall 'e. 'e -> (forall 'f. 'f -> 'e) <: 'c -> 'g & 'g -> 'd <: 'a -> 'h & 'h -> 'b
//│    = [Function (anonymous)]

//     * Rank 5, causes huge blowup. Do not attempt to output skeletons !
//       (fun two k -> two two two k)(fun f -x -> f (f x)) (fun v w -> v)
// * Note: the only example in this file that requires `:GeneralizeCurriedFunctions`
// :e // due to not stashing...?
// :e // FIXedME? refreshing-extr // Works since inconsistent constrained types...
(fun two -> fun k -> two two two k) (fun f -> fun x -> f (f x)) (fun v -> fun w -> v)
//│ res: 'a -> 'b
//│   where
//│     'c -> 'd
//│   where
//│     'e -> 'f
//│   where
//│     'g -> 'h
//│   where
//│     forall 'i. 'i -> (forall 'j. 'j -> 'i) <: 'g -> 'k & 'k -> 'h <: 'e -> 'l & 'l -> 'f <: 'c -> 'm & 'm -> 'd <: 'a -> 'n & 'n -> 'b
//│    = [Function (anonymous)]



//  ?????
//     * Factorial of two, using the Y combinator
//       (fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))

// *)
// :e // works with quantif extrus
:e // FIXME? refreshing-extr
:re
(fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.418: 	(fun h -> (fun x -> h (x x)) (fun x -> h (x x))) (fun f -> fun n -> n (fun v -> fun x -> fun y -> y) k (fun f -> fun x -> f x)(fun g -> fun x -> n (f (n (fun p -> fun s -> s (p (fun x -> fun y -> y)) (fun f -> fun x -> f (p (fun x -> fun y -> y) f x))) (fun s -> s (fun f -> fun x -> x) (fun f -> fun x -> x)) k) g) x)) (fun f -> fun x -> f (f x))
//│ ║         	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 1. {(α4197_4202'' -> α4199_4201'') where: α4190' :> ((α4198_4200'',) -> α4199_4201'')}›  <:  α4197_4212'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 1. {(α4197_4202'' -> α4199_4201'') where: α4190' :> ((α4198_4200'',) -> α4199_4201'')}›  <:  α4197_4202''
//│ res: error
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded


