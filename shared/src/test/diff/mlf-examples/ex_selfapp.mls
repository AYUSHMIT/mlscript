:NoRecursiveTypes
:GeneralizeCurriedFunctions
// :DistributeForalls

// (*
//  * This example was written by Susumu NISHIMURA 
//  * According to him, it requires impredicative polymorphism.
//  *)

// (* my list definition *)

// type mylist ('b) = Nil | Cons of ('b * mylist ('b));;
class Nil
class Cons[a]: { head: a; tail: List[a] }
type List[a] = Nil | Cons[a]
def Nil = Nil {}
def Cons (head, tail) = Cons { head; tail }
//│ Defined class Nil
//│ Defined class Cons[+a]
//│ Defined type alias List[+a]
//│ Nil: Nil
//│    = Nil {}
//│ Cons: ('b, List['c] & 'c,) -> (forall 'b, 'c, 'head, 'a, 'tail. (Cons['a] with {head: 'head, tail: 'tail}
//│   where
//│     'b <: 'head & 'a
//│     'c <: List['a] & 'tail
//│     'b <: 'head & 'a
//│     'c <: List['a] & 'tail))
//│     = [Function: Cons1]

// let rec foo =
//   fun xs ->
//     begin match xs with
//       Nil -> Nil
//     | Cons (x,xs) -> Cons (x+1, foo (foo xs))
//     end
:RecursiveTypes // needed for this recursive def
rec def foo = fun xs -> case xs of
  { Nil -> Nil
  | Cons -> Cons (xs.head + 1, foo (foo xs.tail))
  }
//│ foo: 'a -> (Cons[nothing] & {tail: nothing} | Nil)
//│   where
//│     'a <: (Cons[?] with {head: int, tail: 'a}) | Nil
//│    = [Function: foo]
:NoRecursiveTypes



// (* Type def: ba = forall b.(int->b->b)->b->b *)
// type ba = ['b] (int -> 'b -> 'b) -> 'b -> 'b
// (* z can be typed more polymorphic. *)
// type baa = ['a, 'b] ('a  -> 'b -> 'b)-> 'b -> 'b 
type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ Defined type alias Ba
//│ Defined type alias Baa


// LP: this Baa type is a bit weird. It's equivalent to:
def b: (nothing -> 'b -> 'b) -> 'b -> 'b
//│ b: (nothing -> 'b -> 'b) -> 'b -> 'b
//│  = <missing implementation>

// LP: indeed:
b: Baa
//│ res: Baa
//│    = <no result>
//│      b is not implemented
:ng
b = error: Baa
//│ Baa
//│   <:  b:
//│ (nothing -> 'b -> 'b) -> 'b -> 'b



// (* build and foldr *)
// let build = 
//   fun (g : ['b] (('a -> 'b -> 'b) -> 'b -> 'b)) -> 
//     g (fun x xs -> Cons (x,xs)) Nil

// :e // due to tapping
// :e // works with quantif extrus
def build = fun (g: forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> g (fun x -> fun xs -> Cons (x, xs)) Nil
//│ /!!!\ Uncaught error: java.lang.StackOverflowError

// * ^ Not sure why this one only works with recursive types:
:RecursiveTypes
def build = fun (g: forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> g (fun x -> fun xs -> Cons (x, xs)) Nil
//│ /!!!\ Uncaught error: java.lang.StackOverflowError
:NoRecursiveTypes


def build_ = fun g -> g (fun x -> fun xs -> Cons (x, xs)) Nil
//│ build_: ((forall 'b. 'b -> (forall 'b, 'c, 'd. ((List['c] & 'd) -> (forall 'b, 'c, 'd, 'e, 'head, 'a, 'f, 'tail. (Cons['a] with {head: 'head, tail: 'tail}
//│   where
//│     'e <: 'head & 'a
//│     'f <: List['a] & 'tail
//│     'b <: 'c
//│     'd <: List['c]
//│     'e <: 'head & 'a
//│     'f <: List['a] & 'tail
//│     'b <: 'c
//│     'd <: List['c]))
//│   where
//│     'b <: 'c
//│     'b <: 'c))) -> Nil -> 'c & 'g) -> (forall 'head, 'a, 'g. ('h
//│   where
//│     'g <: (forall 'i. ('head & 'a & 'i) -> (forall 'c, 'head, 'a, 'tail, 'i. ((List['c] & 'tail & 'c) -> (forall 'c, 'e, 'head, 'a, 'f, 'tail, 'i. (Cons['a] with {head: 'head, tail: 'tail}
//│   where
//│     'e <: 'head & 'a
//│     'f <: List['a] & 'tail
//│     'i <: 'e
//│     'c <: 'f
//│     'e <: 'head & 'a
//│     'f <: List['a] & 'tail
//│     'i <: 'e
//│     'c <: 'f))
//│   where
//│     'i <: 'head & 'a
//│     'i <: 'head & 'a))) -> Nil -> 'h))
//│       = [Function: build_]

:e
build_ : forall 'a. (forall 'b. (('a -> 'b -> 'b) -> 'b -> 'b)) -> List['a]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.126: 	build_ : forall 'a. (forall 'b. (('a -> 'b -> 'b) -> 'b -> 'b)) -> List['a]
//│ ║         	^^^^^^
//│ ╟── type `‘b` does not match type `Cons[?a] | Nil`
//│ ║  l.126: 	build_ : forall 'a. (forall 'b. (('a -> 'b -> 'b) -> 'b -> 'b)) -> List['a]
//│ ║         	                            ^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.15: 	type List[a] = Nil | Cons[a]
//│ ║        	               ^^^^^^^^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.14: 	class Cons[a]: { head: a; tail: List[a] }
//│ ╙──      	                                ^^^^^^^
//│ res: (forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> List['a]
//│    = [Function: build_]


class Ls[A] method Head: A
def cons: ('a, Ls['a]) -> Ls['a]
def nil: Ls['a]
//│ Defined class Ls[+A]
//│ Declared Ls.Head: Ls['A] -> 'A
//│ cons: ('a, Ls['a],) -> Ls['a]
//│     = <missing implementation>
//│ nil: Ls[nothing]
//│    = <missing implementation>

def build2 = fun (g: forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> g (fun x -> fun xs -> cons (x, xs)) nil
//│ /!!!\ Uncaught error: java.lang.StackOverflowError

def build2_ = fun g -> g (fun x -> fun xs -> cons (x, xs)) nil
//│ build2_: ((forall 'b. 'b -> (forall 'b, 'c. ((Ls['c] & 'c) -> (forall 'b, 'c, 'a. (Ls['a]
//│   where
//│     'b <: 'a
//│     'c <: Ls['a]))
//│   where
//│     'b <: 'c
//│     'b <: 'c))) -> Ls[nothing] -> 'c & 'd) -> (forall 'd. ('e
//│   where
//│     'd <: (forall 'b. 'b -> (forall 'b, 'c. ((Ls['c] & 'c) -> (forall 'b, 'c, 'a. (Ls['a]
//│   where
//│     'b <: 'a
//│     'c <: Ls['a]))
//│   where
//│     'b <: 'c
//│     'b <: 'c))) -> Ls[nothing] -> 'e))
//│        = <no result>
//│          cons is not implemented

:e
build2_ : forall 'a. (forall 'b. (('a -> 'b -> 'b) -> 'b -> 'b)) -> Ls['a]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.176: 	build2_ : forall 'a. (forall 'b. (('a -> 'b -> 'b) -> 'b -> 'b)) -> Ls['a]
//│ ║         	^^^^^^^
//│ ╟── type `‘b` is not an instance of type `Ls`
//│ ║  l.176: 	build2_ : forall 'a. (forall 'b. (('a -> 'b -> 'b) -> 'b -> 'b)) -> Ls['a]
//│ ║         	                             ^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.144: 	def cons: ('a, Ls['a]) -> Ls['a]
//│ ╙──       	               ^^^^^^
//│ res: (forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> Ls['a]
//│    = <no result>
//│      build2_ and cons are not implemented


// let rec foldr =
//   fun k z xs -> 
//     begin match xs with
//       Nil -> z
//     | Cons (x, xs) -> k x (foldr k z xs)
//     end
rec def foldr = fun k -> fun z -> fun xs ->
  case xs of
    { Nil -> z
    | Cons -> k xs.head (foldr k z xs.tail)
    }
//│ foldr: ('head -> 'a -> 'a) -> 'a -> 'b -> 'a
//│   where
//│     'b <: (Cons[?] with {head: 'head, tail: 'b}) | Nil
//│      = [Function: foldr]


// (* encoding `foo' with foldr *)

// let (z : baa) = fun c n -> n
def z = (fun c -> fun n -> n) : Baa
def z_ = fun c -> fun n -> n
//│ z: Baa
//│  = [Function: z]
//│ z_: anything -> (forall 'a. 'a -> 'a)
//│   = [Function: z_]


// let rec (k : int -> ba -> ba) = fun x (xs : ba) c n -> c (x+1) (xs k z c n)

def k: int -> Ba -> Ba
//│ k: int -> Ba -> Ba
//│  = <missing implementation>

// * The following tests don't benefit from `:RecursiveTypes`,
// *  but they produce LOTS of spammy error messages unless we enable it:
:RecursiveTypes

// FIXME
rec def k = fun x -> fun (xs: Ba) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.230: 	rec def k = fun x -> fun (xs: Ba) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘b1849` is not an instance of type `'b`
//│ ║  l.54: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                 ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.54: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                 ^^
//│ ╟── from application:
//│ ║  l.230: 	rec def k = fun x -> fun (xs: Ba) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ╙──       	                                                       ^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.230: 	rec def k = fun x -> fun (xs: Ba) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘b1850` is not an instance of type `'b1849`
//│ ║  l.54: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                 ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.54: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                 ^^
//│ ╟── from reference:
//│ ║  l.230: 	rec def k = fun x -> fun (xs: Ba) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ╙──       	                                                                           ^
//│ int -> Ba -> (nothing -> ('b | ‘b1849 | ‘b1850) -> (‘b1849 & 'b & 'a) & int -> (‘b1849 | ‘b1850 | 'a) -> (‘b & ‘b1849 & 'a & 'c)) -> (‘b1849 & 'b & 'a) -> (‘b1849 | 'c)
//│   <:  k:
//│ int -> Ba -> Ba
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.230: 	rec def k = fun x -> fun (xs: Ba) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘b1849` is not an instance of type `'b`
//│ ║  l.54: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                 ^^
//│ ╟── but it flows into application with expected type `‘b`
//│ ║  l.230: 	rec def k = fun x -> fun (xs: Ba) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	                                                       ^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.54: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ╙──      	                 ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.230: 	rec def k = fun x -> fun (xs: Ba) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘b1880` is not an instance of type `'b1849`
//│ ║  l.54: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                 ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.54: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                 ^^
//│ ╟── from reference:
//│ ║  l.230: 	rec def k = fun x -> fun (xs: Ba) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ╙──       	                                                                           ^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.230: 	rec def k = fun x -> fun (xs: Ba) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘b1880` is not an instance of type `'b1881`
//│ ║  l.54: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                 ^^
//│ ╟── but it flows into reference with expected type `‘b1881`
//│ ║  l.230: 	rec def k = fun x -> fun (xs: Ba) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	                                                                           ^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.54: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ╙──      	                 ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.230: 	rec def k = fun x -> fun (xs: Ba) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘b1850` is not an instance of type `'b1881`
//│ ║  l.54: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                 ^^
//│ ╟── but it flows into reference with expected type `‘b1881`
//│ ║  l.230: 	rec def k = fun x -> fun (xs: Ba) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	                                                                           ^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.54: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ╙──      	                 ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.230: 	rec def k = fun x -> fun (xs: Ba) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘b1849` is not an instance of type `'b1881`
//│ ║  l.54: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                 ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.54: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ╙──      	                 ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.230: 	rec def k = fun x -> fun (xs: Ba) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘b1881` is not an instance of type `'b1849`
//│ ║  l.54: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                 ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.54: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                 ^^
//│ ╟── from quantified type variable:
//│ ║  l.55: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ╙──      	                     ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.230: 	rec def k = fun x -> fun (xs: Ba) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘b1881` is not an instance of type `'b`
//│ ║  l.54: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                 ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.54: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                 ^^
//│ ╟── from application:
//│ ║  l.230: 	rec def k = fun x -> fun (xs: Ba) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ╙──       	                                                       ^^^^^^^^^^^^^^^^^^^^^^
//│  = [Function: k]

:e
rec def k = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k z_ c n)
//│ 'k
//│   where
//│     'k :> int -> ('k -> (anything -> (forall 'a. 'a -> 'a)) -> 'b -> 'c -> 'd) -> (int -> 'd -> 'e & 'b) -> 'c -> 'e
//│   <:  k:
//│ int -> Ba -> Ba
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.342: 	rec def k = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k z_ c n)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (forall ?b. ?b -> ?b)` is not an instance of type `'b1938`
//│ ║  l.212: 	def z_ = fun c -> fun n -> n
//│ ║         	         ^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `‘b1938`
//│ ║  l.342: 	rec def k = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k z_ c n)
//│ ║         	                                                                 ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.54: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ╙──      	                 ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.342: 	rec def k = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k z_ c n)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> ?b -> ?c` is not an instance of type `'b1938`
//│ ║  l.342: 	rec def k = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k z_ c n)
//│ ║         	                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into application with expected type `‘b1938`
//│ ║  l.342: 	rec def k = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k z_ c n)
//│ ║         	                                                 ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.54: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ╙──      	                 ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.342: 	rec def k = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k z_ c n)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘b1938` is not a function
//│ ║  l.54: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                 ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.342: 	rec def k = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k z_ c n)
//│ ║         	                                                            ^^^^
//│ ╟── from application:
//│ ║  l.342: 	rec def k = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k z_ c n)
//│ ╙──       	                                                 ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.342: 	rec def k = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k z_ c n)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘b1938` is not a function
//│ ║  l.54: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                 ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.342: 	rec def k = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k z_ c n)
//│ ║         	                                                            ^^^^^^^^^
//│ ╟── from application:
//│ ║  l.342: 	rec def k = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k z_ c n)
//│ ╙──       	                                                 ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.342: 	rec def k = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k z_ c n)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘b1938` is not an instance of type `'b`
//│ ║  l.54: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                 ^^
//│ ╟── but it flows into application with expected type `‘b`
//│ ║  l.342: 	rec def k = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k z_ c n)
//│ ║         	                                                 ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.54: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ╙──      	                 ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.342: 	rec def k = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k z_ c n)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> ?b -> ?c` is not an instance of type `'b`
//│ ║  l.342: 	rec def k = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k z_ c n)
//│ ║         	                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into application with expected type `‘b`
//│ ║  l.342: 	rec def k = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k z_ c n)
//│ ║         	                                                 ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.54: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ╙──      	                 ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.342: 	rec def k = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k z_ c n)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘b1972` is not an instance of type `'b1938`
//│ ║  l.54: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                 ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.54: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                 ^^
//│ ╟── from reference:
//│ ║  l.342: 	rec def k = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k z_ c n)
//│ ╙──       	                                                                      ^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.342: 	rec def k = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k z_ c n)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘b1972` is not a function
//│ ║  l.54: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                 ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.342: 	rec def k = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k z_ c n)
//│ ║         	                                                            ^^^^
//│ ╟── from reference:
//│ ║  l.342: 	rec def k = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k z_ c n)
//│ ╙──       	                                                                      ^
//│  = [Function: k1]

rec def k_ = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k_ z_ c n)
//│ k_: 'k_
//│   where
//│     'k_ :> int -> ('k_ -> (anything -> (forall 'a. 'a -> 'a)) -> 'b -> 'c -> 'd) -> (int -> 'd -> 'e & 'b) -> 'c -> 'e
//│   = [Function: k_]


// (* untyped terms *)
// (* let z = fun c -> fun n -> n *)
// (* let rec k = fun x xs c cn -> c (x+1) (xs k z c n) *)

// (* System F terms *)
// (* let z = /\b -> fun (c : int -> b -> b) -> fun (n : b) -> n *)
// (* let rec (k : int -> (forall b.(int->b->b)->b->b)			*)
// (*	            -> (forall b.(int->b->b)->b->b)) =			*)
// (*     \(a : int) -> \(as : forall b.(int->b->b)->b->b) ->		*)
// (*         /\b -> \(c : int->b->b) -> \(n : b) ->			*)
// (*             ((as[forall b.(int->b->b)->b->b] k z)[b] c z)		*)


// (* definition with build and foldr *)
// let bfoo xs = build (foldr k z xs)

:e // FIXME? fails with genLamBodies
def bfoo xs = build (foldr k z xs)
//│ ╔══[ERROR] identifier not found: build
//│ ║  l.470: 	def bfoo xs = build (foldr k z xs)
//│ ╙──       	              ^^^^^
//│ bfoo: ('a & 'b) -> (forall 'a, 'b. (error
//│   where
//│     'a <: 'b))
//│   where
//│     'b <: (Cons['a] with {head: int, tail: 'b}) | Nil
//│     = [Function: bfoo]

// FIXedME // works with quantif extrus
:e // due to tapping
def bfoo_ xs = build_ (foldr k_ z_ xs)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.483: 	def bfoo_ xs = build_ (foldr k_ z_ xs)
//│ ║         	               ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?b -> (forall ?c. ?c -> ?c)` does not match type `Cons[?a] | Nil`
//│ ║  l.212: 	def z_ = fun c -> fun n -> n
//│ ║         	         ^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.15: 	type List[a] = Nil | Cons[a]
//│ ║        	               ^^^^^^^^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.14: 	class Cons[a]: { head: a; tail: List[a] }
//│ ╙──      	                                ^^^^^^^
//│ bfoo_: ('a & 'b) -> (forall 'a, 'b. (error
//│   where
//│     'a <: 'b))
//│   where
//│     'b <: (Cons['a] with {head: int, tail: 'b}) | Nil
//│      = [Function: bfoo_]


def lst = Cons (0, Cons (0, Cons (0, Nil)))
//│ lst: Cons['a] with {head: 'head, tail: 'tail}
//│   where
//│     'b <: 'head & 'a
//│     'c <: List['a] & 'tail
//│     'b <: 'head & 'a
//│     'c <: List['a] & 'tail
//│    = Cons {
//│        head: 0,
//│        tail: Cons { head: 0, tail: Cons { head: 0, tail: Nil {} } }
//│      }

// (* test run *)
// let lst0 = Cons (0, Cons (0, Cons (0, Cons (0, Nil))));;
def lst0 = Cons (0, Cons (0, Cons (0, Cons (0, Nil))))
//│ lst0: Cons['a] with {head: 'head, tail: 'tail}
//│   where
//│     'b <: 'head & 'a
//│     'c <: List['a] & 'tail
//│     'b <: 'head & 'a
//│     'c <: List['a] & 'tail
//│     = Cons {
//│         head: 0,
//│         tail: Cons { head: 0, tail: Cons { head: 0, tail: [Cons] } }
//│       }

// foo lst0;;
foo lst0
//│ res: Cons[nothing] & {tail: nothing} | Nil
//│    = Cons {
//│        head: 1,
//│        tail: Cons { head: 2, tail: Cons { head: 4, tail: [Cons] } }
//│      }

// bfoo lst0;;
bfoo lst0
//│ res: error
//│   where
//│     'a <: 'b
//│   where
//│     'b <: (Cons[?] with {head: int, tail: 'b}) | Nil
//│    = Cons {
//│        head: 1,
//│        tail: Cons { head: 2, tail: Cons { head: 4, tail: [Cons] } }
//│      }

// :e // FIXME?
bfoo_ lst0
//│ res: error
//│   where
//│     'a <: 'b
//│   where
//│     'b <: (Cons[?] with {head: int, tail: 'b}) | Nil
//│    = Cons {
//│        head: 1,
//│        tail: Cons { head: 2, tail: Cons { head: 4, tail: [Cons] } }
//│      }


// (* This does not type :
// type baa = ['a, 'b] ('a  -> 'b -> 'b)-> 'b -> 'b
//   let rec (k : int -> baa -> baa) = fun x (xs : baa) c n -> c (x+1) (xs k z c n)
// *)
def k: int -> Baa -> Baa
//│ k: int -> Baa -> Baa
//│  = <missing implementation>

:e
rec def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.572: 	rec def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` is not an instance of type `'a6548`
//│ ║  l.572: 	rec def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	                                                           ^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.55: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ╙──      	                  ^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.572: 	rec def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘b6549` is not an instance of type `'b`
//│ ║  l.55: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                     ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.55: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                     ^^
//│ ╟── from application:
//│ ║  l.572: 	rec def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ╙──       	                                                        ^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.572: 	rec def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘b6550` is not an instance of type `'b6549`
//│ ║  l.55: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                     ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.55: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                     ^^
//│ ╟── from reference:
//│ ║  l.572: 	rec def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ╙──       	                                                                            ^
//│ int -> Baa -> (nothing -> ('b | ‘b6549 | ‘b6550) -> (‘b6549 & 'b & 'a) & int -> (‘b6549 | ‘b6550 | 'a) -> (‘b & ‘b6549 & 'a & 'c)) -> (‘b6549 & 'b & 'a) -> (‘b6549 | 'c)
//│   <:  k:
//│ int -> Baa -> Baa
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.572: 	rec def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘b6581` is not an instance of type `'b6549`
//│ ║  l.55: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                     ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.55: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                     ^^
//│ ╟── from reference:
//│ ║  l.572: 	rec def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ╙──       	                                                                            ^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.572: 	rec def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘b6581` is not an instance of type `'b6583`
//│ ║  l.55: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                     ^^
//│ ╟── but it flows into reference with expected type `‘b6583`
//│ ║  l.572: 	rec def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	                                                                            ^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.55: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ╙──      	                     ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.572: 	rec def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘b6550` is not an instance of type `'b6583`
//│ ║  l.55: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                     ^^
//│ ╟── but it flows into reference with expected type `‘b6583`
//│ ║  l.572: 	rec def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	                                                                            ^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.55: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ╙──      	                     ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.572: 	rec def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘b6549` is not an instance of type `'b6583`
//│ ║  l.55: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                     ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.55: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ╙──      	                     ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.572: 	rec def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘b6583` is not an instance of type `'b6549`
//│ ║  l.55: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                     ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.55: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ╙──      	                     ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.572: 	rec def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` is not an instance of type `'a6582`
//│ ║  l.572: 	rec def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	                                                           ^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.55: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ╙──      	                  ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.572: 	rec def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘b6583` is not an instance of type `'b`
//│ ║  l.55: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                     ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.55: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                     ^^
//│ ╟── from application:
//│ ║  l.572: 	rec def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ╙──       	                                                        ^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.572: 	rec def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘b6549` is not an instance of type `'b`
//│ ║  l.55: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                     ^^
//│ ╟── but it flows into application with expected type `‘b`
//│ ║  l.572: 	rec def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	                                                        ^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.55: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ╙──      	                     ^^
//│  = [Function: k2]

:e // FIXME?
def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ int -> Baa -> (forall 'a, 'b. ((int -> nothing -> anything & 'b) -> (forall 'a, 'b, 'c. ('c -> (forall 'a, 'b, 'c, 'd, 'e. ('e
//│   where
//│     'a <: (int -> Baa -> Baa) -> Baa -> 'b -> 'c -> 'd
//│     'b <: int -> 'd -> 'e))
//│   where
//│     'a <: (int -> Baa -> Baa) -> Baa -> nothing -> nothing -> anything
//│     'b <: int -> nothing -> anything
//│     'a <: (int -> Baa -> Baa) -> Baa -> nothing -> nothing -> anything
//│     'b <: int -> nothing -> anything))
//│   where
//│     'a <: (int -> Baa -> Baa) -> Baa -> nothing -> nothing -> anything
//│     'a <: (int -> Baa -> Baa) -> Baa -> nothing -> nothing -> anything))
//│   <:  k:
//│ int -> Baa -> Baa
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.699: 	def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` is not an instance of type `'a`
//│ ║  l.699: 	def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	                                                       ^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.55: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ╙──      	                  ^^
//│ ╔══[ERROR] Type mismatch in expression:
//│ ╟── operator application of type `int` is not an instance of type `'a`
//│ ║  l.699: 	def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	                                                       ^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.55: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ╙──      	                  ^^
//│ ╔══[ERROR] Type mismatch in expression:
//│ ╟── operator application of type `int` is not an instance of type `'a`
//│ ║  l.699: 	def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	                                                       ^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.55: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ╙──      	                  ^^
//│ ╔══[ERROR] Type mismatch in expression:
//│ ╟── operator application of type `int` is not an instance of type `'a`
//│ ║  l.699: 	def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	                                                       ^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.55: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ╙──      	                  ^^
//│ ╔══[ERROR] Type mismatch in expression:
//│ ╟── operator application of type `int` is not an instance of type `'a`
//│ ║  l.699: 	def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	                                                       ^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.55: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ╙──      	                  ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.699: 	def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` is not an instance of type `'a`
//│ ║  l.699: 	def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	                                                       ^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.55: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ╙──      	                  ^^
//│  = [Function: k3]

// * Using `k` here on purpose to simulate an annotated rec def
def k_ = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ k_: int -> (forall 'a. ((int -> Baa -> Baa) -> Baa -> nothing -> nothing -> 'a & 'a) -> (forall 'a, 'b. ((int -> nothing -> 'a & 'b) -> (forall 'a, 'b, 'c. ('c -> (forall 'a, 'b, 'c, 'd, 'e. ('e
//│   where
//│     'a <: (int -> Baa -> Baa) -> Baa -> 'b -> 'c -> 'd
//│     'b <: int -> 'd -> 'e))
//│   where
//│     'a <: (int -> Baa -> Baa) -> Baa -> nothing -> nothing -> 'a
//│     'b <: int -> nothing -> 'a
//│     'a <: (int -> Baa -> Baa) -> Baa -> nothing -> nothing -> 'a
//│     'b <: int -> nothing -> 'a))
//│   where
//│     'a <: (int -> Baa -> Baa) -> Baa -> nothing -> nothing -> 'a
//│     'a <: (int -> Baa -> Baa) -> Baa -> nothing -> nothing -> 'a)))
//│   = [Function: k_1]

rec def k_ = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k_ z c n)
//│ k_: 'k_
//│   where
//│     'k_ :> int -> ('k_ -> Baa -> 'a -> 'b -> 'c) -> (int -> 'c -> 'd & 'a) -> 'b -> 'd
//│   = [Function: k_2]

// k = k_ // nope

rec def k_ = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k_ z_ c n)
//│ k_: 'k_
//│   where
//│     'k_ :> int -> ('k_ -> (anything -> (forall 'a. 'a -> 'a)) -> 'b -> 'c -> 'd) -> (int -> 'd -> 'e & 'b) -> 'c -> 'e
//│   = [Function: k_3]

// k = k_ // nope


