:NoRecursiveTypes
:GeneralizeCurriedFunctions
// :DistributeForalls

// (*
//  * This example was written by Susumu NISHIMURA 
//  * According to him, it requires impredicative polymorphism.
//  *)

// (* my list definition *)

// type mylist ('b) = Nil | Cons of ('b * mylist ('b));;
class Nil
class Cons[a]: { head: a; tail: List[a] }
type List[a] = Nil | Cons[a]
Nil = Nil {}
Cons (head, tail) = Cons { head; tail }
//│ Defined class Nil
//│ Defined class Cons[+a]
//│ Defined type alias List[+a]
//│ Nil: Nil
//│    = Nil {}
//│ Cons: ('b & 'head & 'a, List['a] & 'c & 'tail,) -> ((Cons['a] with {head: 'head, tail: 'tail}) | 'd)
//│     = [Function: Cons1]

// let rec foo =
//   fun xs ->
//     begin match xs with
//       Nil -> Nil
//     | Cons (x,xs) -> Cons (x+1, foo (foo xs))
//     end
:RecursiveTypes // needed for this recursive def
rec def foo = fun xs -> case xs of
  { Nil -> Nil
  | Cons -> Cons (xs.head + 1, foo (foo xs.tail))
  }
//│ foo: 'a -> 'tail
//│   where
//│     'tail :> (Cons[int] with {tail: 'tail}) | Nil
//│     'a <: (Cons[?] with {head: int, tail: 'a}) | Nil
//│    = [Function: foo]
:NoRecursiveTypes



// (* Type def: ba = forall b.(int->b->b)->b->b *)
// type ba = ['b] (int -> 'b -> 'b) -> 'b -> 'b
// (* z can be typed more polymorphic. *)
// type baa = ['a, 'b] ('a  -> 'b -> 'b)-> 'b -> 'b 
type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ Defined type alias Ba
//│ Defined type alias Baa


// LP: this Baa type is a bit weird. It's equivalent to:
def b: (nothing -> 'b -> 'b) -> 'b -> 'b
//│ b: (nothing -> 'b -> 'b) -> 'b -> 'b
//│  = <missing implementation>

// LP: indeed:
b: Baa
//│ res: Baa
//│    = <no result>
//│      b is not implemented
:ng
b = error: Baa
//│ Baa
//│   <:  b:
//│ (nothing -> 'b -> 'b) -> 'b -> 'b



// (* build and foldr *)
// let build = 
//   fun (g : ['b] (('a -> 'b -> 'b) -> 'b -> 'b)) -> 
//     g (fun x xs -> Cons (x,xs)) Nil

:e // works with :RecursiveTypes
def build = fun (g: forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> g (fun x -> fun xs -> Cons (x, xs)) Nil
//│ ╔══[ERROR] Cyclic-looking constraint while typing application; a type annotation may be required
//│ ║  l.80: 	def build = fun (g: forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> g (fun x -> fun xs -> Cons (x, xs)) Nil
//│ ║        	                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  (cons<> & {head: head26_159'', tail: tail27_156'', Cons#a: mut a22_157''..a22_157''})  <:  List[a22_157'']    ComposedType  TypeRef
//│ ╙──  ... looks like:  (cons<> & {head: head26_153'''', tail: tail27_150'''', Cons#a: mut a22_151''''..a22_151''''})  <:  List[a22_151'''']
//│ build: (forall 'b. (('a & 'c & 'a0) -> 'b -> 'b) -> 'b -> 'b) -> (error | 'd)
//│      = [Function: build]

// * ^ Not sure why this one only works with recursive types:
:RecursiveTypes
// :e // FIXME? refreshing-extr
def build = fun (g: forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> g (fun x -> fun xs -> Cons (x, xs)) Nil
//│ build: (forall 'b. (('a & 'c & 'a0) -> 'b -> 'b) -> 'b -> 'b) -> ('tail | 'd)
//│   where
//│     'tail :> (Cons['a0 | 'c] with {head: 'head | 'c, tail: 'tail}) | Nil
//│      = [Function: build1]
:NoRecursiveTypes


def build_ = fun g -> g (fun x -> fun xs -> Cons (x, xs)) Nil
//│ build_: ((forall 'b. 'b -> (forall 'c, 'a, 'd, 'head, 'e, 'tail. (List['a] & 'd & 'e & 'tail) -> ((Cons['a | 'b] with {head: 'head | 'b, tail: 'tail}) | 'c))) -> (Nil -> 'f & 'g) & 'h) -> 'f
//│       = [Function: build_]

:e
build_ : forall 'a. (forall 'b. (('a -> 'b -> 'b) -> 'b -> 'b)) -> List['a]
//│ ╔══[ERROR] Cyclic-looking constraint while typing type ascription; a type annotation may be required
//│ ║  l.106: 	build_ : forall 'a. (forall 'b. (('a -> 'b -> 'b) -> 'b -> 'b)) -> List['a]
//│ ║         	^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  (cons<> & {head: head26_334', tail: tail27_331', Cons#a: mut a22_332'..a22_332'})  <:  List[‘a_316']    ComposedType  TypeRef
//│ ╙──  ... looks like:  (cons<> & {head: head26_328'''', tail: tail27_325'''', Cons#a: mut a22_326''''..a22_326''''})  <:  List[‘a_316']
//│ res: (forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> List['a]
//│    = [Function: build_]


class Ls[A] method Head: A
def cons: ('a, Ls['a]) -> Ls['a]
def nil: Ls['a]
//│ Defined class Ls[+A]
//│ Declared Ls.Head: Ls['A] -> 'A
//│ cons: ('a, Ls['a],) -> Ls['a]
//│     = <missing implementation>
//│ nil: Ls[nothing]
//│    = <missing implementation>

// :e // FIXME? refreshing-extr
def build2 = fun (g: forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> g (fun x -> fun xs -> cons (x, xs)) nil
//│ build2: (forall 'b. (('a & 'c) -> 'b -> 'b) -> 'b -> 'b) -> (Ls['a0 | 'c] | 'd)
//│       = <no result>
//│         cons is not implemented

def build2_ = fun g -> g (fun x -> fun xs -> cons (x, xs)) nil
//│ build2_: ((forall 'b. 'b -> (forall 'a, 'c, 'd. (Ls['a] & 'c) -> (Ls['a | 'b] | 'd))) -> (Ls['d] -> 'e & 'f) & 'g) -> 'e
//│        = <no result>
//│          cons is not implemented

build2_ : forall 'a. (forall 'b. (('a -> 'b -> 'b) -> 'b -> 'b)) -> Ls['a]
//│ res: (forall 'b. ('a -> 'b -> 'b) -> 'b -> 'b) -> Ls['a]
//│    = <no result>
//│      build2_ and cons are not implemented


// let rec foldr =
//   fun k z xs -> 
//     begin match xs with
//       Nil -> z
//     | Cons (x, xs) -> k x (foldr k z xs)
//     end
rec def foldr = fun k -> fun z -> fun xs ->
  case xs of
    { Nil -> z
    | Cons -> k xs.head (foldr k z xs.tail)
    }
//│ foldr: ('head -> 'a -> 'a) -> 'a -> 'b -> 'a
//│   where
//│     'b <: (Cons[?] with {head: 'head, tail: 'b}) | Nil
//│      = [Function: foldr]


// (* encoding `foo' with foldr *)

// let (z : baa) = fun c n -> n
def z = (fun c -> fun n -> n) : Baa
def z_ = fun c -> fun n -> n
//│ z: Baa
//│  = [Function: z]
//│ z_: 'a -> (forall 'b. 'b -> 'b)
//│   = [Function: z_]


// let rec (k : int -> ba -> ba) = fun x (xs : ba) c n -> c (x+1) (xs k z c n)

def k: int -> Ba -> Ba
//│ k: int -> Ba -> Ba
//│  = <missing implementation>

// * The following tests don't benefit from `:RecursiveTypes`,
// *  but they produce LOTS of spammy error messages unless we enable it:
:RecursiveTypes

// FIXME
rec def k = fun x -> fun (xs: Ba) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.183: 	rec def k = fun x -> fun (xs: Ba) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘b_539_541` is not an instance of type `'b_539_540`
//│ ║  l.50: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                 ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.50: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                 ^^
//│ ╟── from application:
//│ ║  l.183: 	rec def k = fun x -> fun (xs: Ba) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ╙──       	                                                       ^^^^^^^^^^^^^^^^^^^^^^
//│ int -> Ba -> (nothing -> (‘b_539_541 | 'b) -> (‘b_539_541 & 'b) & int -> (‘b_539_541 | 'b) -> (‘b_539_540 & 'a)) -> (‘b_539_541 & 'b) -> (‘b_539_541 | 'a)
//│   <:  k:
//│ int -> Ba -> Ba
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.183: 	rec def k = fun x -> fun (xs: Ba) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘b_539_541` is not an instance of type `'b_566_567`
//│ ║  l.50: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                 ^^
//│ ╟── but it flows into application with expected type `‘b_566_567`
//│ ║  l.183: 	rec def k = fun x -> fun (xs: Ba) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	                                                       ^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.50: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ╙──      	                 ^^
//│  = [Function: k]

:e
rec def k = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k z_ c n)
//│ 'k
//│   where
//│     'k :> int -> ('k -> (forall 'a. 'a -> (forall 'b. 'b -> 'b)) -> 'c -> 'd -> 'e) -> (int -> 'e -> 'f & 'c) -> 'd -> 'f
//│   <:  k:
//│ int -> Ba -> Ba
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.214: 	rec def k = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k z_ c n)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (forall ?b. ?b -> ?b)` is not an instance of type `'b_626_627`
//│ ║  l.165: 	def z_ = fun c -> fun n -> n
//│ ║         	         ^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `‘b_626_627`
//│ ║  l.214: 	rec def k = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k z_ c n)
//│ ║         	                                                                 ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.50: 	type Ba = forall 'b. (int -> 'b -> 'b) -> 'b -> 'b
//│ ╙──      	                 ^^
//│  = [Function: k1]

rec def k_ = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k_ z_ c n)
//│ k_: 'k_
//│   where
//│     'k_ :> int -> ('k_ -> (forall 'a. 'a -> (forall 'b. 'b -> 'b)) -> 'c -> 'd -> 'e) -> (int -> 'e -> 'f & 'c) -> 'd -> 'f
//│   = [Function: k_]


// (* untyped terms *)
// (* let z = fun c -> fun n -> n *)
// (* let rec k = fun x xs c cn -> c (x+1) (xs k z c n) *)

// (* System F terms *)
// (* let z = /\b -> fun (c : int -> b -> b) -> fun (n : b) -> n *)
// (* let rec (k : int -> (forall b.(int->b->b)->b->b)			*)
// (*	            -> (forall b.(int->b->b)->b->b)) =			*)
// (*     \(a : int) -> \(as : forall b.(int->b->b)->b->b) ->		*)
// (*         /\b -> \(c : int->b->b) -> \(n : b) ->			*)
// (*             ((as[forall b.(int->b->b)->b->b] k z)[b] c z)		*)


// (* definition with build and foldr *)
// let bfoo xs = build (foldr k z xs)

// :e // FIXME? fails with genLamBodies
def bfoo xs = build (foldr k z xs)
//│ bfoo: ('b & 'c) -> ('tail | 'd)
//│   where
//│     'tail :> (Cons['a | 'head | int | 'e] with {head: 'head | int | 'e, tail: 'tail}) | Nil
//│     'c <: Cons['head0] & 'f | Nil & 'g
//│     'f <: {head: int & 'head0, tail: 'c}
//│     = [Function: bfoo]

// FIXedME // works with quantif extrus
:e // due to tapping
def bfoo_ xs = build_ (foldr k_ z_ xs)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.268: 	def bfoo_ xs = build_ (foldr k_ z_ xs)
//│ ║         	               ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?b -> (forall ?c. ?c -> ?c)` does not match type `Cons[?a] | Nil`
//│ ║  l.165: 	def z_ = fun c -> fun n -> n
//│ ║         	         ^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.15: 	type List[a] = Nil | Cons[a]
//│ ║        	               ^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.101: 	def build_ = fun g -> g (fun x -> fun xs -> Cons (x, xs)) Nil
//│ ╙──       	                                                     ^^
//│ bfoo_: ('a & 'b) -> (error | 'c)
//│   where
//│     'b <: Cons['d] & 'e | Nil & 'f
//│     'e <: {head: int & 'head & 'd, tail: 'b}
//│      = [Function: bfoo_]


lst = Cons (0, Cons (0, Cons (0, Nil)))
//│ lst: Cons[0] with {tail: Cons[0] with {tail: Cons[0] with {tail: Nil}}}
//│    = Cons {
//│        head: 0,
//│        tail: Cons { head: 0, tail: Cons { head: 0, tail: Nil {} } }
//│      }

// (* test run *)
// let lst0 = Cons (0, Cons (0, Cons (0, Cons (0, Nil))));;
lst0 = Cons (0, Cons (0, Cons (0, Cons (0, Nil))))
//│ lst0: Cons[0] with {tail: Cons[0] with {tail: Cons[0] with {tail: Cons[0] with {tail: Nil}}}}
//│     = Cons {
//│         head: 0,
//│         tail: Cons { head: 0, tail: Cons { head: 0, tail: [Cons] } }
//│       }

// foo lst0;;
foo lst0
//│ res: 'tail
//│   where
//│     'tail :> (Cons[int] with {tail: 'tail}) | Nil
//│    = Cons {
//│        head: 1,
//│        tail: Cons { head: 2, tail: Cons { head: 4, tail: [Cons] } }
//│      }

// bfoo lst0;;
bfoo lst0
//│ res: 'tail
//│   where
//│     'tail :> (Cons[int] with {tail: 'tail}) | Nil
//│    = Cons {
//│        head: 1,
//│        tail: Cons { head: 2, tail: Cons { head: 4, tail: [Cons] } }
//│      }

// :e // FIXME?
bfoo_ lst0
//│ res: error
//│    = Cons {
//│        head: 1,
//│        tail: Cons { head: 2, tail: Cons { head: 4, tail: [Cons] } }
//│      }


// (* This does not type :
// type baa = ['a, 'b] ('a  -> 'b -> 'b)-> 'b -> 'b
//   let rec (k : int -> baa -> baa) = fun x (xs : baa) c n -> c (x+1) (xs k z c n)
// *)
def k: int -> Baa -> Baa
//│ k: int -> Baa -> Baa
//│  = <missing implementation>

:e
rec def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.342: 	rec def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` is not an instance of type `'a_1021_1024`
//│ ║  l.342: 	rec def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	                                                           ^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.51: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ╙──      	                  ^^
//│ int -> Baa -> (nothing -> (‘b_1022_1025 | 'b) -> (‘b_1022_1025 & 'b) & int -> (‘b_1022_1025 | 'b) -> (‘b_1022_1023 & 'a)) -> (‘b_1022_1025 & 'b) -> 'a
//│   <:  k:
//│ int -> Baa -> Baa
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.342: 	rec def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘b_1022_1025` is not an instance of type `'b_1051_1053`
//│ ║  l.51: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ║        	                     ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.51: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ╙──      	                     ^^
//│  = [Function: k2]

:e // FIXME?
def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ (int & 'c) -> Baa -> (forall 'd. 'd -> (forall 'e, 'f, 'g, 'h, 'b, 'i, 'a, 'd. (('e & 'b & 'f) -> 'h
//│   where
//│     'd <: (int | 'g) -> ('e -> 'h & 'i) & 'a -> 'b -> ('e & 'b))))
//│   <:  k:
//│ int -> Baa -> Baa
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.367: 	def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` is not an instance of type `'a_1117`
//│ ║  l.367: 	def k = fun x -> fun (xs: Baa) -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ ║         	                                                       ^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.51: 	type Baa = forall 'a 'b. ('a -> 'b -> 'b) -> 'b -> 'b
//│ ╙──      	                  ^^
//│  = [Function: k3]

// * Using `k` here on purpose to simulate an annotated rec def
def k_ = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k z c n)
//│ k_: (int & 'a) -> (forall 'b. 'b -> (forall 'c. 'c -> (forall 'd, 'e, 'c, 'f, 'b, 'g, 'h, 'i, 'j, 'k. ('f -> 'd
//│   where
//│     'c <: (int | 'k) -> ('h -> 'd & 'e)
//│     'b <: (int -> Baa -> Baa) -> (Baa -> ('c -> ('f -> 'h & 'g) & 'i) & 'j)))))
//│   = [Function: k_1]

rec def k_ = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k_ z c n)
//│ k_: 'k_
//│   where
//│     'k_ :> int -> ('k_ -> Baa -> 'a -> 'b -> 'c) -> (int -> 'c -> 'd & 'a) -> 'b -> 'd
//│   = [Function: k_2]

// k = k_ // nope

rec def k_ = fun x -> fun xs -> fun c -> fun n -> c (x + 1) (xs k_ z_ c n)
//│ k_: 'k_
//│   where
//│     'k_ :> int -> ('k_ -> (forall 'a. 'a -> (forall 'b. 'b -> 'b)) -> 'c -> 'd -> 'e) -> (int -> 'e -> 'f & 'c) -> 'd -> 'f
//│   = [Function: k_3]

// k = k_ // nope


