:NoRecursiveTypes
:GeneralizeCurriedFunctions
:DistributeForalls

// ============ Dummy classes to represent the types in the examples ============

class List[a]
  method Head: a
  method Tail: List[a]
//│ Defined class List[+a]
//│ Declared List.Head: List['a] -> 'a
//│ Declared List.Tail: List['a] -> List['a]

class Cons[a]: List[a] & { head: a; tail: List[a] }
  method Head = this.head
  method Tail = this.tail
def cons[a]: a -> List[a] -> List[a]
def cons head tail = Cons { head; tail }
//│ Defined class Cons[+a]
//│ Defined Cons.Head: Cons['a] -> 'a
//│ Defined Cons.Tail: Cons['a] -> List['a]
//│ cons: 'a -> List['a] -> List['a]
//│     = <missing implementation>
//│ 'b -> (forall 'b, 'head, 'a, 'c, 'tail, 'd. ('c -> 'd
//│   where
//│     'b <: 'head & 'a
//│     'c <: List['a] & 'tail
//│     'd :> Cons['a] with {head: 'head, tail: 'tail}))
//│   <:  cons:
//│ 'a -> List['a] -> List['a]
//│     = [Function: cons]

class Nil[a]: List[a]
  method Head = error
  method Tail = this
def nil: List['a]
def nil = Nil {}
//│ Defined class Nil[+a]
//│ Defined Nil.Head: Nil[?] -> nothing
//│ Defined Nil.Tail: (Nil['a] & 'this) -> (Nil['a] & 'this)
//│ nil: List[nothing]
//│    = <missing implementation>
//│ Nil[nothing]
//│   <:  nil:
//│ List[nothing]
//│    = Nil {}

// ============ Type signatures for functions used in the examples ============

def head: forall 'a. List['a] -> 'a
def head l = l.Head
//│ head: List['a] -> 'a
//│     = <missing implementation>
//│ 'b -> 'c
//│   where
//│     'b <: List['a]
//│     'a <: 'c
//│   <:  head:
//│ List['a] -> 'a
//│     = [Function: head]

def tail: forall 'a. List['a] -> List['a]
def tail l = l.Tail
//│ tail: List['a] -> List['a]
//│     = <missing implementation>
//│ 'b -> 'c
//│   where
//│     'b <: List['a]
//│     'c :> List['a]
//│   <:  tail:
//│ List['a] -> List['a]
//│     = [Function: tail]

def is_empty: forall 'a. List['a] -> bool
def is_empty l = eq l nil
//│ is_empty: List[?] -> bool
//│         = <missing implementation>
//│ 'a -> 'b
//│   where
//│     'a <: 'a
//│     'c :> 'a -> bool
//│        <: List[nothing] -> 'b
//│   <:  is_empty:
//│ List[?] -> bool
//│         = [Function: is_empty]



// (* Use the value restriction ! *)

// type option ('a) = None | Some of 'a
class None
class Some[a]: { val: a }
type Option[a] = None | Some[a]
def None = None {}
def Some val = Some { val }
//│ Defined class None
//│ Defined class Some[+a]
//│ Defined type alias Option[+a]
//│ None: None
//│     = None {}
//│ Some: 'a -> 'b
//│   where
//│     'a <: 'val
//│     'b :> Some['val]
//│     = [Function: Some1]

// let create_hashtbl () = []
def create_hashtbl _ = nil
//│ create_hashtbl: anything -> List[nothing]
//│               = [Function: create_hashtbl]

// let hashtbl_add table key element = (key, element) :: table
def hashtbl_add table key element = cons ((key, element)) table
//│ hashtbl_add: 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('f -> 'e
//│   where
//│     'c :> List['d] -> List['d]
//│        <: 'a -> 'e
//│     'd :> ('b, 'f,))))
//│            = [Function: hashtbl_add]

// let rec find table key = 
//   if nil table then None
//   else if fst (car table) = key then Some (snd (car table))
//   else find (cdr table) key

:RecursiveTypes // needed for this recursive def
rec def find table key =
  if is_empty table then None
  else if eq (head table)._1 key then Some (head table)._2
  else find (tail table) key
//│ find: List[?] -> anything -> (None | Some[nothing])
//│     = [Function: find]
:NoRecursiveTypes

// ^ FIXME type pp error
// :ns
// find

:ng
find(error:List[(int, string)])(unit)
//│ res: None | Some[string]

def find_A: forall 'a 'b. List[('a, 'b)] -> 'a -> (None | Some['b])
//│ find_A: List[(anything, 'b,)] -> anything -> (None | Some['b])
//│       = <missing implementation>

:e // FIXME?
def find_A table key =
  if is_empty table then None
  else if eq (head table)._1 key then Some (head table)._2
  else find_A (tail table) key
//│ 'c -> (forall 'c, 'd, 'a, 'a0, 'a1, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r. ('s -> 't
//│   where
//│     'c <: List['d] & List['a] & List['a0] & List['a1]
//│     'e := bool
//│     'f :> forall 'u. 'u -> 'u -> 'u
//│        <: None -> 'g
//│     'g <: 'v -> 't
//│     'h <: {_1: 'i}
//│     'a <: 'h
//│     'i <: 'd
//│     'j :> 'd -> bool
//│        <: 's -> 'k
//│     'k <: bool
//│     'l :> forall 'u. 'u -> 'u -> 'u
//│        <: 'w -> 'm
//│     'n <: {_2: 'o}
//│     'a0 <: 'n
//│     'o <: 'd
//│     'd <: 'val
//│     'p :> Some['val]
//│        <: 'w
//│     'm <: 'x -> 'v
//│     'q :> List['a1]
//│        <: List[('d, 'b,)]
//│     'r :> 'd -> (None | Some['b])
//│        <: 's -> 'x))
//│   <:  find_A:
//│ List[(anything, 'b,)] -> anything -> (None | Some['b])
//│ ╔══[ERROR] Cyclic-looking constraint while typing def definition
//│ ║  l.149: 	def find_A table key =
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.150: 	  if is_empty table then None
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.151: 	  else if eq (head table)._1 key then Some (head table)._2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.152: 	  else find_A (tail table) key
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  (None | Some['b317_500''])  <:  α20_501''    ComposedType  TypeVariable
//│ ╙──  ... looks like:  (None | Some['b317_471'''])  <:  α20'
//│       = <no result>
//│         find_A is not implemented

// let nfind table key =
//   begin match find table key with
//   | None -> fun f x -> x
//   | Some n -> n
//   end
def nfind table key =
  let opt = find table key in
  case opt of
  { None -> fun f -> fun x -> x
  | Some -> opt.val
  }
//│ nfind: List['a] -> (forall 'a, 'val, 'b. ('a -> ('a -> (forall 'c. 'c -> 'c) | 'val)
//│   where
//│     'a <: {val: 'val}
//│     'b <: None | Some['a] & 'a))
//│      = [Function: nfind]

// type Int = ['a] ('a -> 'a) -> ('a -> 'a)
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt

// let succ (n:Int) = fun f x -> f (n f x)
def succ (n: ChurchInt) = fun f -> fun x -> f (n f x)
def succ_ n = fun f -> fun x -> f (n f x)
//│ succ: ChurchInt -> (forall 'a. 'a -> (forall 'b, 'a, 'c, 'd, 'e, 'f. ('f -> 'e
//│   where
//│     'b <: 'a -> 'c
//│     'a <: 'd -> 'e
//│     'c <: 'f -> 'd)))
//│   where
//│     'b := ChurchInt
//│     = [Function: succ]
//│ succ_: 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('f -> 'e
//│   where
//│     'a <: 'b -> 'c
//│     'b <: 'd -> 'e
//│     'c <: 'f -> 'd)))
//│      = [Function: succ_]

// let add (n:Int) (m:Int) = n succ m
def add (n: ChurchInt) (m: ChurchInt) = n succ m
def add_ n m = n succ_ m
//│ add: ChurchInt -> (forall 'a, 'b, 'c. (ChurchInt -> 'd
//│   where
//│     'a <: (forall 'e. (ChurchInt -> (forall 'f. 'f -> (forall 'e, 'f, 'g, 'h, 'i, 'j. ('j -> 'i
//│   where
//│     'e <: 'f -> 'g
//│     'f <: 'h -> 'i
//│     'g <: 'j -> 'h)))
//│   where
//│     'e := ChurchInt)) -> 'b
//│     'c := ChurchInt
//│     'b <: 'c -> 'd))
//│   where
//│     'a := ChurchInt
//│    = [Function: add]
//│ add_: 'a -> (forall 'a, 'b. ('c -> 'd
//│   where
//│     'a <: (forall 'e. 'e -> (forall 'f. 'f -> (forall 'e, 'f, 'g, 'h, 'i, 'j. ('j -> 'i
//│   where
//│     'e <: 'f -> 'g
//│     'f <: 'h -> 'i
//│     'g <: 'j -> 'h)))) -> 'b
//│     'b <: 'c -> 'd))
//│     = [Function: add_]

// let printInt (n:Int) = print (n (fun x -> x+1) 0)
def printInt (n: ChurchInt) = toString (n (fun x -> x + 1) 0)
def printInt_ n = toString (n (fun x -> x + 1) 0)
//│ printInt: ChurchInt -> 'a
//│   where
//│     'b <: 0 -> 'c
//│     'a :> string
//│     'd :> ChurchInt
//│        <: ChurchInt & (forall 'c, 'e, 'f. ('c -> 'f
//│   where
//│     'e :> int -> int
//│        <: 1 -> 'f
//│     'c <: int)) -> 'b
//│         = [Function: printInt]
//│ printInt_: 'a -> 'b
//│   where
//│     'a <: (forall 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'c <: int
//│     'd :> int -> int
//│        <: 1 -> 'e)) -> 'f
//│     'f <: 0 -> 'f
//│     'b :> string
//│          = [Function: printInt_]

// let table = create_hashtbl ()
// let table = hashtbl_add table "one" (fun f x -> f x)
// let table = hashtbl_add table "two" (fun f x -> f (f x))
table = create_hashtbl null
table = hashtbl_add table "one" (fun f -> fun x -> f x)
table = hashtbl_add table "two" (fun f -> fun x -> f (f x))
//│ table: List[nothing]
//│      = Nil {}
//│ table: List[("one", forall 'a. 'a -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c)),)]
//│      = Cons { head: [ 'one', [Function (anonymous)] ], tail: Nil {} }
//│ table: List[("one" | "two", forall 'a, 'b. ('a & 'b) -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'a <: 'c -> 'd & 'd -> 'e
//│     'b <: 'c -> 'e)),)]
//│      = Cons {
//│          head: [ 'two', [Function (anonymous)] ],
//│          tail: Cons { head: [ 'one', [Function (anonymous)] ], tail: Nil {} }
//│        }

// let zog =
//   printInt (add (nfind table "one") (nfind table "two"))

// :e // FIXME? failed with genLamBodies but works with quantif extrus
// * Note: this one requires `:DistributeForalls`
zog = printInt (add (nfind table "one") (nfind table "two"))
//│ zog: string
//│    = '0'

// Repro:

// :e // FIXME? failed with genLamBodies but works with quantif extrus
a = add (nfind table "one")
//│ a: ChurchInt -> 'a
//│   where
//│     'b <: (forall 'c. (ChurchInt -> (forall 'd. 'd -> (forall 'c, 'd, 'e, 'f, 'g, 'h. ('h -> 'g
//│   where
//│     'c <: 'd -> 'e
//│     'd <: 'f -> 'g
//│     'e <: 'h -> 'f)))
//│   where
//│     'c := ChurchInt)) -> 'i
//│     'j := ChurchInt
//│     'i <: 'j -> 'a
//│  = [Function (anonymous)]

b = (nfind table "two")
//│ b: ('a & 'b) -> (forall 'a, 'b, 'c, 'd, 'e, 'f. (('f & 'c) -> ('f | 'e)
//│   where
//│     'a <: 'c -> 'd & 'd -> 'e
//│     'b <: 'c -> 'e
//│     'a <: 'c -> 'd & 'd -> 'e
//│     'b <: 'c -> 'e))
//│  = [Function (anonymous)]

// * Note: this one requires `:DistributeForalls`
// :d
a b
//│ res: 'a -> (forall 'a, 'b, 'c, 'd, 'e. ('e -> 'd
//│   where
//│     'f <: 'a -> 'b
//│     'a <: 'c -> 'd
//│     'b <: 'e -> 'c)) | ChurchInt
//│    = [Function (anonymous)]

zog_ = printInt_ (add_ (nfind table "one") (nfind table "two"))
//│ zog_: string
//│     = '0'

