:GeneralizeCurriedFunctions

// ============ Dummy classes to represent the types in the examples ============

class List[a]
  method Head: a
  method Tail: List[a]
//│ Defined class List[+a]
//│ Declared List.Head: List['a] -> 'a
//│ Declared List.Tail: List['a] -> List['a]

class Cons[a]: List[a] & { head: a; tail: List[a] }
  method Head = this.head
  method Tail = this.tail
def cons[a]: a -> List[a] -> List[a]
def cons head tail = Cons { head; tail }
//│ Defined class Cons[+a]
//│ Defined Cons.Head: Cons['a] -> 'a
//│ Defined Cons.Tail: Cons['a] -> List['a]
//│ cons: 'a -> List['a] -> List['a]
//│     = <missing implementation>
//│ 'b -> (forall 'a, 'tail. (List['a] & 'tail) -> (Cons['a | 'b] with {head: 'b, tail: 'tail}))
//│   <:  cons:
//│ 'a -> List['a] -> List['a]
//│     = [Function: cons]

class Nil[a]: List[a]
  method Head = error
  method Tail = this
def nil: List['a]
def nil = Nil {}
//│ Defined class Nil[+a]
//│ Defined Nil.Head: Nil[?] -> nothing
//│ Defined Nil.Tail: (Nil['a] & 'this) -> (Nil['a] & 'this)
//│ nil: List[nothing]
//│    = <missing implementation>
//│ Nil[nothing]
//│   <:  nil:
//│ List[nothing]
//│    = Nil {}

// ============ Type signatures for functions used in the examples ============

def head: forall 'a. List['a] -> 'a
def head l = l.Head
//│ head: List['a] -> 'a
//│     = <missing implementation>
//│ List['a] -> 'a
//│   <:  head:
//│ List['a] -> 'a
//│     = [Function: head]

def tail: forall 'a. List['a] -> List['a]
def tail l = l.Tail
//│ tail: List['a] -> List['a]
//│     = <missing implementation>
//│ List['a] -> List['a]
//│   <:  tail:
//│ List['a] -> List['a]
//│     = [Function: tail]

def is_empty: forall 'a. List['a] -> bool
def is_empty l = eq l nil
//│ is_empty: List[?] -> bool
//│         = <missing implementation>
//│ anything -> bool
//│   <:  is_empty:
//│ List[?] -> bool
//│         = [Function: is_empty]



// (* Use the value restriction ! *)

// type option ('a) = None | Some of 'a
class None
class Some[a]: { val: a }
type Option[a] = None | Some[a]
def None = None {}
def Some val = Some { val }
//│ Defined class None
//│ Defined class Some[+a]
//│ Defined type alias Option[+a]
//│ None: None
//│     = None {}
//│ Some: 'val -> Some['val]
//│     = [Function: Some1]

// let create_hashtbl () = []
def create_hashtbl _ = nil
//│ create_hashtbl: anything -> List[nothing]
//│               = [Function: create_hashtbl]

// let hashtbl_add table key element = (key, element) :: table
def hashtbl_add table key element = cons ((key, element)) table
//│ hashtbl_add: 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd. ('d -> List[('b, 'd,) | 'c]
//│   where
//│     'a <: List['c])))
//│            = [Function: hashtbl_add]

// let rec find table key = 
//   if nil table then None
//   else if fst (car table) = key then Some (snd (car table))
//   else find (cdr table) key
rec def find table key =
  if is_empty table then None
  else if eq (head table)._1 key then Some (head table)._2
  else find (tail table) key
//│ find: 'b -> (forall 'b, 'find, 'a, 'c, 'd, 'val. ('c -> (None | Some['val] | 'd)
//│   where
//│     'find <: List['a] -> 'c -> 'd
//│     'b <: List['b] & List[{_1: 'b}] & List[{_2: 'val}] & List['a])) | 'find
//│     = [Function: find]


// let nfind table key =
//   begin match find table key with
//   | None -> fun f x -> x
//   | Some n -> n
//   end
// FIXME?
def nfind table key =
  let opt = find table key in
  case opt of
  { None -> fun f -> fun x -> x
  | Some -> opt.val
  }
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: ?b -> ?c` exceeded recursion depth limit (400)
//│ ║  l.123: 	  let opt = find table key in
//│ ║         	            ^^^^^^^^^^^^^^
//│ ╟── while constraining:  (α3331'''',)  <!<  (α3351'''',)
//│ ╟── while constraining:  (α3351'''' -> ‹∀ 2. {(α3384''' -> α3392''') where: find3352'''' <: ((α3381''',) -> α3383'''), α3351'''' <: List['a3393'''], α3351'''' <: List['a3394'''], α3351'''' <: List['a3397'''], α3351'''' <: List['a3382''']}›)  <!<  ((α3331'''',) -> α3333'''')
//│ ╟── while constraining:  ‹∀ 1. (α278'' -> ‹∀ 2. {(α282''' -> α290''') where: find277'''' <: ((α279''',) -> α281'''), α278'' <: List['a291'''], α278'' <: List['a292'''], α278'' <: List['a295'''], α278'' <: List['a280''']}›)›  <!<  ((α3331'''',) -> α3333'''')
//│ ╟── while constraining:  find3324''''  <!<  ((α3331'''',) -> α3333'''')
//│ ╟── while constraining:  {(α3334'''' -> α3342'''') where: find3324'''' <: ((α3331'''',) -> α3333''''), α3329'''' <: List['a3343''''], α3329'''' <: List['a3344''''], α3329'''' <: List['a3347''''], α3329'''' <: List['a3332'''']}  <!<  ((α3257'''',) -> α3259'''')
//│ ╟── while constraining:  ‹∀ 2. {(α3307''' -> α3315''') where: find3275'''' <: ((α3304''',) -> α3306'''), α3274'''' <: List['a3316'''], α3274'''' <: List['a3317'''], α3274'''' <: List['a3320'''], α3274'''' <: List['a3305''']}›  <!<  ((α3257'''',) -> α3259'''')
//│ ╟── while constraining:  ‹∀ 2. {(α3307''' -> α3315''') where: find3275'''' <: ((α3304''',) -> α3306'''), α3274'''' <: List['a3316'''], α3274'''' <: List['a3317'''], α3274'''' <: List['a3320'''], α3274'''' <: List['a3305''']}›  <!<  α3256''''
//│ ╟── while constraining:  (α3274'''' -> ‹∀ 2. {(α3307''' -> α3315''') where: find3275'''' <: ((α3304''',) -> α3306'''), α3274'''' <: List['a3316'''], α3274'''' <: List['a3317'''], α3274'''' <: List['a3320'''], α3274'''' <: List['a3305''']}›)  <!<  ((α3254'''',) -> α3256'''')
//│ ╟── while constraining:  ‹∀ 1. (α278'' -> ‹∀ 2. {(α282''' -> α290''') where: find277'''' <: ((α279''',) -> α281'''), α278'' <: List['a291'''], α278'' <: List['a292'''], α278'' <: List['a295'''], α278'' <: List['a280''']}›)›  <!<  ((α3254'''',) -> α3256'''')
//│ ╟── while constraining:  find3247''''  <!<  ((α3254'''',) -> α3256'''')
//│ ╟── while constraining:  {(α3257'''' -> α3265'''') where: find3247'''' <: ((α3254'''',) -> α3256''''), α3252'''' <: List['a3266''''], α3252'''' <: List['a3267''''], α3252'''' <: List['a3270''''], α3252'''' <: List['a3255'''']}  <!<  ((α3180'''',) -> α3182'''')
//│ ╟── while constraining:  ‹∀ 2. {(α3230''' -> α3238''') where: find3198'''' <: ((α3227''',) -> α3229'''), α3197'''' <: List['a3239'''], α3197'''' <: List['a3240'''], α3197'''' <: List['a3243'''], α3197'''' <: List['a3228''']}›  <!<  ((α3180'''',) -> α3182'''')
//│ ╟── while constraining:  ‹∀ 2. {(α3230''' -> α3238''') where: find3198'''' <: ((α3227''',) -> α3229'''), α3197'''' <: List['a3239'''], α3197'''' <: List['a3240'''], α3197'''' <: List['a3243'''], α3197'''' <: List['a3228''']}›  <!<  α3179''''
//│ ╟── while constraining:  (α3197'''' -> ‹∀ 2. {(α3230''' -> α3238''') where: find3198'''' <: ((α3227''',) -> α3229'''), α3197'''' <: List['a3239'''], α3197'''' <: List['a3240'''], α3197'''' <: List['a3243'''], α3197'''' <: List['a3228''']}›)  <!<  ((α3177'''',) -> α3179'''')
//│ ╟── while constraining:  ‹∀ 1. (α278'' -> ‹∀ 2. {(α282''' -> α290''') where: find277'''' <: ((α279''',) -> α281'''), α278'' <: List['a291'''], α278'' <: List['a292'''], α278'' <: List['a295'''], α278'' <: List['a280''']}›)›  <!<  ((α3177'''',) -> α3179'''')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  {(α485'''' -> α493'''') where: find475'''' <: ((α482'''',) -> α484''''), α480'''' <: List['a494''''], α480'''' <: List['a495''''], α480'''' <: List['a498''''], α480'''' <: List['a483'''']}  <!<  ((α408'''',) -> α410'''')
//│ ╟── while constraining:  ‹∀ 2. {(α458''' -> α466''') where: find426'''' <: ((α455''',) -> α457'''), α425'''' <: List['a467'''], α425'''' <: List['a468'''], α425'''' <: List['a471'''], α425'''' <: List['a456''']}›  <!<  ((α408'''',) -> α410'''')
//│ ╟── while constraining:  ‹∀ 2. {(α458''' -> α466''') where: find426'''' <: ((α455''',) -> α457'''), α425'''' <: List['a467'''], α425'''' <: List['a468'''], α425'''' <: List['a471'''], α425'''' <: List['a456''']}›  <!<  α407''''
//│ ╟── while constraining:  (α425'''' -> ‹∀ 2. {(α458''' -> α466''') where: find426'''' <: ((α455''',) -> α457'''), α425'''' <: List['a467'''], α425'''' <: List['a468'''], α425'''' <: List['a471'''], α425'''' <: List['a456''']}›)  <!<  ((α405'''',) -> α407'''')
//│ ╟── while constraining:  ‹∀ 1. (α278'' -> ‹∀ 2. {(α282''' -> α290''') where: find277'''' <: ((α279''',) -> α281'''), α278'' <: List['a291'''], α278'' <: List['a292'''], α278'' <: List['a295'''], α278'' <: List['a280''']}›)›  <!<  ((α405'''',) -> α407'''')
//│ ╟── while constraining:  find398''''  <!<  ((α405'''',) -> α407'''')
//│ ╟── while constraining:  {(α408'''' -> α416'''') where: find398'''' <: ((α405'''',) -> α407''''), α403'''' <: List['a417''''], α403'''' <: List['a418''''], α403'''' <: List['a421''''], α403'''' <: List['a406'''']}  <!<  ((α331'''',) -> α333'''')
//│ ╟── while constraining:  ‹∀ 2. {(α381''' -> α389''') where: find349'''' <: ((α378''',) -> α380'''), α348'''' <: List['a390'''], α348'''' <: List['a391'''], α348'''' <: List['a394'''], α348'''' <: List['a379''']}›  <!<  ((α331'''',) -> α333'''')
//│ ╟── while constraining:  ‹∀ 2. {(α381''' -> α389''') where: find349'''' <: ((α378''',) -> α380'''), α348'''' <: List['a390'''], α348'''' <: List['a391'''], α348'''' <: List['a394'''], α348'''' <: List['a379''']}›  <!<  α330''''
//│ ╟── while constraining:  (α348'''' -> ‹∀ 2. {(α381''' -> α389''') where: find349'''' <: ((α378''',) -> α380'''), α348'''' <: List['a390'''], α348'''' <: List['a391'''], α348'''' <: List['a394'''], α348'''' <: List['a379''']}›)  <!<  ((α328'''',) -> α330'''')
//│ ╟── while constraining:  ‹∀ 1. (α278'' -> ‹∀ 2. {(α282''' -> α290''') where: find277'''' <: ((α279''',) -> α281'''), α278'' <: List['a291'''], α278'' <: List['a292'''], α278'' <: List['a295'''], α278'' <: List['a280''']}›)›  <!<  ((α328'''',) -> α330'''')
//│ ╟── while constraining:  find324''''  <!<  ((α328'''',) -> α330'''')
//│ ╟── while constraining:  {(α331'''' -> α339'''') where: find324'''' <: ((α328'''',) -> α330''''), α327'''' <: List['a340''''], α327'''' <: List['a341''''], α327'''' <: List['a344''''], α327'''' <: List['a329'''']}  <!<  ((α275''',) -> α323'''')
//│ ╟── while constraining:  ‹∀ 2. {(α306''' -> α314''') where: find300'''' <: ((α303''',) -> α305'''), α299'''' <: List['a315'''], α299'''' <: List['a316'''], α299'''' <: List['a319'''], α299'''' <: List['a304''']}›  <!<  ((α275''',) -> α323'''')
//│ ╙── while constraining:  α276''''  <!<  ((α275''',) -> α323'''')
//│ nfind: anything -> anything -> anything -> (forall 'a. 'a -> 'a)
//│      = [Function: nfind]

// type Int = ['a] ('a -> 'a) -> ('a -> 'a)
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt

// let succ (n:Int) = fun f x -> f (n f x)
def succ (n: ChurchInt) = fun f -> fun x -> f (n f x)
def succ' n = fun f -> fun x -> f (n f x)
//│ succ: ChurchInt -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e)))
//│     = [Function: succ]
//│ succ': 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e)))
//│      = [Function: succ]

// let add (n:Int) (m:Int) = n succ m
def add (n: ChurchInt) (m: ChurchInt) = n succ m
def add' n m = n succ' m
//│ add: ChurchInt -> (forall 'a. (ChurchInt -> 'b
//│   where
//│     'a <: (ChurchInt -> (forall 'c. 'c -> (forall 'c, 'd, 'e, 'f, 'g. ('e -> 'g
//│   where
//│     'd <: 'c -> 'e -> 'f
//│     'c <: 'f -> 'g)))) -> ChurchInt -> 'b))
//│    = [Function: add]
//│ add': 'a -> (forall 'a. ('b -> 'c
//│   where
//│     'a <: (forall 'd. 'd -> (forall 'e. 'e -> (forall 'd, 'e, 'f, 'g, 'h. ('f -> 'h
//│   where
//│     'd <: 'e -> 'f -> 'g
//│     'e <: 'g -> 'h)))) -> 'b -> 'c))
//│     = [Function: add]

// let printInt (n:Int) = print (n (fun x -> x+1) 0)
def printInt (n: ChurchInt) = toString (n (fun x -> x + 1) 0)
def printInt' n = toString (n (fun x -> x + 1) 0)
//│ printInt: ChurchInt -> string
//│         = [Function: printInt]
//│ printInt': ((int -> int) -> 0 -> anything) -> string
//│          = [Function: printInt]

// let table = create_hashtbl ()
// let table = hashtbl_add table "one" (fun f x -> f x)
// let table = hashtbl_add table "two" (fun f x -> f (f x))
table = create_hashtbl null
table = hashtbl_add table "one" (fun f -> fun x -> f x)
table = hashtbl_add table "two" (fun f -> fun x -> f (f x))
//│ table: List[nothing]
//│      = Nil {}
//│ table: List[("one", forall 'a. 'a -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c)),)]
//│      = Cons { head: [ 'one', [Function (anonymous)] ], tail: Nil {} }
//│ table: List[("one" | "two", forall 'a, 'b. ('a & 'b) -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'd
//│   where
//│     'a <: 'c -> 'd
//│     'b <: 'c -> 'e & 'e -> 'd)),)]
//│      = Cons {
//│          head: [ 'two', [Function (anonymous)] ],
//│          tail: Cons { head: [ 'one', [Function (anonymous)] ], tail: Nil {} }
//│        }

// let zog =
//   printInt (add (nfind table "one") (nfind table "two"))
// FIXME?
zog = printInt (add (nfind table "one") (nfind table "two"))
zog' = printInt' (add' (nfind table "one") (nfind table "two"))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.234: 	zog = printInt (add (nfind table "one") (nfind table "two"))
//│ ║         	                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.167: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.167: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──       	                        ^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.234: 	zog = printInt (add (nfind table "one") (nfind table "two"))
//│ ║         	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.167: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.167: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──       	                        ^^
//│ zog: error | string
//│    = '0'
//│ zog': string
//│     = '0'
