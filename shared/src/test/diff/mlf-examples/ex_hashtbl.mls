:NoRecursiveTypes
:GeneralizeCurriedFunctions
:DistributeForalls

// ============ Dummy classes to represent the types in the examples ============

class List[a]
  method Head: a
  method Tail: List[a]
//│ Defined class List[+a]
//│ Declared List.Head: List['a] -> 'a
//│ Declared List.Tail: List['a] -> List['a]

class Cons[a]: List[a] & { head: a; tail: List[a] }
  method Head = this.head
  method Tail = this.tail
def cons[a]: a -> List[a] -> List[a]
def cons head tail = Cons { head; tail }
//│ Defined class Cons[+a]
//│ Defined Cons.Head: Cons['a] -> 'a
//│ Defined Cons.Tail: Cons['a] -> List['a]
//│ cons: 'a -> List['a] -> List['a]
//│     = <missing implementation>
//│ 'b -> (forall 'c, 'a, 'd, 'head, 'tail. (List['a] & 'c & 'tail) -> ((Cons['a | 'b] with {head: 'head | 'b, tail: 'tail}) | 'd))
//│   <:  cons:
//│ 'a -> List['a] -> List['a]
//│     = [Function: cons]

class Nil[a]: List[a]
  method Head = error
  method Tail = this
def nil: List['a]
nil = Nil {}
//│ Defined class Nil[+a]
//│ Defined Nil.Head: Nil[?] -> nothing
//│ Defined Nil.Tail: (Nil['a] & 'this) -> (Nil['a] & 'this)
//│ nil: List[nothing]
//│    = <missing implementation>
//│ Nil[nothing]
//│   <:  nil:
//│ List[nothing]
//│    = Nil {}

// ============ Type signatures for functions used in the examples ============

def head: forall 'a. List['a] -> 'a
def head l = l.Head
//│ head: List['a] -> 'a
//│     = <missing implementation>
//│ (List['a & 'b] & 'c & 'this) -> 'b
//│   <:  head:
//│ List['a] -> 'a
//│     = [Function: head]

def tail: forall 'a. List['a] -> List['a]
def tail l = l.Tail
//│ tail: List['a] -> List['a]
//│     = <missing implementation>
//│ (List['a] & 'b & 'this) -> (List['a] | 'c)
//│   <:  tail:
//│ List['a] -> List['a]
//│     = [Function: tail]

def is_empty: forall 'a. List['a] -> bool
def is_empty l = eq l nil
//│ is_empty: List['a] -> bool
//│         = <missing implementation>
//│ ('a & 'b) -> (bool | 'c)
//│   <:  is_empty:
//│ List['a] -> bool
//│         = [Function: is_empty]



// (* Use the value restriction ! *)

// type option ('a) = None | Some of 'a
class None
class Some[a]: { val: a }
type Option[a] = None | Some[a]
def None = None {}
def Some val = Some { val }
//│ Defined class None
//│ Defined class Some[+a]
//│ Defined type alias Option[+a]
//│ None: None
//│     = [Function: None1]
//│ Some: ('b & 'val & 'a) -> ((Some['a] with {val: 'val}) | 'c)
//│     = [Function: Some1]

// let create_hashtbl () = []
def create_hashtbl _ = nil
//│ create_hashtbl: 'a -> List[nothing]
//│               = [Function: create_hashtbl]

// let hashtbl_add table key element = (key, element) :: table
def hashtbl_add table key element = cons ((key, element)) table
//│ hashtbl_add: 'a -> (forall 'b. 'b -> (forall 'c, 'd, 'a, 'b, 'e. ('c -> (List[('b, 'c,) | 'e] | 'd)
//│   where
//│     'a <: List['e])))
//│            = [Function: hashtbl_add]

// let rec find table key = 
//   if nil table then None
//   else if fst (car table) = key then Some (snd (car table))
//   else find (cdr table) key

:RecursiveTypes // needed for this recursive def
rec def find table key =
  if is_empty table then None
  else if eq (head table)._1 key then Some (head table)._2
  else find (tail table) key
//│ find: List[?] -> anything -> (None | Some[nothing])
//│     = [Function: find]
:NoRecursiveTypes

// ^ FIXME type pp error
// :ns
// find

:ng
find(error:List[(int, string)])(unit)
//│ res: None | Some[string]

def find_A: forall 'a 'b. List[('a, 'b)] -> 'a -> (None | Some['b])
//│ find_A: List[('a, 'b,)] -> 'a -> (None | Some['b])
//│       = <missing implementation>

// :e // FIXME?
def find_A table key =
  if is_empty table then None
  else if eq (head table)._1 key then Some (head table)._2
  else find_A (tail table) key
//│ 'c -> (forall 'a, 'd, 'a0, 'e, 'f, 'g, 'a1, 'h, 'i, 'a2, 'a3, 'j, 'b, 'c, 'a4, 'k, 'val. (('k & 'a & 'g) -> (None | (Some['a3] with {val: 'val}) | Some['b] | 'd)
//│   where
//│     'c <: List['a4] & List[{_1: 'i & 'k} & 'a0 & 'e] & List[{_2: 'h & 'j & 'val & 'a3} & 'a1 & 'f] & List[('a, 'b,) & 'a2]))
//│   <:  find_A:
//│ List[('a, 'b,)] -> 'a -> (None | Some['b])
//│       = <no result>
//│         find_A is not implemented

// let nfind table key =
//   begin match find table key with
//   | None -> fun f x -> x
//   | Some n -> n
//   end
def nfind table key =
  let opt = find table key in
  case opt of
  { None -> fun f -> fun x -> x
  | Some -> opt.val
  }
//│ nfind: (List['a | {_1: 'b & 'c} & 'a0 & 'd | {_1: 'e & 'f, _2: 'g & 'h & 'val & 'a1} & 'a2 & 'a3 & 'a4 & 'i & 'a5 & 'j | {_2: 'k & 'l & 'val0 & 'a6} & 'a7 & 'm] & 'n) -> (forall 'o, 'val1. 'o -> (forall 'p. 'p -> (forall 'q. 'q -> 'q) | 'val | 'val0 | 'val1))
//│      = [Function: nfind]

// type Int = ['a] ('a -> 'a) -> ('a -> 'a)
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt

// let succ (n:Int) = fun f x -> f (n f x)
def succ (n: ChurchInt) = fun f -> fun x -> f (n f x)
def succ_ n = fun f -> fun x -> f (n f x)
//│ succ: ChurchInt -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e. (('a & 'e & 'c) -> 'd
//│   where
//│     'b <: 'a -> ('a & 'e) & 'e -> 'd)))
//│     = [Function: succ]
//│ succ_: 'a -> (forall 'b. 'b -> (forall 'b, 'c, 'd, 'e, 'a, 'f. ('d -> 'e
//│   where
//│     'b <: 'f -> 'e
//│     'a <: 'b -> ('d -> 'f & 'c))))
//│      = [Function: succ_]

// let add (n:Int) (m:Int) = n succ m

//:e // due to tapping
def add (n: ChurchInt) (m: ChurchInt) = n succ m
//│ add: ChurchInt -> ChurchInt -> (forall 'b, 'c. 'b -> (forall 'a, 'b, 'd, 'e, 'f. (('a & 'f & 'd) -> 'e
//│   where
//│     'b <: 'a -> ('a & 'f) & 'f -> 'e)) | ChurchInt | 'c)
//│    = [Function: add]

def add_ n m = n succ_ m
//│ add_: 'a -> (forall 'b, 'c, 'd, 'a. ('b -> 'c
//│   where
//│     'a <: (forall 'e. 'e -> (forall 'f. 'f -> (forall 'g, 'h, 'i, 'e, 'f, 'j. ('h -> 'g
//│   where
//│     'e <: 'f -> ('h -> 'j & 'i)
//│     'f <: 'j -> 'g)))) -> ('b -> 'c & 'd)))
//│     = [Function: add_]

// let printInt (n:Int) = print (n (fun x -> x+1) 0)
def printInt (n: ChurchInt) = toString (n (fun x -> x + 1) 0)
def printInt_ n = toString (n (fun x -> x + 1) 0)
//│ printInt: ChurchInt -> (string | 'a)
//│         = [Function: printInt]
//│ printInt_: ((forall 'a, 'b. (int & 'a) -> (int | 'b)) -> (0 -> 'c & 'd) & 'e) -> (string | 'f)
//│          = [Function: printInt_]

// let table = create_hashtbl ()
// let table = hashtbl_add table "one" (fun f x -> f x)
// let table = hashtbl_add table "two" (fun f x -> f (f x))
table = create_hashtbl null
table = hashtbl_add table "one" (fun f -> fun x -> f x)
table = hashtbl_add table "two" (fun f -> fun x -> f (f x))
//│ table: List[nothing]
//│      = Nil {}
//│ table: List[("one", forall 'a. 'a -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c)),)]
//│      = Cons { head: [ 'one', [Function (anonymous)] ], tail: Nil {} }
//│ table: List[("one" | "two", forall 'a, 'b. ('a & 'b) -> (forall 'c, 'b, 'd, 'e, 'a, 'f, 'g. (('c & 'f) -> ('g | 'd)
//│   where
//│     'b <: 'f -> 'e & 'e -> 'd
//│     'a <: 'c -> 'g)),)]
//│      = Cons {
//│          head: [ 'two', [Function (anonymous)] ],
//│          tail: Cons { head: [ 'one', [Function (anonymous)] ], tail: Nil {} }
//│        }

// let zog =
//   printInt (add (nfind table "one") (nfind table "two"))

// :e // FIXME? failed with genLamBodies but works with quantif extrus
// * Note: this one requires `:DistributeForalls`
// :e // due to tapping
zog = printInt (add (nfind table "one") (nfind table "two"))
//│ zog: string | 'a
//│    = '0'

// Repro:

// :e // FIXME? failed with genLamBodies but works with quantif extrus
//:e // due to tapping
// :e // FIXME? refreshing-extr
a = add (nfind table "one")
//│ a: ChurchInt -> (forall 'b, 'c. 'b -> (forall 'a, 'd, 'e, 'f, 'b. (('a & 'f & 'd) -> 'e
//│   where
//│     'b <: 'a -> ('a & 'f) & 'f -> 'e)) | ChurchInt | 'c)
//│  = [Function (anonymous)]

// :e // FIXME? refreshing-extr
b = (nfind table "two")
//│ b: ('a & 'b & 'c) -> (forall 'c, 'd, 'e, 'f, 'g, 'b, 'h, 'i. (('g & 'e & 'i) -> ('g | 'h | 'd)
//│   where
//│     'b <: 'e -> 'f & 'f -> 'd
//│     'c <: 'i -> 'h))
//│  = [Function (anonymous)]

// * Note: this one requires `:DistributeForalls`
// :d
//:e // due to tapping
a b
//│ res: 'b -> (forall 'c, 'd, 'b, 'a, 'e. (('a & 'e & 'd) -> 'c
//│   where
//│     'b <: 'a -> ('a & 'e) & 'e -> 'c)) | ChurchInt | 'f
//│    = [Function (anonymous)]

// :e // FIXME? refreshing-extr
//:e // due to tapping
// :e // Works since inconsistent constrained types...
zog_ = printInt_ (add_ (nfind table "one") (nfind table "two"))
//│ zog_: string
//│     = '0'

