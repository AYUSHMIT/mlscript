:NoRecursiveTypes
:GeneralizeCurriedFunctions
:DistributeForalls

// ============ Dummy classes to represent the types in the examples ============

class List[a]
  method Head: a
  method Tail: List[a]
//│ Defined class List[+a]
//│ Declared List.Head: List['a] -> 'a
//│ Declared List.Tail: List['a] -> List['a]

class Cons[a]: List[a] & { head: a; tail: List[a] }
  method Head = this.head
  method Tail = this.tail
def cons[a]: a -> List[a] -> List[a]
def cons head tail = Cons { head; tail }
//│ Defined class Cons[+a]
//│ Defined Cons.Head: Cons['a] -> 'a
//│ Defined Cons.Tail: Cons['a] -> List['a]
//│ cons: 'a -> List['a] -> List['a]
//│     = <missing implementation>
//│ 'b -> (forall 'b, 'head, 'a, 'tail. ((List['a] & 'tail) -> (Cons['a] with {head: 'head, tail: 'tail})
//│   where
//│     'b <: 'head & 'a))
//│   <:  cons:
//│ 'a -> List['a] -> List['a]
//│     = [Function: cons]

class Nil[a]: List[a]
  method Head = error
  method Tail = this
def nil: List['a]
def nil = Nil {}
//│ Defined class Nil[+a]
//│ Defined Nil.Head: Nil[?] -> nothing
//│ Defined Nil.Tail: (Nil['a] & 'this) -> (Nil['a] & 'this)
//│ nil: List[nothing]
//│    = <missing implementation>
//│ Nil[nothing]
//│   <:  nil:
//│ List[nothing]
//│    = Nil {}

// ============ Type signatures for functions used in the examples ============

def head: forall 'a. List['a] -> 'a
def head l = l.Head
//│ head: List['a] -> 'a
//│     = <missing implementation>
//│ List['a] -> 'a
//│   <:  head:
//│ List['a] -> 'a
//│     = [Function: head]

def tail: forall 'a. List['a] -> List['a]
def tail l = l.Tail
//│ tail: List['a] -> List['a]
//│     = <missing implementation>
//│ List['a] -> List['a]
//│   <:  tail:
//│ List['a] -> List['a]
//│     = [Function: tail]

def is_empty: forall 'a. List['a] -> bool
def is_empty l = eq l nil
//│ is_empty: List[?] -> bool
//│         = <missing implementation>
//│ anything -> bool
//│   <:  is_empty:
//│ List[?] -> bool
//│         = [Function: is_empty]



// (* Use the value restriction ! *)

// type option ('a) = None | Some of 'a
class None
class Some[a]: { val: a }
type Option[a] = None | Some[a]
def None = None {}
def Some val = Some { val }
//│ Defined class None
//│ Defined class Some[+a]
//│ Defined type alias Option[+a]
//│ None: None
//│     = None {}
//│ Some: 'val -> Some['val]
//│     = [Function: Some1]

// let create_hashtbl () = []
def create_hashtbl _ = nil
//│ create_hashtbl: anything -> List[nothing]
//│               = [Function: create_hashtbl]

// let hashtbl_add table key element = (key, element) :: table
def hashtbl_add table key element = cons ((key, element)) table
//│ hashtbl_add: (List['a] & 'a) -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd. ('d -> List[('b, 'd,) | 'c]
//│   where
//│     'a <: List['c])))
//│            = [Function: hashtbl_add]

// let rec find table key = 
//   if nil table then None
//   else if fst (car table) = key then Some (snd (car table))
//   else find (cdr table) key

:RecursiveTypes // needed for this recursive def
rec def find table key =
  if is_empty table then None
  else if eq (head table)._1 key then Some (head table)._2
  else find (tail table) key
//│ find: List[?] -> anything -> (None | Some[nothing])
//│     = [Function: find]
:NoRecursiveTypes

// ^ FIXME type pp error
// :ns
// find

:ng
find(error:List[(int, string)])(unit)
//│ res: None | Some[string]

def find_A: forall 'a 'b. List[('a, 'b)] -> 'a -> (None | Some['b])
//│ find_A: List[(anything, 'b,)] -> anything -> (None | Some['b])
//│       = <missing implementation>

// :e // FIXME?
def find_A table key =
  if is_empty table then None
  else if eq (head table)._1 key then Some (head table)._2
  else find_A (tail table) key
//│ (List['a] & 'a) -> (forall 'a, 'val, 'b. ('a -> (None | Some['val] | Some['b])
//│   where
//│     'a <: List['a] & List[{_1: 'a}] & List[{_2: 'val}] & List[('a, 'b,)]))
//│   <:  find_A:
//│ List[(anything, 'b,)] -> anything -> (None | Some['b])
//│       = <no result>
//│         find_A is not implemented

// let nfind table key =
//   begin match find table key with
//   | None -> fun f x -> x
//   | Some n -> n
//   end
def nfind table key =
  let opt = find table key in
  case opt of
  { None -> fun f -> fun x -> x
  | Some -> opt.val
  }
//│ nfind: List[?] -> (forall 'val, 'val0. (anything -> (anything -> (forall 'a. 'a -> 'a) | 'val0)
//│   where
//│     'val <: 'val0))
//│      = [Function: nfind]

// type Int = ['a] ('a -> 'a) -> ('a -> 'a)
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt

// let succ (n:Int) = fun f x -> f (n f x)
def succ (n: ChurchInt) = fun f -> fun x -> f (n f x)
def succ_ n = fun f -> fun x -> f (n f x)
//│ succ: ChurchInt -> (forall 'a. (nothing -> anything & 'a) -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e)))
//│     = [Function: succ]
//│ succ_: (nothing -> nothing -> 'a & nothing -> nothing -> 'b & nothing -> nothing -> 'c & 'd) -> (forall 'e. ('a -> 'd & 'b -> 'd & 'c -> 'd & 'e) -> (forall 'd, 'e, 'f, 'g, 'h. ('f -> 'h
//│   where
//│     'd <: 'e -> 'f -> 'g
//│     'e <: 'g -> 'h)))
//│      = [Function: succ_]

// let add (n:Int) (m:Int) = n succ m

//:e // due to tapping
def add (n: ChurchInt) (m: ChurchInt) = n succ m
//│ add: ChurchInt -> (forall 'a. (ChurchInt -> 'b
//│   where
//│     'a <: (ChurchInt -> (forall 'c. (nothing -> anything & 'c) -> (forall 'c, 'd, 'e, 'f, 'g. ('e -> 'g
//│   where
//│     'd <: 'c -> 'e -> 'f
//│     'c <: 'f -> 'g)))) -> ChurchInt -> 'b))
//│    = [Function: add]

def add_ n m = n succ_ m
//│ add_: ((forall 'a, 'b, 'c, 'd. (nothing -> nothing -> 'a & nothing -> nothing -> 'b & nothing -> nothing -> 'c & 'd) -> (forall 'e. ('a -> 'd & 'b -> 'd & 'c -> 'd & 'e) -> (forall 'd, 'e, 'f, 'g, 'h. ('f -> 'h
//│   where
//│     'd <: 'e -> 'f -> 'g
//│     'e <: 'g -> 'h)))) -> nothing -> 'd & 'i) -> (forall 'i. ('j -> 'k
//│   where
//│     'i <: (forall 'a, 'b, 'c, 'd. (nothing -> nothing -> 'a & nothing -> nothing -> 'b & nothing -> nothing -> 'c & 'd) -> (forall 'e. ('a -> 'd & 'b -> 'd & 'c -> 'd & 'e) -> (forall 'd, 'e, 'f, 'g, 'h. ('f -> 'h
//│   where
//│     'd <: 'e -> 'f -> 'g
//│     'e <: 'g -> 'h)))) -> 'j -> 'k))
//│     = [Function: add_]

// let printInt (n:Int) = print (n (fun x -> x+1) 0)
def printInt (n: ChurchInt) = toString (n (fun x -> x + 1) 0)
def printInt_ n = toString (n (fun x -> x + 1) 0)
//│ printInt: ChurchInt -> string
//│         = [Function: printInt]
//│ printInt_: ((int -> int) -> 0 -> anything) -> string
//│          = [Function: printInt_]

// let table = create_hashtbl ()
// let table = hashtbl_add table "one" (fun f x -> f x)
// let table = hashtbl_add table "two" (fun f x -> f (f x))
table = create_hashtbl null
table = hashtbl_add table "one" (fun f -> fun x -> f x)
table = hashtbl_add table "two" (fun f -> fun x -> f (f x))
//│ table: List[nothing]
//│      = Nil {}
//│ table: List[("one", forall 'a. (nothing -> 'a & 'a) -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c)),)]
//│      = Cons { head: [ 'one', [Function (anonymous)] ], tail: Nil {} }
//│ table: List[("one" | "two", forall 'a, 'b, 'c, 'd. (nothing -> 'a & nothing -> 'b & 'b -> 'a & 'c -> 'a & nothing -> 'c & 'd & 'a) -> (forall 'a, 'd, 'e, 'f, 'g. ('e -> 'f
//│   where
//│     'd <: 'e -> 'f
//│     'a <: 'e -> 'g & 'g -> 'f)),)]
//│      = Cons {
//│          head: [ 'two', [Function (anonymous)] ],
//│          tail: Cons { head: [ 'one', [Function (anonymous)] ], tail: Nil {} }
//│        }

// let zog =
//   printInt (add (nfind table "one") (nfind table "two"))

// :e // FIXME? failed with genLamBodies but works with quantif extrus
// * Note: this one requires `:DistributeForalls`
// :e // due to tapping
zog = printInt (add (nfind table "one") (nfind table "two"))
//│ zog: string
//│    = '0'

// Repro:

// :e // FIXME? failed with genLamBodies but works with quantif extrus
//:e // due to tapping
// :e // FIXME? refreshing-extr
a = add (nfind table "one")
//│ a: ChurchInt -> 'a
//│   where
//│     'b <: (ChurchInt -> (forall 'c. (nothing -> anything & 'c) -> (forall 'c, 'd, 'e, 'f, 'g. ('e -> 'g
//│   where
//│     'd <: 'c -> 'e -> 'f
//│     'c <: 'f -> 'g)))) -> ChurchInt -> 'a
//│  = [Function (anonymous)]

// :e // FIXME? refreshing-extr
b = (nfind table "two")
//│ b: nothing -> (forall 'a, 'b, 'c, 'd, 'e, 'f. (('f & 'b) -> ('c | 'f)
//│   where
//│     'a <: 'b -> 'c
//│     'd <: 'b -> 'e & 'e -> 'c
//│     'a <: 'b -> 'c
//│     'a <: 'b -> 'c
//│     'd <: 'b -> 'e & 'e -> 'c
//│     'a <: 'b -> 'c
//│     'a <: 'b -> 'c
//│     'd <: 'b -> 'e & 'e -> 'c
//│     'a <: 'b -> 'c
//│     'a <: 'b -> 'c
//│     'd <: 'b -> 'e & 'e -> 'c))
//│  = [Function (anonymous)]

// * Note: this one requires `:DistributeForalls`
// :d
//:e // due to tapping
a b
//│ res: (nothing -> anything & 'a) -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e)) | ChurchInt
//│    = [Function (anonymous)]

// :e // FIXME? refreshing-extr
//:e // due to tapping
:e // FIXME?
zog_ = printInt_ (add_ (nfind table "one") (nfind table "two"))
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a. ?a -> (forall ?a. (?b -> ?c
//│   where
//│     ?a <: (forall ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r, ?s. ?n -> (forall ?t, ?u, ?v, ?w. ?w -> (forall ?d, ?e, ?f, ?g, ?h, ?i, ?t, ?u, ?x, ?y, ?z, ?j, ?k, ?l, ?m, ?v, ?n, ?o, ?p, ?q, ?r, ?s, ?w, ?a1. (?x -> ?z
//│   where
//│     ?n <: ?w -> ?a1
//│     ?w <: ?y -> ?z)))) -> ?b1)) <: ?c1 -> ?d1` took too many steps and ran out of fuel (5000)
//│ ║  l.285: 	zog_ = printInt_ (add_ (nfind table "one") (nfind table "two"))
//│ ║         	                  ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟──  + ‹∀ 0. ‹∀ 1. (α798_825'' -> ‹∀ 2. (α799_835''' -> ‹∀ 3. {(α800_839'''' -> α803_841'''') where: α798_825'' <: ((α799_835''',) -> α801_838''''), α799_835''' <: ((α802_840'''',) -> α803_841'''')}›)›)››
//│ ║  l.166: 	def succ_ n = fun f -> fun x -> f (n f x)
//│ ║         	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟──  + ‹∀ 0. ‹∀ 1. (α798_825'' -> ‹∀ 2. (α799_835''' -> ‹∀ 3. {(α800_839'''' -> α803_841'''') where: α798_825'' <: ((α799_835''',) -> α801_838''''), α799_835''' <: ((α802_840'''',) -> α803_841'''')}›)›)››
//│ ║  l.190: 	def add_ n m = n succ_ m
//│ ║         	                 ^^^^^
//│ ╟──  - ((α1245_10044',) -> α1246_10045')
//│ ╙──  - α1244_10037'
//│ zog_: string
//│     = '0'

