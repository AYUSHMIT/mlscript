:NoRecursiveTypes
:GeneralizeCurriedFunctions
:DistributeForalls

// ============ Dummy classes to represent the types in the examples ============

class List[a]
  method Head: a
  method Tail: List[a]
//│ Defined class List[+a]
//│ Declared List.Head: List['a] -> 'a
//│ Declared List.Tail: List['a] -> List['a]

class Cons[a]: List[a] & { head: a; tail: List[a] }
  method Head = this.head
  method Tail = this.tail
def cons[a]: a -> List[a] -> List[a]
def cons head tail = Cons { head; tail }
//│ Defined class Cons[+a]
//│ Defined Cons.Head: Cons['a] -> 'a
//│ Defined Cons.Tail: Cons['a] -> List['a]
//│ cons: 'a -> List['a] -> List['a]
//│     = <missing implementation>
//│ 'b -> (forall 'b, 'c. ((List['c] & 'c) -> (forall 'b, 'c, 'head, 'a, 'tail. (Cons['a] with {head: 'head, tail: 'tail}
//│   where
//│     'b <: 'head & 'a
//│     'c <: List['a] & 'tail
//│     'b <: 'head & 'a
//│     'c <: List['a] & 'tail))
//│   where
//│     'b <: 'c
//│     'b <: 'c))
//│   <:  cons:
//│ 'a -> List['a] -> List['a]
//│     = [Function: cons]

class Nil[a]: List[a]
  method Head = error
  method Tail = this
def nil: List['a]
def nil = Nil {}
//│ Defined class Nil[+a]
//│ Defined Nil.Head: Nil[?] -> nothing
//│ Defined Nil.Tail: (Nil['a] & 'this) -> (Nil['a] & 'this)
//│ nil: List[nothing]
//│    = <missing implementation>
//│ Nil[nothing]
//│   <:  nil:
//│ List[nothing]
//│    = Nil {}

// ============ Type signatures for functions used in the examples ============

def head: forall 'a. List['a] -> 'a
def head l = l.Head
//│ head: List['a] -> 'a
//│     = <missing implementation>
//│ (List['a] & 'a) -> (forall 'a, 'b. ('b
//│   where
//│     'a <: List['b]))
//│   <:  head:
//│ List['a] -> 'a
//│     = [Function: head]

def tail: forall 'a. List['a] -> List['a]
def tail l = l.Tail
//│ tail: List['a] -> List['a]
//│     = <missing implementation>
//│ (List['b] & 'b) -> (forall 'b, 'a. (List['a]
//│   where
//│     'b <: List['a]))
//│   <:  tail:
//│ List['a] -> List['a]
//│     = [Function: tail]

def is_empty: forall 'a. List['a] -> bool
def is_empty l = eq l nil
//│ is_empty: List[?] -> bool
//│         = <missing implementation>
//│ 'a -> (forall 'a. (bool
//│   where
//│     'a <: 'a))
//│   <:  is_empty:
//│ List[?] -> bool
//│         = [Function: is_empty]



// (* Use the value restriction ! *)

// type option ('a) = None | Some of 'a
class None
class Some[a]: { val: a }
type Option[a] = None | Some[a]
def None = None {}
def Some val = Some { val }
//│ Defined class None
//│ Defined class Some[+a]
//│ Defined type alias Option[+a]
//│ None: None
//│     = None {}
//│ Some: 'a -> (forall 'a, 'val. (Some['val]
//│   where
//│     'a <: 'val
//│     'a <: 'val))
//│     = [Function: Some1]

// let create_hashtbl () = []
def create_hashtbl _ = nil
//│ create_hashtbl: anything -> List[nothing]
//│               = [Function: create_hashtbl]

// let hashtbl_add table key element = (key, element) :: table
def hashtbl_add table key element = cons ((key, element)) table
//│ hashtbl_add: (List['a] & 'a) -> (forall 'a, 'b. ('b -> (forall 'a, 'c. ('c -> (forall 'a, 'b, 'c, 'd. (List[('b, 'c,) | 'd]
//│   where
//│     'a <: List['d]))
//│   where
//│     'a <: List['a]
//│     'a <: List['a]))
//│   where
//│     'a <: List['a]
//│     'a <: List['a]))
//│            = [Function: hashtbl_add]

// let rec find table key = 
//   if nil table then None
//   else if fst (car table) = key then Some (snd (car table))
//   else find (cdr table) key

:RecursiveTypes // needed for this recursive def
rec def find table key =
  if is_empty table then None
  else if eq (head table)._1 key then Some (head table)._2
  else find (tail table) key
//│ find: List[?] -> anything -> (None | Some[nothing])
//│     = [Function: find]
:NoRecursiveTypes

// ^ FIXME type pp error
// :ns
// find

:ng
find(error:List[(int, string)])(unit)
//│ res: None | Some[nothing]

def find_A: forall 'a 'b. List[('a, 'b)] -> 'a -> (None | Some['b])
//│ find_A: List[(anything, 'b,)] -> anything -> (None | Some['b])
//│       = <missing implementation>

// :e // FIXME?
def find_A table key =
  if is_empty table then None
  else if eq (head table)._1 key then Some (head table)._2
  else find_A (tail table) key
//│ (List['a] & 'c) -> (forall 'a, 'c, 'd. ('d -> (forall 'a, 'c, 'd, 'val, 'b. (None | Some['val] | Some['b]
//│   where
//│     'c <: List['a] & List[{_1: 'a}] & List[{_2: 'a & 'val}] & List[('a, 'b,)]
//│     'd <: 'a
//│     'a <: 'val
//│     'c <: List['a] & List[{_1: 'a}] & List[{_2: 'a & 'val}] & List[('a, 'b,)]
//│     'd <: 'a
//│     'a <: 'val
//│     'c <: List['a] & List[{_1: 'a}] & List[{_2: 'a & 'val}] & List[('a, 'b,)]
//│     'd <: 'a
//│     'c <: List['a] & List[{_1: 'a}] & List[{_2: 'a & 'val}] & List[('a, 'b,)]
//│     'd <: 'a
//│     'c <: List['a] & List[{_1: 'a}] & List[{_2: 'a & 'val}] & List[('a, 'b,)]
//│     'd <: 'a))
//│   where
//│     'c <: List['a] & List[{_1: 'a}] & List[{_2: 'a}] & List[('a, 'a,)]
//│     'c <: List['a] & List[{_1: 'a}] & List[{_2: 'a}] & List[('a, 'a,)]))
//│   <:  find_A:
//│ List[(anything, 'b,)] -> anything -> (None | Some['b])
//│       = <no result>
//│         find_A is not implemented

// let nfind table key =
//   begin match find table key with
//   | None -> fun f x -> x
//   | Some n -> n
//   end
def nfind table key =
  let opt = find table key in
  case opt of
  { None -> fun f -> fun x -> x
  | Some -> opt.val
  }
//│ nfind: (List['a] & 'b) -> (forall 'a, 'b. ('a -> (forall 'a, 'b. ('a -> (forall 'c. 'c -> 'c)
//│   where
//│     'b <: List['a]
//│     'a <: 'a))
//│   where
//│     'b <: List['a]
//│     'b <: List['a]))
//│      = [Function: nfind]

// type Int = ['a] ('a -> 'a) -> ('a -> 'a)
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt

// let succ (n:Int) = fun f x -> f (n f x)
def succ (n: ChurchInt) = fun f -> fun x -> f (n f x)
def succ_ n = fun f -> fun x -> f (n f x)
//│ succ: ChurchInt -> (forall 'a, 'b. ((nothing -> anything & 'b) -> (forall 'a, 'b, 'c. ('c -> (forall 'a, 'b, 'c, 'd, 'e. ('e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e))
//│   where
//│     'a <: nothing -> nothing -> anything
//│     'b <: nothing -> anything
//│     'a <: nothing -> nothing -> anything
//│     'b <: nothing -> anything))
//│   where
//│     'a <: nothing -> nothing -> anything
//│     'a <: nothing -> nothing -> anything))
//│     = [Function: succ]
//│ succ_: (nothing -> nothing -> 'a & 'a) -> (forall 'a, 'b. ((nothing -> 'a & 'b) -> (forall 'a, 'b, 'c. ('c -> (forall 'a, 'b, 'c, 'd, 'e. ('e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e))
//│   where
//│     'a <: nothing -> nothing -> 'a
//│     'b <: nothing -> 'a
//│     'a <: nothing -> nothing -> 'a
//│     'b <: nothing -> 'a))
//│   where
//│     'a <: nothing -> nothing -> 'a
//│     'a <: nothing -> nothing -> 'a))
//│      = [Function: succ_]

// let add (n:Int) (m:Int) = n succ m

//:e // due to tapping
def add (n: ChurchInt) (m: ChurchInt) = n succ m
//│ add: ChurchInt -> (forall 'a. (ChurchInt -> (forall 'a. ('b
//│   where
//│     'a <: (ChurchInt -> (forall 'c, 'd. ((nothing -> anything & 'd) -> (forall 'c, 'd, 'e. ('e -> (forall 'c, 'd, 'e, 'f, 'g. ('g
//│   where
//│     'c <: 'd -> 'e -> 'f
//│     'd <: 'f -> 'g))
//│   where
//│     'c <: nothing -> nothing -> anything
//│     'd <: nothing -> anything
//│     'c <: nothing -> nothing -> anything
//│     'd <: nothing -> anything))
//│   where
//│     'c <: nothing -> nothing -> anything
//│     'c <: nothing -> nothing -> anything))) -> ChurchInt -> 'b))
//│   where
//│     'a <: (ChurchInt -> (forall 'c, 'd. ((nothing -> anything & 'd) -> (forall 'c, 'd, 'e. ('e -> (forall 'c, 'd, 'e, 'f, 'g. ('g
//│   where
//│     'c <: 'd -> 'e -> 'f
//│     'd <: 'f -> 'g))
//│   where
//│     'c <: nothing -> nothing -> anything
//│     'd <: nothing -> anything
//│     'c <: nothing -> nothing -> anything
//│     'd <: nothing -> anything))
//│   where
//│     'c <: nothing -> nothing -> anything
//│     'c <: nothing -> nothing -> anything))) -> ChurchInt -> anything
//│     'a <: (ChurchInt -> (forall 'c, 'd. ((nothing -> anything & 'd) -> (forall 'c, 'd, 'e. ('e -> (forall 'c, 'd, 'e, 'f, 'g. ('g
//│   where
//│     'c <: 'd -> 'e -> 'f
//│     'd <: 'f -> 'g))
//│   where
//│     'c <: nothing -> nothing -> anything
//│     'd <: nothing -> anything
//│     'c <: nothing -> nothing -> anything
//│     'd <: nothing -> anything))
//│   where
//│     'c <: nothing -> nothing -> anything
//│     'c <: nothing -> nothing -> anything))) -> ChurchInt -> anything))
//│    = [Function: add]

def add_ n m = n succ_ m
//│ add_: ((forall 'a. (nothing -> nothing -> 'a & 'a) -> (forall 'a, 'b. ((nothing -> 'a & 'b) -> (forall 'a, 'b, 'c. ('c -> (forall 'a, 'b, 'c, 'd, 'e. ('e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e))
//│   where
//│     'a <: nothing -> nothing -> 'a
//│     'b <: nothing -> 'a
//│     'a <: nothing -> nothing -> 'a
//│     'b <: nothing -> 'a))
//│   where
//│     'a <: nothing -> nothing -> 'a
//│     'a <: nothing -> nothing -> 'a))) -> nothing -> 'a & 'f) -> (forall 'f. ('g -> (forall 'f. ('h
//│   where
//│     'f <: (forall 'a. (nothing -> nothing -> 'a & 'a) -> (forall 'a, 'b. ((nothing -> 'a & 'b) -> (forall 'a, 'b, 'c. ('c -> (forall 'a, 'b, 'c, 'd, 'e. ('e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e))
//│   where
//│     'a <: nothing -> nothing -> 'a
//│     'b <: nothing -> 'a
//│     'a <: nothing -> nothing -> 'a
//│     'b <: nothing -> 'a))
//│   where
//│     'a <: nothing -> nothing -> 'a
//│     'a <: nothing -> nothing -> 'a))) -> 'g -> 'h))
//│   where
//│     'f <: (forall 'a. (nothing -> nothing -> 'a & 'a) -> (forall 'a, 'b. ((nothing -> 'a & 'b) -> (forall 'a, 'b, 'c. ('c -> (forall 'a, 'b, 'c, 'd, 'e. ('e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e))
//│   where
//│     'a <: nothing -> nothing -> 'a
//│     'b <: nothing -> 'a
//│     'a <: nothing -> nothing -> 'a
//│     'b <: nothing -> 'a))
//│   where
//│     'a <: nothing -> nothing -> 'a
//│     'a <: nothing -> nothing -> 'a))) -> nothing -> 'a
//│     'f <: (forall 'a. (nothing -> nothing -> 'a & 'a) -> (forall 'a, 'b. ((nothing -> 'a & 'b) -> (forall 'a, 'b, 'c. ('c -> (forall 'a, 'b, 'c, 'd, 'e. ('e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e))
//│   where
//│     'a <: nothing -> nothing -> 'a
//│     'b <: nothing -> 'a
//│     'a <: nothing -> nothing -> 'a
//│     'b <: nothing -> 'a))
//│   where
//│     'a <: nothing -> nothing -> 'a
//│     'a <: nothing -> nothing -> 'a))) -> nothing -> 'a))
//│     = [Function: add_]

// let printInt (n:Int) = print (n (fun x -> x+1) 0)
def printInt (n: ChurchInt) = toString (n (fun x -> x + 1) 0)
def printInt_ n = toString (n (fun x -> x + 1) 0)
//│ printInt: ChurchInt -> (forall 'a. (string
//│   where
//│     'a <: (int -> int) -> 0 -> anything))
//│         = [Function: printInt]
//│ printInt_: ((int -> int) -> 0 -> 'a & 'a) -> (forall 'a. (string
//│   where
//│     'a <: (int -> int) -> 0 -> 'a))
//│          = [Function: printInt_]

// let table = create_hashtbl ()
// let table = hashtbl_add table "one" (fun f x -> f x)
// let table = hashtbl_add table "two" (fun f x -> f (f x))
table = create_hashtbl null
table = hashtbl_add table "one" (fun f -> fun x -> f x)
table = hashtbl_add table "two" (fun f -> fun x -> f (f x))
//│ table: List[nothing]
//│      = Nil {}
//│ table: List[("one", forall 'a. (nothing -> 'a & 'a) -> (forall 'a, 'b. ('b -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'a <: 'b -> 'c))
//│   where
//│     'a <: nothing -> 'a
//│     'a <: nothing -> 'a)),) | 'd]
//│   where
//│     'e <: List['d]
//│      = Cons { head: [ 'one', [Function (anonymous)] ], tail: Nil {} }
//│ table: List[("two", forall 'a. (nothing -> 'a & 'a) -> (forall 'a, 'b. ('b -> (forall 'a, 'b, 'c, 'd. ('d
//│   where
//│     'a <: 'b -> 'c & 'c -> 'd))
//│   where
//│     'a <: nothing -> 'a
//│     'a <: nothing -> 'a)),) | 'e]
//│   where
//│     'f <: List['e]
//│      = Cons {
//│          head: [ 'two', [Function (anonymous)] ],
//│          tail: Cons { head: [ 'one', [Function (anonymous)] ], tail: Nil {} }
//│        }

// let zog =
//   printInt (add (nfind table "one") (nfind table "two"))

// :e // FIXME? failed with genLamBodies but works with quantif extrus
// * Note: this one requires `:DistributeForalls`
:e // due to tapping
zog = printInt (add (nfind table "one") (nfind table "two"))
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?val, ?a, ?b, ?a0, ?a1, ?a2, ?a3, ?c, ?d, ?a4, ?a5, ?e, ?f, ?a6, ?g, ?h, ?i, ?val0, ?val1, ?val2, ?val3. ?c -> (forall ?val, ?a7, ?j, ?a8, ?a9, ?a10, ?a11, ?k, ?a12, ?l, ?a13, ?a14, ?a15, ?a16, ?a, ?b, ?a0, ?a1, ?a2, ?a3, ?c, ?d, ?a4, ?a5, ?e, ?f, ?a6, ?g, ?h, ?i, ?val0, ?val1, ?val2, ?val3, ?m, ?a17, ?a18, ?n, ?o, ?a19, ?p, ?q, ?r, ?val4, ?val5, ?val6, ?val7, ?s, ?a20, ?a21, ?t, ?u, ?a22, ?v, ?w, ?x, ?val8, ?val9, ?val10, ?val11, ?y, ?z. (?y -> (forall ?a23, ?a1, ?a24, ?a25, ?a26, ?a27, ?b1, ?c1, ?val, ?k, ?a, ?b, ?a0, ?a1, ?a2, ?a3, ?c, ?d, ?a4, ?a5, ?e, ?f, ?a6, ?g, ?h, ?i, ?val0, ?val1, ?val2, ?val3, ?y, ?z, ?d1, ?a28, ?a29, ?e1, ?f1, ?a30, ?g1, ?h1, ?i1, ?val12, ?val13, ?val14, ?val15, ?j1. (?c1 -> (forall ?k1. ?k1 -> ?k1) | ?val
//│   where
//│     ?c <: ?d1
//│     ?y <: ?j1
//│     ?c <: ?d1
//│     ?y <: ?j1))
//│   where
//│     ?c <: ?s
//│     ?c <: ?m)) <: (forall ?l1, ?m1, ?n1, ?o1, ?p1, ?q1, ?r1, ?s1, ?t1, ?u1, ?v1, ?w1, ?x1, ?y1, ?z1, ?a2, ?b2, ?c2, ?d2, ?e2, ?f2, ?g2, ?h2, ?i2, ?j2, ?k2, ?l2, ?m2, ?n2, ?o2, ?p2, ?q2, ?r2, ?s2, ?t2, ?u2, ?v2, ?w2, ?x2, ?y2, ?z2, ?a3, ?b3, ?c3, ?d3, ?e3, ?f3, ?g3, ?h3, ?i3, ?j3, ?k3, ?l3, ?m3, ?n3, ?o3, ?p3, ?q3, ?r3, ?s3, ?t3, ?u3, ?v3, ?w3, ?x3, ?y3, ?z3, ?a4, ?b4, ?c4, ?d4, ?e4, ?f4, ?g4, ?h4, ?i4, ?j4, ?k4, ?l4, ?m4, ?n4, ?o4, ?p4, ?q4, ?r4, ?s4, ?t4, ?u4, ?v4, ?w4, ?x4, ?y4, ?z4, ?a5, ?b5, ?c5, ?d5, ?e5, ?f5, ?g5, ?h5, ?i5, ?j5, ?k5, ?l5, ?m5, ?n5, ?o5, ?p5, ?q5, ?r5, ?s5, ?t5, ?u5, ?v5. ?h3) -> ?w5` took too many steps and ran out of fuel (5000)
//│ ║  l.379: 	zog = printInt (add (nfind table "one") (nfind table "two"))
//│ ║         	                     ^^^^^^^^^^^
//│ ╟──  + (list<> & {List#a: mut ..'a156_17894'})
//│ ╟──  + List['a156_17894']
//│ ║  l.40: 	def nil: List['a]
//│ ║        	         ^^^^^^^^
//│ ╟──  + ‹∀ 0. List['a156']›
//│ ║  l.40: 	def nil: List['a]
//│ ║        	         ^^^^^^^^
//│ ╟──  + ‹∀ 0. List['a156']›
//│ ║  l.40: 	def nil: List['a]
//│ ║        	         ^^^^^^^^
//│ ╟──  + ‹∀ 0. List['a156']›
//│ ║  l.109: 	def create_hashtbl _ = nil
//│ ║         	                       ^^^
//│ ╟──  + ‹∀ 0. List['a156']›
//│ ║  l.346: 	table = create_hashtbl null
//│ ║         	        ^^^^^^^^^^^^^^^^^^^
//│ ╟──  + α1584_17893'
//│ ║  l.346: 	table = create_hashtbl null
//│ ║         	        ^^^^^^^^^^^^^^^^^^^
//│ ╟──  + ‹∀ 0. α1584'›
//│ ║  l.346: 	table = create_hashtbl null
//│ ║         	        ^^^^^^^^^^^^^^^^^^^
//│ ╟──  + ‹∀ 0. α1584'›
//│ ║  l.346: 	table = create_hashtbl null
//│ ║         	        ^^^^^^^^^^^^^^^^^^^
//│ ╟──  + ‹∀ 0. α1584'›
//│ ║  l.347: 	table = hashtbl_add table "one" (fun f -> fun x -> f x)
//│ ║         	                    ^^^^^
//│ ╟──  + ‹∀ 0. α1584'›
//│ ╟──  + α289_17836'
//│ ╟──  - {List#a: mut ..α53_17885'}
//│ ╟──  - (list<> & {List#a: mut ..α53_17885'})
//│ ╟──  - List[α53_17885']
//│ ║  l.17: 	def cons[a]: a -> List[a] -> List[a]
//│ ╙──      	                  ^^^^^^^
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?val, ?a, ?b, ?a0, ?a1, ?a2, ?a3, ?c, ?d, ?a4, ?a5, ?e, ?f, ?a6, ?g, ?h, ?i, ?val0, ?val1, ?val2, ?val3. ?c -> (forall ?val, ?a7, ?j, ?a8, ?a9, ?a10, ?a11, ?k, ?a12, ?l, ?a13, ?a14, ?a15, ?a16, ?a, ?b, ?a0, ?a1, ?a2, ?a3, ?c, ?d, ?a4, ?a5, ?e, ?f, ?a6, ?g, ?h, ?i, ?val0, ?val1, ?val2, ?val3, ?m, ?a17, ?a18, ?n, ?o, ?a19, ?p, ?q, ?r, ?val4, ?val5, ?val6, ?val7, ?s, ?a20, ?a21, ?t, ?u, ?a22, ?v, ?w, ?x, ?val8, ?val9, ?val10, ?val11, ?y, ?z. (?y -> (forall ?a23, ?a1, ?a24, ?a25, ?a26, ?a27, ?b1, ?c1, ?val, ?k, ?a, ?b, ?a0, ?a1, ?a2, ?a3, ?c, ?d, ?a4, ?a5, ?e, ?f, ?a6, ?g, ?h, ?i, ?val0, ?val1, ?val2, ?val3, ?y, ?z, ?d1, ?a28, ?a29, ?e1, ?f1, ?a30, ?g1, ?h1, ?i1, ?val12, ?val13, ?val14, ?val15, ?j1. (?c1 -> (forall ?k1. ?k1 -> ?k1) | ?val
//│   where
//│     ?c <: ?d1
//│     ?y <: ?j1
//│     ?c <: ?d1
//│     ?y <: ?j1))
//│   where
//│     ?c <: ?s
//│     ?c <: ?m)) <: (forall ?l1, ?m1, ?n1, ?o1, ?p1, ?q1, ?r1, ?s1, ?t1, ?u1, ?v1, ?w1, ?x1, ?y1, ?z1, ?a2, ?b2, ?c2, ?d2, ?e2, ?f2, ?g2, ?h2, ?i2, ?j2, ?k2, ?l2, ?m2, ?n2, ?o2, ?p2, ?q2, ?r2, ?s2, ?t2, ?u2, ?v2, ?w2, ?x2, ?y2, ?z2, ?a3, ?b3, ?c3, ?d3, ?e3, ?f3, ?g3, ?h3, ?i3, ?j3, ?k3, ?l3, ?m3, ?n3, ?o3, ?p3, ?q3, ?r3, ?s3, ?t3, ?u3, ?v3, ?w3, ?x3, ?y3, ?z3, ?a4, ?b4, ?c4, ?d4, ?e4, ?f4, ?g4, ?h4, ?i4, ?j4, ?k4, ?l4, ?m4, ?n4, ?o4, ?p4, ?q4, ?r4, ?s4, ?t4, ?u4, ?v4, ?w4, ?x4, ?y4, ?z4, ?a5, ?b5, ?c5, ?d5, ?e5, ?f5, ?g5, ?h5, ?i5, ?j5, ?k5, ?l5, ?m5, ?n5, ?o5, ?p5, ?q5, ?r5, ?s5, ?t5, ?u5, ?v5. ?h3) -> ?w5` took too many steps and ran out of fuel (5000)
//│ ║  l.379: 	zog = printInt (add (nfind table "one") (nfind table "two"))
//│ ║         	                                         ^^^^^^^^^^^
//│ ╟──  + (list<> & {List#a: mut ..'a156_31878'})
//│ ╟──  + List['a156_31878']
//│ ║  l.40: 	def nil: List['a]
//│ ║        	         ^^^^^^^^
//│ ╟──  + ‹∀ 0. List['a156']›
//│ ║  l.40: 	def nil: List['a]
//│ ║        	         ^^^^^^^^
//│ ╟──  + ‹∀ 0. List['a156']›
//│ ║  l.40: 	def nil: List['a]
//│ ║        	         ^^^^^^^^
//│ ╟──  + ‹∀ 0. List['a156']›
//│ ║  l.109: 	def create_hashtbl _ = nil
//│ ║         	                       ^^^
//│ ╟──  + ‹∀ 0. List['a156']›
//│ ║  l.346: 	table = create_hashtbl null
//│ ║         	        ^^^^^^^^^^^^^^^^^^^
//│ ╟──  + α1584_31877'
//│ ║  l.346: 	table = create_hashtbl null
//│ ║         	        ^^^^^^^^^^^^^^^^^^^
//│ ╟──  + ‹∀ 0. α1584'›
//│ ║  l.346: 	table = create_hashtbl null
//│ ║         	        ^^^^^^^^^^^^^^^^^^^
//│ ╟──  + ‹∀ 0. α1584'›
//│ ║  l.346: 	table = create_hashtbl null
//│ ║         	        ^^^^^^^^^^^^^^^^^^^
//│ ╟──  + ‹∀ 0. α1584'›
//│ ║  l.347: 	table = hashtbl_add table "one" (fun f -> fun x -> f x)
//│ ║         	                    ^^^^^
//│ ╟──  + ‹∀ 0. α1584'›
//│ ╟──  + α289_31820'
//│ ╟──  - {List#a: mut ..α53_31869'}
//│ ╟──  - (list<> & {List#a: mut ..α53_31869'})
//│ ╟──  - List[α53_31869']
//│ ║  l.17: 	def cons[a]: a -> List[a] -> List[a]
//│ ╙──      	                  ^^^^^^^
//│ zog: string
//│   where
//│     'a <: (int -> int) -> 0 -> anything
//│    = '0'

// Repro:

// :e // FIXME? failed with genLamBodies but works with quantif extrus
//:e // due to tapping
:e // FIXME? refreshing-extr
a = add (nfind table "one")
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?val, ?a, ?b, ?a0, ?a1, ?a2, ?a3, ?c, ?d, ?a4, ?a5, ?e, ?f, ?a6, ?g, ?h, ?i, ?val0, ?val1, ?val2, ?val3. ?c -> (forall ?val, ?a7, ?j, ?a8, ?a9, ?a10, ?a11, ?k, ?a12, ?l, ?a13, ?a14, ?a15, ?a16, ?a, ?b, ?a0, ?a1, ?a2, ?a3, ?c, ?d, ?a4, ?a5, ?e, ?f, ?a6, ?g, ?h, ?i, ?val0, ?val1, ?val2, ?val3, ?m, ?a17, ?a18, ?n, ?o, ?a19, ?p, ?q, ?r, ?val4, ?val5, ?val6, ?val7, ?s, ?a20, ?a21, ?t, ?u, ?a22, ?v, ?w, ?x, ?val8, ?val9, ?val10, ?val11, ?y, ?z. (?y -> (forall ?a23, ?a1, ?a24, ?a25, ?a26, ?a27, ?b1, ?c1, ?val, ?k, ?a, ?b, ?a0, ?a1, ?a2, ?a3, ?c, ?d, ?a4, ?a5, ?e, ?f, ?a6, ?g, ?h, ?i, ?val0, ?val1, ?val2, ?val3, ?y, ?z, ?d1, ?a28, ?a29, ?e1, ?f1, ?a30, ?g1, ?h1, ?i1, ?val12, ?val13, ?val14, ?val15, ?j1. (?c1 -> (forall ?k1. ?k1 -> ?k1) | ?val
//│   where
//│     ?c <: ?d1
//│     ?y <: ?j1
//│     ?c <: ?d1
//│     ?y <: ?j1))
//│   where
//│     ?c <: ?s
//│     ?c <: ?m)) <: (forall ?l1, ?m1, ?n1, ?o1, ?p1, ?q1, ?r1, ?s1, ?t1, ?u1, ?v1, ?w1, ?x1, ?y1, ?z1, ?a2, ?b2, ?c2, ?d2, ?e2, ?f2, ?g2, ?h2, ?i2, ?j2, ?k2, ?l2, ?m2, ?n2, ?o2, ?p2, ?q2, ?r2, ?s2, ?t2, ?u2, ?v2, ?w2, ?x2, ?y2, ?z2, ?a3, ?b3, ?c3, ?d3, ?e3, ?f3, ?g3, ?h3, ?i3, ?j3, ?k3, ?l3, ?m3, ?n3, ?o3, ?p3, ?q3, ?r3, ?s3, ?t3, ?u3, ?v3, ?w3, ?x3, ?y3, ?z3, ?a4, ?b4, ?c4, ?d4, ?e4, ?f4, ?g4, ?h4, ?i4, ?j4, ?k4, ?l4, ?m4, ?n4, ?o4, ?p4, ?q4, ?r4, ?s4, ?t4, ?u4, ?v4, ?w4, ?x4, ?y4, ?z4, ?a5, ?b5, ?c5, ?d5, ?e5, ?f5, ?g5, ?h5, ?i5, ?j5, ?k5, ?l5, ?m5, ?n5, ?o5, ?p5, ?q5, ?r5, ?s5, ?t5, ?u5, ?v5. ?h3) -> ?w5` took too many steps and ran out of fuel (5000)
//│ ║  l.482: 	a = add (nfind table "one")
//│ ║         	         ^^^^^^^^^^^
//│ ╟──  + (list<> & {List#a: mut ..'a156_47534'})
//│ ╟──  + List['a156_47534']
//│ ║  l.40: 	def nil: List['a]
//│ ║        	         ^^^^^^^^
//│ ╟──  + ‹∀ 0. List['a156']›
//│ ║  l.40: 	def nil: List['a]
//│ ║        	         ^^^^^^^^
//│ ╟──  + ‹∀ 0. List['a156']›
//│ ║  l.40: 	def nil: List['a]
//│ ║        	         ^^^^^^^^
//│ ╟──  + ‹∀ 0. List['a156']›
//│ ║  l.109: 	def create_hashtbl _ = nil
//│ ║         	                       ^^^
//│ ╟──  + ‹∀ 0. List['a156']›
//│ ║  l.346: 	table = create_hashtbl null
//│ ║         	        ^^^^^^^^^^^^^^^^^^^
//│ ╟──  + α1584_47533'
//│ ║  l.346: 	table = create_hashtbl null
//│ ║         	        ^^^^^^^^^^^^^^^^^^^
//│ ╟──  + ‹∀ 0. α1584'›
//│ ║  l.346: 	table = create_hashtbl null
//│ ║         	        ^^^^^^^^^^^^^^^^^^^
//│ ╟──  + ‹∀ 0. α1584'›
//│ ║  l.346: 	table = create_hashtbl null
//│ ║         	        ^^^^^^^^^^^^^^^^^^^
//│ ╟──  + ‹∀ 0. α1584'›
//│ ║  l.347: 	table = hashtbl_add table "one" (fun f -> fun x -> f x)
//│ ║         	                    ^^^^^
//│ ╟──  + ‹∀ 0. α1584'›
//│ ╟──  + α289_47476'
//│ ╟──  - {List#a: mut ..α53_47525'}
//│ ╟──  - (list<> & {List#a: mut ..α53_47525'})
//│ ╟──  - List[α53_47525']
//│ ║  l.17: 	def cons[a]: a -> List[a] -> List[a]
//│ ╙──      	                  ^^^^^^^
//│ a: ChurchInt -> (forall 'a. ('b
//│   where
//│     'a <: (ChurchInt -> (forall 'c, 'd. ((nothing -> anything & 'd) -> (forall 'c, 'd, 'e. ('e -> (forall 'c, 'd, 'e, 'f, 'g. ('g
//│   where
//│     'c <: 'd -> 'e -> 'f
//│     'd <: 'f -> 'g))
//│   where
//│     'c <: nothing -> nothing -> anything
//│     'd <: nothing -> anything
//│     'c <: nothing -> nothing -> anything
//│     'd <: nothing -> anything))
//│   where
//│     'c <: nothing -> nothing -> anything
//│     'c <: nothing -> nothing -> anything))) -> ChurchInt -> 'b))
//│   where
//│     'a <: (ChurchInt -> (forall 'c, 'd. ((nothing -> anything & 'd) -> (forall 'c, 'd, 'e. ('e -> (forall 'c, 'd, 'e, 'f, 'g. ('g
//│   where
//│     'c <: 'd -> 'e -> 'f
//│     'd <: 'f -> 'g))
//│   where
//│     'c <: nothing -> nothing -> anything
//│     'd <: nothing -> anything
//│     'c <: nothing -> nothing -> anything
//│     'd <: nothing -> anything))
//│   where
//│     'c <: nothing -> nothing -> anything
//│     'c <: nothing -> nothing -> anything))) -> ChurchInt -> anything
//│     'a <: (ChurchInt -> (forall 'c, 'd. ((nothing -> anything & 'd) -> (forall 'c, 'd, 'e. ('e -> (forall 'c, 'd, 'e, 'f, 'g. ('g
//│   where
//│     'c <: 'd -> 'e -> 'f
//│     'd <: 'f -> 'g))
//│   where
//│     'c <: nothing -> nothing -> anything
//│     'd <: nothing -> anything
//│     'c <: nothing -> nothing -> anything
//│     'd <: nothing -> anything))
//│   where
//│     'c <: nothing -> nothing -> anything
//│     'c <: nothing -> nothing -> anything))) -> ChurchInt -> anything
//│  = [Function (anonymous)]

:e // FIXME? refreshing-extr
b = (nfind table "two")
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?val, ?a, ?b, ?a0, ?a1, ?a2, ?a3, ?c, ?d, ?a4, ?a5, ?e, ?f, ?a6, ?g, ?h, ?i, ?val0, ?val1, ?val2, ?val3. ?c -> (forall ?val, ?a7, ?j, ?a8, ?a9, ?a10, ?a11, ?k, ?a12, ?l, ?a13, ?a14, ?a15, ?a16, ?a, ?b, ?a0, ?a1, ?a2, ?a3, ?c, ?d, ?a4, ?a5, ?e, ?f, ?a6, ?g, ?h, ?i, ?val0, ?val1, ?val2, ?val3, ?m, ?a17, ?a18, ?n, ?o, ?a19, ?p, ?q, ?r, ?val4, ?val5, ?val6, ?val7, ?s, ?a20, ?a21, ?t, ?u, ?a22, ?v, ?w, ?x, ?val8, ?val9, ?val10, ?val11, ?y, ?z. (?y -> (forall ?a23, ?a1, ?a24, ?a25, ?a26, ?a27, ?b1, ?c1, ?val, ?k, ?a, ?b, ?a0, ?a1, ?a2, ?a3, ?c, ?d, ?a4, ?a5, ?e, ?f, ?a6, ?g, ?h, ?i, ?val0, ?val1, ?val2, ?val3, ?y, ?z, ?d1, ?a28, ?a29, ?e1, ?f1, ?a30, ?g1, ?h1, ?i1, ?val12, ?val13, ?val14, ?val15, ?j1. (?c1 -> (forall ?k1. ?k1 -> ?k1) | ?val
//│   where
//│     ?c <: ?d1
//│     ?y <: ?j1
//│     ?c <: ?d1
//│     ?y <: ?j1))
//│   where
//│     ?c <: ?s
//│     ?c <: ?m)) <: (forall ?l1, ?m1, ?n1, ?o1, ?p1, ?q1, ?r1, ?s1, ?t1, ?u1, ?v1, ?w1, ?x1, ?y1, ?z1, ?a2, ?b2, ?c2, ?d2, ?e2, ?f2, ?g2, ?h2, ?i2, ?j2, ?k2, ?l2, ?m2, ?n2, ?o2, ?p2, ?q2, ?r2, ?s2, ?t2, ?u2, ?v2, ?w2, ?x2, ?y2, ?z2, ?a3, ?b3, ?c3, ?d3, ?e3, ?f3, ?g3, ?h3, ?i3, ?j3, ?k3, ?l3, ?m3, ?n3, ?o3, ?p3, ?q3, ?r3, ?s3, ?t3, ?u3, ?v3, ?w3, ?x3, ?y3, ?z3, ?a4, ?b4, ?c4, ?d4, ?e4, ?f4, ?g4, ?h4, ?i4, ?j4, ?k4, ?l4, ?m4, ?n4, ?o4, ?p4, ?q4, ?r4, ?s4, ?t4, ?u4, ?v4, ?w4, ?x4, ?y4, ?z4, ?a5, ?b5, ?c5, ?d5, ?e5, ?f5, ?g5, ?h5, ?i5, ?j5, ?k5, ?l5, ?m5, ?n5, ?o5, ?p5, ?q5, ?r5, ?s5, ?t5, ?u5, ?v5. ?h3) -> ?w5` took too many steps and ran out of fuel (5000)
//│ ║  l.571: 	b = (nfind table "two")
//│ ║         	     ^^^^^^^^^^^
//│ ╟──  + (list<> & {List#a: mut ..'a156_61571'})
//│ ╟──  + List['a156_61571']
//│ ║  l.40: 	def nil: List['a]
//│ ║        	         ^^^^^^^^
//│ ╟──  + ‹∀ 0. List['a156']›
//│ ║  l.40: 	def nil: List['a]
//│ ║        	         ^^^^^^^^
//│ ╟──  + ‹∀ 0. List['a156']›
//│ ║  l.40: 	def nil: List['a]
//│ ║        	         ^^^^^^^^
//│ ╟──  + ‹∀ 0. List['a156']›
//│ ║  l.109: 	def create_hashtbl _ = nil
//│ ║         	                       ^^^
//│ ╟──  + ‹∀ 0. List['a156']›
//│ ║  l.346: 	table = create_hashtbl null
//│ ║         	        ^^^^^^^^^^^^^^^^^^^
//│ ╟──  + α1584_61570'
//│ ║  l.346: 	table = create_hashtbl null
//│ ║         	        ^^^^^^^^^^^^^^^^^^^
//│ ╟──  + ‹∀ 0. α1584'›
//│ ║  l.346: 	table = create_hashtbl null
//│ ║         	        ^^^^^^^^^^^^^^^^^^^
//│ ╟──  + ‹∀ 0. α1584'›
//│ ║  l.346: 	table = create_hashtbl null
//│ ║         	        ^^^^^^^^^^^^^^^^^^^
//│ ╟──  + ‹∀ 0. α1584'›
//│ ║  l.347: 	table = hashtbl_add table "one" (fun f -> fun x -> f x)
//│ ║         	                    ^^^^^
//│ ╟──  + ‹∀ 0. α1584'›
//│ ╟──  + α289_61513'
//│ ╟──  - {List#a: mut ..α53_61562'}
//│ ╟──  - (list<> & {List#a: mut ..α53_61562'})
//│ ╟──  - List[α53_61562']
//│ ║  l.17: 	def cons[a]: a -> List[a] -> List[a]
//│ ╙──      	                  ^^^^^^^
//│ b: error
//│  = [Function (anonymous)]

// * Note: this one requires `:DistributeForalls`
// :d
//:e // due to tapping
a b
//│ res: 'a
//│   where
//│     'b <: (ChurchInt -> (forall 'c, 'd. ((nothing -> anything & 'd) -> (forall 'c, 'd, 'e. ('e -> (forall 'c, 'd, 'e, 'f, 'g. ('g
//│   where
//│     'c <: 'd -> 'e -> 'f
//│     'd <: 'f -> 'g))
//│   where
//│     'c <: nothing -> nothing -> anything
//│     'd <: nothing -> anything
//│     'c <: nothing -> nothing -> anything
//│     'd <: nothing -> anything))
//│   where
//│     'c <: nothing -> nothing -> anything
//│     'c <: nothing -> nothing -> anything))) -> ChurchInt -> 'a
//│    = [Function (anonymous)]

:e // FIXME? refreshing-extr
//:e // due to tapping
zog_ = printInt_ (add_ (nfind table "one") (nfind table "two"))
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?val, ?a, ?b, ?a0, ?a1, ?a2, ?a3, ?c, ?d, ?a4, ?a5, ?e, ?f, ?a6, ?g, ?h, ?i, ?val0, ?val1, ?val2, ?val3. ?c -> (forall ?val, ?a7, ?j, ?a8, ?a9, ?a10, ?a11, ?k, ?a12, ?l, ?a13, ?a14, ?a15, ?a16, ?a, ?b, ?a0, ?a1, ?a2, ?a3, ?c, ?d, ?a4, ?a5, ?e, ?f, ?a6, ?g, ?h, ?i, ?val0, ?val1, ?val2, ?val3, ?m, ?a17, ?a18, ?n, ?o, ?a19, ?p, ?q, ?r, ?val4, ?val5, ?val6, ?val7, ?s, ?a20, ?a21, ?t, ?u, ?a22, ?v, ?w, ?x, ?val8, ?val9, ?val10, ?val11, ?y, ?z. (?y -> (forall ?a23, ?a1, ?a24, ?a25, ?a26, ?a27, ?b1, ?c1, ?val, ?k, ?a, ?b, ?a0, ?a1, ?a2, ?a3, ?c, ?d, ?a4, ?a5, ?e, ?f, ?a6, ?g, ?h, ?i, ?val0, ?val1, ?val2, ?val3, ?y, ?z, ?d1, ?a28, ?a29, ?e1, ?f1, ?a30, ?g1, ?h1, ?i1, ?val12, ?val13, ?val14, ?val15, ?j1. (?c1 -> (forall ?k1. ?k1 -> ?k1) | ?val
//│   where
//│     ?c <: ?d1
//│     ?y <: ?j1
//│     ?c <: ?d1
//│     ?y <: ?j1))
//│   where
//│     ?c <: ?s
//│     ?c <: ?m)) <: (forall ?l1, ?m1, ?n1, ?o1, ?p1, ?q1, ?r1, ?s1, ?t1, ?u1, ?v1, ?w1, ?x1, ?y1, ?z1, ?a2, ?b2, ?c2, ?d2, ?e2, ?f2, ?g2, ?h2, ?i2, ?j2, ?k2, ?l2, ?m2, ?n2, ?o2, ?p2, ?q2, ?r2, ?s2, ?t2, ?u2, ?v2, ?w2, ?x2, ?y2, ?z2, ?a3, ?b3, ?c3, ?d3, ?e3, ?f3, ?g3, ?h3, ?i3, ?j3, ?k3, ?l3, ?m3, ?n3, ?o3, ?p3, ?q3, ?r3, ?s3, ?t3, ?u3, ?v3, ?w3, ?x3, ?y3, ?z3, ?a4, ?b4, ?c4, ?d4, ?e4, ?f4, ?g4, ?h4, ?i4, ?j4, ?k4, ?l4, ?m4, ?n4, ?o4, ?p4, ?q4, ?r4, ?s4, ?t4, ?u4, ?v4, ?w4, ?x4, ?y4, ?z4, ?a5, ?b5, ?c5, ?d5, ?e5, ?f5, ?g5, ?h5, ?i5, ?j5, ?k5, ?l5, ?m5, ?n5, ?o5, ?p5, ?q5, ?r5, ?s5, ?t5, ?u5, ?v5. ?h3) -> ?w5` took too many steps and ran out of fuel (5000)
//│ ║  l.643: 	zog_ = printInt_ (add_ (nfind table "one") (nfind table "two"))
//│ ║         	                        ^^^^^^^^^^^
//│ ╟──  + (list<> & {List#a: mut ..'a156_76669'})
//│ ╟──  + List['a156_76669']
//│ ║  l.40: 	def nil: List['a]
//│ ║        	         ^^^^^^^^
//│ ╟──  + ‹∀ 0. List['a156']›
//│ ║  l.40: 	def nil: List['a]
//│ ║        	         ^^^^^^^^
//│ ╟──  + ‹∀ 0. List['a156']›
//│ ║  l.40: 	def nil: List['a]
//│ ║        	         ^^^^^^^^
//│ ╟──  + ‹∀ 0. List['a156']›
//│ ║  l.109: 	def create_hashtbl _ = nil
//│ ║         	                       ^^^
//│ ╟──  + ‹∀ 0. List['a156']›
//│ ║  l.346: 	table = create_hashtbl null
//│ ║         	        ^^^^^^^^^^^^^^^^^^^
//│ ╟──  + α1584_76668'
//│ ║  l.346: 	table = create_hashtbl null
//│ ║         	        ^^^^^^^^^^^^^^^^^^^
//│ ╟──  + ‹∀ 0. α1584'›
//│ ║  l.346: 	table = create_hashtbl null
//│ ║         	        ^^^^^^^^^^^^^^^^^^^
//│ ╟──  + ‹∀ 0. α1584'›
//│ ║  l.346: 	table = create_hashtbl null
//│ ║         	        ^^^^^^^^^^^^^^^^^^^
//│ ╟──  + ‹∀ 0. α1584'›
//│ ║  l.347: 	table = hashtbl_add table "one" (fun f -> fun x -> f x)
//│ ║         	                    ^^^^^
//│ ╟──  + ‹∀ 0. α1584'›
//│ ╟──  + α289_76611'
//│ ╟──  - {List#a: mut ..α53_76660'}
//│ ╟──  - (list<> & {List#a: mut ..α53_76660'})
//│ ╟──  - List[α53_76660']
//│ ║  l.17: 	def cons[a]: a -> List[a] -> List[a]
//│ ╙──      	                  ^^^^^^^
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?val, ?a, ?b, ?a0, ?a1, ?a2, ?a3, ?c, ?d, ?a4, ?a5, ?e, ?f, ?a6, ?g, ?h, ?i, ?val0, ?val1, ?val2, ?val3. ?c -> (forall ?val, ?a7, ?j, ?a8, ?a9, ?a10, ?a11, ?k, ?a12, ?l, ?a13, ?a14, ?a15, ?a16, ?a, ?b, ?a0, ?a1, ?a2, ?a3, ?c, ?d, ?a4, ?a5, ?e, ?f, ?a6, ?g, ?h, ?i, ?val0, ?val1, ?val2, ?val3, ?m, ?a17, ?a18, ?n, ?o, ?a19, ?p, ?q, ?r, ?val4, ?val5, ?val6, ?val7, ?s, ?a20, ?a21, ?t, ?u, ?a22, ?v, ?w, ?x, ?val8, ?val9, ?val10, ?val11, ?y, ?z. (?y -> (forall ?a23, ?a1, ?a24, ?a25, ?a26, ?a27, ?b1, ?c1, ?val, ?k, ?a, ?b, ?a0, ?a1, ?a2, ?a3, ?c, ?d, ?a4, ?a5, ?e, ?f, ?a6, ?g, ?h, ?i, ?val0, ?val1, ?val2, ?val3, ?y, ?z, ?d1, ?a28, ?a29, ?e1, ?f1, ?a30, ?g1, ?h1, ?i1, ?val12, ?val13, ?val14, ?val15, ?j1. (?c1 -> (forall ?k1. ?k1 -> ?k1) | ?val
//│   where
//│     ?c <: ?d1
//│     ?y <: ?j1
//│     ?c <: ?d1
//│     ?y <: ?j1))
//│   where
//│     ?c <: ?s
//│     ?c <: ?m)) <: (forall ?l1, ?m1, ?n1, ?o1, ?p1, ?q1, ?r1, ?s1, ?t1, ?u1, ?v1, ?w1, ?x1, ?y1, ?z1, ?a2, ?b2, ?c2, ?d2, ?e2, ?f2, ?g2, ?h2, ?i2, ?j2, ?k2, ?l2, ?m2, ?n2, ?o2, ?p2, ?q2, ?r2, ?s2, ?t2, ?u2, ?v2, ?w2, ?x2, ?y2, ?z2, ?a3, ?b3, ?c3, ?d3, ?e3, ?f3, ?g3, ?h3, ?i3, ?j3, ?k3, ?l3, ?m3, ?n3, ?o3, ?p3, ?q3, ?r3, ?s3, ?t3, ?u3, ?v3, ?w3, ?x3, ?y3, ?z3, ?a4, ?b4, ?c4, ?d4, ?e4, ?f4, ?g4, ?h4, ?i4, ?j4, ?k4, ?l4, ?m4, ?n4, ?o4, ?p4, ?q4, ?r4, ?s4, ?t4, ?u4, ?v4, ?w4, ?x4, ?y4, ?z4, ?a5, ?b5, ?c5, ?d5, ?e5, ?f5, ?g5, ?h5, ?i5, ?j5, ?k5, ?l5, ?m5, ?n5, ?o5, ?p5, ?q5, ?r5, ?s5, ?t5, ?u5, ?v5. ?h3) -> ?w5` took too many steps and ran out of fuel (5000)
//│ ║  l.643: 	zog_ = printInt_ (add_ (nfind table "one") (nfind table "two"))
//│ ║         	                                            ^^^^^^^^^^^
//│ ╟──  + (list<> & {List#a: mut ..'a156_90675'})
//│ ╟──  + List['a156_90675']
//│ ║  l.40: 	def nil: List['a]
//│ ║        	         ^^^^^^^^
//│ ╟──  + ‹∀ 0. List['a156']›
//│ ║  l.40: 	def nil: List['a]
//│ ║        	         ^^^^^^^^
//│ ╟──  + ‹∀ 0. List['a156']›
//│ ║  l.40: 	def nil: List['a]
//│ ║        	         ^^^^^^^^
//│ ╟──  + ‹∀ 0. List['a156']›
//│ ║  l.109: 	def create_hashtbl _ = nil
//│ ║         	                       ^^^
//│ ╟──  + ‹∀ 0. List['a156']›
//│ ║  l.346: 	table = create_hashtbl null
//│ ║         	        ^^^^^^^^^^^^^^^^^^^
//│ ╟──  + α1584_90674'
//│ ║  l.346: 	table = create_hashtbl null
//│ ║         	        ^^^^^^^^^^^^^^^^^^^
//│ ╟──  + ‹∀ 0. α1584'›
//│ ║  l.346: 	table = create_hashtbl null
//│ ║         	        ^^^^^^^^^^^^^^^^^^^
//│ ╟──  + ‹∀ 0. α1584'›
//│ ║  l.346: 	table = create_hashtbl null
//│ ║         	        ^^^^^^^^^^^^^^^^^^^
//│ ╟──  + ‹∀ 0. α1584'›
//│ ║  l.347: 	table = hashtbl_add table "one" (fun f -> fun x -> f x)
//│ ║         	                    ^^^^^
//│ ╟──  + ‹∀ 0. α1584'›
//│ ╟──  + α289_90617'
//│ ╟──  - {List#a: mut ..α53_90666'}
//│ ╟──  - (list<> & {List#a: mut ..α53_90666'})
//│ ╟──  - List[α53_90666']
//│ ║  l.17: 	def cons[a]: a -> List[a] -> List[a]
//│ ╙──      	                  ^^^^^^^
//│ zog_: string
//│   where
//│     'a <: (int -> int) -> 0 -> anything
//│     = '0'

