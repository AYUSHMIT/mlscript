:GeneralizeCurriedFunctions

// ============ Dummy classes to represent the types in the examples ============

class List[a]
  method Head: a
  method Tail: List[a]
//│ Defined class List[+a]
//│ Declared List.Head: List['a] -> 'a
//│ Declared List.Tail: List['a] -> List['a]

class Cons[a]: List[a] & { head: a; tail: List[a] }
  method Head = this.head
  method Tail = this.tail
def cons[a]: a -> List[a] -> List[a]
def cons head tail = Cons { head; tail }
//│ Defined class Cons[+a]
//│ Defined Cons.Head: Cons['a] -> 'a
//│ Defined Cons.Tail: Cons['a] -> List['a]
//│ cons: 'a -> List['a] -> List['a]
//│     = <missing implementation>
//│ 'b -> (forall 'a, 'tail. (List['a] & 'tail) -> (Cons['a | 'b] with {head: 'b, tail: 'tail}))
//│   <:  cons:
//│ 'a -> List['a] -> List['a]
//│     = [Function: cons]

class Nil[a]: List[a]
  method Head = error
  method Tail = this
def nil: List['a]
def nil = Nil {}
//│ Defined class Nil[+a]
//│ Defined Nil.Head: Nil[?] -> nothing
//│ Defined Nil.Tail: (Nil['a] & 'this) -> (Nil['a] & 'this)
//│ nil: List[nothing]
//│    = <missing implementation>
//│ Nil[nothing]
//│   <:  nil:
//│ List[nothing]
//│    = Nil {}

// ============ Type signatures for functions used in the examples ============

def head: forall 'a. List['a] -> 'a
def head l = l.Head
//│ head: List['a] -> 'a
//│     = <missing implementation>
//│ List['a] -> 'a
//│   <:  head:
//│ List['a] -> 'a
//│     = [Function: head]

def tail: forall 'a. List['a] -> List['a]
def tail l = l.Tail
//│ tail: List['a] -> List['a]
//│     = <missing implementation>
//│ List['a] -> List['a]
//│   <:  tail:
//│ List['a] -> List['a]
//│     = [Function: tail]

def is_empty: forall 'a. List['a] -> bool
def is_empty l = eq l nil
//│ is_empty: List[?] -> bool
//│         = <missing implementation>
//│ anything -> bool
//│   <:  is_empty:
//│ List[?] -> bool
//│         = [Function: is_empty]



// (* Use the value restriction ! *)

// type option ('a) = None | Some of 'a
class None
class Some[a]: { val: a }
type Option[a] = None | Some[a]
def None = None {}
def Some val = Some { val }
//│ Defined class None
//│ Defined class Some[+a]
//│ Defined type alias Option[+a]
//│ None: None
//│     = None {}
//│ Some: 'val -> Some['val]
//│     = [Function: Some1]

// let create_hashtbl () = []
def create_hashtbl _ = nil
//│ create_hashtbl: anything -> List[nothing]
//│               = [Function: create_hashtbl]

// let hashtbl_add table key element = (key, element) :: table
def hashtbl_add table key element = cons ((key, element)) table
//│ hashtbl_add: 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd. ('d -> List[('b, 'd,) | 'c]
//│   where
//│     'a <: List['c])))
//│            = [Function: hashtbl_add]

// let rec find table key = 
//   if nil table then None
//   else if fst (car table) = key then Some (snd (car table))
//   else find (cdr table) key
rec def find table key =
  if is_empty table then None
  else if eq (head table)._1 key then Some (head table)._2
  else find (tail table) key
//│ find: 'a -> (forall 'a, 'val, 'b, 'c, 'd. ('c -> (None | Some['val] | 'd)
//│   where
//│     'a <: List['a] & List[{_1: 'a}] & List[{_2: 'val}]
//│     'b <: 'c -> 'd))
//│     = [Function: find]


// let nfind table key =
//   begin match find table key with
//   | None -> fun f x -> x
//   | Some n -> n
//   end
// FIXME?
def nfind table key =
  let opt = find table key in
  case opt of
  { None -> fun f -> fun x -> x
  | Some -> opt.val
  }
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: ?b -> ?c` exceeded recursion depth limit (400)
//│ ║  l.123: 	  let opt = find table key in
//│ ║         	            ^^^^^^^^^^^^^^
//│ ╟── while constraining:  List['a2013'''']  <!<  List['a2015'''']
//│ ╟── while constraining:  α2012''''  <!<  List['a2015'''']
//│ ╟── while constraining:  {(α2027'''' -> α2032'''') where: α2012'''' <: List['a2015''''], α2012'''' <: List['a2016''''], α2012'''' <: List['a2020''''], α2012'''' <: List['a2026''''], α2014'''' <: ((α2027'''',) -> α2028'''')}  <!<  ((α2006'''',) -> α2007'''')
//│ ╟── while constraining:  ‹∀ 2. {(α314''' -> α319''') where: α300'''' <: List['a302'''], α300'''' <: List['a303'''], α300'''' <: List['a307'''], α300'''' <: List['a313'''], α299'''' <: ((α314''',) -> α315''')}›  <!<  ((α2006'''',) -> α2007'''')
//│ ╟── while constraining:  α1993''''  <!<  ((α2006'''',) -> α2007'''')
//│ ╟── while constraining:  {(α2006'''' -> α2011'''') where: α1991'''' <: List['a1994''''], α1991'''' <: List['a1995''''], α1991'''' <: List['a1999''''], α1991'''' <: List['a2005''''], α1993'''' <: ((α2006'''',) -> α2007'''')}  <!<  ((α1985'''',) -> α1986'''')
//│ ╟── while constraining:  ‹∀ 2. {(α314''' -> α319''') where: α300'''' <: List['a302'''], α300'''' <: List['a303'''], α300'''' <: List['a307'''], α300'''' <: List['a313'''], α299'''' <: ((α314''',) -> α315''')}›  <!<  ((α1985'''',) -> α1986'''')
//│ ╟── while constraining:  α1972''''  <!<  ((α1985'''',) -> α1986'''')
//│ ╟── while constraining:  {(α1985'''' -> α1990'''') where: α1970'''' <: List['a1973''''], α1970'''' <: List['a1974''''], α1970'''' <: List['a1978''''], α1970'''' <: List['a1984''''], α1972'''' <: ((α1985'''',) -> α1986'''')}  <!<  ((α1964'''',) -> α1965'''')
//│ ╟── while constraining:  ‹∀ 2. {(α314''' -> α319''') where: α300'''' <: List['a302'''], α300'''' <: List['a303'''], α300'''' <: List['a307'''], α300'''' <: List['a313'''], α299'''' <: ((α314''',) -> α315''')}›  <!<  ((α1964'''',) -> α1965'''')
//│ ╟── while constraining:  α1951''''  <!<  ((α1964'''',) -> α1965'''')
//│ ╟── while constraining:  {(α1964'''' -> α1969'''') where: α1949'''' <: List['a1952''''], α1949'''' <: List['a1953''''], α1949'''' <: List['a1957''''], α1949'''' <: List['a1963''''], α1951'''' <: ((α1964'''',) -> α1965'''')}  <!<  ((α1943'''',) -> α1944'''')
//│ ╟── while constraining:  ‹∀ 2. {(α314''' -> α319''') where: α300'''' <: List['a302'''], α300'''' <: List['a303'''], α300'''' <: List['a307'''], α300'''' <: List['a313'''], α299'''' <: ((α314''',) -> α315''')}›  <!<  ((α1943'''',) -> α1944'''')
//│ ╟── while constraining:  α1930''''  <!<  ((α1943'''',) -> α1944'''')
//│ ╟── while constraining:  {(α1943'''' -> α1948'''') where: α1928'''' <: List['a1931''''], α1928'''' <: List['a1932''''], α1928'''' <: List['a1936''''], α1928'''' <: List['a1942''''], α1930'''' <: ((α1943'''',) -> α1944'''')}  <!<  ((α1922'''',) -> α1923'''')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  {(α473'''' -> α478'''') where: α458'''' <: List['a461''''], α458'''' <: List['a462''''], α458'''' <: List['a466''''], α458'''' <: List['a472''''], α460'''' <: ((α473'''',) -> α474'''')}  <!<  ((α452'''',) -> α453'''')
//│ ╟── while constraining:  ‹∀ 2. {(α314''' -> α319''') where: α300'''' <: List['a302'''], α300'''' <: List['a303'''], α300'''' <: List['a307'''], α300'''' <: List['a313'''], α299'''' <: ((α314''',) -> α315''')}›  <!<  ((α452'''',) -> α453'''')
//│ ╟── while constraining:  α439''''  <!<  ((α452'''',) -> α453'''')
//│ ╟── while constraining:  {(α452'''' -> α457'''') where: α437'''' <: List['a440''''], α437'''' <: List['a441''''], α437'''' <: List['a445''''], α437'''' <: List['a451''''], α439'''' <: ((α452'''',) -> α453'''')}  <!<  ((α431'''',) -> α432'''')
//│ ╟── while constraining:  ‹∀ 2. {(α314''' -> α319''') where: α300'''' <: List['a302'''], α300'''' <: List['a303'''], α300'''' <: List['a307'''], α300'''' <: List['a313'''], α299'''' <: ((α314''',) -> α315''')}›  <!<  ((α431'''',) -> α432'''')
//│ ╟── while constraining:  α418''''  <!<  ((α431'''',) -> α432'''')
//│ ╟── while constraining:  {(α431'''' -> α436'''') where: α416'''' <: List['a419''''], α416'''' <: List['a420''''], α416'''' <: List['a424''''], α416'''' <: List['a430''''], α418'''' <: ((α431'''',) -> α432'''')}  <!<  ((α410'''',) -> α411'''')
//│ ╟── while constraining:  ‹∀ 2. {(α314''' -> α319''') where: α300'''' <: List['a302'''], α300'''' <: List['a303'''], α300'''' <: List['a307'''], α300'''' <: List['a313'''], α299'''' <: ((α314''',) -> α315''')}›  <!<  ((α410'''',) -> α411'''')
//│ ╟── while constraining:  α397''''  <!<  ((α410'''',) -> α411'''')
//│ ╟── while constraining:  {(α410'''' -> α415'''') where: α395'''' <: List['a398''''], α395'''' <: List['a399''''], α395'''' <: List['a403''''], α395'''' <: List['a409''''], α397'''' <: ((α410'''',) -> α411'''')}  <!<  ((α376'''',) -> α377'''')
//│ ╟── while constraining:  ‹∀ 2. {(α314''' -> α319''') where: α300'''' <: List['a302'''], α300'''' <: List['a303'''], α300'''' <: List['a307'''], α300'''' <: List['a313'''], α299'''' <: ((α314''',) -> α315''')}›  <!<  ((α376'''',) -> α377'''')
//│ ╟── while constraining:  α362''''  <!<  ((α376'''',) -> α377'''')
//│ ╟── while constraining:  {(α376'''' -> α381'''') where: α361'''' <: List['a363''''], α361'''' <: List['a364''''], α361'''' <: List['a368''''], α361'''' <: List['a374''''], α362'''' <: ((α376'''',) -> α377'''')}  <!<  ((α295''',) -> α360'''')
//│ ╟── while constraining:  ‹∀ 2. {(α354''' -> α359''') where: α339'''' <: List['a341'''], α339'''' <: List['a342'''], α339'''' <: List['a346'''], α339'''' <: List['a352'''], α340'''' <: ((α354''',) -> α355''')}›  <!<  ((α295''',) -> α360'''')
//│ ╙── while constraining:  α296''''  <!<  ((α295''',) -> α360'''')
//│ nfind: List[?] -> anything -> anything -> (forall 'a. 'a -> 'a)
//│      = [Function: nfind]

// type Int = ['a] ('a -> 'a) -> ('a -> 'a)
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt

// let succ (n:Int) = fun f x -> f (n f x)
def succ (n: ChurchInt) = fun f -> fun x -> f (n f x)
def succ' n = fun f -> fun x -> f (n f x)
//│ succ: ChurchInt -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e)))
//│     = [Function: succ]
//│ succ': 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e)))
//│      = [Function: succ]

// let add (n:Int) (m:Int) = n succ m
def add (n: ChurchInt) (m: ChurchInt) = n succ m
def add' n m = n succ' m
//│ add: ChurchInt -> (forall 'a. (ChurchInt -> 'b
//│   where
//│     'a <: (ChurchInt -> (forall 'c. 'c -> (forall 'c, 'd, 'e, 'f, 'g. ('e -> 'g
//│   where
//│     'd <: 'c -> 'e -> 'f
//│     'c <: 'f -> 'g)))) -> ChurchInt -> 'b))
//│    = [Function: add]
//│ add': 'a -> (forall 'a. ('b -> 'c
//│   where
//│     'a <: (forall 'd. 'd -> (forall 'e. 'e -> (forall 'd, 'e, 'f, 'g, 'h. ('f -> 'h
//│   where
//│     'd <: 'e -> 'f -> 'g
//│     'e <: 'g -> 'h)))) -> 'b -> 'c))
//│     = [Function: add]

// let printInt (n:Int) = print (n (fun x -> x+1) 0)
def printInt (n: ChurchInt) = toString (n (fun x -> x + 1) 0)
def printInt' n = toString (n (fun x -> x + 1) 0)
//│ printInt: ChurchInt -> string
//│         = [Function: printInt]
//│ printInt': ((int -> int) -> 0 -> anything) -> string
//│          = [Function: printInt]

// let table = create_hashtbl ()
// let table = hashtbl_add table "one" (fun f x -> f x)
// let table = hashtbl_add table "two" (fun f x -> f (f x))
table = create_hashtbl null
table = hashtbl_add table "one" (fun f -> fun x -> f x)
table = hashtbl_add table "two" (fun f -> fun x -> f (f x))
//│ table: List[nothing]
//│      = Nil {}
//│ table: List[("one", forall 'a. 'a -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c)),)]
//│      = Cons { head: [ 'one', [Function (anonymous)] ], tail: Nil {} }
//│ table: List[("one" | "two", forall 'a, 'b. ('a & 'b) -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'd
//│   where
//│     'a <: 'c -> 'd
//│     'b <: 'c -> 'e & 'e -> 'd)),)]
//│      = Cons {
//│          head: [ 'two', [Function (anonymous)] ],
//│          tail: Cons { head: [ 'one', [Function (anonymous)] ], tail: Nil {} }
//│        }

// let zog =
//   printInt (add (nfind table "one") (nfind table "two"))
// FIXME?
zog = printInt (add (nfind table "one") (nfind table "two"))
zog' = printInt' (add' (nfind table "one") (nfind table "two"))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.234: 	zog = printInt (add (nfind table "one") (nfind table "two"))
//│ ║         	                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.167: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.167: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──       	                        ^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.234: 	zog = printInt (add (nfind table "one") (nfind table "two"))
//│ ║         	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.167: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.167: 	type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──       	                        ^^
//│ zog: error | string
//│    = '0'
//│ zog': string
//│     = '0'
