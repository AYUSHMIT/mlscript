:NoRecursiveTypes
:GeneralizeCurriedFunctions

// (* Value restriction. *)
// let id x = x 
// let x = id id in x 1, x true
// let x = (id id:'a) in x 1, x true
// ;;
def id x = x
let x = id id in (x 1, x true)
let x = id id : 'a in (x 1, x true)
//│ id: 'a -> 'a
//│   = [Function: id]
//│ res: (1, true,)
//│    = [ 1, true ]
//│ res: (1, true,)
//│    = [ 1, true ]

// type sid = ['a] 'a -> 'a
// ;;
type Sid = forall 'a. 'a -> 'a
//│ Defined type alias Sid

// let annot x = (x:sid)
// ;;
def annot x = x : Sid
//│ annot: 'a -> Sid
//│   where
//│     'a <: Sid
//│      = [Function: annot]

// let delta x = let y = (x:sid) in y y
// ;;
def delta x = let y = x : Sid in y y
//│ delta: Sid -> 'b
//│   where
//│     'a :> Sid
//│        <: 'b
//│      = [Function: delta]

// let delta x = let y = (annot x) in y y
// ;;
def delta x = let y = annot x in y y
//│ delta: Sid -> 'a
//│   where
//│     'b <: Sid -> 'a
//│      = [Function: delta1]
