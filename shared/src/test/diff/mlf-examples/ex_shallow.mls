:NoRecursiveTypes
:GeneralizeCurriedFunctions

// type sid = ['a] 'a -> 'a;;
// type nat = ['a] ('a -> 'a) -> 'a -> 'a
type Sid = forall 'a. 'a -> 'a
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias Sid
//│ Defined type alias ChurchInt

// let auto (x:sid) = x x
// let id x = x
// let k x y = x
def auto (x: Sid) = x x
def auto_ x = x x
def id x = x
def k x y = x
//│ auto: Sid -> 'a
//│   where
//│     'b :> Sid
//│        <: Sid & 'b -> 'a
//│     = [Function: auto]
//│ auto_: 'a -> 'b
//│   where
//│     'a <: 'a -> 'b
//│      = [Function: auto_]
//│ id: 'a -> 'a
//│   = [Function: id]
//│ k: 'a -> anything -> 'a
//│  = [Function: k]

// (* church_zero is like the sequence *)
// let church_zero = fun f -> id
def church_zero = fun f -> id
//│ church_zero: anything -> (forall 'a. 'a -> 'a)
//│            = [Function: church_zero]

// (* church_un is like apply *)
// let church_one = fun f x -> f x
def church_one = fun f -> fun x -> f x
//│ church_one: 'a -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c))
//│           = [Function: church_one]

// (* church_un is like apply_twice *)
// let church_two = fun f x -> f (f x)
def church_two = fun f -> fun x -> f (f x)
//│ church_two: 'a -> (forall 'a, 'b, 'c, 'd. ('b -> 'd
//│   where
//│     'a <: 'b -> 'c & 'c -> 'd))
//│           = [Function: church_two]

// let church_succ n = fun f x -> f (n f x)
def church_succ n = fun f -> fun x -> f (n f x)
//│ church_succ: 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('f -> 'e
//│   where
//│     'a <: 'b -> 'c
//│     'b <: 'd -> 'e
//│     'c <: 'f -> 'd)))
//│            = [Function: church_succ]

// (* We build the a0 of the icfp version paper *)
// type a1 = ['b] ['a > sid] ('a -> 'b) -> 'b
// let a1 = fun f -> f id;;
// let a3 = (fun z z' -> z church_two);;
// let a2 (x:a1) =  (x auto); (fun y -> x y; y church_succ) a3;;
// let a0 = a2 a1;;
type A1 = forall 'a 'b. (('a | Sid) -> 'b) -> 'b
def a1 = fun f -> f id
def a3 = fun z -> fun _ -> z church_two
def a2 (x: A1) =
  let _ = x auto in
  (fun y ->
    let _ = x y in
    y church_succ
  ) a3
def a2_ (x: A1) =
  let _ = x auto_ in
  (fun y ->
    let _ = x y in
    y church_succ
  ) a3
def a0 = a2 a1
def a0_ = a2_ a1
//│ Defined type alias A1
//│ a1: 'a -> 'b
//│   where
//│     'a <: (forall 'c. 'c -> 'c) -> 'b
//│   = [Function: a1]
//│ a3: 'a -> (forall 'a. ('b -> 'c
//│   where
//│     'a <: (forall 'b. 'b -> (forall 'b, 'd, 'e, 'f. ('d -> 'f
//│   where
//│     'b <: 'd -> 'e & 'e -> 'f))) -> 'c))
//│   = [Function: a3]
//│ a2: A1 -> 'a
//│   where
//│     'b := A1
//│     'c :> forall 'd. 'd -> (forall 'd. ('e -> 'f
//│   where
//│     'd <: (forall 'e. 'e -> (forall 'e, 'g, 'h, 'i. ('g -> 'i
//│   where
//│     'e <: 'g -> 'h & 'h -> 'i))) -> 'f))
//│        <: (forall 'j. 'j -> (forall 'k. 'k -> (forall 'j, 'k, 'l, 'm, 'n, 'o. ('o -> 'n
//│   where
//│     'j <: 'k -> 'l
//│     'k <: 'm -> 'n
//│     'l <: 'o -> 'm)))) -> 'p
//│     'p <: 'a
//│   = [Function: a2]
//│ a2_: A1 -> 'a
//│   where
//│     'b :> forall 'c. 'c -> (forall 'c. ('d -> 'e
//│   where
//│     'c <: (forall 'd. 'd -> (forall 'd, 'f, 'g, 'h. ('f -> 'h
//│   where
//│     'd <: 'f -> 'g & 'g -> 'h))) -> 'e))
//│        <: (forall 'i. 'i -> (forall 'j. 'j -> (forall 'i, 'j, 'k, 'l, 'm, 'n. ('n -> 'm
//│   where
//│     'i <: 'j -> 'k
//│     'j <: 'l -> 'm
//│     'k <: 'n -> 'l)))) -> 'o
//│     'o <: 'a
//│     'p := A1
//│    = [Function: a2_]
//│ a0: 'a -> 'b
//│   where
//│     'c <: (forall 'a. 'a -> (forall 'a, 'd, 'e, 'f. ('d -> 'f
//│   where
//│     'a <: 'd -> 'e & 'e -> 'f))) -> 'b
//│   = [Function (anonymous)]
//│ a0_: 'a -> 'b
//│   where
//│     'c <: (forall 'a. 'a -> (forall 'a, 'd, 'e, 'f. ('d -> 'f
//│   where
//│     'a <: 'd -> 'e & 'e -> 'f))) -> 'b
//│    = [Function (anonymous)]

// let test0 = 
//   (fun f -> f (fun h -> h id))
//     (fun (g:a1) ->
//       k (g (fun (x:sid) -> x x))
//         ((fun t -> (fun u v -> v) (g t) (t (fun f x -> x)))
//            (fun x -> ((fun f x -> f x) x) (fun f x -> x))))
// ;;
def test0 =
  (fun f -> f (fun h -> h id))
    (fun (g: A1) ->
      k (g (fun (x: Sid) -> x x))
        ((fun t -> (fun u -> fun v -> v) (g t) (t (fun f -> fun x -> x)))
          (fun x -> ((fun f -> fun x -> f x) x) (fun f -> fun x -> x))))
def test0_ =
  (fun f -> f (fun h -> h id))
    (fun g ->
      k (g (fun x -> x x))
        ((fun t -> (fun u -> fun v -> v) (g t) (t (fun f -> fun x -> x)))
          (fun x -> ((fun f -> fun x -> f x) x) (fun f -> fun x -> x))))
//│ test0: Sid
//│      = [Function: id]
//│ test0_: 'a -> 'a
//│       = [Function: id]


// (** Encoding in F+eta **)
// (* we repace sa by sb and build a coercion function form sb to sc *)

// type a1_sid = ['b] ['a = sid] ('a -> 'b) -> 'b;;
// type a1_nat = ['b] ['a = nat -> nat] ('a -> 'b) -> 'b;;
type A1_sid = forall 'a 'b. (('a & Sid | Sid) -> 'b) -> 'b
type A1_nat = forall 'a 'b. (('a & ChurchInt -> ChurchInt | ChurchInt -> ChurchInt) -> 'b) -> 'b
//│ Defined type alias A1_sid
//│ Defined type alias A1_nat

// let a1_sid_to_nat (g : a1_sid) =
//   let r = fun f -> g (fun (x : sid) -> f x) in
//   (r : a1_nat);;
def a1_sid_to_nat (g: A1_sid) =
  let r = fun f -> g (fun (x: Sid) -> f x) in
  (r: A1_nat)
def a1_sid_to_nat_ g =
  let r = fun f -> g (fun x -> f x) in
  r
//│ a1_sid_to_nat: A1_sid -> A1_nat
//│   where
//│     'a :> A1_sid
//│        <: A1_sid & (forall 'b, 'c, 'd. (Sid -> 'd
//│   where
//│     'b <: 'c -> 'd
//│     'c := Sid)) -> 'e
//│     'b :> (ChurchInt -> ChurchInt) -> ‘b
//│     'e <: ‘b
//│              = [Function: a1_sid_to_nat]
//│ a1_sid_to_nat_: 'a -> (forall 'a. ('b -> 'c
//│   where
//│     'a <: (forall 'b, 'd, 'e. ('d -> 'e
//│   where
//│     'b <: 'd -> 'e)) -> 'c))
//│               = [Function: a1_sid_to_nat_]

// (* the term is as above but abstract over sb and uses the coercion *)

// let test_in_F_eta = 
//   (fun f -> f (fun h -> h id))
//     (fun (g : a1_sid) ->
//       k (g (fun (x : sid) -> x x))
//         ((fun t -> (fun u v -> v) ((a1_sid_to_nat g) t) (t (fun f x -> x)))
//            (fun x -> ((fun f x -> f x) x) (fun f x -> x))))
// ;;

:e // FIXME?
def test_in_F_eta = 
  (fun f -> f (fun h -> h id))
    (fun (g: A1_sid) ->
      k (g (fun (x : Sid) -> x x))
        ((fun t -> (fun u -> fun v -> v) ((a1_sid_to_nat g) t) (t (fun f -> fun x -> x)))
          (fun x -> ((fun f -> fun x -> f x) x) (fun f -> fun x -> x))))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.213: 	  (fun f -> f (fun h -> h id))
//│ ║         	  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.214: 	    (fun (g: A1_sid) ->
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.215: 	      k (g (fun (x : Sid) -> x x))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.216: 	        ((fun t -> (fun u -> fun v -> v) ((a1_sid_to_nat g) t) (t (fun f -> fun x -> x)))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.217: 	          (fun x -> ((fun f -> fun x -> f x) x) (fun f -> fun x -> x))))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘b658` is not an instance of type `'b`
//│ ║  l.171: 	type A1_nat = forall 'a 'b. (('a & ChurchInt -> ChurchInt | ChurchInt -> ChurchInt) -> 'b) -> 'b
//│ ║         	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.171: 	type A1_nat = forall 'a 'b. (('a & ChurchInt -> ChurchInt | ChurchInt -> ChurchInt) -> 'b) -> 'b
//│ ║         	                        ^^
//│ ╟── from application:
//│ ║  l.179: 	  let r = fun f -> g (fun (x: Sid) -> f x) in
//│ ╙──       	                   ^^^^^^^^^^^^^^^^^^^^^^^
//│ test_in_F_eta: error | Sid
//│              = [Function: id]

def test_in_F_eta_ = 
  (fun f -> f (fun h -> h id))
    (fun g ->
      k (g (fun x -> x x))
        ((fun t -> (fun u -> fun v -> v) ((a1_sid_to_nat_ g) t) (t (fun f -> fun x -> x)))
          (fun x -> ((fun f -> fun x -> f x) x) (fun f -> fun x -> x))))
//│ test_in_F_eta_: 'a -> 'a
//│               = [Function: id]

// (*
// (* Le terme dans la syntaxe de Joe Wells *)
//   (fn f => f (fn h => h id))
//     (fn g => 
//         k (g (fn x => x x))
//           ((fn t => (fn u v => v) (g t) (t (fn f x => x)))
//              (fn x => ((fn f x => f x) x) (fn f x => x))))

// *)

// (* We can also build a version of a0 that should not be in F+eta. 
// To do that we require x to return its argument. 
// *)

// type a1' = ['a > sid] ('a -> 'a) -> 'a -> 'a;;
type A1' = forall 'a. (('a | Sid) -> ('a | Sid)) -> ('a | Sid) -> ('a | Sid)
//│ Defined type alias A1'

// let either x y = if true then x else y;;
// let a1' = fun f x -> f (f (either id x));;
// let a2' (x:a1') = x auto id; (fun y -> x y church_two; y church_succ) a3;;
// let a0' = a2' a1';;

def either x y = if true then x else y
//│ either: 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('e -> 'f
//│   where
//│     'b :> 'c -> 'c -> 'c
//│        <: 'a -> 'd
//│     'd <: 'e -> 'f))
//│       = [Function: either]

def a1' = fun f -> fun x -> f (f (either id x))
//│ a1': 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('g -> 'd
//│   where
//│     'a <: 'b -> 'c & 'c -> 'd
//│     'e :> forall 'h, 'i, 'f, 'j, 'k, 'l. ('k -> 'l
//│   where
//│     'h :> 'i -> 'i -> 'i
//│        <: 'f -> 'j
//│     'j <: 'k -> 'l)
//│        <: 'g -> 'b
//│     'f :> forall 'm. 'm -> 'm))
//│    = [Function: either]

def a2' (x: A1') =
  let _ = x auto id in
  (fun y ->
    let _ = x y church_two in
    y church_succ
  ) a3
//│ a2': A1' -> 'a
//│   where
//│     'b :> forall 'c. 'c -> (forall 'c. ('d -> 'e
//│   where
//│     'c <: (forall 'd. 'd -> (forall 'd, 'f, 'g, 'h. ('f -> 'h
//│   where
//│     'd <: 'f -> 'g & 'g -> 'h))) -> 'e))
//│        <: (forall 'i. 'i -> (forall 'j. 'j -> (forall 'i, 'j, 'k, 'l, 'm, 'n. ('n -> 'm
//│   where
//│     'i <: 'j -> 'k
//│     'j <: 'l -> 'm
//│     'k <: 'n -> 'l)))) -> 'o
//│     'o <: 'a
//│     'p := A1'
//│    = [Function: either]

def a2'_ x =
  let _ = x auto_ id in
  (fun y ->
    let _ = x y church_two in
    y church_succ
  ) a3
//│ a2'_: (nothing -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd. ('b -> 'd
//│   where
//│     'a <: 'b -> 'c & 'c -> 'd))) -> 'a & (forall 'e, 'f. ('e -> 'f
//│   where
//│     'e <: 'e -> 'f)) -> (forall 'g. 'g -> 'g) -> 'a) -> 'h
//│   where
//│     'i :> forall 'j. 'j -> (forall 'j. ('a -> 'k
//│   where
//│     'j <: (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd. ('b -> 'd
//│   where
//│     'a <: 'b -> 'c & 'c -> 'd))) -> 'k))
//│        <: (forall 'l. 'l -> (forall 'm. 'm -> (forall 'l, 'm, 'n, 'o, 'p, 'q. ('q -> 'p
//│   where
//│     'l <: 'm -> 'n
//│     'm <: 'o -> 'p
//│     'n <: 'q -> 'o)))) -> 'r
//│     'r <: 'h
//│     = [Function: either]

def a0' = a2' a1'
//│ a0': 'a -> 'b
//│   where
//│     'c <: (forall 'a. 'a -> (forall 'a, 'd, 'e, 'f. ('d -> 'f
//│   where
//│     'a <: 'd -> 'e & 'e -> 'f))) -> 'b
//│    = [Function: either]

:e // works with quantif extrus
def a0'_ = a2'_ a1'
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.350: 	def a0'_ = a2'_ a1'
//│ ║         	           ^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. ‹∀ 1. (α41'' -> α41'')››  <:  α33_1137'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. ‹∀ 1. (α41'' -> α41'')››  <:  α33''
//│ a0'_: 'a -> 'b | error
//│   where
//│     'c <: (forall 'a. 'a -> (forall 'a, 'd, 'e, 'f. ('d -> 'f
//│   where
//│     'a <: 'd -> 'e & 'e -> 'f))) -> 'b
//│     = [Function: either]

// * ^ Strangely, this one works with recursive types:
:RecursiveTypes
:e // FIXME?
def a0'_ = a2'_ a1'
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.367: 	def a0'_ = a2'_ a1'
//│ ║         	           ^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. ‹∀ 1. (α41'' -> α41'')››  <:  α33_1219'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. ‹∀ 1. (α41'' -> α41'')››  <:  α33''
//│ a0'_: 'a -> 'b | error
//│   where
//│     'c <: (forall 'a. 'a -> (forall 'a, 'd, 'e, 'f. ('d -> 'f
//│   where
//│     'a <: 'd -> 'e & 'e -> 'f))) -> 'b
//│     = [Function: either]
:NoRecursiveTypes

// type a1'_sid = ['a = sid] ('a -> 'a) -> 'a -> 'a;;
// type a1'_nat = ['a = nat] ('a -> 'a) -> 'a -> 'a;;
type A1'_sid = forall 'a. (('a & Sid | Sid) -> ('a & Sid | Sid)) -> ('a & Sid | Sid) -> ('a & Sid | Sid)
type A1'_nat = forall 'a. (('a & ChurchInt | ChurchInt) -> ('a & ChurchInt | ChurchInt)) -> ('a & ChurchInt | ChurchInt) -> ('a & ChurchInt | ChurchInt)
//│ Defined type alias A1'_sid
//│ Defined type alias A1'_nat

// (* There is no coercion from a1'_sid to a1'_nat, hence we can conjecture that a0'
//    is not in F+eta. *)


