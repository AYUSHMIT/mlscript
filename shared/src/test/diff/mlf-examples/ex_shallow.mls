:NoRecursiveTypes
:GeneralizeCurriedFunctions

// type sid = ['a] 'a -> 'a;;
// type nat = ['a] ('a -> 'a) -> 'a -> 'a
type Sid = forall 'a. 'a -> 'a
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias Sid
//│ Defined type alias ChurchInt

// let auto (x:sid) = x x
// let id x = x
// let k x y = x
def auto (x: Sid) = x x
def auto_ x = x x
def id x = x
def k x y = x
//│ auto: Sid -> Sid
//│     = [Function: auto]
//│ auto_: ('a -> 'b & 'a) -> 'b
//│      = [Function: auto_]
//│ id: 'a -> 'a
//│   = [Function: id]
//│ k: 'a -> anything -> 'a
//│  = [Function: k]

// (* church_zero is like the sequence *)
// let church_zero = fun f -> id
def church_zero = fun f -> id
//│ church_zero: anything -> (forall 'a. 'a -> 'a)
//│            = [Function: church_zero]

// (* church_un is like apply *)
// let church_one = fun f x -> f x
def church_one = fun f -> fun x -> f x
//│ church_one: ('a -> 'b & 'c) -> (forall 'a, 'b, 'c, 'd, 'e. (('a & 'd) -> ('e | 'b)
//│   where
//│     'c <: 'd -> 'e))
//│           = [Function: church_one]

// (* church_un is like apply_twice *)
// let church_two = fun f x -> f (f x)
def church_two = fun f -> fun x -> f (f x)
//│ church_two: (('a | 'b) -> 'c & 'd -> 'a & 'e) -> (forall 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h. (('d & 'f) -> ('h | 'c)
//│   where
//│     'e <: 'f -> ('b & 'g) & ('g | 'a) -> 'h))
//│           = [Function: church_two]

// let church_succ n = fun f x -> f (n f x)
def church_succ n = fun f -> fun x -> f (n f x)
//│ church_succ: ('a -> 'b -> 'c & 'd) -> (forall 'a, 'c, 'd, 'e, 'f, 'g, 'h, 'i. ((('g | 'h | 'c) -> 'i & 'a & 'e) -> (forall 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l. (('b & 'f & 'j) -> ('l | 'i)
//│   where
//│     'd <: 'e -> 'j -> ('h & 'k)
//│     'e <: ('k | 'g | 'c) -> 'l))
//│   where
//│     'd <: 'e -> 'f -> 'g))
//│            = [Function: church_succ]

// (* We build the a0 of the icfp version paper *)
// type a1 = ['b] ['a > sid] ('a -> 'b) -> 'b
// let a1 = fun f -> f id;;
// let a3 = (fun z z' -> z church_two);;
// let a2 (x:a1) =  (x auto); (fun y -> x y; y church_succ) a3;;
// let a0 = a2 a1;;
type A1 = forall 'a 'b. (('a | Sid) -> 'b) -> 'b
def a1 = fun f -> f id
def a3 = fun z -> fun _ -> z church_two
def a2 (x: A1) =
  let _ = x auto in
  (fun y ->
    let _ = x y in
    y church_succ
  ) a3
def a2_ (x: A1) =
  let _ = x auto_ in
  (fun y ->
    let _ = x y in
    y church_succ
  ) a3
def a0 = a2 a1
def a0_ = a2_ a1
//│ Defined type alias A1
//│ a1: ((forall 'a. 'a -> 'a) -> 'b) -> 'b
//│   = [Function: a1]
//│ a3: ((forall 'a, 'b, 'c, 'd, 'e. (('a | 'b) -> 'c & 'd -> 'a & 'e) -> (forall 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h. (('d & 'f) -> ('h | 'c)
//│   where
//│     'e <: 'f -> ('b & 'g) & ('g | 'a) -> 'h))) -> 'i & 'j) -> (forall 'j. ('e -> ('k | 'i)
//│   where
//│     'j <: (forall 'a, 'b, 'c, 'd, 'e. (('a | 'b) -> 'c & 'd -> 'a & 'e) -> (forall 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h. (('d & 'f) -> ('h | 'c)
//│   where
//│     'e <: 'f -> ('b & 'g) & ('g | 'a) -> 'h))) -> 'k))
//│   = [Function: a3]
//│ a2: A1 -> (forall 'a. ('b -> (forall 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k. ((('f | 'g | 'h) -> 'i & 'j -> 'k & 'k -> 'h & 'd) -> (forall 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'l, 'm, 'n. (('e & 'j & 'l) -> ('n | 'i)
//│   where
//│     'c <: 'd -> 'l -> ('g & 'm)
//│     'd <: ('m | 'f | 'h) -> 'n)) | 'o
//│   where
//│     'c <: 'd -> 'e -> 'f))
//│   where
//│     'a <: (forall 'p, 'q, 'r, 's, 'b. (('p | 'q) -> 'r & 's -> 'p & 'b) -> (forall 'p, 'q, 'r, 's, 'b, 't, 'u, 'v. (('s & 't) -> ('v | 'r)
//│   where
//│     'b <: 't -> ('q & 'u) & ('u | 'p) -> 'v))) -> 'o))
//│   = [Function: a2]
//│ a2_: A1 -> (forall 'a. ('b -> (forall 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k. ((('f | 'g | 'h) -> 'i & 'j -> 'k & 'k -> 'h & 'd) -> (forall 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'l, 'm, 'n. (('e & 'j & 'l) -> ('n | 'i)
//│   where
//│     'c <: 'd -> 'l -> ('g & 'm)
//│     'd <: ('m | 'f | 'h) -> 'n)) | 'o
//│   where
//│     'c <: 'd -> 'e -> 'f))
//│   where
//│     'a <: (forall 'p, 'q, 'r, 's, 'b. (('p | 'q) -> 'r & 's -> 'p & 'b) -> (forall 'p, 'q, 'r, 's, 'b, 't, 'u, 'v. (('s & 't) -> ('v | 'r)
//│   where
//│     'b <: 't -> ('q & 'u) & ('u | 'p) -> 'v))) -> 'o))
//│    = [Function: a2_]
//│ a0: 'a -> (forall 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j. ((('e | 'f | 'g) -> 'h & 'i -> 'j & 'j -> 'g & 'c) -> (forall 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'k, 'l, 'm. (('d & 'i & 'k) -> ('m | 'h)
//│   where
//│     'b <: 'c -> 'k -> ('f & 'l)
//│     'c <: ('l | 'e | 'g) -> 'm)) | 'n
//│   where
//│     'b <: 'c -> 'd -> 'e))
//│   where
//│     'o <: (forall 'p, 'q, 'r, 's, 'a. (('p | 'q) -> 'r & 's -> 'p & 'a) -> (forall 'p, 'q, 'r, 's, 'a, 't, 'u, 'v. (('s & 't) -> ('v | 'r)
//│   where
//│     'a <: 't -> ('q & 'u) & ('u | 'p) -> 'v))) -> 'n
//│   = [Function (anonymous)]
//│ a0_: 'a -> (forall 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j. ((('e | 'f | 'g) -> 'h & 'i -> 'j & 'j -> 'g & 'c) -> (forall 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'k, 'l, 'm. (('d & 'i & 'k) -> ('m | 'h)
//│   where
//│     'b <: 'c -> 'k -> ('f & 'l)
//│     'c <: ('l | 'e | 'g) -> 'm)) | 'n
//│   where
//│     'b <: 'c -> 'd -> 'e))
//│   where
//│     'o <: (forall 'p, 'q, 'r, 's, 'a. (('p | 'q) -> 'r & 's -> 'p & 'a) -> (forall 'p, 'q, 'r, 's, 'a, 't, 'u, 'v. (('s & 't) -> ('v | 'r)
//│   where
//│     'a <: 't -> ('q & 'u) & ('u | 'p) -> 'v))) -> 'n
//│    = [Function (anonymous)]

// let test0 = 
//   (fun f -> f (fun h -> h id))
//     (fun (g:a1) ->
//       k (g (fun (x:sid) -> x x))
//         ((fun t -> (fun u v -> v) (g t) (t (fun f x -> x)))
//            (fun x -> ((fun f x -> f x) x) (fun f x -> x))))
// ;;
def test0 =
  (fun f -> f (fun h -> h id))
    (fun (g: A1) ->
      k (g (fun (x: Sid) -> x x))
        ((fun t -> (fun u -> fun v -> v) (g t) (t (fun f -> fun x -> x)))
          (fun x -> ((fun f -> fun x -> f x) x) (fun f -> fun x -> x))))
def test0_ =
  (fun f -> f (fun h -> h id))
    (fun g ->
      k (g (fun x -> x x))
        ((fun t -> (fun u -> fun v -> v) (g t) (t (fun f -> fun x -> x)))
          (fun x -> ((fun f -> fun x -> f x) x) (fun f -> fun x -> x))))
//│ test0: Sid
//│      = [Function: id]
//│ test0_: 'a -> 'a
//│       = [Function: id]


// (** Encoding in F+eta **)
// (* we repace sa by sb and build a coercion function form sb to sc *)

// type a1_sid = ['b] ['a = sid] ('a -> 'b) -> 'b;;
// type a1_nat = ['b] ['a = nat -> nat] ('a -> 'b) -> 'b;;
type A1_sid = forall 'a 'b. (('a & Sid | Sid) -> 'b) -> 'b
type A1_nat = forall 'a 'b. (('a & ChurchInt -> ChurchInt | ChurchInt -> ChurchInt) -> 'b) -> 'b
//│ Defined type alias A1_sid
//│ Defined type alias A1_nat

// let a1_sid_to_nat (g : a1_sid) =
//   let r = fun f -> g (fun (x : sid) -> f x) in
//   (r : a1_nat);;

// :e // due to tapping
def a1_sid_to_nat (g: A1_sid) =
  let r = fun f -> g (fun (x: Sid) -> f x) in
  (r: A1_nat)
//│ a1_sid_to_nat: A1_sid -> A1_nat
//│              = [Function: a1_sid_to_nat]

def a1_sid_to_nat_ g =
  let r = fun f -> g (fun x -> f x) in
  r
//│ a1_sid_to_nat_: ((forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c)) -> 'd & 'e) -> (forall 'e. ('f -> ('d | 'g)
//│   where
//│     'e <: (forall 'f, 'h, 'i. ('h -> 'i
//│   where
//│     'f <: 'h -> 'i)) -> 'g))
//│               = [Function: a1_sid_to_nat_]

// (* the term is as above but abstract over sb and uses the coercion *)

// let test_in_F_eta = 
//   (fun f -> f (fun h -> h id))
//     (fun (g : a1_sid) ->
//       k (g (fun (x : sid) -> x x))
//         ((fun t -> (fun u v -> v) ((a1_sid_to_nat g) t) (t (fun f x -> x)))
//            (fun x -> ((fun f x -> f x) x) (fun f x -> x))))
// ;;

// :e // FIXME?
// :e // FIXME? refreshing-extr
def test_in_F_eta = 
  (fun f -> f (fun h -> h id))
    (fun (g: A1_sid) ->
      k (g (fun (x : Sid) -> x x))
        ((fun t -> (fun u -> fun v -> v) ((a1_sid_to_nat g) t) (t (fun f -> fun x -> x)))
          (fun x -> ((fun f -> fun x -> f x) x) (fun f -> fun x -> x))))
//│ test_in_F_eta: Sid
//│              = [Function: id]

def test_in_F_eta_ = 
  (fun f -> f (fun h -> h id))
    (fun g ->
      k (g (fun x -> x x))
        ((fun t -> (fun u -> fun v -> v) ((a1_sid_to_nat_ g) t) (t (fun f -> fun x -> x)))
          (fun x -> ((fun f -> fun x -> f x) x) (fun f -> fun x -> x))))
//│ test_in_F_eta_: 'a -> 'a
//│               = [Function: id]

// (*
// (* Le terme dans la syntaxe de Joe Wells *)
//   (fn f => f (fn h => h id))
//     (fn g => 
//         k (g (fn x => x x))
//           ((fn t => (fn u v => v) (g t) (t (fn f x => x)))
//              (fn x => ((fn f x => f x) x) (fn f x => x))))

// *)

// (* We can also build a version of a0 that should not be in F+eta. 
// To do that we require x to return its argument. 
// *)

// type a1' = ['a > sid] ('a -> 'a) -> 'a -> 'a;;
type A1' = forall 'a. (('a | Sid) -> ('a | Sid)) -> ('a | Sid) -> ('a | Sid)
//│ Defined type alias A1'

// let either x y = if true then x else y;;
// let a1' = fun f x -> f (f (either id x));;
// let a2' (x:a1') = x auto id; (fun y -> x y church_two; y church_succ) a3;;
// let a0' = a2' a1';;

def either x y = if true then x else y
//│ either: 'a -> (forall 'a, 'b. ('b -> ('b | 'a)
//│   where
//│     'a <: 'b))
//│       = [Function: either]

def a1' = fun f -> fun x -> f (f (either id x))
//│ a1': (('a | 'b) -> 'c & (forall 'd, 'e. 'd -> 'd | 'e) -> 'a & 'f) -> (forall 'f. (('e & 'g) -> ('h | 'c)
//│   where
//│     'f <: (forall 'd, 'g. 'd -> 'd | 'g) -> ('b & 'i) & ('i | 'a) -> 'h))
//│    = [Function: either]

// FIXME: ClassCastException: mlscript.TyperDatatypes$TraitTag cannot be cast to mlscript.TyperDatatypes$TypeVariable
// def a2' (x: A1') =
//   let _ = x auto id in
//   (fun y ->
//     let _ = x y church_two in
//     y church_succ
//   ) a3

def a2'_ x =
  let _ = x auto_ id in
  (fun y ->
    let _ = x y church_two in
    y church_succ
  ) a3
//│ a2'_: ((((forall 'a, 'b, 'c, 'd, 'e. (('a | 'b) -> 'c & 'd -> 'a & 'e) -> (forall 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h. (('d & 'f) -> ('h | 'c)
//│   where
//│     'e <: 'f -> ('b & 'g) & ('g | 'a) -> 'h))) -> 'i & 'j) -> (forall 'j. ('e -> ('k | 'i)
//│   where
//│     'j <: (forall 'a, 'b, 'c, 'd, 'e. (('a | 'b) -> 'c & 'd -> 'a & 'e) -> (forall 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h. (('d & 'f) -> ('h | 'c)
//│   where
//│     'e <: 'f -> ('b & 'g) & ('g | 'a) -> 'h))) -> 'k))) -> (forall 'a, 'b, 'c, 'd, 'e. (('a | 'b) -> 'c & 'd -> 'a & 'e) -> (forall 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h. (('d & 'f) -> ('h | 'c)
//│   where
//│     'e <: 'f -> ('b & 'g) & ('g | 'a) -> 'h))) -> 'e & (forall 'l, 'm. ('l -> 'm & 'l) -> 'm) -> (forall 'n. 'n -> 'n) -> 'e) -> (forall 'o. ('e -> (forall 'p, 'q, 'r, 's, 't, 'u, 'v, 'w, 'x. ((('s | 't | 'u) -> 'v & 'w -> 'x & 'x -> 'u & 'q) -> (forall 'p, 'q, 'r, 's, 't, 'u, 'v, 'w, 'y, 'z, 'a1. (('r & 'w & 'y) -> ('a1 | 'v)
//│   where
//│     'p <: 'q -> 'y -> ('t & 'z)
//│     'q <: ('z | 's | 'u) -> 'a1)) | 'b1
//│   where
//│     'p <: 'q -> 'r -> 's))
//│   where
//│     'o <: (forall 'a, 'b, 'c, 'd, 'e. (('a | 'b) -> 'c & 'd -> 'a & 'e) -> (forall 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h. (('d & 'f) -> ('h | 'c)
//│   where
//│     'e <: 'f -> ('b & 'g) & ('g | 'a) -> 'h))) -> 'b1))
//│     = [Function: either]

// FIXME
def a0' = a2' a1'
//│ ╔══[ERROR] identifier not found: a2'
//│ ║  l.296: 	def a0' = a2' a1'
//│ ╙──       	          ^^^
//│ a0': error
//│ Code generation encountered an error:
//│   unresolved symbol a2'

// FIXME
// :e // works with quantif extrus
def a0'_ = a2'_ a1'
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.306: 	def a0'_ = a2'_ a1'
//│ ║         	           ^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 2. {(α73_1679''' -> α75_1681''') where: α72_1674' <: ((α73_1679''',) -> α74_1680'''), α72_1674' <: ((α74_1680''',) -> α75_1681''')}›  <:  α173_1603'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 2. {(α73''' -> α75''') where: α72'' <: ((α73''',) -> α74'''), α72'' <: ((α74''',) -> α75''')}›  <:  α173''
//│ a0'_: error
//│     = [Function: either]

// * ^ Strangely, this one works with recursive types:
:RecursiveTypes
:e // FIXME?
def a0'_ = a2'_ a1'
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.319: 	def a0'_ = a2'_ a1'
//│ ║         	           ^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 2. {(α73_1865''' -> α75_1867''') where: α72_1860' <: ((α73_1865''',) -> α74_1866'''), α72_1860' <: ((α74_1866''',) -> α75_1867''')}›  <:  α173_1791'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 2. {(α73''' -> α75''') where: α72'' <: ((α73''',) -> α74'''), α72'' <: ((α74''',) -> α75''')}›  <:  α173''
//│ a0'_: error
//│     = [Function: either]
:NoRecursiveTypes

// type a1'_sid = ['a = sid] ('a -> 'a) -> 'a -> 'a;;
// type a1'_nat = ['a = nat] ('a -> 'a) -> 'a -> 'a;;
type A1'_sid = forall 'a. (('a & Sid | Sid) -> ('a & Sid | Sid)) -> ('a & Sid | Sid) -> ('a & Sid | Sid)
type A1'_nat = forall 'a. (('a & ChurchInt | ChurchInt) -> ('a & ChurchInt | ChurchInt)) -> ('a & ChurchInt | ChurchInt) -> ('a & ChurchInt | ChurchInt)
//│ Defined type alias A1'_sid
//│ Defined type alias A1'_nat

// (* There is no coercion from a1'_sid to a1'_nat, hence we can conjecture that a0'
//    is not in F+eta. *)


