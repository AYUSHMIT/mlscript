:NoRecursiveTypes
:GeneralizeCurriedFunctions

// type sid = ['a] 'a -> 'a;;
// type nat = ['a] ('a -> 'a) -> 'a -> 'a
type Sid = forall 'a. 'a -> 'a
type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias Sid
//│ Defined type alias ChurchInt

// let auto (x:sid) = x x
// let id x = x
// let k x y = x
def auto (x: Sid) = x x
def auto_ x = x x
def id x = x
def k x y = x
//│ auto: Sid -> (forall 'a, 'b. ('b
//│   where
//│     'a <: 'a -> 'b))
//│     = [Function: auto]
//│ auto_: ('a -> anything & 'a) -> (forall 'a, 'b. ('b
//│   where
//│     'a <: 'a -> 'b))
//│      = [Function: auto_]
//│ id: 'a -> 'a
//│   = [Function: id]
//│ k: 'a -> anything -> 'a
//│  = [Function: k]

// (* church_zero is like the sequence *)
// let church_zero = fun f -> id
def church_zero = fun f -> id
//│ church_zero: anything -> (forall 'a. 'a -> 'a)
//│            = [Function: church_zero]

// (* church_un is like apply *)
// let church_one = fun f x -> f x
def church_one = fun f -> fun x -> f x
//│ church_one: (nothing -> 'a & 'a) -> (forall 'b. 'b -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'a <: 'b -> 'c)))
//│           = [Function: church_one]

// (* church_un is like apply_twice *)
// let church_two = fun f x -> f (f x)
def church_two = fun f -> fun x -> f (f x)
//│ church_two: (nothing -> 'a & 'a) -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd. ('d
//│   where
//│     'a <: 'b -> 'c & 'c -> 'd)))
//│           = [Function: church_two]

// let church_succ n = fun f x -> f (n f x)
def church_succ n = fun f -> fun x -> f (n f x)
//│ church_succ: (nothing -> nothing -> 'a & 'a) -> (forall 'b. (nothing -> 'a & 'b) -> (forall 'c. 'c -> (forall 'a, 'b, 'c, 'd, 'e. ('e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e))))
//│            = [Function: church_succ]

// (* We build the a0 of the icfp version paper *)
// type a1 = ['b] ['a > sid] ('a -> 'b) -> 'b
// let a1 = fun f -> f id;;
// let a3 = (fun z z' -> z church_two);;
// let a2 (x:a1) =  (x auto); (fun y -> x y; y church_succ) a3;;
// let a0 = a2 a1;;
type A1 = forall 'a 'b. (('a | Sid) -> 'b) -> 'b
def a1 = fun f -> f id
def a3 = fun z -> fun _ -> z church_two
def a2 (x: A1) =
  let _ = x auto in
  (fun y ->
    let _ = x y in
    y church_succ
  ) a3
def a2_ (x: A1) =
  let _ = x auto_ in
  (fun y ->
    let _ = x y in
    y church_succ
  ) a3
def a0 = a2 a1
def a0_ = a2_ a1
//│ Defined type alias A1
//│ a1: ((forall 'a. 'a -> 'a) -> 'b & 'b) -> (forall 'b. ('c
//│   where
//│     'b <: (forall 'a. 'a -> 'a) -> 'c))
//│   = [Function: a1]
//│ a3: ((forall 'a. (nothing -> 'a & 'a) -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd. ('d
//│   where
//│     'a <: 'b -> 'c & 'c -> 'd)))) -> 'a & 'e) -> 'a -> (forall 'e. ('f
//│   where
//│     'e <: (forall 'a. (nothing -> 'a & 'a) -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd. ('d
//│   where
//│     'a <: 'b -> 'c & 'c -> 'd)))) -> 'f))
//│   = [Function: a3]
//│ /!!!\ Uncaught error: java.util.NoSuchElementException: key not found: Sid
//│ 	at: scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:635)
//│ 	at: scala.collection.immutable.HashMap.apply(HashMap.scala:132)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expandWith(TyperDatatypes.scala:334)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expand(TyperDatatypes.scala:332)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65(ConstraintSolver.scala:674)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65$adapted(ConstraintSolver.scala:432)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$62(ConstraintSolver.scala:432)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)

// let test0 = 
//   (fun f -> f (fun h -> h id))
//     (fun (g:a1) ->
//       k (g (fun (x:sid) -> x x))
//         ((fun t -> (fun u v -> v) (g t) (t (fun f x -> x)))
//            (fun x -> ((fun f x -> f x) x) (fun f x -> x))))
// ;;
def test0 =
  (fun f -> f (fun h -> h id))
    (fun (g: A1) ->
      k (g (fun (x: Sid) -> x x))
        ((fun t -> (fun u -> fun v -> v) (g t) (t (fun f -> fun x -> x)))
          (fun x -> ((fun f -> fun x -> f x) x) (fun f -> fun x -> x))))
def test0_ =
  (fun f -> f (fun h -> h id))
    (fun g ->
      k (g (fun x -> x x))
        ((fun t -> (fun u -> fun v -> v) (g t) (t (fun f -> fun x -> x)))
          (fun x -> ((fun f -> fun x -> f x) x) (fun f -> fun x -> x))))
//│ /!!!\ Uncaught error: java.util.NoSuchElementException: key not found: A1
//│ 	at: scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:635)
//│ 	at: scala.collection.immutable.HashMap.apply(HashMap.scala:132)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expandWith(TyperDatatypes.scala:334)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expand(TyperDatatypes.scala:332)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65(ConstraintSolver.scala:674)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65$adapted(ConstraintSolver.scala:432)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$62(ConstraintSolver.scala:432)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)


// (** Encoding in F+eta **)
// (* we repace sa by sb and build a coercion function form sb to sc *)

// type a1_sid = ['b] ['a = sid] ('a -> 'b) -> 'b;;
// type a1_nat = ['b] ['a = nat -> nat] ('a -> 'b) -> 'b;;
type A1_sid = forall 'a 'b. (('a & Sid | Sid) -> 'b) -> 'b
type A1_nat = forall 'a 'b. (('a & ChurchInt -> ChurchInt | ChurchInt -> ChurchInt) -> 'b) -> 'b
//│ Defined type alias A1_sid
//│ Defined type alias A1_nat

// let a1_sid_to_nat (g : a1_sid) =
//   let r = fun f -> g (fun (x : sid) -> f x) in
//   (r : a1_nat);;

// :e // due to tapping
def a1_sid_to_nat (g: A1_sid) =
  let r = fun f -> g (fun (x: Sid) -> f x) in
  (r: A1_nat)
//│ /!!!\ Uncaught error: java.util.NoSuchElementException: key not found: A1_sid
//│ 	at: scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:635)
//│ 	at: scala.collection.immutable.HashMap.apply(HashMap.scala:132)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expandWith(TyperDatatypes.scala:334)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expand(TyperDatatypes.scala:332)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65(ConstraintSolver.scala:674)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65$adapted(ConstraintSolver.scala:432)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$62(ConstraintSolver.scala:432)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)

def a1_sid_to_nat_ g =
  let r = fun f -> g (fun x -> f x) in
  r
//│ a1_sid_to_nat_: ((forall 'a. 'a -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'b <: 'a -> 'c))) -> 'd & 'e) -> (forall 'd. (nothing -> 'd & 'd) -> (forall 'e. ('f
//│   where
//│     'e <: (forall 'g. 'g -> (forall 'd, 'g, 'h. ('h
//│   where
//│     'd <: 'g -> 'h))) -> 'f)))
//│               = [Function: a1_sid_to_nat_]

// (* the term is as above but abstract over sb and uses the coercion *)

// let test_in_F_eta = 
//   (fun f -> f (fun h -> h id))
//     (fun (g : a1_sid) ->
//       k (g (fun (x : sid) -> x x))
//         ((fun t -> (fun u v -> v) ((a1_sid_to_nat g) t) (t (fun f x -> x)))
//            (fun x -> ((fun f x -> f x) x) (fun f x -> x))))
// ;;

// :e // FIXME?
def test_in_F_eta = 
  (fun f -> f (fun h -> h id))
    (fun (g: A1_sid) ->
      k (g (fun (x : Sid) -> x x))
        ((fun t -> (fun u -> fun v -> v) ((a1_sid_to_nat g) t) (t (fun f -> fun x -> x)))
          (fun x -> ((fun f -> fun x -> f x) x) (fun f -> fun x -> x))))
//│ ╔══[ERROR] identifier not found: a1_sid_to_nat
//│ ║  l.198: 	        ((fun t -> (fun u -> fun v -> v) ((a1_sid_to_nat g) t) (t (fun f -> fun x -> x)))
//│ ╙──       	                                           ^^^^^^^^^^^^^
//│ /!!!\ Uncaught error: java.util.NoSuchElementException: key not found: Sid
//│ 	at: scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:635)
//│ 	at: scala.collection.immutable.HashMap.apply(HashMap.scala:132)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expandWith(TyperDatatypes.scala:334)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expand(TyperDatatypes.scala:332)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65(ConstraintSolver.scala:674)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65$adapted(ConstraintSolver.scala:432)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$62(ConstraintSolver.scala:432)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)

def test_in_F_eta_ = 
  (fun f -> f (fun h -> h id))
    (fun g ->
      k (g (fun x -> x x))
        ((fun t -> (fun u -> fun v -> v) ((a1_sid_to_nat_ g) t) (t (fun f -> fun x -> x)))
          (fun x -> ((fun f -> fun x -> f x) x) (fun f -> fun x -> x))))
//│ test_in_F_eta_: 'a
//│   where
//│     'b <: (((forall 'c. 'c -> 'c) -> 'd & 'd) -> (forall 'd. ('e
//│   where
//│     'd <: (forall 'c. 'c -> 'c) -> 'e))) -> 'a
//│               = [Function: id]

// (*
// (* Le terme dans la syntaxe de Joe Wells *)
//   (fn f => f (fn h => h id))
//     (fn g => 
//         k (g (fn x => x x))
//           ((fn t => (fn u v => v) (g t) (t (fn f x => x)))
//              (fn x => ((fn f x => f x) x) (fn f x => x))))

// *)

// (* We can also build a version of a0 that should not be in F+eta. 
// To do that we require x to return its argument. 
// *)

// type a1' = ['a > sid] ('a -> 'a) -> 'a -> 'a;;
type A1' = forall 'a. (('a | Sid) -> ('a | Sid)) -> ('a | Sid) -> ('a | Sid)
//│ Defined type alias A1'

// let either x y = if true then x else y;;
// let a1' = fun f x -> f (f (either id x));;
// let a2' (x:a1') = x auto id; (fun y -> x y church_two; y church_succ) a3;;
// let a0' = a2' a1';;

def either x y = if true then x else y
//│ either: 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'a <: 'c
//│     'b <: 'c)))
//│       = [Function: either]

def a1' = fun f -> fun x -> f (f (either id x))
//│ a1': (nothing -> 'a & (forall 'b, 'c, 'd, 'e. ('e -> 'e | 'c
//│   where
//│     'b <: 'c
//│     'd <: 'c
//│     'b <: 'c
//│     'd <: 'c)) -> 'a & 'f) -> (forall 'a. 'a -> (forall 'a, 'd, 'f. ('g
//│   where
//│     'a <: 'd
//│     'f <: (forall 'b, 'c, 'd, 'e. ('e -> 'e | 'c
//│   where
//│     'b <: 'c
//│     'd <: 'c
//│     'b <: 'c
//│     'd <: 'c)) -> 'h & 'h -> 'g)))
//│    = [Function: either]

// FIXME
// def a2' (x: A1') =
//   let _ = x auto id in
//   (fun y ->
//     let _ = x y church_two in
//     y church_succ
//   ) a3

def a2'_ x =
  let _ = x auto_ id in
  (fun y ->
    let _ = x y church_two in
    y church_succ
  ) a3
//│ a2'_: (nothing -> (forall 'a, 'b. (nothing -> 'a & 'b) -> (forall 'c. 'c -> (forall 'b, 'c, 'd, 'e. ('e
//│   where
//│     'b <: 'c -> 'd & 'd -> 'e)))) -> 'a & (forall 'a, 'f. ('f -> 'a & 'f) -> (forall 'f, 'g. ('g
//│   where
//│     'f <: 'f -> 'g))) -> (forall 'h. 'h -> 'h) -> 'a) -> (forall 'i. ('j
//│   where
//│     'i <: (forall 'a. (nothing -> nothing -> 'a & 'a) -> (forall 'k. (nothing -> 'a & 'k) -> (forall 'l. 'l -> (forall 'a, 'k, 'l, 'm, 'n. ('n
//│   where
//│     'a <: 'k -> 'l -> 'm
//│     'k <: 'm -> 'n))))) -> 'j))
//│     = [Function: either]

def a0' = a2' a1'
//│ ╔══[ERROR] identifier not found: a2'
//│ ║  l.301: 	def a0' = a2' a1'
//│ ╙──       	          ^^^
//│ a0': error
//│ Code generation encountered an error:
//│   unresolved symbol a2'

// :e // works with quantif extrus
def a0'_ = a2'_ a1'
//│ a0'_: 'a
//│   where
//│     'b <: (forall 'c. (nothing -> nothing -> 'c & 'c) -> (forall 'd. (nothing -> 'c & 'd) -> (forall 'e. 'e -> (forall 'c, 'd, 'e, 'f, 'g. ('g
//│   where
//│     'c <: 'd -> 'e -> 'f
//│     'd <: 'f -> 'g))))) -> 'a
//│     = [Function: either]

// * ^ Strangely, this one works with recursive types:
:RecursiveTypes
// :e // FIXME?
def a0'_ = a2'_ a1'
//│ a0'_: 'a
//│   where
//│     'b <: (forall 'c. (nothing -> nothing -> 'c & 'c) -> (forall 'd. (nothing -> 'c & 'd) -> (forall 'e. 'e -> (forall 'c, 'd, 'e, 'f, 'g. ('g
//│   where
//│     'c <: 'd -> 'e -> 'f
//│     'd <: 'f -> 'g))))) -> 'a
//│     = [Function: either]
:NoRecursiveTypes

// type a1'_sid = ['a = sid] ('a -> 'a) -> 'a -> 'a;;
// type a1'_nat = ['a = nat] ('a -> 'a) -> 'a -> 'a;;
type A1'_sid = forall 'a. (('a & Sid | Sid) -> ('a & Sid | Sid)) -> ('a & Sid | Sid) -> ('a & Sid | Sid)
type A1'_nat = forall 'a. (('a & ChurchInt | ChurchInt) -> ('a & ChurchInt | ChurchInt)) -> ('a & ChurchInt | ChurchInt) -> ('a & ChurchInt | ChurchInt)
//│ Defined type alias A1'_sid
//│ Defined type alias A1'_nat

// (* There is no coercion from a1'_sid to a1'_nat, hence we can conjecture that a0'
//    is not in F+eta. *)


