:GeneralizeCurriedFunctions
// :NoJS

// ============ Dummy classes to represent the types in the examples ============

class None
class Some[a]: { val: a }
type Option[a] = None | Some[a]
//│ Defined class None
//│ Defined class Some[+a]
//│ Defined type alias Option[+a]

class List[a]
  method Head: a
  method Tail: List[a]
//│ Defined class List[+a]
//│ Declared List.Head: List['a] -> 'a
//│ Declared List.Tail: List['a] -> List['a]

class Cons[a]: List[a] & { head: a; tail: List[a] }
  method Head = this.head
  method Tail = this.tail
def cons[a]: a -> List[a] -> List[a]
def cons head tail = Cons { head; tail }
//│ Defined class Cons[+a]
//│ Defined Cons.Head: Cons['a] -> 'a
//│ Defined Cons.Tail: Cons['a] -> List['a]
//│ cons: 'a -> List['a] -> List['a]
//│     = <missing implementation>
//│ 'b -> (forall 'a, 'tail. (List['a] & 'tail) -> (Cons['a | 'b] with {head: 'b, tail: 'tail}))
//│   <:  cons:
//│ 'a -> List['a] -> List['a]
//│     = [Function: cons]

class Nil[a]: List[a]
  method Head = error
  method Tail = this
def nil: List['a]
def nil = Nil {}
//│ Defined class Nil[+a]
//│ Defined Nil.Head: Nil[?] -> nothing
//│ Defined Nil.Tail: (Nil['a] & 'this) -> (Nil['a] & 'this)
//│ nil: List[nothing]
//│    = <missing implementation>
//│ Nil[nothing]
//│   <:  nil:
//│ List[nothing]
//│    = Nil {}

// ============ Type signatures for functions used in the examples ============

def head: forall 'a. List['a] -> 'a
def head l = l.Head
//│ head: List['a] -> 'a
//│     = <missing implementation>
//│ List['a] -> 'a
//│   <:  head:
//│ List['a] -> 'a
//│     = [Function: head]

def tail: forall 'a. List['a] -> List['a]
def tail l = l.Tail
//│ tail: List['a] -> List['a]
//│     = <missing implementation>
//│ List['a] -> List['a]
//│   <:  tail:
//│ List['a] -> List['a]
//│     = [Function: tail]

:ng
def print_bool: bool -> unit
def print_bool b = log b
//│ print_bool: bool -> unit
//│ anything -> unit
//│   <:  print_bool:
//│ bool -> unit

:ng
def print_int: int -> unit
def print_int i = log i
//│ print_int: int -> unit
//│ anything -> unit
//│   <:  print_int:
//│ int -> unit

:ng
def print_string: string -> unit
def print_string s = log s
//│ print_string: string -> unit
//│ anything -> unit
//│   <:  print_string:
//│ string -> unit



// (* A quick demo of MLF *)

// (* In the following, "untype expr" means that the expression expr should not be typable. *)

// type sid = ['a] 'a -> 'a
type Sid = forall 'a. 'a -> 'a
//│ Defined type alias Sid

// let id = fun x -> x
def id = fun x -> x
//│ id: 'a -> 'a
//│   = [Function: id]

// let delta = fun (x:sid) -> x x
def delta = fun (x: Sid) -> x x
def delta' = fun x -> x x
//│ delta: Sid -> Sid
//│      = [Function: delta]
//│ delta': ('a -> 'b & 'a) -> 'b
//│       = [Function: delta]

// let choose x y = if true then x else y
def choose x y = if true then x else y
//│ choose: 'a -> (forall 'b. 'b -> ('a | 'b))
//│       = [Function: choose]

// let succ n = n + 1
// ;;
def succ n = n + 1
//│ succ: int -> int
//│     = [Function: succ]

// let test1 = delta id
test1 = delta id
//│ test1: Sid
//│      = [Function: id]

// untype delta succ
:e
delta succ
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.135: 	delta succ
//│ ║         	^^^^^^^^^^
//│ ╟── type `‘a` is not an instance of type `int`
//│ ║  l.101: 	type Sid = forall 'a. 'a -> 'a
//│ ║         	                  ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.124: 	def succ n = n + 1
//│ ╙──       	             ^
//│ res: error | Sid
//│    = 'function succ(n) {  return n + 1;}1'

// let test2 = delta (choose id id)
test2 = delta (choose id id)
//│ test2: Sid
//│      = [Function: id]

// untype delta (choose id succ)
:e
delta (choose id succ)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.155: 	delta (choose id succ)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a` is not an instance of type `int`
//│ ║  l.101: 	type Sid = forall 'a. 'a -> 'a
//│ ║         	                  ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.124: 	def succ n = n + 1
//│ ╙──       	             ^
//│ res: error | Sid
//│    = [Function: id]

// let test3 = choose id succ
test3 = choose id succ
//│ test3: int -> int
//│      = [Function: id]

// let test4 = choose succ id
// ;;
test4 = choose succ id
//│ test4: int -> int
//│      = [Function: succ]


// let eqstring s1 s2 = (s1^"A" = s2^"A")
def eqstring s1 s2 = eq (concat s1 "A") (concat s2 "A")
//│ eqstring: string -> string -> bool
//│         = [Function: eqstring]

// let eqint i1 i2 = (i1 - i2) = 0
def eqint i1 i2 = (i1 - i2) == 0
//│ eqint: int -> int -> bool
//│      = [Function: eqint]

// let eqbool b1 b2 = if b1 then b2 else (not b2)
def eqbool b1 b2 = if b1 then b2 else (not b2)
//│ eqbool: bool -> bool -> bool
//│       = [Function: eqbool]

// let ignore x = ()
def ignore x = null
//│ ignore: anything -> null
//│       = [Function: ignore]

// let rec listiter f ll =
//   if ll = [] then ()
//   else begin ignore (f (car ll)) ; listiter f (cdr ll) end
// ;;
rec def listiter f ll =
  if eq ll nil then null
  else
    let _ = ignore (f (head ll)) in 
    listiter f (tail ll)
//│ listiter: ('a -> anything & nothing -> anything) -> (forall 'a, 'a0, 'b. (List['a | 'a0] -> (null | 'b)
//│   where
//│     'c <: List['a0] -> 'b))
//│         = [Function: listiter]


// (* Polymorphic recursion. *)
// untype let rec id x = if true then x else id id x in id
let red id x = if true then x else id id x in id
//│ res: 'a -> 'a
//│    = [Function: id]


// let rec (id:sid) x = if true then x else id id x

def idd: Sid
//│ idd: Sid
//│    = <missing implementation>

def idd x = if true then x else idd idd x
//│ 'a -> 'a
//│   <:  idd:
//│ Sid
//│    = <no result>
//│      idd is not implemented

// * Note: Requires polymorphic recursion, so this doesn't work:
:e
def id: Sid
rec def id x = if true then x else id id x
//│ id: Sid
//│   = <missing implementation>
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d. (?b -> ?a
//│   where
//│     ?e <: ?b -> ?d) <: ?id` exceeded recursion depth limit (400)
//│ ║  l.238: 	rec def id x = if true then x else id id x
//│ ║         	           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α534',) -> α537')
//│ ╟── while constraining:  α427'  <!<  ((α534',) -> α537')
//│ ╟── while constraining:  (α427' <: ((α534',) -> α537') => (α534' -> α536'))  <!<  ((α530',) -> α533')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α530',) -> α533')
//│ ╟── while constraining:  α427'  <!<  ((α530',) -> α533')
//│ ╟── while constraining:  (α427' <: ((α530',) -> α533') => (α530' -> α532'))  <!<  ((α526',) -> α529')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α526',) -> α529')
//│ ╟── while constraining:  α427'  <!<  ((α526',) -> α529')
//│ ╟── while constraining:  (α427' <: ((α526',) -> α529') => (α526' -> α528'))  <!<  ((α522',) -> α525')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α522',) -> α525')
//│ ╟── while constraining:  α427'  <!<  ((α522',) -> α525')
//│ ╟── while constraining:  (α427' <: ((α522',) -> α525') => (α522' -> α524'))  <!<  ((α518',) -> α521')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α518',) -> α521')
//│ ╟── while constraining:  α427'  <!<  ((α518',) -> α521')
//│ ╟── while constraining:  (α427' <: ((α518',) -> α521') => (α518' -> α520'))  <!<  ((α514',) -> α517')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α514',) -> α517')
//│ ╟── while constraining:  α427'  <!<  ((α514',) -> α517')
//│ ╟── while constraining:  (α427' <: ((α514',) -> α517') => (α514' -> α516'))  <!<  ((α510',) -> α513')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α510',) -> α513')
//│ ╟── while constraining:  α427'  <!<  ((α510',) -> α513')
//│ ╟── while constraining:  (α427' <: ((α510',) -> α513') => (α510' -> α512'))  <!<  ((α506',) -> α509')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α506',) -> α509')
//│ ╟── while constraining:  α427'  <!<  ((α506',) -> α509')
//│ ╟── while constraining:  (α427' <: ((α506',) -> α509') => (α506' -> α508'))  <!<  ((α502',) -> α505')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α502',) -> α505')
//│ ╟── while constraining:  α427'  <!<  ((α502',) -> α505')
//│ ╟── while constraining:  (α427' <: ((α502',) -> α505') => (α502' -> α504'))  <!<  ((α498',) -> α501')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α498',) -> α501')
//│ ╟── while constraining:  α427'  <!<  ((α498',) -> α501')
//│ ╟── while constraining:  (α427' <: ((α498',) -> α501') => (α498' -> α500'))  <!<  ((α494',) -> α497')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α494',) -> α497')
//│ ╟── while constraining:  α427'  <!<  ((α494',) -> α497')
//│ ╟── while constraining:  (α427' <: ((α494',) -> α497') => (α494' -> α496'))  <!<  ((α490',) -> α493')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α490',) -> α493')
//│ ╟── while constraining:  α427'  <!<  ((α490',) -> α493')
//│ ╟── while constraining:  (α427' <: ((α490',) -> α493') => (α490' -> α492'))  <!<  ((α486',) -> α489')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α486',) -> α489')
//│ ╟── while constraining:  α427'  <!<  ((α486',) -> α489')
//│ ╟── while constraining:  (α427' <: ((α486',) -> α489') => (α486' -> α488'))  <!<  ((α482',) -> α485')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α482',) -> α485')
//│ ╟── while constraining:  α427'  <!<  ((α482',) -> α485')
//│ ╟── while constraining:  (α427' <: ((α482',) -> α485') => (α482' -> α484'))  <!<  ((α478',) -> α481')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α478',) -> α481')
//│ ╟── while constraining:  α427'  <!<  ((α478',) -> α481')
//│ ╟── while constraining:  (α427' <: ((α478',) -> α481') => (α478' -> α480'))  <!<  ((α474',) -> α477')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α474',) -> α477')
//│ ╟── while constraining:  α427'  <!<  ((α474',) -> α477')
//│ ╟── while constraining:  (α427' <: ((α474',) -> α477') => (α474' -> α476'))  <!<  ((α470',) -> α473')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α470',) -> α473')
//│ ╟── while constraining:  α427'  <!<  ((α470',) -> α473')
//│ ╟── while constraining:  (α427' <: ((α470',) -> α473') => (α470' -> α472'))  <!<  ((α466',) -> α469')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α466',) -> α469')
//│ ╟── while constraining:  α427'  <!<  ((α466',) -> α469')
//│ ╟── while constraining:  (α427' <: ((α466',) -> α469') => (α466' -> α468'))  <!<  ((α462',) -> α465')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α462',) -> α465')
//│ ╟── while constraining:  α427'  <!<  ((α462',) -> α465')
//│ ╟── while constraining:  (α427' <: ((α462',) -> α465') => (α462' -> α464'))  <!<  ((α458',) -> α461')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α458',) -> α461')
//│ ╟── while constraining:  α427'  <!<  ((α458',) -> α461')
//│ ╟── while constraining:  (α427' <: ((α458',) -> α461') => (α458' -> α460'))  <!<  ((α454',) -> α457')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α454',) -> α457')
//│ ╟── while constraining:  α427'  <!<  ((α454',) -> α457')
//│ ╟── while constraining:  (α427' <: ((α454',) -> α457') => (α454' -> α456'))  <!<  ((α450',) -> α453')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α450',) -> α453')
//│ ╟── while constraining:  α427'  <!<  ((α450',) -> α453')
//│ ╟── while constraining:  (α427' <: ((α450',) -> α453') => (α450' -> α452'))  <!<  ((α446',) -> α449')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α446',) -> α449')
//│ ╟── while constraining:  α427'  <!<  ((α446',) -> α449')
//│ ╟── while constraining:  (α427' <: ((α446',) -> α449') => (α446' -> α448'))  <!<  ((α442',) -> α445')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α442',) -> α445')
//│ ╟── while constraining:  α427'  <!<  ((α442',) -> α445')
//│ ╟── while constraining:  (α427' <: ((α442',) -> α445') => (α442' -> α444'))  <!<  ((α438',) -> α441')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α438',) -> α441')
//│ ╟── while constraining:  α427'  <!<  ((α438',) -> α441')
//│ ╟── while constraining:  (α427' <: ((α438',) -> α441') => (α438' -> α440'))  <!<  ((α434',) -> α437')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α434',) -> α437')
//│ ╟── while constraining:  α427'  <!<  ((α434',) -> α437')
//│ ╟── while constraining:  (α427' <: ((α434',) -> α437') => (α434' -> α436'))  <!<  ((α430',) -> α433')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α430',) -> α433')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  α427'
//│ ╟── while constraining:  α432'  <!<  α427'
//│ ╟── while constraining:  (α430' -> α432')  <!<  ((id421',) -> α427')
//│ ╟── while constraining:  (α427' <: ((α430',) -> α433') => (α430' -> α432'))  <!<  ((id421',) -> α427')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((id421',) -> α427')
//│ ╙── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  id421'
//│ ('a & 'b) -> 'b
//│   where
//│     'c <: 'a -> 'b
//│   <:  id:
//│ Sid
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r, ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1, ?i1, ?j1, ?k1, ?l1, ?m1, ?n1, ?o1, ?p1, ?q1, ?r1, ?s1, ?t1, ?u1, ?v1, ?w1, ?x1, ?y1, ?z1, ?a2, ?b2, ?c2, ?d2, ?e2, ?f2, ?g2, ?h2, ?i2, ?j2, ?k2, ?l2, ?m2, ?n2, ?o2, ?p2, ?q2, ?r2, ?s2, ?t2, ?u2, ?v2, ?w2, ?x2, ?y2, ?id, ?z2, ?a3, ?b3, ?c3, ?d3, ?e3, ?f3, ?g3, ?h3, ?i3, ?j3, ?k3, ?l3, ?m3, ?n3, ?o3, ?p3, ?q3, ?r3, ?s3, ?t3, ?u3, ?v3, ?w3, ?x3, ?y3, ?z3, ?a4, ?b4, ?c4, ?d4, ?e4, ?f4, ?g4, ?h4, ?i4, ?j4, ?k4, ?l4, ?m4, ?n4, ?o4, ?p4, ?q4, ?r4, ?s4, ?t4, ?u4, ?v4, ?w4, ?x4, ?y4, ?z4, ?a5, ?b5, ?c5, ?d5, ?e5, ?f5, ?g5, ?h5, ?i5, ?j5, ?k5, ?l5, ?m5, ?n5, ?o5, ?p5, ?q5, ?r5, ?s5, ?t5, ?u5, ?v5, ?w5, ?x5, ?y5, ?z5, ?a6, ?b6, ?c6, ?d6, ?e6, ?f6, ?g6, ?h6, ?i6, ?j6, ?k6, ?l6, ?m6, ?n6, ?o6, ?p6, ?q6, ?r6, ?s6, ?t6, ?u6, ?v6, ?w6, ?x6, ?y6, ?z6, ?a7, ?b7, ?c7, ?d7, ?e7, ?f7, ?g7, ?h7, ?i7, ?j7, ?k7, ?l7, ?m7, ?n7, ?o7, ?p7, ?q7, ?r7, ?s7, ?t7, ?u7, ?v7, ?w7, ?x7, ?y7, ?z7, ?a8, ?b8, ?c8, ?d8, ?e8. ?id <: Sid` exceeded recursion depth limit (400)
//│ ║  l.238: 	rec def id x = if true then x else id id x
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α946',) -> α947')
//│ ╟── while constraining:  α427'  <!<  ((α946',) -> α947')
//│ ╟── while constraining:  α427'  <!<  ((α942'',) -> α945'')
//│ ╟── while constraining:  (α427' <: ((α942'',) -> α945'') => (α942'' -> α944''))  <!<  ((α938',) -> α939')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α938',) -> α939')
//│ ╟── while constraining:  α427'  <!<  ((α938',) -> α939')
//│ ╟── while constraining:  α427'  <!<  ((α934'',) -> α937'')
//│ ╟── while constraining:  (α427' <: ((α934'',) -> α937'') => (α934'' -> α936''))  <!<  ((α930',) -> α931')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α930',) -> α931')
//│ ╟── while constraining:  α427'  <!<  ((α930',) -> α931')
//│ ╟── while constraining:  α427'  <!<  ((α926'',) -> α929'')
//│ ╟── while constraining:  (α427' <: ((α926'',) -> α929'') => (α926'' -> α928''))  <!<  ((α922',) -> α923')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α922',) -> α923')
//│ ╟── while constraining:  α427'  <!<  ((α922',) -> α923')
//│ ╟── while constraining:  α427'  <!<  ((α918'',) -> α921'')
//│ ╟── while constraining:  (α427' <: ((α918'',) -> α921'') => (α918'' -> α920''))  <!<  ((α914',) -> α915')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α914',) -> α915')
//│ ╟── while constraining:  α427'  <!<  ((α914',) -> α915')
//│ ╟── while constraining:  α427'  <!<  ((α910'',) -> α913'')
//│ ╟── while constraining:  (α427' <: ((α910'',) -> α913'') => (α910'' -> α912''))  <!<  ((α906',) -> α907')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α906',) -> α907')
//│ ╟── while constraining:  α427'  <!<  ((α906',) -> α907')
//│ ╟── while constraining:  α427'  <!<  ((α902'',) -> α905'')
//│ ╟── while constraining:  (α427' <: ((α902'',) -> α905'') => (α902'' -> α904''))  <!<  ((α898',) -> α899')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α898',) -> α899')
//│ ╟── while constraining:  α427'  <!<  ((α898',) -> α899')
//│ ╟── while constraining:  α427'  <!<  ((α894'',) -> α897'')
//│ ╟── while constraining:  (α427' <: ((α894'',) -> α897'') => (α894'' -> α896''))  <!<  ((α890',) -> α891')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α890',) -> α891')
//│ ╟── while constraining:  α427'  <!<  ((α890',) -> α891')
//│ ╟── while constraining:  α427'  <!<  ((α886'',) -> α889'')
//│ ╟── while constraining:  (α427' <: ((α886'',) -> α889'') => (α886'' -> α888''))  <!<  ((α882',) -> α883')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α882',) -> α883')
//│ ╟── while constraining:  α427'  <!<  ((α882',) -> α883')
//│ ╟── while constraining:  α427'  <!<  ((α878'',) -> α881'')
//│ ╟── while constraining:  (α427' <: ((α878'',) -> α881'') => (α878'' -> α880''))  <!<  ((α874',) -> α875')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α874',) -> α875')
//│ ╟── while constraining:  α427'  <!<  ((α874',) -> α875')
//│ ╟── while constraining:  α427'  <!<  ((α870'',) -> α873'')
//│ ╟── while constraining:  (α427' <: ((α870'',) -> α873'') => (α870'' -> α872''))  <!<  ((α866',) -> α867')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α866',) -> α867')
//│ ╟── while constraining:  α427'  <!<  ((α866',) -> α867')
//│ ╟── while constraining:  α427'  <!<  ((α862'',) -> α865'')
//│ ╟── while constraining:  (α427' <: ((α862'',) -> α865'') => (α862'' -> α864''))  <!<  ((α858',) -> α859')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α858',) -> α859')
//│ ╟── while constraining:  α427'  <!<  ((α858',) -> α859')
//│ ╟── while constraining:  α427'  <!<  ((α854'',) -> α857'')
//│ ╟── while constraining:  (α427' <: ((α854'',) -> α857'') => (α854'' -> α856''))  <!<  ((α850',) -> α851')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α850',) -> α851')
//│ ╟── while constraining:  α427'  <!<  ((α850',) -> α851')
//│ ╟── while constraining:  α427'  <!<  ((α846'',) -> α849'')
//│ ╟── while constraining:  (α427' <: ((α846'',) -> α849'') => (α846'' -> α848''))  <!<  ((α842',) -> α843')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α842',) -> α843')
//│ ╟── while constraining:  α427'  <!<  ((α842',) -> α843')
//│ ╟── while constraining:  α427'  <!<  ((α838'',) -> α841'')
//│ ╟── while constraining:  (α427' <: ((α838'',) -> α841'') => (α838'' -> α840''))  <!<  ((α834',) -> α835')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α834',) -> α835')
//│ ╟── while constraining:  α427'  <!<  ((α834',) -> α835')
//│ ╟── while constraining:  α427'  <!<  ((α830'',) -> α833'')
//│ ╟── while constraining:  (α427' <: ((α830'',) -> α833'') => (α830'' -> α832''))  <!<  ((α826',) -> α827')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α826',) -> α827')
//│ ╟── while constraining:  α427'  <!<  ((α826',) -> α827')
//│ ╟── while constraining:  α427'  <!<  ((α822'',) -> α825'')
//│ ╟── while constraining:  (α427' <: ((α822'',) -> α825'') => (α822'' -> α824''))  <!<  ((α818',) -> α819')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α818',) -> α819')
//│ ╟── while constraining:  α427'  <!<  ((α818',) -> α819')
//│ ╟── while constraining:  α427'  <!<  ((α814'',) -> α817'')
//│ ╟── while constraining:  (α427' <: ((α814'',) -> α817'') => (α814'' -> α816''))  <!<  ((α810',) -> α811')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α810',) -> α811')
//│ ╟── while constraining:  α427'  <!<  ((α810',) -> α811')
//│ ╟── while constraining:  α427'  <!<  ((α806'',) -> α809'')
//│ ╟── while constraining:  (α427' <: ((α806'',) -> α809'') => (α806'' -> α808''))  <!<  ((α802',) -> α803')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α802',) -> α803')
//│ ╟── while constraining:  α427'  <!<  ((α802',) -> α803')
//│ ╟── while constraining:  α427'  <!<  ((α798'',) -> α801'')
//│ ╟── while constraining:  (α427' <: ((α798'',) -> α801'') => (α798'' -> α800''))  <!<  ((α794',) -> α795')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α794',) -> α795')
//│ ╟── while constraining:  α427'  <!<  ((α794',) -> α795')
//│ ╟── while constraining:  α427'  <!<  ((α790'',) -> α793'')
//│ ╟── while constraining:  (α427' <: ((α790'',) -> α793'') => (α790'' -> α792''))  <!<  ((α786',) -> α787')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α786',) -> α787')
//│ ╟── while constraining:  α427'  <!<  ((α786',) -> α787')
//│ ╟── while constraining:  α427'  <!<  ((α782'',) -> α785'')
//│ ╟── while constraining:  (α427' <: ((α782'',) -> α785'') => (α782'' -> α784''))  <!<  ((α778',) -> α779')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α778',) -> α779')
//│ ╟── while constraining:  α427'  <!<  ((α778',) -> α779')
//│ ╟── while constraining:  α427'  <!<  ((α774'',) -> α777'')
//│ ╟── while constraining:  (α427' <: ((α774'',) -> α777'') => (α774'' -> α776''))  <!<  ((α770',) -> α771')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α770',) -> α771')
//│ ╟── while constraining:  α427'  <!<  ((α770',) -> α771')
//│ ╟── while constraining:  α427'  <!<  ((α766'',) -> α769'')
//│ ╟── while constraining:  (α427' <: ((α766'',) -> α769'') => (α766'' -> α768''))  <!<  ((α762',) -> α763')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α762',) -> α763')
//│ ╟── while constraining:  α427'  <!<  ((α762',) -> α763')
//│ ╟── while constraining:  α427'  <!<  ((α758'',) -> α761'')
//│ ╟── while constraining:  (α427' <: ((α758'',) -> α761'') => (α758'' -> α760''))  <!<  ((α754',) -> α755')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  ((α754',) -> α755')
//│ ╟── while constraining:  α427'  <!<  ((α754',) -> α755')
//│ ╟── while constraining:  α427'  <!<  ((α750'',) -> α753'')
//│ ╟── while constraining:  (α427' <: ((α750'',) -> α753'') => (α750'' -> α752''))  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 1. (α427' <: ((α422'',) -> α428'') => (α422'' -> α429''))›  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  id640''  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 0. id421'›  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 0. id421'›  <!<  ‹∀ 0. ('a188' -> 'a188')›
//│ ╟── while constraining:  ‹∀ 0. id421'›  <!<  Sid
//│ ╙── while constraining:  ‹∀ 0. id421'›  <!<  ‹∀ 0. Sid›
//│   = [Function: id1]

:e // not precise enough
rec def idd x = if true then x else idd idd x
id = idd
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d. (?b -> ?a
//│   where
//│     ?e <: ?b -> ?d) <: ?idd` exceeded recursion depth limit (400)
//│ ║  l.448: 	rec def idd x = if true then x else idd idd x
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1200',) -> α1203')
//│ ╟── while constraining:  α1093'  <!<  ((α1200',) -> α1203')
//│ ╟── while constraining:  (α1093' <: ((α1200',) -> α1203') => (α1200' -> α1202'))  <!<  ((α1196',) -> α1199')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1196',) -> α1199')
//│ ╟── while constraining:  α1093'  <!<  ((α1196',) -> α1199')
//│ ╟── while constraining:  (α1093' <: ((α1196',) -> α1199') => (α1196' -> α1198'))  <!<  ((α1192',) -> α1195')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1192',) -> α1195')
//│ ╟── while constraining:  α1093'  <!<  ((α1192',) -> α1195')
//│ ╟── while constraining:  (α1093' <: ((α1192',) -> α1195') => (α1192' -> α1194'))  <!<  ((α1188',) -> α1191')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1188',) -> α1191')
//│ ╟── while constraining:  α1093'  <!<  ((α1188',) -> α1191')
//│ ╟── while constraining:  (α1093' <: ((α1188',) -> α1191') => (α1188' -> α1190'))  <!<  ((α1184',) -> α1187')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1184',) -> α1187')
//│ ╟── while constraining:  α1093'  <!<  ((α1184',) -> α1187')
//│ ╟── while constraining:  (α1093' <: ((α1184',) -> α1187') => (α1184' -> α1186'))  <!<  ((α1180',) -> α1183')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1180',) -> α1183')
//│ ╟── while constraining:  α1093'  <!<  ((α1180',) -> α1183')
//│ ╟── while constraining:  (α1093' <: ((α1180',) -> α1183') => (α1180' -> α1182'))  <!<  ((α1176',) -> α1179')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1176',) -> α1179')
//│ ╟── while constraining:  α1093'  <!<  ((α1176',) -> α1179')
//│ ╟── while constraining:  (α1093' <: ((α1176',) -> α1179') => (α1176' -> α1178'))  <!<  ((α1172',) -> α1175')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1172',) -> α1175')
//│ ╟── while constraining:  α1093'  <!<  ((α1172',) -> α1175')
//│ ╟── while constraining:  (α1093' <: ((α1172',) -> α1175') => (α1172' -> α1174'))  <!<  ((α1168',) -> α1171')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1168',) -> α1171')
//│ ╟── while constraining:  α1093'  <!<  ((α1168',) -> α1171')
//│ ╟── while constraining:  (α1093' <: ((α1168',) -> α1171') => (α1168' -> α1170'))  <!<  ((α1164',) -> α1167')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1164',) -> α1167')
//│ ╟── while constraining:  α1093'  <!<  ((α1164',) -> α1167')
//│ ╟── while constraining:  (α1093' <: ((α1164',) -> α1167') => (α1164' -> α1166'))  <!<  ((α1160',) -> α1163')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1160',) -> α1163')
//│ ╟── while constraining:  α1093'  <!<  ((α1160',) -> α1163')
//│ ╟── while constraining:  (α1093' <: ((α1160',) -> α1163') => (α1160' -> α1162'))  <!<  ((α1156',) -> α1159')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1156',) -> α1159')
//│ ╟── while constraining:  α1093'  <!<  ((α1156',) -> α1159')
//│ ╟── while constraining:  (α1093' <: ((α1156',) -> α1159') => (α1156' -> α1158'))  <!<  ((α1152',) -> α1155')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1152',) -> α1155')
//│ ╟── while constraining:  α1093'  <!<  ((α1152',) -> α1155')
//│ ╟── while constraining:  (α1093' <: ((α1152',) -> α1155') => (α1152' -> α1154'))  <!<  ((α1148',) -> α1151')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1148',) -> α1151')
//│ ╟── while constraining:  α1093'  <!<  ((α1148',) -> α1151')
//│ ╟── while constraining:  (α1093' <: ((α1148',) -> α1151') => (α1148' -> α1150'))  <!<  ((α1144',) -> α1147')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1144',) -> α1147')
//│ ╟── while constraining:  α1093'  <!<  ((α1144',) -> α1147')
//│ ╟── while constraining:  (α1093' <: ((α1144',) -> α1147') => (α1144' -> α1146'))  <!<  ((α1140',) -> α1143')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1140',) -> α1143')
//│ ╟── while constraining:  α1093'  <!<  ((α1140',) -> α1143')
//│ ╟── while constraining:  (α1093' <: ((α1140',) -> α1143') => (α1140' -> α1142'))  <!<  ((α1136',) -> α1139')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1136',) -> α1139')
//│ ╟── while constraining:  α1093'  <!<  ((α1136',) -> α1139')
//│ ╟── while constraining:  (α1093' <: ((α1136',) -> α1139') => (α1136' -> α1138'))  <!<  ((α1132',) -> α1135')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1132',) -> α1135')
//│ ╟── while constraining:  α1093'  <!<  ((α1132',) -> α1135')
//│ ╟── while constraining:  (α1093' <: ((α1132',) -> α1135') => (α1132' -> α1134'))  <!<  ((α1128',) -> α1131')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1128',) -> α1131')
//│ ╟── while constraining:  α1093'  <!<  ((α1128',) -> α1131')
//│ ╟── while constraining:  (α1093' <: ((α1128',) -> α1131') => (α1128' -> α1130'))  <!<  ((α1124',) -> α1127')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1124',) -> α1127')
//│ ╟── while constraining:  α1093'  <!<  ((α1124',) -> α1127')
//│ ╟── while constraining:  (α1093' <: ((α1124',) -> α1127') => (α1124' -> α1126'))  <!<  ((α1120',) -> α1123')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1120',) -> α1123')
//│ ╟── while constraining:  α1093'  <!<  ((α1120',) -> α1123')
//│ ╟── while constraining:  (α1093' <: ((α1120',) -> α1123') => (α1120' -> α1122'))  <!<  ((α1116',) -> α1119')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1116',) -> α1119')
//│ ╟── while constraining:  α1093'  <!<  ((α1116',) -> α1119')
//│ ╟── while constraining:  (α1093' <: ((α1116',) -> α1119') => (α1116' -> α1118'))  <!<  ((α1112',) -> α1115')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1112',) -> α1115')
//│ ╟── while constraining:  α1093'  <!<  ((α1112',) -> α1115')
//│ ╟── while constraining:  (α1093' <: ((α1112',) -> α1115') => (α1112' -> α1114'))  <!<  ((α1108',) -> α1111')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1108',) -> α1111')
//│ ╟── while constraining:  α1093'  <!<  ((α1108',) -> α1111')
//│ ╟── while constraining:  (α1093' <: ((α1108',) -> α1111') => (α1108' -> α1110'))  <!<  ((α1104',) -> α1107')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1104',) -> α1107')
//│ ╟── while constraining:  α1093'  <!<  ((α1104',) -> α1107')
//│ ╟── while constraining:  (α1093' <: ((α1104',) -> α1107') => (α1104' -> α1106'))  <!<  ((α1100',) -> α1103')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1100',) -> α1103')
//│ ╟── while constraining:  α1093'  <!<  ((α1100',) -> α1103')
//│ ╟── while constraining:  (α1093' <: ((α1100',) -> α1103') => (α1100' -> α1102'))  <!<  ((α1096',) -> α1099')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1096',) -> α1099')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  α1093'
//│ ╟── while constraining:  α1098'  <!<  α1093'
//│ ╟── while constraining:  (α1096' -> α1098')  <!<  ((idd1087',) -> α1093')
//│ ╟── while constraining:  (α1093' <: ((α1096',) -> α1099') => (α1096' -> α1098'))  <!<  ((idd1087',) -> α1093')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((idd1087',) -> α1093')
//│ ╙── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  idd1087'
//│ ('a & 'b) -> 'b
//│   where
//│     'c <: 'a -> 'b
//│   <:  idd:
//│ Sid
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r, ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1, ?i1, ?j1, ?k1, ?l1, ?m1, ?n1, ?o1, ?p1, ?q1, ?r1, ?s1, ?t1, ?u1, ?v1, ?w1, ?x1, ?y1, ?z1, ?a2, ?b2, ?c2, ?d2, ?e2, ?f2, ?g2, ?h2, ?i2, ?j2, ?k2, ?l2, ?m2, ?n2, ?o2, ?p2, ?q2, ?r2, ?s2, ?t2, ?u2, ?v2, ?w2, ?x2, ?y2, ?idd, ?z2, ?a3, ?b3, ?c3, ?d3, ?e3, ?f3, ?g3, ?h3, ?i3, ?j3, ?k3, ?l3, ?m3, ?n3, ?o3, ?p3, ?q3, ?r3, ?s3, ?t3, ?u3, ?v3, ?w3, ?x3, ?y3, ?z3, ?a4, ?b4, ?c4, ?d4, ?e4, ?f4, ?g4, ?h4, ?i4, ?j4, ?k4, ?l4, ?m4, ?n4, ?o4, ?p4, ?q4, ?r4, ?s4, ?t4, ?u4, ?v4, ?w4, ?x4, ?y4, ?z4, ?a5, ?b5, ?c5, ?d5, ?e5, ?f5, ?g5, ?h5, ?i5, ?j5, ?k5, ?l5, ?m5, ?n5, ?o5, ?p5, ?q5, ?r5, ?s5, ?t5, ?u5, ?v5, ?w5, ?x5, ?y5, ?z5, ?a6, ?b6, ?c6, ?d6, ?e6, ?f6, ?g6, ?h6, ?i6, ?j6, ?k6, ?l6, ?m6, ?n6, ?o6, ?p6, ?q6, ?r6, ?s6, ?t6, ?u6, ?v6, ?w6, ?x6, ?y6, ?z6, ?a7, ?b7, ?c7, ?d7, ?e7, ?f7, ?g7, ?h7, ?i7, ?j7, ?k7, ?l7, ?m7, ?n7, ?o7, ?p7, ?q7, ?r7, ?s7, ?t7, ?u7, ?v7, ?w7, ?x7, ?y7, ?z7, ?a8, ?b8, ?c8, ?d8, ?e8. ?idd <: Sid` exceeded recursion depth limit (400)
//│ ║  l.448: 	rec def idd x = if true then x else idd idd x
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1612',) -> α1613')
//│ ╟── while constraining:  α1093'  <!<  ((α1612',) -> α1613')
//│ ╟── while constraining:  α1093'  <!<  ((α1608'',) -> α1611'')
//│ ╟── while constraining:  (α1093' <: ((α1608'',) -> α1611'') => (α1608'' -> α1610''))  <!<  ((α1604',) -> α1605')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1604',) -> α1605')
//│ ╟── while constraining:  α1093'  <!<  ((α1604',) -> α1605')
//│ ╟── while constraining:  α1093'  <!<  ((α1600'',) -> α1603'')
//│ ╟── while constraining:  (α1093' <: ((α1600'',) -> α1603'') => (α1600'' -> α1602''))  <!<  ((α1596',) -> α1597')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1596',) -> α1597')
//│ ╟── while constraining:  α1093'  <!<  ((α1596',) -> α1597')
//│ ╟── while constraining:  α1093'  <!<  ((α1592'',) -> α1595'')
//│ ╟── while constraining:  (α1093' <: ((α1592'',) -> α1595'') => (α1592'' -> α1594''))  <!<  ((α1588',) -> α1589')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1588',) -> α1589')
//│ ╟── while constraining:  α1093'  <!<  ((α1588',) -> α1589')
//│ ╟── while constraining:  α1093'  <!<  ((α1584'',) -> α1587'')
//│ ╟── while constraining:  (α1093' <: ((α1584'',) -> α1587'') => (α1584'' -> α1586''))  <!<  ((α1580',) -> α1581')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1580',) -> α1581')
//│ ╟── while constraining:  α1093'  <!<  ((α1580',) -> α1581')
//│ ╟── while constraining:  α1093'  <!<  ((α1576'',) -> α1579'')
//│ ╟── while constraining:  (α1093' <: ((α1576'',) -> α1579'') => (α1576'' -> α1578''))  <!<  ((α1572',) -> α1573')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1572',) -> α1573')
//│ ╟── while constraining:  α1093'  <!<  ((α1572',) -> α1573')
//│ ╟── while constraining:  α1093'  <!<  ((α1568'',) -> α1571'')
//│ ╟── while constraining:  (α1093' <: ((α1568'',) -> α1571'') => (α1568'' -> α1570''))  <!<  ((α1564',) -> α1565')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1564',) -> α1565')
//│ ╟── while constraining:  α1093'  <!<  ((α1564',) -> α1565')
//│ ╟── while constraining:  α1093'  <!<  ((α1560'',) -> α1563'')
//│ ╟── while constraining:  (α1093' <: ((α1560'',) -> α1563'') => (α1560'' -> α1562''))  <!<  ((α1556',) -> α1557')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1556',) -> α1557')
//│ ╟── while constraining:  α1093'  <!<  ((α1556',) -> α1557')
//│ ╟── while constraining:  α1093'  <!<  ((α1552'',) -> α1555'')
//│ ╟── while constraining:  (α1093' <: ((α1552'',) -> α1555'') => (α1552'' -> α1554''))  <!<  ((α1548',) -> α1549')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1548',) -> α1549')
//│ ╟── while constraining:  α1093'  <!<  ((α1548',) -> α1549')
//│ ╟── while constraining:  α1093'  <!<  ((α1544'',) -> α1547'')
//│ ╟── while constraining:  (α1093' <: ((α1544'',) -> α1547'') => (α1544'' -> α1546''))  <!<  ((α1540',) -> α1541')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1540',) -> α1541')
//│ ╟── while constraining:  α1093'  <!<  ((α1540',) -> α1541')
//│ ╟── while constraining:  α1093'  <!<  ((α1536'',) -> α1539'')
//│ ╟── while constraining:  (α1093' <: ((α1536'',) -> α1539'') => (α1536'' -> α1538''))  <!<  ((α1532',) -> α1533')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1532',) -> α1533')
//│ ╟── while constraining:  α1093'  <!<  ((α1532',) -> α1533')
//│ ╟── while constraining:  α1093'  <!<  ((α1528'',) -> α1531'')
//│ ╟── while constraining:  (α1093' <: ((α1528'',) -> α1531'') => (α1528'' -> α1530''))  <!<  ((α1524',) -> α1525')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1524',) -> α1525')
//│ ╟── while constraining:  α1093'  <!<  ((α1524',) -> α1525')
//│ ╟── while constraining:  α1093'  <!<  ((α1520'',) -> α1523'')
//│ ╟── while constraining:  (α1093' <: ((α1520'',) -> α1523'') => (α1520'' -> α1522''))  <!<  ((α1516',) -> α1517')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1516',) -> α1517')
//│ ╟── while constraining:  α1093'  <!<  ((α1516',) -> α1517')
//│ ╟── while constraining:  α1093'  <!<  ((α1512'',) -> α1515'')
//│ ╟── while constraining:  (α1093' <: ((α1512'',) -> α1515'') => (α1512'' -> α1514''))  <!<  ((α1508',) -> α1509')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1508',) -> α1509')
//│ ╟── while constraining:  α1093'  <!<  ((α1508',) -> α1509')
//│ ╟── while constraining:  α1093'  <!<  ((α1504'',) -> α1507'')
//│ ╟── while constraining:  (α1093' <: ((α1504'',) -> α1507'') => (α1504'' -> α1506''))  <!<  ((α1500',) -> α1501')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1500',) -> α1501')
//│ ╟── while constraining:  α1093'  <!<  ((α1500',) -> α1501')
//│ ╟── while constraining:  α1093'  <!<  ((α1496'',) -> α1499'')
//│ ╟── while constraining:  (α1093' <: ((α1496'',) -> α1499'') => (α1496'' -> α1498''))  <!<  ((α1492',) -> α1493')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1492',) -> α1493')
//│ ╟── while constraining:  α1093'  <!<  ((α1492',) -> α1493')
//│ ╟── while constraining:  α1093'  <!<  ((α1488'',) -> α1491'')
//│ ╟── while constraining:  (α1093' <: ((α1488'',) -> α1491'') => (α1488'' -> α1490''))  <!<  ((α1484',) -> α1485')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1484',) -> α1485')
//│ ╟── while constraining:  α1093'  <!<  ((α1484',) -> α1485')
//│ ╟── while constraining:  α1093'  <!<  ((α1480'',) -> α1483'')
//│ ╟── while constraining:  (α1093' <: ((α1480'',) -> α1483'') => (α1480'' -> α1482''))  <!<  ((α1476',) -> α1477')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1476',) -> α1477')
//│ ╟── while constraining:  α1093'  <!<  ((α1476',) -> α1477')
//│ ╟── while constraining:  α1093'  <!<  ((α1472'',) -> α1475'')
//│ ╟── while constraining:  (α1093' <: ((α1472'',) -> α1475'') => (α1472'' -> α1474''))  <!<  ((α1468',) -> α1469')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1468',) -> α1469')
//│ ╟── while constraining:  α1093'  <!<  ((α1468',) -> α1469')
//│ ╟── while constraining:  α1093'  <!<  ((α1464'',) -> α1467'')
//│ ╟── while constraining:  (α1093' <: ((α1464'',) -> α1467'') => (α1464'' -> α1466''))  <!<  ((α1460',) -> α1461')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1460',) -> α1461')
//│ ╟── while constraining:  α1093'  <!<  ((α1460',) -> α1461')
//│ ╟── while constraining:  α1093'  <!<  ((α1456'',) -> α1459'')
//│ ╟── while constraining:  (α1093' <: ((α1456'',) -> α1459'') => (α1456'' -> α1458''))  <!<  ((α1452',) -> α1453')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1452',) -> α1453')
//│ ╟── while constraining:  α1093'  <!<  ((α1452',) -> α1453')
//│ ╟── while constraining:  α1093'  <!<  ((α1448'',) -> α1451'')
//│ ╟── while constraining:  (α1093' <: ((α1448'',) -> α1451'') => (α1448'' -> α1450''))  <!<  ((α1444',) -> α1445')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1444',) -> α1445')
//│ ╟── while constraining:  α1093'  <!<  ((α1444',) -> α1445')
//│ ╟── while constraining:  α1093'  <!<  ((α1440'',) -> α1443'')
//│ ╟── while constraining:  (α1093' <: ((α1440'',) -> α1443'') => (α1440'' -> α1442''))  <!<  ((α1436',) -> α1437')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1436',) -> α1437')
//│ ╟── while constraining:  α1093'  <!<  ((α1436',) -> α1437')
//│ ╟── while constraining:  α1093'  <!<  ((α1432'',) -> α1435'')
//│ ╟── while constraining:  (α1093' <: ((α1432'',) -> α1435'') => (α1432'' -> α1434''))  <!<  ((α1428',) -> α1429')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1428',) -> α1429')
//│ ╟── while constraining:  α1093'  <!<  ((α1428',) -> α1429')
//│ ╟── while constraining:  α1093'  <!<  ((α1424'',) -> α1427'')
//│ ╟── while constraining:  (α1093' <: ((α1424'',) -> α1427'') => (α1424'' -> α1426''))  <!<  ((α1420',) -> α1421')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  ((α1420',) -> α1421')
//│ ╟── while constraining:  α1093'  <!<  ((α1420',) -> α1421')
//│ ╟── while constraining:  α1093'  <!<  ((α1416'',) -> α1419'')
//│ ╟── while constraining:  (α1093' <: ((α1416'',) -> α1419'') => (α1416'' -> α1418''))  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 1. (α1093' <: ((α1088'',) -> α1094'') => (α1088'' -> α1095''))›  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  idd1306''  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 0. idd1087'›  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 0. idd1087'›  <!<  ‹∀ 0. ('a188' -> 'a188')›
//│ ╟── while constraining:  ‹∀ 0. idd1087'›  <!<  Sid
//│ ╙── while constraining:  ‹∀ 0. idd1087'›  <!<  ‹∀ 0. Sid›
//│    = [Function: idd1]
//│ Sid
//│   <:  id:
//│ Sid
//│   = [Function: idd1]

// emulates annotated rec def
def id x = if true then x else id id x
//│ 'a -> 'a
//│   <:  id:
//│ Sid
//│   = [Function: id3]




// (* Existential types. *)
// (* Creating an encapsulation is explicit (unavoidable). *)
// (* Here, we build (Exist 'a . 'a * ('a -> unit))              *)
// (*        then    (Exist 'a . 'a * 'a * ('a -> 'a -> bool))   *)
// let make_ex1 x (f:['a] ('a * ('a -> 'c)) -> 'b) = f x
def make_ex1 x (f: forall 'a. (('a, 'a -> 'c),) -> 'b) = f x
//│ make_ex1: 'b -> (forall 'a, 'c, 'd. ((forall 'a0. ('a0, 'a0 -> 'c,) -> 'd) -> 'd
//│   where
//│     'b <: ('a, 'a -> 'c,)))
//│         = [Function: make_ex1]

// let make_ex2 x (f:['a] ('a * 'a * ('a -> 'a -> 'c)) -> 'b) = f x
// ;;
def make_ex2 x (f: forall 'a. (('a, 'a, 'a -> 'a -> 'c),) -> 'b) = f x
//│ make_ex2: 'b -> (forall 'a, 'c, 'd. ((forall 'a0. ('a0, 'a0, 'a0 -> 'a0 -> 'c,) -> 'd) -> 'd
//│   where
//│     'b <: ('a, 'a, 'a -> 'a -> 'c,)))
//│         = [Function: make_ex2]

// let ex_list1 = [ make_ex1 ("A String", print_string) ; 
// 		 make_ex1 (8250, print_int) ;
// 		 make_ex1 (true, print_bool) ]
// ;;
:ng
ex_list1 = cons (make_ex1 (("A String", print_string)))
  (cons (make_ex1 ((8250, print_int)))
  (cons (make_ex1 ((true, print_bool))) nil))
//│ ex_list1: List[forall 'a, 'c, 'b. ((forall 'a0. ('a0, 'a0 -> 'c,) -> 'b) -> 'b
//│   where
//│     'd <: ('a, 'a -> 'c,))]

// let ex_list2 = [ make_ex2 ("String", "String", eqstring) ;
// 		 make_ex2 ( 1250, 4890, eqint) ;
// 		 make_ex2 ( true, false, eqbool) ]
// ;;
ex_list2 = cons (make_ex2 (("String", "String", eqstring)))
  (cons (make_ex2 ((1250, 4890, eqint)))
  (cons (make_ex2 ((true, false, eqbool))) nil))
//│ ex_list2: List[forall 'a, 'c, 'b. ((forall 'a0. ('a0, 'a0, 'a0 -> 'a0 -> 'c,) -> 'b) -> 'b
//│   where
//│     'd <: ('a, 'a, 'a -> 'a -> 'c,))]
//│         = Cons {
//│             head: [Function (anonymous)],
//│             tail: Cons {
//│               head: [Function (anonymous)],
//│               tail: Cons { head: [Function (anonymous)], tail: Nil {} }
//│             }
//│           }


// let test1 = listiter (fun ex -> ex (fun p -> (snd p) (fst p))) ex_list1
// ;;
:ng
test1 = listiter (fun ex -> ex (fun p -> p._2 p._1)) ex_list1
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?c, ?d, ?e, ?b. ?d) -> ?f` exceeded recursion depth limit (400)
//│ ║  l.723: 	test1 = listiter (fun ex -> ex (fun p -> p._2 p._1)) ex_list1
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (α344' <: ((α2574',) -> α2576') => (α2579' -> α2578'))  <!<  ((α2566',) -> α2568')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2566',) -> α2568')
//│ ╟── while constraining:  α344'  <!<  ((α2566',) -> α2568')
//│ ╟── while constraining:  (α344' <: ((α2566',) -> α2568') => (α2571' -> α2570'))  <!<  ((α2558',) -> α2560')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2558',) -> α2560')
//│ ╟── while constraining:  α344'  <!<  ((α2558',) -> α2560')
//│ ╟── while constraining:  (α344' <: ((α2558',) -> α2560') => (α2563' -> α2562'))  <!<  ((α2550',) -> α2552')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2550',) -> α2552')
//│ ╟── while constraining:  α344'  <!<  ((α2550',) -> α2552')
//│ ╟── while constraining:  (α344' <: ((α2550',) -> α2552') => (α2555' -> α2554'))  <!<  ((α2542',) -> α2544')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2542',) -> α2544')
//│ ╟── while constraining:  α344'  <!<  ((α2542',) -> α2544')
//│ ╟── while constraining:  (α344' <: ((α2542',) -> α2544') => (α2547' -> α2546'))  <!<  ((α2534',) -> α2536')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2534',) -> α2536')
//│ ╟── while constraining:  α344'  <!<  ((α2534',) -> α2536')
//│ ╟── while constraining:  (α344' <: ((α2534',) -> α2536') => (α2539' -> α2538'))  <!<  ((α2526',) -> α2528')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2526',) -> α2528')
//│ ╟── while constraining:  α344'  <!<  ((α2526',) -> α2528')
//│ ╟── while constraining:  (α344' <: ((α2526',) -> α2528') => (α2531' -> α2530'))  <!<  ((α2518',) -> α2520')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2518',) -> α2520')
//│ ╟── while constraining:  α344'  <!<  ((α2518',) -> α2520')
//│ ╟── while constraining:  (α344' <: ((α2518',) -> α2520') => (α2523' -> α2522'))  <!<  ((α2510',) -> α2512')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2510',) -> α2512')
//│ ╟── while constraining:  α344'  <!<  ((α2510',) -> α2512')
//│ ╟── while constraining:  (α344' <: ((α2510',) -> α2512') => (α2515' -> α2514'))  <!<  ((α2502',) -> α2504')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2502',) -> α2504')
//│ ╟── while constraining:  α344'  <!<  ((α2502',) -> α2504')
//│ ╟── while constraining:  (α344' <: ((α2502',) -> α2504') => (α2507' -> α2506'))  <!<  ((α2494',) -> α2496')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2494',) -> α2496')
//│ ╟── while constraining:  α344'  <!<  ((α2494',) -> α2496')
//│ ╟── while constraining:  (α344' <: ((α2494',) -> α2496') => (α2499' -> α2498'))  <!<  ((α2486',) -> α2488')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2486',) -> α2488')
//│ ╟── while constraining:  α344'  <!<  ((α2486',) -> α2488')
//│ ╟── while constraining:  (α344' <: ((α2486',) -> α2488') => (α2491' -> α2490'))  <!<  ((α2478',) -> α2480')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2478',) -> α2480')
//│ ╟── while constraining:  α344'  <!<  ((α2478',) -> α2480')
//│ ╟── while constraining:  (α344' <: ((α2478',) -> α2480') => (α2483' -> α2482'))  <!<  ((α2470',) -> α2472')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2470',) -> α2472')
//│ ╟── while constraining:  α344'  <!<  ((α2470',) -> α2472')
//│ ╟── while constraining:  (α344' <: ((α2470',) -> α2472') => (α2475' -> α2474'))  <!<  ((α2462',) -> α2464')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2462',) -> α2464')
//│ ╟── while constraining:  α344'  <!<  ((α2462',) -> α2464')
//│ ╟── while constraining:  (α344' <: ((α2462',) -> α2464') => (α2467' -> α2466'))  <!<  ((α2454',) -> α2456')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2454',) -> α2456')
//│ ╟── while constraining:  α344'  <!<  ((α2454',) -> α2456')
//│ ╟── while constraining:  (α344' <: ((α2454',) -> α2456') => (α2459' -> α2458'))  <!<  ((α2446',) -> α2448')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2446',) -> α2448')
//│ ╟── while constraining:  α344'  <!<  ((α2446',) -> α2448')
//│ ╟── while constraining:  (α344' <: ((α2446',) -> α2448') => (α2451' -> α2450'))  <!<  ((α2438',) -> α2440')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2438',) -> α2440')
//│ ╟── while constraining:  α344'  <!<  ((α2438',) -> α2440')
//│ ╟── while constraining:  (α344' <: ((α2438',) -> α2440') => (α2443' -> α2442'))  <!<  ((α2430',) -> α2432')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2430',) -> α2432')
//│ ╟── while constraining:  α344'  <!<  ((α2430',) -> α2432')
//│ ╟── while constraining:  (α344' <: ((α2430',) -> α2432') => (α2435' -> α2434'))  <!<  ((α2422',) -> α2424')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2422',) -> α2424')
//│ ╟── while constraining:  α344'  <!<  ((α2422',) -> α2424')
//│ ╟── while constraining:  (α344' <: ((α2422',) -> α2424') => (α2427' -> α2426'))  <!<  ((α2414',) -> α2416')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2414',) -> α2416')
//│ ╟── while constraining:  α344'  <!<  ((α2414',) -> α2416')
//│ ╟── while constraining:  (α344' <: ((α2414',) -> α2416') => (α2419' -> α2418'))  <!<  ((α2406',) -> α2408')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2406',) -> α2408')
//│ ╟── while constraining:  α344'  <!<  ((α2406',) -> α2408')
//│ ╟── while constraining:  (α344' <: ((α2406',) -> α2408') => (α2411' -> α2410'))  <!<  ((α2398',) -> α2400')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2398',) -> α2400')
//│ ╟── while constraining:  α344'  <!<  ((α2398',) -> α2400')
//│ ╟── while constraining:  (α344' <: ((α2398',) -> α2400') => (α2403' -> α2402'))  <!<  ((α2390',) -> α2392')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2390',) -> α2392')
//│ ╟── while constraining:  α344'  <!<  ((α2390',) -> α2392')
//│ ╟── while constraining:  (α344' <: ((α2390',) -> α2392') => (α2395' -> α2394'))  <!<  ((α2382',) -> α2384')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2382',) -> α2384')
//│ ╟── while constraining:  α344'  <!<  ((α2382',) -> α2384')
//│ ╟── while constraining:  (α344' <: ((α2382',) -> α2384') => (α2387' -> α2386'))  <!<  ((α2374',) -> α2376')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2374',) -> α2376')
//│ ╟── while constraining:  α344'  <!<  ((α2374',) -> α2376')
//│ ╟── while constraining:  (α344' <: ((α2374',) -> α2376') => (α2379' -> α2378'))  <!<  ((α2366',) -> α2368')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2366',) -> α2368')
//│ ╟── while constraining:  α344'  <!<  ((α2366',) -> α2368')
//│ ╟── while constraining:  (α344' <: ((α2366',) -> α2368') => (α2371' -> α2370'))  <!<  ((α2358',) -> α2360')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2358',) -> α2360')
//│ ╟── while constraining:  α344'  <!<  ((α2358',) -> α2360')
//│ ╟── while constraining:  (α344' <: ((α2358',) -> α2360') => (α2363' -> α2362'))  <!<  ((α2350',) -> α2352')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2350',) -> α2352')
//│ ╟── while constraining:  α344'  <!<  ((α2350',) -> α2352')
//│ ╟── while constraining:  (α344' <: ((α2350',) -> α2352') => (α2355' -> α2354'))  <!<  ((α2342',) -> α2344')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2342',) -> α2344')
//│ ╟── while constraining:  α344'  <!<  ((α2342',) -> α2344')
//│ ╟── while constraining:  (α344' <: ((α2342',) -> α2344') => (α2347' -> α2346'))  <!<  ((α2334',) -> α2336')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2334',) -> α2336')
//│ ╟── while constraining:  α344'  <!<  ((α2334',) -> α2336')
//│ ╟── while constraining:  (α344' <: ((α2334',) -> α2336') => (α2339' -> α2338'))  <!<  ((α2326',) -> α2328')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2326',) -> α2328')
//│ ╟── while constraining:  α344'  <!<  ((α2326',) -> α2328')
//│ ╟── while constraining:  (α344' <: ((α2326',) -> α2328') => (α2331' -> α2330'))  <!<  ((α2318',) -> α2320')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2318',) -> α2320')
//│ ╟── while constraining:  α344'  <!<  ((α2318',) -> α2320')
//│ ╟── while constraining:  (α344' <: ((α2318',) -> α2320') => (α2323' -> α2322'))  <!<  ((α2310',) -> α2312')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2310',) -> α2312')
//│ ╟── while constraining:  α344'  <!<  ((α2310',) -> α2312')
//│ ╟── while constraining:  (α344' <: ((α2310',) -> α2312') => (α2315' -> α2314'))  <!<  ((α2302',) -> α2304')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2302',) -> α2304')
//│ ╟── while constraining:  α344'  <!<  ((α2302',) -> α2304')
//│ ╟── while constraining:  (α344' <: ((α2302',) -> α2304') => (α2307' -> α2306'))  <!<  ((α2294',) -> α2296')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2294',) -> α2296')
//│ ╟── while constraining:  α344'  <!<  ((α2294',) -> α2296')
//│ ╟── while constraining:  (α344' <: ((α2294',) -> α2296') => (α2299' -> α2298'))  <!<  ((α2286',) -> α2288')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2286',) -> α2288')
//│ ╟── while constraining:  α344'  <!<  ((α2286',) -> α2288')
//│ ╟── while constraining:  (α344' <: ((α2286',) -> α2288') => (α2291' -> α2290'))  <!<  ((α2278',) -> α2280')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2278',) -> α2280')
//│ ╟── while constraining:  α344'  <!<  ((α2278',) -> α2280')
//│ ╟── while constraining:  (α344' <: ((α2278',) -> α2280') => (α2283' -> α2282'))  <!<  ((α2270',) -> α2272')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2270',) -> α2272')
//│ ╟── while constraining:  α344'  <!<  ((α2270',) -> α2272')
//│ ╟── while constraining:  (α344' <: ((α2270',) -> α2272') => (α2275' -> α2274'))  <!<  ((α2262',) -> α2264')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2262',) -> α2264')
//│ ╟── while constraining:  α344'  <!<  ((α2262',) -> α2264')
//│ ╟── while constraining:  (α344' <: ((α2262',) -> α2264') => (α2267' -> α2266'))  <!<  ((α2254',) -> α2256')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2254',) -> α2256')
//│ ╟── while constraining:  α344'  <!<  ((α2254',) -> α2256')
//│ ╟── while constraining:  (α344' <: ((α2254',) -> α2256') => (α2259' -> α2258'))  <!<  ((α2246',) -> α2248')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2246',) -> α2248')
//│ ╟── while constraining:  α344'  <!<  ((α2246',) -> α2248')
//│ ╟── while constraining:  (α344' <: ((α2246',) -> α2248') => (α2251' -> α2250'))  <!<  ((α2238',) -> α2240')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2238',) -> α2240')
//│ ╟── while constraining:  α344'  <!<  ((α2238',) -> α2240')
//│ ╟── while constraining:  (α344' <: ((α2238',) -> α2240') => (α2243' -> α2242'))  <!<  ((α2230',) -> α2232')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2230',) -> α2232')
//│ ╟── while constraining:  α344'  <!<  ((α2230',) -> α2232')
//│ ╟── while constraining:  (α344' <: ((α2230',) -> α2232') => (α2235' -> α2234'))  <!<  ((α2222',) -> α2224')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2222',) -> α2224')
//│ ╟── while constraining:  α344'  <!<  ((α2222',) -> α2224')
//│ ╟── while constraining:  (α344' <: ((α2222',) -> α2224') => (α2227' -> α2226'))  <!<  ((α2214',) -> α2216')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2214',) -> α2216')
//│ ╟── while constraining:  α344'  <!<  ((α2214',) -> α2216')
//│ ╟── while constraining:  (α344' <: ((α2214',) -> α2216') => (α2219' -> α2218'))  <!<  ((α2206',) -> α2208')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2206',) -> α2208')
//│ ╟── while constraining:  α344'  <!<  ((α2206',) -> α2208')
//│ ╟── while constraining:  (α344' <: ((α2206',) -> α2208') => (α2211' -> α2210'))  <!<  ((α2198',) -> α2200')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2198',) -> α2200')
//│ ╟── while constraining:  α344'  <!<  ((α2198',) -> α2200')
//│ ╟── while constraining:  (α344' <: ((α2198',) -> α2200') => (α2203' -> α2202'))  <!<  ((α2190',) -> α2192')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2190',) -> α2192')
//│ ╟── while constraining:  α344'  <!<  ((α2190',) -> α2192')
//│ ╟── while constraining:  (α344' <: ((α2190',) -> α2192') => (α2195' -> α2194'))  <!<  ((α2182',) -> α2184')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2182',) -> α2184')
//│ ╟── while constraining:  α344'  <!<  ((α2182',) -> α2184')
//│ ╟── while constraining:  (α344' <: ((α2182',) -> α2184') => (α2187' -> α2186'))  <!<  ((α2174',) -> α2176')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2174',) -> α2176')
//│ ╟── while constraining:  α344'  <!<  ((α2174',) -> α2176')
//│ ╟── while constraining:  (α344' <: ((α2174',) -> α2176') => (α2179' -> α2178'))  <!<  ((α2166',) -> α2168')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2166',) -> α2168')
//│ ╟── while constraining:  α344'  <!<  ((α2166',) -> α2168')
//│ ╟── while constraining:  (α344' <: ((α2166',) -> α2168') => (α2171' -> α2170'))  <!<  ((α2158',) -> α2160')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2158',) -> α2160')
//│ ╟── while constraining:  α344'  <!<  ((α2158',) -> α2160')
//│ ╟── while constraining:  (α344' <: ((α2158',) -> α2160') => (α2163' -> α2162'))  <!<  ((α2150',) -> α2152')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2150',) -> α2152')
//│ ╟── while constraining:  α344'  <!<  ((α2150',) -> α2152')
//│ ╟── while constraining:  (α344' <: ((α2150',) -> α2152') => (α2155' -> α2154'))  <!<  ((α2142',) -> α2144')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2142',) -> α2144')
//│ ╟── while constraining:  α344'  <!<  ((α2142',) -> α2144')
//│ ╟── while constraining:  (α344' <: ((α2142',) -> α2144') => (α2147' -> α2146'))  <!<  ((α2134',) -> α2136')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2134',) -> α2136')
//│ ╟── while constraining:  α344'  <!<  ((α2134',) -> α2136')
//│ ╟── while constraining:  (α344' <: ((α2134',) -> α2136') => (α2139' -> α2138'))  <!<  ((α2126',) -> α2128')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2126',) -> α2128')
//│ ╟── while constraining:  α344'  <!<  ((α2126',) -> α2128')
//│ ╟── while constraining:  (α344' <: ((α2126',) -> α2128') => (α2131' -> α2130'))  <!<  ((α2118',) -> α2120')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2118',) -> α2120')
//│ ╟── while constraining:  α344'  <!<  ((α2118',) -> α2120')
//│ ╟── while constraining:  (α344' <: ((α2118',) -> α2120') => (α2123' -> α2122'))  <!<  ((α2110',) -> α2112')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2110',) -> α2112')
//│ ╟── while constraining:  α344'  <!<  ((α2110',) -> α2112')
//│ ╟── while constraining:  (α344' <: ((α2110',) -> α2112') => (α2115' -> α2114'))  <!<  ((α2102',) -> α2104')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2102',) -> α2104')
//│ ╟── while constraining:  α344'  <!<  ((α2102',) -> α2104')
//│ ╟── while constraining:  (α344' <: ((α2102',) -> α2104') => (α2107' -> α2106'))  <!<  ((α2094',) -> α2096')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2094',) -> α2096')
//│ ╟── while constraining:  α344'  <!<  ((α2094',) -> α2096')
//│ ╟── while constraining:  (α344' <: ((α2094',) -> α2096') => (α2099' -> α2098'))  <!<  ((α2086',) -> α2088')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2086',) -> α2088')
//│ ╟── while constraining:  α344'  <!<  ((α2086',) -> α2088')
//│ ╟── while constraining:  (α344' <: ((α2086',) -> α2088') => (α2091' -> α2090'))  <!<  ((α2078',) -> α2080')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2078',) -> α2080')
//│ ╟── while constraining:  α344'  <!<  ((α2078',) -> α2080')
//│ ╟── while constraining:  (α344' <: ((α2078',) -> α2080') => (α2083' -> α2082'))  <!<  ((α2070',) -> α2072')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2070',) -> α2072')
//│ ╟── while constraining:  α344'  <!<  ((α2070',) -> α2072')
//│ ╟── while constraining:  (α344' <: ((α2070',) -> α2072') => (α2075' -> α2074'))  <!<  ((α2062',) -> α2064')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2062',) -> α2064')
//│ ╟── while constraining:  α344'  <!<  ((α2062',) -> α2064')
//│ ╟── while constraining:  (α344' <: ((α2062',) -> α2064') => (α2067' -> α2066'))  <!<  ((α2054',) -> α2056')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2054',) -> α2056')
//│ ╟── while constraining:  α344'  <!<  ((α2054',) -> α2056')
//│ ╟── while constraining:  (α344' <: ((α2054',) -> α2056') => (α2059' -> α2058'))  <!<  ((α2046',) -> α2048')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2046',) -> α2048')
//│ ╟── while constraining:  α344'  <!<  ((α2046',) -> α2048')
//│ ╟── while constraining:  (α344' <: ((α2046',) -> α2048') => (α2051' -> α2050'))  <!<  ((α2038',) -> α2040')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2038',) -> α2040')
//│ ╟── while constraining:  α344'  <!<  ((α2038',) -> α2040')
//│ ╟── while constraining:  (α344' <: ((α2038',) -> α2040') => (α2043' -> α2042'))  <!<  ((α2030',) -> α2032')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2030',) -> α2032')
//│ ╟── while constraining:  α344'  <!<  ((α2030',) -> α2032')
//│ ╟── while constraining:  (α344' <: ((α2030',) -> α2032') => (α2035' -> α2034'))  <!<  ((α2022',) -> α2024')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2022',) -> α2024')
//│ ╟── while constraining:  α344'  <!<  ((α2022',) -> α2024')
//│ ╟── while constraining:  (α344' <: ((α2022',) -> α2024') => (α2027' -> α2026'))  <!<  ((α2014',) -> α2016')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2014',) -> α2016')
//│ ╟── while constraining:  α344'  <!<  ((α2014',) -> α2016')
//│ ╟── while constraining:  (α344' <: ((α2014',) -> α2016') => (α2019' -> α2018'))  <!<  ((α2006',) -> α2008')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α2006',) -> α2008')
//│ ╟── while constraining:  α344'  <!<  ((α2006',) -> α2008')
//│ ╟── while constraining:  (α344' <: ((α2006',) -> α2008') => (α2011' -> α2010'))  <!<  ((α1998',) -> α2000')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α1998',) -> α2000')
//│ ╟── while constraining:  α344'  <!<  ((α1998',) -> α2000')
//│ ╟── while constraining:  (α344' <: ((α1998',) -> α2000') => (α2003' -> α2002'))  <!<  ((α1990',) -> α1992')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α1990',) -> α1992')
//│ ╟── while constraining:  α344'  <!<  ((α1990',) -> α1992')
//│ ╟── while constraining:  (α344' <: ((α1990',) -> α1992') => (α1995' -> α1994'))  <!<  ((α1982',) -> α1984')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α1982',) -> α1984')
//│ ╟── while constraining:  α344'  <!<  ((α1982',) -> α1984')
//│ ╟── while constraining:  (α344' <: ((α1982',) -> α1984') => (α1987' -> α1986'))  <!<  ((α1974',) -> α1976')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α1974',) -> α1976')
//│ ╟── while constraining:  α344'  <!<  ((α1974',) -> α1976')
//│ ╟── while constraining:  (α344' <: ((α1974',) -> α1976') => (α1979' -> α1978'))  <!<  ((α1966',) -> α1968')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α1966',) -> α1968')
//│ ╟── while constraining:  α344'  <!<  ((α1966',) -> α1968')
//│ ╟── while constraining:  (α344' <: ((α1966',) -> α1968') => (α1971' -> α1970'))  <!<  ((α1958',) -> α1960')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α1958',) -> α1960')
//│ ╟── while constraining:  α344'  <!<  ((α1958',) -> α1960')
//│ ╟── while constraining:  (α344' <: ((α1958',) -> α1960') => (α1963' -> α1962'))  <!<  ((α1950',) -> α1952')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α1950',) -> α1952')
//│ ╟── while constraining:  α344'  <!<  ((α1950',) -> α1952')
//│ ╟── while constraining:  (α344' <: ((α1950',) -> α1952') => (α1955' -> α1954'))  <!<  ((α1942',) -> α1944')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α1942',) -> α1944')
//│ ╟── while constraining:  α344'  <!<  ((α1942',) -> α1944')
//│ ╟── while constraining:  (α344' <: ((α1942',) -> α1944') => (α1947' -> α1946'))  <!<  ((‹∀ 0. α1837'›,) -> α1941')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α1929''',) -> α1931''') => (α1934''' -> α1933'''))›  <!<  ((‹∀ 0. α1837'›,) -> α1941')
//│ ╙── while constraining:  α1897'  <!<  ((‹∀ 0. α1837'›,) -> α1941')
//│ test1: error

// let test2 = listiter (fun ex -> ex (fun t -> 
//   let arg1 = fst t
//   and arg2 = fst (snd t)
//   and eqf  = snd (snd t) in
//   let areequal = eqf arg1 arg2
//   in print_bool areequal )) ex_list2
// ;;
:e
:ng
test2 = listiter (fun ex -> ex (fun t ->
  let arg1 = t._1 in
  let arg2 = t._2 in
  let eqf = t._3 in
  let areequal = eqf arg1 arg2 in
  print_bool areequal )) ex_list2
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?c, ?d, ?e, ?b. ?d) -> ?f` exceeded recursion depth limit (400)
//│ ║  l.978: 	test2 = listiter (fun ex -> ex (fun t ->
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.979: 	  let arg1 = t._1 in
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.980: 	  let arg2 = t._2 in
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.981: 	  let eqf = t._3 in
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ║  l.982: 	  let areequal = eqf arg1 arg2 in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.983: 	  print_bool areequal )) ex_list2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (α344' <: ((α3690',) -> α3692') => (α3695' -> α3694'))  <!<  ((α3682',) -> α3684')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3682',) -> α3684')
//│ ╟── while constraining:  α344'  <!<  ((α3682',) -> α3684')
//│ ╟── while constraining:  (α344' <: ((α3682',) -> α3684') => (α3687' -> α3686'))  <!<  ((α3674',) -> α3676')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3674',) -> α3676')
//│ ╟── while constraining:  α344'  <!<  ((α3674',) -> α3676')
//│ ╟── while constraining:  (α344' <: ((α3674',) -> α3676') => (α3679' -> α3678'))  <!<  ((α3666',) -> α3668')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3666',) -> α3668')
//│ ╟── while constraining:  α344'  <!<  ((α3666',) -> α3668')
//│ ╟── while constraining:  (α344' <: ((α3666',) -> α3668') => (α3671' -> α3670'))  <!<  ((α3658',) -> α3660')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3658',) -> α3660')
//│ ╟── while constraining:  α344'  <!<  ((α3658',) -> α3660')
//│ ╟── while constraining:  (α344' <: ((α3658',) -> α3660') => (α3663' -> α3662'))  <!<  ((α3650',) -> α3652')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3650',) -> α3652')
//│ ╟── while constraining:  α344'  <!<  ((α3650',) -> α3652')
//│ ╟── while constraining:  (α344' <: ((α3650',) -> α3652') => (α3655' -> α3654'))  <!<  ((α3642',) -> α3644')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3642',) -> α3644')
//│ ╟── while constraining:  α344'  <!<  ((α3642',) -> α3644')
//│ ╟── while constraining:  (α344' <: ((α3642',) -> α3644') => (α3647' -> α3646'))  <!<  ((α3634',) -> α3636')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3634',) -> α3636')
//│ ╟── while constraining:  α344'  <!<  ((α3634',) -> α3636')
//│ ╟── while constraining:  (α344' <: ((α3634',) -> α3636') => (α3639' -> α3638'))  <!<  ((α3626',) -> α3628')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3626',) -> α3628')
//│ ╟── while constraining:  α344'  <!<  ((α3626',) -> α3628')
//│ ╟── while constraining:  (α344' <: ((α3626',) -> α3628') => (α3631' -> α3630'))  <!<  ((α3618',) -> α3620')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3618',) -> α3620')
//│ ╟── while constraining:  α344'  <!<  ((α3618',) -> α3620')
//│ ╟── while constraining:  (α344' <: ((α3618',) -> α3620') => (α3623' -> α3622'))  <!<  ((α3610',) -> α3612')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3610',) -> α3612')
//│ ╟── while constraining:  α344'  <!<  ((α3610',) -> α3612')
//│ ╟── while constraining:  (α344' <: ((α3610',) -> α3612') => (α3615' -> α3614'))  <!<  ((α3602',) -> α3604')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3602',) -> α3604')
//│ ╟── while constraining:  α344'  <!<  ((α3602',) -> α3604')
//│ ╟── while constraining:  (α344' <: ((α3602',) -> α3604') => (α3607' -> α3606'))  <!<  ((α3594',) -> α3596')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3594',) -> α3596')
//│ ╟── while constraining:  α344'  <!<  ((α3594',) -> α3596')
//│ ╟── while constraining:  (α344' <: ((α3594',) -> α3596') => (α3599' -> α3598'))  <!<  ((α3586',) -> α3588')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3586',) -> α3588')
//│ ╟── while constraining:  α344'  <!<  ((α3586',) -> α3588')
//│ ╟── while constraining:  (α344' <: ((α3586',) -> α3588') => (α3591' -> α3590'))  <!<  ((α3578',) -> α3580')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3578',) -> α3580')
//│ ╟── while constraining:  α344'  <!<  ((α3578',) -> α3580')
//│ ╟── while constraining:  (α344' <: ((α3578',) -> α3580') => (α3583' -> α3582'))  <!<  ((α3570',) -> α3572')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3570',) -> α3572')
//│ ╟── while constraining:  α344'  <!<  ((α3570',) -> α3572')
//│ ╟── while constraining:  (α344' <: ((α3570',) -> α3572') => (α3575' -> α3574'))  <!<  ((α3562',) -> α3564')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3562',) -> α3564')
//│ ╟── while constraining:  α344'  <!<  ((α3562',) -> α3564')
//│ ╟── while constraining:  (α344' <: ((α3562',) -> α3564') => (α3567' -> α3566'))  <!<  ((α3554',) -> α3556')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3554',) -> α3556')
//│ ╟── while constraining:  α344'  <!<  ((α3554',) -> α3556')
//│ ╟── while constraining:  (α344' <: ((α3554',) -> α3556') => (α3559' -> α3558'))  <!<  ((α3546',) -> α3548')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3546',) -> α3548')
//│ ╟── while constraining:  α344'  <!<  ((α3546',) -> α3548')
//│ ╟── while constraining:  (α344' <: ((α3546',) -> α3548') => (α3551' -> α3550'))  <!<  ((α3538',) -> α3540')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3538',) -> α3540')
//│ ╟── while constraining:  α344'  <!<  ((α3538',) -> α3540')
//│ ╟── while constraining:  (α344' <: ((α3538',) -> α3540') => (α3543' -> α3542'))  <!<  ((α3530',) -> α3532')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3530',) -> α3532')
//│ ╟── while constraining:  α344'  <!<  ((α3530',) -> α3532')
//│ ╟── while constraining:  (α344' <: ((α3530',) -> α3532') => (α3535' -> α3534'))  <!<  ((α3522',) -> α3524')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3522',) -> α3524')
//│ ╟── while constraining:  α344'  <!<  ((α3522',) -> α3524')
//│ ╟── while constraining:  (α344' <: ((α3522',) -> α3524') => (α3527' -> α3526'))  <!<  ((α3514',) -> α3516')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3514',) -> α3516')
//│ ╟── while constraining:  α344'  <!<  ((α3514',) -> α3516')
//│ ╟── while constraining:  (α344' <: ((α3514',) -> α3516') => (α3519' -> α3518'))  <!<  ((α3506',) -> α3508')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3506',) -> α3508')
//│ ╟── while constraining:  α344'  <!<  ((α3506',) -> α3508')
//│ ╟── while constraining:  (α344' <: ((α3506',) -> α3508') => (α3511' -> α3510'))  <!<  ((α3498',) -> α3500')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3498',) -> α3500')
//│ ╟── while constraining:  α344'  <!<  ((α3498',) -> α3500')
//│ ╟── while constraining:  (α344' <: ((α3498',) -> α3500') => (α3503' -> α3502'))  <!<  ((α3490',) -> α3492')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3490',) -> α3492')
//│ ╟── while constraining:  α344'  <!<  ((α3490',) -> α3492')
//│ ╟── while constraining:  (α344' <: ((α3490',) -> α3492') => (α3495' -> α3494'))  <!<  ((α3482',) -> α3484')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3482',) -> α3484')
//│ ╟── while constraining:  α344'  <!<  ((α3482',) -> α3484')
//│ ╟── while constraining:  (α344' <: ((α3482',) -> α3484') => (α3487' -> α3486'))  <!<  ((α3474',) -> α3476')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3474',) -> α3476')
//│ ╟── while constraining:  α344'  <!<  ((α3474',) -> α3476')
//│ ╟── while constraining:  (α344' <: ((α3474',) -> α3476') => (α3479' -> α3478'))  <!<  ((α3466',) -> α3468')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3466',) -> α3468')
//│ ╟── while constraining:  α344'  <!<  ((α3466',) -> α3468')
//│ ╟── while constraining:  (α344' <: ((α3466',) -> α3468') => (α3471' -> α3470'))  <!<  ((α3458',) -> α3460')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3458',) -> α3460')
//│ ╟── while constraining:  α344'  <!<  ((α3458',) -> α3460')
//│ ╟── while constraining:  (α344' <: ((α3458',) -> α3460') => (α3463' -> α3462'))  <!<  ((α3450',) -> α3452')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3450',) -> α3452')
//│ ╟── while constraining:  α344'  <!<  ((α3450',) -> α3452')
//│ ╟── while constraining:  (α344' <: ((α3450',) -> α3452') => (α3455' -> α3454'))  <!<  ((α3442',) -> α3444')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3442',) -> α3444')
//│ ╟── while constraining:  α344'  <!<  ((α3442',) -> α3444')
//│ ╟── while constraining:  (α344' <: ((α3442',) -> α3444') => (α3447' -> α3446'))  <!<  ((α3434',) -> α3436')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3434',) -> α3436')
//│ ╟── while constraining:  α344'  <!<  ((α3434',) -> α3436')
//│ ╟── while constraining:  (α344' <: ((α3434',) -> α3436') => (α3439' -> α3438'))  <!<  ((α3426',) -> α3428')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3426',) -> α3428')
//│ ╟── while constraining:  α344'  <!<  ((α3426',) -> α3428')
//│ ╟── while constraining:  (α344' <: ((α3426',) -> α3428') => (α3431' -> α3430'))  <!<  ((α3418',) -> α3420')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3418',) -> α3420')
//│ ╟── while constraining:  α344'  <!<  ((α3418',) -> α3420')
//│ ╟── while constraining:  (α344' <: ((α3418',) -> α3420') => (α3423' -> α3422'))  <!<  ((α3410',) -> α3412')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3410',) -> α3412')
//│ ╟── while constraining:  α344'  <!<  ((α3410',) -> α3412')
//│ ╟── while constraining:  (α344' <: ((α3410',) -> α3412') => (α3415' -> α3414'))  <!<  ((α3402',) -> α3404')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3402',) -> α3404')
//│ ╟── while constraining:  α344'  <!<  ((α3402',) -> α3404')
//│ ╟── while constraining:  (α344' <: ((α3402',) -> α3404') => (α3407' -> α3406'))  <!<  ((α3394',) -> α3396')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3394',) -> α3396')
//│ ╟── while constraining:  α344'  <!<  ((α3394',) -> α3396')
//│ ╟── while constraining:  (α344' <: ((α3394',) -> α3396') => (α3399' -> α3398'))  <!<  ((α3386',) -> α3388')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3386',) -> α3388')
//│ ╟── while constraining:  α344'  <!<  ((α3386',) -> α3388')
//│ ╟── while constraining:  (α344' <: ((α3386',) -> α3388') => (α3391' -> α3390'))  <!<  ((α3378',) -> α3380')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3378',) -> α3380')
//│ ╟── while constraining:  α344'  <!<  ((α3378',) -> α3380')
//│ ╟── while constraining:  (α344' <: ((α3378',) -> α3380') => (α3383' -> α3382'))  <!<  ((α3370',) -> α3372')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3370',) -> α3372')
//│ ╟── while constraining:  α344'  <!<  ((α3370',) -> α3372')
//│ ╟── while constraining:  (α344' <: ((α3370',) -> α3372') => (α3375' -> α3374'))  <!<  ((α3362',) -> α3364')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3362',) -> α3364')
//│ ╟── while constraining:  α344'  <!<  ((α3362',) -> α3364')
//│ ╟── while constraining:  (α344' <: ((α3362',) -> α3364') => (α3367' -> α3366'))  <!<  ((α3354',) -> α3356')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3354',) -> α3356')
//│ ╟── while constraining:  α344'  <!<  ((α3354',) -> α3356')
//│ ╟── while constraining:  (α344' <: ((α3354',) -> α3356') => (α3359' -> α3358'))  <!<  ((α3346',) -> α3348')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3346',) -> α3348')
//│ ╟── while constraining:  α344'  <!<  ((α3346',) -> α3348')
//│ ╟── while constraining:  (α344' <: ((α3346',) -> α3348') => (α3351' -> α3350'))  <!<  ((α3338',) -> α3340')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3338',) -> α3340')
//│ ╟── while constraining:  α344'  <!<  ((α3338',) -> α3340')
//│ ╟── while constraining:  (α344' <: ((α3338',) -> α3340') => (α3343' -> α3342'))  <!<  ((α3330',) -> α3332')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3330',) -> α3332')
//│ ╟── while constraining:  α344'  <!<  ((α3330',) -> α3332')
//│ ╟── while constraining:  (α344' <: ((α3330',) -> α3332') => (α3335' -> α3334'))  <!<  ((α3322',) -> α3324')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3322',) -> α3324')
//│ ╟── while constraining:  α344'  <!<  ((α3322',) -> α3324')
//│ ╟── while constraining:  (α344' <: ((α3322',) -> α3324') => (α3327' -> α3326'))  <!<  ((α3314',) -> α3316')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3314',) -> α3316')
//│ ╟── while constraining:  α344'  <!<  ((α3314',) -> α3316')
//│ ╟── while constraining:  (α344' <: ((α3314',) -> α3316') => (α3319' -> α3318'))  <!<  ((α3306',) -> α3308')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3306',) -> α3308')
//│ ╟── while constraining:  α344'  <!<  ((α3306',) -> α3308')
//│ ╟── while constraining:  (α344' <: ((α3306',) -> α3308') => (α3311' -> α3310'))  <!<  ((α3298',) -> α3300')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3298',) -> α3300')
//│ ╟── while constraining:  α344'  <!<  ((α3298',) -> α3300')
//│ ╟── while constraining:  (α344' <: ((α3298',) -> α3300') => (α3303' -> α3302'))  <!<  ((α3290',) -> α3292')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3290',) -> α3292')
//│ ╟── while constraining:  α344'  <!<  ((α3290',) -> α3292')
//│ ╟── while constraining:  (α344' <: ((α3290',) -> α3292') => (α3295' -> α3294'))  <!<  ((α3282',) -> α3284')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3282',) -> α3284')
//│ ╟── while constraining:  α344'  <!<  ((α3282',) -> α3284')
//│ ╟── while constraining:  (α344' <: ((α3282',) -> α3284') => (α3287' -> α3286'))  <!<  ((α3274',) -> α3276')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3274',) -> α3276')
//│ ╟── while constraining:  α344'  <!<  ((α3274',) -> α3276')
//│ ╟── while constraining:  (α344' <: ((α3274',) -> α3276') => (α3279' -> α3278'))  <!<  ((α3266',) -> α3268')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3266',) -> α3268')
//│ ╟── while constraining:  α344'  <!<  ((α3266',) -> α3268')
//│ ╟── while constraining:  (α344' <: ((α3266',) -> α3268') => (α3271' -> α3270'))  <!<  ((α3258',) -> α3260')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3258',) -> α3260')
//│ ╟── while constraining:  α344'  <!<  ((α3258',) -> α3260')
//│ ╟── while constraining:  (α344' <: ((α3258',) -> α3260') => (α3263' -> α3262'))  <!<  ((α3250',) -> α3252')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3250',) -> α3252')
//│ ╟── while constraining:  α344'  <!<  ((α3250',) -> α3252')
//│ ╟── while constraining:  (α344' <: ((α3250',) -> α3252') => (α3255' -> α3254'))  <!<  ((α3242',) -> α3244')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3242',) -> α3244')
//│ ╟── while constraining:  α344'  <!<  ((α3242',) -> α3244')
//│ ╟── while constraining:  (α344' <: ((α3242',) -> α3244') => (α3247' -> α3246'))  <!<  ((α3234',) -> α3236')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3234',) -> α3236')
//│ ╟── while constraining:  α344'  <!<  ((α3234',) -> α3236')
//│ ╟── while constraining:  (α344' <: ((α3234',) -> α3236') => (α3239' -> α3238'))  <!<  ((α3226',) -> α3228')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3226',) -> α3228')
//│ ╟── while constraining:  α344'  <!<  ((α3226',) -> α3228')
//│ ╟── while constraining:  (α344' <: ((α3226',) -> α3228') => (α3231' -> α3230'))  <!<  ((α3218',) -> α3220')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3218',) -> α3220')
//│ ╟── while constraining:  α344'  <!<  ((α3218',) -> α3220')
//│ ╟── while constraining:  (α344' <: ((α3218',) -> α3220') => (α3223' -> α3222'))  <!<  ((α3210',) -> α3212')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3210',) -> α3212')
//│ ╟── while constraining:  α344'  <!<  ((α3210',) -> α3212')
//│ ╟── while constraining:  (α344' <: ((α3210',) -> α3212') => (α3215' -> α3214'))  <!<  ((α3202',) -> α3204')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3202',) -> α3204')
//│ ╟── while constraining:  α344'  <!<  ((α3202',) -> α3204')
//│ ╟── while constraining:  (α344' <: ((α3202',) -> α3204') => (α3207' -> α3206'))  <!<  ((α3194',) -> α3196')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3194',) -> α3196')
//│ ╟── while constraining:  α344'  <!<  ((α3194',) -> α3196')
//│ ╟── while constraining:  (α344' <: ((α3194',) -> α3196') => (α3199' -> α3198'))  <!<  ((α3186',) -> α3188')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3186',) -> α3188')
//│ ╟── while constraining:  α344'  <!<  ((α3186',) -> α3188')
//│ ╟── while constraining:  (α344' <: ((α3186',) -> α3188') => (α3191' -> α3190'))  <!<  ((α3178',) -> α3180')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3178',) -> α3180')
//│ ╟── while constraining:  α344'  <!<  ((α3178',) -> α3180')
//│ ╟── while constraining:  (α344' <: ((α3178',) -> α3180') => (α3183' -> α3182'))  <!<  ((α3170',) -> α3172')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3170',) -> α3172')
//│ ╟── while constraining:  α344'  <!<  ((α3170',) -> α3172')
//│ ╟── while constraining:  (α344' <: ((α3170',) -> α3172') => (α3175' -> α3174'))  <!<  ((α3162',) -> α3164')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3162',) -> α3164')
//│ ╟── while constraining:  α344'  <!<  ((α3162',) -> α3164')
//│ ╟── while constraining:  (α344' <: ((α3162',) -> α3164') => (α3167' -> α3166'))  <!<  ((α3154',) -> α3156')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3154',) -> α3156')
//│ ╟── while constraining:  α344'  <!<  ((α3154',) -> α3156')
//│ ╟── while constraining:  (α344' <: ((α3154',) -> α3156') => (α3159' -> α3158'))  <!<  ((α3146',) -> α3148')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3146',) -> α3148')
//│ ╟── while constraining:  α344'  <!<  ((α3146',) -> α3148')
//│ ╟── while constraining:  (α344' <: ((α3146',) -> α3148') => (α3151' -> α3150'))  <!<  ((α3138',) -> α3140')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3138',) -> α3140')
//│ ╟── while constraining:  α344'  <!<  ((α3138',) -> α3140')
//│ ╟── while constraining:  (α344' <: ((α3138',) -> α3140') => (α3143' -> α3142'))  <!<  ((α3130',) -> α3132')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3130',) -> α3132')
//│ ╟── while constraining:  α344'  <!<  ((α3130',) -> α3132')
//│ ╟── while constraining:  (α344' <: ((α3130',) -> α3132') => (α3135' -> α3134'))  <!<  ((α3122',) -> α3124')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3122',) -> α3124')
//│ ╟── while constraining:  α344'  <!<  ((α3122',) -> α3124')
//│ ╟── while constraining:  (α344' <: ((α3122',) -> α3124') => (α3127' -> α3126'))  <!<  ((α3114',) -> α3116')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3114',) -> α3116')
//│ ╟── while constraining:  α344'  <!<  ((α3114',) -> α3116')
//│ ╟── while constraining:  (α344' <: ((α3114',) -> α3116') => (α3119' -> α3118'))  <!<  ((α3106',) -> α3108')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3106',) -> α3108')
//│ ╟── while constraining:  α344'  <!<  ((α3106',) -> α3108')
//│ ╟── while constraining:  (α344' <: ((α3106',) -> α3108') => (α3111' -> α3110'))  <!<  ((α3098',) -> α3100')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3098',) -> α3100')
//│ ╟── while constraining:  α344'  <!<  ((α3098',) -> α3100')
//│ ╟── while constraining:  (α344' <: ((α3098',) -> α3100') => (α3103' -> α3102'))  <!<  ((α3090',) -> α3092')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3090',) -> α3092')
//│ ╟── while constraining:  α344'  <!<  ((α3090',) -> α3092')
//│ ╟── while constraining:  (α344' <: ((α3090',) -> α3092') => (α3095' -> α3094'))  <!<  ((α3082',) -> α3084')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3082',) -> α3084')
//│ ╟── while constraining:  α344'  <!<  ((α3082',) -> α3084')
//│ ╟── while constraining:  (α344' <: ((α3082',) -> α3084') => (α3087' -> α3086'))  <!<  ((α3074',) -> α3076')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3074',) -> α3076')
//│ ╟── while constraining:  α344'  <!<  ((α3074',) -> α3076')
//│ ╟── while constraining:  (α344' <: ((α3074',) -> α3076') => (α3079' -> α3078'))  <!<  ((α3066',) -> α3068')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3066',) -> α3068')
//│ ╟── while constraining:  α344'  <!<  ((α3066',) -> α3068')
//│ ╟── while constraining:  (α344' <: ((α3066',) -> α3068') => (α3071' -> α3070'))  <!<  ((α3058',) -> α3060')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α353''',) -> α355''') => (α358''' -> α357'''))›  <!<  ((α3058',) -> α3060')
//│ ╟── while constraining:  α344'  <!<  ((α3058',) -> α3060')
//│ ╟── while constraining:  (α344' <: ((α3058',) -> α3060') => (α3063' -> α3062'))  <!<  ((‹∀ 0. α1872'›,) -> α3057')
//│ ╟── while constraining:  ‹∀ 2. (α344' <: ((α3045''',) -> α3047''') => (α3050''' -> α3049'''))›  <!<  ((‹∀ 0. α1872'›,) -> α3057')
//│ ╙── while constraining:  α2618'  <!<  ((‹∀ 0. α1872'›,) -> α3057')
//│ test2: error


// (* Some examples for MLF inspired by standard encoding in System F. *)

// type Void   = ['x] 'x
// type Unit   = ['x] 'x -> 'x
// type Int    = ['x] ('x -> 'x) -> ('x -> 'x)
// type Bool   = ['x] (Unit -> 'x) -> (Unit -> 'x) -> 'x 
type Fvoid = forall 'a. 'a
type Funit = forall 'a. 'a -> 'a
type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
type Fbool = forall 'a. (Funit -> 'a) -> (Funit -> 'a) -> 'a
//│ Defined type alias Fvoid
//│ Defined type alias Funit
//│ Defined type alias Fint
//│ Defined type alias Fbool

// type Sum    = ['x] (Int -> 'x) -> (Int -> 'x) -> 'x
// type Pair   = ['x] (Int -> Int -> 'x) -> 'x
// type Triple = ['x] (Int -> Int -> Int -> 'x) -> 'x
type Sum    = forall 'a. (Fint -> 'a) -> (Fint -> 'a) -> 'a
type Pair   = forall 'a. (Fint -> Fint -> 'a) -> 'a
type Triple = forall 'a. (Fint -> Fint -> Fint -> 'a) -> 'a
//│ Defined type alias Sum
//│ Defined type alias Pair
//│ Defined type alias Triple

// (* Unit *)
// let c_unit = fun x -> x
def c_unit = fun x -> x
//│ c_unit: 'a -> 'a
//│       = [Function: c_unit]


// (* BOOLEANS, IFS, AND, OR, NOT. *)
// let c_true  = fun a b -> a c_unit
def c_true = fun a -> fun b -> a c_unit
//│ c_true: 'a -> ('a -> 'b
//│   where
//│     'a <: (forall 'c. 'c -> 'c) -> 'b)
//│       = [Function: c_true]

// let c_false = fun a b -> b c_unit
def c_false = fun a -> fun b -> b c_unit
//│ c_false: anything -> ((forall 'a. 'a -> 'a) -> 'b) -> 'b
//│        = [Function: c_false]

// let c_if (cond:Bool) c_then c_else = cond c_then c_else 
def c_if (cond: Fbool) c_then c_else = cond c_then c_else
def c_if' cond c_then c_else = cond c_then c_else
//│ c_if: Fbool -> (forall 'a. 'a -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'd <: 'a -> 'b -> 'c)))
//│     = [Function: c_if]
//│ c_if': 'a -> (forall 'b. 'b -> (forall 'b, 'c, 'd. ('c -> 'd
//│   where
//│     'a <: 'b -> 'c -> 'd)))
//│      = [Function: c_if]

// let c_and (a:Bool) (b:Bool) = c_if a (fun z -> b) (fun z -> c_false)
def c_and (a: Fbool) (b: Fbool) = c_if a (fun z -> b) (fun z -> c_false)
def c_and' a b = c_if a (fun z -> b) (fun z -> c_false)
//│ c_and: Fbool -> (Fbool -> 'a
//│   where
//│     'b <: (anything -> Fbool) -> (anything -> anything -> ((forall 'c. 'c -> 'c) -> 'd) -> 'd) -> 'a)
//│      = [Function: c_and]
//│ c_and': Fbool -> (forall 'a. ('a -> 'b
//│   where
//│     'c <: (anything -> 'a) -> (anything -> anything -> ((forall 'd. 'd -> 'd) -> 'e) -> 'e) -> 'b))
//│       = [Function: c_and]

// let c_or  (a:Bool) (b:Bool) = c_if a (fun z -> c_true) (fun z -> b)
def c_or (a: Fbool) (b: Fbool) = c_if a (fun z -> c_true) (fun z -> b)
def c_or' a b = c_if a (fun z -> c_true) (fun z -> b)
//│ c_or: Fbool -> (forall 'a. (Fbool -> 'b
//│   where
//│     'c <: ('a -> (forall 'a. 'a -> ('a -> 'd
//│   where
//│     'a <: (forall 'e. 'e -> 'e) -> 'd))) -> ('a -> Fbool) -> 'b))
//│     = [Function: c_or]
//│ c_or': Fbool -> (forall 'a. ('b -> 'c
//│   where
//│     'd <: ('a -> (forall 'a. 'a -> ('a -> 'e
//│   where
//│     'a <: (forall 'f. 'f -> 'f) -> 'e))) -> ('a -> 'b) -> 'c))
//│      = [Function: c_or]

// let c_not (a:Bool) = c_if a (fun z -> c_false) (fun z -> c_true)
def c_not (a: Fbool) = c_if a (fun z -> c_false) (fun z -> c_true)
def c_not' a = c_if a (fun z -> c_false) (fun z -> c_true)
//│ c_not: Fbool -> (forall 'a. 'a -> (((forall 'b. 'b -> 'b) -> 'c) -> 'c
//│   where
//│     'a <: (forall 'b. 'b -> 'b) -> 'c))
//│      = [Function: c_not]
//│ c_not': Fbool -> (forall 'a. 'a -> (((forall 'b. 'b -> 'b) -> 'c) -> 'c
//│   where
//│     'a <: (forall 'b. 'b -> 'b) -> 'c))
//│       = [Function: c_not]

// let c_or = (c_or : Bool -> Bool -> Bool)
def c_or2 = c_or : Fbool -> Fbool -> Fbool
def c_or2' = c_or' : Fbool -> Fbool -> Fbool
//│ c_or2: Fbool -> Fbool -> Fbool
//│      = [Function: c_or]
//│ c_or2': Fbool -> Fbool -> Fbool
//│       = [Function: c_or]


// (* CONSTRUCTORS FOR PAIRS ET TRIPLES. *)
// let c_pair x y   = fun f -> f x y
def c_pair x y = fun f -> f x y
//│ c_pair: 'a -> (forall 'b. 'b -> (forall 'c. ('a -> 'b -> 'c) -> 'c))
//│       = [Function: c_pair]

// let c_trip x y z = fun f -> f x y z
def c_trip x y z = fun f -> f x y z
//│ c_trip: 'a -> (forall 'b. 'b -> (forall 'c. 'c -> (forall 'd. ('a -> 'b -> 'c -> 'd) -> 'd)))
//│       = [Function: c_trip]


// (* PROJECTIONS FOR PRODUCTS. *)
// let c_1_2 (p:Pair) = p (fun x y -> x) 
def c_1_2 (p: Pair) = p (fun x -> fun y -> x)
def c_1_2' p = p (fun x -> fun y -> x)
//│ c_1_2: Pair -> Fint
//│      = [Function: c_1_2]
//│ c_1_2': ((forall 'a. 'a -> anything -> 'a) -> 'b) -> 'b
//│       = [Function: c_1_2]

// let c_2_2 (p:Pair) = p (fun x y -> y) 
def c_2_2 (t: Pair) = t (fun x -> fun y -> y)
def c_2_2' t = t (fun x -> fun y -> y)
//│ c_2_2: Pair -> Fint
//│      = [Function: c_2_2]
//│ c_2_2': ((anything -> (forall 'a. 'a -> 'a)) -> 'b) -> 'b
//│       = [Function: c_2_2]

// let c_1_3 (t:Triple) = t (fun x y z -> x)
def c_1_3 (t: Triple) = t (fun x -> fun y -> fun z -> x)
def c_1_3' t = t (fun x -> fun y -> fun z -> x)
//│ c_1_3: Triple -> Fint
//│      = [Function: c_1_3]
//│ c_1_3': ((forall 'a. 'a -> anything -> anything -> 'a) -> 'b) -> 'b
//│       = [Function: c_1_3]

// let c_2_3 (t:Triple) = t (fun x y z -> y) 
def c_2_3 (t: Triple) = t (fun x -> fun y -> fun z -> y)
def c_2_3' t = t (fun x -> fun y -> fun z -> y)
//│ c_2_3: Triple -> Fint
//│      = [Function: c_2_3]
//│ c_2_3': ((anything -> (forall 'a. 'a -> anything -> 'a)) -> 'b) -> 'b
//│       = [Function: c_2_3]

// let c_3_3 (t:Triple) = t (fun x y z -> z) 
def c_3_3 (t: Triple) = t (fun x -> fun y -> fun z -> z)
def c_3_3' t = t (fun x -> fun y -> fun z -> z)
//│ c_3_3: Triple -> Fint
//│      = [Function: c_3_3]
//│ c_3_3': ((anything -> anything -> (forall 'a. 'a -> 'a)) -> 'b) -> 'b
//│       = [Function: c_3_3]


// (* CONSTRUCTOR FOR A BINARY SUM. *)
// let c_sumg = fun x fg fd -> fg x
def c_sumg = fun x -> fun fg -> fun fd -> fg x
//│ c_sumg: 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'b <: 'a -> 'c)))
//│       = [Function: c_sumg]

// let c_sumd = fun x fg fd -> fd x
def c_sumd = fun x -> fun fg -> fun fd -> fd x
//│ c_sumd: 'a -> anything -> (forall 'b. ('a -> 'b) -> 'b)
//│       = [Function: c_sumd]


// (* CASE FOR A SUM. *)
// let c_case (s:Sum) g d = s g d
def c_case (s: Sum) g d = s g d
def c_case' s g d = s g d
//│ c_case: Sum -> (forall 'a. 'a -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'd <: 'a -> 'b -> 'c)))
//│       = [Function: c_case]
//│ c_case': 'a -> (forall 'b. 'b -> (forall 'b, 'c, 'd. ('c -> 'd
//│   where
//│     'a <: 'b -> 'c -> 'd)))
//│        = [Function: c_case]


// (* Integers. *)
// let c_i0 = fun f x ->   x
def c_i0 = fun f -> fun x -> x
//│ c_i0: anything -> (forall 'a. 'a -> 'a)
//│     = [Function: c_i0]

// let c_i1 = fun f x -> f x
def c_i1 = fun f -> fun x -> f x
//│ c_i1: 'a -> (forall 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c))
//│     = [Function: c_i1]

// let c_i2 = fun f x -> f (f x)
def c_i2 = fun f -> fun x -> f (f x)
//│ c_i2: 'a -> (forall 'b, 'c, 'd. ('b -> 'd
//│   where
//│     'a <: 'b -> 'c & 'c -> 'd))
//│     = [Function: c_i2]

// let c_succ (n:Int) = fun f x -> n f (f x)
def c_succ (n: Fint) = fun f -> fun x -> n f (f x)
def c_succ' n = fun f -> fun x -> n f (f x)
//│ c_succ: Fint -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd. ('d -> 'c
//│   where
//│     'e <: 'a -> 'b -> 'c
//│     'a <: 'd -> 'b)))
//│       = [Function: c_succ]
//│ c_succ': 'a -> (forall 'b. 'b -> (forall 'b, 'c, 'd, 'e. ('e -> 'd
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'e -> 'c)))
//│        = [Function: c_succ]

// let c_iszero (n:Int) = n (fun x -> c_false) c_true
def c_iszero (n: Fint) = n (fun x -> c_false) c_true
def c_iszero' n = n (fun x -> c_false) c_true
//│ c_iszero: Fint -> ((forall 'a. 'a -> 'a) -> ‘a & 'b) -> (((forall 'a. 'a -> 'a) -> 'c) -> 'c
//│   where
//│     'b <: (forall 'a. 'a -> 'a) -> 'c)
//│         = [Function: c_iszero]
//│ c_iszero': (('a -> 'a -> ((forall 'b. 'b -> 'b) -> 'c) -> 'c) -> (((forall 'b. 'b -> 'b) -> ‘a & 'a) -> ('a -> 'd
//│   where
//│     'a <: (forall 'b. 'b -> 'b) -> 'd)) -> 'e) -> 'e
//│          = [Function: c_iszero]

// let c_add n (m:Int) = m c_succ n
def c_add n (m: Fint) = m c_succ n
def c_add' n m = m c_succ' n
//│ c_add: (Fint & 'a) -> (forall 'b. (Fint -> (forall 'c. 'c -> (forall 'c, 'd, 'e, 'f. ('f -> 'e
//│   where
//│     'g <: 'c -> 'd -> 'e
//│     'c <: 'f -> 'd)) | 'a)
//│   where
//│     'g <: (‘a -> ‘a) -> 'b -> ‘a
//│     'c <: ‘a -> 'b))
//│      = [Function: c_add]
//│ c_add': 'a -> ((forall 'b. 'b -> (forall 'c. 'c -> (forall 'c, 'd, 'e, 'f. ('f -> 'e
//│   where
//│     'b <: 'c -> 'd -> 'e
//│     'c <: 'f -> 'd)))) -> 'a -> 'g) -> 'g
//│       = [Function: c_add]

// let c_mul n (m:Int) = m (c_add n) c_i0
def c_mul m (n: Fint) = m (c_add n) c_i0
def c_mul' m n = m (c_add' n) c_i0
//│ c_mul: 'a -> (Fint -> 'b
//│   where
//│     'a <: (forall 'c. (Fint -> (forall 'd. 'd -> (forall 'd, 'e, 'f, 'g. ('g -> 'f
//│   where
//│     'h <: 'd -> 'e -> 'f
//│     'd <: 'g -> 'e)) | Fint)
//│   where
//│     'h <: (‘a -> ‘a) -> 'c -> ‘a
//│     'd <: ‘a -> 'c)) -> ('a -> (forall 'i. 'i -> 'i)) -> 'b)
//│      = [Function: c_mul]
//│ c_mul': 'a -> ('b -> 'c
//│   where
//│     'a <: (((forall 'd. 'd -> (forall 'e. 'e -> (forall 'e, 'f, 'g, 'h. ('h -> 'g
//│   where
//│     'd <: 'e -> 'f -> 'g
//│     'e <: 'h -> 'f)))) -> 'b -> 'i) -> 'i) -> ('d -> (forall 'j. 'j -> 'j)) -> 'c)
//│       = [Function: c_mul]

// let c_pow n (m:Int) = m (c_mul n) c_i1
def c_pow m (n: Fint) = m (c_mul n) c_i1
def c_pow' m n = m (c_mul' n) c_i1
//│ c_pow: 'a -> (Fint -> 'b
//│   where
//│     'a <: (Fint -> 'c
//│   where
//│     'd <: (forall 'e. (Fint -> (forall 'f. 'f -> (forall 'f, 'g, 'h, 'i. ('i -> 'h
//│   where
//│     'j <: 'f -> 'g -> 'h
//│     'f <: 'i -> 'g)) | Fint)
//│   where
//│     'j <: (‘a -> ‘a) -> 'e -> ‘a
//│     'f <: ‘a -> 'e)) -> ('k -> (forall 'l. 'l -> 'l)) -> 'c) -> (forall 'k. 'k -> (forall 'm, 'n. ('m -> 'n
//│   where
//│     'k <: 'm -> 'n))) -> 'b)
//│      = [Function: c_pow]
//│ c_pow': 'a -> ('b -> 'c
//│   where
//│     'a <: ('d -> 'e
//│   where
//│     'f <: (((forall 'g. 'g -> (forall 'h. 'h -> (forall 'h, 'i, 'j, 'k. ('k -> 'j
//│   where
//│     'g <: 'h -> 'i -> 'j
//│     'h <: 'k -> 'i)))) -> 'd -> 'l) -> 'l) -> ('b -> (forall 'm. 'm -> 'm)) -> 'e) -> (forall 'b. 'b -> (forall 'n, 'o. ('n -> 'o
//│   where
//│     'b <: 'n -> 'o))) -> 'c)
//│       = [Function: c_pow]


// let c_pred (n:Int) =
//    let s p = c_pair (c_2_2 p) (c_succ (c_2_2 p))
//   and z = c_pair c_i0 c_i0 in
//   c_1_2 (n s z)
def c_pred (n: Fint) =
  let s = fun p -> c_pair (c_2_2 p) (c_succ (c_2_2 p)) in
  let z = c_pair c_i0 c_i0 in
  c_1_2 (n s z)
def c_pred' n =
  let s = fun p -> c_pair (c_2_2' p) (c_succ' (c_2_2' p)) in
  let z = c_pair c_i0 c_i0 in
  c_1_2' (n s z)
//│ c_pred: Fint -> Fint
//│   where
//│     'a <: (‘a -> ‘a) -> 'b -> ‘a & (‘a -> ‘a) -> 'c -> ‘a
//│     'd <: ‘a -> 'b & ‘a -> 'c
//│       = [Function: c_pred]
//│ c_pred': ((((anything -> (forall 'a. 'a -> 'a)) -> anything) -> (nothing -> (forall 'b. 'b -> (forall 'b, 'c, 'd, 'e. ('e -> 'd
//│   where
//│     'f <: 'b -> 'c -> 'd
//│     'b <: 'e -> 'c))) -> 'g) -> 'g) -> (((anything -> (forall 'h. 'h -> 'h)) -> (anything -> (forall 'h. 'h -> 'h)) -> 'i) -> 'i) -> (forall 'j. 'j -> anything -> 'j) -> 'k) -> 'k
//│        = [Function: c_pred]


// let c_printint (n:Int) = print_int (n (fun x -> x+1) 0); print " "
:ng
def c_printint (n: Fint) =
  let _ = print_int (n (fun x -> x + 1) 0) in
  print_string " "
def c_printint' n =
  let _ = print_int (n (fun x -> x + 1) 0) in
  print_string " "
//│ c_printint: Fint -> unit
//│ c_printint': ((int -> int) -> 0 -> int) -> unit

def c_printint2 (n: Fint) = toString (n (fun x -> x + 1) 0)
def c_printint2' n = toString (n (fun x -> x + 1) 0)
//│ c_printint2: Fint -> string
//│            = [Function: c_printint2]
//│ c_printint2': ((int -> int) -> 0 -> anything) -> string
//│             = [Function: c_printint2]

// let c_i2 = c_succ c_i1
def c_i2 = c_succ c_i1
def c_i2' = c_succ' c_i1
//│ c_i2: 'a -> (forall 'a, 'b, 'c, 'd. ('d -> 'c
//│   where
//│     'e <: 'a -> 'b -> 'c
//│     'a <: 'd -> 'b))
//│     = [Function (anonymous)]
//│ c_i2': 'a -> (forall 'a, 'b, 'c, 'd. ('d -> 'c
//│   where
//│     'e <: 'a -> 'b -> 'c
//│     'a <: 'd -> 'b))
//│      = [Function (anonymous)]

// let c_i3 = c_succ c_i2
def c_i3 = c_succ c_i2
def c_i3' = c_succ' c_i2
//│ c_i3: (‘a -> ‘a & 'a) -> (forall 'a, 'b, 'c, 'd. ('d -> 'c
//│   where
//│     'e <: 'a -> 'b -> 'c
//│     'a <: 'd -> 'b))
//│     = [Function (anonymous)]
//│ c_i3': 'a -> (forall 'a, 'b, 'c, 'd. ('d -> 'c
//│   where
//│     'e <: 'a -> 'b -> 'c
//│     'a <: 'd -> 'b))
//│      = [Function (anonymous)]

// let c_i4 = c_succ c_i3
def c_i4 = c_succ c_i3
def c_i4' = c_succ' c_i3
//│ c_i4: (‘a -> ‘a & 'a) -> (forall 'a, 'b, 'c, 'd. ('d -> 'c
//│   where
//│     'e <: 'a -> 'b -> 'c
//│     'a <: 'd -> 'b))
//│     = [Function (anonymous)]
//│ c_i4': 'a -> (forall 'a, 'b, 'c, 'd. ('d -> 'c
//│   where
//│     'e <: 'a -> 'b -> 'c
//│     'a <: 'd -> 'b))
//│      = [Function (anonymous)]


// (* Fails with value restriction. *)
// (* Passes with relaxed value restriction. *)
// let rec (to_church:int -> Int) n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1)) f x)
// FIXME: see to_church4 in ex_casparticuliers
def to_church: int -> Fint
rec def to_church n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church (n - 1)) f x)
//│ to_church: int -> Fint
//│          = <missing implementation>
//│ int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd. (('d & 'b) -> 'd
//│   where
//│     'e <: 'a -> 'b -> 'c
//│     'a <: 'c -> 'd)))
//│   <:  to_church:
//│ int -> Fint
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r, ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1, ?i1, ?j1, ?k1, ?to_church, ?l1, ?m1, ?n1, ?o1, ?p1, ?q1, ?r1, ?s1, ?t1, ?u1, ?v1, ?w1, ?x1, ?y1, ?z1, ?a2, ?b2, ?c2, ?d2, ?e2, ?f2, ?g2, ?h2, ?i2, ?j2, ?k2, ?l2, ?m2, ?n2, ?o2, ?p2, ?q2, ?r2, ?s2, ?t2, ?u2, ?v2, ?w2, ?x2, ?y2, ?z2, ?a3, ?b3, ?c3, ?d3, ?e3, ?f3, ?g3, ?h3, ?i3, ?j3, ?k3, ?l3, ?m3, ?n3. ?to_church <: int -> Fint` exceeded recursion depth limit (400)
//│ ║  l.1634: 	rec def to_church n =
//│ ║          	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1635: 	  if n == 0 then fun f -> fun x -> x
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1636: 	  else fun f -> fun x -> f ((to_church (n - 1)) f x)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  α5160'  <!<  α5402'
//│ ╟── while constraining:  α5175'  <!<  α5402'
//│ ╟── while constraining:  α5190'  <!<  α5402'
//│ ╟── while constraining:  α5205'  <!<  α5402'
//│ ╟── while constraining:  α5220'  <!<  α5402'
//│ ╟── while constraining:  α5235'  <!<  α5402'
//│ ╟── while constraining:  α5250'  <!<  α5402'
//│ ╟── while constraining:  α5265'  <!<  α5402'
//│ ╟── while constraining:  α5280'  <!<  α5402'
//│ ╟── while constraining:  α5295'  <!<  α5402'
//│ ╟── while constraining:  α5310'  <!<  α5402'
//│ ╟── while constraining:  α5325'  <!<  α5402'
//│ ╟── while constraining:  α5340'  <!<  α5402'
//│ ╟── while constraining:  α5355'  <!<  α5402'
//│ ╟── while constraining:  α5370'  <!<  α5402'
//│ ╟── while constraining:  α5385'  <!<  α5402'
//│ ╟── while constraining:  α5400'  <!<  α5402'
//│ ╟── while constraining:  α5400'  <!<  α5410''
//│ ╟── while constraining:  (α5400',)  <!<  (α5410'',)
//│ ╟── while constraining:  (α5410'' -> ‹∀ 3. (α5105' <: ((α5410'',) -> α5411''''), α5099''' <: ((α5413'''',) -> α5414'''') => (α5412'''' -> α5414''''))›)  <!<  ((α5400',) -> α5407')
//│ ╟── while constraining:  ‹∀ 2. (α5099''' -> ‹∀ 3. (α5105' <: ((α5099''',) -> α5106''''), α5099''' <: ((α5107'''',) -> α5108'''') => (α5100'''' -> α5108''''))›)›  <!<  ((α5400',) -> α5407')
//│ ╟── while constraining:  α5105'  <!<  ((α5400',) -> α5407')
//│ ╟── while constraining:  α5105'  <!<  ((α5400',) -> α5403'')
//│ ╟── while constraining:  (α5105' <: ((α5400',) -> α5403''), α5402' <: ((α5405'',) -> α5406'') => (α5404'' -> α5406''))  <!<  ((α5393',) -> α5394')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5400',) -> α5401''''), α5402' <: ((α5398'''',) -> α5399'''') => (α5397'''' -> α5399''''))›  <!<  ((α5393',) -> α5394')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5400',) -> α5401''''), α5402' <: ((α5398'''',) -> α5399'''') => (α5397'''' -> α5399''''))›  <!<  α5392'
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5395'',) -> α5396''''), α5099''' <: ((α5398'''',) -> α5399'''') => (α5397'''' -> α5399''''))›  <!<  α5392'
//│ ╟── while constraining:  (α5395'' -> ‹∀ 3. (α5105' <: ((α5395'',) -> α5396''''), α5099''' <: ((α5398'''',) -> α5399'''') => (α5397'''' -> α5399''''))›)  <!<  ((α5385',) -> α5392')
//│ ╟── while constraining:  ‹∀ 2. (α5099''' -> ‹∀ 3. (α5105' <: ((α5099''',) -> α5106''''), α5099''' <: ((α5107'''',) -> α5108'''') => (α5100'''' -> α5108''''))›)›  <!<  ((α5385',) -> α5392')
//│ ╟── while constraining:  α5105'  <!<  ((α5385',) -> α5392')
//│ ╟── while constraining:  α5105'  <!<  ((α5385',) -> α5388'')
//│ ╟── while constraining:  (α5105' <: ((α5385',) -> α5388''), α5387' <: ((α5390'',) -> α5391'') => (α5389'' -> α5391''))  <!<  ((α5378',) -> α5379')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5385',) -> α5386''''), α5387' <: ((α5383'''',) -> α5384'''') => (α5382'''' -> α5384''''))›  <!<  ((α5378',) -> α5379')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5385',) -> α5386''''), α5387' <: ((α5383'''',) -> α5384'''') => (α5382'''' -> α5384''''))›  <!<  α5377'
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5380'',) -> α5381''''), α5099''' <: ((α5383'''',) -> α5384'''') => (α5382'''' -> α5384''''))›  <!<  α5377'
//│ ╟── while constraining:  (α5380'' -> ‹∀ 3. (α5105' <: ((α5380'',) -> α5381''''), α5099''' <: ((α5383'''',) -> α5384'''') => (α5382'''' -> α5384''''))›)  <!<  ((α5370',) -> α5377')
//│ ╟── while constraining:  ‹∀ 2. (α5099''' -> ‹∀ 3. (α5105' <: ((α5099''',) -> α5106''''), α5099''' <: ((α5107'''',) -> α5108'''') => (α5100'''' -> α5108''''))›)›  <!<  ((α5370',) -> α5377')
//│ ╟── while constraining:  α5105'  <!<  ((α5370',) -> α5377')
//│ ╟── while constraining:  α5105'  <!<  ((α5370',) -> α5373'')
//│ ╟── while constraining:  (α5105' <: ((α5370',) -> α5373''), α5372' <: ((α5375'',) -> α5376'') => (α5374'' -> α5376''))  <!<  ((α5363',) -> α5364')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5370',) -> α5371''''), α5372' <: ((α5368'''',) -> α5369'''') => (α5367'''' -> α5369''''))›  <!<  ((α5363',) -> α5364')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5370',) -> α5371''''), α5372' <: ((α5368'''',) -> α5369'''') => (α5367'''' -> α5369''''))›  <!<  α5362'
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5365'',) -> α5366''''), α5099''' <: ((α5368'''',) -> α5369'''') => (α5367'''' -> α5369''''))›  <!<  α5362'
//│ ╟── while constraining:  (α5365'' -> ‹∀ 3. (α5105' <: ((α5365'',) -> α5366''''), α5099''' <: ((α5368'''',) -> α5369'''') => (α5367'''' -> α5369''''))›)  <!<  ((α5355',) -> α5362')
//│ ╟── while constraining:  ‹∀ 2. (α5099''' -> ‹∀ 3. (α5105' <: ((α5099''',) -> α5106''''), α5099''' <: ((α5107'''',) -> α5108'''') => (α5100'''' -> α5108''''))›)›  <!<  ((α5355',) -> α5362')
//│ ╟── while constraining:  α5105'  <!<  ((α5355',) -> α5362')
//│ ╟── while constraining:  α5105'  <!<  ((α5355',) -> α5358'')
//│ ╟── while constraining:  (α5105' <: ((α5355',) -> α5358''), α5357' <: ((α5360'',) -> α5361'') => (α5359'' -> α5361''))  <!<  ((α5348',) -> α5349')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5355',) -> α5356''''), α5357' <: ((α5353'''',) -> α5354'''') => (α5352'''' -> α5354''''))›  <!<  ((α5348',) -> α5349')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5355',) -> α5356''''), α5357' <: ((α5353'''',) -> α5354'''') => (α5352'''' -> α5354''''))›  <!<  α5347'
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5350'',) -> α5351''''), α5099''' <: ((α5353'''',) -> α5354'''') => (α5352'''' -> α5354''''))›  <!<  α5347'
//│ ╟── while constraining:  (α5350'' -> ‹∀ 3. (α5105' <: ((α5350'',) -> α5351''''), α5099''' <: ((α5353'''',) -> α5354'''') => (α5352'''' -> α5354''''))›)  <!<  ((α5340',) -> α5347')
//│ ╟── while constraining:  ‹∀ 2. (α5099''' -> ‹∀ 3. (α5105' <: ((α5099''',) -> α5106''''), α5099''' <: ((α5107'''',) -> α5108'''') => (α5100'''' -> α5108''''))›)›  <!<  ((α5340',) -> α5347')
//│ ╟── while constraining:  α5105'  <!<  ((α5340',) -> α5347')
//│ ╟── while constraining:  α5105'  <!<  ((α5340',) -> α5343'')
//│ ╟── while constraining:  (α5105' <: ((α5340',) -> α5343''), α5342' <: ((α5345'',) -> α5346'') => (α5344'' -> α5346''))  <!<  ((α5333',) -> α5334')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5340',) -> α5341''''), α5342' <: ((α5338'''',) -> α5339'''') => (α5337'''' -> α5339''''))›  <!<  ((α5333',) -> α5334')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5340',) -> α5341''''), α5342' <: ((α5338'''',) -> α5339'''') => (α5337'''' -> α5339''''))›  <!<  α5332'
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5335'',) -> α5336''''), α5099''' <: ((α5338'''',) -> α5339'''') => (α5337'''' -> α5339''''))›  <!<  α5332'
//│ ╟── while constraining:  (α5335'' -> ‹∀ 3. (α5105' <: ((α5335'',) -> α5336''''), α5099''' <: ((α5338'''',) -> α5339'''') => (α5337'''' -> α5339''''))›)  <!<  ((α5325',) -> α5332')
//│ ╟── while constraining:  ‹∀ 2. (α5099''' -> ‹∀ 3. (α5105' <: ((α5099''',) -> α5106''''), α5099''' <: ((α5107'''',) -> α5108'''') => (α5100'''' -> α5108''''))›)›  <!<  ((α5325',) -> α5332')
//│ ╟── while constraining:  α5105'  <!<  ((α5325',) -> α5332')
//│ ╟── while constraining:  α5105'  <!<  ((α5325',) -> α5328'')
//│ ╟── while constraining:  (α5105' <: ((α5325',) -> α5328''), α5327' <: ((α5330'',) -> α5331'') => (α5329'' -> α5331''))  <!<  ((α5318',) -> α5319')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5325',) -> α5326''''), α5327' <: ((α5323'''',) -> α5324'''') => (α5322'''' -> α5324''''))›  <!<  ((α5318',) -> α5319')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5325',) -> α5326''''), α5327' <: ((α5323'''',) -> α5324'''') => (α5322'''' -> α5324''''))›  <!<  α5317'
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5320'',) -> α5321''''), α5099''' <: ((α5323'''',) -> α5324'''') => (α5322'''' -> α5324''''))›  <!<  α5317'
//│ ╟── while constraining:  (α5320'' -> ‹∀ 3. (α5105' <: ((α5320'',) -> α5321''''), α5099''' <: ((α5323'''',) -> α5324'''') => (α5322'''' -> α5324''''))›)  <!<  ((α5310',) -> α5317')
//│ ╟── while constraining:  ‹∀ 2. (α5099''' -> ‹∀ 3. (α5105' <: ((α5099''',) -> α5106''''), α5099''' <: ((α5107'''',) -> α5108'''') => (α5100'''' -> α5108''''))›)›  <!<  ((α5310',) -> α5317')
//│ ╟── while constraining:  α5105'  <!<  ((α5310',) -> α5317')
//│ ╟── while constraining:  α5105'  <!<  ((α5310',) -> α5313'')
//│ ╟── while constraining:  (α5105' <: ((α5310',) -> α5313''), α5312' <: ((α5315'',) -> α5316'') => (α5314'' -> α5316''))  <!<  ((α5303',) -> α5304')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5310',) -> α5311''''), α5312' <: ((α5308'''',) -> α5309'''') => (α5307'''' -> α5309''''))›  <!<  ((α5303',) -> α5304')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5310',) -> α5311''''), α5312' <: ((α5308'''',) -> α5309'''') => (α5307'''' -> α5309''''))›  <!<  α5302'
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5305'',) -> α5306''''), α5099''' <: ((α5308'''',) -> α5309'''') => (α5307'''' -> α5309''''))›  <!<  α5302'
//│ ╟── while constraining:  (α5305'' -> ‹∀ 3. (α5105' <: ((α5305'',) -> α5306''''), α5099''' <: ((α5308'''',) -> α5309'''') => (α5307'''' -> α5309''''))›)  <!<  ((α5295',) -> α5302')
//│ ╟── while constraining:  ‹∀ 2. (α5099''' -> ‹∀ 3. (α5105' <: ((α5099''',) -> α5106''''), α5099''' <: ((α5107'''',) -> α5108'''') => (α5100'''' -> α5108''''))›)›  <!<  ((α5295',) -> α5302')
//│ ╟── while constraining:  α5105'  <!<  ((α5295',) -> α5302')
//│ ╟── while constraining:  α5105'  <!<  ((α5295',) -> α5298'')
//│ ╟── while constraining:  (α5105' <: ((α5295',) -> α5298''), α5297' <: ((α5300'',) -> α5301'') => (α5299'' -> α5301''))  <!<  ((α5288',) -> α5289')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5295',) -> α5296''''), α5297' <: ((α5293'''',) -> α5294'''') => (α5292'''' -> α5294''''))›  <!<  ((α5288',) -> α5289')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5295',) -> α5296''''), α5297' <: ((α5293'''',) -> α5294'''') => (α5292'''' -> α5294''''))›  <!<  α5287'
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5290'',) -> α5291''''), α5099''' <: ((α5293'''',) -> α5294'''') => (α5292'''' -> α5294''''))›  <!<  α5287'
//│ ╟── while constraining:  (α5290'' -> ‹∀ 3. (α5105' <: ((α5290'',) -> α5291''''), α5099''' <: ((α5293'''',) -> α5294'''') => (α5292'''' -> α5294''''))›)  <!<  ((α5280',) -> α5287')
//│ ╟── while constraining:  ‹∀ 2. (α5099''' -> ‹∀ 3. (α5105' <: ((α5099''',) -> α5106''''), α5099''' <: ((α5107'''',) -> α5108'''') => (α5100'''' -> α5108''''))›)›  <!<  ((α5280',) -> α5287')
//│ ╟── while constraining:  α5105'  <!<  ((α5280',) -> α5287')
//│ ╟── while constraining:  α5105'  <!<  ((α5280',) -> α5283'')
//│ ╟── while constraining:  (α5105' <: ((α5280',) -> α5283''), α5282' <: ((α5285'',) -> α5286'') => (α5284'' -> α5286''))  <!<  ((α5273',) -> α5274')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5280',) -> α5281''''), α5282' <: ((α5278'''',) -> α5279'''') => (α5277'''' -> α5279''''))›  <!<  ((α5273',) -> α5274')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5280',) -> α5281''''), α5282' <: ((α5278'''',) -> α5279'''') => (α5277'''' -> α5279''''))›  <!<  α5272'
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5275'',) -> α5276''''), α5099''' <: ((α5278'''',) -> α5279'''') => (α5277'''' -> α5279''''))›  <!<  α5272'
//│ ╟── while constraining:  (α5275'' -> ‹∀ 3. (α5105' <: ((α5275'',) -> α5276''''), α5099''' <: ((α5278'''',) -> α5279'''') => (α5277'''' -> α5279''''))›)  <!<  ((α5265',) -> α5272')
//│ ╟── while constraining:  ‹∀ 2. (α5099''' -> ‹∀ 3. (α5105' <: ((α5099''',) -> α5106''''), α5099''' <: ((α5107'''',) -> α5108'''') => (α5100'''' -> α5108''''))›)›  <!<  ((α5265',) -> α5272')
//│ ╟── while constraining:  α5105'  <!<  ((α5265',) -> α5272')
//│ ╟── while constraining:  α5105'  <!<  ((α5265',) -> α5268'')
//│ ╟── while constraining:  (α5105' <: ((α5265',) -> α5268''), α5267' <: ((α5270'',) -> α5271'') => (α5269'' -> α5271''))  <!<  ((α5258',) -> α5259')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5265',) -> α5266''''), α5267' <: ((α5263'''',) -> α5264'''') => (α5262'''' -> α5264''''))›  <!<  ((α5258',) -> α5259')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5265',) -> α5266''''), α5267' <: ((α5263'''',) -> α5264'''') => (α5262'''' -> α5264''''))›  <!<  α5257'
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5260'',) -> α5261''''), α5099''' <: ((α5263'''',) -> α5264'''') => (α5262'''' -> α5264''''))›  <!<  α5257'
//│ ╟── while constraining:  (α5260'' -> ‹∀ 3. (α5105' <: ((α5260'',) -> α5261''''), α5099''' <: ((α5263'''',) -> α5264'''') => (α5262'''' -> α5264''''))›)  <!<  ((α5250',) -> α5257')
//│ ╟── while constraining:  ‹∀ 2. (α5099''' -> ‹∀ 3. (α5105' <: ((α5099''',) -> α5106''''), α5099''' <: ((α5107'''',) -> α5108'''') => (α5100'''' -> α5108''''))›)›  <!<  ((α5250',) -> α5257')
//│ ╟── while constraining:  α5105'  <!<  ((α5250',) -> α5257')
//│ ╟── while constraining:  α5105'  <!<  ((α5250',) -> α5253'')
//│ ╟── while constraining:  (α5105' <: ((α5250',) -> α5253''), α5252' <: ((α5255'',) -> α5256'') => (α5254'' -> α5256''))  <!<  ((α5243',) -> α5244')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5250',) -> α5251''''), α5252' <: ((α5248'''',) -> α5249'''') => (α5247'''' -> α5249''''))›  <!<  ((α5243',) -> α5244')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5250',) -> α5251''''), α5252' <: ((α5248'''',) -> α5249'''') => (α5247'''' -> α5249''''))›  <!<  α5242'
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5245'',) -> α5246''''), α5099''' <: ((α5248'''',) -> α5249'''') => (α5247'''' -> α5249''''))›  <!<  α5242'
//│ ╟── while constraining:  (α5245'' -> ‹∀ 3. (α5105' <: ((α5245'',) -> α5246''''), α5099''' <: ((α5248'''',) -> α5249'''') => (α5247'''' -> α5249''''))›)  <!<  ((α5235',) -> α5242')
//│ ╟── while constraining:  ‹∀ 2. (α5099''' -> ‹∀ 3. (α5105' <: ((α5099''',) -> α5106''''), α5099''' <: ((α5107'''',) -> α5108'''') => (α5100'''' -> α5108''''))›)›  <!<  ((α5235',) -> α5242')
//│ ╟── while constraining:  α5105'  <!<  ((α5235',) -> α5242')
//│ ╟── while constraining:  α5105'  <!<  ((α5235',) -> α5238'')
//│ ╟── while constraining:  (α5105' <: ((α5235',) -> α5238''), α5237' <: ((α5240'',) -> α5241'') => (α5239'' -> α5241''))  <!<  ((α5228',) -> α5229')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5235',) -> α5236''''), α5237' <: ((α5233'''',) -> α5234'''') => (α5232'''' -> α5234''''))›  <!<  ((α5228',) -> α5229')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5235',) -> α5236''''), α5237' <: ((α5233'''',) -> α5234'''') => (α5232'''' -> α5234''''))›  <!<  α5227'
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5230'',) -> α5231''''), α5099''' <: ((α5233'''',) -> α5234'''') => (α5232'''' -> α5234''''))›  <!<  α5227'
//│ ╟── while constraining:  (α5230'' -> ‹∀ 3. (α5105' <: ((α5230'',) -> α5231''''), α5099''' <: ((α5233'''',) -> α5234'''') => (α5232'''' -> α5234''''))›)  <!<  ((α5220',) -> α5227')
//│ ╟── while constraining:  ‹∀ 2. (α5099''' -> ‹∀ 3. (α5105' <: ((α5099''',) -> α5106''''), α5099''' <: ((α5107'''',) -> α5108'''') => (α5100'''' -> α5108''''))›)›  <!<  ((α5220',) -> α5227')
//│ ╟── while constraining:  α5105'  <!<  ((α5220',) -> α5227')
//│ ╟── while constraining:  α5105'  <!<  ((α5220',) -> α5223'')
//│ ╟── while constraining:  (α5105' <: ((α5220',) -> α5223''), α5222' <: ((α5225'',) -> α5226'') => (α5224'' -> α5226''))  <!<  ((α5213',) -> α5214')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5220',) -> α5221''''), α5222' <: ((α5218'''',) -> α5219'''') => (α5217'''' -> α5219''''))›  <!<  ((α5213',) -> α5214')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5220',) -> α5221''''), α5222' <: ((α5218'''',) -> α5219'''') => (α5217'''' -> α5219''''))›  <!<  α5212'
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5215'',) -> α5216''''), α5099''' <: ((α5218'''',) -> α5219'''') => (α5217'''' -> α5219''''))›  <!<  α5212'
//│ ╟── while constraining:  (α5215'' -> ‹∀ 3. (α5105' <: ((α5215'',) -> α5216''''), α5099''' <: ((α5218'''',) -> α5219'''') => (α5217'''' -> α5219''''))›)  <!<  ((α5205',) -> α5212')
//│ ╟── while constraining:  ‹∀ 2. (α5099''' -> ‹∀ 3. (α5105' <: ((α5099''',) -> α5106''''), α5099''' <: ((α5107'''',) -> α5108'''') => (α5100'''' -> α5108''''))›)›  <!<  ((α5205',) -> α5212')
//│ ╟── while constraining:  α5105'  <!<  ((α5205',) -> α5212')
//│ ╟── while constraining:  α5105'  <!<  ((α5205',) -> α5208'')
//│ ╟── while constraining:  (α5105' <: ((α5205',) -> α5208''), α5207' <: ((α5210'',) -> α5211'') => (α5209'' -> α5211''))  <!<  ((α5198',) -> α5199')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5205',) -> α5206''''), α5207' <: ((α5203'''',) -> α5204'''') => (α5202'''' -> α5204''''))›  <!<  ((α5198',) -> α5199')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5205',) -> α5206''''), α5207' <: ((α5203'''',) -> α5204'''') => (α5202'''' -> α5204''''))›  <!<  α5197'
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5200'',) -> α5201''''), α5099''' <: ((α5203'''',) -> α5204'''') => (α5202'''' -> α5204''''))›  <!<  α5197'
//│ ╟── while constraining:  (α5200'' -> ‹∀ 3. (α5105' <: ((α5200'',) -> α5201''''), α5099''' <: ((α5203'''',) -> α5204'''') => (α5202'''' -> α5204''''))›)  <!<  ((α5190',) -> α5197')
//│ ╟── while constraining:  ‹∀ 2. (α5099''' -> ‹∀ 3. (α5105' <: ((α5099''',) -> α5106''''), α5099''' <: ((α5107'''',) -> α5108'''') => (α5100'''' -> α5108''''))›)›  <!<  ((α5190',) -> α5197')
//│ ╟── while constraining:  α5105'  <!<  ((α5190',) -> α5197')
//│ ╟── while constraining:  α5105'  <!<  ((α5190',) -> α5193'')
//│ ╟── while constraining:  (α5105' <: ((α5190',) -> α5193''), α5192' <: ((α5195'',) -> α5196'') => (α5194'' -> α5196''))  <!<  ((α5183',) -> α5184')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5190',) -> α5191''''), α5192' <: ((α5188'''',) -> α5189'''') => (α5187'''' -> α5189''''))›  <!<  ((α5183',) -> α5184')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5190',) -> α5191''''), α5192' <: ((α5188'''',) -> α5189'''') => (α5187'''' -> α5189''''))›  <!<  α5182'
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5185'',) -> α5186''''), α5099''' <: ((α5188'''',) -> α5189'''') => (α5187'''' -> α5189''''))›  <!<  α5182'
//│ ╟── while constraining:  (α5185'' -> ‹∀ 3. (α5105' <: ((α5185'',) -> α5186''''), α5099''' <: ((α5188'''',) -> α5189'''') => (α5187'''' -> α5189''''))›)  <!<  ((α5175',) -> α5182')
//│ ╟── while constraining:  ‹∀ 2. (α5099''' -> ‹∀ 3. (α5105' <: ((α5099''',) -> α5106''''), α5099''' <: ((α5107'''',) -> α5108'''') => (α5100'''' -> α5108''''))›)›  <!<  ((α5175',) -> α5182')
//│ ╟── while constraining:  α5105'  <!<  ((α5175',) -> α5182')
//│ ╟── while constraining:  α5105'  <!<  ((α5175',) -> α5178'')
//│ ╟── while constraining:  (α5105' <: ((α5175',) -> α5178''), α5177' <: ((α5180'',) -> α5181'') => (α5179'' -> α5181''))  <!<  ((α5168',) -> α5169')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5175',) -> α5176''''), α5177' <: ((α5173'''',) -> α5174'''') => (α5172'''' -> α5174''''))›  <!<  ((α5168',) -> α5169')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5175',) -> α5176''''), α5177' <: ((α5173'''',) -> α5174'''') => (α5172'''' -> α5174''''))›  <!<  α5167'
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5170'',) -> α5171''''), α5099''' <: ((α5173'''',) -> α5174'''') => (α5172'''' -> α5174''''))›  <!<  α5167'
//│ ╟── while constraining:  (α5170'' -> ‹∀ 3. (α5105' <: ((α5170'',) -> α5171''''), α5099''' <: ((α5173'''',) -> α5174'''') => (α5172'''' -> α5174''''))›)  <!<  ((α5160',) -> α5167')
//│ ╟── while constraining:  ‹∀ 2. (α5099''' -> ‹∀ 3. (α5105' <: ((α5099''',) -> α5106''''), α5099''' <: ((α5107'''',) -> α5108'''') => (α5100'''' -> α5108''''))›)›  <!<  ((α5160',) -> α5167')
//│ ╟── while constraining:  α5105'  <!<  ((α5160',) -> α5167')
//│ ╟── while constraining:  α5105'  <!<  ((α5160',) -> α5163'')
//│ ╟── while constraining:  (α5105' <: ((α5160',) -> α5163''), α5162' <: ((α5165'',) -> α5166'') => (α5164'' -> α5166''))  <!<  ((α5153',) -> α5154')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5160',) -> α5161''''), α5162' <: ((α5158'''',) -> α5159'''') => (α5157'''' -> α5159''''))›  <!<  ((α5153',) -> α5154')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5160',) -> α5161''''), α5162' <: ((α5158'''',) -> α5159'''') => (α5157'''' -> α5159''''))›  <!<  α5152'
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5155'',) -> α5156''''), α5099''' <: ((α5158'''',) -> α5159'''') => (α5157'''' -> α5159''''))›  <!<  α5152'
//│ ╟── while constraining:  (α5155'' -> ‹∀ 3. (α5105' <: ((α5155'',) -> α5156''''), α5099''' <: ((α5158'''',) -> α5159'''') => (α5157'''' -> α5159''''))›)  <!<  ((α5151',) -> α5152')
//│ ╟── while constraining:  ‹∀ 2. (α5099''' -> ‹∀ 3. (α5105' <: ((α5099''',) -> α5106''''), α5099''' <: ((α5107'''',) -> α5108'''') => (α5100'''' -> α5108''''))›)›  <!<  ((α5151',) -> α5152')
//│ ╟── while constraining:  α5105'  <!<  ((α5151',) -> α5152')
//│ ╟── while constraining:  α5105'  <!<  ((α5142'',) -> α5147'')
//│ ╟── while constraining:  (α5105' <: ((α5142'',) -> α5147''), α5099''' <: ((α5149'',) -> α5150'') => (α5148'' -> α5150''))  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 3. (α5105' <: ((α5142'',) -> α5143''''), α5099''' <: ((α5145'''',) -> α5146'''') => (α5144'''' -> α5146''''))›  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  (α5142'' -> ‹∀ 3. (α5105' <: ((α5142'',) -> α5143''''), α5099''' <: ((α5145'''',) -> α5146'''') => (α5144'''' -> α5146''''))›)  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 2. (α5099''' -> ‹∀ 3. (α5105' <: ((α5099''',) -> α5106''''), α5099''' <: ((α5107'''',) -> α5108'''') => (α5100'''' -> α5108''''))›)›  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 2. (α5099''' -> ‹∀ 3. (α5105' <: ((α5099''',) -> α5106''''), α5099''' <: ((α5107'''',) -> α5108'''') => (α5100'''' -> α5108''''))›)›  <!<  ‹∀ 0. (('a3727' -> 'a3727') -> ('a3727' -> 'a3727'))›
//│ ╟── while constraining:  ‹∀ 2. (α5099''' -> ‹∀ 3. (α5105' <: ((α5099''',) -> α5106''''), α5099''' <: ((α5107'''',) -> α5108'''') => (α5100'''' -> α5108''''))›)›  <!<  Fint
//│ ╟── while constraining:  α5139'  <!<  Fint
//│ ╟── while constraining:  (α5138' -> α5139')  <!<  (Int -> Fint)
//│ ╟── while constraining:  ‹∀ 1. (α5091'' -> α5109'')›  <!<  (Int -> Fint)
//│ ╟── while constraining:  to_church5134'  <!<  (Int -> Fint)
//│ ╟── while constraining:  ‹∀ 0. to_church5090'›  <!<  (Int -> Fint)
//│ ╙── while constraining:  ‹∀ 0. to_church5090'›  <!<  ‹∀ 0. (Int -> Fint)›
//│          = [Function: to_church]


// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1)) f x)
rec def to_church' n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church (n - 1)) f x)
//│ to_church': int -> (forall 'b. 'b -> (forall 'a, 'c. (('c & 'a) -> 'c
//│   where
//│     'b <: 'a -> 'a & 'a -> 'c)))
//│           = [Function: to_church]


// let rec c_fact (n:Int) =
//   c_if (c_iszero n) (fun (u:Unit) -> c_i1)
//     (fun (u:Unit) -> c_mul n (c_fact (c_pred n)))
rec def c_fact (n: Fint) =
  c_if (c_iszero n) (fun (u: Funit) -> c_i1)
    (fun (u: Funit) -> c_mul n (c_fact (c_pred n)))
rec def c_fact' n =
  c_if' (c_iszero' n) (fun _ -> c_i1)
    (fun _ -> c_mul' n (c_fact' (c_pred' n)))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1842: 	  c_if (c_iszero n) (fun (u: Funit) -> c_i1)
//│ ║          	  ^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a` is not an instance of type `'a`
//│ ║  l.1249: 	type Fbool = forall 'a. (Funit -> 'a) -> (Funit -> 'a) -> 'a
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1249: 	type Fbool = forall 'a. (Funit -> 'a) -> (Funit -> 'a) -> 'a
//│ ║          	                    ^^
//│ ╟── from application:
//│ ║  l.1274: 	def c_true = fun a -> fun b -> a c_unit
//│ ╙──        	                               ^^^^^^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.1841: 	rec def c_fact (n: Fint) =
//│ ║          	               ^^^^^^^^^^^
//│ ║  l.1842: 	  c_if (c_iszero n) (fun (u: Funit) -> c_i1)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1843: 	    (fun (u: Funit) -> c_mul n (c_fact (c_pred n)))
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.1841: 	rec def c_fact (n: Fint) =
//│ ║          	               ^^^^^^^^^^^
//│ ║  l.1842: 	  c_if (c_iszero n) (fun (u: Funit) -> c_i1)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1843: 	    (fun (u: Funit) -> c_mul n (c_fact (c_pred n)))
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` is not an instance of type `'a`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ c_fact: Fint -> (forall 'b. (‘a -> ‘a & 'b) -> (forall 'c, 'd. ('c -> 'd
//│   where
//│     'b <: 'c -> 'd)) | error)
//│   where
//│     'a := ‘a
//│     'a0 := ‘a
//│     'e <: (forall 'f. 'f -> 'f) -> ‘a
//│       = [Function: c_fact]
//│ c_fact': (('a -> 'a -> ((forall 'b. 'b -> 'b) -> 'c) -> 'c) -> (((forall 'b. 'b -> 'b) -> ‘a & 'a) -> ('a -> 'd
//│   where
//│     'a <: (forall 'b. 'b -> 'b) -> 'd)) -> 'a) -> nothing
//│        = [Function: c_fact]


// let print_fact n =
//   print_string "Factorial " ;
//   print_int n ;
//   print_string " = " ;
//   c_printint (c_fact (to_church n)) ;
//   print_string "\n" ;
//   ()
:ng
def print_fact n =
  let _ = print_string "Factorial " in
  let _ = print_int n in
  let _ = print_string " = " in
  let _ = c_printint (c_fact (to_church n)) in
          print_string "\n"
def print_fact' n =
  let _ = print_string "Factorial " in
  let _ = print_int n in
  let _ = print_string " = " in
  let _ = c_printint' (c_fact' (to_church' n)) in
          print_string "\n"
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1911: 	  let _ = c_printint (c_fact (to_church n)) in
//│ ║          	                      ^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1911: 	  let _ = c_printint (c_fact (to_church n)) in
//│ ║          	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a` is not an instance of type `'a`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ print_fact: int -> unit
//│ print_fact': int -> unit

def print_fact2 n =
  concat "Factorial " (
  concat (toString n) (
  concat " = "
         (c_printint2 (c_fact (to_church n))) ))
def print_fact2' n =
  concat "Factorial " (
  concat (toString n) (
  concat " = "
         (c_printint2' (c_fact' (to_church' n))) ))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1944: 	         (c_printint2 (c_fact (to_church n))) ))
//│ ║          	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` is not an instance of type `'a`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ print_fact2: int -> string
//│   where
//│     'a := ‘a
//│     'a0 := ‘a
//│            = [Function: print_fact2]
//│ print_fact2': int -> string
//│             = [Function: print_fact2]

// let essai =
//   print_string "Church integers :\n";
//   let c_i5 = c_add c_i3 c_i2 in
//   let c_i10 = c_mul c_i5 c_i2 in
//   let c_i9 = c_pred c_i10 in
//   let c_99 = c_add (c_mul c_i9 c_i10) c_i9 in
//   let c_98 = c_pred c_99 in
//   print_string "This should be 98 : " ;
//   c_printint c_98;
//   print_string "\n\n" ;
this_should_be_98 =
  let c_i5 = c_add c_i3 c_i2 in
  let c_i10 = c_mul c_i5 c_i2 in
  let c_i9 = c_pred c_i10 in
  let c_99 = c_add (c_mul c_i9 c_i10) c_i9 in
  let c_98 = c_pred c_99 in
  c_printint2 c_98
this_should_be_98' =
  let c_i5' = c_add' c_i3' c_i2 in
  let c_i10' = c_mul' c_i5' c_i2 in
  let c_i9' = c_pred' c_i10' in
  let c_99' = c_add' (c_mul' c_i9' c_i10') c_i9' in
  let c_98' = c_pred' c_99' in
  c_printint2' c_98'
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1978: 	  let c_i5 = c_add c_i3 c_i2 in
//│ ║          	             ^^^^^^^^^^
//│ ╟── type `‘a` is not an instance of type `'a`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1979: 	  let c_i10 = c_mul c_i5 c_i2 in
//│ ║          	              ^^^^^^^^^^^^^^^
//│ ╟── type `‘a` is not an instance of type `'a`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1980: 	  let c_i9 = c_pred c_i10 in
//│ ║          	             ^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1981: 	  let c_99 = c_add (c_mul c_i9 c_i10) c_i9 in
//│ ║          	                    ^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1981: 	  let c_99 = c_add (c_mul c_i9 c_i10) c_i9 in
//│ ║          	             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1982: 	  let c_98 = c_pred c_99 in
//│ ║          	             ^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ this_should_be_98: string
//│                  = '98'
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1985: 	  let c_i5' = c_add' c_i3' c_i2 in
//│ ║          	              ^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (forall ?b, ?c, ?d, ?e. (?d -> ?c
//│   where
//│     ?f <: ?a -> ?e
//│     ?g <: ?d -> ?b))` is not an instance of type `'a`
//│ ║  l.1450: 	def c_succ' n = fun f -> fun x -> n f (f x)
//│ ║          	                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── from application:
//│ ║  l.1449: 	def c_succ (n: Fint) = fun f -> fun x -> n f (f x)
//│ ╙──        	                                              ^^^
//│ this_should_be_98': string
//│                   = '98'

//   print_fact2 0 ;
//   print_fact2 1 ;
//   print_fact2 2 ;
//   print_fact2 3 ;
//   print_fact2 4 ;
//   print_fact2 5 ;
//   print_fact2 6 ;
//   ()
print_fact2 0
print_fact2 1
print_fact2 2
print_fact2 3
print_fact2 4
print_fact2 5
print_fact2 6
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.2073: 	print_fact2 0
//│ ║          	^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ res: error | string
//│    = 'Factorial 0 = 1'
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.2074: 	print_fact2 1
//│ ║          	^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ res: error | string
//│    = 'Factorial 1 = 1'
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.2075: 	print_fact2 2
//│ ║          	^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ res: error | string
//│    = 'Factorial 2 = 2'
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.2076: 	print_fact2 3
//│ ║          	^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ res: error | string
//│    = 'Factorial 3 = 6'
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.2077: 	print_fact2 4
//│ ║          	^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ res: error | string
//│    = 'Factorial 4 = 24'
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.2078: 	print_fact2 5
//│ ║          	^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ res: error | string
//│    = 'Factorial 5 = 120'
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.2079: 	print_fact2 6
//│ ║          	^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ res: error | string
//│    = 'Factorial 6 = 720'

print_fact2' 0
print_fact2' 1
print_fact2' 2
print_fact2' 3
print_fact2' 4
print_fact2' 5
print_fact2' 6
//│ res: string
//│    = 'Factorial 6 = 720'
//│ res: string
//│    = 'Factorial 6 = 720'
//│ res: string
//│    = 'Factorial 6 = 720'
//│ res: string
//│    = 'Factorial 6 = 720'
//│ res: string
//│    = 'Factorial 6 = 720'
//│ res: string
//│    = 'Factorial 6 = 720'
//│ res: string
//│    = 'Factorial 6 = 720'



