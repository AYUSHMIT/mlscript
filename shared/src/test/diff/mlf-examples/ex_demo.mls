:NoRecursiveTypes
:GeneralizeCurriedFunctions
// :NoJS

// ============ Dummy classes to represent the types in the examples ============

class None
class Some[a]: { val: a }
type Option[a] = None | Some[a]
//│ Defined class None
//│ Defined class Some[+a]
//│ Defined type alias Option[+a]

class List[a]
  method Head: a
  method Tail: List[a]
//│ Defined class List[+a]
//│ Declared List.Head: List['a] -> 'a
//│ Declared List.Tail: List['a] -> List['a]

class Cons[a]: List[a] & { head: a; tail: List[a] }
  method Head = this.head
  method Tail = this.tail
def cons[a]: a -> List[a] -> List[a]
def cons head tail = Cons { head; tail }
//│ Defined class Cons[+a]
//│ Defined Cons.Head: Cons['a] -> 'a
//│ Defined Cons.Tail: Cons['a] -> List['a]
//│ cons: 'a -> List['a] -> List['a]
//│     = <missing implementation>
//│ 'b -> (forall 'b, 'c, 'a, 'tail, 'd, 'head. ('c -> 'd
//│   where
//│     'c <: List['a] & 'tail
//│     'd :> Cons['a] with {head: 'head, tail: 'tail}
//│     'b <: 'a & 'head))
//│   <:  cons:
//│ 'a -> List['a] -> List['a]
//│     = [Function: cons]

class Nil[a]: List[a]
  method Head = error
  method Tail = this
def nil: List['a]
def nil = Nil {}
//│ Defined class Nil[+a]
//│ Defined Nil.Head: Nil[?] -> nothing
//│ Defined Nil.Tail: (Nil['a] & 'this) -> (Nil['a] & 'this)
//│ nil: List[nothing]
//│    = <missing implementation>
//│ Nil[nothing]
//│   <:  nil:
//│ List[nothing]
//│    = Nil {}

// ============ Type signatures for functions used in the examples ============

def head: forall 'a. List['a] -> 'a
def head l = l.Head
//│ head: List['a] -> 'a
//│     = <missing implementation>
//│ 'b -> 'c
//│   where
//│     'b <: List['a]
//│     'a <: 'c
//│   <:  head:
//│ List['a] -> 'a
//│     = [Function: head]

def tail: forall 'a. List['a] -> List['a]
def tail l = l.Tail
//│ tail: List['a] -> List['a]
//│     = <missing implementation>
//│ 'b -> 'c
//│   where
//│     'b <: List['a]
//│     'c :> List['a]
//│   <:  tail:
//│ List['a] -> List['a]
//│     = [Function: tail]

def print_bool: bool -> unit
def print_bool b = log b
//│ print_bool: bool -> unit
//│           = <missing implementation>
//│ 'a -> 'b
//│   where
//│     'b :> unit
//│     'a <: 'a
//│   <:  print_bool:
//│ bool -> unit
//│           = [Function: print_bool]

def print_int: int -> unit
def print_int i = log i
//│ print_int: int -> unit
//│          = <missing implementation>
//│ 'a -> 'b
//│   where
//│     'a <: 'a
//│     'b :> unit
//│   <:  print_int:
//│ int -> unit
//│          = [Function: print_int]

def print_string: string -> unit
def print_string s = log s
//│ print_string: string -> unit
//│             = <missing implementation>
//│ 'a -> 'b
//│   where
//│     'a <: 'a
//│     'b :> unit
//│   <:  print_string:
//│ string -> unit
//│             = [Function: print_string]



// (* A quick demo of MLF *)

// (* In the following, "untype expr" means that the expression expr should not be typable. *)

// type sid = ['a] 'a -> 'a
type Sid = forall 'a. 'a -> 'a
//│ Defined type alias Sid

// let id = fun x -> x
def id = fun x -> x
//│ id: 'a -> 'a
//│   = [Function: id]

// let delta = fun (x:sid) -> x x
def delta = fun (x: Sid) -> x x
def delta_ = fun x -> x x
//│ delta: Sid -> 'a
//│   where
//│     'b :> Sid
//│        <: Sid & 'b -> 'a
//│      = [Function: delta]
//│ delta_: 'a -> 'b
//│   where
//│     'a <: 'a -> 'b
//│       = [Function: delta_]

// let choose x y = if true then x else y
def choose x y = if true then x else y
//│ choose: 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('c -> 'd
//│   where
//│     'b <: 'c -> 'd
//│     'e :> 'f -> 'f -> 'f
//│        <: 'a -> 'b))
//│       = [Function: choose]

// let succ n = n + 1
// ;;
def succ n = n + 1
//│ succ: 'a -> 'b
//│   where
//│     'a <: int
//│     'c :> int -> int
//│        <: 1 -> 'b
//│     = [Function: succ]

// let test1 = delta id
test1 = delta id
//│ test1: Sid
//│      = [Function: id]

// untype delta succ
:e
delta succ
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.171: 	delta succ
//│ ║         	^^^^^^^^^^
//│ ╟── type `‘a` is not an instance of type `int`
//│ ║  l.124: 	type Sid = forall 'a. 'a -> 'a
//│ ╙──       	                  ^^
//│ res: error | Sid
//│    = 'function succ(n) {  return n + 1;}1'

// :e // FIXME? failed with genLamBodies but works with quantif extrus
// let test2 = delta (choose id id)
test2 = delta (choose id id)
//│ test2: Sid
//│      = [Function: id]

test2 = delta_ (choose id id)
//│ test2: 'a -> 'a
//│      = [Function: id]

// untype delta (choose id succ)
:e
delta (choose id succ)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.193: 	delta (choose id succ)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a` is not an instance of type `int`
//│ ║  l.124: 	type Sid = forall 'a. 'a -> 'a
//│ ╙──       	                  ^^
//│ res: error | Sid
//│    = [Function: id]

// let test3 = choose id succ
test3 = choose id succ
//│ test3: ('a & 'b) -> 'a
//│   where
//│     'b <: int
//│     'c :> int -> int
//│        <: 1 -> 'a
//│      = [Function: id]

// let test4 = choose succ id
// ;;
test4 = choose succ id
//│ test4: ('a & 'b) -> 'b
//│   where
//│     'a <: int
//│     'c :> int -> int
//│        <: 1 -> 'b
//│      = [Function: succ]


// let eqstring s1 s2 = (s1^"A" = s2^"A")
def eqstring s1 s2 = eq (concat s1 "A") (concat s2 "A")
//│ eqstring: 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h. ('b -> 'g
//│   where
//│     'a <: string
//│     'b <: string
//│     'c :> string -> string
//│        <: "A" -> 'd
//│     'd <: 'd
//│     'e :> 'd -> bool
//│        <: 'f -> 'g
//│     'h :> string -> string
//│        <: "A" -> 'f))
//│         = [Function: eqstring]

// let eqint i1 i2 = (i1 - i2) = 0
def eqint i1 i2 = (i1 - i2) == 0
//│ eqint: 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('c -> 'f
//│   where
//│     'a <: int
//│     'b :> int -> int
//│        <: 'c -> 'd
//│     'd <: int
//│     'e :> int -> bool
//│        <: 0 -> 'f))
//│      = [Function: eqint]

// let eqbool b1 b2 = if b1 then b2 else (not b2)
def eqbool b1 b2 = if b1 then b2 else (not b2)
//│ eqbool: 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f, 'g. ('b -> 'g
//│   where
//│     'a <: bool
//│     'b <: bool
//│     'c :> 'd -> 'd -> 'd
//│        <: 'b -> 'e
//│     'e <: 'f -> 'g
//│     'f :> bool))
//│       = [Function: eqbool]

// let ignore x = ()
def ignore x = null
//│ ignore: anything -> null
//│       = [Function: ignore]


def listiterA: ('a -> unit) -> List['a] -> unit
//│ listiterA: ('a -> unit) -> List['a] -> unit
//│          = <missing implementation>

// let rec listiter f ll =
//   if ll = [] then ()
//   else begin ignore (f (car ll)) ; listiter f (cdr ll) end
// ;;

:RecursiveTypes // needed for this recursive def
rec def listiter f ll =
  if eq ll nil then unit
  else
    let _ = ignore (f (head ll)) in 
    listiter f (tail ll)
//│ listiter: ('a -> anything) -> List['a] -> unit
//│         = [Function: listiter]
:NoRecursiveTypes

listiterA = listiter
//│ ('a -> anything) -> List['a] -> unit
//│   <:  listiterA:
//│ ('a -> unit) -> List['a] -> unit
//│          = [Function: listiter]



// (* Polymorphic recursion. *)
// untype let rec id x = if true then x else id id x in id

// * This does not actually seem to require general polymorphic recursion,
// *  but it does need recursive types:
:RecursiveTypes
rec def id1 x = if true then x else id1 id1 x
//│ id1: 'id1
//│   where
//│     'id1 :> 'a -> 'b
//│     'a :> 'id1
//│        <: 'b
//│     'b :> 'id1
//│        <: 'a -> 'b
//│    = [Function: id1]
:NoRecursiveTypes

// ^ FIXME type pp – id1 is not shown to have an upper bound!
:ns
id1
//│ res: forall 'id1, 'a, 'b, 'c, 'd, 'e. 'id1
//│   where
//│     'id1 :> 'a -> 'e
//│          <: 'a & 'id1 -> 'c
//│     'a :> 'a -> 'e
//│        <: 'b
//│     'e :> 'a -> 'e
//│        <: 'd & 'c
//│     'c :> 'a -> 'e
//│        <: 'a -> 'd
//│     'd :> 'a -> 'e
//│        <: 'b
//│     'b :> 'a -> 'e
//│        <: 'e
//│    = [Function: id1]

:e
id1: nothing
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.332: 	id1: nothing
//│ ║         	^^^
//│ ╟── function of type `?a -> ?b` does not match type `nothing`
//│ ║  l.301: 	rec def id1 x = if true then x else id1 id1 x
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `nothing`
//│ ║  l.332: 	id1: nothing
//│ ║         	^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.332: 	id1: nothing
//│ ╙──       	     ^^^^^^^
//│ res: nothing
//│    = [Function: id1]

:e // * Works with `:RecursiveTypes`
id1 id
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.349: 	id1 id
//│ ║         	^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. ‹∀ 1. (α216'' -> α216'')››  <:  α20_588    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. ‹∀ 1. (α216'' -> α216'')››  <:  α20_555'
//│ res: error
//│    = [Function: id]

res id
//│ res: error
//│    = [Function: id]

res id
//│ res: error
//│    = [Function: id]

:e // FIXME?
id1 id1
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.368: 	id1 id1
//│ ║         	^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. id1552'›  <:  α20_601    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. id1552'›  <:  α20_555'
//│ res: error
//│    = [Function: id1]

rec def id1_ x = id1_ id1_ x
//│ id1_: anything -> nothing
//│     = [Function: id1_]


// let rec (id:sid) x = if true then x else id id x

def id2: Sid
//│ id2: Sid
//│    = <missing implementation>

// * (Note: absence of `rec` emulates annotated rec def.)
def id2 x = if true then x else id2 id2 x
//│ 'b -> 'c
//│   where
//│     'd :> 'e -> 'e -> 'e
//│        <: 'b -> 'f
//│     'f <: 'g -> 'c
//│     'h <: 'b -> 'g
//│     'a :> Sid
//│        <: 'h
//│   <:  id2:
//│ Sid
//│    = <no result>
//│      id2 is not implemented




// (* Existential types. *)
// (* Creating an encapsulation is explicit (unavoidable). *)
// (* Here, we build (Exist 'a . 'a * ('a -> unit))              *)
// (*        then    (Exist 'a . 'a * 'a * ('a -> 'a -> bool))   *)


// let make_ex1 x (f:['a] ('a * ('a -> 'c)) -> 'b) = f x
def make_ex1 x (f: forall 'a. (('a, 'a -> 'c),) -> 'b) = f x
//│ make_ex1: 'd -> (forall 'd, 'e, 'c, 'b, 'f. ((forall 'a. ('a, 'a -> 'c,) -> 'b) -> 'f
//│   where
//│     'e :> forall 'a. ('a, 'a -> 'c,) -> 'b
//│        <: (forall 'a. ('a, 'a -> 'c,) -> 'b) & 'd -> 'f))
//│         = [Function: make_ex1]

ex1_1 = make_ex1 (("A String", print_string))
//│ ex1_1: (forall 'a. ('a, 'a -> 'c,) -> 'b) -> 'd
//│   where
//│     'e :> forall 'a. ('a, 'a -> 'c,) -> 'b
//│        <: (forall 'a. ('a, 'a -> 'c,) -> 'b) & ("A String", string -> unit,) -> 'd
//│      = [Function (anonymous)]

ex1_1 (fun ((x, f)) -> f x)
//│ = undefined
//│ output:
//│ A String

ex1_2 = if true then make_ex1 ((42, print_int)) else ex1_1
//│ ex1_2: (forall 'a, 'a0. ('a, 'a -> 'c,) -> 'b & ('a0, 'a0 -> 'c0,) -> 'b0) -> 'd
//│   where
//│     'e :> forall 'a. ('a, 'a -> 'c,) -> 'b
//│        <: (forall 'a. ('a, 'a -> 'c,) -> 'b) & (42, int -> unit,) -> 'd
//│     'f :> forall 'a0. ('a0, 'a0 -> 'c0,) -> 'b0
//│        <: (forall 'a0. ('a0, 'a0 -> 'c0,) -> 'b0) & ("A String", string -> unit,) -> 'd
//│      = [Function (anonymous)]

ex1_2 (fun ((x, f)) -> f x)
//│ = undefined
//│ output:
//│ 42


// let make_ex2 x (f:['a] ('a * 'a * ('a -> 'a -> 'c)) -> 'b) = f x
// ;;
def make_ex2 x (f: forall 'a. (('a, 'a, 'a -> 'a -> 'c),) -> 'b) = f x
//│ make_ex2: 'd -> (forall 'd, 'e, 'c, 'b, 'f. ((forall 'a. ('a, 'a, 'a -> 'a -> 'c,) -> 'b) -> 'f
//│   where
//│     'e :> forall 'a. ('a, 'a, 'a -> 'a -> 'c,) -> 'b
//│        <: (forall 'a. ('a, 'a, 'a -> 'a -> 'c,) -> 'b) & 'd -> 'f))
//│         = [Function: make_ex2]

// let ex_list1 = [ make_ex1 ("A String", print_string) ; 
// 		 make_ex1 (8250, print_int) ;
// 		 make_ex1 (true, print_bool) ]
// ;;
ex_list1 = cons (make_ex1 (("A String", print_string)))
  (cons (make_ex1 ((8250, print_int)))
  (cons (make_ex1 ((true, print_bool))) nil))
//│ ex_list1: List[forall 'd, 'c, 'b, 'e, 'f, 'c0, 'b0, 'g, 'c1, 'b1. ((forall 'a, 'a0, 'a1. ('a1, 'a1 -> 'c1,) -> 'b1 & ('a, 'a -> 'c,) -> 'b & ('a0, 'a0 -> 'c0,) -> 'b0) -> 'e
//│   where
//│     'd :> forall 'a. ('a, 'a -> 'c,) -> 'b
//│        <: (forall 'a. ('a, 'a -> 'c,) -> 'b) & (8250, int -> unit,) -> 'e
//│     'f :> forall 'a0. ('a0, 'a0 -> 'c0,) -> 'b0
//│        <: (forall 'a0. ('a0, 'a0 -> 'c0,) -> 'b0) & (true, bool -> unit,) -> 'e
//│     'g :> forall 'a1. ('a1, 'a1 -> 'c1,) -> 'b1
//│        <: (forall 'a1. ('a1, 'a1 -> 'c1,) -> 'b1) & ("A String", string -> unit,) -> 'e)]
//│         = Cons {
//│             head: [Function (anonymous)],
//│             tail: Cons {
//│               head: [Function (anonymous)],
//│               tail: Cons { head: [Function (anonymous)], tail: Nil {} }
//│             }
//│           }

// let ex_list2 = [ make_ex2 ("String", "String", eqstring) ;
// 		 make_ex2 ( 1250, 4890, eqint) ;
// 		 make_ex2 ( true, false, eqbool) ]
// ;;
ex_list2 = cons (make_ex2 (("String", "String", eqstring)))
  (cons (make_ex2 ((1250, 4890, eqint)))
  (cons (make_ex2 ((true, false, eqbool))) nil))
//│ ex_list2: List[forall 'd, 'c, 'b, 'e, 'c0, 'b0, 'f, 'c1, 'b1. ((forall 'a, 'a0, 'a1. ('a1, 'a1, 'a1 -> 'a1 -> 'c1,) -> 'b1 & ('a, 'a, 'a -> 'a -> 'c,) -> 'b & ('a0, 'a0, 'a0 -> 'a0 -> 'c0,) -> 'b0) -> 'g
//│   where
//│     'd :> forall 'a. ('a, 'a, 'a -> 'a -> 'c,) -> 'b
//│        <: (forall 'a. ('a, 'a, 'a -> 'a -> 'c,) -> 'b) & (1250, 4890, forall 'h. 'h -> (forall 'h, 'i, 'j, 'k, 'l, 'm. ('j -> 'm
//│   where
//│     'h <: int
//│     'i :> int -> int
//│        <: 'j -> 'k
//│     'k <: int
//│     'l :> int -> bool
//│        <: 0 -> 'm)),) -> 'g
//│     'e :> forall 'a0. ('a0, 'a0, 'a0 -> 'a0 -> 'c0,) -> 'b0
//│        <: (forall 'a0. ('a0, 'a0, 'a0 -> 'a0 -> 'c0,) -> 'b0) & (true, false, forall 'n. 'n -> (forall 'n, 'o, 'p, 'q, 'r, 's, 't. ('o -> 't
//│   where
//│     'n <: bool
//│     'o <: bool
//│     'p :> 'q -> 'q -> 'q
//│        <: 'o -> 'r
//│     'r <: 's -> 't
//│     's :> bool)),) -> 'g
//│     'f :> forall 'a1. ('a1, 'a1, 'a1 -> 'a1 -> 'c1,) -> 'b1
//│        <: (forall 'a1. ('a1, 'a1, 'a1 -> 'a1 -> 'c1,) -> 'b1) & ("String", "String", forall 'u. 'u -> (forall 'u, 'v, 'w, 'x, 'y, 'z, 'a1, 'b1. ('v -> 'a1
//│   where
//│     'u <: string
//│     'v <: string
//│     'w :> string -> string
//│        <: "A" -> 'x
//│     'x <: 'x
//│     'y :> 'x -> bool
//│        <: 'z -> 'a1
//│     'b1 :> string -> string
//│         <: "A" -> 'z)),) -> 'g)]
//│         = Cons {
//│             head: [Function (anonymous)],
//│             tail: Cons {
//│               head: [Function (anonymous)],
//│               tail: Cons { head: [Function (anonymous)], tail: Nil {} }
//│             }
//│           }


h = head ex_list1
//│ h: (forall 'a, 'a0, 'a1. ('a1, 'a1 -> 'c,) -> 'b & ('a, 'a -> 'c0,) -> 'b0 & ('a0, 'a0 -> 'c1,) -> 'b1) -> 'd
//│   where
//│     'e :> forall 'a. ('a, 'a -> 'c0,) -> 'b0
//│        <: (forall 'a. ('a, 'a -> 'c0,) -> 'b0) & (8250, int -> unit,) -> 'd
//│     'f :> forall 'a0. ('a0, 'a0 -> 'c1,) -> 'b1
//│        <: (forall 'a0. ('a0, 'a0 -> 'c1,) -> 'b1) & (true, bool -> unit,) -> 'd
//│     'g :> forall 'a1. ('a1, 'a1 -> 'c,) -> 'b
//│        <: (forall 'a1. ('a1, 'a1 -> 'c,) -> 'b) & ("A String", string -> unit,) -> 'd
//│  = [Function (anonymous)]

h (fun ((x, f)) -> f x)
//│ = undefined
//│ output:
//│ A String

// * _n accessors not yet implemented in JS backend:
// test1 = listiterA (fun ex -> ex (fun p -> p._2 p._1)) ex_list1

// :e // FIXME? fails with genLamBodies // fixed with skolem-LHS-extrusion
test1 = listiterA (fun ex -> ex (fun ((p1, p2)) -> p2 p1)) ex_list1
//│ test1: unit
//│      = [Function: unit]
//│ output:
//│ A String
//│ 8250
//│ true

// let test1 = listiter (fun ex -> ex (fun p -> (snd p) (fst p))) ex_list1
// ;;
test1 = listiter (fun ex -> ex (fun ((p1, p2)) -> p2 p1)) ex_list1
//│ test1: unit
//│      = [Function: unit]
//│ output:
//│ A String
//│ 8250
//│ true

test1_ = listiter (fun ex -> ex (fun ((p1, p2)) -> p2 p1))
//│ test1_: List[(forall 'a, 'b, 'c. (('b, 'a,) -> 'c
//│   where
//│     'a <: 'b -> 'c)) -> 'a] -> unit
//│       = [Function (anonymous)]

test1_ ex_list1
//│ = [Function: unit]
//│ output:
//│ A String
//│ 8250
//│ true

process ex = ex (fun ((p1, p2)) -> p2 p1)
//│ process: 'a -> 'b
//│   where
//│     'a <: (forall 'c, 'd, 'e. (('d, 'c,) -> 'e
//│   where
//│     'c <: 'd -> 'e)) -> 'b
//│        = [Function: process]

process h
//│ = undefined
//│ output:
//│ A String

// * Also fails:
// listiter process ex_list1


// let test2 = listiter (fun ex -> ex (fun t -> 
//   let arg1 = fst t
//   and arg2 = fst (snd t)
//   and eqf  = snd (snd t) in
//   let areequal = eqf arg1 arg2
//   in print_bool areequal )) ex_list2
// ;;
test2 = listiterA (fun ex -> ex (fun ((t1, t2, t3)) ->
  let arg1 = t1 in
  let arg2 = t2 in
  let eqf = t3 in
  let areequal = eqf arg1 arg2 in
  print_bool areequal )) ex_list2
//│ test2: unit
//│      = [Function: unit]
//│ output:
//│ true
//│ false
//│ false

test2_ = listiter (fun ex -> ex (fun ((t1, t2, t3)) ->
  let arg1 = t1 in
  let arg2 = t2 in
  let eqf = t3 in
  let areequal = eqf arg1 arg2 in
  print_bool areequal ))
//│ test2_: List[(forall 'a, 'b, 'c, 'd. (('c, 'd, 'c -> 'd -> anything,) -> 'a
//│   where
//│     'a :> unit
//│     'b <: bool)) -> anything] -> unit
//│       = [Function (anonymous)]

// * Also fails:
// test2_ ex_list2


// * ============ Annotated+untupled versions: ============

def make_ex1: ('x, 'x -> 'c) -> (forall 'b. (forall 'a. ('a, 'a -> 'c) -> 'b) -> 'b)
//│ make_ex1: ('x, 'x -> 'c,) -> (forall 'b. (forall 'a. ('a, 'a -> 'c,) -> 'b) -> 'b)
//│         = <missing implementation>

ex1_1 = make_ex1 ("A String", print_string)
//│ ex1_1: (forall 'a. ('a, 'a -> unit,) -> 'b) -> 'b
//│      = <no result>
//│        make_ex1 is not implemented

ex1_1 (fun (x, f) -> f x)
//│ = <no result>
//│   ex1_1 and make_ex1 are not implemented

ex1_2 = if true then make_ex1 (42, print_int) else ex1_1
//│ ex1_2: (forall 'a, 'a0. ('a, 'a -> unit,) -> 'b & ('a0, 'a0 -> unit,) -> 'b) -> 'b
//│      = <no result>
//│        make_ex1 is not implemented

ex1_2 (fun (x, f) -> f x)
//│ = <no result>
//│   ex1_2 and make_ex1 are not implemented


// let make_ex2 x (f:['a] ('a * 'a * ('a -> 'a -> 'c)) -> 'b) = f x
// ;;
def make_ex2: ('x, 'x, 'x -> 'c) -> (forall 'b. (forall 'a. ('a, 'a, 'a -> 'c) -> 'b) -> 'b)
//│ make_ex2: ('x, 'x, 'x -> 'c,) -> (forall 'b. (forall 'a. ('a, 'a, 'a -> 'c,) -> 'b) -> 'b)
//│         = <missing implementation>

// let ex_list1 = [ make_ex1 ("A String", print_string) ; 
// 		 make_ex1 (8250, print_int) ;
// 		 make_ex1 (true, print_bool) ]
// ;;
//
ex_list1 = cons (make_ex1 ("A String", print_string))
  (cons (make_ex1 (8250, print_int))
  (cons (make_ex1 (true, print_bool)) nil))
//│ ex_list1: List[(forall 'a, 'a0, 'a1. ('a, 'a -> unit,) -> 'b & ('a0, 'a0 -> unit,) -> 'b & ('a1, 'a1 -> unit,) -> 'b) -> 'b]
//│         = <no result>
//│           make_ex1 is not implemented

// let ex_list2 = [ make_ex2 ("String", "String", eqstring) ;
// 		 make_ex2 ( 1250, 4890, eqint) ;
// 		 make_ex2 ( true, false, eqbool) ]
// ;;
ex_list2 = cons (make_ex2 ("String", "String", eqstring))
  (cons (make_ex2 (1250, 4890, eqint))
  (cons (make_ex2 (true, false, eqbool)) nil))
//│ ex_list2: List[(forall 'a. ('a, 'a, 'a -> (forall 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j. ('d -> 'i
//│   where
//│     'c <: string
//│     'd <: string
//│     'e :> string -> string
//│        <: "A" -> 'f
//│     'f <: 'f
//│     'g :> 'f -> bool
//│        <: 'h -> 'i
//│     'j :> string -> string
//│        <: "A" -> 'h)),) -> 'b & ('a0, 'a0, 'a0 -> (forall 'k, 'l, 'm, 'n, 'o, 'p. ('m -> 'p
//│   where
//│     'k <: int
//│     'l :> int -> int
//│        <: 'm -> 'n
//│     'n <: int
//│     'o :> int -> bool
//│        <: 0 -> 'p)),) -> 'b & ('a1, 'a1, 'a1 -> (forall 'q, 'r, 's, 't, 'u, 'v, 'w. ('r -> 'w
//│   where
//│     'q <: bool
//│     'r <: bool
//│     's :> 't -> 't -> 't
//│        <: 'r -> 'u
//│     'u <: 'v -> 'w
//│     'v :> bool)),) -> 'b) -> 'b]
//│         = <no result>
//│           make_ex2 is not implemented

// let test1 = listiter (fun ex -> ex (fun p -> (snd p) (fst p))) ex_list1
// ;;

// :e // FIXME? fails with genLamBodies // fixed with skolem-LHS-extrusion
test1 = listiterA (fun ex -> ex (fun (a, b) -> b a)) ex_list1
//│ test1: unit
//│      = <no result>
//│        ex_list1 and make_ex1 are not implemented

// * Still fail:
// test1_ ex_list1
// test2_ ex_list2





// (* Some examples for MLF inspired by standard encoding in System F. *)

// type Void   = ['x] 'x
// type Unit   = ['x] 'x -> 'x
// type Int    = ['x] ('x -> 'x) -> ('x -> 'x)
// type Bool   = ['x] (Unit -> 'x) -> (Unit -> 'x) -> 'x 
type Fvoid = forall 'a. 'a
type Funit = forall 'a. 'a -> 'a
type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
type Fbool = forall 'a. (Funit -> 'a) -> (Funit -> 'a) -> 'a
//│ Defined type alias Fvoid
//│ Defined type alias Funit
//│ Defined type alias Fint
//│ Defined type alias Fbool

// type Sum    = ['x] (Int -> 'x) -> (Int -> 'x) -> 'x
// type Pair   = ['x] (Int -> Int -> 'x) -> 'x
// type Triple = ['x] (Int -> Int -> Int -> 'x) -> 'x
type Sum    = forall 'a. (Fint -> 'a) -> (Fint -> 'a) -> 'a
type Pair   = forall 'a. (Fint -> Fint -> 'a) -> 'a
type Triple = forall 'a. (Fint -> Fint -> Fint -> 'a) -> 'a
//│ Defined type alias Sum
//│ Defined type alias Pair
//│ Defined type alias Triple

// (* Unit *)
// let c_unit = fun x -> x
def c_unit = fun x -> x
//│ c_unit: 'a -> 'a
//│       = [Function: c_unit]


// (* BOOLEANS, IFS, AND, OR, NOT. *)
// let c_true  = fun a b -> a c_unit
def c_true = fun a -> fun b -> a c_unit
//│ c_true: 'a -> (forall 'a. ('a -> 'b
//│   where
//│     'a <: (forall 'c. 'c -> 'c) -> 'b))
//│       = [Function: c_true]

// let c_false = fun a b -> b c_unit
def c_false = fun a -> fun b -> b c_unit
//│ c_false: 'a -> (forall 'a. ('a -> 'b
//│   where
//│     'a <: (forall 'c. 'c -> 'c) -> 'b))
//│        = [Function: c_false]

// let c_if (cond:Bool) c_then c_else = cond c_then c_else 
def c_if (cond: Fbool) c_then c_else = cond c_then c_else
def c_if_ cond c_then c_else = cond c_then c_else
//│ c_if: Fbool -> (forall 'a. 'a -> (forall 'b, 'a, 'c, 'd, 'e. ('d -> 'e
//│   where
//│     'b <: 'a -> 'c
//│     'c <: 'd -> 'e)))
//│   where
//│     'b := Fbool
//│     = [Function: c_if]
//│ c_if_: 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e. ('d -> 'e
//│   where
//│     'a <: 'b -> 'c
//│     'c <: 'd -> 'e)))
//│      = [Function: c_if_]

// let c_and (a:Bool) (b:Bool) = c_if a (fun z -> b) (fun z -> c_false)
def c_and (a: Fbool) (b: Fbool) = c_if a (fun z -> b) (fun z -> c_false)
def c_and_ a b = c_if a (fun z -> b) (fun z -> c_false)
//│ c_and: Fbool -> (forall 'a, 'b, 'c, 'd, 'e, 'f. (Fbool -> 'g
//│   where
//│     'b <: ('c -> 'c -> (forall 'h. ('h -> 'i
//│   where
//│     'h <: (forall 'j. 'j -> 'j) -> 'i))) -> 'g
//│     'a <: Fbool
//│     'd := Fbool
//│     'e :> forall 'k. 'k -> (forall 'c, 'k, 'f, 'l, 'm. ('l -> 'm
//│   where
//│     'f <: 'k -> 'c
//│     'c <: 'l -> 'm))
//│        <: ('c -> 'd) -> 'b
//│     'f := Fbool))
//│   where
//│     'a := Fbool
//│      = [Function: c_and]
//│ c_and_: 'a -> (forall 'a, 'b, 'c, 'd. ('e -> 'f
//│   where
//│     'b :> forall 'g. 'g -> (forall 'g, 'c, 'h, 'i, 'j. ('i -> 'j
//│   where
//│     'c <: 'g -> 'h
//│     'h <: 'i -> 'j))
//│        <: ('k -> 'e) -> 'd
//│     'c := Fbool
//│     'd <: ('k -> 'k -> (forall 'k. ('k -> 'l
//│   where
//│     'k <: (forall 'm. 'm -> 'm) -> 'l))) -> 'f
//│     'a <: Fbool))
//│       = [Function: c_and_]

// let c_or  (a:Bool) (b:Bool) = c_if a (fun z -> c_true) (fun z -> b)
def c_or (a: Fbool) (b: Fbool) = c_if a (fun z -> c_true) (fun z -> b)
def c_or_ a b = c_if a (fun z -> c_true) (fun z -> b)
//│ c_or: Fbool -> (forall 'a, 'b, 'c, 'd, 'e. (Fbool -> 'f
//│   where
//│     'a <: Fbool
//│     'b := Fbool
//│     'c :> forall 'g. 'g -> (forall 'g, 'd, 'h, 'i, 'j. ('i -> 'j
//│   where
//│     'd <: 'g -> 'h
//│     'h <: 'i -> 'j))
//│        <: ('e -> (forall 'k. 'k -> (forall 'k. ('e -> 'l
//│   where
//│     'k <: (forall 'm. 'm -> 'm) -> 'l)))) -> 'e
//│     'd := Fbool
//│     'e <: ('e -> 'b) -> 'f))
//│   where
//│     'a := Fbool
//│     = [Function: c_or]
//│ c_or_: 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f, 'g. ('d -> 'e
//│   where
//│     'b <: ('c -> 'd) -> 'e
//│     'a <: Fbool
//│     'f :> forall 'h. 'h -> (forall 'h, 'g, 'i, 'j, 'k. ('j -> 'k
//│   where
//│     'g <: 'h -> 'i
//│     'i <: 'j -> 'k))
//│        <: ('c -> (forall 'c. 'c -> (forall 'c. ('c -> 'l
//│   where
//│     'c <: (forall 'm. 'm -> 'm) -> 'l)))) -> 'b
//│     'g := Fbool))
//│      = [Function: c_or_]

// let c_not (a:Bool) = c_if a (fun z -> c_false) (fun z -> c_true)
def c_not (a: Fbool) = c_if a (fun z -> c_false) (fun z -> c_true)
def c_not_ a = c_if a (fun z -> c_false) (fun z -> c_true)
//│ c_not: Fbool -> 'a
//│   where
//│     'b := Fbool
//│     'c :> forall 'd. 'd -> (forall 'd, 'e, 'f, 'g, 'h. ('g -> 'h
//│   where
//│     'e <: 'd -> 'f
//│     'f <: 'g -> 'h))
//│        <: ('i -> 'i -> (forall 'j. ('j -> 'k
//│   where
//│     'j <: (forall 'l. 'l -> 'l) -> 'k))) -> 'm
//│     'e := Fbool
//│     'm <: ('i -> (forall 'i. 'i -> (forall 'i. ('i -> 'n
//│   where
//│     'i <: (forall 'l. 'l -> 'l) -> 'n)))) -> 'a
//│      = [Function: c_not]
//│ c_not_: 'a -> 'b
//│   where
//│     'c <: ('d -> (forall 'e. 'e -> (forall 'e. ('d -> 'f
//│   where
//│     'e <: (forall 'g. 'g -> 'g) -> 'f)))) -> 'b
//│     'a <: Fbool
//│     'h :> forall 'i. 'i -> (forall 'i, 'j, 'k, 'l, 'm. ('l -> 'm
//│   where
//│     'j <: 'i -> 'k
//│     'k <: 'l -> 'm))
//│        <: ('d -> 'd -> (forall 'd. ('d -> 'n
//│   where
//│     'd <: (forall 'g. 'g -> 'g) -> 'n))) -> 'c
//│     'j := Fbool
//│       = [Function: c_not_]

// let c_or = (c_or : Bool -> Bool -> Bool)

// :e // FIXME? failed with genLamBodies but works with quantif extrus
def c_or2 = c_or : Fbool -> Fbool -> Fbool
//│ c_or2: Fbool -> Fbool -> Fbool
//│      = [Function: c_or]

// :e // FIXME? failed with genLamBodies but works with quantif extrus
def c_or2_ = c_or_ : Fbool -> Fbool -> Fbool
//│ c_or2_: Fbool -> Fbool -> Fbool
//│       = [Function: c_or_]


// (* CONSTRUCTORS FOR PAIRS ET TRIPLES. *)
// let c_pair x y   = fun f -> f x y
def c_pair x y = fun f -> f x y
//│ c_pair: 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'c <: 'a -> 'd
//│     'd <: 'b -> 'e)))
//│       = [Function: c_pair]

// let c_trip x y z = fun f -> f x y z
def c_trip x y z = fun f -> f x y z
//│ c_trip: 'a -> (forall 'b. 'b -> (forall 'c. 'c -> (forall 'a, 'b, 'c, 'd, 'e, 'f, 'g. ('d -> 'g
//│   where
//│     'd <: 'a -> 'e
//│     'e <: 'b -> 'f
//│     'f <: 'c -> 'g))))
//│       = [Function: c_trip]


// (* PROJECTIONS FOR PRODUCTS. *)
// let c_1_2 (p:Pair) = p (fun x y -> x) 
def c_1_2 (p: Pair) = p (fun x -> fun y -> x)
def c_1_2_ p = p (fun x -> fun y -> x)
//│ c_1_2: Pair -> 'a
//│   where
//│     'b :> Pair
//│        <: Pair & (forall 'c. 'c -> anything -> 'c) -> 'a
//│      = [Function: c_1_2]
//│ c_1_2_: 'a -> 'b
//│   where
//│     'a <: (forall 'c. 'c -> 'a -> 'c) -> 'b
//│       = [Function: c_1_2_]

// let c_2_2 (p:Pair) = p (fun x y -> y) 
def c_2_2 (p: Pair) = p (fun x -> fun y -> y)
def c_2_2_ p = p (fun x -> fun y -> y)
//│ c_2_2: Pair -> 'a
//│   where
//│     'b :> Pair
//│        <: Pair & (anything -> (forall 'c. 'c -> 'c)) -> 'a
//│      = [Function: c_2_2]
//│ c_2_2_: 'a -> 'b
//│   where
//│     'a <: ('a -> (forall 'c. 'c -> 'c)) -> 'b
//│       = [Function: c_2_2_]

// let c_1_3 (t:Triple) = t (fun x y z -> x)
def c_1_3 (t: Triple) = t (fun x -> fun y -> fun z -> x)
def c_1_3_ t = t (fun x -> fun y -> fun z -> x)
//│ c_1_3: Triple -> 'a
//│   where
//│     'b :> Triple
//│        <: Triple & (forall 'c. 'c -> anything -> anything -> 'c) -> 'a
//│      = [Function: c_1_3]
//│ c_1_3_: 'a -> 'b
//│   where
//│     'a <: (forall 'c. 'c -> 'a -> 'a -> 'c) -> 'b
//│       = [Function: c_1_3_]

// let c_2_3 (t:Triple) = t (fun x y z -> y) 
def c_2_3 (t: Triple) = t (fun x -> fun y -> fun z -> y)
def c_2_3_ t = t (fun x -> fun y -> fun z -> y)
//│ c_2_3: Triple -> 'a
//│   where
//│     'b :> Triple
//│        <: Triple & (anything -> (forall 'c. 'c -> anything -> 'c)) -> 'a
//│      = [Function: c_2_3]
//│ c_2_3_: 'a -> 'b
//│   where
//│     'a <: ('a -> (forall 'c. 'c -> 'a -> 'c)) -> 'b
//│       = [Function: c_2_3_]

// let c_3_3 (t:Triple) = t (fun x y z -> z) 
def c_3_3 (t: Triple) = t (fun x -> fun y -> fun z -> z)
def c_3_3_ t = t (fun x -> fun y -> fun z -> z)
//│ c_3_3: Triple -> 'a
//│   where
//│     'b :> Triple
//│        <: Triple & (anything -> anything -> (forall 'c. 'c -> 'c)) -> 'a
//│      = [Function: c_3_3]
//│ c_3_3_: 'a -> 'b
//│   where
//│     'a <: ('a -> 'a -> (forall 'c. 'c -> 'c)) -> 'b
//│       = [Function: c_3_3_]


// (* CONSTRUCTOR FOR A BINARY SUM. *)
// let c_sumg = fun x fg fd -> fg x
def c_sumg = fun x -> fun fg -> fun fd -> fg x
//│ c_sumg: 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'b <: 'a -> 'c)))
//│       = [Function: c_sumg]

// let c_sumd = fun x fg fd -> fd x
def c_sumd = fun x -> fun fg -> fun fd -> fd x
//│ c_sumd: 'a -> 'b -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'b <: 'a -> 'c))
//│       = [Function: c_sumd]


// (* CASE FOR A SUM. *)
// let c_case (s:Sum) g d = s g d
def c_case (s: Sum) g d = s g d
def c_case_ s g d = s g d
//│ c_case: Sum -> (forall 'a. 'a -> (forall 'b, 'a, 'c, 'd, 'e. ('d -> 'e
//│   where
//│     'c <: 'd -> 'e
//│     'b <: 'a -> 'c)))
//│   where
//│     'b := Sum
//│       = [Function: c_case]
//│ c_case_: 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e. ('d -> 'e
//│   where
//│     'a <: 'b -> 'c
//│     'c <: 'd -> 'e)))
//│        = [Function: c_case_]


// (* Integers. *)
// let c_i0 = fun f x ->   x
def c_i0 = fun f -> fun x -> x
//│ c_i0: anything -> (forall 'a. 'a -> 'a)
//│     = [Function: c_i0]

// let c_i1 = fun f x -> f x
def c_i1 = fun f -> fun x -> f x
//│ c_i1: 'a -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c))
//│     = [Function: c_i1]

// let c_i2 = fun f x -> f (f x)
def c_i2 = fun f -> fun x -> f (f x)
//│ c_i2: 'a -> (forall 'a, 'b, 'c, 'd. ('b -> 'd
//│   where
//│     'a <: 'b -> 'c & 'c -> 'd))
//│     = [Function: c_i2]

// let c_succ (n:Int) = fun f x -> n f (f x)
def c_succ (n: Fint) = fun f -> fun x -> n f (f x)
def c_succ_ n = fun f -> fun x -> n f (f x)
//│ c_succ: Fint -> (forall 'a. 'a -> (forall 'b, 'a, 'c, 'd, 'e, 'f. ('d -> 'f
//│   where
//│     'b <: 'a -> 'c
//│     'a <: 'd -> 'e
//│     'c <: 'e -> 'f)))
//│   where
//│     'b := Fint
//│       = [Function: c_succ]
//│ c_succ_: 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('d -> 'f
//│   where
//│     'a <: 'b -> 'c
//│     'b <: 'd -> 'e
//│     'c <: 'e -> 'f)))
//│        = [Function: c_succ_]

// let c_iszero (n:Int) = n (fun x -> c_false) c_true
def c_iszero (n: Fint) = n (fun x -> c_false) c_true
def c_iszero_ n = n (fun x -> c_false) c_true
//│ c_iszero: Fint -> 'a
//│   where
//│     'b :> Fint
//│        <: Fint & ('c -> 'c -> (forall 'd. ('d -> 'e
//│   where
//│     'd <: (forall 'f. 'f -> 'f) -> 'e))) -> 'g
//│     'g <: (forall 'c. 'c -> (forall 'c. ('c -> 'h
//│   where
//│     'c <: (forall 'f. 'f -> 'f) -> 'h))) -> 'a
//│         = [Function: c_iszero]
//│ c_iszero_: 'a -> 'b
//│   where
//│     'a <: ('c -> 'c -> (forall 'd. ('d -> 'e
//│   where
//│     'd <: (forall 'f. 'f -> 'f) -> 'e))) -> 'g
//│     'g <: (forall 'c. 'c -> (forall 'c. ('c -> 'h
//│   where
//│     'c <: (forall 'f. 'f -> 'f) -> 'h))) -> 'b
//│          = [Function: c_iszero_]

// let c_add n (m:Int) = m c_succ n
def c_add n (m: Fint) = m c_succ n
def c_add_ n m = m c_succ_ n
//│ c_add: 'a -> (forall 'b, 'c. (Fint -> 'd
//│   where
//│     'b :> Fint
//│        <: Fint & (forall 'e. (Fint -> (forall 'f. 'f -> (forall 'e, 'f, 'g, 'h, 'i, 'j. ('h -> 'j
//│   where
//│     'e <: 'f -> 'g
//│     'f <: 'h -> 'i
//│     'g <: 'i -> 'j)))
//│   where
//│     'e := Fint)) -> 'c
//│     'c <: 'a -> 'd))
//│      = [Function: c_add]
//│ c_add_: 'a -> (forall 'b, 'c. ('b -> 'd
//│   where
//│     'b <: (forall 'e. 'e -> (forall 'f. 'f -> (forall 'e, 'f, 'g, 'h, 'i, 'j. ('h -> 'j
//│   where
//│     'e <: 'f -> 'g
//│     'f <: 'h -> 'i
//│     'g <: 'i -> 'j)))) -> 'c
//│     'c <: 'a -> 'd))
//│       = [Function: c_add_]

// let c_mul n (m:Int) = m (c_add n) c_i0
def c_mul m (n: Fint) = m (c_add n) c_i0
def c_mul_ m n = m (c_add_ n) c_i0
//│ c_mul: 'a -> (forall 'a, 'b, 'c, 'd, 'e. (Fint -> 'f
//│   where
//│     'b <: ('c -> (forall 'g. 'g -> 'g)) -> 'f
//│     'a <: 'd -> 'b
//│     'e :> Fint
//│        <: Fint & 'h
//│     'd :> forall 'c, 'i. (Fint -> 'j
//│   where
//│     'i :> Fint
//│        <: Fint & (forall 'k. (Fint -> (forall 'l. 'l -> (forall 'k, 'l, 'm, 'n, 'o, 'p. ('n -> 'p
//│   where
//│     'k <: 'l -> 'm
//│     'l <: 'n -> 'o
//│     'm <: 'o -> 'p)))
//│   where
//│     'k := Fint)) -> 'c
//│     'c <: 'h -> 'j)))
//│      = [Function: c_mul]
//│ c_mul_: 'a -> (forall 'a, 'b, 'c, 'd, 'e. ('d -> 'f
//│   where
//│     'a <: 'b -> 'c
//│     'd <: 'e
//│     'b :> forall 'g, 'h. ('g -> 'i
//│   where
//│     'g <: (forall 'j. 'j -> (forall 'k. 'k -> (forall 'j, 'k, 'l, 'm, 'n, 'o. ('m -> 'o
//│   where
//│     'j <: 'k -> 'l
//│     'k <: 'm -> 'n
//│     'l <: 'n -> 'o)))) -> 'h
//│     'h <: 'e -> 'i)
//│     'c <: ('h -> (forall 'p. 'p -> 'p)) -> 'f))
//│       = [Function: c_mul_]

// let c_pow n (m:Int) = m (c_mul n) c_i1
def c_pow m (n: Fint) = m (c_mul n) c_i1
def c_pow_ m n = m (c_mul_ n) c_i1
//│ c_pow: 'a -> (forall 'a, 'b, 'c, 'd. (Fint -> 'e
//│   where
//│     'b :> forall 'f, 'g, 'h, 'i, 'j. (Fint -> 'k
//│   where
//│     'f <: ('g -> (forall 'l. 'l -> 'l)) -> 'k
//│     'h <: 'i -> 'f
//│     'j :> Fint
//│        <: Fint & 'g
//│     'i :> forall 'm, 'n. (Fint -> 'o
//│   where
//│     'm :> Fint
//│        <: Fint & (forall 'p. (Fint -> (forall 'q. 'q -> (forall 'p, 'q, 'r, 's, 't, 'u. ('s -> 'u
//│   where
//│     'p <: 'q -> 'r
//│     'q <: 's -> 't
//│     'r <: 't -> 'u)))
//│   where
//│     'p := Fint)) -> 'n
//│     'n <: 'i -> 'o))
//│     'c <: (forall 'g. 'g -> (forall 'g, 'v, 'w. ('v -> 'w
//│   where
//│     'g <: 'v -> 'w))) -> 'e
//│     'a <: 'b -> 'c
//│     'd :> Fint
//│        <: Fint & 'h))
//│      = [Function: c_pow]
//│ c_pow_: 'a -> (forall 'a, 'b, 'c, 'd, 'e. ('d -> 'f
//│   where
//│     'a <: 'b -> 'c
//│     'd <: 'e
//│     'b :> forall 'e, 'g, 'h, 'i, 'j. ('i -> 'k
//│   where
//│     'e <: 'g -> 'h
//│     'i <: 'j
//│     'g :> forall 'l, 'm. ('l -> 'n
//│   where
//│     'l <: (forall 'o. 'o -> (forall 'p. 'p -> (forall 'o, 'p, 'q, 'r, 's, 't. ('r -> 't
//│   where
//│     'o <: 'p -> 'q
//│     'p <: 'r -> 's
//│     'q <: 's -> 't)))) -> 'm
//│     'm <: 'g -> 'n)
//│     'h <: ('j -> (forall 'u. 'u -> 'u)) -> 'k)
//│     'c <: (forall 'j. 'j -> (forall 'j, 'v, 'w. ('v -> 'w
//│   where
//│     'j <: 'v -> 'w))) -> 'f))
//│       = [Function: c_pow_]


// let c_pred (n:Int) =
//    let s p = c_pair (c_2_2 p) (c_succ (c_2_2 p))
//   and z = c_pair c_i0 c_i0 in
//   c_1_2 (n s z)
def c_pred (n: Fint) =
  let s = fun p -> c_pair (c_2_2 p) (c_succ (c_2_2 p)) in
  let z = c_pair c_i0 c_i0 in
  c_1_2 (n s z)
def c_pred_ n =
  let s = fun p -> c_pair (c_2_2_ p) (c_succ_ (c_2_2_ p)) in
  let z = c_pair c_i0 c_i0 in
  c_1_2_ (n s z)
//│ c_pred: Fint -> 'a
//│   where
//│     'b :> Fint
//│        <: Fint & (forall 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm. ('i -> 'n
//│   where
//│     'c :> Pair
//│        <: Pair & ('d -> (forall 'o. 'o -> 'o)) -> 'e
//│     'e <: 'f
//│     'g :> forall 'p. 'p -> (forall 'p, 'h, 'q, 'r, 's, 't. ('r -> 't
//│   where
//│     'h <: 'p -> 'q
//│     'p <: 'r -> 's
//│     'q <: 's -> 't))
//│     'h := Fint
//│     'i <: Pair
//│     'j <: 'u
//│     'k :> Pair
//│        <: Pair & ('d -> (forall 'o. 'o -> 'o)) -> 'l
//│     'l <: 'j
//│     'm :> forall 'v. 'v -> (forall 'u, 'v, 'w, 'x, 'y. ('w -> 'y
//│   where
//│     'w <: 'u -> 'x
//│     'x <: 'v -> 'y))
//│        <: 'g -> 'n
//│     'f <: Fint)) -> 'z
//│     'z <: (forall 'd, 'a1, 'b1. ('a1 -> 'c1
//│   where
//│     'a1 <: ('d -> (forall 'd1. 'd1 -> 'd1)) -> 'b1
//│     'b1 <: ('d -> (forall 'd1. 'd1 -> 'd1)) -> 'c1)) -> 'e1
//│     'e1 <: Pair
//│     'f1 :> Pair
//│         <: Pair & (forall 'g1. 'g1 -> 'd -> 'g1) -> 'd
//│     'd <: 'a
//│       = [Function: c_pred]
//│ c_pred_: 'a -> 'b
//│   where
//│     'a <: (forall 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l. ('h -> 'm
//│   where
//│     'c <: ('d -> (forall 'n. 'n -> 'n)) -> 'e
//│     'e <: 'f
//│     'g :> forall 'o. 'o -> (forall 'o, 'p, 'q, 'r, 's, 't. ('r -> 't
//│   where
//│     'p <: 'o -> 'q
//│     'o <: 'r -> 's
//│     'q <: 's -> 't))
//│     'h <: 'i & 'c
//│     'j <: 'u
//│     'i <: ('d -> (forall 'n. 'n -> 'n)) -> 'k
//│     'k <: 'j
//│     'l :> forall 'v. 'v -> (forall 'u, 'v, 'w, 'x, 'y. ('w -> 'y
//│   where
//│     'w <: 'u -> 'x
//│     'x <: 'v -> 'y))
//│        <: 'g -> 'm
//│     'f <: 'p)) -> 'z
//│     'z <: (forall 'd, 'a1, 'b1. ('a1 -> 'c1
//│   where
//│     'a1 <: ('d -> (forall 'd1. 'd1 -> 'd1)) -> 'b1
//│     'b1 <: ('d -> (forall 'd1. 'd1 -> 'd1)) -> 'c1)) -> 'e1
//│     'e1 <: 'f1
//│     'f1 <: (forall 'g1. 'g1 -> 'd -> 'g1) -> 'd
//│     'd <: 'b
//│        = [Function: c_pred_]


// let c_printint (n:Int) = print_int (n (fun x -> x+1) 0); print " "
def c_printint (n: Fint) =
  let _ = print_int (n (fun x -> x + 1) 0) in
  print_string " "
def c_printint_ n =
  let _ = print_int (n (fun x -> x + 1) 0) in
  print_string " "
//│ c_printint: Fint -> 'a
//│   where
//│     'b := Fint
//│     'a :> unit
//│           = [Function: c_printint]
//│ c_printint_: ((forall 'a, 'b, 'c. ('a -> 'c
//│   where
//│     'a <: int
//│     'b :> int -> int
//│        <: 1 -> 'c)) -> 0 -> int) -> 'd
//│   where
//│     'd :> unit
//│            = [Function: c_printint_]

def c_printint2 (n: Fint) = toString (n (fun x -> x + 1) 0)
def c_printint2_ n = toString (n (fun x -> x + 1) 0)
//│ c_printint2: Fint -> 'a
//│   where
//│     'b <: 0 -> 'c
//│     'a :> string
//│     'd :> Fint
//│        <: Fint & (forall 'c, 'e, 'f. ('c -> 'f
//│   where
//│     'c <: int
//│     'e :> int -> int
//│        <: 1 -> 'f)) -> 'b
//│            = [Function: c_printint2]
//│ c_printint2_: 'a -> 'b
//│   where
//│     'a <: (forall 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'c <: int
//│     'd :> int -> int
//│        <: 1 -> 'e)) -> 'f
//│     'f <: 0 -> 'f
//│     'b :> string
//│             = [Function: c_printint2_]

// let c_i2 = c_succ c_i1
def c_i2 = c_succ c_i1
def c_i2_ = c_succ_ c_i1
//│ c_i2: 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('d -> 'f
//│   where
//│     'b <: 'a -> 'c
//│     'a <: 'd -> 'e
//│     'c <: 'e -> 'f))
//│     = [Function (anonymous)]
//│ c_i2_: 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('d -> 'f
//│   where
//│     'b <: 'a -> 'c
//│     'a <: 'd -> 'e
//│     'c <: 'e -> 'f))
//│      = [Function (anonymous)]

// let c_i3 = c_succ c_i2
def c_i3 = c_succ c_i2
def c_i3_ = c_succ_ c_i2
//│ c_i3: 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('d -> 'f
//│   where
//│     'b <: 'a -> 'c
//│     'a <: 'd -> 'e
//│     'c <: 'e -> 'f))
//│     = [Function (anonymous)]
//│ c_i3_: 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('d -> 'f
//│   where
//│     'b <: 'a -> 'c
//│     'a <: 'd -> 'e
//│     'c <: 'e -> 'f))
//│      = [Function (anonymous)]

// let c_i4 = c_succ c_i3
def c_i4 = c_succ c_i3
def c_i4_ = c_succ_ c_i3
//│ c_i4: 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('d -> 'f
//│   where
//│     'b <: 'a -> 'c
//│     'a <: 'd -> 'e
//│     'c <: 'e -> 'f))
//│     = [Function (anonymous)]
//│ c_i4_: 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('d -> 'f
//│   where
//│     'b <: 'a -> 'c
//│     'a <: 'd -> 'e
//│     'c <: 'e -> 'f))
//│      = [Function (anonymous)]


// (* Fails with value restriction. *)
// (* Passes with relaxed value restriction. *)
// let rec (to_church:int -> Int) n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1)) f x)
def to_church: int -> Fint
//│ to_church: int -> Fint
//│          = <missing implementation>



// * The following tests don't benefit from `:RecursiveTypes`
// *  (except `print_fact_` and `print_fact2_`),
// *  but they produce LOTS of spammy error messages unless we enable it:
:RecursiveTypes


// * See to_church_3 in `ex_casparticuliers.mls`
:e
rec def to_church n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church (n - 1) : Fint) f x)
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.1387: 	rec def to_church n =
//│ ║          	                  ^^^
//│ ║  l.1388: 	  if n == 0 then fun f -> fun x -> x
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1389: 	  else fun f -> fun x -> f ((to_church (n - 1) : Fint) f x)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a3937` is not an instance of type `'a3936`
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── from reference:
//│ ║  l.1389: 	  else fun f -> fun x -> f ((to_church (n - 1) : Fint) f x)
//│ ╙──        	                                                         ^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.1387: 	rec def to_church n =
//│ ║          	                  ^^^
//│ ║  l.1388: 	  if n == 0 then fun f -> fun x -> x
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1389: 	  else fun f -> fun x -> f ((to_church (n - 1) : Fint) f x)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a3936` is not an instance of type `'a`
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── but it flows into application with expected type `‘a`
//│ ║  l.1389: 	  else fun f -> fun x -> f ((to_church (n - 1) : Fint) f x)
//│ ║          	                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──       	                    ^^
//│ int -> (('a | ‘a3936 | ‘a3937) -> 'b & ('a | ‘a3936 | ‘a3937) -> (‘a3936 & 'a)) -> (forall 'c. (‘a3936 & 'c & 'a) -> (‘a3936 | 'c | 'b))
//│   <:  to_church:
//│ int -> Fint
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.1387: 	rec def to_church n =
//│ ║          	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1388: 	  if n == 0 then fun f -> fun x -> x
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1389: 	  else fun f -> fun x -> f ((to_church (n - 1) : Fint) f x)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a3937` is not an instance of type `'a3968`
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── but it flows into reference with expected type `‘a3968`
//│ ║  l.1389: 	  else fun f -> fun x -> f ((to_church (n - 1) : Fint) f x)
//│ ║          	                                                         ^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──       	                    ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.1387: 	rec def to_church n =
//│ ║          	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1388: 	  if n == 0 then fun f -> fun x -> x
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1389: 	  else fun f -> fun x -> f ((to_church (n - 1) : Fint) f x)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a3936` is not an instance of type `'a3968`
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── but it flows into application with expected type `‘a3968`
//│ ║  l.1389: 	  else fun f -> fun x -> f ((to_church (n - 1) : Fint) f x)
//│ ║          	                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──       	                    ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.1387: 	rec def to_church n =
//│ ║          	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1388: 	  if n == 0 then fun f -> fun x -> x
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1389: 	  else fun f -> fun x -> f ((to_church (n - 1) : Fint) f x)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a3968` is not an instance of type `'a`
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── from application:
//│ ║  l.1389: 	  else fun f -> fun x -> f ((to_church (n - 1) : Fint) f x)
//│ ╙──        	                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.1387: 	rec def to_church n =
//│ ║          	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1388: 	  if n == 0 then fun f -> fun x -> x
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1389: 	  else fun f -> fun x -> f ((to_church (n - 1) : Fint) f x)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a3968` is not an instance of type `'a3936`
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──       	                    ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.1387: 	rec def to_church n =
//│ ║          	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1388: 	  if n == 0 then fun f -> fun x -> x
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1389: 	  else fun f -> fun x -> f ((to_church (n - 1) : Fint) f x)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a3969` is not an instance of type `'a3968`
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── from reference:
//│ ║  l.1389: 	  else fun f -> fun x -> f ((to_church (n - 1) : Fint) f x)
//│ ╙──        	                                                         ^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.1387: 	rec def to_church n =
//│ ║          	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1388: 	  if n == 0 then fun f -> fun x -> x
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1389: 	  else fun f -> fun x -> f ((to_church (n - 1) : Fint) f x)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a3969` is not an instance of type `'a3936`
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── from reference:
//│ ║  l.1389: 	  else fun f -> fun x -> f ((to_church (n - 1) : Fint) f x)
//│ ╙──        	                                                         ^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.1387: 	rec def to_church n =
//│ ║          	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1388: 	  if n == 0 then fun f -> fun x -> x
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1389: 	  else fun f -> fun x -> f ((to_church (n - 1) : Fint) f x)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a3936` is not an instance of type `'a`
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── but it flows into application with expected type `‘a`
//│ ║  l.1389: 	  else fun f -> fun x -> f ((to_church (n - 1) : Fint) f x)
//│ ║          	                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──       	                    ^^
//│          = [Function: to_church]


// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1)) f x)

// * Makes the test take several seconds:
// rec def to_church_ n =
//   if n == 0 then fun f -> fun x -> x
//   else fun f -> fun x -> f ((to_church_ (n - 1)) f x)
def to_church_ = to_church
//│ to_church_: int -> Fint
//│           = [Function: to_church]


// let rec c_fact (n:Int) =
//   c_if (c_iszero n) (fun (u:Unit) -> c_i1)
//     (fun (u:Unit) -> c_mul n (c_fact (c_pred n)))

:e // polym recur? // works with quantif extrus
rec def c_fact (n: Fint) =
  c_if (c_iszero n) (fun (u: Funit) -> c_i1)
    (fun (u: Funit) -> c_mul n (c_fact (c_pred n)))
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.1555: 	rec def c_fact (n: Fint) =
//│ ║          	               ^^^^^^^^^^^
//│ ║  l.1556: 	  c_if (c_iszero n) (fun (u: Funit) -> c_i1)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1557: 	    (fun (u: Funit) -> c_mul n (c_fact (c_pred n)))
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a4142` is not an instance of type `'a4143`
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──       	                    ^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.1555: 	rec def c_fact (n: Fint) =
//│ ║          	               ^^^^^^^^^^^
//│ ║  l.1556: 	  c_if (c_iszero n) (fun (u: Funit) -> c_i1)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1557: 	    (fun (u: Funit) -> c_mul n (c_fact (c_pred n)))
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a4143` is not an instance of type `'a`
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──       	                    ^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.1555: 	rec def c_fact (n: Fint) =
//│ ║          	               ^^^^^^^^^^^
//│ ║  l.1556: 	  c_if (c_iszero n) (fun (u: Funit) -> c_i1)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1557: 	    (fun (u: Funit) -> c_mul n (c_fact (c_pred n)))
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a4142` is not an instance of type `'a`
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──       	                    ^^
//│ c_fact: Fint -> (forall 'b, 'c, 'd. ('b -> 'c & 'd -> (‘a4143 & 'a) & ('a | ‘a4142 | ‘a4143) -> (‘a4143 & 'a)) -> (forall 'd. ('b & 'd) -> ('a | ‘a4142 | ‘a4143 | 'd | 'c)))
//│       = [Function: c_fact]

// def c_fact: Fint -> (forall 'a 'b. ('a & 'b) -> (forall 'c 'd 'e 'f 'g 'h. (('c & 'h) -> ('d | 'g | 'c))))
def c_fact_A: Fint -> Fint
//│ c_fact_A: Fint -> Fint
//│         = <missing implementation>

// :e // FIXME? // works with quantif extrus
def c_fact_A n =
  c_if (c_iszero n) (fun u -> c_i1)
    (fun u -> c_mul n (c_fact_A (c_pred n)))
//│ 'a -> 'b
//│   where
//│     'c <: Fbool
//│     'd :> Fint
//│        <: Fint & ('a -> 'a -> (forall 'e. ('e -> 'f
//│   where
//│     'e <: (forall 'g. 'g -> 'g) -> 'f))) -> 'h
//│     'h <: (forall 'i. 'i -> (forall 'i. ('a -> 'j
//│   where
//│     'i <: (forall 'g. 'g -> 'g) -> 'j))) -> 'k
//│     'k <: 'c
//│     'l :> forall 'm. 'm -> (forall 'm, 'n, 'o, 'p, 'q. ('p -> 'q
//│   where
//│     'n <: 'm -> 'o
//│     'o <: 'p -> 'q))
//│        <: ('a -> (forall 'r, 's, 't. ('r -> 's & 't) -> (forall 'r, 's, 't, 'u, 'v. (('r & 'u) -> ('v | 's)
//│   where
//│     't <: 'u -> 'v)))) -> 'w
//│     'n := Fbool
//│     'w <: (forall 'a, 'x, 'y, 'z, 'a1, 'b1, 'c1, 'd1, 'e1, 'f1. ('a -> 'g1
//│   where
//│     'x <: Fint
//│     'y :> Fint
//│        <: Fint & (forall 'a, 'h1, 'i1, 'j1, 'k1, 'l1, 'm1, 'n1, 'o1, 'p1, 'q1. ('m1 -> 'r1
//│   where
//│     'h1 :> Pair
//│         <: Pair & ('a -> (forall 's1. 's1 -> 's1)) -> 'i1
//│     'i1 <: 'j1
//│     'k1 :> forall 't1. 't1 -> (forall 't1, 'l1, 'u1, 'v1, 'w1, 'x1. ('v1 -> 'x1
//│   where
//│     'l1 <: 't1 -> 'u1
//│     't1 <: 'v1 -> 'w1
//│     'u1 <: 'w1 -> 'x1))
//│     'l1 := Fint
//│     'm1 <: Pair
//│     'n1 <: 'y1
//│     'o1 :> Pair
//│         <: Pair & ('a -> (forall 's1. 's1 -> 's1)) -> 'p1
//│     'p1 <: 'n1
//│     'q1 :> forall 'z1. 'z1 -> (forall 'y1, 'z1, 'a2, 'b2, 'c2. ('a2 -> 'c2
//│   where
//│     'a2 <: 'y1 -> 'b2
//│     'b2 <: 'z1 -> 'c2))
//│         <: 'k1 -> 'r1
//│     'j1 <: Fint)) -> 'z
//│     'z <: (forall 'a, 'd2, 'e2. ('d2 -> 'f2
//│   where
//│     'd2 <: ('a -> (forall 'g2. 'g2 -> 'g2)) -> 'e2
//│     'e2 <: ('a -> (forall 'g2. 'g2 -> 'g2)) -> 'f2)) -> 'a1
//│     'a1 <: Pair
//│     'b1 :> Pair
//│         <: Pair & (forall 'h2. 'h2 -> 'a -> 'h2) -> 'c1
//│     'c1 <: 'd1
//│     'd1 <: 'x
//│     'e1 :> Fint
//│     'f1 :> forall 'a, 'i2, 'j2, 'k2, 'l2. (Fint -> 'm2
//│   where
//│     'i2 <: ('a -> (forall 'g2. 'g2 -> 'g2)) -> 'm2
//│     'j2 <: 'k2 -> 'i2
//│     'l2 :> Fint
//│         <: Fint & 'a
//│     'k2 :> forall 'n2, 'o2. (Fint -> 'p2
//│   where
//│     'n2 :> Fint
//│         <: Fint & (forall 'q2. (Fint -> (forall 'r2. 'r2 -> (forall 'q2, 'r2, 's2, 't2, 'u2, 'v2. ('t2 -> 'v2
//│   where
//│     'q2 <: 'r2 -> 's2
//│     'r2 <: 't2 -> 'u2
//│     's2 <: 'u2 -> 'v2)))
//│   where
//│     'q2 := Fint)) -> 'o2
//│     'o2 <: 'k2 -> 'p2))
//│         <: 'e1 -> 'g1
//│     'a <: 'j2 & Fint)) -> 'b
//│     'a <: Fint
//│   <:  c_fact_A:
//│ Fint -> Fint
//│         = <no result>
//│           c_fact_A is not implemented

// :e // FIXME? fails with genLamBodies
rec def c_fact_ n =
  c_if_ (c_iszero_ n) (fun _ -> c_i1)
    (fun _ -> c_mul_ n (c_fact_ (c_pred_ n)))
//│ c_fact_: 'a -> 'b
//│   where
//│     'a <: ('c -> 'c -> ((forall 'd. 'd -> 'd) -> 'e) -> 'e) -> (((forall 'd. 'd -> 'd) -> 'f) -> 'c -> 'f) -> ('c -> (forall 'g, 'h. ('g -> 'h) -> 'g -> 'h)) -> ('c -> 'i) -> 'b & (forall 'c. (('c -> (forall 'j. 'j -> 'j)) -> 'k & ('c -> (forall 'j. 'j -> 'j)) -> 'c) -> (forall 'l, 'm. ('l -> 'n
//│   where
//│     'l <: nothing -> 'm
//│     'm <: (forall 'o. 'o -> (forall 'k, 'o, 'p, 'q, 'r, 's. ('q -> 's
//│   where
//│     'k <: 'o -> 'p
//│     'o <: 'q -> 'r
//│     'p <: 'r -> 's))) -> 'n))) -> (forall 'c. (('c -> (forall 't. 't -> 't)) -> ('c -> (forall 't. 't -> 't)) -> 'u) -> 'u) -> (forall 'c, 'v. 'v -> 'c -> 'v) -> 'a & (((forall 'w. 'w -> (forall 'x. 'x -> (forall 'c, 'w, 'x, 'y, 'z, 'a1. ('y -> 'a1
//│   where
//│     'w <: 'x -> 'c
//│     'x <: 'y -> 'z
//│     'c <: 'z -> 'a1)))) -> nothing -> 'b1) -> 'b1) -> ('c -> (forall 't. 't -> 't)) -> 'i
//│        = [Function: c_fact_]


// let print_fact n =
//   print_string "Factorial " ;
//   print_int n ;
//   print_string " = " ;
//   c_printint (c_fact (to_church n)) ;
//   print_string "\n" ;
//   ()
:e // works with quantif extrus
def print_fact n =
  let _ = print_string "Factorial " in
  let _ = print_int n in
  let _ = print_string " = " in
  let _ = c_printint (c_fact (to_church n)) in
          print_string "\n"
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1722: 	  let _ = c_printint (c_fact (to_church n)) in
//│ ║          	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a` is not an instance of type `'a4143`
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── from application:
//│ ║  l.1044: 	def c_succ (n: Fint) = fun f -> fun x -> n f (f x)
//│ ╙──        	                                              ^^^
//│ print_fact: int -> 'a
//│   where
//│     'a :> unit
//│           = [Function: print_fact]

// :e // FIXME? fails with genLamBodies
def print_fact_ n =
  let _ = print_string "Factorial " in
  let _ = print_int n in
  let _ = print_string " = " in
  let _ = c_printint_ (c_fact_ (to_church_ n)) in
          print_string "\n"
//│ print_fact_: int -> 'a
//│   where
//│     'a :> unit
//│            = [Function: print_fact_]

def print_fact2 n =
  concat "Factorial " (
  concat (toString n) (
  concat " = "
         (c_printint2 (c_fact (to_church n))) ))
//│ print_fact2: 'a -> 'b
//│   where
//│     'c :> string -> string
//│        <: 'd -> 'e
//│     'f :> string -> string
//│        <: 'g -> 'd
//│     'h :> Fint
//│     'i <: 0 -> 'a
//│     'j <: Fint
//│     'k :> string
//│        <: 'g
//│     'c_fact <: 'h -> 'j
//│     'l :> Fint
//│        <: Fint & (forall 'm, 'n, 'o. ('m -> 'o
//│   where
//│     'm <: int
//│     'n :> int -> int
//│        <: 1 -> 'o)) -> 'i
//│     'a <: int
//│     'p :> string -> string
//│        <: 'e -> 'b
//│     'q := string
//│            = [Function: print_fact2]

// :e // FIXME? fails with genLamBodies
def print_fact2_ n =
  concat "Factorial_ " (
  concat (toString n) (
  concat " = "
         (c_printint2_ (c_fact_ (to_church_ n))) ))
//│ print_fact2_: 'a -> 'b
//│   where
//│     'a <: int
//│     'c :> string -> string
//│        <: 'd -> 'b
//│     'e := string
//│     'f :> string -> string
//│        <: 'g -> 'd
//│     'h <: (forall 'i, 'j, 'k. ('i -> 'k
//│   where
//│     'i <: int
//│     'j :> int -> int
//│        <: 1 -> 'k)) -> 'l
//│     'm :> string -> string
//│        <: 'n -> 'g
//│     'l <: 0 -> 'o
//│     'p :> Fint
//│     'q :> string
//│        <: 'n
//│     'o <: 'h
//│     'c_fact_ <: 'p -> 'o
//│             = [Function: print_fact2_]

// let essai =
//   print_string "Church integers :\n";
//   let c_i5 = c_add c_i3 c_i2 in
//   let c_i10 = c_mul c_i5 c_i2 in
//   let c_i9 = c_pred c_i10 in
//   let c_99 = c_add (c_mul c_i9 c_i10) c_i9 in
//   let c_98 = c_pred c_99 in
//   print_string "This should be 98 : " ;
//   c_printint c_98;
//   print_string "\n\n" ;

// :e // FIXME?
this_should_be_98 =
  let c_i5 = c_add c_i3 c_i2 in
  let c_i10 = c_mul c_i5 c_i2 in
  let c_i9 = c_pred c_i10 in
  let c_99 = c_add (c_mul c_i9 c_i10) c_i9 in
  let c_98 = c_pred c_99 in
  c_printint2 c_98
//│ this_should_be_98: string
//│                  = '98'

// * Note: we get a recursive depth excess when using `c_i2_` instead of `c_i2`:
this_should_be_98_ =
  let c_i5_ = c_add_ c_i3_ c_i2_ in
  let c_i10_ = c_mul_ c_i5_ c_i2_ in
  let c_i9_ = c_pred_ c_i10_ in
  let c_99_ = c_add_ (c_mul_ c_i9_ c_i10_) c_i9_ in
  let c_98_ = c_pred_ c_99_ in
  c_printint2_ c_98_
//│ this_should_be_98_: string
//│                   = '98'

// This annot-mixed expression causes a stack overflow when increasing the depth limit:
// :e // works with quantif extrus
c_i5_ = c_add_ c_i3_ c_i2
//│ c_i5_: ('a & 'b) -> (forall 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j. ('e -> 'g
//│   where
//│     'c <: 'a -> 'd
//│     'a <: 'e -> 'f
//│     'd <: 'f -> 'g
//│     'h <: 'b -> 'i
//│     'b <: 'e -> 'j
//│     'i <: 'j -> 'g))
//│      = [Function (anonymous)]

//   print_fact 0 ;
//   print_fact 1 ;
//   print_fact 2 ;
//   print_fact 3 ;
//   print_fact 4 ;
//   print_fact 5 ;
//   print_fact 6 ;
//   ()
:e // FIXME? succeeds with genLamBodies
print_fact2 0
print_fact2 1
print_fact2 2
print_fact2 3
print_fact2 4
print_fact2 5
print_fact2 6
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1866: 	print_fact2 0
//│ ║          	^^^^^^^^^^^^^
//│ ╟── type `‘a6635` is not an instance of type `'a4143`
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── from application:
//│ ║  l.1044: 	def c_succ (n: Fint) = fun f -> fun x -> n f (f x)
//│ ╙──        	                                              ^^^
//│ res: error
//│    = 'Factorial 0 = 1'
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1867: 	print_fact2 1
//│ ║          	^^^^^^^^^^^^^
//│ ╟── type `‘a6702` is not an instance of type `'a4143`
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── from application:
//│ ║  l.1044: 	def c_succ (n: Fint) = fun f -> fun x -> n f (f x)
//│ ╙──        	                                              ^^^
//│ res: error
//│    = 'Factorial 1 = 1'
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1868: 	print_fact2 2
//│ ║          	^^^^^^^^^^^^^
//│ ╟── type `‘a6769` is not an instance of type `'a4143`
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── from application:
//│ ║  l.1044: 	def c_succ (n: Fint) = fun f -> fun x -> n f (f x)
//│ ╙──        	                                              ^^^
//│ res: error
//│    = 'Factorial 2 = 2'
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1869: 	print_fact2 3
//│ ║          	^^^^^^^^^^^^^
//│ ╟── type `‘a6836` is not an instance of type `'a4143`
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── from application:
//│ ║  l.1044: 	def c_succ (n: Fint) = fun f -> fun x -> n f (f x)
//│ ╙──        	                                              ^^^
//│ res: error
//│    = 'Factorial 3 = 6'
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1870: 	print_fact2 4
//│ ║          	^^^^^^^^^^^^^
//│ ╟── type `‘a6903` is not an instance of type `'a4143`
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── from application:
//│ ║  l.1044: 	def c_succ (n: Fint) = fun f -> fun x -> n f (f x)
//│ ╙──        	                                              ^^^
//│ res: error
//│    = 'Factorial 4 = 24'
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1871: 	print_fact2 5
//│ ║          	^^^^^^^^^^^^^
//│ ╟── type `‘a6970` is not an instance of type `'a4143`
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── from application:
//│ ║  l.1044: 	def c_succ (n: Fint) = fun f -> fun x -> n f (f x)
//│ ╙──        	                                              ^^^
//│ res: error
//│    = 'Factorial 5 = 120'
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1872: 	print_fact2 6
//│ ║          	^^^^^^^^^^^^^
//│ ╟── type `‘a7037` is not an instance of type `'a4143`
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.735: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── from application:
//│ ║  l.1044: 	def c_succ (n: Fint) = fun f -> fun x -> n f (f x)
//│ ╙──        	                                              ^^^
//│ res: error
//│    = 'Factorial 6 = 720'

print_fact2_ 0
print_fact2_ 1
print_fact2_ 2
print_fact2_ 3
print_fact2_ 4
print_fact2_ 5
print_fact2_ 6
//│ res: string
//│    = 'Factorial_ 0 = 1'
//│ res: string
//│    = 'Factorial_ 1 = 1'
//│ res: string
//│    = 'Factorial_ 2 = 2'
//│ res: string
//│    = 'Factorial_ 3 = 6'
//│ res: string
//│    = 'Factorial_ 4 = 24'
//│ res: string
//│    = 'Factorial_ 5 = 120'
//│ res: string
//│    = 'Factorial_ 6 = 720'



