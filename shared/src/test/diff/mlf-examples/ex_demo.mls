:NoRecursiveTypes
:GeneralizeCurriedFunctions
// :NoJS

// ============ Dummy classes to represent the types in the examples ============

class None
class Some[a]: { val: a }
type Option[a] = None | Some[a]
//│ Defined class None
//│ Defined class Some[+a]
//│ Defined type alias Option[+a]

class List[a]
  method Head: a
  method Tail: List[a]
//│ Defined class List[+a]
//│ Declared List.Head: List['a] -> 'a
//│ Declared List.Tail: List['a] -> List['a]

class Cons[a]: List[a] & { head: a; tail: List[a] }
  method Head = this.head
  method Tail = this.tail
def cons[a]: a -> List[a] -> List[a]
def cons head tail = Cons { head; tail }
//│ Defined class Cons[+a]
//│ Defined Cons.Head: Cons['a] -> 'a
//│ Defined Cons.Tail: Cons['a] -> List['a]
//│ cons: 'a -> List['a] -> List['a]
//│     = <missing implementation>
//│ 'b -> (forall 'c. (List['c] & 'c) -> (forall 'b, 'c, 'a, 'tail, 'head. (Cons['a] with {head: 'head, tail: 'tail}
//│   where
//│     'c <: List['a] & 'tail
//│     'b <: 'a & 'head
//│     'c <: List['a] & 'tail
//│     'b <: 'a & 'head)))
//│   <:  cons:
//│ 'a -> List['a] -> List['a]
//│ /!!!\ Uncaught error: java.util.NoSuchElementException: key not found: List
//│ 	at: scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:631)
//│ 	at: scala.collection.immutable.HashMap.apply(HashMap.scala:132)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65(ConstraintSolver.scala:659)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65$adapted(ConstraintSolver.scala:432)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$62(ConstraintSolver.scala:432)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)
//│ 	at: mlscript.ConstraintSolver.recImpl$1(ConstraintSolver.scala:390)
//│ 	at: mlscript.ConstraintSolver.rec$1(ConstraintSolver.scala:375)

class Nil[a]: List[a]
  method Head = error
  method Tail = this
def nil: List['a]
def nil = Nil {}
//│ Defined class Nil[+a]
//│ Defined Nil.Head: Nil[?] -> nothing
//│ Defined Nil.Tail: (Nil['a] & 'this) -> (Nil['a] & 'this)
//│ nil: List[nothing]
//│    = <missing implementation>
//│ Nil[nothing]
//│   <:  nil:
//│ List[nothing]
//│    = Nil {}

// ============ Type signatures for functions used in the examples ============

def head: forall 'a. List['a] -> 'a
def head l = l.Head
//│ head: List['a] -> 'a
//│     = <missing implementation>
//│ (List['a] & 'a) -> (forall 'a, 'b. ('b
//│   where
//│     'a <: List['b]))
//│   <:  head:
//│ List['a] -> 'a
//│ /!!!\ Uncaught error: java.util.NoSuchElementException: key not found: List
//│ 	at: scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:631)
//│ 	at: scala.collection.immutable.HashMap.apply(HashMap.scala:132)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65(ConstraintSolver.scala:659)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65$adapted(ConstraintSolver.scala:432)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$62(ConstraintSolver.scala:432)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)
//│ 	at: mlscript.ConstraintSolver.recImpl$1(ConstraintSolver.scala:390)
//│ 	at: mlscript.ConstraintSolver.rec$1(ConstraintSolver.scala:375)

def tail: forall 'a. List['a] -> List['a]
def tail l = l.Tail
//│ tail: List['a] -> List['a]
//│     = <missing implementation>
//│ (List['b] & 'b) -> (forall 'b, 'a. (List['a]
//│   where
//│     'b <: List['a]))
//│   <:  tail:
//│ List['a] -> List['a]
//│ /!!!\ Uncaught error: java.util.NoSuchElementException: key not found: List
//│ 	at: scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:631)
//│ 	at: scala.collection.immutable.HashMap.apply(HashMap.scala:132)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65(ConstraintSolver.scala:659)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65$adapted(ConstraintSolver.scala:432)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$62(ConstraintSolver.scala:432)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)
//│ 	at: mlscript.ConstraintSolver.recImpl$1(ConstraintSolver.scala:390)
//│ 	at: mlscript.ConstraintSolver.rec$1(ConstraintSolver.scala:375)

def print_bool: bool -> unit
def print_bool b = log b
//│ print_bool: bool -> unit
//│           = <missing implementation>
//│ 'a -> (forall 'a. (unit
//│   where
//│     'a <: 'a))
//│   <:  print_bool:
//│ bool -> unit
//│           = [Function: print_bool]

def print_int: int -> unit
def print_int i = log i
//│ print_int: int -> unit
//│          = <missing implementation>
//│ 'a -> (forall 'a. (unit
//│   where
//│     'a <: 'a))
//│   <:  print_int:
//│ int -> unit
//│          = [Function: print_int]

def print_string: string -> unit
def print_string s = log s
//│ print_string: string -> unit
//│             = <missing implementation>
//│ 'a -> (forall 'a. (unit
//│   where
//│     'a <: 'a))
//│   <:  print_string:
//│ string -> unit
//│             = [Function: print_string]



// (* A quick demo of MLF *)

// (* In the following, "untype expr" means that the expression expr should not be typable. *)

// type sid = ['a] 'a -> 'a
type Sid = forall 'a. 'a -> 'a
//│ Defined type alias Sid

// let id = fun x -> x
def id = fun x -> x
//│ id: 'a -> 'a
//│   = [Function: id]

// let delta = fun (x:sid) -> x x
def delta = fun (x: Sid) -> x x
def delta_ = fun x -> x x
//│ delta: Sid -> (forall 'a, 'b. ('b
//│   where
//│     'a <: 'a -> 'b))
//│      = [Function: delta]
//│ delta_: ('a -> anything & 'a) -> (forall 'a, 'b. ('b
//│   where
//│     'a <: 'a -> 'b))
//│       = [Function: delta_]

// let choose x y = if true then x else y
def choose x y = if true then x else y
//│ choose: 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'a <: 'c
//│     'b <: 'c)))
//│       = [Function: choose]

// let succ n = n + 1
// ;;
def succ n = n + 1
//│ succ: int -> int
//│     = [Function: succ]

// let test1 = delta id
test1 = delta id
//│ /!!!\ Uncaught error: java.util.NoSuchElementException: key not found: Sid
//│ 	at: scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:635)
//│ 	at: scala.collection.immutable.HashMap.apply(HashMap.scala:132)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expandWith(TyperDatatypes.scala:334)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expand(TyperDatatypes.scala:332)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65(ConstraintSolver.scala:674)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65$adapted(ConstraintSolver.scala:432)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$62(ConstraintSolver.scala:432)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)

// untype delta succ
:e
delta succ
//│ /!!!\ Uncaught error: java.util.NoSuchElementException: key not found: Sid
//│ 	at: scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:635)
//│ 	at: scala.collection.immutable.HashMap.apply(HashMap.scala:132)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expandWith(TyperDatatypes.scala:334)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expand(TyperDatatypes.scala:332)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65(ConstraintSolver.scala:674)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65$adapted(ConstraintSolver.scala:432)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$62(ConstraintSolver.scala:432)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)

// :e // FIXME? failed with genLamBodies but works with quantif extrus
// let test2 = delta (choose id id)
test2 = delta (choose id id)
//│ /!!!\ Uncaught error: java.util.NoSuchElementException: key not found: Sid
//│ 	at: scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:635)
//│ 	at: scala.collection.immutable.HashMap.apply(HashMap.scala:132)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expandWith(TyperDatatypes.scala:334)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expand(TyperDatatypes.scala:332)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65(ConstraintSolver.scala:674)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65$adapted(ConstraintSolver.scala:432)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$62(ConstraintSolver.scala:432)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)

test2 = delta_ (choose id id)
//│ test2: 'a
//│   where
//│     'b <: 'b -> 'a
//│      = [Function: id]

// untype delta (choose id succ)
:e
delta (choose id succ)
//│ /!!!\ Uncaught error: java.util.NoSuchElementException: key not found: Sid
//│ 	at: scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:635)
//│ 	at: scala.collection.immutable.HashMap.apply(HashMap.scala:132)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expandWith(TyperDatatypes.scala:334)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expand(TyperDatatypes.scala:332)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65(ConstraintSolver.scala:674)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65$adapted(ConstraintSolver.scala:432)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$62(ConstraintSolver.scala:432)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)

// let test3 = choose id succ
test3 = choose id succ
//│ test3: 'a
//│   where
//│     'b <: 'a
//│     'c <: 'a
//│      = [Function: id]

// let test4 = choose succ id
// ;;
test4 = choose succ id
//│ test4: 'a
//│   where
//│     'b <: 'a
//│     'c <: 'a
//│      = [Function: succ]


// let eqstring s1 s2 = (s1^"A" = s2^"A")
def eqstring s1 s2 = eq (concat s1 "A") (concat s2 "A")
//│ eqstring: string -> string -> bool
//│         = [Function: eqstring]

// let eqint i1 i2 = (i1 - i2) = 0
def eqint i1 i2 = (i1 - i2) == 0
//│ eqint: int -> int -> bool
//│      = [Function: eqint]

// let eqbool b1 b2 = if b1 then b2 else (not b2)
def eqbool b1 b2 = if b1 then b2 else (not b2)
//│ eqbool: bool -> (forall 'a. (bool & 'a) -> (forall 'a, 'b. (bool | 'b
//│   where
//│     'a <: 'b
//│     'a <: 'b)))
//│       = [Function: eqbool]

// let ignore x = ()
def ignore x = null
//│ ignore: anything -> null
//│       = [Function: ignore]


def listiterA: ('a -> unit) -> List['a] -> unit
//│ listiterA: ('a -> unit) -> List['a] -> unit
//│          = <missing implementation>

// let rec listiter f ll =
//   if ll = [] then ()
//   else begin ignore (f (car ll)) ; listiter f (cdr ll) end
// ;;

:RecursiveTypes // needed for this recursive def
rec def listiter f ll =
  if eq ll nil then unit
  else
    let _ = ignore (f (head ll)) in 
    listiter f (tail ll)
//│ listiter: (nothing -> anything) -> List[?] -> unit
//│         = [Function: listiter]
:NoRecursiveTypes

listiterA = listiter
//│ (nothing -> anything) -> List[?] -> unit
//│   <:  listiterA:
//│ ('a -> unit) -> List['a] -> unit
//│          = [Function: listiter]



// (* Polymorphic recursion. *)
// untype let rec id x = if true then x else id id x in id

// * This does not actually seem to require general polymorphic recursion,
// *  but it does need recursive types:
:RecursiveTypes
rec def id1 x = if true then x else id1 id1 x
//│ id1: 'id1
//│   where
//│     'id1 :> 'a -> 'b
//│     'a :> 'id1
//│        <: 'b
//│     'b :> 'id1
//│        <: 'a -> 'b
//│    = [Function: id1]
:NoRecursiveTypes

// ^ FIXME type pp – id1 is not shown to have an upper bound!
:ns
id1
//│ res: forall 'id1, 'a, 'b, 'c, 'd, 'e. 'id1
//│   where
//│     'id1 :> 'a -> 'e
//│          <: 'a & 'id1 -> 'c
//│     'a :> 'a -> 'e
//│        <: 'b
//│     'e :> 'a -> 'e
//│        <: 'd & 'c
//│     'c :> 'a -> 'e
//│        <: 'a -> 'd
//│     'd :> 'a -> 'e
//│        <: 'b
//│     'b :> 'a -> 'e
//│        <: 'e
//│    = [Function: id1]

:e
id1: nothing
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.355: 	id1: nothing
//│ ║         	^^^
//│ ╟── function of type `?a -> ?b` does not match type `nothing`
//│ ║  l.324: 	rec def id1 x = if true then x else id1 id1 x
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `nothing`
//│ ║  l.355: 	id1: nothing
//│ ║         	^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.355: 	id1: nothing
//│ ╙──       	     ^^^^^^^
//│ res: nothing
//│    = [Function: id1]

:e // * Works with `:RecursiveTypes`
id1 id
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.372: 	id1 id
//│ ║         	^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. ‹∀ 1. (α274'' -> α274'')››  <:  α20_668    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. ‹∀ 1. (α274'' -> α274'')››  <:  α20_635'
//│ res: error
//│    = [Function: id]

res id
//│ res: error
//│    = [Function: id]

res id
//│ res: error
//│    = [Function: id]

:e // FIXME?
id1 id1
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.391: 	id1 id1
//│ ║         	^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. id1632'›  <:  α20_681    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. id1632'›  <:  α20_635'
//│ res: error
//│    = [Function: id1]

rec def id1_ x = id1_ id1_ x
//│ id1_: anything -> nothing
//│     = [Function: id1_]


// let rec (id:sid) x = if true then x else id id x

def id2: Sid
//│ id2: Sid
//│    = <missing implementation>

// * (Note: absence of `rec` emulates annotated rec def.)
def id2 x = if true then x else id2 id2 x
//│ 'a -> (forall 'a, 'b. ('b
//│   where
//│     'a <: 'b))
//│   <:  id2:
//│ Sid
//│    = <no result>
//│      id2 is not implemented




// (* Existential types. *)
// (* Creating an encapsulation is explicit (unavoidable). *)
// (* Here, we build (Exist 'a . 'a * ('a -> unit))              *)
// (*        then    (Exist 'a . 'a * 'a * ('a -> 'a -> bool))   *)


// let make_ex1 x (f:['a] ('a * ('a -> 'c)) -> 'b) = f x
def make_ex1 x (f: forall 'a. (('a, 'a -> 'c),) -> 'b) = f x
//│ make_ex1: (('a, 'a -> anything,) & 'b) -> (forall 'b, 'a0, 'c. ((forall 'a1. ('a1, 'a1 -> 'c,) -> anything) -> (forall 'b, 'd, 'e. ('e
//│   where
//│     'd <: 'b -> 'e))
//│   where
//│     'b <: ('a0, 'a0 -> 'c,)))
//│         = [Function: make_ex1]

ex1_1 = make_ex1 (("A String", print_string))
//│ ex1_1: (forall 'a. ('a, 'a -> 'c,) -> anything) -> (forall 'b, 'd, 'e. ('e
//│   where
//│     'd <: 'b -> 'e))
//│   where
//│     'b <: ('a0, 'a0 -> 'c,)
//│      = [Function (anonymous)]

ex1_1 (fun ((x, f)) -> f x)
//│ res: 'a
//│   where
//│     'b <: ("A String", string -> unit,) -> 'a
//│    = undefined
//│ output:
//│ A String

ex1_2 = if true then make_ex1 ((42, print_int)) else ex1_1
//│ ex1_2: (forall 'a, 'a0. ('a, 'a -> 'c,) -> anything & ('a0, 'a0 -> 'c0,) -> anything) -> (forall 'b, 'd, 'e, 'f, 'g. ('f
//│   where
//│     'e <: 'b -> 'f
//│     'g <: 'd -> 'f))
//│   where
//│     'b <: ('a1, 'a1 -> 'c,)
//│     'd <: ('a2, 'a2 -> 'c0,)
//│      = [Function (anonymous)]

ex1_2 (fun ((x, f)) -> f x)
//│ res: 'a
//│   where
//│     'b <: ("A String", string -> unit,) -> 'a
//│     'c <: (42, int -> unit,) -> 'a
//│    = undefined
//│ output:
//│ 42


// let make_ex2 x (f:['a] ('a * 'a * ('a -> 'a -> 'c)) -> 'b) = f x
// ;;
def make_ex2 x (f: forall 'a. (('a, 'a, 'a -> 'a -> 'c),) -> 'b) = f x
//│ make_ex2: (('a, 'a, 'a -> 'a -> anything,) & 'b) -> (forall 'b, 'a0, 'c. ((forall 'a1. ('a1, 'a1, 'a1 -> 'a1 -> 'c,) -> anything) -> (forall 'b, 'd, 'e. ('e
//│   where
//│     'd <: 'b -> 'e))
//│   where
//│     'b <: ('a0, 'a0, 'a0 -> 'a0 -> 'c,)))
//│         = [Function: make_ex2]

// let ex_list1 = [ make_ex1 ("A String", print_string) ; 
// 		 make_ex1 (8250, print_int) ;
// 		 make_ex1 (true, print_bool) ]
// ;;
ex_list1 = cons (make_ex1 (("A String", print_string)))
  (cons (make_ex1 ((8250, print_int)))
  (cons (make_ex1 ((true, print_bool))) nil))
//│ ex_list1: List[forall 'b, 'a, 'c, 'd, 'a0, 'c0, 'e, 'a1, 'c1. ((forall 'a2, 'a3, 'a4. ('a2, 'a2 -> 'c1,) -> anything & ('a3, 'a3 -> 'c,) -> anything & ('a4, 'a4 -> 'c0,) -> anything) -> (forall 'b, 'd, 'e, 'f, 'g, 'h, 'i. ('g
//│   where
//│     'f <: 'b -> 'g
//│     'h <: 'd -> 'g
//│     'i <: 'e -> 'g))
//│   where
//│     'b <: ('a, 'a -> 'c,)
//│     'd <: ('a0, 'a0 -> 'c0,)
//│     'e <: ('a1, 'a1 -> 'c1,))]
//│         = Cons {
//│             head: [Function (anonymous)],
//│             tail: Cons {
//│               head: [Function (anonymous)],
//│               tail: Cons { head: [Function (anonymous)], tail: Nil {} }
//│             }
//│           }

// let ex_list2 = [ make_ex2 ("String", "String", eqstring) ;
// 		 make_ex2 ( 1250, 4890, eqint) ;
// 		 make_ex2 ( true, false, eqbool) ]
// ;;
ex_list2 = cons (make_ex2 (("String", "String", eqstring)))
  (cons (make_ex2 ((1250, 4890, eqint)))
  (cons (make_ex2 ((true, false, eqbool))) nil))
//│ ex_list2: List[forall 'b, 'a, 'c, 'd, 'a0, 'c0, 'e, 'a1, 'c1. ((forall 'a2, 'a3, 'a4. ('a2, 'a2, 'a2 -> 'a2 -> 'c1,) -> anything & ('a3, 'a3, 'a3 -> 'a3 -> 'c,) -> anything & ('a4, 'a4, 'a4 -> 'a4 -> 'c0,) -> anything) -> (forall 'b, 'd, 'e, 'f, 'g, 'h, 'i. ('g
//│   where
//│     'f <: 'b -> 'g
//│     'h <: 'd -> 'g
//│     'i <: 'e -> 'g))
//│   where
//│     'b <: ('a, 'a, 'a -> 'a -> 'c,)
//│     'd <: ('a0, 'a0, 'a0 -> 'a0 -> 'c0,)
//│     'e <: ('a1, 'a1, 'a1 -> 'a1 -> 'c1,))]
//│         = Cons {
//│             head: [Function (anonymous)],
//│             tail: Cons {
//│               head: [Function (anonymous)],
//│               tail: Cons { head: [Function (anonymous)], tail: Nil {} }
//│             }
//│           }


h = head ex_list1
//│ h: (forall 'a, 'a0, 'a1. ('a, 'a -> 'c,) -> anything & ('a0, 'a0 -> 'c0,) -> anything & ('a1, 'a1 -> 'c1,) -> anything) -> (forall 'b, 'd, 'e, 'f, 'g, 'h, 'i. ('g
//│   where
//│     'f <: 'b -> 'g
//│     'h <: 'd -> 'g
//│     'i <: 'e -> 'g))
//│   where
//│     'b <: ('a2, 'a2 -> 'c0,)
//│     'd <: ('a3, 'a3 -> 'c1,)
//│     'e <: ('a4, 'a4 -> 'c,)
//│  = [Function (anonymous)]

h (fun ((x, f)) -> f x)
//│ res: 'a
//│   where
//│     'b <: ("A String", string -> unit,) -> 'a
//│     'c <: (true, bool -> unit,) -> 'a
//│     'd <: (8250, int -> unit,) -> 'a
//│    = undefined
//│ output:
//│ A String

// * _n accessors not yet implemented in JS backend:
// test1 = listiterA (fun ex -> ex (fun p -> p._2 p._1)) ex_list1

// :e // FIXME? fails with genLamBodies // fixed with skolem-LHS-extrusion
test1 = listiterA (fun ex -> ex (fun ((p1, p2)) -> p2 p1)) ex_list1
//│ test1: unit
//│      = [Function: unit]
//│ output:
//│ A String
//│ 8250
//│ true

// let test1 = listiter (fun ex -> ex (fun p -> (snd p) (fst p))) ex_list1
// ;;
test1 = listiter (fun ex -> ex (fun ((p1, p2)) -> p2 p1)) ex_list1
//│ test1: unit
//│      = [Function: unit]
//│ output:
//│ A String
//│ 8250
//│ true

test1_ = listiter (fun ex -> ex (fun ((p1, p2)) -> p2 p1))
//│ test1_: List[?] -> unit
//│       = [Function (anonymous)]

test1_ ex_list1
//│ = [Function: unit]
//│ output:
//│ A String
//│ 8250
//│ true

process ex = ex (fun ((p1, p2)) -> p2 p1)
//│ process: ((forall 'a, 'b. ('a, 'a -> 'b & 'b,) -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'b <: 'a -> 'c))) -> 'b & 'd) -> (forall 'd. ('e
//│   where
//│     'd <: (forall 'a, 'b. ('a, 'a -> 'b & 'b,) -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'b <: 'a -> 'c))) -> 'e))
//│        = [Function: process]

process h
//│ res: 'a
//│   where
//│     'b <: (forall 'c, 'd. ('c, 'c -> 'd & 'd,) -> (forall 'c, 'd, 'e. ('e
//│   where
//│     'd <: 'c -> 'e))) -> 'a
//│    = undefined
//│ output:
//│ A String

// * Also fails:
// listiter process ex_list1


// let test2 = listiter (fun ex -> ex (fun t -> 
//   let arg1 = fst t
//   and arg2 = fst (snd t)
//   and eqf  = snd (snd t) in
//   let areequal = eqf arg1 arg2
//   in print_bool areequal )) ex_list2
// ;;
test2 = listiterA (fun ex -> ex (fun ((t1, t2, t3)) ->
  let arg1 = t1 in
  let arg2 = t2 in
  let eqf = t3 in
  let areequal = eqf arg1 arg2 in
  print_bool areequal )) ex_list2
//│ test2: unit
//│      = [Function: unit]
//│ output:
//│ true
//│ false
//│ false

test2_ = listiter (fun ex -> ex (fun ((t1, t2, t3)) ->
  let arg1 = t1 in
  let arg2 = t2 in
  let eqf = t3 in
  let areequal = eqf arg1 arg2 in
  print_bool areequal ))
//│ test2_: List[?] -> unit
//│       = [Function (anonymous)]

// * Also fails:
// test2_ ex_list2


// * ============ Annotated+untupled versions: ============

def make_ex1: ('x, 'x -> 'c) -> (forall 'b. (forall 'a. ('a, 'a -> 'c) -> 'b) -> 'b)
//│ make_ex1: ('x, 'x -> 'c,) -> (forall 'b. (forall 'a. ('a, 'a -> 'c,) -> 'b) -> 'b)
//│         = <missing implementation>

ex1_1 = make_ex1 ("A String", print_string)
//│ ex1_1: (forall 'a. ('a, 'a -> unit,) -> 'b) -> 'b
//│      = <no result>
//│        make_ex1 is not implemented

ex1_1 (fun (x, f) -> f x)
//│ res: 'a
//│   where
//│     'b <: ‘a3511 -> 'a
//│    = <no result>
//│      ex1_1 and make_ex1 are not implemented

ex1_2 = if true then make_ex1 (42, print_int) else ex1_1
//│ ex1_2: (forall 'a, 'a0. ('a, 'a -> unit,) -> 'b & ('a0, 'a0 -> unit,) -> 'b) -> 'b
//│      = <no result>
//│        make_ex1 is not implemented

ex1_2 (fun (x, f) -> f x)
//│ res: 'a
//│   where
//│     'b <: ‘a3576 -> 'a
//│     'c <: ‘a3562 -> 'a
//│    = <no result>
//│      ex1_2 and make_ex1 are not implemented


// let make_ex2 x (f:['a] ('a * 'a * ('a -> 'a -> 'c)) -> 'b) = f x
// ;;
def make_ex2: ('x, 'x, 'x -> 'c) -> (forall 'b. (forall 'a. ('a, 'a, 'a -> 'c) -> 'b) -> 'b)
//│ make_ex2: ('x, 'x, 'x -> 'c,) -> (forall 'b. (forall 'a. ('a, 'a, 'a -> 'c,) -> 'b) -> 'b)
//│         = <missing implementation>

// let ex_list1 = [ make_ex1 ("A String", print_string) ; 
// 		 make_ex1 (8250, print_int) ;
// 		 make_ex1 (true, print_bool) ]
// ;;
//
ex_list1 = cons (make_ex1 ("A String", print_string))
  (cons (make_ex1 (8250, print_int))
  (cons (make_ex1 (true, print_bool)) nil))
//│ ex_list1: List[(forall 'a, 'a0, 'a1. ('a, 'a -> unit,) -> 'b & ('a0, 'a0 -> unit,) -> 'b & ('a1, 'a1 -> unit,) -> 'b) -> 'b]
//│         = <no result>
//│           make_ex1 is not implemented

// let ex_list2 = [ make_ex2 ("String", "String", eqstring) ;
// 		 make_ex2 ( 1250, 4890, eqint) ;
// 		 make_ex2 ( true, false, eqbool) ]
// ;;
ex_list2 = cons (make_ex2 ("String", "String", eqstring))
  (cons (make_ex2 (1250, 4890, eqint))
  (cons (make_ex2 (true, false, eqbool)) nil))
//│ ex_list2: List[(forall 'a, 'a0, 'a1. ('a, 'a, 'a -> string -> bool,) -> 'b & ('a0, 'a0, 'a0 -> int -> bool,) -> 'b & ('a1, 'a1, 'a1 -> (forall 'c. (bool & 'c) -> (forall 'c, 'd. (bool | 'd
//│   where
//│     'c <: 'd
//│     'c <: 'd))),) -> 'b) -> 'b]
//│         = <no result>
//│           make_ex2 is not implemented

// let test1 = listiter (fun ex -> ex (fun p -> (snd p) (fst p))) ex_list1
// ;;

// :e // FIXME? fails with genLamBodies // fixed with skolem-LHS-extrusion
test1 = listiterA (fun ex -> ex (fun (a, b) -> b a)) ex_list1
//│ test1: unit
//│      = <no result>
//│        ex_list1 and make_ex1 are not implemented

// * Still fail:
// test1_ ex_list1
// test2_ ex_list2





// (* Some examples for MLF inspired by standard encoding in System F. *)

// type Void   = ['x] 'x
// type Unit   = ['x] 'x -> 'x
// type Int    = ['x] ('x -> 'x) -> ('x -> 'x)
// type Bool   = ['x] (Unit -> 'x) -> (Unit -> 'x) -> 'x 
type Fvoid = forall 'a. 'a
type Funit = forall 'a. 'a -> 'a
type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
type Fbool = forall 'a. (Funit -> 'a) -> (Funit -> 'a) -> 'a
//│ Defined type alias Fvoid
//│ Defined type alias Funit
//│ Defined type alias Fint
//│ Defined type alias Fbool

// type Sum    = ['x] (Int -> 'x) -> (Int -> 'x) -> 'x
// type Pair   = ['x] (Int -> Int -> 'x) -> 'x
// type Triple = ['x] (Int -> Int -> Int -> 'x) -> 'x
type Sum    = forall 'a. (Fint -> 'a) -> (Fint -> 'a) -> 'a
type Pair   = forall 'a. (Fint -> Fint -> 'a) -> 'a
type Triple = forall 'a. (Fint -> Fint -> Fint -> 'a) -> 'a
//│ Defined type alias Sum
//│ Defined type alias Pair
//│ Defined type alias Triple

// (* Unit *)
// let c_unit = fun x -> x
def c_unit = fun x -> x
//│ c_unit: 'a -> 'a
//│       = [Function: c_unit]


// (* BOOLEANS, IFS, AND, OR, NOT. *)
// let c_true  = fun a b -> a c_unit
def c_true = fun a -> fun b -> a c_unit
//│ c_true: ((forall 'a. 'a -> 'a) -> 'b & 'b) -> 'b -> (forall 'b. ('c
//│   where
//│     'b <: (forall 'a. 'a -> 'a) -> 'c))
//│       = [Function: c_true]

// let c_false = fun a b -> b c_unit
def c_false = fun a -> fun b -> b c_unit
//│ c_false: 'a -> ((forall 'b. 'b -> 'b) -> 'a & 'a) -> (forall 'a. ('c
//│   where
//│     'a <: (forall 'b. 'b -> 'b) -> 'c))
//│        = [Function: c_false]

// let c_if (cond:Bool) c_then c_else = cond c_then c_else 
def c_if (cond: Fbool) c_then c_else = cond c_then c_else
def c_if_ cond c_then c_else = cond c_then c_else
//│ c_if: Fbool -> (forall 'b. 'b -> (forall 'c, 'a, 'd, 'e. ('e -> (forall 'b, 'e, 'f, 'g. ('g
//│   where
//│     'f <: 'b -> 'e -> 'g))
//│   where
//│     'c <: Funit -> 'a
//│     'd :> (Funit -> 'a) -> 'a)))
//│     = [Function: c_if]
//│ c_if_: (nothing -> nothing -> 'a & 'a) -> (forall 'b. 'b -> (forall 'c. 'c -> (forall 'a, 'b, 'c, 'd. ('d
//│   where
//│     'a <: 'b -> 'c -> 'd))))
//│      = [Function: c_if_]

// let c_and (a:Bool) (b:Bool) = c_if a (fun z -> b) (fun z -> c_false)
def c_and (a: Fbool) (b: Fbool) = c_if a (fun z -> b) (fun z -> c_false)
def c_and_ a b = c_if a (fun z -> b) (fun z -> c_false)
//│ /!!!\ Uncaught error: java.util.NoSuchElementException: key not found: Fbool
//│ 	at: scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:635)
//│ 	at: scala.collection.immutable.HashMap.apply(HashMap.scala:132)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expandWith(TyperDatatypes.scala:334)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expand(TyperDatatypes.scala:332)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65(ConstraintSolver.scala:674)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65$adapted(ConstraintSolver.scala:432)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$62(ConstraintSolver.scala:432)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)

// let c_or  (a:Bool) (b:Bool) = c_if a (fun z -> c_true) (fun z -> b)
def c_or (a: Fbool) (b: Fbool) = c_if a (fun z -> c_true) (fun z -> b)
def c_or_ a b = c_if a (fun z -> c_true) (fun z -> b)
//│ /!!!\ Uncaught error: java.util.NoSuchElementException: key not found: Fbool
//│ 	at: scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:635)
//│ 	at: scala.collection.immutable.HashMap.apply(HashMap.scala:132)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expandWith(TyperDatatypes.scala:334)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expand(TyperDatatypes.scala:332)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65(ConstraintSolver.scala:674)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65$adapted(ConstraintSolver.scala:432)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$62(ConstraintSolver.scala:432)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)

// let c_not (a:Bool) = c_if a (fun z -> c_false) (fun z -> c_true)
def c_not (a: Fbool) = c_if a (fun z -> c_false) (fun z -> c_true)
def c_not_ a = c_if a (fun z -> c_false) (fun z -> c_true)
//│ /!!!\ Uncaught error: java.util.NoSuchElementException: key not found: Fbool
//│ 	at: scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:635)
//│ 	at: scala.collection.immutable.HashMap.apply(HashMap.scala:132)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expandWith(TyperDatatypes.scala:334)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expand(TyperDatatypes.scala:332)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65(ConstraintSolver.scala:674)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65$adapted(ConstraintSolver.scala:432)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$62(ConstraintSolver.scala:432)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)

// let c_or = (c_or : Bool -> Bool -> Bool)

// :e // FIXME? failed with genLamBodies but works with quantif extrus
def c_or2 = c_or : Fbool -> Fbool -> Fbool
//│ ╔══[ERROR] identifier not found: c_or
//│ ║  l.838: 	def c_or2 = c_or : Fbool -> Fbool -> Fbool
//│ ╙──       	            ^^^^
//│ c_or2: Fbool -> Fbool -> Fbool
//│      = [Function: c_or]

// :e // FIXME? failed with genLamBodies but works with quantif extrus
def c_or2_ = c_or_ : Fbool -> Fbool -> Fbool
//│ ╔══[ERROR] identifier not found: c_or_
//│ ║  l.846: 	def c_or2_ = c_or_ : Fbool -> Fbool -> Fbool
//│ ╙──       	             ^^^^^
//│ c_or2_: Fbool -> Fbool -> Fbool
//│       = [Function: c_or_]


// (* CONSTRUCTORS FOR PAIRS ET TRIPLES. *)
// let c_pair x y   = fun f -> f x y
def c_pair x y = fun f -> f x y
//│ c_pair: 'a -> (forall 'b. 'b -> (forall 'c. ('a -> 'b -> 'c & 'c) -> (forall 'a, 'b, 'c, 'd. ('d
//│   where
//│     'c <: 'a -> 'b -> 'd))))
//│       = [Function: c_pair]

// let c_trip x y z = fun f -> f x y z
def c_trip x y z = fun f -> f x y z
//│ c_trip: 'a -> (forall 'b. 'b -> (forall 'c. 'c -> (forall 'd. ('a -> 'b -> 'c -> 'd & 'd) -> (forall 'a, 'b, 'c, 'd, 'e. ('e
//│   where
//│     'd <: 'a -> 'b -> 'c -> 'e)))))
//│       = [Function: c_trip]


// (* PROJECTIONS FOR PRODUCTS. *)
// let c_1_2 (p:Pair) = p (fun x y -> x) 
def c_1_2 (p: Pair) = p (fun x -> fun y -> x)
def c_1_2_ p = p (fun x -> fun y -> x)
//│ c_1_2: Pair -> (forall 'a, 'b. ('b
//│   where
//│     'a <: (forall 'c. 'c -> anything -> 'c) -> 'b))
//│      = [Function: c_1_2]
//│ c_1_2_: ((forall 'a. 'a -> 'b -> 'a) -> 'b & 'b) -> (forall 'b, 'c. ('c
//│   where
//│     'b <: (forall 'a. 'a -> 'b -> 'a) -> 'c))
//│       = [Function: c_1_2_]

// let c_2_2 (p:Pair) = p (fun x y -> y) 
def c_2_2 (p: Pair) = p (fun x -> fun y -> y)
def c_2_2_ p = p (fun x -> fun y -> y)
//│ c_2_2: Pair -> (forall 'a, 'b. ('b
//│   where
//│     'a <: (anything -> (forall 'c. 'c -> 'c)) -> 'b))
//│      = [Function: c_2_2]
//│ c_2_2_: (('a -> (forall 'b. 'b -> 'b)) -> 'a & 'a) -> (forall 'a, 'c. ('c
//│   where
//│     'a <: ('a -> (forall 'b. 'b -> 'b)) -> 'c))
//│       = [Function: c_2_2_]

// let c_1_3 (t:Triple) = t (fun x y z -> x)
def c_1_3 (t: Triple) = t (fun x -> fun y -> fun z -> x)
def c_1_3_ t = t (fun x -> fun y -> fun z -> x)
//│ c_1_3: Triple -> (forall 'a, 'b. ('b
//│   where
//│     'a <: (forall 'c. 'c -> anything -> anything -> 'c) -> 'b))
//│      = [Function: c_1_3]
//│ c_1_3_: ((forall 'a. 'a -> 'b -> 'b -> 'a) -> 'b & 'b) -> (forall 'b, 'c. ('c
//│   where
//│     'b <: (forall 'a. 'a -> 'b -> 'b -> 'a) -> 'c))
//│       = [Function: c_1_3_]

// let c_2_3 (t:Triple) = t (fun x y z -> y) 
def c_2_3 (t: Triple) = t (fun x -> fun y -> fun z -> y)
def c_2_3_ t = t (fun x -> fun y -> fun z -> y)
//│ c_2_3: Triple -> (forall 'a, 'b. ('b
//│   where
//│     'a <: (anything -> (forall 'c. 'c -> anything -> 'c)) -> 'b))
//│      = [Function: c_2_3]
//│ c_2_3_: (('a -> (forall 'b. 'b -> 'a -> 'b)) -> 'a & 'a) -> (forall 'a, 'c. ('c
//│   where
//│     'a <: ('a -> (forall 'b. 'b -> 'a -> 'b)) -> 'c))
//│       = [Function: c_2_3_]

// let c_3_3 (t:Triple) = t (fun x y z -> z) 
def c_3_3 (t: Triple) = t (fun x -> fun y -> fun z -> z)
def c_3_3_ t = t (fun x -> fun y -> fun z -> z)
//│ c_3_3: Triple -> (forall 'a, 'b. ('b
//│   where
//│     'a <: (anything -> anything -> (forall 'c. 'c -> 'c)) -> 'b))
//│      = [Function: c_3_3]
//│ c_3_3_: (('a -> 'a -> (forall 'b. 'b -> 'b)) -> 'a & 'a) -> (forall 'a, 'c. ('c
//│   where
//│     'a <: ('a -> 'a -> (forall 'b. 'b -> 'b)) -> 'c))
//│       = [Function: c_3_3_]


// (* CONSTRUCTOR FOR A BINARY SUM. *)
// let c_sumg = fun x fg fd -> fg x
def c_sumg = fun x -> fun fg -> fun fd -> fg x
//│ c_sumg: 'a -> (forall 'b. ('a -> 'b & 'b) -> 'b -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'b <: 'a -> 'c)))
//│       = [Function: c_sumg]

// let c_sumd = fun x fg fd -> fd x
def c_sumd = fun x -> fun fg -> fun fd -> fd x
//│ c_sumd: 'a -> 'b -> (forall 'b. ('a -> 'b & 'b) -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'b <: 'a -> 'c)))
//│       = [Function: c_sumd]


// (* CASE FOR A SUM. *)
// let c_case (s:Sum) g d = s g d
def c_case (s: Sum) g d = s g d
def c_case_ s g d = s g d
//│ c_case: Sum -> (forall 'b. 'b -> (forall 'c, 'a, 'd, 'e. ('e -> (forall 'b, 'e, 'f, 'g. ('g
//│   where
//│     'f <: 'b -> 'e -> 'g))
//│   where
//│     'c <: Fint -> 'a
//│     'd :> (Fint -> 'a) -> 'a)))
//│       = [Function: c_case]
//│ c_case_: (nothing -> nothing -> 'a & 'a) -> (forall 'b. 'b -> (forall 'c. 'c -> (forall 'a, 'b, 'c, 'd. ('d
//│   where
//│     'a <: 'b -> 'c -> 'd))))
//│        = [Function: c_case_]


// (* Integers. *)
// let c_i0 = fun f x ->   x
def c_i0 = fun f -> fun x -> x
//│ c_i0: anything -> (forall 'a. 'a -> 'a)
//│     = [Function: c_i0]

// let c_i1 = fun f x -> f x
def c_i1 = fun f -> fun x -> f x
//│ c_i1: (nothing -> 'a & 'a) -> (forall 'b. 'b -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'a <: 'b -> 'c)))
//│     = [Function: c_i1]

// let c_i2 = fun f x -> f (f x)
def c_i2 = fun f -> fun x -> f (f x)
//│ c_i2: (nothing -> 'a & 'a) -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd. ('d
//│   where
//│     'a <: 'b -> 'c & 'c -> 'd)))
//│     = [Function: c_i2]

// let c_succ (n:Int) = fun f x -> n f (f x)
def c_succ (n: Fint) = fun f -> fun x -> n f (f x)
def c_succ_ n = fun f -> fun x -> n f (f x)
//│ c_succ: Fint -> (forall 'b. (nothing -> anything & 'b) -> (forall 'c, 'a, 'd, 'e. ('e -> (forall 'b, 'e, 'f, 'g, 'h. ('h
//│   where
//│     'f <: 'b -> 'g -> 'h
//│     'b <: 'e -> 'g))
//│   where
//│     'c <: 'a -> 'a
//│     'd :> 'a -> 'a)))
//│       = [Function: c_succ]
//│ c_succ_: (nothing -> nothing -> 'a & 'a) -> (forall 'b. (nothing -> 'a & 'b) -> (forall 'c. 'c -> (forall 'a, 'b, 'c, 'd, 'e. ('e
//│   where
//│     'a <: 'b -> 'd -> 'e
//│     'b <: 'c -> 'd))))
//│        = [Function: c_succ_]

// let c_iszero (n:Int) = n (fun x -> c_false) c_true
def c_iszero (n: Fint) = n (fun x -> c_false) c_true
def c_iszero_ n = n (fun x -> c_false) c_true
//│ c_iszero: Fint -> (forall 'a, 'b. ('c
//│   where
//│     'a <: ('b -> 'b -> ((forall 'd. 'd -> 'd) -> 'b & 'e) -> (forall 'e. ('f
//│   where
//│     'e <: (forall 'd. 'd -> 'd) -> 'f))) -> (((forall 'd. 'd -> 'd) -> 'b & 'b) -> 'b -> (forall 'b. ('g
//│   where
//│     'b <: (forall 'd. 'd -> 'd) -> 'g))) -> 'c))
//│         = [Function: c_iszero]
//│ c_iszero_: (('a -> 'a -> ((forall 'b. 'b -> 'b) -> 'a & 'c) -> (forall 'c. ('d
//│   where
//│     'c <: (forall 'b. 'b -> 'b) -> 'd))) -> (((forall 'b. 'b -> 'b) -> 'a & 'a) -> 'a -> (forall 'a. ('e
//│   where
//│     'a <: (forall 'b. 'b -> 'b) -> 'e))) -> 'a & 'f) -> (forall 'a, 'f. ('g
//│   where
//│     'f <: ('a -> 'a -> ((forall 'b. 'b -> 'b) -> 'a & 'c) -> (forall 'c. ('d
//│   where
//│     'c <: (forall 'b. 'b -> 'b) -> 'd))) -> (((forall 'b. 'b -> 'b) -> 'a & 'a) -> 'a -> (forall 'a. ('e
//│   where
//│     'a <: (forall 'b. 'b -> 'b) -> 'e))) -> 'g))
//│          = [Function: c_iszero_]

// let c_add n (m:Int) = m c_succ n

//:e // due to tapping
def c_add n (m: Fint) = m c_succ n
//│ /!!!\ Uncaught error: java.util.NoSuchElementException: key not found: Fint
//│ 	at: scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:631)
//│ 	at: scala.collection.immutable.HashMap.apply(HashMap.scala:132)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expandWith(TyperDatatypes.scala:334)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expand(TyperDatatypes.scala:332)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65(ConstraintSolver.scala:674)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65$adapted(ConstraintSolver.scala:432)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$62(ConstraintSolver.scala:432)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)

def c_add_ n m = m c_succ_ n
//│ c_add_: 'a -> ((forall 'b. (nothing -> nothing -> 'b & 'b) -> (forall 'c. (nothing -> 'b & 'c) -> (forall 'd. 'd -> (forall 'b, 'c, 'd, 'e, 'f. ('f
//│   where
//│     'b <: 'c -> 'e -> 'f
//│     'c <: 'd -> 'e))))) -> 'a -> 'b & 'g) -> (forall 'g. ('h
//│   where
//│     'g <: (forall 'b. (nothing -> nothing -> 'b & 'b) -> (forall 'c. (nothing -> 'b & 'c) -> (forall 'd. 'd -> (forall 'b, 'c, 'd, 'e, 'f. ('f
//│   where
//│     'b <: 'c -> 'e -> 'f
//│     'c <: 'd -> 'e))))) -> 'a -> 'h))
//│       = [Function: c_add_]

// let c_mul n (m:Int) = m (c_add n) c_i0

//:e // due to tapping
def c_mul m (n: Fint) = m (c_add n) c_i0
//│ ╔══[ERROR] identifier not found: c_add
//│ ║  l.1057: 	def c_mul m (n: Fint) = m (c_add n) c_i0
//│ ╙──        	                           ^^^^^
//│ c_mul: (error -> ('a -> (forall 'b. 'b -> 'b)) -> 'a & 'a) -> Fint -> (forall 'a. ('c
//│   where
//│     'a <: error -> ('a -> (forall 'b. 'b -> 'b)) -> 'c))
//│      = [Function: c_mul]

def c_mul_ m n = m (c_add_ n) c_i0
//│ c_mul_: ((((forall 'a, 'b. (nothing -> nothing -> 'a & 'b) -> (forall 'a, 'c. (nothing -> 'a & 'c) -> (forall 'd. 'd -> (forall 'b, 'c, 'd, 'e, 'f. ('f
//│   where
//│     'b <: 'c -> 'e -> 'f
//│     'c <: 'd -> 'e))))) -> nothing -> 'a & (forall 'a, 'b. (nothing -> nothing -> 'a & 'b) -> (forall 'a, 'c. (nothing -> 'a & 'c) -> (forall 'd. 'd -> (forall 'b, 'c, 'd, 'e, 'f. ('f
//│   where
//│     'b <: 'c -> 'e -> 'f
//│     'c <: 'd -> 'e))))) -> 'g -> 'a & 'h) -> (forall 'h. ('i
//│   where
//│     'h <: (forall 'a, 'b. (nothing -> nothing -> 'a & 'b) -> (forall 'a, 'c. (nothing -> 'a & 'c) -> (forall 'd. 'd -> (forall 'b, 'c, 'd, 'e, 'f. ('f
//│   where
//│     'b <: 'c -> 'e -> 'f
//│     'c <: 'd -> 'e))))) -> 'g -> 'i))) -> ('a -> (forall 'j. 'j -> 'j)) -> 'a & 'k) -> (forall 'a. 'a -> (forall 'a, 'g, 'k. ('l
//│   where
//│     'a <: 'g
//│     'k <: (((forall 'a, 'b. (nothing -> nothing -> 'a & 'b) -> (forall 'a, 'c. (nothing -> 'a & 'c) -> (forall 'd. 'd -> (forall 'b, 'c, 'd, 'e, 'f. ('f
//│   where
//│     'b <: 'c -> 'e -> 'f
//│     'c <: 'd -> 'e))))) -> nothing -> 'a & (forall 'a, 'b. (nothing -> nothing -> 'a & 'b) -> (forall 'a, 'c. (nothing -> 'a & 'c) -> (forall 'd. 'd -> (forall 'b, 'c, 'd, 'e, 'f. ('f
//│   where
//│     'b <: 'c -> 'e -> 'f
//│     'c <: 'd -> 'e))))) -> 'g -> 'a & 'h) -> (forall 'h. ('i
//│   where
//│     'h <: (forall 'a, 'b. (nothing -> nothing -> 'a & 'b) -> (forall 'a, 'c. (nothing -> 'a & 'c) -> (forall 'd. 'd -> (forall 'b, 'c, 'd, 'e, 'f. ('f
//│   where
//│     'b <: 'c -> 'e -> 'f
//│     'c <: 'd -> 'e))))) -> 'g -> 'i))) -> ('a -> (forall 'j. 'j -> 'j)) -> 'l)))
//│       = [Function: c_mul_]

// let c_pow n (m:Int) = m (c_mul n) c_i1

//:e // due to tapping
def c_pow m (n: Fint) = m (c_mul n) c_i1
//│ c_pow: ((Fint -> (forall 'a, 'b. ('c
//│   where
//│     'a <: error -> ('b -> (forall 'd. 'd -> 'd)) -> 'c))) -> (forall 'b. (nothing -> 'b & 'b) -> (forall 'e. 'e -> (forall 'b, 'e, 'f. ('f
//│   where
//│     'b <: 'e -> 'f)))) -> 'b & 'g) -> Fint -> (forall 'g, 'h. ('i
//│   where
//│     'g <: (Fint -> (forall 'a, 'b. ('c
//│   where
//│     'a <: error -> ('b -> (forall 'd. 'd -> 'd)) -> 'c))) -> (forall 'b. (nothing -> 'b & 'b) -> (forall 'e. 'e -> (forall 'b, 'e, 'f. ('f
//│   where
//│     'b <: 'e -> 'f)))) -> 'i
//│     'h <: 'a))
//│      = [Function: c_pow]

def c_pow_ m n = m (c_mul_ n) c_i1
//│ c_pow_: ((forall 'a. 'a -> (forall 'a, 'b, 'c. ('d
//│   where
//│     'a <: 'b
//│     'c <: (((forall 'b, 'e. (nothing -> nothing -> 'b & 'e) -> (forall 'b, 'f. (nothing -> 'b & 'f) -> (forall 'g. 'g -> (forall 'e, 'f, 'g, 'h, 'i. ('i
//│   where
//│     'e <: 'f -> 'h -> 'i
//│     'f <: 'g -> 'h))))) -> nothing -> 'b & 'j) -> (forall 'j. ('k
//│   where
//│     'j <: (forall 'b, 'e. (nothing -> nothing -> 'b & 'e) -> (forall 'b, 'f. (nothing -> 'b & 'f) -> (forall 'g. 'g -> (forall 'e, 'f, 'g, 'h, 'i. ('i
//│   where
//│     'e <: 'f -> 'h -> 'i
//│     'f <: 'g -> 'h))))) -> nothing -> 'k))) -> ('b -> (forall 'l. 'l -> 'l)) -> 'd))) -> (forall 'b, 'm. (nothing -> 'b & 'm) -> (forall 'n. 'n -> (forall 'm, 'n, 'o. ('o
//│   where
//│     'm <: 'n -> 'o)))) -> 'b & 'p) -> ((((forall 'b, 'e. (nothing -> nothing -> 'b & 'e) -> (forall 'b, 'f. (nothing -> 'b & 'f) -> (forall 'g. 'g -> (forall 'e, 'f, 'g, 'h, 'i. ('i
//│   where
//│     'e <: 'f -> 'h -> 'i
//│     'f <: 'g -> 'h))))) -> nothing -> 'b & 'j) -> (forall 'j. ('k
//│   where
//│     'j <: (forall 'b, 'e. (nothing -> nothing -> 'b & 'e) -> (forall 'b, 'f. (nothing -> 'b & 'f) -> (forall 'g. 'g -> (forall 'e, 'f, 'g, 'h, 'i. ('i
//│   where
//│     'e <: 'f -> 'h -> 'i
//│     'f <: 'g -> 'h))))) -> nothing -> 'k))) -> ('b -> (forall 'l. 'l -> 'l)) -> 'b & 'b) -> (forall 'b, 'p. ('q
//│   where
//│     'p <: (forall 'a. 'a -> (forall 'a, 'b, 'c. ('d
//│   where
//│     'a <: 'b
//│     'c <: (((forall 'b, 'e. (nothing -> nothing -> 'b & 'e) -> (forall 'b, 'f. (nothing -> 'b & 'f) -> (forall 'g. 'g -> (forall 'e, 'f, 'g, 'h, 'i. ('i
//│   where
//│     'e <: 'f -> 'h -> 'i
//│     'f <: 'g -> 'h))))) -> nothing -> 'b & 'j) -> (forall 'j. ('k
//│   where
//│     'j <: (forall 'b, 'e. (nothing -> nothing -> 'b & 'e) -> (forall 'b, 'f. (nothing -> 'b & 'f) -> (forall 'g. 'g -> (forall 'e, 'f, 'g, 'h, 'i. ('i
//│   where
//│     'e <: 'f -> 'h -> 'i
//│     'f <: 'g -> 'h))))) -> nothing -> 'k))) -> ('b -> (forall 'l. 'l -> 'l)) -> 'd))) -> (forall 'b, 'm. (nothing -> 'b & 'm) -> (forall 'n. 'n -> (forall 'm, 'n, 'o. ('o
//│   where
//│     'm <: 'n -> 'o)))) -> 'q
//│     'b <: 'c))
//│       = [Function: c_pow_]


// let c_pred (n:Int) =
//    let s p = c_pair (c_2_2 p) (c_succ (c_2_2 p))
//   and z = c_pair c_i0 c_i0 in
//   c_1_2 (n s z)
def c_pred (n: Fint) =
  let s = fun p -> c_pair (c_2_2 p) (c_succ (c_2_2 p)) in
  let z = c_pair c_i0 c_i0 in
  c_1_2 (n s z)
def c_pred_ n =
  let s = fun p -> c_pair (c_2_2_ p) (c_succ_ (c_2_2_ p)) in
  let z = c_pair c_i0 c_i0 in
  c_1_2_ (n s z)
//│ /!!!\ Uncaught error: java.util.NoSuchElementException: key not found: Pair
//│ 	at: scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:631)
//│ 	at: scala.collection.immutable.HashMap.apply(HashMap.scala:132)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expandWith(TyperDatatypes.scala:334)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expand(TyperDatatypes.scala:332)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65(ConstraintSolver.scala:674)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65$adapted(ConstraintSolver.scala:432)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$62(ConstraintSolver.scala:432)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)


// let c_printint (n:Int) = print_int (n (fun x -> x+1) 0); print " "
def c_printint (n: Fint) =
  let _ = print_int (n (fun x -> x + 1) 0) in
  print_string " "
def c_printint_ n =
  let _ = print_int (n (fun x -> x + 1) 0) in
  print_string " "
//│ c_printint: Fint -> (forall 'a. (unit
//│   where
//│     'a :> int -> int))
//│           = [Function: c_printint]
//│ c_printint_: ((int -> int) -> 0 -> int) -> unit
//│            = [Function: c_printint_]

def c_printint2 (n: Fint) = toString (n (fun x -> x + 1) 0)
def c_printint2_ n = toString (n (fun x -> x + 1) 0)
//│ c_printint2: Fint -> (forall 'a. (string
//│   where
//│     'a <: (int -> int) -> 0 -> anything))
//│            = [Function: c_printint2]
//│ c_printint2_: ((int -> int) -> 0 -> 'a & 'a) -> (forall 'a. (string
//│   where
//│     'a <: (int -> int) -> 0 -> 'a))
//│             = [Function: c_printint2_]

// let c_i2 = c_succ c_i1
def c_i2 = c_succ c_i1
def c_i2_ = c_succ_ c_i1
//│ /!!!\ Uncaught error: java.util.NoSuchElementException: key not found: Fint
//│ 	at: scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:631)
//│ 	at: scala.collection.immutable.HashMap.apply(HashMap.scala:132)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expandWith(TyperDatatypes.scala:334)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expand(TyperDatatypes.scala:332)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65(ConstraintSolver.scala:674)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65$adapted(ConstraintSolver.scala:432)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$62(ConstraintSolver.scala:432)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)

// let c_i3 = c_succ c_i2
def c_i3 = c_succ c_i2
def c_i3_ = c_succ_ c_i2
//│ /!!!\ Uncaught error: java.util.NoSuchElementException: key not found: Fint
//│ 	at: scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:631)
//│ 	at: scala.collection.immutable.HashMap.apply(HashMap.scala:132)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expandWith(TyperDatatypes.scala:334)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expand(TyperDatatypes.scala:332)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65(ConstraintSolver.scala:674)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65$adapted(ConstraintSolver.scala:432)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$62(ConstraintSolver.scala:432)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)

// let c_i4 = c_succ c_i3
def c_i4 = c_succ c_i3
def c_i4_ = c_succ_ c_i3
//│ ╔══[ERROR] identifier not found: c_i3
//│ ║  l.1236: 	def c_i4 = c_succ c_i3
//│ ╙──        	                  ^^^^
//│ /!!!\ Uncaught error: java.util.NoSuchElementException: key not found: Fint
//│ 	at: scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:631)
//│ 	at: scala.collection.immutable.HashMap.apply(HashMap.scala:132)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expandWith(TyperDatatypes.scala:334)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expand(TyperDatatypes.scala:332)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65(ConstraintSolver.scala:674)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65$adapted(ConstraintSolver.scala:432)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$62(ConstraintSolver.scala:432)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)


// (* Fails with value restriction. *)
// (* Passes with relaxed value restriction. *)
// let rec (to_church:int -> Int) n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1)) f x)
def to_church: int -> Fint
//│ to_church: int -> Fint
//│          = <missing implementation>



// * The following tests don't benefit from `:RecursiveTypes`
// *  (except `print_fact_` and `print_fact2_`),
// *  but they produce LOTS of spammy error messages unless we enable it:
:RecursiveTypes


// * See to_church_3 in `ex_casparticuliers.mls`
:e
rec def to_church n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church (n - 1) : Fint) f x)
//│ int -> ('a -> 'b & 'a -> 'a) -> (forall 'c. ('c & 'a) -> ('c | 'b))
//│   <:  to_church:
//│ int -> Fint
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.1273: 	rec def to_church n =
//│ ║          	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1274: 	  if n == 0 then fun f -> fun x -> x
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1275: 	  else fun f -> fun x -> f ((to_church (n - 1) : Fint) f x)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a5166` is not an instance of type `'a`
//│ ║  l.736: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── but it flows into application with expected type `‘a`
//│ ║  l.1275: 	  else fun f -> fun x -> f ((to_church (n - 1) : Fint) f x)
//│ ║          	                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.736: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──       	                    ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.1273: 	rec def to_church n =
//│ ║          	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1274: 	  if n == 0 then fun f -> fun x -> x
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1275: 	  else fun f -> fun x -> f ((to_church (n - 1) : Fint) f x)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a5167` is not an instance of type `'a5166`
//│ ║  l.736: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.736: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║         	                    ^^
//│ ╟── from reference:
//│ ║  l.1275: 	  else fun f -> fun x -> f ((to_church (n - 1) : Fint) f x)
//│ ╙──        	                                                         ^
//│          = [Function: to_church]


// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1)) f x)

// * Makes the test take several seconds:
// rec def to_church_ n =
//   if n == 0 then fun f -> fun x -> x
//   else fun f -> fun x -> f ((to_church_ (n - 1)) f x)
def to_church_ = to_church
//│ to_church_: int -> Fint
//│           = [Function: to_church]


// let rec c_fact (n:Int) =
//   c_if (c_iszero n) (fun (u:Unit) -> c_i1)
//     (fun (u:Unit) -> c_mul n (c_fact (c_pred n)))

// :e // polym recur? // works with quantif extrus
rec def c_fact (n: Fint) =
  c_if (c_iszero n) (fun (u: Funit) -> c_i1)
    (fun (u: Funit) -> c_mul n (c_fact (c_pred n)))
//│ /!!!\ Uncaught error: java.util.NoSuchElementException: key not found: Fint
//│ 	at: scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:631)
//│ 	at: scala.collection.immutable.HashMap.apply(HashMap.scala:132)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expandWith(TyperDatatypes.scala:334)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expand(TyperDatatypes.scala:332)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65(ConstraintSolver.scala:674)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65$adapted(ConstraintSolver.scala:432)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$62(ConstraintSolver.scala:432)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)

// def c_fact: Fint -> (forall 'a 'b. ('a & 'b) -> (forall 'c 'd 'e 'f 'g 'h. (('c & 'h) -> ('d | 'g | 'c))))
def c_fact_A: Fint -> Fint
//│ c_fact_A: Fint -> Fint
//│         = <missing implementation>

// :e // FIXME? // works with quantif extrus
//:e // due to tapping
def c_fact_A n =
  c_if (c_iszero n) (fun u -> c_i1)
    (fun u -> c_mul n (c_fact_A (c_pred n)))
//│ /!!!\ Uncaught error: java.util.NoSuchElementException: key not found: Fint
//│ 	at: scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:631)
//│ 	at: scala.collection.immutable.HashMap.apply(HashMap.scala:132)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expandWith(TyperDatatypes.scala:334)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expand(TyperDatatypes.scala:332)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65(ConstraintSolver.scala:674)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65$adapted(ConstraintSolver.scala:432)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$62(ConstraintSolver.scala:432)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)

:e // FIXME? fails with genLamBodies
rec def c_fact_ n =
  c_if_ (c_iszero_ n) (fun _ -> c_i1)
    (fun _ -> c_mul_ n (c_fact_ (c_pred_ n)))
//│ ╔══[ERROR] identifier not found: c_pred_
//│ ║  l.1372: 	    (fun _ -> c_mul_ n (c_fact_ (c_pred_ n)))
//│ ╙──        	                                 ^^^^^^^
//│ c_fact_: ((forall 'a. ((forall 'b, 'c. (nothing -> nothing -> 'b & 'c) -> (forall 'd. (nothing -> 'b & 'd) -> (forall 'e. 'e -> (forall 'f. 'f)))) -> nothing -> 'b & (forall 'b, 'c. (nothing -> nothing -> 'b & 'c) -> (forall 'd. (nothing -> 'b & 'd) -> (forall 'e. 'e -> (forall 'c, 'd, 'e, 'f, 'g. ('f
//│   where
//│     'c <: 'd -> 'g -> 'f
//│     'd <: 'e -> 'g))))) -> nothing -> 'b & 'a) -> (forall 'h. 'h)) -> ('b -> (forall 'i. 'i -> 'i)) -> 'b & ('b -> 'b -> ((forall 'j. 'j -> 'j) -> 'b & 'k) -> (forall 'l. 'l)) -> (((forall 'j. 'j -> 'j) -> 'b & 'm) -> 'b -> (forall 'n. 'n)) -> 'b & ('b -> 'b -> ((forall 'j. 'j -> 'j) -> 'b & 'k) -> (forall 'l. 'l)) -> (((forall 'j. 'j -> 'j) -> 'b & 'm) -> 'b -> (forall 'n. 'n)) -> nothing -> nothing -> 'b & ('b -> 'b -> ((forall 'j. 'j -> 'j) -> 'b & 'k) -> (forall 'l. 'l)) -> (((forall 'j. 'j -> 'j) -> 'b & 'm) -> 'b -> (forall 'n. 'n)) -> ('b -> (forall 'b. (nothing -> 'b & 'b) -> (forall 'o. 'o -> (forall 'p. 'p)))) -> nothing -> 'b & ('b -> 'b -> ((forall 'j. 'j -> 'j) -> 'b & 'k) -> (forall 'k. ('l
//│   where
//│     'k <: (forall 'j. 'j -> 'j) -> 'l))) -> (((forall 'j. 'j -> 'j) -> 'b & 'm) -> 'b -> (forall 'm. ('n
//│   where
//│     'm <: (forall 'j. 'j -> 'j) -> 'n))) -> ('b -> (forall 'b. (nothing -> 'b & 'b) -> (forall 'o. 'o -> (forall 'b, 'o, 'p. ('p
//│   where
//│     'b <: 'o -> 'p))))) -> ('b -> (forall 'b, 'a, 'q, 'r. ('s
//│   where
//│     'q <: 'b
//│     'r <: (forall 'a. ((forall 'b, 'c. (nothing -> nothing -> 'b & 'c) -> (forall 'd. (nothing -> 'b & 'd) -> (forall 'e. 'e -> (forall 'f. 'f)))) -> nothing -> 'b & (forall 'b, 'c. (nothing -> nothing -> 'b & 'c) -> (forall 'd. (nothing -> 'b & 'd) -> (forall 'e. 'e -> (forall 'c, 'd, 'e, 'f, 'g. ('f
//│   where
//│     'c <: 'd -> 'g -> 'f
//│     'd <: 'e -> 'g))))) -> nothing -> 'b & 'a) -> (forall 'a. ('h
//│   where
//│     'a <: (forall 'b, 'c. (nothing -> nothing -> 'b & 'c) -> (forall 'd. (nothing -> 'b & 'd) -> (forall 'e. 'e -> (forall 'c, 'd, 'e, 'f, 'g. ('f
//│   where
//│     'c <: 'd -> 'g -> 'f
//│     'd <: 'e -> 'g))))) -> nothing -> 'h))) -> ('b -> (forall 'i. 'i -> 'i)) -> 's))) -> 'b & 'r) -> nothing
//│        = [Function: c_fact_]


// let print_fact n =
//   print_string "Factorial " ;
//   print_int n ;
//   print_string " = " ;
//   c_printint (c_fact (to_church n)) ;
//   print_string "\n" ;
//   ()
// :e // works with quantif extrus
def print_fact n =
  let _ = print_string "Factorial " in
  let _ = print_int n in
  let _ = print_string " = " in
  let _ = c_printint (c_fact (to_church n)) in
          print_string "\n"
//│ print_fact: int -> unit
//│           = [Function: print_fact]

:e // FIXME? fails with genLamBodies
def print_fact_ n =
  let _ = print_string "Factorial " in
  let _ = print_int n in
  let _ = print_string " = " in
  let _ = c_printint_ (c_fact_ (to_church_ n)) in
          print_string "\n"
//│ /!!!\ Uncaught error: java.lang.StackOverflowError

//:e // due to tapping
def print_fact2 n =
  concat "Factorial " (
  concat (toString n) (
  concat " = "
         (c_printint2 (c_fact (to_church n))) ))
//│ /!!!\ Uncaught error: java.util.NoSuchElementException: key not found: Fint
//│ 	at: scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:631)
//│ 	at: scala.collection.immutable.HashMap.apply(HashMap.scala:132)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expandWith(TyperDatatypes.scala:334)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expand(TyperDatatypes.scala:332)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65(ConstraintSolver.scala:674)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65$adapted(ConstraintSolver.scala:432)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$62(ConstraintSolver.scala:432)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)

:e // FIXME? fails with genLamBodies
def print_fact2_ n =
  concat "Factorial_ " (
  concat (toString n) (
  concat " = "
         (c_printint2_ (c_fact_ (to_church_ n))) ))
//│ /!!!\ Uncaught error: java.lang.StackOverflowError

// let essai =
//   print_string "Church integers :\n";
//   let c_i5 = c_add c_i3 c_i2 in
//   let c_i10 = c_mul c_i5 c_i2 in
//   let c_i9 = c_pred c_i10 in
//   let c_99 = c_add (c_mul c_i9 c_i10) c_i9 in
//   let c_98 = c_pred c_99 in
//   print_string "This should be 98 : " ;
//   c_printint c_98;
//   print_string "\n\n" ;

:e // FIXME?
//:e // due to tapping
this_should_be_98 =
  let c_i5 = c_add c_i3 c_i2 in
  let c_i10 = c_mul c_i5 c_i2 in
  let c_i9 = c_pred c_i10 in
  let c_99 = c_add (c_mul c_i9 c_i10) c_i9 in
  let c_98 = c_pred c_99 in
  c_printint2 c_98
//│ ╔══[ERROR] identifier not found: c_add
//│ ║  l.1466: 	  let c_i5 = c_add c_i3 c_i2 in
//│ ╙──        	             ^^^^^
//│ ╔══[ERROR] identifier not found: c_i3
//│ ║  l.1466: 	  let c_i5 = c_add c_i3 c_i2 in
//│ ╙──        	                   ^^^^
//│ ╔══[ERROR] identifier not found: c_pred
//│ ║  l.1468: 	  let c_i9 = c_pred c_i10 in
//│ ╙──        	             ^^^^^^
//│ ╔══[ERROR] identifier not found: c_add
//│ ║  l.1469: 	  let c_99 = c_add (c_mul c_i9 c_i10) c_i9 in
//│ ╙──        	             ^^^^^
//│ ╔══[ERROR] identifier not found: c_pred
//│ ║  l.1470: 	  let c_98 = c_pred c_99 in
//│ ╙──        	             ^^^^^^
//│ /!!!\ Uncaught error: java.util.NoSuchElementException: key not found: Fint
//│ 	at: scala.collection.immutable.BitmapIndexedMapNode.apply(HashMap.scala:631)
//│ 	at: scala.collection.immutable.HashMap.apply(HashMap.scala:132)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expandWith(TyperDatatypes.scala:334)
//│ 	at: mlscript.TyperDatatypes$TypeRef.expand(TyperDatatypes.scala:332)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65(ConstraintSolver.scala:674)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$65$adapted(ConstraintSolver.scala:432)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$62(ConstraintSolver.scala:432)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)

// * Note: we get a recursive depth excess when using `c_i2_` instead of `c_i2`:
this_should_be_98_ =
  let c_i5_ = c_add_ c_i3_ c_i2_ in
  let c_i10_ = c_mul_ c_i5_ c_i2_ in
  let c_i9_ = c_pred_ c_i10_ in
  let c_99_ = c_add_ (c_mul_ c_i9_ c_i10_) c_i9_ in
  let c_98_ = c_pred_ c_99_ in
  c_printint2_ c_98_
//│ ╔══[ERROR] identifier not found: c_i3_
//│ ║  l.1501: 	  let c_i5_ = c_add_ c_i3_ c_i2_ in
//│ ╙──        	                     ^^^^^
//│ ╔══[ERROR] identifier not found: c_i2_
//│ ║  l.1501: 	  let c_i5_ = c_add_ c_i3_ c_i2_ in
//│ ╙──        	                           ^^^^^
//│ ╔══[ERROR] identifier not found: c_i2_
//│ ║  l.1502: 	  let c_i10_ = c_mul_ c_i5_ c_i2_ in
//│ ╙──        	                            ^^^^^
//│ ╔══[ERROR] identifier not found: c_pred_
//│ ║  l.1503: 	  let c_i9_ = c_pred_ c_i10_ in
//│ ╙──        	              ^^^^^^^
//│ ╔══[ERROR] identifier not found: c_pred_
//│ ║  l.1505: 	  let c_98_ = c_pred_ c_99_ in
//│ ╙──        	              ^^^^^^^
//│ this_should_be_98_: string
//│   where
//│     'a <: (int -> int) -> 0 -> anything
//│                   = '98'

// This annot-mixed expression causes a stack overflow when increasing the depth limit:
// :e // works with quantif extrus
//:e // due to tapping
c_i5_ = c_add_ c_i3_ c_i2
//│ ╔══[ERROR] identifier not found: c_i3_
//│ ║  l.1530: 	c_i5_ = c_add_ c_i3_ c_i2
//│ ╙──        	               ^^^^^
//│ c_i5_: 'a
//│   where
//│     'b <: (forall 'c. (nothing -> nothing -> 'c & 'c) -> (forall 'd. (nothing -> 'c & 'd) -> (forall 'e. 'e -> (forall 'c, 'd, 'e, 'f, 'g. ('g
//│   where
//│     'c <: 'd -> 'f -> 'g
//│     'd <: 'e -> 'f))))) -> error -> 'a
//│      = [Function (anonymous)]

//   print_fact 0 ;
//   print_fact 1 ;
//   print_fact 2 ;
//   print_fact 3 ;
//   print_fact 4 ;
//   print_fact 5 ;
//   print_fact 6 ;
//   ()
// :e // FIXME? succeeds with genLamBodies
print_fact2 0
print_fact2 1
print_fact2 2
print_fact2 3
print_fact2 4
print_fact2 5
print_fact2 6
//│ ╔══[ERROR] identifier not found: print_fact2
//│ ║  l.1551: 	print_fact2 0
//│ ╙──        	^^^^^^^^^^^
//│ res: error
//│    = 'Factorial 0 = 1'
//│ ╔══[ERROR] identifier not found: print_fact2
//│ ║  l.1552: 	print_fact2 1
//│ ╙──        	^^^^^^^^^^^
//│ res: error
//│    = 'Factorial 1 = 1'
//│ ╔══[ERROR] identifier not found: print_fact2
//│ ║  l.1553: 	print_fact2 2
//│ ╙──        	^^^^^^^^^^^
//│ res: error
//│    = 'Factorial 2 = 2'
//│ ╔══[ERROR] identifier not found: print_fact2
//│ ║  l.1554: 	print_fact2 3
//│ ╙──        	^^^^^^^^^^^
//│ res: error
//│    = 'Factorial 3 = 6'
//│ ╔══[ERROR] identifier not found: print_fact2
//│ ║  l.1555: 	print_fact2 4
//│ ╙──        	^^^^^^^^^^^
//│ res: error
//│    = 'Factorial 4 = 24'
//│ ╔══[ERROR] identifier not found: print_fact2
//│ ║  l.1556: 	print_fact2 5
//│ ╙──        	^^^^^^^^^^^
//│ res: error
//│    = 'Factorial 5 = 120'
//│ ╔══[ERROR] identifier not found: print_fact2
//│ ║  l.1557: 	print_fact2 6
//│ ╙──        	^^^^^^^^^^^
//│ res: error
//│    = 'Factorial 6 = 720'

print_fact2_ 0
print_fact2_ 1
print_fact2_ 2
print_fact2_ 3
print_fact2_ 4
print_fact2_ 5
print_fact2_ 6
//│ ╔══[ERROR] identifier not found: print_fact2_
//│ ║  l.1594: 	print_fact2_ 0
//│ ╙──        	^^^^^^^^^^^^
//│ res: error
//│    = 'Factorial_ 0 = 1'
//│ ╔══[ERROR] identifier not found: print_fact2_
//│ ║  l.1595: 	print_fact2_ 1
//│ ╙──        	^^^^^^^^^^^^
//│ res: error
//│    = 'Factorial_ 1 = 1'
//│ ╔══[ERROR] identifier not found: print_fact2_
//│ ║  l.1596: 	print_fact2_ 2
//│ ╙──        	^^^^^^^^^^^^
//│ res: error
//│    = 'Factorial_ 2 = 2'
//│ ╔══[ERROR] identifier not found: print_fact2_
//│ ║  l.1597: 	print_fact2_ 3
//│ ╙──        	^^^^^^^^^^^^
//│ res: error
//│    = 'Factorial_ 3 = 6'
//│ ╔══[ERROR] identifier not found: print_fact2_
//│ ║  l.1598: 	print_fact2_ 4
//│ ╙──        	^^^^^^^^^^^^
//│ res: error
//│    = 'Factorial_ 4 = 24'
//│ ╔══[ERROR] identifier not found: print_fact2_
//│ ║  l.1599: 	print_fact2_ 5
//│ ╙──        	^^^^^^^^^^^^
//│ res: error
//│    = 'Factorial_ 5 = 120'
//│ ╔══[ERROR] identifier not found: print_fact2_
//│ ║  l.1600: 	print_fact2_ 6
//│ ╙──        	^^^^^^^^^^^^
//│ res: error
//│    = 'Factorial_ 6 = 720'



