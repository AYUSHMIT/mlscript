:GeneralizeCurriedFunctions
// :NoJS

// ============ Dummy classes to represent the types in the examples ============

class None
class Some[a]: { val: a }
type Option[a] = None | Some[a]
//│ Defined class None
//│ Defined class Some[+a]
//│ Defined type alias Option[+a]

class List[a]
  method Head: a
  method Tail: List[a]
//│ Defined class List[+a]
//│ Declared List.Head: List['a] -> 'a
//│ Declared List.Tail: List['a] -> List['a]

class Cons[a]: List[a] & { head: a; tail: List[a] }
  method Head = this.head
  method Tail = this.tail
def cons[a]: a -> List[a] -> List[a]
def cons head tail = Cons { head; tail }
//│ Defined class Cons[+a]
//│ Defined Cons.Head: Cons['a] -> 'a
//│ Defined Cons.Tail: Cons['a] -> List['a]
//│ cons: 'a -> List['a] -> List['a]
//│     = <missing implementation>
//│ 'b -> (forall 'a, 'tail. (List['a] & 'tail) -> (Cons['a | 'b] with {head: 'b, tail: 'tail}))
//│   <:  cons:
//│ 'a -> List['a] -> List['a]
//│     = [Function: cons]

class Nil[a]: List[a]
  method Head = error
  method Tail = this
def nil: List['a]
def nil = Nil {}
//│ Defined class Nil[+a]
//│ Defined Nil.Head: Nil[?] -> nothing
//│ Defined Nil.Tail: (Nil['a] & 'this) -> (Nil['a] & 'this)
//│ nil: List[nothing]
//│    = <missing implementation>
//│ Nil[nothing]
//│   <:  nil:
//│ List[nothing]
//│    = Nil {}

// ============ Type signatures for functions used in the examples ============

def head: forall 'a. List['a] -> 'a
def head l = l.Head
//│ head: List['a] -> 'a
//│     = <missing implementation>
//│ List['a] -> 'a
//│   <:  head:
//│ List['a] -> 'a
//│     = [Function: head]

def tail: forall 'a. List['a] -> List['a]
def tail l = l.Tail
//│ tail: List['a] -> List['a]
//│     = <missing implementation>
//│ List['a] -> List['a]
//│   <:  tail:
//│ List['a] -> List['a]
//│     = [Function: tail]

:ng
def print_bool: bool -> unit
def print_bool b = log b
//│ print_bool: bool -> unit
//│ anything -> unit
//│   <:  print_bool:
//│ bool -> unit

:ng
def print_int: int -> unit
def print_int i = log i
//│ print_int: int -> unit
//│ anything -> unit
//│   <:  print_int:
//│ int -> unit

:ng
def print_string: string -> unit
def print_string s = log s
//│ print_string: string -> unit
//│ anything -> unit
//│   <:  print_string:
//│ string -> unit



// (* A quick demo of MLF *)

// (* In the following, "untype expr" means that the expression expr should not be typable. *)

// type sid = ['a] 'a -> 'a
type Sid = forall 'a. 'a -> 'a
//│ Defined type alias Sid

// let id = fun x -> x
def id = fun x -> x
//│ id: 'a -> 'a
//│   = [Function: id]

// let delta = fun (x:sid) -> x x
def delta = fun (x: Sid) -> x x
def delta' = fun x -> x x
//│ delta: Sid -> Sid
//│      = [Function: delta]
//│ delta': ('a -> 'b & 'a) -> 'b
//│       = [Function: delta]

// let choose x y = if true then x else y
def choose x y = if true then x else y
//│ choose: 'a -> (forall 'b. 'b -> ('a | 'b))
//│       = [Function: choose]

// let succ n = n + 1
// ;;
def succ n = n + 1
//│ succ: int -> int
//│     = [Function: succ]

// let test1 = delta id
test1 = delta id
//│ test1: Sid
//│      = [Function: id]

// untype delta succ
:e
delta succ
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.135: 	delta succ
//│ ║         	^^^^^^^^^^
//│ ╟── type `‘a` is not an instance of type `int`
//│ ║  l.101: 	type Sid = forall 'a. 'a -> 'a
//│ ║         	                  ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.124: 	def succ n = n + 1
//│ ╙──       	             ^
//│ res: error | Sid
//│    = 'function succ(n) {  return n + 1;}1'

// let test2 = delta (choose id id)
test2 = delta (choose id id)
//│ test2: Sid
//│      = [Function: id]

// untype delta (choose id succ)
:e
delta (choose id succ)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.155: 	delta (choose id succ)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a` is not an instance of type `int`
//│ ║  l.101: 	type Sid = forall 'a. 'a -> 'a
//│ ║         	                  ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.124: 	def succ n = n + 1
//│ ╙──       	             ^
//│ res: error | Sid
//│    = [Function: id]

// let test3 = choose id succ
test3 = choose id succ
//│ test3: int -> int
//│      = [Function: id]

// let test4 = choose succ id
// ;;
test4 = choose succ id
//│ test4: int -> int
//│      = [Function: succ]


// let eqstring s1 s2 = (s1^"A" = s2^"A")
def eqstring s1 s2 = eq (concat s1 "A") (concat s2 "A")
//│ eqstring: string -> string -> bool
//│         = [Function: eqstring]

// let eqint i1 i2 = (i1 - i2) = 0
def eqint i1 i2 = (i1 - i2) == 0
//│ eqint: int -> int -> bool
//│      = [Function: eqint]

// let eqbool b1 b2 = if b1 then b2 else (not b2)
def eqbool b1 b2 = if b1 then b2 else (not b2)
//│ eqbool: bool -> bool -> bool
//│       = [Function: eqbool]

// let ignore x = ()
def ignore x = null
//│ ignore: anything -> null
//│       = [Function: ignore]

// let rec listiter f ll =
//   if ll = [] then ()
//   else begin ignore (f (car ll)) ; listiter f (cdr ll) end
// ;;
rec def listiter f ll =
  if eq ll nil then null
  else
    let _ = ignore (f (head ll)) in 
    listiter f (tail ll)
//│ listiter: ('a -> anything & nothing -> anything) -> (forall 'a, 'a0, 'b. (List['a | 'a0] -> (null | 'b)
//│   where
//│     'c <: List['a0] -> 'b))
//│         = [Function: listiter]


// (* Polymorphic recursion. *)
// untype let rec id x = if true then x else id id x in id
let red id x = if true then x else id id x in id
//│ res: 'a -> 'a
//│    = [Function: id]


// let rec (id:sid) x = if true then x else id id x

def idd: Sid
//│ idd: Sid
//│    = <missing implementation>

def idd x = if true then x else idd idd x
//│ 'a -> 'a
//│   <:  idd:
//│ Sid
//│    = <no result>
//│      idd is not implemented

// * Note: Requires polymorphic recursion, so this doesn't work:
:e
def id: Sid
rec def id x = if true then x else id id x
//│ id: Sid
//│   = <missing implementation>
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d. (?b -> ?a
//│   where
//│     ?e <: ?b -> ?d) <: ?id` exceeded recursion depth limit (400)
//│ ║  l.238: 	rec def id x = if true then x else id id x
//│ ║         	           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α534',) -> α537')
//│ ╟── while constraining:  α427'  <!<  ((α534',) -> α537')
//│ ╟── while constraining:  {(α534' -> α536') where: α427' <: ((α534',) -> α537')}  <!<  ((α530',) -> α533')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α530',) -> α533')
//│ ╟── while constraining:  α427'  <!<  ((α530',) -> α533')
//│ ╟── while constraining:  {(α530' -> α532') where: α427' <: ((α530',) -> α533')}  <!<  ((α526',) -> α529')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α526',) -> α529')
//│ ╟── while constraining:  α427'  <!<  ((α526',) -> α529')
//│ ╟── while constraining:  {(α526' -> α528') where: α427' <: ((α526',) -> α529')}  <!<  ((α522',) -> α525')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α522',) -> α525')
//│ ╟── while constraining:  α427'  <!<  ((α522',) -> α525')
//│ ╟── while constraining:  {(α522' -> α524') where: α427' <: ((α522',) -> α525')}  <!<  ((α518',) -> α521')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α518',) -> α521')
//│ ╟── while constraining:  α427'  <!<  ((α518',) -> α521')
//│ ╟── while constraining:  {(α518' -> α520') where: α427' <: ((α518',) -> α521')}  <!<  ((α514',) -> α517')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α514',) -> α517')
//│ ╟── while constraining:  α427'  <!<  ((α514',) -> α517')
//│ ╟── while constraining:  {(α514' -> α516') where: α427' <: ((α514',) -> α517')}  <!<  ((α510',) -> α513')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α510',) -> α513')
//│ ╟── while constraining:  α427'  <!<  ((α510',) -> α513')
//│ ╟── while constraining:  {(α510' -> α512') where: α427' <: ((α510',) -> α513')}  <!<  ((α506',) -> α509')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α506',) -> α509')
//│ ╟── while constraining:  α427'  <!<  ((α506',) -> α509')
//│ ╟── while constraining:  {(α506' -> α508') where: α427' <: ((α506',) -> α509')}  <!<  ((α502',) -> α505')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α502',) -> α505')
//│ ╟── while constraining:  α427'  <!<  ((α502',) -> α505')
//│ ╟── while constraining:  {(α502' -> α504') where: α427' <: ((α502',) -> α505')}  <!<  ((α498',) -> α501')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α498',) -> α501')
//│ ╟── while constraining:  α427'  <!<  ((α498',) -> α501')
//│ ╟── while constraining:  {(α498' -> α500') where: α427' <: ((α498',) -> α501')}  <!<  ((α494',) -> α497')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α494',) -> α497')
//│ ╟── while constraining:  α427'  <!<  ((α494',) -> α497')
//│ ╟── while constraining:  {(α494' -> α496') where: α427' <: ((α494',) -> α497')}  <!<  ((α490',) -> α493')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α490',) -> α493')
//│ ╟── while constraining:  α427'  <!<  ((α490',) -> α493')
//│ ╟── while constraining:  {(α490' -> α492') where: α427' <: ((α490',) -> α493')}  <!<  ((α486',) -> α489')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α486',) -> α489')
//│ ╟── while constraining:  α427'  <!<  ((α486',) -> α489')
//│ ╟── while constraining:  {(α486' -> α488') where: α427' <: ((α486',) -> α489')}  <!<  ((α482',) -> α485')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α482',) -> α485')
//│ ╟── while constraining:  α427'  <!<  ((α482',) -> α485')
//│ ╟── while constraining:  {(α482' -> α484') where: α427' <: ((α482',) -> α485')}  <!<  ((α478',) -> α481')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α478',) -> α481')
//│ ╟── while constraining:  α427'  <!<  ((α478',) -> α481')
//│ ╟── while constraining:  {(α478' -> α480') where: α427' <: ((α478',) -> α481')}  <!<  ((α474',) -> α477')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α474',) -> α477')
//│ ╟── while constraining:  α427'  <!<  ((α474',) -> α477')
//│ ╟── while constraining:  {(α474' -> α476') where: α427' <: ((α474',) -> α477')}  <!<  ((α470',) -> α473')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α470',) -> α473')
//│ ╟── while constraining:  α427'  <!<  ((α470',) -> α473')
//│ ╟── while constraining:  {(α470' -> α472') where: α427' <: ((α470',) -> α473')}  <!<  ((α466',) -> α469')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α466',) -> α469')
//│ ╟── while constraining:  α427'  <!<  ((α466',) -> α469')
//│ ╟── while constraining:  {(α466' -> α468') where: α427' <: ((α466',) -> α469')}  <!<  ((α462',) -> α465')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α462',) -> α465')
//│ ╟── while constraining:  α427'  <!<  ((α462',) -> α465')
//│ ╟── while constraining:  {(α462' -> α464') where: α427' <: ((α462',) -> α465')}  <!<  ((α458',) -> α461')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α458',) -> α461')
//│ ╟── while constraining:  α427'  <!<  ((α458',) -> α461')
//│ ╟── while constraining:  {(α458' -> α460') where: α427' <: ((α458',) -> α461')}  <!<  ((α454',) -> α457')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α454',) -> α457')
//│ ╟── while constraining:  α427'  <!<  ((α454',) -> α457')
//│ ╟── while constraining:  {(α454' -> α456') where: α427' <: ((α454',) -> α457')}  <!<  ((α450',) -> α453')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α450',) -> α453')
//│ ╟── while constraining:  α427'  <!<  ((α450',) -> α453')
//│ ╟── while constraining:  {(α450' -> α452') where: α427' <: ((α450',) -> α453')}  <!<  ((α446',) -> α449')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α446',) -> α449')
//│ ╟── while constraining:  α427'  <!<  ((α446',) -> α449')
//│ ╟── while constraining:  {(α446' -> α448') where: α427' <: ((α446',) -> α449')}  <!<  ((α442',) -> α445')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α442',) -> α445')
//│ ╟── while constraining:  α427'  <!<  ((α442',) -> α445')
//│ ╟── while constraining:  {(α442' -> α444') where: α427' <: ((α442',) -> α445')}  <!<  ((α438',) -> α441')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α438',) -> α441')
//│ ╟── while constraining:  α427'  <!<  ((α438',) -> α441')
//│ ╟── while constraining:  {(α438' -> α440') where: α427' <: ((α438',) -> α441')}  <!<  ((α434',) -> α437')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α434',) -> α437')
//│ ╟── while constraining:  α427'  <!<  ((α434',) -> α437')
//│ ╟── while constraining:  {(α434' -> α436') where: α427' <: ((α434',) -> α437')}  <!<  ((α430',) -> α433')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α430',) -> α433')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  α427'
//│ ╟── while constraining:  α432'  <!<  α427'
//│ ╟── while constraining:  (α430' -> α432')  <!<  ((id421',) -> α427')
//│ ╟── while constraining:  {(α430' -> α432') where: α427' <: ((α430',) -> α433')}  <!<  ((id421',) -> α427')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((id421',) -> α427')
//│ ╙── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  id421'
//│ ('a & 'b) -> 'b
//│   where
//│     'c <: 'a -> 'b
//│   <:  id:
//│ Sid
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r, ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1, ?i1, ?j1, ?k1, ?l1, ?m1, ?n1, ?o1, ?p1, ?q1, ?r1, ?s1, ?t1, ?u1, ?v1, ?w1, ?x1, ?y1, ?z1, ?a2, ?b2, ?c2, ?d2, ?e2, ?f2, ?g2, ?h2, ?i2, ?j2, ?k2, ?l2, ?m2, ?n2, ?o2, ?p2, ?q2, ?r2, ?s2, ?t2, ?u2, ?v2, ?w2, ?x2, ?y2, ?id, ?z2, ?a3, ?b3, ?c3, ?d3, ?e3, ?f3, ?g3, ?h3, ?i3, ?j3, ?k3, ?l3, ?m3, ?n3, ?o3, ?p3, ?q3, ?r3, ?s3, ?t3, ?u3, ?v3, ?w3, ?x3, ?y3, ?z3, ?a4, ?b4, ?c4, ?d4, ?e4, ?f4, ?g4, ?h4, ?i4, ?j4, ?k4, ?l4, ?m4, ?n4, ?o4, ?p4, ?q4, ?r4, ?s4, ?t4, ?u4, ?v4, ?w4, ?x4, ?y4, ?z4, ?a5, ?b5, ?c5, ?d5, ?e5, ?f5, ?g5, ?h5, ?i5, ?j5, ?k5, ?l5, ?m5, ?n5, ?o5, ?p5, ?q5, ?r5, ?s5, ?t5, ?u5, ?v5, ?w5, ?x5, ?y5, ?z5, ?a6, ?b6, ?c6, ?d6, ?e6, ?f6, ?g6, ?h6, ?i6, ?j6, ?k6, ?l6, ?m6, ?n6, ?o6, ?p6, ?q6, ?r6, ?s6, ?t6, ?u6, ?v6, ?w6, ?x6, ?y6, ?z6, ?a7, ?b7, ?c7, ?d7, ?e7, ?f7, ?g7, ?h7, ?i7, ?j7, ?k7, ?l7, ?m7, ?n7, ?o7, ?p7, ?q7, ?r7, ?s7, ?t7, ?u7, ?v7, ?w7, ?x7, ?y7, ?z7, ?a8, ?b8, ?c8, ?d8, ?e8. ?id <: Sid` exceeded recursion depth limit (400)
//│ ║  l.238: 	rec def id x = if true then x else id id x
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α946',) -> α947')
//│ ╟── while constraining:  α427'  <!<  ((α946',) -> α947')
//│ ╟── while constraining:  α427'  <!<  ((α942'',) -> α945'')
//│ ╟── while constraining:  {(α942'' -> α944'') where: α427' <: ((α942'',) -> α945'')}  <!<  ((α938',) -> α939')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α938',) -> α939')
//│ ╟── while constraining:  α427'  <!<  ((α938',) -> α939')
//│ ╟── while constraining:  α427'  <!<  ((α934'',) -> α937'')
//│ ╟── while constraining:  {(α934'' -> α936'') where: α427' <: ((α934'',) -> α937'')}  <!<  ((α930',) -> α931')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α930',) -> α931')
//│ ╟── while constraining:  α427'  <!<  ((α930',) -> α931')
//│ ╟── while constraining:  α427'  <!<  ((α926'',) -> α929'')
//│ ╟── while constraining:  {(α926'' -> α928'') where: α427' <: ((α926'',) -> α929'')}  <!<  ((α922',) -> α923')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α922',) -> α923')
//│ ╟── while constraining:  α427'  <!<  ((α922',) -> α923')
//│ ╟── while constraining:  α427'  <!<  ((α918'',) -> α921'')
//│ ╟── while constraining:  {(α918'' -> α920'') where: α427' <: ((α918'',) -> α921'')}  <!<  ((α914',) -> α915')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α914',) -> α915')
//│ ╟── while constraining:  α427'  <!<  ((α914',) -> α915')
//│ ╟── while constraining:  α427'  <!<  ((α910'',) -> α913'')
//│ ╟── while constraining:  {(α910'' -> α912'') where: α427' <: ((α910'',) -> α913'')}  <!<  ((α906',) -> α907')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α906',) -> α907')
//│ ╟── while constraining:  α427'  <!<  ((α906',) -> α907')
//│ ╟── while constraining:  α427'  <!<  ((α902'',) -> α905'')
//│ ╟── while constraining:  {(α902'' -> α904'') where: α427' <: ((α902'',) -> α905'')}  <!<  ((α898',) -> α899')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α898',) -> α899')
//│ ╟── while constraining:  α427'  <!<  ((α898',) -> α899')
//│ ╟── while constraining:  α427'  <!<  ((α894'',) -> α897'')
//│ ╟── while constraining:  {(α894'' -> α896'') where: α427' <: ((α894'',) -> α897'')}  <!<  ((α890',) -> α891')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α890',) -> α891')
//│ ╟── while constraining:  α427'  <!<  ((α890',) -> α891')
//│ ╟── while constraining:  α427'  <!<  ((α886'',) -> α889'')
//│ ╟── while constraining:  {(α886'' -> α888'') where: α427' <: ((α886'',) -> α889'')}  <!<  ((α882',) -> α883')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α882',) -> α883')
//│ ╟── while constraining:  α427'  <!<  ((α882',) -> α883')
//│ ╟── while constraining:  α427'  <!<  ((α878'',) -> α881'')
//│ ╟── while constraining:  {(α878'' -> α880'') where: α427' <: ((α878'',) -> α881'')}  <!<  ((α874',) -> α875')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α874',) -> α875')
//│ ╟── while constraining:  α427'  <!<  ((α874',) -> α875')
//│ ╟── while constraining:  α427'  <!<  ((α870'',) -> α873'')
//│ ╟── while constraining:  {(α870'' -> α872'') where: α427' <: ((α870'',) -> α873'')}  <!<  ((α866',) -> α867')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α866',) -> α867')
//│ ╟── while constraining:  α427'  <!<  ((α866',) -> α867')
//│ ╟── while constraining:  α427'  <!<  ((α862'',) -> α865'')
//│ ╟── while constraining:  {(α862'' -> α864'') where: α427' <: ((α862'',) -> α865'')}  <!<  ((α858',) -> α859')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α858',) -> α859')
//│ ╟── while constraining:  α427'  <!<  ((α858',) -> α859')
//│ ╟── while constraining:  α427'  <!<  ((α854'',) -> α857'')
//│ ╟── while constraining:  {(α854'' -> α856'') where: α427' <: ((α854'',) -> α857'')}  <!<  ((α850',) -> α851')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α850',) -> α851')
//│ ╟── while constraining:  α427'  <!<  ((α850',) -> α851')
//│ ╟── while constraining:  α427'  <!<  ((α846'',) -> α849'')
//│ ╟── while constraining:  {(α846'' -> α848'') where: α427' <: ((α846'',) -> α849'')}  <!<  ((α842',) -> α843')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α842',) -> α843')
//│ ╟── while constraining:  α427'  <!<  ((α842',) -> α843')
//│ ╟── while constraining:  α427'  <!<  ((α838'',) -> α841'')
//│ ╟── while constraining:  {(α838'' -> α840'') where: α427' <: ((α838'',) -> α841'')}  <!<  ((α834',) -> α835')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α834',) -> α835')
//│ ╟── while constraining:  α427'  <!<  ((α834',) -> α835')
//│ ╟── while constraining:  α427'  <!<  ((α830'',) -> α833'')
//│ ╟── while constraining:  {(α830'' -> α832'') where: α427' <: ((α830'',) -> α833'')}  <!<  ((α826',) -> α827')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α826',) -> α827')
//│ ╟── while constraining:  α427'  <!<  ((α826',) -> α827')
//│ ╟── while constraining:  α427'  <!<  ((α822'',) -> α825'')
//│ ╟── while constraining:  {(α822'' -> α824'') where: α427' <: ((α822'',) -> α825'')}  <!<  ((α818',) -> α819')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α818',) -> α819')
//│ ╟── while constraining:  α427'  <!<  ((α818',) -> α819')
//│ ╟── while constraining:  α427'  <!<  ((α814'',) -> α817'')
//│ ╟── while constraining:  {(α814'' -> α816'') where: α427' <: ((α814'',) -> α817'')}  <!<  ((α810',) -> α811')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α810',) -> α811')
//│ ╟── while constraining:  α427'  <!<  ((α810',) -> α811')
//│ ╟── while constraining:  α427'  <!<  ((α806'',) -> α809'')
//│ ╟── while constraining:  {(α806'' -> α808'') where: α427' <: ((α806'',) -> α809'')}  <!<  ((α802',) -> α803')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α802',) -> α803')
//│ ╟── while constraining:  α427'  <!<  ((α802',) -> α803')
//│ ╟── while constraining:  α427'  <!<  ((α798'',) -> α801'')
//│ ╟── while constraining:  {(α798'' -> α800'') where: α427' <: ((α798'',) -> α801'')}  <!<  ((α794',) -> α795')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α794',) -> α795')
//│ ╟── while constraining:  α427'  <!<  ((α794',) -> α795')
//│ ╟── while constraining:  α427'  <!<  ((α790'',) -> α793'')
//│ ╟── while constraining:  {(α790'' -> α792'') where: α427' <: ((α790'',) -> α793'')}  <!<  ((α786',) -> α787')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α786',) -> α787')
//│ ╟── while constraining:  α427'  <!<  ((α786',) -> α787')
//│ ╟── while constraining:  α427'  <!<  ((α782'',) -> α785'')
//│ ╟── while constraining:  {(α782'' -> α784'') where: α427' <: ((α782'',) -> α785'')}  <!<  ((α778',) -> α779')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α778',) -> α779')
//│ ╟── while constraining:  α427'  <!<  ((α778',) -> α779')
//│ ╟── while constraining:  α427'  <!<  ((α774'',) -> α777'')
//│ ╟── while constraining:  {(α774'' -> α776'') where: α427' <: ((α774'',) -> α777'')}  <!<  ((α770',) -> α771')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α770',) -> α771')
//│ ╟── while constraining:  α427'  <!<  ((α770',) -> α771')
//│ ╟── while constraining:  α427'  <!<  ((α766'',) -> α769'')
//│ ╟── while constraining:  {(α766'' -> α768'') where: α427' <: ((α766'',) -> α769'')}  <!<  ((α762',) -> α763')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α762',) -> α763')
//│ ╟── while constraining:  α427'  <!<  ((α762',) -> α763')
//│ ╟── while constraining:  α427'  <!<  ((α758'',) -> α761'')
//│ ╟── while constraining:  {(α758'' -> α760'') where: α427' <: ((α758'',) -> α761'')}  <!<  ((α754',) -> α755')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  ((α754',) -> α755')
//│ ╟── while constraining:  α427'  <!<  ((α754',) -> α755')
//│ ╟── while constraining:  α427'  <!<  ((α750'',) -> α753'')
//│ ╟── while constraining:  {(α750'' -> α752'') where: α427' <: ((α750'',) -> α753'')}  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 1. {(α422'' -> α429'') where: α427' <: ((α422'',) -> α428'')}›  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  id640''  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 0. id421'›  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 0. id421'›  <!<  ‹∀ 0. ('a188' -> 'a188')›
//│ ╟── while constraining:  ‹∀ 0. id421'›  <!<  Sid
//│ ╙── while constraining:  ‹∀ 0. id421'›  <!<  ‹∀ 0. Sid›
//│   = [Function: id1]

:e // not precise enough
rec def idd x = if true then x else idd idd x
id = idd
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d. (?b -> ?a
//│   where
//│     ?e <: ?b -> ?d) <: ?idd` exceeded recursion depth limit (400)
//│ ║  l.448: 	rec def idd x = if true then x else idd idd x
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1200',) -> α1203')
//│ ╟── while constraining:  α1093'  <!<  ((α1200',) -> α1203')
//│ ╟── while constraining:  {(α1200' -> α1202') where: α1093' <: ((α1200',) -> α1203')}  <!<  ((α1196',) -> α1199')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1196',) -> α1199')
//│ ╟── while constraining:  α1093'  <!<  ((α1196',) -> α1199')
//│ ╟── while constraining:  {(α1196' -> α1198') where: α1093' <: ((α1196',) -> α1199')}  <!<  ((α1192',) -> α1195')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1192',) -> α1195')
//│ ╟── while constraining:  α1093'  <!<  ((α1192',) -> α1195')
//│ ╟── while constraining:  {(α1192' -> α1194') where: α1093' <: ((α1192',) -> α1195')}  <!<  ((α1188',) -> α1191')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1188',) -> α1191')
//│ ╟── while constraining:  α1093'  <!<  ((α1188',) -> α1191')
//│ ╟── while constraining:  {(α1188' -> α1190') where: α1093' <: ((α1188',) -> α1191')}  <!<  ((α1184',) -> α1187')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1184',) -> α1187')
//│ ╟── while constraining:  α1093'  <!<  ((α1184',) -> α1187')
//│ ╟── while constraining:  {(α1184' -> α1186') where: α1093' <: ((α1184',) -> α1187')}  <!<  ((α1180',) -> α1183')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1180',) -> α1183')
//│ ╟── while constraining:  α1093'  <!<  ((α1180',) -> α1183')
//│ ╟── while constraining:  {(α1180' -> α1182') where: α1093' <: ((α1180',) -> α1183')}  <!<  ((α1176',) -> α1179')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1176',) -> α1179')
//│ ╟── while constraining:  α1093'  <!<  ((α1176',) -> α1179')
//│ ╟── while constraining:  {(α1176' -> α1178') where: α1093' <: ((α1176',) -> α1179')}  <!<  ((α1172',) -> α1175')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1172',) -> α1175')
//│ ╟── while constraining:  α1093'  <!<  ((α1172',) -> α1175')
//│ ╟── while constraining:  {(α1172' -> α1174') where: α1093' <: ((α1172',) -> α1175')}  <!<  ((α1168',) -> α1171')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1168',) -> α1171')
//│ ╟── while constraining:  α1093'  <!<  ((α1168',) -> α1171')
//│ ╟── while constraining:  {(α1168' -> α1170') where: α1093' <: ((α1168',) -> α1171')}  <!<  ((α1164',) -> α1167')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1164',) -> α1167')
//│ ╟── while constraining:  α1093'  <!<  ((α1164',) -> α1167')
//│ ╟── while constraining:  {(α1164' -> α1166') where: α1093' <: ((α1164',) -> α1167')}  <!<  ((α1160',) -> α1163')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1160',) -> α1163')
//│ ╟── while constraining:  α1093'  <!<  ((α1160',) -> α1163')
//│ ╟── while constraining:  {(α1160' -> α1162') where: α1093' <: ((α1160',) -> α1163')}  <!<  ((α1156',) -> α1159')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1156',) -> α1159')
//│ ╟── while constraining:  α1093'  <!<  ((α1156',) -> α1159')
//│ ╟── while constraining:  {(α1156' -> α1158') where: α1093' <: ((α1156',) -> α1159')}  <!<  ((α1152',) -> α1155')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1152',) -> α1155')
//│ ╟── while constraining:  α1093'  <!<  ((α1152',) -> α1155')
//│ ╟── while constraining:  {(α1152' -> α1154') where: α1093' <: ((α1152',) -> α1155')}  <!<  ((α1148',) -> α1151')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1148',) -> α1151')
//│ ╟── while constraining:  α1093'  <!<  ((α1148',) -> α1151')
//│ ╟── while constraining:  {(α1148' -> α1150') where: α1093' <: ((α1148',) -> α1151')}  <!<  ((α1144',) -> α1147')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1144',) -> α1147')
//│ ╟── while constraining:  α1093'  <!<  ((α1144',) -> α1147')
//│ ╟── while constraining:  {(α1144' -> α1146') where: α1093' <: ((α1144',) -> α1147')}  <!<  ((α1140',) -> α1143')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1140',) -> α1143')
//│ ╟── while constraining:  α1093'  <!<  ((α1140',) -> α1143')
//│ ╟── while constraining:  {(α1140' -> α1142') where: α1093' <: ((α1140',) -> α1143')}  <!<  ((α1136',) -> α1139')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1136',) -> α1139')
//│ ╟── while constraining:  α1093'  <!<  ((α1136',) -> α1139')
//│ ╟── while constraining:  {(α1136' -> α1138') where: α1093' <: ((α1136',) -> α1139')}  <!<  ((α1132',) -> α1135')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1132',) -> α1135')
//│ ╟── while constraining:  α1093'  <!<  ((α1132',) -> α1135')
//│ ╟── while constraining:  {(α1132' -> α1134') where: α1093' <: ((α1132',) -> α1135')}  <!<  ((α1128',) -> α1131')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1128',) -> α1131')
//│ ╟── while constraining:  α1093'  <!<  ((α1128',) -> α1131')
//│ ╟── while constraining:  {(α1128' -> α1130') where: α1093' <: ((α1128',) -> α1131')}  <!<  ((α1124',) -> α1127')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1124',) -> α1127')
//│ ╟── while constraining:  α1093'  <!<  ((α1124',) -> α1127')
//│ ╟── while constraining:  {(α1124' -> α1126') where: α1093' <: ((α1124',) -> α1127')}  <!<  ((α1120',) -> α1123')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1120',) -> α1123')
//│ ╟── while constraining:  α1093'  <!<  ((α1120',) -> α1123')
//│ ╟── while constraining:  {(α1120' -> α1122') where: α1093' <: ((α1120',) -> α1123')}  <!<  ((α1116',) -> α1119')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1116',) -> α1119')
//│ ╟── while constraining:  α1093'  <!<  ((α1116',) -> α1119')
//│ ╟── while constraining:  {(α1116' -> α1118') where: α1093' <: ((α1116',) -> α1119')}  <!<  ((α1112',) -> α1115')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1112',) -> α1115')
//│ ╟── while constraining:  α1093'  <!<  ((α1112',) -> α1115')
//│ ╟── while constraining:  {(α1112' -> α1114') where: α1093' <: ((α1112',) -> α1115')}  <!<  ((α1108',) -> α1111')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1108',) -> α1111')
//│ ╟── while constraining:  α1093'  <!<  ((α1108',) -> α1111')
//│ ╟── while constraining:  {(α1108' -> α1110') where: α1093' <: ((α1108',) -> α1111')}  <!<  ((α1104',) -> α1107')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1104',) -> α1107')
//│ ╟── while constraining:  α1093'  <!<  ((α1104',) -> α1107')
//│ ╟── while constraining:  {(α1104' -> α1106') where: α1093' <: ((α1104',) -> α1107')}  <!<  ((α1100',) -> α1103')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1100',) -> α1103')
//│ ╟── while constraining:  α1093'  <!<  ((α1100',) -> α1103')
//│ ╟── while constraining:  {(α1100' -> α1102') where: α1093' <: ((α1100',) -> α1103')}  <!<  ((α1096',) -> α1099')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1096',) -> α1099')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  α1093'
//│ ╟── while constraining:  α1098'  <!<  α1093'
//│ ╟── while constraining:  (α1096' -> α1098')  <!<  ((idd1087',) -> α1093')
//│ ╟── while constraining:  {(α1096' -> α1098') where: α1093' <: ((α1096',) -> α1099')}  <!<  ((idd1087',) -> α1093')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((idd1087',) -> α1093')
//│ ╙── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  idd1087'
//│ ('a & 'b) -> 'b
//│   where
//│     'c <: 'a -> 'b
//│   <:  idd:
//│ Sid
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r, ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1, ?i1, ?j1, ?k1, ?l1, ?m1, ?n1, ?o1, ?p1, ?q1, ?r1, ?s1, ?t1, ?u1, ?v1, ?w1, ?x1, ?y1, ?z1, ?a2, ?b2, ?c2, ?d2, ?e2, ?f2, ?g2, ?h2, ?i2, ?j2, ?k2, ?l2, ?m2, ?n2, ?o2, ?p2, ?q2, ?r2, ?s2, ?t2, ?u2, ?v2, ?w2, ?x2, ?y2, ?idd, ?z2, ?a3, ?b3, ?c3, ?d3, ?e3, ?f3, ?g3, ?h3, ?i3, ?j3, ?k3, ?l3, ?m3, ?n3, ?o3, ?p3, ?q3, ?r3, ?s3, ?t3, ?u3, ?v3, ?w3, ?x3, ?y3, ?z3, ?a4, ?b4, ?c4, ?d4, ?e4, ?f4, ?g4, ?h4, ?i4, ?j4, ?k4, ?l4, ?m4, ?n4, ?o4, ?p4, ?q4, ?r4, ?s4, ?t4, ?u4, ?v4, ?w4, ?x4, ?y4, ?z4, ?a5, ?b5, ?c5, ?d5, ?e5, ?f5, ?g5, ?h5, ?i5, ?j5, ?k5, ?l5, ?m5, ?n5, ?o5, ?p5, ?q5, ?r5, ?s5, ?t5, ?u5, ?v5, ?w5, ?x5, ?y5, ?z5, ?a6, ?b6, ?c6, ?d6, ?e6, ?f6, ?g6, ?h6, ?i6, ?j6, ?k6, ?l6, ?m6, ?n6, ?o6, ?p6, ?q6, ?r6, ?s6, ?t6, ?u6, ?v6, ?w6, ?x6, ?y6, ?z6, ?a7, ?b7, ?c7, ?d7, ?e7, ?f7, ?g7, ?h7, ?i7, ?j7, ?k7, ?l7, ?m7, ?n7, ?o7, ?p7, ?q7, ?r7, ?s7, ?t7, ?u7, ?v7, ?w7, ?x7, ?y7, ?z7, ?a8, ?b8, ?c8, ?d8, ?e8. ?idd <: Sid` exceeded recursion depth limit (400)
//│ ║  l.448: 	rec def idd x = if true then x else idd idd x
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1612',) -> α1613')
//│ ╟── while constraining:  α1093'  <!<  ((α1612',) -> α1613')
//│ ╟── while constraining:  α1093'  <!<  ((α1608'',) -> α1611'')
//│ ╟── while constraining:  {(α1608'' -> α1610'') where: α1093' <: ((α1608'',) -> α1611'')}  <!<  ((α1604',) -> α1605')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1604',) -> α1605')
//│ ╟── while constraining:  α1093'  <!<  ((α1604',) -> α1605')
//│ ╟── while constraining:  α1093'  <!<  ((α1600'',) -> α1603'')
//│ ╟── while constraining:  {(α1600'' -> α1602'') where: α1093' <: ((α1600'',) -> α1603'')}  <!<  ((α1596',) -> α1597')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1596',) -> α1597')
//│ ╟── while constraining:  α1093'  <!<  ((α1596',) -> α1597')
//│ ╟── while constraining:  α1093'  <!<  ((α1592'',) -> α1595'')
//│ ╟── while constraining:  {(α1592'' -> α1594'') where: α1093' <: ((α1592'',) -> α1595'')}  <!<  ((α1588',) -> α1589')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1588',) -> α1589')
//│ ╟── while constraining:  α1093'  <!<  ((α1588',) -> α1589')
//│ ╟── while constraining:  α1093'  <!<  ((α1584'',) -> α1587'')
//│ ╟── while constraining:  {(α1584'' -> α1586'') where: α1093' <: ((α1584'',) -> α1587'')}  <!<  ((α1580',) -> α1581')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1580',) -> α1581')
//│ ╟── while constraining:  α1093'  <!<  ((α1580',) -> α1581')
//│ ╟── while constraining:  α1093'  <!<  ((α1576'',) -> α1579'')
//│ ╟── while constraining:  {(α1576'' -> α1578'') where: α1093' <: ((α1576'',) -> α1579'')}  <!<  ((α1572',) -> α1573')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1572',) -> α1573')
//│ ╟── while constraining:  α1093'  <!<  ((α1572',) -> α1573')
//│ ╟── while constraining:  α1093'  <!<  ((α1568'',) -> α1571'')
//│ ╟── while constraining:  {(α1568'' -> α1570'') where: α1093' <: ((α1568'',) -> α1571'')}  <!<  ((α1564',) -> α1565')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1564',) -> α1565')
//│ ╟── while constraining:  α1093'  <!<  ((α1564',) -> α1565')
//│ ╟── while constraining:  α1093'  <!<  ((α1560'',) -> α1563'')
//│ ╟── while constraining:  {(α1560'' -> α1562'') where: α1093' <: ((α1560'',) -> α1563'')}  <!<  ((α1556',) -> α1557')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1556',) -> α1557')
//│ ╟── while constraining:  α1093'  <!<  ((α1556',) -> α1557')
//│ ╟── while constraining:  α1093'  <!<  ((α1552'',) -> α1555'')
//│ ╟── while constraining:  {(α1552'' -> α1554'') where: α1093' <: ((α1552'',) -> α1555'')}  <!<  ((α1548',) -> α1549')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1548',) -> α1549')
//│ ╟── while constraining:  α1093'  <!<  ((α1548',) -> α1549')
//│ ╟── while constraining:  α1093'  <!<  ((α1544'',) -> α1547'')
//│ ╟── while constraining:  {(α1544'' -> α1546'') where: α1093' <: ((α1544'',) -> α1547'')}  <!<  ((α1540',) -> α1541')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1540',) -> α1541')
//│ ╟── while constraining:  α1093'  <!<  ((α1540',) -> α1541')
//│ ╟── while constraining:  α1093'  <!<  ((α1536'',) -> α1539'')
//│ ╟── while constraining:  {(α1536'' -> α1538'') where: α1093' <: ((α1536'',) -> α1539'')}  <!<  ((α1532',) -> α1533')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1532',) -> α1533')
//│ ╟── while constraining:  α1093'  <!<  ((α1532',) -> α1533')
//│ ╟── while constraining:  α1093'  <!<  ((α1528'',) -> α1531'')
//│ ╟── while constraining:  {(α1528'' -> α1530'') where: α1093' <: ((α1528'',) -> α1531'')}  <!<  ((α1524',) -> α1525')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1524',) -> α1525')
//│ ╟── while constraining:  α1093'  <!<  ((α1524',) -> α1525')
//│ ╟── while constraining:  α1093'  <!<  ((α1520'',) -> α1523'')
//│ ╟── while constraining:  {(α1520'' -> α1522'') where: α1093' <: ((α1520'',) -> α1523'')}  <!<  ((α1516',) -> α1517')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1516',) -> α1517')
//│ ╟── while constraining:  α1093'  <!<  ((α1516',) -> α1517')
//│ ╟── while constraining:  α1093'  <!<  ((α1512'',) -> α1515'')
//│ ╟── while constraining:  {(α1512'' -> α1514'') where: α1093' <: ((α1512'',) -> α1515'')}  <!<  ((α1508',) -> α1509')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1508',) -> α1509')
//│ ╟── while constraining:  α1093'  <!<  ((α1508',) -> α1509')
//│ ╟── while constraining:  α1093'  <!<  ((α1504'',) -> α1507'')
//│ ╟── while constraining:  {(α1504'' -> α1506'') where: α1093' <: ((α1504'',) -> α1507'')}  <!<  ((α1500',) -> α1501')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1500',) -> α1501')
//│ ╟── while constraining:  α1093'  <!<  ((α1500',) -> α1501')
//│ ╟── while constraining:  α1093'  <!<  ((α1496'',) -> α1499'')
//│ ╟── while constraining:  {(α1496'' -> α1498'') where: α1093' <: ((α1496'',) -> α1499'')}  <!<  ((α1492',) -> α1493')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1492',) -> α1493')
//│ ╟── while constraining:  α1093'  <!<  ((α1492',) -> α1493')
//│ ╟── while constraining:  α1093'  <!<  ((α1488'',) -> α1491'')
//│ ╟── while constraining:  {(α1488'' -> α1490'') where: α1093' <: ((α1488'',) -> α1491'')}  <!<  ((α1484',) -> α1485')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1484',) -> α1485')
//│ ╟── while constraining:  α1093'  <!<  ((α1484',) -> α1485')
//│ ╟── while constraining:  α1093'  <!<  ((α1480'',) -> α1483'')
//│ ╟── while constraining:  {(α1480'' -> α1482'') where: α1093' <: ((α1480'',) -> α1483'')}  <!<  ((α1476',) -> α1477')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1476',) -> α1477')
//│ ╟── while constraining:  α1093'  <!<  ((α1476',) -> α1477')
//│ ╟── while constraining:  α1093'  <!<  ((α1472'',) -> α1475'')
//│ ╟── while constraining:  {(α1472'' -> α1474'') where: α1093' <: ((α1472'',) -> α1475'')}  <!<  ((α1468',) -> α1469')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1468',) -> α1469')
//│ ╟── while constraining:  α1093'  <!<  ((α1468',) -> α1469')
//│ ╟── while constraining:  α1093'  <!<  ((α1464'',) -> α1467'')
//│ ╟── while constraining:  {(α1464'' -> α1466'') where: α1093' <: ((α1464'',) -> α1467'')}  <!<  ((α1460',) -> α1461')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1460',) -> α1461')
//│ ╟── while constraining:  α1093'  <!<  ((α1460',) -> α1461')
//│ ╟── while constraining:  α1093'  <!<  ((α1456'',) -> α1459'')
//│ ╟── while constraining:  {(α1456'' -> α1458'') where: α1093' <: ((α1456'',) -> α1459'')}  <!<  ((α1452',) -> α1453')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1452',) -> α1453')
//│ ╟── while constraining:  α1093'  <!<  ((α1452',) -> α1453')
//│ ╟── while constraining:  α1093'  <!<  ((α1448'',) -> α1451'')
//│ ╟── while constraining:  {(α1448'' -> α1450'') where: α1093' <: ((α1448'',) -> α1451'')}  <!<  ((α1444',) -> α1445')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1444',) -> α1445')
//│ ╟── while constraining:  α1093'  <!<  ((α1444',) -> α1445')
//│ ╟── while constraining:  α1093'  <!<  ((α1440'',) -> α1443'')
//│ ╟── while constraining:  {(α1440'' -> α1442'') where: α1093' <: ((α1440'',) -> α1443'')}  <!<  ((α1436',) -> α1437')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1436',) -> α1437')
//│ ╟── while constraining:  α1093'  <!<  ((α1436',) -> α1437')
//│ ╟── while constraining:  α1093'  <!<  ((α1432'',) -> α1435'')
//│ ╟── while constraining:  {(α1432'' -> α1434'') where: α1093' <: ((α1432'',) -> α1435'')}  <!<  ((α1428',) -> α1429')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1428',) -> α1429')
//│ ╟── while constraining:  α1093'  <!<  ((α1428',) -> α1429')
//│ ╟── while constraining:  α1093'  <!<  ((α1424'',) -> α1427'')
//│ ╟── while constraining:  {(α1424'' -> α1426'') where: α1093' <: ((α1424'',) -> α1427'')}  <!<  ((α1420',) -> α1421')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  ((α1420',) -> α1421')
//│ ╟── while constraining:  α1093'  <!<  ((α1420',) -> α1421')
//│ ╟── while constraining:  α1093'  <!<  ((α1416'',) -> α1419'')
//│ ╟── while constraining:  {(α1416'' -> α1418'') where: α1093' <: ((α1416'',) -> α1419'')}  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 1. {(α1088'' -> α1095'') where: α1093' <: ((α1088'',) -> α1094'')}›  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  idd1306''  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 0. idd1087'›  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 0. idd1087'›  <!<  ‹∀ 0. ('a188' -> 'a188')›
//│ ╟── while constraining:  ‹∀ 0. idd1087'›  <!<  Sid
//│ ╙── while constraining:  ‹∀ 0. idd1087'›  <!<  ‹∀ 0. Sid›
//│    = [Function: idd1]
//│ Sid
//│   <:  id:
//│ Sid
//│   = [Function: idd1]

// emulates annotated rec def
def id x = if true then x else id id x
//│ 'a -> 'a
//│   <:  id:
//│ Sid
//│   = [Function: id3]




// (* Existential types. *)
// (* Creating an encapsulation is explicit (unavoidable). *)
// (* Here, we build (Exist 'a . 'a * ('a -> unit))              *)
// (*        then    (Exist 'a . 'a * 'a * ('a -> 'a -> bool))   *)
// let make_ex1 x (f:['a] ('a * ('a -> 'c)) -> 'b) = f x
def make_ex1 x (f: forall 'a. (('a, 'a -> 'c),) -> 'b) = f x
//│ make_ex1: 'b -> (forall 'a, 'c, 'd. ((forall 'a0. ('a0, 'a0 -> 'c,) -> 'd) -> 'd
//│   where
//│     'b <: ('a, 'a -> 'c,)))
//│         = [Function: make_ex1]

// let make_ex2 x (f:['a] ('a * 'a * ('a -> 'a -> 'c)) -> 'b) = f x
// ;;
def make_ex2 x (f: forall 'a. (('a, 'a, 'a -> 'a -> 'c),) -> 'b) = f x
//│ make_ex2: 'b -> (forall 'a, 'c, 'd. ((forall 'a0. ('a0, 'a0, 'a0 -> 'a0 -> 'c,) -> 'd) -> 'd
//│   where
//│     'b <: ('a, 'a, 'a -> 'a -> 'c,)))
//│         = [Function: make_ex2]

// let ex_list1 = [ make_ex1 ("A String", print_string) ; 
// 		 make_ex1 (8250, print_int) ;
// 		 make_ex1 (true, print_bool) ]
// ;;
:ng
ex_list1 = cons (make_ex1 (("A String", print_string)))
  (cons (make_ex1 ((8250, print_int)))
  (cons (make_ex1 ((true, print_bool))) nil))
//│ ex_list1: List[forall 'a, 'c, 'b. ((forall 'a0. ('a0, 'a0 -> 'c,) -> 'b) -> 'b
//│   where
//│     'd <: ('a, 'a -> 'c,))]

// let ex_list2 = [ make_ex2 ("String", "String", eqstring) ;
// 		 make_ex2 ( 1250, 4890, eqint) ;
// 		 make_ex2 ( true, false, eqbool) ]
// ;;
ex_list2 = cons (make_ex2 (("String", "String", eqstring)))
  (cons (make_ex2 ((1250, 4890, eqint)))
  (cons (make_ex2 ((true, false, eqbool))) nil))
//│ ex_list2: List[forall 'a, 'c, 'b. ((forall 'a0. ('a0, 'a0, 'a0 -> 'a0 -> 'c,) -> 'b) -> 'b
//│   where
//│     'd <: ('a, 'a, 'a -> 'a -> 'c,))]
//│         = Cons {
//│             head: [Function (anonymous)],
//│             tail: Cons {
//│               head: [Function (anonymous)],
//│               tail: Cons { head: [Function (anonymous)], tail: Nil {} }
//│             }
//│           }


// let test1 = listiter (fun ex -> ex (fun p -> (snd p) (fst p))) ex_list1
// ;;
:ng
test1 = listiter (fun ex -> ex (fun p -> p._2 p._1)) ex_list1
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?c, ?d, ?e, ?b. ?d) -> ?f` exceeded recursion depth limit (400)
//│ ║  l.723: 	test1 = listiter (fun ex -> ex (fun p -> p._2 p._1)) ex_list1
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  {(α2579' -> α2578') where: α1908' <: ((α2574',) -> α2576')}  <!<  ((α2566',) -> α2568')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2566',) -> α2568')
//│ ╟── while constraining:  α1908'  <!<  ((α2566',) -> α2568')
//│ ╟── while constraining:  {(α2571' -> α2570') where: α1908' <: ((α2566',) -> α2568')}  <!<  ((α2558',) -> α2560')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2558',) -> α2560')
//│ ╟── while constraining:  α1908'  <!<  ((α2558',) -> α2560')
//│ ╟── while constraining:  {(α2563' -> α2562') where: α1908' <: ((α2558',) -> α2560')}  <!<  ((α2550',) -> α2552')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2550',) -> α2552')
//│ ╟── while constraining:  α1908'  <!<  ((α2550',) -> α2552')
//│ ╟── while constraining:  {(α2555' -> α2554') where: α1908' <: ((α2550',) -> α2552')}  <!<  ((α2542',) -> α2544')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2542',) -> α2544')
//│ ╟── while constraining:  α1908'  <!<  ((α2542',) -> α2544')
//│ ╟── while constraining:  {(α2547' -> α2546') where: α1908' <: ((α2542',) -> α2544')}  <!<  ((α2534',) -> α2536')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2534',) -> α2536')
//│ ╟── while constraining:  α1908'  <!<  ((α2534',) -> α2536')
//│ ╟── while constraining:  {(α2539' -> α2538') where: α1908' <: ((α2534',) -> α2536')}  <!<  ((α2526',) -> α2528')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2526',) -> α2528')
//│ ╟── while constraining:  α1908'  <!<  ((α2526',) -> α2528')
//│ ╟── while constraining:  {(α2531' -> α2530') where: α1908' <: ((α2526',) -> α2528')}  <!<  ((α2518',) -> α2520')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2518',) -> α2520')
//│ ╟── while constraining:  α1908'  <!<  ((α2518',) -> α2520')
//│ ╟── while constraining:  {(α2523' -> α2522') where: α1908' <: ((α2518',) -> α2520')}  <!<  ((α2510',) -> α2512')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2510',) -> α2512')
//│ ╟── while constraining:  α1908'  <!<  ((α2510',) -> α2512')
//│ ╟── while constraining:  {(α2515' -> α2514') where: α1908' <: ((α2510',) -> α2512')}  <!<  ((α2502',) -> α2504')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2502',) -> α2504')
//│ ╟── while constraining:  α1908'  <!<  ((α2502',) -> α2504')
//│ ╟── while constraining:  {(α2507' -> α2506') where: α1908' <: ((α2502',) -> α2504')}  <!<  ((α2494',) -> α2496')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2494',) -> α2496')
//│ ╟── while constraining:  α1908'  <!<  ((α2494',) -> α2496')
//│ ╟── while constraining:  {(α2499' -> α2498') where: α1908' <: ((α2494',) -> α2496')}  <!<  ((α2486',) -> α2488')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2486',) -> α2488')
//│ ╟── while constraining:  α1908'  <!<  ((α2486',) -> α2488')
//│ ╟── while constraining:  {(α2491' -> α2490') where: α1908' <: ((α2486',) -> α2488')}  <!<  ((α2478',) -> α2480')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2478',) -> α2480')
//│ ╟── while constraining:  α1908'  <!<  ((α2478',) -> α2480')
//│ ╟── while constraining:  {(α2483' -> α2482') where: α1908' <: ((α2478',) -> α2480')}  <!<  ((α2470',) -> α2472')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2470',) -> α2472')
//│ ╟── while constraining:  α1908'  <!<  ((α2470',) -> α2472')
//│ ╟── while constraining:  {(α2475' -> α2474') where: α1908' <: ((α2470',) -> α2472')}  <!<  ((α2462',) -> α2464')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2462',) -> α2464')
//│ ╟── while constraining:  α1908'  <!<  ((α2462',) -> α2464')
//│ ╟── while constraining:  {(α2467' -> α2466') where: α1908' <: ((α2462',) -> α2464')}  <!<  ((α2454',) -> α2456')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2454',) -> α2456')
//│ ╟── while constraining:  α1908'  <!<  ((α2454',) -> α2456')
//│ ╟── while constraining:  {(α2459' -> α2458') where: α1908' <: ((α2454',) -> α2456')}  <!<  ((α2446',) -> α2448')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2446',) -> α2448')
//│ ╟── while constraining:  α1908'  <!<  ((α2446',) -> α2448')
//│ ╟── while constraining:  {(α2451' -> α2450') where: α1908' <: ((α2446',) -> α2448')}  <!<  ((α2438',) -> α2440')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2438',) -> α2440')
//│ ╟── while constraining:  α1908'  <!<  ((α2438',) -> α2440')
//│ ╟── while constraining:  {(α2443' -> α2442') where: α1908' <: ((α2438',) -> α2440')}  <!<  ((α2430',) -> α2432')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2430',) -> α2432')
//│ ╟── while constraining:  α1908'  <!<  ((α2430',) -> α2432')
//│ ╟── while constraining:  {(α2435' -> α2434') where: α1908' <: ((α2430',) -> α2432')}  <!<  ((α2422',) -> α2424')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2422',) -> α2424')
//│ ╟── while constraining:  α1908'  <!<  ((α2422',) -> α2424')
//│ ╟── while constraining:  {(α2427' -> α2426') where: α1908' <: ((α2422',) -> α2424')}  <!<  ((α2414',) -> α2416')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2414',) -> α2416')
//│ ╟── while constraining:  α1908'  <!<  ((α2414',) -> α2416')
//│ ╟── while constraining:  {(α2419' -> α2418') where: α1908' <: ((α2414',) -> α2416')}  <!<  ((α2406',) -> α2408')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2406',) -> α2408')
//│ ╟── while constraining:  α1908'  <!<  ((α2406',) -> α2408')
//│ ╟── while constraining:  {(α2411' -> α2410') where: α1908' <: ((α2406',) -> α2408')}  <!<  ((α2398',) -> α2400')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2398',) -> α2400')
//│ ╟── while constraining:  α1908'  <!<  ((α2398',) -> α2400')
//│ ╟── while constraining:  {(α2403' -> α2402') where: α1908' <: ((α2398',) -> α2400')}  <!<  ((α2390',) -> α2392')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2390',) -> α2392')
//│ ╟── while constraining:  α1908'  <!<  ((α2390',) -> α2392')
//│ ╟── while constraining:  {(α2395' -> α2394') where: α1908' <: ((α2390',) -> α2392')}  <!<  ((α2382',) -> α2384')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2382',) -> α2384')
//│ ╟── while constraining:  α1908'  <!<  ((α2382',) -> α2384')
//│ ╟── while constraining:  {(α2387' -> α2386') where: α1908' <: ((α2382',) -> α2384')}  <!<  ((α2374',) -> α2376')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2374',) -> α2376')
//│ ╟── while constraining:  α1908'  <!<  ((α2374',) -> α2376')
//│ ╟── while constraining:  {(α2379' -> α2378') where: α1908' <: ((α2374',) -> α2376')}  <!<  ((α2366',) -> α2368')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2366',) -> α2368')
//│ ╟── while constraining:  α1908'  <!<  ((α2366',) -> α2368')
//│ ╟── while constraining:  {(α2371' -> α2370') where: α1908' <: ((α2366',) -> α2368')}  <!<  ((α2358',) -> α2360')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2358',) -> α2360')
//│ ╟── while constraining:  α1908'  <!<  ((α2358',) -> α2360')
//│ ╟── while constraining:  {(α2363' -> α2362') where: α1908' <: ((α2358',) -> α2360')}  <!<  ((α2350',) -> α2352')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2350',) -> α2352')
//│ ╟── while constraining:  α1908'  <!<  ((α2350',) -> α2352')
//│ ╟── while constraining:  {(α2355' -> α2354') where: α1908' <: ((α2350',) -> α2352')}  <!<  ((α2342',) -> α2344')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2342',) -> α2344')
//│ ╟── while constraining:  α1908'  <!<  ((α2342',) -> α2344')
//│ ╟── while constraining:  {(α2347' -> α2346') where: α1908' <: ((α2342',) -> α2344')}  <!<  ((α2334',) -> α2336')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2334',) -> α2336')
//│ ╟── while constraining:  α1908'  <!<  ((α2334',) -> α2336')
//│ ╟── while constraining:  {(α2339' -> α2338') where: α1908' <: ((α2334',) -> α2336')}  <!<  ((α2326',) -> α2328')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2326',) -> α2328')
//│ ╟── while constraining:  α1908'  <!<  ((α2326',) -> α2328')
//│ ╟── while constraining:  {(α2331' -> α2330') where: α1908' <: ((α2326',) -> α2328')}  <!<  ((α2318',) -> α2320')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2318',) -> α2320')
//│ ╟── while constraining:  α1908'  <!<  ((α2318',) -> α2320')
//│ ╟── while constraining:  {(α2323' -> α2322') where: α1908' <: ((α2318',) -> α2320')}  <!<  ((α2310',) -> α2312')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2310',) -> α2312')
//│ ╟── while constraining:  α1908'  <!<  ((α2310',) -> α2312')
//│ ╟── while constraining:  {(α2315' -> α2314') where: α1908' <: ((α2310',) -> α2312')}  <!<  ((α2302',) -> α2304')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2302',) -> α2304')
//│ ╟── while constraining:  α1908'  <!<  ((α2302',) -> α2304')
//│ ╟── while constraining:  {(α2307' -> α2306') where: α1908' <: ((α2302',) -> α2304')}  <!<  ((α2294',) -> α2296')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2294',) -> α2296')
//│ ╟── while constraining:  α1908'  <!<  ((α2294',) -> α2296')
//│ ╟── while constraining:  {(α2299' -> α2298') where: α1908' <: ((α2294',) -> α2296')}  <!<  ((α2286',) -> α2288')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2286',) -> α2288')
//│ ╟── while constraining:  α1908'  <!<  ((α2286',) -> α2288')
//│ ╟── while constraining:  {(α2291' -> α2290') where: α1908' <: ((α2286',) -> α2288')}  <!<  ((α2278',) -> α2280')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2278',) -> α2280')
//│ ╟── while constraining:  α1908'  <!<  ((α2278',) -> α2280')
//│ ╟── while constraining:  {(α2283' -> α2282') where: α1908' <: ((α2278',) -> α2280')}  <!<  ((α2270',) -> α2272')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2270',) -> α2272')
//│ ╟── while constraining:  α1908'  <!<  ((α2270',) -> α2272')
//│ ╟── while constraining:  {(α2275' -> α2274') where: α1908' <: ((α2270',) -> α2272')}  <!<  ((α2262',) -> α2264')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2262',) -> α2264')
//│ ╟── while constraining:  α1908'  <!<  ((α2262',) -> α2264')
//│ ╟── while constraining:  {(α2267' -> α2266') where: α1908' <: ((α2262',) -> α2264')}  <!<  ((α2254',) -> α2256')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2254',) -> α2256')
//│ ╟── while constraining:  α1908'  <!<  ((α2254',) -> α2256')
//│ ╟── while constraining:  {(α2259' -> α2258') where: α1908' <: ((α2254',) -> α2256')}  <!<  ((α2246',) -> α2248')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2246',) -> α2248')
//│ ╟── while constraining:  α1908'  <!<  ((α2246',) -> α2248')
//│ ╟── while constraining:  {(α2251' -> α2250') where: α1908' <: ((α2246',) -> α2248')}  <!<  ((α2238',) -> α2240')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2238',) -> α2240')
//│ ╟── while constraining:  α1908'  <!<  ((α2238',) -> α2240')
//│ ╟── while constraining:  {(α2243' -> α2242') where: α1908' <: ((α2238',) -> α2240')}  <!<  ((α2230',) -> α2232')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2230',) -> α2232')
//│ ╟── while constraining:  α1908'  <!<  ((α2230',) -> α2232')
//│ ╟── while constraining:  {(α2235' -> α2234') where: α1908' <: ((α2230',) -> α2232')}  <!<  ((α2222',) -> α2224')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2222',) -> α2224')
//│ ╟── while constraining:  α1908'  <!<  ((α2222',) -> α2224')
//│ ╟── while constraining:  {(α2227' -> α2226') where: α1908' <: ((α2222',) -> α2224')}  <!<  ((α2214',) -> α2216')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2214',) -> α2216')
//│ ╟── while constraining:  α1908'  <!<  ((α2214',) -> α2216')
//│ ╟── while constraining:  {(α2219' -> α2218') where: α1908' <: ((α2214',) -> α2216')}  <!<  ((α2206',) -> α2208')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2206',) -> α2208')
//│ ╟── while constraining:  α1908'  <!<  ((α2206',) -> α2208')
//│ ╟── while constraining:  {(α2211' -> α2210') where: α1908' <: ((α2206',) -> α2208')}  <!<  ((α2198',) -> α2200')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2198',) -> α2200')
//│ ╟── while constraining:  α1908'  <!<  ((α2198',) -> α2200')
//│ ╟── while constraining:  {(α2203' -> α2202') where: α1908' <: ((α2198',) -> α2200')}  <!<  ((α2190',) -> α2192')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2190',) -> α2192')
//│ ╟── while constraining:  α1908'  <!<  ((α2190',) -> α2192')
//│ ╟── while constraining:  {(α2195' -> α2194') where: α1908' <: ((α2190',) -> α2192')}  <!<  ((α2182',) -> α2184')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2182',) -> α2184')
//│ ╟── while constraining:  α1908'  <!<  ((α2182',) -> α2184')
//│ ╟── while constraining:  {(α2187' -> α2186') where: α1908' <: ((α2182',) -> α2184')}  <!<  ((α2174',) -> α2176')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2174',) -> α2176')
//│ ╟── while constraining:  α1908'  <!<  ((α2174',) -> α2176')
//│ ╟── while constraining:  {(α2179' -> α2178') where: α1908' <: ((α2174',) -> α2176')}  <!<  ((α2166',) -> α2168')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2166',) -> α2168')
//│ ╟── while constraining:  α1908'  <!<  ((α2166',) -> α2168')
//│ ╟── while constraining:  {(α2171' -> α2170') where: α1908' <: ((α2166',) -> α2168')}  <!<  ((α2158',) -> α2160')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2158',) -> α2160')
//│ ╟── while constraining:  α1908'  <!<  ((α2158',) -> α2160')
//│ ╟── while constraining:  {(α2163' -> α2162') where: α1908' <: ((α2158',) -> α2160')}  <!<  ((α2150',) -> α2152')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2150',) -> α2152')
//│ ╟── while constraining:  α1908'  <!<  ((α2150',) -> α2152')
//│ ╟── while constraining:  {(α2155' -> α2154') where: α1908' <: ((α2150',) -> α2152')}  <!<  ((α2142',) -> α2144')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2142',) -> α2144')
//│ ╟── while constraining:  α1908'  <!<  ((α2142',) -> α2144')
//│ ╟── while constraining:  {(α2147' -> α2146') where: α1908' <: ((α2142',) -> α2144')}  <!<  ((α2134',) -> α2136')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2134',) -> α2136')
//│ ╟── while constraining:  α1908'  <!<  ((α2134',) -> α2136')
//│ ╟── while constraining:  {(α2139' -> α2138') where: α1908' <: ((α2134',) -> α2136')}  <!<  ((α2126',) -> α2128')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2126',) -> α2128')
//│ ╟── while constraining:  α1908'  <!<  ((α2126',) -> α2128')
//│ ╟── while constraining:  {(α2131' -> α2130') where: α1908' <: ((α2126',) -> α2128')}  <!<  ((α2118',) -> α2120')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2118',) -> α2120')
//│ ╟── while constraining:  α1908'  <!<  ((α2118',) -> α2120')
//│ ╟── while constraining:  {(α2123' -> α2122') where: α1908' <: ((α2118',) -> α2120')}  <!<  ((α2110',) -> α2112')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2110',) -> α2112')
//│ ╟── while constraining:  α1908'  <!<  ((α2110',) -> α2112')
//│ ╟── while constraining:  {(α2115' -> α2114') where: α1908' <: ((α2110',) -> α2112')}  <!<  ((α2102',) -> α2104')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2102',) -> α2104')
//│ ╟── while constraining:  α1908'  <!<  ((α2102',) -> α2104')
//│ ╟── while constraining:  {(α2107' -> α2106') where: α1908' <: ((α2102',) -> α2104')}  <!<  ((α2094',) -> α2096')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2094',) -> α2096')
//│ ╟── while constraining:  α1908'  <!<  ((α2094',) -> α2096')
//│ ╟── while constraining:  {(α2099' -> α2098') where: α1908' <: ((α2094',) -> α2096')}  <!<  ((α2086',) -> α2088')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2086',) -> α2088')
//│ ╟── while constraining:  α1908'  <!<  ((α2086',) -> α2088')
//│ ╟── while constraining:  {(α2091' -> α2090') where: α1908' <: ((α2086',) -> α2088')}  <!<  ((α2078',) -> α2080')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2078',) -> α2080')
//│ ╟── while constraining:  α1908'  <!<  ((α2078',) -> α2080')
//│ ╟── while constraining:  {(α2083' -> α2082') where: α1908' <: ((α2078',) -> α2080')}  <!<  ((α2070',) -> α2072')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2070',) -> α2072')
//│ ╟── while constraining:  α1908'  <!<  ((α2070',) -> α2072')
//│ ╟── while constraining:  {(α2075' -> α2074') where: α1908' <: ((α2070',) -> α2072')}  <!<  ((α2062',) -> α2064')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2062',) -> α2064')
//│ ╟── while constraining:  α1908'  <!<  ((α2062',) -> α2064')
//│ ╟── while constraining:  {(α2067' -> α2066') where: α1908' <: ((α2062',) -> α2064')}  <!<  ((α2054',) -> α2056')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2054',) -> α2056')
//│ ╟── while constraining:  α1908'  <!<  ((α2054',) -> α2056')
//│ ╟── while constraining:  {(α2059' -> α2058') where: α1908' <: ((α2054',) -> α2056')}  <!<  ((α2046',) -> α2048')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2046',) -> α2048')
//│ ╟── while constraining:  α1908'  <!<  ((α2046',) -> α2048')
//│ ╟── while constraining:  {(α2051' -> α2050') where: α1908' <: ((α2046',) -> α2048')}  <!<  ((α2038',) -> α2040')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2038',) -> α2040')
//│ ╟── while constraining:  α1908'  <!<  ((α2038',) -> α2040')
//│ ╟── while constraining:  {(α2043' -> α2042') where: α1908' <: ((α2038',) -> α2040')}  <!<  ((α2030',) -> α2032')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2030',) -> α2032')
//│ ╟── while constraining:  α1908'  <!<  ((α2030',) -> α2032')
//│ ╟── while constraining:  {(α2035' -> α2034') where: α1908' <: ((α2030',) -> α2032')}  <!<  ((α2022',) -> α2024')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2022',) -> α2024')
//│ ╟── while constraining:  α1908'  <!<  ((α2022',) -> α2024')
//│ ╟── while constraining:  {(α2027' -> α2026') where: α1908' <: ((α2022',) -> α2024')}  <!<  ((α2014',) -> α2016')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2014',) -> α2016')
//│ ╟── while constraining:  α1908'  <!<  ((α2014',) -> α2016')
//│ ╟── while constraining:  {(α2019' -> α2018') where: α1908' <: ((α2014',) -> α2016')}  <!<  ((α2006',) -> α2008')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α2006',) -> α2008')
//│ ╟── while constraining:  α1908'  <!<  ((α2006',) -> α2008')
//│ ╟── while constraining:  {(α2011' -> α2010') where: α1908' <: ((α2006',) -> α2008')}  <!<  ((α1998',) -> α2000')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α1998',) -> α2000')
//│ ╟── while constraining:  α1908'  <!<  ((α1998',) -> α2000')
//│ ╟── while constraining:  {(α2003' -> α2002') where: α1908' <: ((α1998',) -> α2000')}  <!<  ((α1990',) -> α1992')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α1990',) -> α1992')
//│ ╟── while constraining:  α1908'  <!<  ((α1990',) -> α1992')
//│ ╟── while constraining:  {(α1995' -> α1994') where: α1908' <: ((α1990',) -> α1992')}  <!<  ((α1982',) -> α1984')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α1982',) -> α1984')
//│ ╟── while constraining:  α1908'  <!<  ((α1982',) -> α1984')
//│ ╟── while constraining:  {(α1987' -> α1986') where: α1908' <: ((α1982',) -> α1984')}  <!<  ((α1974',) -> α1976')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α1974',) -> α1976')
//│ ╟── while constraining:  α1908'  <!<  ((α1974',) -> α1976')
//│ ╟── while constraining:  {(α1979' -> α1978') where: α1908' <: ((α1974',) -> α1976')}  <!<  ((α1966',) -> α1968')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α1966',) -> α1968')
//│ ╟── while constraining:  α1908'  <!<  ((α1966',) -> α1968')
//│ ╟── while constraining:  {(α1971' -> α1970') where: α1908' <: ((α1966',) -> α1968')}  <!<  ((α1958',) -> α1960')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α1958',) -> α1960')
//│ ╟── while constraining:  α1908'  <!<  ((α1958',) -> α1960')
//│ ╟── while constraining:  {(α1963' -> α1962') where: α1908' <: ((α1958',) -> α1960')}  <!<  ((α1950',) -> α1952')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α1950',) -> α1952')
//│ ╟── while constraining:  α1908'  <!<  ((α1950',) -> α1952')
//│ ╟── while constraining:  {(α1955' -> α1954') where: α1908' <: ((α1950',) -> α1952')}  <!<  ((α1942',) -> α1944')
//│ ╟── while constraining:  ‹∀ 2. {(α1914''' -> α1913''') where: α1908' <: ((α1909''',) -> α1911''')}›  <!<  ((α1942',) -> α1944')
//│ ╟── while constraining:  α1908'  <!<  ((α1942',) -> α1944')
//│ ╟── while constraining:  {(α1947' -> α1946') where: α1908' <: ((α1942',) -> α1944')}  <!<  ((‹∀ 0. α1837'›,) -> α1941')
//│ ╟── while constraining:  ‹∀ 2. {(α1934''' -> α1933''') where: α1908' <: ((α1929''',) -> α1931''')}›  <!<  ((‹∀ 0. α1837'›,) -> α1941')
//│ ╙── while constraining:  α1897'  <!<  ((‹∀ 0. α1837'›,) -> α1941')
//│ test1: error

// let test2 = listiter (fun ex -> ex (fun t -> 
//   let arg1 = fst t
//   and arg2 = fst (snd t)
//   and eqf  = snd (snd t) in
//   let areequal = eqf arg1 arg2
//   in print_bool areequal )) ex_list2
// ;;
:e
:ng
test2 = listiter (fun ex -> ex (fun t ->
  let arg1 = t._1 in
  let arg2 = t._2 in
  let eqf = t._3 in
  let areequal = eqf arg1 arg2 in
  print_bool areequal )) ex_list2
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?c, ?d, ?e, ?b. ?d) -> ?f` exceeded recursion depth limit (400)
//│ ║  l.978: 	test2 = listiter (fun ex -> ex (fun t ->
//│ ║         	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.979: 	  let arg1 = t._1 in
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.980: 	  let arg2 = t._2 in
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.981: 	  let eqf = t._3 in
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ║  l.982: 	  let areequal = eqf arg1 arg2 in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.983: 	  print_bool areequal )) ex_list2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  {(α3300' -> α3299') where: α2629' <: ((α3295',) -> α3297')}  <!<  ((α3287',) -> α3289')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3287',) -> α3289')
//│ ╟── while constraining:  α2629'  <!<  ((α3287',) -> α3289')
//│ ╟── while constraining:  {(α3292' -> α3291') where: α2629' <: ((α3287',) -> α3289')}  <!<  ((α3279',) -> α3281')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3279',) -> α3281')
//│ ╟── while constraining:  α2629'  <!<  ((α3279',) -> α3281')
//│ ╟── while constraining:  {(α3284' -> α3283') where: α2629' <: ((α3279',) -> α3281')}  <!<  ((α3271',) -> α3273')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3271',) -> α3273')
//│ ╟── while constraining:  α2629'  <!<  ((α3271',) -> α3273')
//│ ╟── while constraining:  {(α3276' -> α3275') where: α2629' <: ((α3271',) -> α3273')}  <!<  ((α3263',) -> α3265')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3263',) -> α3265')
//│ ╟── while constraining:  α2629'  <!<  ((α3263',) -> α3265')
//│ ╟── while constraining:  {(α3268' -> α3267') where: α2629' <: ((α3263',) -> α3265')}  <!<  ((α3255',) -> α3257')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3255',) -> α3257')
//│ ╟── while constraining:  α2629'  <!<  ((α3255',) -> α3257')
//│ ╟── while constraining:  {(α3260' -> α3259') where: α2629' <: ((α3255',) -> α3257')}  <!<  ((α3247',) -> α3249')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3247',) -> α3249')
//│ ╟── while constraining:  α2629'  <!<  ((α3247',) -> α3249')
//│ ╟── while constraining:  {(α3252' -> α3251') where: α2629' <: ((α3247',) -> α3249')}  <!<  ((α3239',) -> α3241')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3239',) -> α3241')
//│ ╟── while constraining:  α2629'  <!<  ((α3239',) -> α3241')
//│ ╟── while constraining:  {(α3244' -> α3243') where: α2629' <: ((α3239',) -> α3241')}  <!<  ((α3231',) -> α3233')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3231',) -> α3233')
//│ ╟── while constraining:  α2629'  <!<  ((α3231',) -> α3233')
//│ ╟── while constraining:  {(α3236' -> α3235') where: α2629' <: ((α3231',) -> α3233')}  <!<  ((α3223',) -> α3225')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3223',) -> α3225')
//│ ╟── while constraining:  α2629'  <!<  ((α3223',) -> α3225')
//│ ╟── while constraining:  {(α3228' -> α3227') where: α2629' <: ((α3223',) -> α3225')}  <!<  ((α3215',) -> α3217')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3215',) -> α3217')
//│ ╟── while constraining:  α2629'  <!<  ((α3215',) -> α3217')
//│ ╟── while constraining:  {(α3220' -> α3219') where: α2629' <: ((α3215',) -> α3217')}  <!<  ((α3207',) -> α3209')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3207',) -> α3209')
//│ ╟── while constraining:  α2629'  <!<  ((α3207',) -> α3209')
//│ ╟── while constraining:  {(α3212' -> α3211') where: α2629' <: ((α3207',) -> α3209')}  <!<  ((α3199',) -> α3201')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3199',) -> α3201')
//│ ╟── while constraining:  α2629'  <!<  ((α3199',) -> α3201')
//│ ╟── while constraining:  {(α3204' -> α3203') where: α2629' <: ((α3199',) -> α3201')}  <!<  ((α3191',) -> α3193')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3191',) -> α3193')
//│ ╟── while constraining:  α2629'  <!<  ((α3191',) -> α3193')
//│ ╟── while constraining:  {(α3196' -> α3195') where: α2629' <: ((α3191',) -> α3193')}  <!<  ((α3183',) -> α3185')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3183',) -> α3185')
//│ ╟── while constraining:  α2629'  <!<  ((α3183',) -> α3185')
//│ ╟── while constraining:  {(α3188' -> α3187') where: α2629' <: ((α3183',) -> α3185')}  <!<  ((α3175',) -> α3177')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3175',) -> α3177')
//│ ╟── while constraining:  α2629'  <!<  ((α3175',) -> α3177')
//│ ╟── while constraining:  {(α3180' -> α3179') where: α2629' <: ((α3175',) -> α3177')}  <!<  ((α3167',) -> α3169')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3167',) -> α3169')
//│ ╟── while constraining:  α2629'  <!<  ((α3167',) -> α3169')
//│ ╟── while constraining:  {(α3172' -> α3171') where: α2629' <: ((α3167',) -> α3169')}  <!<  ((α3159',) -> α3161')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3159',) -> α3161')
//│ ╟── while constraining:  α2629'  <!<  ((α3159',) -> α3161')
//│ ╟── while constraining:  {(α3164' -> α3163') where: α2629' <: ((α3159',) -> α3161')}  <!<  ((α3151',) -> α3153')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3151',) -> α3153')
//│ ╟── while constraining:  α2629'  <!<  ((α3151',) -> α3153')
//│ ╟── while constraining:  {(α3156' -> α3155') where: α2629' <: ((α3151',) -> α3153')}  <!<  ((α3143',) -> α3145')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3143',) -> α3145')
//│ ╟── while constraining:  α2629'  <!<  ((α3143',) -> α3145')
//│ ╟── while constraining:  {(α3148' -> α3147') where: α2629' <: ((α3143',) -> α3145')}  <!<  ((α3135',) -> α3137')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3135',) -> α3137')
//│ ╟── while constraining:  α2629'  <!<  ((α3135',) -> α3137')
//│ ╟── while constraining:  {(α3140' -> α3139') where: α2629' <: ((α3135',) -> α3137')}  <!<  ((α3127',) -> α3129')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3127',) -> α3129')
//│ ╟── while constraining:  α2629'  <!<  ((α3127',) -> α3129')
//│ ╟── while constraining:  {(α3132' -> α3131') where: α2629' <: ((α3127',) -> α3129')}  <!<  ((α3119',) -> α3121')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3119',) -> α3121')
//│ ╟── while constraining:  α2629'  <!<  ((α3119',) -> α3121')
//│ ╟── while constraining:  {(α3124' -> α3123') where: α2629' <: ((α3119',) -> α3121')}  <!<  ((α3111',) -> α3113')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3111',) -> α3113')
//│ ╟── while constraining:  α2629'  <!<  ((α3111',) -> α3113')
//│ ╟── while constraining:  {(α3116' -> α3115') where: α2629' <: ((α3111',) -> α3113')}  <!<  ((α3103',) -> α3105')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3103',) -> α3105')
//│ ╟── while constraining:  α2629'  <!<  ((α3103',) -> α3105')
//│ ╟── while constraining:  {(α3108' -> α3107') where: α2629' <: ((α3103',) -> α3105')}  <!<  ((α3095',) -> α3097')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3095',) -> α3097')
//│ ╟── while constraining:  α2629'  <!<  ((α3095',) -> α3097')
//│ ╟── while constraining:  {(α3100' -> α3099') where: α2629' <: ((α3095',) -> α3097')}  <!<  ((α3087',) -> α3089')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3087',) -> α3089')
//│ ╟── while constraining:  α2629'  <!<  ((α3087',) -> α3089')
//│ ╟── while constraining:  {(α3092' -> α3091') where: α2629' <: ((α3087',) -> α3089')}  <!<  ((α3079',) -> α3081')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3079',) -> α3081')
//│ ╟── while constraining:  α2629'  <!<  ((α3079',) -> α3081')
//│ ╟── while constraining:  {(α3084' -> α3083') where: α2629' <: ((α3079',) -> α3081')}  <!<  ((α3071',) -> α3073')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3071',) -> α3073')
//│ ╟── while constraining:  α2629'  <!<  ((α3071',) -> α3073')
//│ ╟── while constraining:  {(α3076' -> α3075') where: α2629' <: ((α3071',) -> α3073')}  <!<  ((α3063',) -> α3065')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3063',) -> α3065')
//│ ╟── while constraining:  α2629'  <!<  ((α3063',) -> α3065')
//│ ╟── while constraining:  {(α3068' -> α3067') where: α2629' <: ((α3063',) -> α3065')}  <!<  ((α3055',) -> α3057')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3055',) -> α3057')
//│ ╟── while constraining:  α2629'  <!<  ((α3055',) -> α3057')
//│ ╟── while constraining:  {(α3060' -> α3059') where: α2629' <: ((α3055',) -> α3057')}  <!<  ((α3047',) -> α3049')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3047',) -> α3049')
//│ ╟── while constraining:  α2629'  <!<  ((α3047',) -> α3049')
//│ ╟── while constraining:  {(α3052' -> α3051') where: α2629' <: ((α3047',) -> α3049')}  <!<  ((α3039',) -> α3041')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3039',) -> α3041')
//│ ╟── while constraining:  α2629'  <!<  ((α3039',) -> α3041')
//│ ╟── while constraining:  {(α3044' -> α3043') where: α2629' <: ((α3039',) -> α3041')}  <!<  ((α3031',) -> α3033')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3031',) -> α3033')
//│ ╟── while constraining:  α2629'  <!<  ((α3031',) -> α3033')
//│ ╟── while constraining:  {(α3036' -> α3035') where: α2629' <: ((α3031',) -> α3033')}  <!<  ((α3023',) -> α3025')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3023',) -> α3025')
//│ ╟── while constraining:  α2629'  <!<  ((α3023',) -> α3025')
//│ ╟── while constraining:  {(α3028' -> α3027') where: α2629' <: ((α3023',) -> α3025')}  <!<  ((α3015',) -> α3017')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3015',) -> α3017')
//│ ╟── while constraining:  α2629'  <!<  ((α3015',) -> α3017')
//│ ╟── while constraining:  {(α3020' -> α3019') where: α2629' <: ((α3015',) -> α3017')}  <!<  ((α3007',) -> α3009')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α3007',) -> α3009')
//│ ╟── while constraining:  α2629'  <!<  ((α3007',) -> α3009')
//│ ╟── while constraining:  {(α3012' -> α3011') where: α2629' <: ((α3007',) -> α3009')}  <!<  ((α2999',) -> α3001')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2999',) -> α3001')
//│ ╟── while constraining:  α2629'  <!<  ((α2999',) -> α3001')
//│ ╟── while constraining:  {(α3004' -> α3003') where: α2629' <: ((α2999',) -> α3001')}  <!<  ((α2991',) -> α2993')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2991',) -> α2993')
//│ ╟── while constraining:  α2629'  <!<  ((α2991',) -> α2993')
//│ ╟── while constraining:  {(α2996' -> α2995') where: α2629' <: ((α2991',) -> α2993')}  <!<  ((α2983',) -> α2985')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2983',) -> α2985')
//│ ╟── while constraining:  α2629'  <!<  ((α2983',) -> α2985')
//│ ╟── while constraining:  {(α2988' -> α2987') where: α2629' <: ((α2983',) -> α2985')}  <!<  ((α2975',) -> α2977')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2975',) -> α2977')
//│ ╟── while constraining:  α2629'  <!<  ((α2975',) -> α2977')
//│ ╟── while constraining:  {(α2980' -> α2979') where: α2629' <: ((α2975',) -> α2977')}  <!<  ((α2967',) -> α2969')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2967',) -> α2969')
//│ ╟── while constraining:  α2629'  <!<  ((α2967',) -> α2969')
//│ ╟── while constraining:  {(α2972' -> α2971') where: α2629' <: ((α2967',) -> α2969')}  <!<  ((α2959',) -> α2961')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2959',) -> α2961')
//│ ╟── while constraining:  α2629'  <!<  ((α2959',) -> α2961')
//│ ╟── while constraining:  {(α2964' -> α2963') where: α2629' <: ((α2959',) -> α2961')}  <!<  ((α2951',) -> α2953')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2951',) -> α2953')
//│ ╟── while constraining:  α2629'  <!<  ((α2951',) -> α2953')
//│ ╟── while constraining:  {(α2956' -> α2955') where: α2629' <: ((α2951',) -> α2953')}  <!<  ((α2943',) -> α2945')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2943',) -> α2945')
//│ ╟── while constraining:  α2629'  <!<  ((α2943',) -> α2945')
//│ ╟── while constraining:  {(α2948' -> α2947') where: α2629' <: ((α2943',) -> α2945')}  <!<  ((α2935',) -> α2937')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2935',) -> α2937')
//│ ╟── while constraining:  α2629'  <!<  ((α2935',) -> α2937')
//│ ╟── while constraining:  {(α2940' -> α2939') where: α2629' <: ((α2935',) -> α2937')}  <!<  ((α2927',) -> α2929')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2927',) -> α2929')
//│ ╟── while constraining:  α2629'  <!<  ((α2927',) -> α2929')
//│ ╟── while constraining:  {(α2932' -> α2931') where: α2629' <: ((α2927',) -> α2929')}  <!<  ((α2919',) -> α2921')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2919',) -> α2921')
//│ ╟── while constraining:  α2629'  <!<  ((α2919',) -> α2921')
//│ ╟── while constraining:  {(α2924' -> α2923') where: α2629' <: ((α2919',) -> α2921')}  <!<  ((α2911',) -> α2913')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2911',) -> α2913')
//│ ╟── while constraining:  α2629'  <!<  ((α2911',) -> α2913')
//│ ╟── while constraining:  {(α2916' -> α2915') where: α2629' <: ((α2911',) -> α2913')}  <!<  ((α2903',) -> α2905')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2903',) -> α2905')
//│ ╟── while constraining:  α2629'  <!<  ((α2903',) -> α2905')
//│ ╟── while constraining:  {(α2908' -> α2907') where: α2629' <: ((α2903',) -> α2905')}  <!<  ((α2895',) -> α2897')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2895',) -> α2897')
//│ ╟── while constraining:  α2629'  <!<  ((α2895',) -> α2897')
//│ ╟── while constraining:  {(α2900' -> α2899') where: α2629' <: ((α2895',) -> α2897')}  <!<  ((α2887',) -> α2889')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2887',) -> α2889')
//│ ╟── while constraining:  α2629'  <!<  ((α2887',) -> α2889')
//│ ╟── while constraining:  {(α2892' -> α2891') where: α2629' <: ((α2887',) -> α2889')}  <!<  ((α2879',) -> α2881')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2879',) -> α2881')
//│ ╟── while constraining:  α2629'  <!<  ((α2879',) -> α2881')
//│ ╟── while constraining:  {(α2884' -> α2883') where: α2629' <: ((α2879',) -> α2881')}  <!<  ((α2871',) -> α2873')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2871',) -> α2873')
//│ ╟── while constraining:  α2629'  <!<  ((α2871',) -> α2873')
//│ ╟── while constraining:  {(α2876' -> α2875') where: α2629' <: ((α2871',) -> α2873')}  <!<  ((α2863',) -> α2865')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2863',) -> α2865')
//│ ╟── while constraining:  α2629'  <!<  ((α2863',) -> α2865')
//│ ╟── while constraining:  {(α2868' -> α2867') where: α2629' <: ((α2863',) -> α2865')}  <!<  ((α2855',) -> α2857')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2855',) -> α2857')
//│ ╟── while constraining:  α2629'  <!<  ((α2855',) -> α2857')
//│ ╟── while constraining:  {(α2860' -> α2859') where: α2629' <: ((α2855',) -> α2857')}  <!<  ((α2847',) -> α2849')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2847',) -> α2849')
//│ ╟── while constraining:  α2629'  <!<  ((α2847',) -> α2849')
//│ ╟── while constraining:  {(α2852' -> α2851') where: α2629' <: ((α2847',) -> α2849')}  <!<  ((α2839',) -> α2841')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2839',) -> α2841')
//│ ╟── while constraining:  α2629'  <!<  ((α2839',) -> α2841')
//│ ╟── while constraining:  {(α2844' -> α2843') where: α2629' <: ((α2839',) -> α2841')}  <!<  ((α2831',) -> α2833')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2831',) -> α2833')
//│ ╟── while constraining:  α2629'  <!<  ((α2831',) -> α2833')
//│ ╟── while constraining:  {(α2836' -> α2835') where: α2629' <: ((α2831',) -> α2833')}  <!<  ((α2823',) -> α2825')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2823',) -> α2825')
//│ ╟── while constraining:  α2629'  <!<  ((α2823',) -> α2825')
//│ ╟── while constraining:  {(α2828' -> α2827') where: α2629' <: ((α2823',) -> α2825')}  <!<  ((α2815',) -> α2817')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2815',) -> α2817')
//│ ╟── while constraining:  α2629'  <!<  ((α2815',) -> α2817')
//│ ╟── while constraining:  {(α2820' -> α2819') where: α2629' <: ((α2815',) -> α2817')}  <!<  ((α2807',) -> α2809')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2807',) -> α2809')
//│ ╟── while constraining:  α2629'  <!<  ((α2807',) -> α2809')
//│ ╟── while constraining:  {(α2812' -> α2811') where: α2629' <: ((α2807',) -> α2809')}  <!<  ((α2799',) -> α2801')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2799',) -> α2801')
//│ ╟── while constraining:  α2629'  <!<  ((α2799',) -> α2801')
//│ ╟── while constraining:  {(α2804' -> α2803') where: α2629' <: ((α2799',) -> α2801')}  <!<  ((α2791',) -> α2793')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2791',) -> α2793')
//│ ╟── while constraining:  α2629'  <!<  ((α2791',) -> α2793')
//│ ╟── while constraining:  {(α2796' -> α2795') where: α2629' <: ((α2791',) -> α2793')}  <!<  ((α2783',) -> α2785')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2783',) -> α2785')
//│ ╟── while constraining:  α2629'  <!<  ((α2783',) -> α2785')
//│ ╟── while constraining:  {(α2788' -> α2787') where: α2629' <: ((α2783',) -> α2785')}  <!<  ((α2775',) -> α2777')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2775',) -> α2777')
//│ ╟── while constraining:  α2629'  <!<  ((α2775',) -> α2777')
//│ ╟── while constraining:  {(α2780' -> α2779') where: α2629' <: ((α2775',) -> α2777')}  <!<  ((α2767',) -> α2769')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2767',) -> α2769')
//│ ╟── while constraining:  α2629'  <!<  ((α2767',) -> α2769')
//│ ╟── while constraining:  {(α2772' -> α2771') where: α2629' <: ((α2767',) -> α2769')}  <!<  ((α2759',) -> α2761')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2759',) -> α2761')
//│ ╟── while constraining:  α2629'  <!<  ((α2759',) -> α2761')
//│ ╟── while constraining:  {(α2764' -> α2763') where: α2629' <: ((α2759',) -> α2761')}  <!<  ((α2751',) -> α2753')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2751',) -> α2753')
//│ ╟── while constraining:  α2629'  <!<  ((α2751',) -> α2753')
//│ ╟── while constraining:  {(α2756' -> α2755') where: α2629' <: ((α2751',) -> α2753')}  <!<  ((α2743',) -> α2745')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2743',) -> α2745')
//│ ╟── while constraining:  α2629'  <!<  ((α2743',) -> α2745')
//│ ╟── while constraining:  {(α2748' -> α2747') where: α2629' <: ((α2743',) -> α2745')}  <!<  ((α2735',) -> α2737')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2735',) -> α2737')
//│ ╟── while constraining:  α2629'  <!<  ((α2735',) -> α2737')
//│ ╟── while constraining:  {(α2740' -> α2739') where: α2629' <: ((α2735',) -> α2737')}  <!<  ((α2727',) -> α2729')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2727',) -> α2729')
//│ ╟── while constraining:  α2629'  <!<  ((α2727',) -> α2729')
//│ ╟── while constraining:  {(α2732' -> α2731') where: α2629' <: ((α2727',) -> α2729')}  <!<  ((α2719',) -> α2721')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2719',) -> α2721')
//│ ╟── while constraining:  α2629'  <!<  ((α2719',) -> α2721')
//│ ╟── while constraining:  {(α2724' -> α2723') where: α2629' <: ((α2719',) -> α2721')}  <!<  ((α2711',) -> α2713')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2711',) -> α2713')
//│ ╟── while constraining:  α2629'  <!<  ((α2711',) -> α2713')
//│ ╟── while constraining:  {(α2716' -> α2715') where: α2629' <: ((α2711',) -> α2713')}  <!<  ((α2703',) -> α2705')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2703',) -> α2705')
//│ ╟── while constraining:  α2629'  <!<  ((α2703',) -> α2705')
//│ ╟── while constraining:  {(α2708' -> α2707') where: α2629' <: ((α2703',) -> α2705')}  <!<  ((α2695',) -> α2697')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2695',) -> α2697')
//│ ╟── while constraining:  α2629'  <!<  ((α2695',) -> α2697')
//│ ╟── while constraining:  {(α2700' -> α2699') where: α2629' <: ((α2695',) -> α2697')}  <!<  ((α2687',) -> α2689')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2687',) -> α2689')
//│ ╟── while constraining:  α2629'  <!<  ((α2687',) -> α2689')
//│ ╟── while constraining:  {(α2692' -> α2691') where: α2629' <: ((α2687',) -> α2689')}  <!<  ((α2679',) -> α2681')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2679',) -> α2681')
//│ ╟── while constraining:  α2629'  <!<  ((α2679',) -> α2681')
//│ ╟── while constraining:  {(α2684' -> α2683') where: α2629' <: ((α2679',) -> α2681')}  <!<  ((α2671',) -> α2673')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2671',) -> α2673')
//│ ╟── while constraining:  α2629'  <!<  ((α2671',) -> α2673')
//│ ╟── while constraining:  {(α2676' -> α2675') where: α2629' <: ((α2671',) -> α2673')}  <!<  ((α2663',) -> α2665')
//│ ╟── while constraining:  ‹∀ 2. {(α2635''' -> α2634''') where: α2629' <: ((α2630''',) -> α2632''')}›  <!<  ((α2663',) -> α2665')
//│ ╟── while constraining:  α2629'  <!<  ((α2663',) -> α2665')
//│ ╟── while constraining:  {(α2668' -> α2667') where: α2629' <: ((α2663',) -> α2665')}  <!<  ((‹∀ 0. α1872'›,) -> α2662')
//│ ╟── while constraining:  ‹∀ 2. {(α2655''' -> α2654''') where: α2629' <: ((α2650''',) -> α2652''')}›  <!<  ((‹∀ 0. α1872'›,) -> α2662')
//│ ╙── while constraining:  α2618'  <!<  ((‹∀ 0. α1872'›,) -> α2662')
//│ test2: error


// (* Some examples for MLF inspired by standard encoding in System F. *)

// type Void   = ['x] 'x
// type Unit   = ['x] 'x -> 'x
// type Int    = ['x] ('x -> 'x) -> ('x -> 'x)
// type Bool   = ['x] (Unit -> 'x) -> (Unit -> 'x) -> 'x 
type Fvoid = forall 'a. 'a
type Funit = forall 'a. 'a -> 'a
type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
type Fbool = forall 'a. (Funit -> 'a) -> (Funit -> 'a) -> 'a
//│ Defined type alias Fvoid
//│ Defined type alias Funit
//│ Defined type alias Fint
//│ Defined type alias Fbool

// type Sum    = ['x] (Int -> 'x) -> (Int -> 'x) -> 'x
// type Pair   = ['x] (Int -> Int -> 'x) -> 'x
// type Triple = ['x] (Int -> Int -> Int -> 'x) -> 'x
type Sum    = forall 'a. (Fint -> 'a) -> (Fint -> 'a) -> 'a
type Pair   = forall 'a. (Fint -> Fint -> 'a) -> 'a
type Triple = forall 'a. (Fint -> Fint -> Fint -> 'a) -> 'a
//│ Defined type alias Sum
//│ Defined type alias Pair
//│ Defined type alias Triple

// (* Unit *)
// let c_unit = fun x -> x
def c_unit = fun x -> x
//│ c_unit: 'a -> 'a
//│       = [Function: c_unit]


// (* BOOLEANS, IFS, AND, OR, NOT. *)
// let c_true  = fun a b -> a c_unit
def c_true = fun a -> fun b -> a c_unit
//│ c_true: 'a -> ('a -> 'b
//│   where
//│     'a <: (forall 'c. 'c -> 'c) -> 'b)
//│       = [Function: c_true]

// let c_false = fun a b -> b c_unit
def c_false = fun a -> fun b -> b c_unit
//│ c_false: anything -> ((forall 'a. 'a -> 'a) -> 'b) -> 'b
//│        = [Function: c_false]

// let c_if (cond:Bool) c_then c_else = cond c_then c_else 
def c_if (cond: Fbool) c_then c_else = cond c_then c_else
def c_if' cond c_then c_else = cond c_then c_else
//│ c_if: Fbool -> (forall 'a. 'a -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'd <: 'a -> 'b -> 'c)))
//│     = [Function: c_if]
//│ c_if': 'a -> (forall 'b. 'b -> (forall 'b, 'c, 'd. ('c -> 'd
//│   where
//│     'a <: 'b -> 'c -> 'd)))
//│      = [Function: c_if]

// let c_and (a:Bool) (b:Bool) = c_if a (fun z -> b) (fun z -> c_false)
def c_and (a: Fbool) (b: Fbool) = c_if a (fun z -> b) (fun z -> c_false)
def c_and' a b = c_if a (fun z -> b) (fun z -> c_false)
//│ c_and: Fbool -> (Fbool -> 'a
//│   where
//│     'b <: (anything -> Fbool) -> (anything -> anything -> ((forall 'c. 'c -> 'c) -> 'd) -> 'd) -> 'a)
//│      = [Function: c_and]
//│ c_and': Fbool -> (forall 'a. ('a -> 'b
//│   where
//│     'c <: (anything -> 'a) -> (anything -> anything -> ((forall 'd. 'd -> 'd) -> 'e) -> 'e) -> 'b))
//│       = [Function: c_and]

// let c_or  (a:Bool) (b:Bool) = c_if a (fun z -> c_true) (fun z -> b)
def c_or (a: Fbool) (b: Fbool) = c_if a (fun z -> c_true) (fun z -> b)
def c_or' a b = c_if a (fun z -> c_true) (fun z -> b)
//│ c_or: Fbool -> (forall 'a. (Fbool -> 'b
//│   where
//│     'c <: ('a -> (forall 'a. 'a -> ('a -> 'd
//│   where
//│     'a <: (forall 'e. 'e -> 'e) -> 'd))) -> ('a -> Fbool) -> 'b))
//│     = [Function: c_or]
//│ c_or': Fbool -> (forall 'a. ('b -> 'c
//│   where
//│     'd <: ('a -> (forall 'a. 'a -> ('a -> 'e
//│   where
//│     'a <: (forall 'f. 'f -> 'f) -> 'e))) -> ('a -> 'b) -> 'c))
//│      = [Function: c_or]

// let c_not (a:Bool) = c_if a (fun z -> c_false) (fun z -> c_true)
def c_not (a: Fbool) = c_if a (fun z -> c_false) (fun z -> c_true)
def c_not' a = c_if a (fun z -> c_false) (fun z -> c_true)
//│ c_not: Fbool -> (forall 'a. 'a -> (((forall 'b. 'b -> 'b) -> 'c) -> 'c
//│   where
//│     'a <: (forall 'b. 'b -> 'b) -> 'c))
//│      = [Function: c_not]
//│ c_not': Fbool -> (forall 'a. 'a -> (((forall 'b. 'b -> 'b) -> 'c) -> 'c
//│   where
//│     'a <: (forall 'b. 'b -> 'b) -> 'c))
//│       = [Function: c_not]

// let c_or = (c_or : Bool -> Bool -> Bool)
def c_or2 = c_or : Fbool -> Fbool -> Fbool
def c_or2' = c_or' : Fbool -> Fbool -> Fbool
//│ c_or2: Fbool -> Fbool -> Fbool
//│      = [Function: c_or]
//│ c_or2': Fbool -> Fbool -> Fbool
//│       = [Function: c_or]


// (* CONSTRUCTORS FOR PAIRS ET TRIPLES. *)
// let c_pair x y   = fun f -> f x y
def c_pair x y = fun f -> f x y
//│ c_pair: 'a -> (forall 'b. 'b -> (forall 'c. ('a -> 'b -> 'c) -> 'c))
//│       = [Function: c_pair]

// let c_trip x y z = fun f -> f x y z
def c_trip x y z = fun f -> f x y z
//│ c_trip: 'a -> (forall 'b. 'b -> (forall 'c. 'c -> (forall 'd. ('a -> 'b -> 'c -> 'd) -> 'd)))
//│       = [Function: c_trip]


// (* PROJECTIONS FOR PRODUCTS. *)
// let c_1_2 (p:Pair) = p (fun x y -> x) 
def c_1_2 (p: Pair) = p (fun x -> fun y -> x)
def c_1_2' p = p (fun x -> fun y -> x)
//│ c_1_2: Pair -> Fint
//│      = [Function: c_1_2]
//│ c_1_2': ((forall 'a. 'a -> anything -> 'a) -> 'b) -> 'b
//│       = [Function: c_1_2]

// let c_2_2 (p:Pair) = p (fun x y -> y) 
def c_2_2 (t: Pair) = t (fun x -> fun y -> y)
def c_2_2' t = t (fun x -> fun y -> y)
//│ c_2_2: Pair -> Fint
//│      = [Function: c_2_2]
//│ c_2_2': ((anything -> (forall 'a. 'a -> 'a)) -> 'b) -> 'b
//│       = [Function: c_2_2]

// let c_1_3 (t:Triple) = t (fun x y z -> x)
def c_1_3 (t: Triple) = t (fun x -> fun y -> fun z -> x)
def c_1_3' t = t (fun x -> fun y -> fun z -> x)
//│ c_1_3: Triple -> Fint
//│      = [Function: c_1_3]
//│ c_1_3': ((forall 'a. 'a -> anything -> anything -> 'a) -> 'b) -> 'b
//│       = [Function: c_1_3]

// let c_2_3 (t:Triple) = t (fun x y z -> y) 
def c_2_3 (t: Triple) = t (fun x -> fun y -> fun z -> y)
def c_2_3' t = t (fun x -> fun y -> fun z -> y)
//│ c_2_3: Triple -> Fint
//│      = [Function: c_2_3]
//│ c_2_3': ((anything -> (forall 'a. 'a -> anything -> 'a)) -> 'b) -> 'b
//│       = [Function: c_2_3]

// let c_3_3 (t:Triple) = t (fun x y z -> z) 
def c_3_3 (t: Triple) = t (fun x -> fun y -> fun z -> z)
def c_3_3' t = t (fun x -> fun y -> fun z -> z)
//│ c_3_3: Triple -> Fint
//│      = [Function: c_3_3]
//│ c_3_3': ((anything -> anything -> (forall 'a. 'a -> 'a)) -> 'b) -> 'b
//│       = [Function: c_3_3]


// (* CONSTRUCTOR FOR A BINARY SUM. *)
// let c_sumg = fun x fg fd -> fg x
def c_sumg = fun x -> fun fg -> fun fd -> fg x
//│ c_sumg: 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'b <: 'a -> 'c)))
//│       = [Function: c_sumg]

// let c_sumd = fun x fg fd -> fd x
def c_sumd = fun x -> fun fg -> fun fd -> fd x
//│ c_sumd: 'a -> anything -> (forall 'b. ('a -> 'b) -> 'b)
//│       = [Function: c_sumd]


// (* CASE FOR A SUM. *)
// let c_case (s:Sum) g d = s g d
def c_case (s: Sum) g d = s g d
def c_case' s g d = s g d
//│ c_case: Sum -> (forall 'a. 'a -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'd <: 'a -> 'b -> 'c)))
//│       = [Function: c_case]
//│ c_case': 'a -> (forall 'b. 'b -> (forall 'b, 'c, 'd. ('c -> 'd
//│   where
//│     'a <: 'b -> 'c -> 'd)))
//│        = [Function: c_case]


// (* Integers. *)
// let c_i0 = fun f x ->   x
def c_i0 = fun f -> fun x -> x
//│ c_i0: anything -> (forall 'a. 'a -> 'a)
//│     = [Function: c_i0]

// let c_i1 = fun f x -> f x
def c_i1 = fun f -> fun x -> f x
//│ c_i1: 'a -> (forall 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c))
//│     = [Function: c_i1]

// let c_i2 = fun f x -> f (f x)
def c_i2 = fun f -> fun x -> f (f x)
//│ c_i2: 'a -> (forall 'b, 'c, 'd. ('b -> 'd
//│   where
//│     'a <: 'b -> 'c & 'c -> 'd))
//│     = [Function: c_i2]

// let c_succ (n:Int) = fun f x -> n f (f x)
def c_succ (n: Fint) = fun f -> fun x -> n f (f x)
def c_succ' n = fun f -> fun x -> n f (f x)
//│ c_succ: Fint -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd. ('d -> 'c
//│   where
//│     'e <: 'a -> 'b -> 'c
//│     'a <: 'd -> 'b)))
//│       = [Function: c_succ]
//│ c_succ': 'a -> (forall 'b. 'b -> (forall 'b, 'c, 'd, 'e. ('e -> 'd
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'e -> 'c)))
//│        = [Function: c_succ]

// let c_iszero (n:Int) = n (fun x -> c_false) c_true
def c_iszero (n: Fint) = n (fun x -> c_false) c_true
def c_iszero' n = n (fun x -> c_false) c_true
//│ c_iszero: Fint -> ((forall 'a. 'a -> 'a) -> ‘a & 'b) -> (((forall 'a. 'a -> 'a) -> 'c) -> 'c
//│   where
//│     'b <: (forall 'a. 'a -> 'a) -> 'c)
//│         = [Function: c_iszero]
//│ c_iszero': (('a -> 'a -> ((forall 'b. 'b -> 'b) -> 'c) -> 'c) -> (((forall 'b. 'b -> 'b) -> ‘a & 'a) -> ('a -> 'd
//│   where
//│     'a <: (forall 'b. 'b -> 'b) -> 'd)) -> 'e) -> 'e
//│          = [Function: c_iszero]

// let c_add n (m:Int) = m c_succ n
def c_add n (m: Fint) = m c_succ n
def c_add' n m = m c_succ' n
//│ c_add: (Fint & 'a) -> (Fint -> (forall 'b. 'b -> (forall 'b, 'c, 'd, 'e. ('e -> 'd
//│   where
//│     'f <: 'b -> 'c -> 'd
//│     'b <: 'e -> 'c)) | 'a)
//│   where
//│     'f <: (‘a -> ‘a) -> ‘a -> ‘a)
//│      = [Function: c_add]
//│ c_add': 'a -> ((forall 'b. 'b -> (forall 'c. 'c -> (forall 'c, 'd, 'e, 'f. ('f -> 'e
//│   where
//│     'b <: 'c -> 'd -> 'e
//│     'c <: 'f -> 'd)))) -> 'a -> 'g) -> 'g
//│       = [Function: c_add]

// let c_mul n (m:Int) = m (c_add n) c_i0
def c_mul m (n: Fint) = m (c_add n) c_i0
def c_mul' m n = m (c_add' n) c_i0
//│ c_mul: 'a -> (Fint -> 'b
//│   where
//│     'a <: (Fint -> (forall 'c. 'c -> (forall 'c, 'd, 'e, 'f. ('f -> 'e
//│   where
//│     'g <: 'c -> 'd -> 'e
//│     'c <: 'f -> 'd)) | Fint)
//│   where
//│     'h <: (‘a -> ‘a) -> ‘a -> ‘a) -> ('a -> (forall 'i. 'i -> 'i)) -> 'b)
//│      = [Function: c_mul]
//│ c_mul': 'a -> ('b -> 'c
//│   where
//│     'a <: (((forall 'd. 'd -> (forall 'e. 'e -> (forall 'e, 'f, 'g, 'h. ('h -> 'g
//│   where
//│     'd <: 'e -> 'f -> 'g
//│     'e <: 'h -> 'f)))) -> 'b -> 'i) -> 'i) -> ('d -> (forall 'j. 'j -> 'j)) -> 'c)
//│       = [Function: c_mul]

// let c_pow n (m:Int) = m (c_mul n) c_i1
def c_pow m (n: Fint) = m (c_mul n) c_i1
def c_pow' m n = m (c_mul' n) c_i1
//│ c_pow: 'a -> (Fint -> 'b
//│   where
//│     'a <: (Fint -> 'c
//│   where
//│     'd <: (Fint -> (forall 'e. 'e -> (forall 'e, 'f, 'g, 'h. ('h -> 'g
//│   where
//│     'i <: 'e -> 'f -> 'g
//│     'e <: 'h -> 'f)) | Fint)
//│   where
//│     'j <: (‘a -> ‘a) -> ‘a -> ‘a) -> ('k -> (forall 'l. 'l -> 'l)) -> 'c) -> (forall 'k. 'k -> (forall 'm, 'n. ('m -> 'n
//│   where
//│     'k <: 'm -> 'n))) -> 'b)
//│      = [Function: c_pow]
//│ c_pow': 'a -> ('b -> 'c
//│   where
//│     'a <: ('d -> 'e
//│   where
//│     'f <: (((forall 'g. 'g -> (forall 'h. 'h -> (forall 'h, 'i, 'j, 'k. ('k -> 'j
//│   where
//│     'g <: 'h -> 'i -> 'j
//│     'h <: 'k -> 'i)))) -> 'd -> 'l) -> 'l) -> ('b -> (forall 'm. 'm -> 'm)) -> 'e) -> (forall 'b. 'b -> (forall 'n, 'o. ('n -> 'o
//│   where
//│     'b <: 'n -> 'o))) -> 'c)
//│       = [Function: c_pow]


// let c_pred (n:Int) =
//    let s p = c_pair (c_2_2 p) (c_succ (c_2_2 p))
//   and z = c_pair c_i0 c_i0 in
//   c_1_2 (n s z)
def c_pred (n: Fint) =
  let s = fun p -> c_pair (c_2_2 p) (c_succ (c_2_2 p)) in
  let z = c_pair c_i0 c_i0 in
  c_1_2 (n s z)
def c_pred' n =
  let s = fun p -> c_pair (c_2_2' p) (c_succ' (c_2_2' p)) in
  let z = c_pair c_i0 c_i0 in
  c_1_2' (n s z)
//│ c_pred: Fint -> Fint
//│   where
//│     'a <: (‘a -> ‘a) -> ‘a -> ‘a
//│       = [Function: c_pred]
//│ c_pred': ((((anything -> (forall 'a. 'a -> 'a)) -> anything) -> (nothing -> (forall 'b. 'b -> (forall 'b, 'c, 'd, 'e. ('e -> 'd
//│   where
//│     'f <: 'b -> 'c -> 'd
//│     'b <: 'e -> 'c))) -> 'g) -> 'g) -> (((anything -> (forall 'h. 'h -> 'h)) -> (anything -> (forall 'h. 'h -> 'h)) -> 'i) -> 'i) -> (forall 'j. 'j -> anything -> 'j) -> 'k) -> 'k
//│        = [Function: c_pred]


// let c_printint (n:Int) = print_int (n (fun x -> x+1) 0); print " "
:ng
def c_printint (n: Fint) =
  let _ = print_int (n (fun x -> x + 1) 0) in
  print_string " "
def c_printint' n =
  let _ = print_int (n (fun x -> x + 1) 0) in
  print_string " "
//│ c_printint: Fint -> unit
//│ c_printint': ((int -> int) -> 0 -> int) -> unit

def c_printint2 (n: Fint) = toString (n (fun x -> x + 1) 0)
def c_printint2' n = toString (n (fun x -> x + 1) 0)
//│ c_printint2: Fint -> string
//│            = [Function: c_printint2]
//│ c_printint2': ((int -> int) -> 0 -> anything) -> string
//│             = [Function: c_printint2]

// let c_i2 = c_succ c_i1
def c_i2 = c_succ c_i1
def c_i2' = c_succ' c_i1
//│ c_i2: 'a -> (forall 'a, 'b, 'c, 'd. ('d -> 'c
//│   where
//│     'e <: 'a -> 'b -> 'c
//│     'a <: 'd -> 'b))
//│     = [Function (anonymous)]
//│ c_i2': 'a -> (forall 'a, 'b, 'c, 'd. ('d -> 'c
//│   where
//│     'e <: 'a -> 'b -> 'c
//│     'a <: 'd -> 'b))
//│      = [Function (anonymous)]

// let c_i3 = c_succ c_i2
def c_i3 = c_succ c_i2
def c_i3' = c_succ' c_i2
//│ c_i3: 'a -> (forall 'a, 'b, 'c, 'd. ('d -> 'c
//│   where
//│     'e <: 'a -> 'b -> 'c
//│     'a <: 'd -> 'b))
//│     = [Function (anonymous)]
//│ c_i3': 'a -> (forall 'a, 'b, 'c, 'd. ('d -> 'c
//│   where
//│     'e <: 'a -> 'b -> 'c
//│     'a <: 'd -> 'b))
//│      = [Function (anonymous)]

// let c_i4 = c_succ c_i3
def c_i4 = c_succ c_i3
def c_i4' = c_succ' c_i3
//│ c_i4: 'a -> (forall 'a, 'b, 'c, 'd. ('d -> 'c
//│   where
//│     'e <: 'a -> 'b -> 'c
//│     'a <: 'd -> 'b))
//│     = [Function (anonymous)]
//│ c_i4': 'a -> (forall 'a, 'b, 'c, 'd. ('d -> 'c
//│   where
//│     'e <: 'a -> 'b -> 'c
//│     'a <: 'd -> 'b))
//│      = [Function (anonymous)]


// (* Fails with value restriction. *)
// (* Passes with relaxed value restriction. *)
// let rec (to_church:int -> Int) n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1)) f x)
// FIXME: see to_church4 in ex_casparticuliers
def to_church: int -> Fint
rec def to_church n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church (n - 1)) f x)
//│ to_church: int -> Fint
//│          = <missing implementation>
//│ int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd. (('c & 'd) -> 'c
//│   where
//│     'a <: 'b -> 'c
//│     'e <: 'a -> 'd -> 'b)))
//│   <:  to_church:
//│ int -> Fint
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r, ?s, ?t, ?to_church, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1, ?i1, ?j1, ?k1, ?l1, ?m1, ?n1, ?o1, ?p1, ?q1, ?r1, ?s1, ?t1, ?u1, ?v1, ?w1, ?x1, ?y1, ?z1, ?a2, ?b2, ?c2, ?d2, ?e2, ?f2, ?g2, ?h2, ?i2, ?j2, ?k2, ?l2, ?m2, ?n2, ?o2, ?p2, ?q2, ?r2, ?s2, ?t2, ?u2, ?v2, ?w2, ?x2, ?y2, ?z2, ?a3, ?b3, ?c3, ?d3, ?e3, ?f3, ?g3, ?h3, ?i3, ?j3, ?k3, ?l3, ?m3, ?n3, ?o3, ?p3, ?q3, ?r3, ?s3, ?t3, ?u3, ?v3, ?w3, ?x3, ?y3, ?z3, ?a4, ?b4, ?c4, ?d4, ?e4, ?f4, ?g4, ?h4. ?to_church <: int -> Fint` exceeded recursion depth limit (400)
//│ ║  l.1630: 	rec def to_church n =
//│ ║          	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1631: 	  if n == 0 then fun f -> fun x -> x
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1632: 	  else fun f -> fun x -> f ((to_church (n - 1)) f x)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  α4774'  <!<  ((α5020',) -> α5021')
//│ ╟── while constraining:  α4790'  <!<  ((α5020',) -> α5021')
//│ ╟── while constraining:  α4806'  <!<  ((α5020',) -> α5021')
//│ ╟── while constraining:  α4822'  <!<  ((α5020',) -> α5021')
//│ ╟── while constraining:  α4838'  <!<  ((α5020',) -> α5021')
//│ ╟── while constraining:  α4854'  <!<  ((α5020',) -> α5021')
//│ ╟── while constraining:  α4870'  <!<  ((α5020',) -> α5021')
//│ ╟── while constraining:  α4886'  <!<  ((α5020',) -> α5021')
//│ ╟── while constraining:  α4902'  <!<  ((α5020',) -> α5021')
//│ ╟── while constraining:  α4918'  <!<  ((α5020',) -> α5021')
//│ ╟── while constraining:  α4934'  <!<  ((α5020',) -> α5021')
//│ ╟── while constraining:  α4950'  <!<  ((α5020',) -> α5021')
//│ ╟── while constraining:  α4966'  <!<  ((α5020',) -> α5021')
//│ ╟── while constraining:  α4982'  <!<  ((α5020',) -> α5021')
//│ ╟── while constraining:  α4998'  <!<  ((α5020',) -> α5021')
//│ ╟── while constraining:  α5014'  <!<  ((α5020',) -> α5021')
//│ ╟── while constraining:  α5014'  <!<  ((α5016'',) -> α5017'')
//│ ╟── while constraining:  {(α5019'' -> α5017'') where: α5014' <: ((α5016'',) -> α5017''), α4687' <: ((α5014',) -> α5018'')}  <!<  ((α5007',) -> α5008')
//│ ╟── while constraining:  ‹∀ 3. {(α5013'''' -> α5011'''') where: α5014' <: ((α5010'''',) -> α5011''''), α4687' <: ((α5014',) -> α5015'''')}›  <!<  ((α5007',) -> α5008')
//│ ╟── while constraining:  ‹∀ 3. {(α5013'''' -> α5011'''') where: α5014' <: ((α5010'''',) -> α5011''''), α4687' <: ((α5014',) -> α5015'''')}›  <!<  α5006'
//│ ╟── while constraining:  ‹∀ 3. {(α5013'''' -> α5011'''') where: α5009'' <: ((α5010'''',) -> α5011''''), α4687' <: ((α5009'',) -> α5012'''')}›  <!<  α5006'
//│ ╟── while constraining:  (α5009'' -> ‹∀ 3. {(α5013'''' -> α5011'''') where: α5009'' <: ((α5010'''',) -> α5011''''), α4687' <: ((α5009'',) -> α5012'''')}›)  <!<  ((α4998',) -> α5006')
//│ ╟── while constraining:  ‹∀ 2. (α4681''' -> ‹∀ 3. {(α4682'''' -> α4690'''') where: α4681''' <: ((α4689'''',) -> α4690''''), α4687' <: ((α4681''',) -> α4688'''')}›)›  <!<  ((α4998',) -> α5006')
//│ ╟── while constraining:  α4687'  <!<  ((α4998',) -> α5006')
//│ ╟── while constraining:  α4687'  <!<  ((α4998',) -> α5002'')
//│ ╟── while constraining:  {(α5003'' -> α5001'') where: α4998' <: ((α5000'',) -> α5001''), α4687' <: ((α4998',) -> α5002'')}  <!<  ((α4991',) -> α4992')
//│ ╟── while constraining:  ‹∀ 3. {(α4997'''' -> α4995'''') where: α4998' <: ((α4994'''',) -> α4995''''), α4687' <: ((α4998',) -> α4999'''')}›  <!<  ((α4991',) -> α4992')
//│ ╟── while constraining:  ‹∀ 3. {(α4997'''' -> α4995'''') where: α4998' <: ((α4994'''',) -> α4995''''), α4687' <: ((α4998',) -> α4999'''')}›  <!<  α4990'
//│ ╟── while constraining:  ‹∀ 3. {(α4997'''' -> α4995'''') where: α4993'' <: ((α4994'''',) -> α4995''''), α4687' <: ((α4993'',) -> α4996'''')}›  <!<  α4990'
//│ ╟── while constraining:  (α4993'' -> ‹∀ 3. {(α4997'''' -> α4995'''') where: α4993'' <: ((α4994'''',) -> α4995''''), α4687' <: ((α4993'',) -> α4996'''')}›)  <!<  ((α4982',) -> α4990')
//│ ╟── while constraining:  ‹∀ 2. (α4681''' -> ‹∀ 3. {(α4682'''' -> α4690'''') where: α4681''' <: ((α4689'''',) -> α4690''''), α4687' <: ((α4681''',) -> α4688'''')}›)›  <!<  ((α4982',) -> α4990')
//│ ╟── while constraining:  α4687'  <!<  ((α4982',) -> α4990')
//│ ╟── while constraining:  α4687'  <!<  ((α4982',) -> α4986'')
//│ ╟── while constraining:  {(α4987'' -> α4985'') where: α4982' <: ((α4984'',) -> α4985''), α4687' <: ((α4982',) -> α4986'')}  <!<  ((α4975',) -> α4976')
//│ ╟── while constraining:  ‹∀ 3. {(α4981'''' -> α4979'''') where: α4982' <: ((α4978'''',) -> α4979''''), α4687' <: ((α4982',) -> α4983'''')}›  <!<  ((α4975',) -> α4976')
//│ ╟── while constraining:  ‹∀ 3. {(α4981'''' -> α4979'''') where: α4982' <: ((α4978'''',) -> α4979''''), α4687' <: ((α4982',) -> α4983'''')}›  <!<  α4974'
//│ ╟── while constraining:  ‹∀ 3. {(α4981'''' -> α4979'''') where: α4977'' <: ((α4978'''',) -> α4979''''), α4687' <: ((α4977'',) -> α4980'''')}›  <!<  α4974'
//│ ╟── while constraining:  (α4977'' -> ‹∀ 3. {(α4981'''' -> α4979'''') where: α4977'' <: ((α4978'''',) -> α4979''''), α4687' <: ((α4977'',) -> α4980'''')}›)  <!<  ((α4966',) -> α4974')
//│ ╟── while constraining:  ‹∀ 2. (α4681''' -> ‹∀ 3. {(α4682'''' -> α4690'''') where: α4681''' <: ((α4689'''',) -> α4690''''), α4687' <: ((α4681''',) -> α4688'''')}›)›  <!<  ((α4966',) -> α4974')
//│ ╟── while constraining:  α4687'  <!<  ((α4966',) -> α4974')
//│ ╟── while constraining:  α4687'  <!<  ((α4966',) -> α4970'')
//│ ╟── while constraining:  {(α4971'' -> α4969'') where: α4966' <: ((α4968'',) -> α4969''), α4687' <: ((α4966',) -> α4970'')}  <!<  ((α4959',) -> α4960')
//│ ╟── while constraining:  ‹∀ 3. {(α4965'''' -> α4963'''') where: α4966' <: ((α4962'''',) -> α4963''''), α4687' <: ((α4966',) -> α4967'''')}›  <!<  ((α4959',) -> α4960')
//│ ╟── while constraining:  ‹∀ 3. {(α4965'''' -> α4963'''') where: α4966' <: ((α4962'''',) -> α4963''''), α4687' <: ((α4966',) -> α4967'''')}›  <!<  α4958'
//│ ╟── while constraining:  ‹∀ 3. {(α4965'''' -> α4963'''') where: α4961'' <: ((α4962'''',) -> α4963''''), α4687' <: ((α4961'',) -> α4964'''')}›  <!<  α4958'
//│ ╟── while constraining:  (α4961'' -> ‹∀ 3. {(α4965'''' -> α4963'''') where: α4961'' <: ((α4962'''',) -> α4963''''), α4687' <: ((α4961'',) -> α4964'''')}›)  <!<  ((α4950',) -> α4958')
//│ ╟── while constraining:  ‹∀ 2. (α4681''' -> ‹∀ 3. {(α4682'''' -> α4690'''') where: α4681''' <: ((α4689'''',) -> α4690''''), α4687' <: ((α4681''',) -> α4688'''')}›)›  <!<  ((α4950',) -> α4958')
//│ ╟── while constraining:  α4687'  <!<  ((α4950',) -> α4958')
//│ ╟── while constraining:  α4687'  <!<  ((α4950',) -> α4954'')
//│ ╟── while constraining:  {(α4955'' -> α4953'') where: α4950' <: ((α4952'',) -> α4953''), α4687' <: ((α4950',) -> α4954'')}  <!<  ((α4943',) -> α4944')
//│ ╟── while constraining:  ‹∀ 3. {(α4949'''' -> α4947'''') where: α4950' <: ((α4946'''',) -> α4947''''), α4687' <: ((α4950',) -> α4951'''')}›  <!<  ((α4943',) -> α4944')
//│ ╟── while constraining:  ‹∀ 3. {(α4949'''' -> α4947'''') where: α4950' <: ((α4946'''',) -> α4947''''), α4687' <: ((α4950',) -> α4951'''')}›  <!<  α4942'
//│ ╟── while constraining:  ‹∀ 3. {(α4949'''' -> α4947'''') where: α4945'' <: ((α4946'''',) -> α4947''''), α4687' <: ((α4945'',) -> α4948'''')}›  <!<  α4942'
//│ ╟── while constraining:  (α4945'' -> ‹∀ 3. {(α4949'''' -> α4947'''') where: α4945'' <: ((α4946'''',) -> α4947''''), α4687' <: ((α4945'',) -> α4948'''')}›)  <!<  ((α4934',) -> α4942')
//│ ╟── while constraining:  ‹∀ 2. (α4681''' -> ‹∀ 3. {(α4682'''' -> α4690'''') where: α4681''' <: ((α4689'''',) -> α4690''''), α4687' <: ((α4681''',) -> α4688'''')}›)›  <!<  ((α4934',) -> α4942')
//│ ╟── while constraining:  α4687'  <!<  ((α4934',) -> α4942')
//│ ╟── while constraining:  α4687'  <!<  ((α4934',) -> α4938'')
//│ ╟── while constraining:  {(α4939'' -> α4937'') where: α4934' <: ((α4936'',) -> α4937''), α4687' <: ((α4934',) -> α4938'')}  <!<  ((α4927',) -> α4928')
//│ ╟── while constraining:  ‹∀ 3. {(α4933'''' -> α4931'''') where: α4934' <: ((α4930'''',) -> α4931''''), α4687' <: ((α4934',) -> α4935'''')}›  <!<  ((α4927',) -> α4928')
//│ ╟── while constraining:  ‹∀ 3. {(α4933'''' -> α4931'''') where: α4934' <: ((α4930'''',) -> α4931''''), α4687' <: ((α4934',) -> α4935'''')}›  <!<  α4926'
//│ ╟── while constraining:  ‹∀ 3. {(α4933'''' -> α4931'''') where: α4929'' <: ((α4930'''',) -> α4931''''), α4687' <: ((α4929'',) -> α4932'''')}›  <!<  α4926'
//│ ╟── while constraining:  (α4929'' -> ‹∀ 3. {(α4933'''' -> α4931'''') where: α4929'' <: ((α4930'''',) -> α4931''''), α4687' <: ((α4929'',) -> α4932'''')}›)  <!<  ((α4918',) -> α4926')
//│ ╟── while constraining:  ‹∀ 2. (α4681''' -> ‹∀ 3. {(α4682'''' -> α4690'''') where: α4681''' <: ((α4689'''',) -> α4690''''), α4687' <: ((α4681''',) -> α4688'''')}›)›  <!<  ((α4918',) -> α4926')
//│ ╟── while constraining:  α4687'  <!<  ((α4918',) -> α4926')
//│ ╟── while constraining:  α4687'  <!<  ((α4918',) -> α4922'')
//│ ╟── while constraining:  {(α4923'' -> α4921'') where: α4918' <: ((α4920'',) -> α4921''), α4687' <: ((α4918',) -> α4922'')}  <!<  ((α4911',) -> α4912')
//│ ╟── while constraining:  ‹∀ 3. {(α4917'''' -> α4915'''') where: α4918' <: ((α4914'''',) -> α4915''''), α4687' <: ((α4918',) -> α4919'''')}›  <!<  ((α4911',) -> α4912')
//│ ╟── while constraining:  ‹∀ 3. {(α4917'''' -> α4915'''') where: α4918' <: ((α4914'''',) -> α4915''''), α4687' <: ((α4918',) -> α4919'''')}›  <!<  α4910'
//│ ╟── while constraining:  ‹∀ 3. {(α4917'''' -> α4915'''') where: α4913'' <: ((α4914'''',) -> α4915''''), α4687' <: ((α4913'',) -> α4916'''')}›  <!<  α4910'
//│ ╟── while constraining:  (α4913'' -> ‹∀ 3. {(α4917'''' -> α4915'''') where: α4913'' <: ((α4914'''',) -> α4915''''), α4687' <: ((α4913'',) -> α4916'''')}›)  <!<  ((α4902',) -> α4910')
//│ ╟── while constraining:  ‹∀ 2. (α4681''' -> ‹∀ 3. {(α4682'''' -> α4690'''') where: α4681''' <: ((α4689'''',) -> α4690''''), α4687' <: ((α4681''',) -> α4688'''')}›)›  <!<  ((α4902',) -> α4910')
//│ ╟── while constraining:  α4687'  <!<  ((α4902',) -> α4910')
//│ ╟── while constraining:  α4687'  <!<  ((α4902',) -> α4906'')
//│ ╟── while constraining:  {(α4907'' -> α4905'') where: α4902' <: ((α4904'',) -> α4905''), α4687' <: ((α4902',) -> α4906'')}  <!<  ((α4895',) -> α4896')
//│ ╟── while constraining:  ‹∀ 3. {(α4901'''' -> α4899'''') where: α4902' <: ((α4898'''',) -> α4899''''), α4687' <: ((α4902',) -> α4903'''')}›  <!<  ((α4895',) -> α4896')
//│ ╟── while constraining:  ‹∀ 3. {(α4901'''' -> α4899'''') where: α4902' <: ((α4898'''',) -> α4899''''), α4687' <: ((α4902',) -> α4903'''')}›  <!<  α4894'
//│ ╟── while constraining:  ‹∀ 3. {(α4901'''' -> α4899'''') where: α4897'' <: ((α4898'''',) -> α4899''''), α4687' <: ((α4897'',) -> α4900'''')}›  <!<  α4894'
//│ ╟── while constraining:  (α4897'' -> ‹∀ 3. {(α4901'''' -> α4899'''') where: α4897'' <: ((α4898'''',) -> α4899''''), α4687' <: ((α4897'',) -> α4900'''')}›)  <!<  ((α4886',) -> α4894')
//│ ╟── while constraining:  ‹∀ 2. (α4681''' -> ‹∀ 3. {(α4682'''' -> α4690'''') where: α4681''' <: ((α4689'''',) -> α4690''''), α4687' <: ((α4681''',) -> α4688'''')}›)›  <!<  ((α4886',) -> α4894')
//│ ╟── while constraining:  α4687'  <!<  ((α4886',) -> α4894')
//│ ╟── while constraining:  α4687'  <!<  ((α4886',) -> α4890'')
//│ ╟── while constraining:  {(α4891'' -> α4889'') where: α4886' <: ((α4888'',) -> α4889''), α4687' <: ((α4886',) -> α4890'')}  <!<  ((α4879',) -> α4880')
//│ ╟── while constraining:  ‹∀ 3. {(α4885'''' -> α4883'''') where: α4886' <: ((α4882'''',) -> α4883''''), α4687' <: ((α4886',) -> α4887'''')}›  <!<  ((α4879',) -> α4880')
//│ ╟── while constraining:  ‹∀ 3. {(α4885'''' -> α4883'''') where: α4886' <: ((α4882'''',) -> α4883''''), α4687' <: ((α4886',) -> α4887'''')}›  <!<  α4878'
//│ ╟── while constraining:  ‹∀ 3. {(α4885'''' -> α4883'''') where: α4881'' <: ((α4882'''',) -> α4883''''), α4687' <: ((α4881'',) -> α4884'''')}›  <!<  α4878'
//│ ╟── while constraining:  (α4881'' -> ‹∀ 3. {(α4885'''' -> α4883'''') where: α4881'' <: ((α4882'''',) -> α4883''''), α4687' <: ((α4881'',) -> α4884'''')}›)  <!<  ((α4870',) -> α4878')
//│ ╟── while constraining:  ‹∀ 2. (α4681''' -> ‹∀ 3. {(α4682'''' -> α4690'''') where: α4681''' <: ((α4689'''',) -> α4690''''), α4687' <: ((α4681''',) -> α4688'''')}›)›  <!<  ((α4870',) -> α4878')
//│ ╟── while constraining:  α4687'  <!<  ((α4870',) -> α4878')
//│ ╟── while constraining:  α4687'  <!<  ((α4870',) -> α4874'')
//│ ╟── while constraining:  {(α4875'' -> α4873'') where: α4870' <: ((α4872'',) -> α4873''), α4687' <: ((α4870',) -> α4874'')}  <!<  ((α4863',) -> α4864')
//│ ╟── while constraining:  ‹∀ 3. {(α4869'''' -> α4867'''') where: α4870' <: ((α4866'''',) -> α4867''''), α4687' <: ((α4870',) -> α4871'''')}›  <!<  ((α4863',) -> α4864')
//│ ╟── while constraining:  ‹∀ 3. {(α4869'''' -> α4867'''') where: α4870' <: ((α4866'''',) -> α4867''''), α4687' <: ((α4870',) -> α4871'''')}›  <!<  α4862'
//│ ╟── while constraining:  ‹∀ 3. {(α4869'''' -> α4867'''') where: α4865'' <: ((α4866'''',) -> α4867''''), α4687' <: ((α4865'',) -> α4868'''')}›  <!<  α4862'
//│ ╟── while constraining:  (α4865'' -> ‹∀ 3. {(α4869'''' -> α4867'''') where: α4865'' <: ((α4866'''',) -> α4867''''), α4687' <: ((α4865'',) -> α4868'''')}›)  <!<  ((α4854',) -> α4862')
//│ ╟── while constraining:  ‹∀ 2. (α4681''' -> ‹∀ 3. {(α4682'''' -> α4690'''') where: α4681''' <: ((α4689'''',) -> α4690''''), α4687' <: ((α4681''',) -> α4688'''')}›)›  <!<  ((α4854',) -> α4862')
//│ ╟── while constraining:  α4687'  <!<  ((α4854',) -> α4862')
//│ ╟── while constraining:  α4687'  <!<  ((α4854',) -> α4858'')
//│ ╟── while constraining:  {(α4859'' -> α4857'') where: α4854' <: ((α4856'',) -> α4857''), α4687' <: ((α4854',) -> α4858'')}  <!<  ((α4847',) -> α4848')
//│ ╟── while constraining:  ‹∀ 3. {(α4853'''' -> α4851'''') where: α4854' <: ((α4850'''',) -> α4851''''), α4687' <: ((α4854',) -> α4855'''')}›  <!<  ((α4847',) -> α4848')
//│ ╟── while constraining:  ‹∀ 3. {(α4853'''' -> α4851'''') where: α4854' <: ((α4850'''',) -> α4851''''), α4687' <: ((α4854',) -> α4855'''')}›  <!<  α4846'
//│ ╟── while constraining:  ‹∀ 3. {(α4853'''' -> α4851'''') where: α4849'' <: ((α4850'''',) -> α4851''''), α4687' <: ((α4849'',) -> α4852'''')}›  <!<  α4846'
//│ ╟── while constraining:  (α4849'' -> ‹∀ 3. {(α4853'''' -> α4851'''') where: α4849'' <: ((α4850'''',) -> α4851''''), α4687' <: ((α4849'',) -> α4852'''')}›)  <!<  ((α4838',) -> α4846')
//│ ╟── while constraining:  ‹∀ 2. (α4681''' -> ‹∀ 3. {(α4682'''' -> α4690'''') where: α4681''' <: ((α4689'''',) -> α4690''''), α4687' <: ((α4681''',) -> α4688'''')}›)›  <!<  ((α4838',) -> α4846')
//│ ╟── while constraining:  α4687'  <!<  ((α4838',) -> α4846')
//│ ╟── while constraining:  α4687'  <!<  ((α4838',) -> α4842'')
//│ ╟── while constraining:  {(α4843'' -> α4841'') where: α4838' <: ((α4840'',) -> α4841''), α4687' <: ((α4838',) -> α4842'')}  <!<  ((α4831',) -> α4832')
//│ ╟── while constraining:  ‹∀ 3. {(α4837'''' -> α4835'''') where: α4838' <: ((α4834'''',) -> α4835''''), α4687' <: ((α4838',) -> α4839'''')}›  <!<  ((α4831',) -> α4832')
//│ ╟── while constraining:  ‹∀ 3. {(α4837'''' -> α4835'''') where: α4838' <: ((α4834'''',) -> α4835''''), α4687' <: ((α4838',) -> α4839'''')}›  <!<  α4830'
//│ ╟── while constraining:  ‹∀ 3. {(α4837'''' -> α4835'''') where: α4833'' <: ((α4834'''',) -> α4835''''), α4687' <: ((α4833'',) -> α4836'''')}›  <!<  α4830'
//│ ╟── while constraining:  (α4833'' -> ‹∀ 3. {(α4837'''' -> α4835'''') where: α4833'' <: ((α4834'''',) -> α4835''''), α4687' <: ((α4833'',) -> α4836'''')}›)  <!<  ((α4822',) -> α4830')
//│ ╟── while constraining:  ‹∀ 2. (α4681''' -> ‹∀ 3. {(α4682'''' -> α4690'''') where: α4681''' <: ((α4689'''',) -> α4690''''), α4687' <: ((α4681''',) -> α4688'''')}›)›  <!<  ((α4822',) -> α4830')
//│ ╟── while constraining:  α4687'  <!<  ((α4822',) -> α4830')
//│ ╟── while constraining:  α4687'  <!<  ((α4822',) -> α4826'')
//│ ╟── while constraining:  {(α4827'' -> α4825'') where: α4822' <: ((α4824'',) -> α4825''), α4687' <: ((α4822',) -> α4826'')}  <!<  ((α4815',) -> α4816')
//│ ╟── while constraining:  ‹∀ 3. {(α4821'''' -> α4819'''') where: α4822' <: ((α4818'''',) -> α4819''''), α4687' <: ((α4822',) -> α4823'''')}›  <!<  ((α4815',) -> α4816')
//│ ╟── while constraining:  ‹∀ 3. {(α4821'''' -> α4819'''') where: α4822' <: ((α4818'''',) -> α4819''''), α4687' <: ((α4822',) -> α4823'''')}›  <!<  α4814'
//│ ╟── while constraining:  ‹∀ 3. {(α4821'''' -> α4819'''') where: α4817'' <: ((α4818'''',) -> α4819''''), α4687' <: ((α4817'',) -> α4820'''')}›  <!<  α4814'
//│ ╟── while constraining:  (α4817'' -> ‹∀ 3. {(α4821'''' -> α4819'''') where: α4817'' <: ((α4818'''',) -> α4819''''), α4687' <: ((α4817'',) -> α4820'''')}›)  <!<  ((α4806',) -> α4814')
//│ ╟── while constraining:  ‹∀ 2. (α4681''' -> ‹∀ 3. {(α4682'''' -> α4690'''') where: α4681''' <: ((α4689'''',) -> α4690''''), α4687' <: ((α4681''',) -> α4688'''')}›)›  <!<  ((α4806',) -> α4814')
//│ ╟── while constraining:  α4687'  <!<  ((α4806',) -> α4814')
//│ ╟── while constraining:  α4687'  <!<  ((α4806',) -> α4810'')
//│ ╟── while constraining:  {(α4811'' -> α4809'') where: α4806' <: ((α4808'',) -> α4809''), α4687' <: ((α4806',) -> α4810'')}  <!<  ((α4799',) -> α4800')
//│ ╟── while constraining:  ‹∀ 3. {(α4805'''' -> α4803'''') where: α4806' <: ((α4802'''',) -> α4803''''), α4687' <: ((α4806',) -> α4807'''')}›  <!<  ((α4799',) -> α4800')
//│ ╟── while constraining:  ‹∀ 3. {(α4805'''' -> α4803'''') where: α4806' <: ((α4802'''',) -> α4803''''), α4687' <: ((α4806',) -> α4807'''')}›  <!<  α4798'
//│ ╟── while constraining:  ‹∀ 3. {(α4805'''' -> α4803'''') where: α4801'' <: ((α4802'''',) -> α4803''''), α4687' <: ((α4801'',) -> α4804'''')}›  <!<  α4798'
//│ ╟── while constraining:  (α4801'' -> ‹∀ 3. {(α4805'''' -> α4803'''') where: α4801'' <: ((α4802'''',) -> α4803''''), α4687' <: ((α4801'',) -> α4804'''')}›)  <!<  ((α4790',) -> α4798')
//│ ╟── while constraining:  ‹∀ 2. (α4681''' -> ‹∀ 3. {(α4682'''' -> α4690'''') where: α4681''' <: ((α4689'''',) -> α4690''''), α4687' <: ((α4681''',) -> α4688'''')}›)›  <!<  ((α4790',) -> α4798')
//│ ╟── while constraining:  α4687'  <!<  ((α4790',) -> α4798')
//│ ╟── while constraining:  α4687'  <!<  ((α4790',) -> α4794'')
//│ ╟── while constraining:  {(α4795'' -> α4793'') where: α4790' <: ((α4792'',) -> α4793''), α4687' <: ((α4790',) -> α4794'')}  <!<  ((α4783',) -> α4784')
//│ ╟── while constraining:  ‹∀ 3. {(α4789'''' -> α4787'''') where: α4790' <: ((α4786'''',) -> α4787''''), α4687' <: ((α4790',) -> α4791'''')}›  <!<  ((α4783',) -> α4784')
//│ ╟── while constraining:  ‹∀ 3. {(α4789'''' -> α4787'''') where: α4790' <: ((α4786'''',) -> α4787''''), α4687' <: ((α4790',) -> α4791'''')}›  <!<  α4782'
//│ ╟── while constraining:  ‹∀ 3. {(α4789'''' -> α4787'''') where: α4785'' <: ((α4786'''',) -> α4787''''), α4687' <: ((α4785'',) -> α4788'''')}›  <!<  α4782'
//│ ╟── while constraining:  (α4785'' -> ‹∀ 3. {(α4789'''' -> α4787'''') where: α4785'' <: ((α4786'''',) -> α4787''''), α4687' <: ((α4785'',) -> α4788'''')}›)  <!<  ((α4774',) -> α4782')
//│ ╟── while constraining:  ‹∀ 2. (α4681''' -> ‹∀ 3. {(α4682'''' -> α4690'''') where: α4681''' <: ((α4689'''',) -> α4690''''), α4687' <: ((α4681''',) -> α4688'''')}›)›  <!<  ((α4774',) -> α4782')
//│ ╟── while constraining:  α4687'  <!<  ((α4774',) -> α4782')
//│ ╟── while constraining:  α4687'  <!<  ((α4774',) -> α4778'')
//│ ╟── while constraining:  {(α4779'' -> α4777'') where: α4774' <: ((α4776'',) -> α4777''), α4687' <: ((α4774',) -> α4778'')}  <!<  ((α4767',) -> α4768')
//│ ╟── while constraining:  ‹∀ 3. {(α4773'''' -> α4771'''') where: α4774' <: ((α4770'''',) -> α4771''''), α4687' <: ((α4774',) -> α4775'''')}›  <!<  ((α4767',) -> α4768')
//│ ╟── while constraining:  ‹∀ 3. {(α4773'''' -> α4771'''') where: α4774' <: ((α4770'''',) -> α4771''''), α4687' <: ((α4774',) -> α4775'''')}›  <!<  α4766'
//│ ╟── while constraining:  ‹∀ 3. {(α4773'''' -> α4771'''') where: α4769'' <: ((α4770'''',) -> α4771''''), α4687' <: ((α4769'',) -> α4772'''')}›  <!<  α4766'
//│ ╟── while constraining:  (α4769'' -> ‹∀ 3. {(α4773'''' -> α4771'''') where: α4769'' <: ((α4770'''',) -> α4771''''), α4687' <: ((α4769'',) -> α4772'''')}›)  <!<  ((α4758',) -> α4766')
//│ ╟── while constraining:  ‹∀ 2. (α4681''' -> ‹∀ 3. {(α4682'''' -> α4690'''') where: α4681''' <: ((α4689'''',) -> α4690''''), α4687' <: ((α4681''',) -> α4688'''')}›)›  <!<  ((α4758',) -> α4766')
//│ ╟── while constraining:  α4687'  <!<  ((α4758',) -> α4766')
//│ ╟── while constraining:  α4687'  <!<  ((α4758',) -> α4762'')
//│ ╟── while constraining:  {(α4763'' -> α4761'') where: α4758' <: ((α4760'',) -> α4761''), α4687' <: ((α4758',) -> α4762'')}  <!<  ((α4751',) -> α4752')
//│ ╟── while constraining:  ‹∀ 3. {(α4757'''' -> α4755'''') where: α4758' <: ((α4754'''',) -> α4755''''), α4687' <: ((α4758',) -> α4759'''')}›  <!<  ((α4751',) -> α4752')
//│ ╟── while constraining:  ‹∀ 3. {(α4757'''' -> α4755'''') where: α4758' <: ((α4754'''',) -> α4755''''), α4687' <: ((α4758',) -> α4759'''')}›  <!<  α4750'
//│ ╟── while constraining:  ‹∀ 3. {(α4757'''' -> α4755'''') where: α4753'' <: ((α4754'''',) -> α4755''''), α4687' <: ((α4753'',) -> α4756'''')}›  <!<  α4750'
//│ ╟── while constraining:  (α4753'' -> ‹∀ 3. {(α4757'''' -> α4755'''') where: α4753'' <: ((α4754'''',) -> α4755''''), α4687' <: ((α4753'',) -> α4756'''')}›)  <!<  ((α4742',) -> α4750')
//│ ╟── while constraining:  ‹∀ 2. (α4681''' -> ‹∀ 3. {(α4682'''' -> α4690'''') where: α4681''' <: ((α4689'''',) -> α4690''''), α4687' <: ((α4681''',) -> α4688'''')}›)›  <!<  ((α4742',) -> α4750')
//│ ╟── while constraining:  α4687'  <!<  ((α4742',) -> α4750')
//│ ╟── while constraining:  α4687'  <!<  ((α4742',) -> α4746'')
//│ ╟── while constraining:  {(α4747'' -> α4745'') where: α4742' <: ((α4744'',) -> α4745''), α4687' <: ((α4742',) -> α4746'')}  <!<  ((α4735',) -> α4736')
//│ ╟── while constraining:  ‹∀ 3. {(α4741'''' -> α4739'''') where: α4742' <: ((α4738'''',) -> α4739''''), α4687' <: ((α4742',) -> α4743'''')}›  <!<  ((α4735',) -> α4736')
//│ ╟── while constraining:  ‹∀ 3. {(α4741'''' -> α4739'''') where: α4742' <: ((α4738'''',) -> α4739''''), α4687' <: ((α4742',) -> α4743'''')}›  <!<  α4734'
//│ ╟── while constraining:  ‹∀ 3. {(α4741'''' -> α4739'''') where: α4737'' <: ((α4738'''',) -> α4739''''), α4687' <: ((α4737'',) -> α4740'''')}›  <!<  α4734'
//│ ╟── while constraining:  (α4737'' -> ‹∀ 3. {(α4741'''' -> α4739'''') where: α4737'' <: ((α4738'''',) -> α4739''''), α4687' <: ((α4737'',) -> α4740'''')}›)  <!<  ((α4733',) -> α4734')
//│ ╟── while constraining:  ‹∀ 2. (α4681''' -> ‹∀ 3. {(α4682'''' -> α4690'''') where: α4681''' <: ((α4689'''',) -> α4690''''), α4687' <: ((α4681''',) -> α4688'''')}›)›  <!<  ((α4733',) -> α4734')
//│ ╟── while constraining:  α4687'  <!<  ((α4733',) -> α4734')
//│ ╟── while constraining:  α4687'  <!<  ((α4724'',) -> α4731'')
//│ ╟── while constraining:  {(α4732'' -> α4730'') where: α4724'' <: ((α4729'',) -> α4730''), α4687' <: ((α4724'',) -> α4731'')}  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  ‹∀ 3. {(α4728'''' -> α4726'''') where: α4724'' <: ((α4725'''',) -> α4726''''), α4687' <: ((α4724'',) -> α4727'''')}›  <!<  (‘a'' -> ‘a'')
//│ ╟── while constraining:  (α4724'' -> ‹∀ 3. {(α4728'''' -> α4726'''') where: α4724'' <: ((α4725'''',) -> α4726''''), α4687' <: ((α4724'',) -> α4727'''')}›)  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 2. (α4681''' -> ‹∀ 3. {(α4682'''' -> α4690'''') where: α4681''' <: ((α4689'''',) -> α4690''''), α4687' <: ((α4681''',) -> α4688'''')}›)›  <!<  ((‘a'' -> ‘a'') -> (‘a'' -> ‘a''))
//│ ╟── while constraining:  ‹∀ 2. (α4681''' -> ‹∀ 3. {(α4682'''' -> α4690'''') where: α4681''' <: ((α4689'''',) -> α4690''''), α4687' <: ((α4681''',) -> α4688'''')}›)›  <!<  ‹∀ 0. (('a3332' -> 'a3332') -> ('a3332' -> 'a3332'))›
//│ ╟── while constraining:  ‹∀ 2. (α4681''' -> ‹∀ 3. {(α4682'''' -> α4690'''') where: α4681''' <: ((α4689'''',) -> α4690''''), α4687' <: ((α4681''',) -> α4688'''')}›)›  <!<  Fint
//│ ╟── while constraining:  α4721'  <!<  Fint
//│ ╟── while constraining:  (α4720' -> α4721')  <!<  (Int -> Fint)
//│ ╟── while constraining:  ‹∀ 1. (α4673'' -> α4691'')›  <!<  (Int -> Fint)
//│ ╟── while constraining:  to_church4716'  <!<  (Int -> Fint)
//│ ╟── while constraining:  ‹∀ 0. to_church4672'›  <!<  (Int -> Fint)
//│ ╙── while constraining:  ‹∀ 0. to_church4672'›  <!<  ‹∀ 0. (Int -> Fint)›
//│          = [Function: to_church]


// let rec to_church n =
//   if n = 0 then fun f x -> x
//   else fun f x -> f ((to_church (n-1)) f x)
rec def to_church' n =
  if n == 0 then fun f -> fun x -> x
  else fun f -> fun x -> f ((to_church (n - 1)) f x)
//│ to_church': int -> (forall 'b. 'b -> (forall 'a, 'c. (('c & 'a) -> 'c
//│   where
//│     'b <: 'a -> 'a & 'a -> 'c)))
//│           = [Function: to_church]


// let rec c_fact (n:Int) =
//   c_if (c_iszero n) (fun (u:Unit) -> c_i1)
//     (fun (u:Unit) -> c_mul n (c_fact (c_pred n)))
rec def c_fact (n: Fint) =
  c_if (c_iszero n) (fun (u: Funit) -> c_i1)
    (fun (u: Funit) -> c_mul n (c_fact (c_pred n)))
rec def c_fact' n =
  c_if' (c_iszero' n) (fun _ -> c_i1)
    (fun _ -> c_mul' n (c_fact' (c_pred' n)))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1840: 	  c_if (c_iszero n) (fun (u: Funit) -> c_i1)
//│ ║          	  ^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a` is not an instance of type `'a`
//│ ║  l.1249: 	type Fbool = forall 'a. (Funit -> 'a) -> (Funit -> 'a) -> 'a
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1249: 	type Fbool = forall 'a. (Funit -> 'a) -> (Funit -> 'a) -> 'a
//│ ║          	                    ^^
//│ ╟── from application:
//│ ║  l.1274: 	def c_true = fun a -> fun b -> a c_unit
//│ ╙──        	                               ^^^^^^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.1839: 	rec def c_fact (n: Fint) =
//│ ║          	               ^^^^^^^^^^^
//│ ║  l.1840: 	  c_if (c_iszero n) (fun (u: Funit) -> c_i1)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1841: 	    (fun (u: Funit) -> c_mul n (c_fact (c_pred n)))
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.1839: 	rec def c_fact (n: Fint) =
//│ ║          	               ^^^^^^^^^^^
//│ ║  l.1840: 	  c_if (c_iszero n) (fun (u: Funit) -> c_i1)
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.1841: 	    (fun (u: Funit) -> c_mul n (c_fact (c_pred n)))
//│ ║          	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` is not an instance of type `'a`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ c_fact: Fint -> (forall 'b. (‘a -> ‘a & 'b) -> (forall 'c, 'd. ('c -> 'd
//│   where
//│     'b <: 'c -> 'd)) | error)
//│   where
//│     'e <: (forall 'f. 'f -> 'f) -> ‘a
//│     'a := ‘a
//│     'a0 := ‘a
//│       = [Function: c_fact]
//│ c_fact': (('a -> 'a -> ((forall 'b. 'b -> 'b) -> 'c) -> 'c) -> (((forall 'b. 'b -> 'b) -> ‘a & 'a) -> ('a -> 'd
//│   where
//│     'a <: (forall 'b. 'b -> 'b) -> 'd)) -> 'a) -> nothing
//│        = [Function: c_fact]


// let print_fact n =
//   print_string "Factorial " ;
//   print_int n ;
//   print_string " = " ;
//   c_printint (c_fact (to_church n)) ;
//   print_string "\n" ;
//   ()
:ng
def print_fact n =
  let _ = print_string "Factorial " in
  let _ = print_int n in
  let _ = print_string " = " in
  let _ = c_printint (c_fact (to_church n)) in
          print_string "\n"
def print_fact' n =
  let _ = print_string "Factorial " in
  let _ = print_int n in
  let _ = print_string " = " in
  let _ = c_printint' (c_fact' (to_church' n)) in
          print_string "\n"
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1909: 	  let _ = c_printint (c_fact (to_church n)) in
//│ ║          	                      ^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1909: 	  let _ = c_printint (c_fact (to_church n)) in
//│ ║          	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a` is not an instance of type `'a`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ print_fact: int -> unit
//│ print_fact': int -> unit

def print_fact2 n =
  concat "Factorial " (
  concat (toString n) (
  concat " = "
         (c_printint2 (c_fact (to_church n))) ))
def print_fact2' n =
  concat "Factorial " (
  concat (toString n) (
  concat " = "
         (c_printint2' (c_fact' (to_church' n))) ))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1942: 	         (c_printint2 (c_fact (to_church n))) ))
//│ ║          	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` is not an instance of type `'a`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ print_fact2: int -> string
//│   where
//│     'a := ‘a
//│     'a0 := ‘a
//│            = [Function: print_fact2]
//│ print_fact2': int -> string
//│             = [Function: print_fact2]

// let essai =
//   print_string "Church integers :\n";
//   let c_i5 = c_add c_i3 c_i2 in
//   let c_i10 = c_mul c_i5 c_i2 in
//   let c_i9 = c_pred c_i10 in
//   let c_99 = c_add (c_mul c_i9 c_i10) c_i9 in
//   let c_98 = c_pred c_99 in
//   print_string "This should be 98 : " ;
//   c_printint c_98;
//   print_string "\n\n" ;
this_should_be_98 =
  let c_i5 = c_add c_i3 c_i2 in
  let c_i10 = c_mul c_i5 c_i2 in
  let c_i9 = c_pred c_i10 in
  let c_99 = c_add (c_mul c_i9 c_i10) c_i9 in
  let c_98 = c_pred c_99 in
  c_printint2 c_98
this_should_be_98' =
  let c_i5' = c_add' c_i3' c_i2 in
  let c_i10' = c_mul' c_i5' c_i2 in
  let c_i9' = c_pred' c_i10' in
  let c_99' = c_add' (c_mul' c_i9' c_i10') c_i9' in
  let c_98' = c_pred' c_99' in
  c_printint2' c_98'
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1976: 	  let c_i5 = c_add c_i3 c_i2 in
//│ ║          	             ^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1976: 	  let c_i5 = c_add c_i3 c_i2 in
//│ ║          	             ^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1977: 	  let c_i10 = c_mul c_i5 c_i2 in
//│ ║          	              ^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1977: 	  let c_i10 = c_mul c_i5 c_i2 in
//│ ║          	              ^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1978: 	  let c_i9 = c_pred c_i10 in
//│ ║          	             ^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1979: 	  let c_99 = c_add (c_mul c_i9 c_i10) c_i9 in
//│ ║          	                    ^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1979: 	  let c_99 = c_add (c_mul c_i9 c_i10) c_i9 in
//│ ║          	             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1980: 	  let c_98 = c_pred c_99 in
//│ ║          	             ^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ this_should_be_98: string
//│                  = '98'
//│ this_should_be_98': string
//│                   = '98'

//   print_fact2 0 ;
//   print_fact2 1 ;
//   print_fact2 2 ;
//   print_fact2 3 ;
//   print_fact2 4 ;
//   print_fact2 5 ;
//   print_fact2 6 ;
//   ()
print_fact2 0
print_fact2 1
print_fact2 2
print_fact2 3
print_fact2 4
print_fact2 5
print_fact2 6
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.2074: 	print_fact2 0
//│ ║          	^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ res: error | string
//│    = 'Factorial 0 = 1'
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.2075: 	print_fact2 1
//│ ║          	^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ res: error | string
//│    = 'Factorial 1 = 1'
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.2076: 	print_fact2 2
//│ ║          	^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ res: error | string
//│    = 'Factorial 2 = 2'
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.2077: 	print_fact2 3
//│ ║          	^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ res: error | string
//│    = 'Factorial 3 = 6'
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.2078: 	print_fact2 4
//│ ║          	^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ res: error | string
//│    = 'Factorial 4 = 24'
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.2079: 	print_fact2 5
//│ ║          	^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ res: error | string
//│    = 'Factorial 5 = 120'
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.2080: 	print_fact2 6
//│ ║          	^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ║          	                    ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.1248: 	type Fint  = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ ╙──        	                    ^^
//│ res: error | string
//│    = 'Factorial 6 = 720'

print_fact2' 0
print_fact2' 1
print_fact2' 2
print_fact2' 3
print_fact2' 4
print_fact2' 5
print_fact2' 6
//│ res: string
//│    = 'Factorial 6 = 720'
//│ res: string
//│    = 'Factorial 6 = 720'
//│ res: string
//│    = 'Factorial 6 = 720'
//│ res: string
//│    = 'Factorial 6 = 720'
//│ res: string
//│    = 'Factorial 6 = 720'
//│ res: string
//│    = 'Factorial 6 = 720'
//│ res: string
//│    = 'Factorial 6 = 720'



