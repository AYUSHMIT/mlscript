:NewDefs


// FIXME prevent use of `this` in ctor
module Dummy {
  log(if this is Dummy then "duh!" else "huh?")
}
//│ module Dummy
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

module Dummy {
  fun introspect =
    if this is Dummy then "duh!" else "huh?"
}
//│ module Dummy {
//│   fun introspect: "duh!" | "huh?"
//│ }

Dummy.introspect
//│ "duh!" | "huh?"
//│ res
//│     = 'duh!'


class Funny: int { fun test = this + 1 }
//│ class Funny: int {
//│   fun test: int
//│ }

:e
class Unfunny { fun test = this + 1 }
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.32: 	class Unfunny { fun test = this + 1 }
//│ ║        	                           ^^^^^^
//│ ╟── reference of type `#Unfunny` is not an instance of type `int`
//│ ║  l.32: 	class Unfunny { fun test = this + 1 }
//│ ╙──      	                           ^^^^
//│ class Unfunny {
//│   fun test: error | int
//│ }


class Exp: Pair | Lit {
  fun test = if this is
    Lit then 0
    Pair then 1
}
class Lit(n: int) extends Exp
class Pair(lhs: Exp, rhs: Exp) extends Exp
//│ class Exp: Lit | Pair {
//│   fun test: 0 | 1
//│ }
//│ class Lit(n: int) {
//│   fun test: 0 | 1
//│ }
//│ class Pair(lhs: Exp, rhs: Exp) {
//│   fun test: 0 | 1
//│ }


:e // TODO support
class Exp: Pair | Lit {
  fun test = if this is
    Lit then 0
    Pair(l, r) then 1
}
class Lit(n: int) extends Exp
class Pair(lhs: Exp, rhs: Exp) extends Exp
//│ ╔══[ERROR] Unhandled cyclic definition
//│ ║  l.63: 	class Exp: Pair | Lit {
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.64: 	  fun test = if this is
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.65: 	    Lit then 0
//│ ║        	^^^^^^^^^^^^^^
//│ ║  l.66: 	    Pair(l, r) then 1
//│ ╙──      	^^^^^^^^^^^^^^^^^^^^^
//│ class Exp: Lit | Pair {
//│   fun test: 0 | 1
//│ }
//│ class Lit(n: int) {
//│   fun test: 0 | 1
//│ }
//│ class Pair(lhs: Exp, rhs: Exp)

// TODO
Pair(Lit(1), Lit(2)).test
//│ ╔══[ERROR] Type `Pair` does not contain member `test`
//│ ║  l.88: 	Pair(Lit(1), Lit(2)).test
//│ ╙──      	                    ^^^^^
//│ error
//│ res
//│     = 1


:e // TODO support?
class Exp: Pair | Lit {
  fun test = if this is
    Lit then 0
    Pair(l, r) then l.test + r.test
}
class Lit(n: int) extends Exp
class Pair(lhs: Exp, rhs: Exp) extends Exp
//│ ╔══[ERROR] Unhandled cyclic definition
//│ ║  l.98: 	class Exp: Pair | Lit {
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.99: 	  fun test = if this is
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.100: 	    Lit then 0
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.101: 	    Pair(l, r) then l.test + r.test
//│ ╙──       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.101: 	    Pair(l, r) then l.test + r.test
//│ ╙──       	                     ^^^^^
//│ ╔══[ERROR] Indirectly-recursive member should have type annotation
//│ ║  l.101: 	    Pair(l, r) then l.test + r.test
//│ ╙──       	                              ^^^^^
//│ class Exp: Lit | Pair {
//│   fun test: int
//│ }
//│ class Lit(n: int) {
//│   fun test: int
//│ }
//│ class Pair(lhs: Exp, rhs: Exp)


:e // TODO support!
class Exp: Pair | Lit {
  fun test : int
  fun test = if this is
    Lit then 0
    Pair(l, r) then l.test + r.test
}
class Lit(n: int) extends Exp
class Pair(lhs: Exp, rhs: Exp) extends Exp
//│ ╔══[ERROR] Unhandled cyclic definition
//│ ║  l.130: 	class Exp: Pair | Lit {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.131: 	  fun test : int
//│ ║         	^^^^^^^^^^^^^^^^
//│ ║  l.132: 	  fun test = if this is
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.133: 	    Lit then 0
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.134: 	    Pair(l, r) then l.test + r.test
//│ ╙──       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ class Exp: Lit | Pair {
//│   fun test: int
//│ }
//│ class Lit(n: int) {
//│   fun test: int
//│ }
//│ class Pair(lhs: Exp, rhs: Exp)


:e // TODO support
class Exp[A]: Pair | Lit {
  fun test = if this is
    Lit then 0
    Pair then 1
}
class Lit(n: int) extends Exp[int]
class Pair[L, R](lhs: L, rhs: R) extends Exp[(L, R)]
//│ ╔══[ERROR] Unhandled cyclic definition
//│ ║  l.159: 	class Exp[A]: Pair | Lit {
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.160: 	  fun test = if this is
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.161: 	    Lit then 0
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.162: 	    Pair then 1
//│ ╙──       	^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type error in `case` expression
//│ ║  l.160: 	  fun test = if this is
//│ ║         	                ^^^^^^^
//│ ║  l.161: 	    Lit then 0
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.162: 	    Pair then 1
//│ ║         	^^^^^^^^^^^^^^^
//│ ╟── type variable `L` leaks out of its scope
//│ ║  l.165: 	class Pair[L, R](lhs: L, rhs: R) extends Exp[(L, R)]
//│ ╙──       	           ^
//│ class Exp[A]: Lit | Pair[anything, anything] {
//│   fun test: 0 | 1
//│ }
//│ class Lit(n: int) {
//│   fun test: 0 | 1
//│ }
//│ class Pair[L, R](lhs: L, rhs: R)

Lit(0).test
//│ 0 | 1
//│ res
//│     = 0


