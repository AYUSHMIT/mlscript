:AllowParseErrors
:AllowTypeErrors // TODO rm


f (
  0
)
//│ |f| |(BEG:|→|0|←|↵|:END)|
//│ Parsed: {f ({0},)}

// TODO
f (
  0,
  1
)
//│ |f| |(BEG:|→|0|,|↵|1|←|↵|:END)|
//│ ╔══[ERROR] Expected deindentation; found comma instead
//│ ║  l.13: 	  0,
//│ ║        	   ^
//│ ╟── Note: indented block starts here:
//│ ║  l.13: 	  0,
//│ ╙──      	^^
//│ ╔══[ERROR] Unexpected literal here
//│ ║  l.14: 	  1
//│ ╙──      	  ^
//│ Parsed: {f ({0},)}

f (
  0
  1
)
//│ |f| |(BEG:|→|0|↵|1|←|↵|:END)|
//│ Parsed: {f ({0; 1},)}

f of
  0,
  1
//│ |f| |#of|→|0|,|↵|1|
//│ ╔══[ERROR] Expected deindentation; found comma instead
//│ ║  l.36: 	  0,
//│ ║        	   ^
//│ ╟── Note: indented block starts here:
//│ ║  l.36: 	  0,
//│ ╙──      	^^
//│ Parsed: {f ({0},); 1}

f of
  0
  1
//│ |f| |#of|→|0|↵|1|
//│ Parsed: {f ({0; 1},)}

// :pe
f
of  0
//│ |f|↵|#of| |0|
//│ ╔══[ERROR] Unexpected 'of' keyword in expression position
//│ ║  l.55: 	of  0
//│ ╙──      	^^
//│ Parsed: {f; 0}

f
  (0)
//│ |f|→|(BEG:|0|:END)|
//│ Parsed: {f {'(' 0, ')'}}

f
  of 0
  of 1
//│ |f|→|#of| |0|↵|#of| |1|
//│ Parsed: {f (0,) (1,)}

f
  (0)
  (1)
//│ |f|→|(BEG:|0|:END)|↵|(BEG:|1|:END)|
//│ Parsed: {f {'(' 0, ')'; '(' 1, ')'}}



