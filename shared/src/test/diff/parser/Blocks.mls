:AllowParseErrors


a
b
//│ |a|↵|b|
//│ Parsed: {a; b}

a,
b
//│ |a|,|↵|b|
//│ ╔══[PARSE ERROR] Expected end of input; found comma instead
//│ ║  l.9: 	a,
//│ ╙──     	 ^
//│ Parsed: {a}

a,
b,
//│ |a|,|↵|b|,|
//│ ╔══[PARSE ERROR] Expected end of input; found comma instead
//│ ║  l.17: 	a,
//│ ╙──      	 ^
//│ Parsed: {a}

a,
b,
c
//│ |a|,|↵|b|,|↵|c|
//│ ╔══[PARSE ERROR] Expected end of input; found comma instead
//│ ║  l.25: 	a,
//│ ╙──      	 ^
//│ Parsed: {a}

foo
  a
  b
//│ |foo|→|a|↵|b|←|
//│ Parsed: {foo {a; b}}

foo(
  a,
  b
)
//│ |foo|(BEG:|→|a|,|↵|b|←|↵|:END)|
//│ Parsed: {foo (a, b,)}

foo(
  a,
  b,
)
//│ |foo|(BEG:|→|a|,|↵|b|,|←|↵|:END)|
//│ Parsed: {foo (a, b,)}

foo(
  a
  b
)
//│ |foo|(BEG:|→|a|↵|b|←|↵|:END)|
//│ Parsed: {foo ({a; b},)}

foo(
    a
  b
)
//│ |foo|(BEG:|→|a|←|→|b|←|↵|:END)|
//│ ╔══[PARSE ERROR] Unexpected indented block here
//│ ║  l.63: 	  b
//│ ║        	^^^
//│ ║  l.64: 	)
//│ ╙──      	^
//│ Parsed: {foo (a,)}

// TODO
foo of
  a
  fun f = 1
  b
//│ |foo| |#of|→|a|↵|#fun| |f| |#=| |1|↵|b|←|
//│ ╔══[PARSE ERROR] Unexpected 'fun' keyword in expression position
//│ ║  l.76: 	  fun f = 1
//│ ╙──      	  ^^^
//│ ╔══[PARSE ERROR] Unexpected '=' keyword here
//│ ║  l.76: 	  fun f = 1
//│ ╙──      	        ^
//│ Parsed: {foo ({a; f},)}

foo +
  a
  b
//│ |foo| |+|→|a|↵|b|←|
//│ Parsed: {+ foo {a; b}}


foo(a, b, c)
foo of a, b, c
//│ |foo|(BEG:|a|,| |b|,| |c|:END)|↵|foo| |#of| |a|,| |b|,| |c|
//│ Parsed: {foo (a, b, c,); foo (a, b, c,)}

foo of
  aaaaa,
  bbbbb,
  ccccc
//│ |foo| |#of|→|aaaaa|,|↵|bbbbb|,|↵|ccccc|←|
//│ Parsed: {foo (aaaaa, bbbbb, ccccc,)}

foo of
  a
  boo
    x
    y
  c
//│ |foo| |#of|→|a|↵|boo|→|x|↵|y|←|↵|c|←|
//│ ╔══[WARNING] Paren-less applications should use the 'of' keyword
//│ ║  l.108: 	  boo
//│ ║         	  ^^^
//│ ║  l.109: 	    x
//│ ║         	^^^^^
//│ ║  l.110: 	    y
//│ ╙──       	^^^^^
//│ Parsed: {foo ({a; boo ({x; y},); c},)}




