:AllowParseErrors
:AllowTypeErrors // TODO rm


class Foo
//│ |#class| |Foo|
//│ Parsed: {class Foo() {}}

class Foo {}
//│ |#class| |Foo| |{|}|
//│ Parsed: {class Foo() {undefined}}

class Foo {
  fun foo: int
}
//│ |#class| |Foo| |{|→|#fun| |foo|#:| |int|←|↵|}|
//│ Parsed: {class Foo() {fun foo: [] -> int}}

class Foo {
  class Bar {
    class Baz
  }
}
//│ |#class| |Foo| |{|→|#class| |Bar| |{|→|#class| |Baz|←|↵|}|←|↵|}|
//│ Parsed: {class Foo() {class Bar() {class Baz() {}}}}

class Foo: Bar
//│ |#class| |Foo|#:| |Bar|
//│ Parsed: {class Foo(): Bar {}}

class Foo: Bar, Baz
//│ |#class| |Foo|#:| |Bar|,| |Baz|
//│ Parsed: {class Foo(): Bar, Baz {}}

class Foo: Bar { fun f = 0 }
//│ |#class| |Foo|#:| |Bar| |{| |#fun| |f| |#=| |0| |}|
//│ Parsed: {class Foo(): Bar {fun f: 0}}

class Foo: Bar, Baz { fun f = 0 }
//│ |#class| |Foo|#:| |Bar|,| |Baz| |{| |#fun| |f| |#=| |0| |}|
//│ Parsed: {class Foo(): Bar, Baz {fun f: 0}}

:e
class Foo: Bar { fun f = 0
  fun bar = 1
}
//│ |#class| |Foo|#:| |Bar| |{| |#fun| |f| |#=| |0|→|#fun| |bar| |#=| |1|←|↵|}|
//│ ╔══[ERROR] Expected closing curly brace; found 'fun' keyword instead
//│ ║  l.45: 	  fun bar = 1
//│ ╙──      	  ^^^
//│ ╔══[ERROR] Expected end of input; found identifier instead
//│ ║  l.45: 	  fun bar = 1
//│ ╙──      	      ^^^
//│ Parsed: {class Foo(): Bar {fun f: 0}}

:e
class Foo: Bar {
  fun f = 0
  fun bar = 1
  }
//│ |#class| |Foo|#:| |Bar| |{|→|#fun| |f| |#=| |0|↵|#fun| |bar| |#=| |1|↵|}|
//│ ╔══[ERROR] Expected end of indented block; found closing curly brace instead
//│ ║  l.60: 	  }
//│ ╙──      	  ^
//│ Parsed: {class Foo(): Bar {fun f: 0; fun bar: 1; undefined}}

class Foo: Bar {
  fun f = 0
  fun bar = 1
}
//│ |#class| |Foo|#:| |Bar| |{|→|#fun| |f| |#=| |0|↵|#fun| |bar| |#=| |1|←|↵|}|
//│ Parsed: {class Foo(): Bar {fun f: 0; fun bar: 1}}

