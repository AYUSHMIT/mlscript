:AllowParseErrors


class Foo
//│ |#class| |Foo|
//│ Parsed: {class Foo() {}}

class Foo {}
//│ |#class| |Foo| |{BEG:||:END}|
//│ Parsed: {class Foo() {}}

class Foo {
  fun foo: int
}
//│ |#class| |Foo| |{BEG:|→|#fun| |foo|#:| |int|←|↵|:END}|
//│ Parsed: {class Foo() {fun foo: [] -> int}}

class Foo {
  class Bar {
    class Baz
  }
}
//│ |#class| |Foo| |{BEG:|→|#class| |Bar| |{BEG:|→|#class| |Baz|←|↵|:END}|←|↵|:END}|
//│ Parsed: {class Foo() {class Bar() {class Baz() {}}}}

class Foo: Bar
//│ |#class| |Foo|#:| |Bar|
//│ Parsed: {class Foo(): Bar {}}

class Foo: Bar, Baz
//│ |#class| |Foo|#:| |Bar|,| |Baz|
//│ Parsed: {class Foo(): Bar, Baz {}}

class Foo: Bar { fun f = 0 }
//│ |#class| |Foo|#:| |Bar| |{BEG:| |#fun| |f| |#=| |0| |:END}|
//│ Parsed: {class Foo(): Bar {fun f = 0}}

class Foo: Bar, Baz { fun f = 0 }
//│ |#class| |Foo|#:| |Bar|,| |Baz| |{BEG:| |#fun| |f| |#=| |0| |:END}|
//│ Parsed: {class Foo(): Bar, Baz {fun f = 0}}

// * Pretty confusing... maybe we should find a way to reject this:
class Foo: Bar { fun f = 0
  fun bar = 1
}
//│ |#class| |Foo|#:| |Bar| |{BEG:| |#fun| |f| |#=| |0|→|#fun| |bar| |#=| |1|←|↵|:END}|
//│ Parsed: {class Foo(): Bar {fun f = 0 {fun bar = 1}}}

// TODO disallow?
// :e
class Foo: Bar {
  fun f = 0
  fun bar = 1
  }
//│ |#class| |Foo|#:| |Bar| |{BEG:|→|#fun| |f| |#=| |0|↵|#fun| |bar| |#=| |1|↵|←|:END}|
//│ Parsed: {class Foo(): Bar {fun f = 0; fun bar = 1}}

class Foo: Bar {
  fun f = 0
  fun bar = 1
}
//│ |#class| |Foo|#:| |Bar| |{BEG:|→|#fun| |f| |#=| |0|↵|#fun| |bar| |#=| |1|←|↵|:END}|
//│ Parsed: {class Foo(): Bar {fun f = 0; fun bar = 1}}


// FIXME `(undefined,)`
class Foo()
//│ |#class| |Foo|(BEG:||:END)|
//│ Parsed: {class Foo() {}}

class Foo(x, y, z)
//│ |#class| |Foo|(BEG:|x|,| |y|,| |z|:END)|
//│ Parsed: {class Foo(x, y, z,) {}}


// TODO
class Foo(x, y, z): Bar(z, x)
//│ |#class| |Foo|(BEG:|x|,| |y|,| |z|:END)|#:| |Bar|(BEG:|z|,| |x|:END)|
//│ ╔══[ERROR] not a recognized type: z, x,
//│ ║  l.77: 	class Foo(x, y, z): Bar(z, x)
//│ ╙──      	                       ^^^^^^
//│ Parsed: {class Foo(x, y, z,): <error>[] {}}


