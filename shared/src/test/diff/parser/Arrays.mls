:AllowParseErrors
:AllowTypeErrors // TODO rm


[]
//│ |[BEG:||:END]|
//│ Parsed: {'('  ')'}

[1]
//│ |[BEG:|1|:END]|
//│ Parsed: {'(' 1, ')'}

[1,]
//│ |[BEG:|1|,|:END]|
//│ Parsed: {'(' 1, ')'}

[1, 2, 3]
//│ |[BEG:|1|,| |2|,| |3|:END]|
//│ Parsed: {'(' 1, 2, 3, ')'}

()
//│ |(BEG:||:END)|
//│ Parsed: {'('  ')'}

(1)
//│ |(BEG:|1|:END)|
//│ Parsed: {'(' 1, ')'}

(1,)
//│ |(BEG:|1|,|:END)|
//│ Parsed: {'(' 1, ')'}

(1, 2, 3)
//│ |(BEG:|1|,| |2|,| |3|:END)|
//│ Parsed: {'(' 1, 2, 3, ')'}


1
//│ |1|
//│ Parsed: {1}

1,
//│ |1|,|
//│ ╔══[ERROR] Expected end of input; found comma instead
//│ ║  l.42: 	1,
//│ ╙──      	 ^
//│ Parsed: {1}

1, 2, 3
//│ |1|,| |2|,| |3|
//│ ╔══[ERROR] Expected end of input; found comma instead
//│ ║  l.49: 	1, 2, 3
//│ ╙──      	 ^
//│ Parsed: {1}

f of 1, 2, 3
//│ |f| |#of| |1|,| |2|,| |3|
//│ Parsed: {f (1, 2, 3,)}

f of
  1, 2, 3
//│ |f| |#of|→|1|,| |2|,| |3|
//│ ╔══[ERROR] Expected deindentation; found comma instead
//│ ║  l.61: 	  1, 2, 3
//│ ║        	   ^
//│ ╟── Note: indented block starts here:
//│ ║  l.61: 	  1, 2, 3
//│ ╙──      	^^
//│ ╔══[WARNING] Paren-less applications should use the 'of' keyword
//│ ║  l.60: 	f of
//│ ║        	^^^^
//│ ║  l.61: 	  1, 2, 3
//│ ╙──      	^^^^^^^^^
//│ Parsed: {f ({1},) (2, 3,)}

f of
  1,
  2,
  3
//│ |f| |#of|→|1|,|↵|2|,|↵|3|
//│ ╔══[ERROR] Expected deindentation; found comma instead
//│ ║  l.77: 	  1,
//│ ║        	   ^
//│ ╟── Note: indented block starts here:
//│ ║  l.77: 	  1,
//│ ╙──      	^^
//│ ╔══[ERROR] Expected end of input; found comma instead
//│ ║  l.78: 	  2,
//│ ╙──      	   ^
//│ Parsed: {f ({1},); 2}


let arr = []
//│ |#let| |arr| |#=| |[BEG:||:END]|
//│ Parsed: {let arr = '('  ')' in undefined}

let arr = [
]
//│ |#let| |arr| |#=| |[BEG:|↵|:END]|
//│ Parsed: {let arr = '('  ')' in undefined}

let arr =
[
]
//│ |#let| |arr| |#=|↵|[BEG:|↵|:END]|
//│ ╔══[ERROR] Unexpected newline in expression position
//│ ║  l.102: 	let arr =
//│ ║         	         ^
//│ ║  l.103: 	[
//│ ╙──       	
//│ Parsed: {let arr = '('  ')' in undefined}

let arr = [
  1
]
//│ |#let| |arr| |#=| |[BEG:|→|1|←|↵|:END]|
//│ Parsed: {let arr = '(' {1}, ')' in undefined}

let arr = [
  1, 2
]
//│ |#let| |arr| |#=| |[BEG:|→|1|,| |2|←|↵|:END]|
//│ ╔══[ERROR] Expected deindentation; found comma instead
//│ ║  l.120: 	  1, 2
//│ ║         	   ^
//│ ╟── Note: indented block starts here:
//│ ║  l.120: 	  1, 2
//│ ╙──       	^^
//│ ╔══[ERROR] Unexpected literal here
//│ ║  l.120: 	  1, 2
//│ ╙──       	     ^
//│ Parsed: {let arr = '(' {1}, ')' in undefined}

let arr = [
  1,
  2
]
//│ |#let| |arr| |#=| |[BEG:|→|1|,|↵|2|←|↵|:END]|
//│ ╔══[ERROR] Expected deindentation; found comma instead
//│ ║  l.135: 	  1,
//│ ║         	   ^
//│ ╟── Note: indented block starts here:
//│ ║  l.135: 	  1,
//│ ╙──       	^^
//│ ╔══[ERROR] Unexpected literal here
//│ ║  l.136: 	  2
//│ ╙──       	  ^
//│ Parsed: {let arr = '(' {1}, ')' in undefined}


