:AllowParseErrors
:AllowTypeErrors // TODO rm


[]
//│ |[|]|
//│ Parsed: {'(' undefined, ')'}

[1]
//│ |[|1|]|
//│ Parsed: {'(' 1, ')'}

[1,]
//│ |[|1|,|]|
//│ Parsed: {'(' 1, undefined, ')'}

[1, 2, 3]
//│ |[|1|,| |2|,| |3|]|
//│ Parsed: {'(' 1, 2, 3, ')'}

()
//│ |(|)|
//│ Parsed: {'(' undefined, ')'}

(1)
//│ |(|1|)|
//│ Parsed: {'(' 1, ')'}

(1,)
//│ |(|1|,|)|
//│ Parsed: {'(' 1, undefined, ')'}

(1, 2, 3)
//│ |(|1|,| |2|,| |3|)|
//│ Parsed: {'(' 1, 2, 3, ')'}


1
//│ |1|
//│ Parsed: {1}

1,
//│ |1|,|
//│ ╔══[ERROR] Expected end of input; found comma instead
//│ ║  l.42: 	1,
//│ ╙──      	 ^
//│ Parsed: {1}

1, 2, 3
//│ |1|,| |2|,| |3|
//│ ╔══[ERROR] Expected end of input; found comma instead
//│ ║  l.49: 	1, 2, 3
//│ ╙──      	 ^
//│ Parsed: {1}

f of 1, 2, 3
//│ |f| |#of| |1|,| |2|,| |3|
//│ Parsed: {f (1, 2, 3,)}

f of
  1, 2, 3
//│ |f| |#of|→|1|,| |2|,| |3|
//│ ╔══[ERROR] Expected deindentation; found comma instead
//│ ║  l.61: 	  1, 2, 3
//│ ║        	   ^
//│ ╟── Note: indented block starts here:
//│ ║  l.61: 	  1, 2, 3
//│ ╙──      	^^
//│ ╔══[ERROR] Expected end of input; found literal instead
//│ ║  l.61: 	  1, 2, 3
//│ ╙──      	     ^
//│ Parsed: {f ({1},)}

f of
  1,
  2,
  3
//│ |f| |#of|→|1|,|↵|2|,|↵|3|
//│ ╔══[ERROR] Expected deindentation; found comma instead
//│ ║  l.75: 	  1,
//│ ║        	   ^
//│ ╟── Note: indented block starts here:
//│ ║  l.75: 	  1,
//│ ╙──      	^^
//│ ╔══[ERROR] Expected end of input; found comma instead
//│ ║  l.76: 	  2,
//│ ╙──      	   ^
//│ Parsed: {f ({1},); 2}



