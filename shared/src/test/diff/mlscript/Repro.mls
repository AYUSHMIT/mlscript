type Tree = Node | Empty
class Node: { value: int; left: Tree; right: Tree }
class Empty
//│ Defined type alias Tree
//│ Defined class Node
//│ Defined class Empty

rec def insert(t, v) = case t of
  { Node ->
      let v' = t.value in
      let l = t.left in
      let r = t.right in
      let ucs__test__0 = v < v' : bool in
      case ucs__test__0 of
        { true -> Node { value = v'; left = insert(l, v,); right = r }
        | _ ->
          let ucs__test__1 = v > v' : bool in
          case ucs__test__1 of
            { true -> Node { value = v'; left = l; right = insert(r, v,) }
            | _ -> t 
            }
        }
  | Empty -> Node { value = v; left = Empty {}; right = Empty {} }
  }
//│ insert: (Empty | Node & 'a, int & 'value,) -> ((Node with {left: Empty, right: Empty, value: 'value}) | 'a | 'b)
//│   where
//│     'b :> (Node with {
//│       left: (Node with {left: Empty, right: Empty, value: 'value}) | 'a | 'b,
//│       right: 'right,
//│       value: 'value0
//│     }) | (Node with {
//│       left: 'left,
//│       right: (Node with {left: Empty, right: Empty, value: 'value}) | 'a | 'b,
//│       value: 'value0
//│     })
//│     'a <: Tree & {left: 'left, right: 'right, value: int & 'value0}
//│     'right <: Empty | Node & 'a
//│     'left <: Empty | Node & 'a
//│       = [Function: insert]
