
// --- Lit, Add ---


class Lit: { val: int }
class Add[E]: { lhs: E; rhs: E }
def lit val = Lit { val }
def add lhs rhs = Add { lhs; rhs }
//│ Defined class Lit
//│ Defined class Add[+E]
//│ lit: (int & 'val) -> (Lit with {val: 'val})
//│    = [Function: lit]
//│ add: ('lhs & 'E) -> ('E & 'rhs) -> (Add['E] with {lhs: 'lhs, rhs: 'rhs})
//│    = [Function: add]


:stats
def eval1 eval1 e = case e of {
  | Lit -> e.val
  | Add -> eval1 eval1 e.lhs + eval1 eval1 e.rhs
  }
//│ eval1: ('a -> 'rhs -> int & 'a -> 'lhs -> int & 'a) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'val})) -> (int | 'val)
//│      = [Function: eval1]
//│ constrain calls  : 36
//│ annoying  calls  : 0
//│ subtyping calls  : 55

:stats
def eval1f eval1 e = case e of {
  | Lit -> e.val
  | Add -> eval1 e.lhs + eval1 e.rhs
  }
//│ eval1f: ('rhs -> int & 'lhs -> int) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'val})) -> (int | 'val)
//│       = [Function: eval1f]
//│ constrain calls  : 32
//│ annoying  calls  : 0
//│ subtyping calls  : 52


e1 = add (lit 1) (add (lit 2) (lit 3))
//│ e1: Add[Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}} | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Add { lhs: Lit { val: 2 }, rhs: Lit { val: 3 } }
//│     }


:e
eval1 eval1 e1
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?val, ?lhs, ?rhs, ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i. ?a -> ?f -> (?val | ?i) <: (forall ?val, ?lhs, ?rhs, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r. ?j -> ?o -> (?val | ?r)) -> ?s` exceeded recursion depth limit (400)
//│ ║  l.49: 	eval1 eval1 e1
//│ ║        	^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α296
//│ ╟── while constraining:  α284  <!<  α296
//│ ╟── while constraining:  (α284,)  <!<  (α296,)
//│ ╟── while constraining:  (α296 -> (α303 -> (val305 | α307)))  <!<  ((α284,) -> α285)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α284,) -> α285)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α284
//│ ╟── while constraining:  α272  <!<  α284
//│ ╟── while constraining:  (α272,)  <!<  (α284,)
//│ ╟── while constraining:  (α284 -> (α291 -> (val293 | α295)))  <!<  ((α272,) -> α273)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α272,) -> α273)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α272
//│ ╟── while constraining:  α260  <!<  α272
//│ ╟── while constraining:  (α260,)  <!<  (α272,)
//│ ╟── while constraining:  (α272 -> (α279 -> (val281 | α283)))  <!<  ((α260,) -> α261)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α260,) -> α261)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α260
//│ ╟── while constraining:  α248  <!<  α260
//│ ╟── while constraining:  (α248,)  <!<  (α260,)
//│ ╟── while constraining:  (α260 -> (α267 -> (val269 | α271)))  <!<  ((α248,) -> α249)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α248,) -> α249)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α248
//│ ╟── while constraining:  α236  <!<  α248
//│ ╟── while constraining:  (α236,)  <!<  (α248,)
//│ ╟── while constraining:  (α248 -> (α255 -> (val257 | α259)))  <!<  ((α236,) -> α237)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α236,) -> α237)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α236
//│ ╟── while constraining:  α224  <!<  α236
//│ ╟── while constraining:  (α224,)  <!<  (α236,)
//│ ╟── while constraining:  (α236 -> (α243 -> (val245 | α247)))  <!<  ((α224,) -> α225)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α224,) -> α225)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α224
//│ ╟── while constraining:  α212  <!<  α224
//│ ╟── while constraining:  (α212,)  <!<  (α224,)
//│ ╟── while constraining:  (α224 -> (α231 -> (val233 | α235)))  <!<  ((α212,) -> α213)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α212,) -> α213)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α212
//│ ╟── while constraining:  α200  <!<  α212
//│ ╟── while constraining:  (α200,)  <!<  (α212,)
//│ ╟── while constraining:  (α212 -> (α219 -> (val221 | α223)))  <!<  ((α200,) -> α201)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α200,) -> α201)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α200
//│ ╟── while constraining:  α188  <!<  α200
//│ ╟── while constraining:  (α188,)  <!<  (α200,)
//│ ╟── while constraining:  (α200 -> (α207 -> (val209 | α211)))  <!<  ((α188,) -> α189)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α188,) -> α189)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α188
//│ ╟── while constraining:  α176  <!<  α188
//│ ╟── while constraining:  (α176,)  <!<  (α188,)
//│ ╟── while constraining:  (α188 -> (α195 -> (val197 | α199)))  <!<  ((α176,) -> α177)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α176,) -> α177)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α176
//│ ╟── while constraining:  α164  <!<  α176
//│ ╟── while constraining:  (α164,)  <!<  (α176,)
//│ ╟── while constraining:  (α176 -> (α183 -> (val185 | α187)))  <!<  ((α164,) -> α165)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α164,) -> α165)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α164
//│ ╟── while constraining:  α152  <!<  α164
//│ ╟── while constraining:  (α152,)  <!<  (α164,)
//│ ╟── while constraining:  (α164 -> (α171 -> (val173 | α175)))  <!<  ((α152,) -> α153)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α152,) -> α153)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α152
//│ ╟── while constraining:  (‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›,)  <!<  (α152,)
//│ ╟── while constraining:  (α152 -> (α159 -> (val161 | α163)))  <!<  ((‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›,) -> α151)
//│ ╙── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›,) -> α151)
//│ res: error
//│    = 6

:e
def eval1_fixed_1 = eval1 eval1
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?val, ?lhs, ?rhs, ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i. ?a -> ?f -> (?val | ?i) <: (forall ?val, ?lhs, ?rhs, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r. ?j -> ?o -> (?val | ?r)) -> ?s` exceeded recursion depth limit (400)
//│ ║  l.121: 	def eval1_fixed_1 = eval1 eval1
//│ ║         	                    ^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α473'
//│ ╟── while constraining:  α461'  <!<  α473'
//│ ╟── while constraining:  (α461',)  <!<  (α473',)
//│ ╟── while constraining:  (α473' -> (α480' -> (val482' | α484')))  <!<  ((α461',) -> α462')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α461',) -> α462')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α461'
//│ ╟── while constraining:  α449'  <!<  α461'
//│ ╟── while constraining:  (α449',)  <!<  (α461',)
//│ ╟── while constraining:  (α461' -> (α468' -> (val470' | α472')))  <!<  ((α449',) -> α450')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α449',) -> α450')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α449'
//│ ╟── while constraining:  α437'  <!<  α449'
//│ ╟── while constraining:  (α437',)  <!<  (α449',)
//│ ╟── while constraining:  (α449' -> (α456' -> (val458' | α460')))  <!<  ((α437',) -> α438')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α437',) -> α438')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α437'
//│ ╟── while constraining:  α425'  <!<  α437'
//│ ╟── while constraining:  (α425',)  <!<  (α437',)
//│ ╟── while constraining:  (α437' -> (α444' -> (val446' | α448')))  <!<  ((α425',) -> α426')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α425',) -> α426')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α425'
//│ ╟── while constraining:  α413'  <!<  α425'
//│ ╟── while constraining:  (α413',)  <!<  (α425',)
//│ ╟── while constraining:  (α425' -> (α432' -> (val434' | α436')))  <!<  ((α413',) -> α414')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α413',) -> α414')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α413'
//│ ╟── while constraining:  α401'  <!<  α413'
//│ ╟── while constraining:  (α401',)  <!<  (α413',)
//│ ╟── while constraining:  (α413' -> (α420' -> (val422' | α424')))  <!<  ((α401',) -> α402')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α401',) -> α402')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α401'
//│ ╟── while constraining:  α389'  <!<  α401'
//│ ╟── while constraining:  (α389',)  <!<  (α401',)
//│ ╟── while constraining:  (α401' -> (α408' -> (val410' | α412')))  <!<  ((α389',) -> α390')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α389',) -> α390')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α389'
//│ ╟── while constraining:  α377'  <!<  α389'
//│ ╟── while constraining:  (α377',)  <!<  (α389',)
//│ ╟── while constraining:  (α389' -> (α396' -> (val398' | α400')))  <!<  ((α377',) -> α378')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α377',) -> α378')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α377'
//│ ╟── while constraining:  α365'  <!<  α377'
//│ ╟── while constraining:  (α365',)  <!<  (α377',)
//│ ╟── while constraining:  (α377' -> (α384' -> (val386' | α388')))  <!<  ((α365',) -> α366')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α365',) -> α366')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α365'
//│ ╟── while constraining:  α353'  <!<  α365'
//│ ╟── while constraining:  (α353',)  <!<  (α365',)
//│ ╟── while constraining:  (α365' -> (α372' -> (val374' | α376')))  <!<  ((α353',) -> α354')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α353',) -> α354')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α353'
//│ ╟── while constraining:  α341'  <!<  α353'
//│ ╟── while constraining:  (α341',)  <!<  (α353',)
//│ ╟── while constraining:  (α353' -> (α360' -> (val362' | α364')))  <!<  ((α341',) -> α342')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α341',) -> α342')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α341'
//│ ╟── while constraining:  α329'  <!<  α341'
//│ ╟── while constraining:  (α329',)  <!<  (α341',)
//│ ╟── while constraining:  (α341' -> (α348' -> (val350' | α352')))  <!<  ((α329',) -> α330')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α329',) -> α330')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α329'
//│ ╟── while constraining:  (‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›,)  <!<  (α329',)
//│ ╟── while constraining:  (α329' -> (α336' -> (val338' | α340')))  <!<  ((‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›,) -> α328')
//│ ╙── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›,) -> α328')
//│ eval1_fixed_1: error
//│              = [Function (anonymous)]

eval1_fixed_1 e1
//│ res: error
//│    = 6


rec def eval1_fixed_2 = eval1f (fun x -> eval1f eval1_fixed_2 x)
//│ eval1_fixed_2: 'a -> int
//│   where
//│     'a <: Add[?] & {lhs: Add[?] & {lhs: 'a, rhs: 'a} | Lit, rhs: Add[?] & {lhs: 'a, rhs: 'a} | Lit} | Lit
//│              = [Function (anonymous)]

eval1_fixed_2 e1
//│ res: int
//│    = 6


:e
// Tying the know without a recursive def:
def eval1_fixed_3 =
  let fixed fixed = eval1f (fun x -> eval1f (fixed fixed) x)
  in fixed fixed
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?rhs, ?lhs, ?val, ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?rhs0, ?i, ?j, ?k, ?val0, ?l, ?rhs1, ?lhs0, ?lhs1, ?m, ?n, ?o, ?val1, ?p, ?rhs2, ?lhs2, ?q. ?a -> ?e <: (forall ?rhs, ?lhs, ?val, ?r, ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?rhs3, ?z, ?a1, ?b1, ?val2, ?c1, ?rhs4, ?lhs3, ?lhs4, ?d1, ?e1, ?f1, ?val3, ?g1, ?rhs5, ?lhs5, ?h1. ?r -> ?v) -> ?i1` exceeded recursion depth limit (400)
//│ ║  l.212: 	  in fixed fixed
//│ ║         	     ^^^^^^^^^^^
//│ ╟── while constraining:  (α980',)  <!<  (α1008',)
//│ ╟── while constraining:  (α1008' -> α1014')  <!<  ((α980',) -> α981')
//│ ╟── while constraining:  ‹∀ 1. (α622'' -> α642'')›  <!<  ((α980',) -> α981')
//│ ╟── while constraining:  ‹∀ 1. (α622'' -> α642'')›  <!<  α980'
//│ ╟── while constraining:  α952'  <!<  α980'
//│ ╟── while constraining:  (α952',)  <!<  (α980',)
//│ ╟── while constraining:  (α980' -> α986')  <!<  ((α952',) -> α953')
//│ ╟── while constraining:  ‹∀ 1. (α622'' -> α642'')›  <!<  ((α952',) -> α953')
//│ ╟── while constraining:  ‹∀ 1. (α622'' -> α642'')›  <!<  α952'
//│ ╟── while constraining:  α924'  <!<  α952'
//│ ╟── while constraining:  (α924',)  <!<  (α952',)
//│ ╟── while constraining:  (α952' -> α958')  <!<  ((α924',) -> α925')
//│ ╟── while constraining:  ‹∀ 1. (α622'' -> α642'')›  <!<  ((α924',) -> α925')
//│ ╟── while constraining:  ‹∀ 1. (α622'' -> α642'')›  <!<  α924'
//│ ╟── while constraining:  α896'  <!<  α924'
//│ ╟── while constraining:  (α896',)  <!<  (α924',)
//│ ╟── while constraining:  (α924' -> α930')  <!<  ((α896',) -> α897')
//│ ╟── while constraining:  ‹∀ 1. (α622'' -> α642'')›  <!<  ((α896',) -> α897')
//│ ╟── while constraining:  ‹∀ 1. (α622'' -> α642'')›  <!<  α896'
//│ ╟── while constraining:  α868'  <!<  α896'
//│ ╟── while constraining:  (α868',)  <!<  (α896',)
//│ ╟── while constraining:  (α896' -> α902')  <!<  ((α868',) -> α869')
//│ ╟── while constraining:  ‹∀ 1. (α622'' -> α642'')›  <!<  ((α868',) -> α869')
//│ ╟── while constraining:  ‹∀ 1. (α622'' -> α642'')›  <!<  α868'
//│ ╟── while constraining:  α840'  <!<  α868'
//│ ╟── while constraining:  (α840',)  <!<  (α868',)
//│ ╟── while constraining:  (α868' -> α874')  <!<  ((α840',) -> α841')
//│ ╟── while constraining:  ‹∀ 1. (α622'' -> α642'')›  <!<  ((α840',) -> α841')
//│ ╟── while constraining:  ‹∀ 1. (α622'' -> α642'')›  <!<  α840'
//│ ╟── while constraining:  α812'  <!<  α840'
//│ ╟── while constraining:  (α812',)  <!<  (α840',)
//│ ╟── while constraining:  (α840' -> α846')  <!<  ((α812',) -> α813')
//│ ╟── while constraining:  ‹∀ 1. (α622'' -> α642'')›  <!<  ((α812',) -> α813')
//│ ╟── while constraining:  ‹∀ 1. (α622'' -> α642'')›  <!<  α812'
//│ ╟── while constraining:  α784'  <!<  α812'
//│ ╟── while constraining:  (α784',)  <!<  (α812',)
//│ ╟── while constraining:  (α812' -> α818')  <!<  ((α784',) -> α785')
//│ ╟── while constraining:  ‹∀ 1. (α622'' -> α642'')›  <!<  ((α784',) -> α785')
//│ ╟── while constraining:  ‹∀ 1. (α622'' -> α642'')›  <!<  α784'
//│ ╟── while constraining:  α756'  <!<  α784'
//│ ╟── while constraining:  (α756',)  <!<  (α784',)
//│ ╟── while constraining:  (α784' -> α790')  <!<  ((α756',) -> α757')
//│ ╟── while constraining:  ‹∀ 1. (α622'' -> α642'')›  <!<  ((α756',) -> α757')
//│ ╟── while constraining:  ‹∀ 1. (α622'' -> α642'')›  <!<  α756'
//│ ╟── while constraining:  α728'  <!<  α756'
//│ ╟── while constraining:  (α728',)  <!<  (α756',)
//│ ╟── while constraining:  (α756' -> α762')  <!<  ((α728',) -> α729')
//│ ╟── while constraining:  ‹∀ 1. (α622'' -> α642'')›  <!<  ((α728',) -> α729')
//│ ╟── while constraining:  ‹∀ 1. (α622'' -> α642'')›  <!<  α728'
//│ ╟── while constraining:  α700'  <!<  α728'
//│ ╟── while constraining:  (α700',)  <!<  (α728',)
//│ ╟── while constraining:  (α728' -> α734')  <!<  ((α700',) -> α701')
//│ ╟── while constraining:  ‹∀ 1. (α622'' -> α642'')›  <!<  ((α700',) -> α701')
//│ ╟── while constraining:  ‹∀ 1. (α622'' -> α642'')›  <!<  α700'
//│ ╟── while constraining:  α672'  <!<  α700'
//│ ╟── while constraining:  (α672',)  <!<  (α700',)
//│ ╟── while constraining:  (α700' -> α706')  <!<  ((α672',) -> α673')
//│ ╟── while constraining:  ‹∀ 1. (α622'' -> α642'')›  <!<  ((α672',) -> α673')
//│ ╟── while constraining:  ‹∀ 1. (α622'' -> α642'')›  <!<  α672'
//│ ╟── while constraining:  (‹∀ 1. (α622'' -> α642'')›,)  <!<  (α672',)
//│ ╟── while constraining:  (α672' -> α678')  <!<  ((‹∀ 1. (α622'' -> α642'')›,) -> α671')
//│ ╙── while constraining:  ‹∀ 1. (α622'' -> α642'')›  <!<  ((‹∀ 1. (α622'' -> α642'')›,) -> α671')
//│ eval1_fixed_3: error
//│              = [Function (anonymous)]

eval1_fixed_3 e1
//│ res: error
//│    = 6



// --- Nega ---


class Nega[E]: { arg: E }
def nega arg = Nega { arg }
//│ Defined class Nega[+E]
//│ nega: 'arg -> Nega['arg]
//│     = [Function: nega]


def eval2 eval2 e = case e of {
  | Nega -> 0 - (eval2 eval2 e.arg)
  | _ -> eval1 eval2 e
  }
//│ eval2: ('a -> 'arg -> int & 'a -> 'rhs -> int & 'a -> 'lhs -> int & 'a) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'val}) | (Nega[?] with {arg: 'arg})) -> (int | 'val)
//│      = [Function: eval2]

def eval2f eval2 e = case e of {
  | Nega -> 0 - (eval2 e.arg)
  | _ -> eval1f eval2 e
  }
//│ eval2f: ('arg -> int & 'rhs -> int & 'lhs -> int) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'val}) | (Nega[?] with {arg: 'arg})) -> (int | 'val)
//│       = [Function: eval2f]


e2 = add (lit 1) (nega e1)
//│ e2: Add[Lit & {val: 1} | Nega[Add[Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}} | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}]] with {lhs: Lit & {val: 1}, rhs: Nega[Add[Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}} | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}]}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Nega { arg: Add { lhs: [Lit], rhs: [Add] } }
//│     }


:e
def eval2_fixed_1 = eval2 eval2
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?arg, ?rhs, ?lhs, ?val, ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q. ?a -> ?i -> (?o | ?p) <: (forall ?arg, ?rhs, ?lhs, ?val, ?r, ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1. ?r -> ?z -> (?f1 | ?g1)) -> ?i1` exceeded recursion depth limit (400)
//│ ║  l.321: 	def eval2_fixed_1 = eval2 eval2
//│ ║         	                    ^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. (α1103' -> (α1104' -> (α1110' | α1125')))›  <!<  α1406'
//│ ╟── while constraining:  α1386'  <!<  α1406'
//│ ╟── while constraining:  (α1386',)  <!<  (α1406',)
//│ ╟── while constraining:  (α1406' -> (α1417' -> (α1424' | α1425')))  <!<  ((α1386',) -> α1387')
//│ ╟── while constraining:  ‹∀ 0. (α1103' -> (α1104' -> (α1110' | α1125')))›  <!<  ((α1386',) -> α1387')
//│ ╟── while constraining:  ‹∀ 0. (α1103' -> (α1104' -> (α1110' | α1125')))›  <!<  α1386'
//│ ╟── while constraining:  ‹∀ 0. (α1103' -> (α1104' -> (α1110' | α1125')))›  <!<  α1385'
//│ ╟── while constraining:  α1365'  <!<  α1385'
//│ ╟── while constraining:  (α1365',)  <!<  (α1385',)
//│ ╟── while constraining:  (α1385' -> (α1396' -> (α1403' | α1404')))  <!<  ((α1365',) -> α1366')
//│ ╟── while constraining:  ‹∀ 0. (α1103' -> (α1104' -> (α1110' | α1125')))›  <!<  ((α1365',) -> α1366')
//│ ╟── while constraining:  ‹∀ 0. (α1103' -> (α1104' -> (α1110' | α1125')))›  <!<  α1365'
//│ ╟── while constraining:  ‹∀ 0. (α1103' -> (α1104' -> (α1110' | α1125')))›  <!<  α1364'
//│ ╟── while constraining:  α1344'  <!<  α1364'
//│ ╟── while constraining:  (α1344',)  <!<  (α1364',)
//│ ╟── while constraining:  (α1364' -> (α1375' -> (α1382' | α1383')))  <!<  ((α1344',) -> α1345')
//│ ╟── while constraining:  ‹∀ 0. (α1103' -> (α1104' -> (α1110' | α1125')))›  <!<  ((α1344',) -> α1345')
//│ ╟── while constraining:  ‹∀ 0. (α1103' -> (α1104' -> (α1110' | α1125')))›  <!<  α1344'
//│ ╟── while constraining:  ‹∀ 0. (α1103' -> (α1104' -> (α1110' | α1125')))›  <!<  α1343'
//│ ╟── while constraining:  α1323'  <!<  α1343'
//│ ╟── while constraining:  (α1323',)  <!<  (α1343',)
//│ ╟── while constraining:  (α1343' -> (α1354' -> (α1361' | α1362')))  <!<  ((α1323',) -> α1324')
//│ ╟── while constraining:  ‹∀ 0. (α1103' -> (α1104' -> (α1110' | α1125')))›  <!<  ((α1323',) -> α1324')
//│ ╟── while constraining:  ‹∀ 0. (α1103' -> (α1104' -> (α1110' | α1125')))›  <!<  α1323'
//│ ╟── while constraining:  ‹∀ 0. (α1103' -> (α1104' -> (α1110' | α1125')))›  <!<  α1322'
//│ ╟── while constraining:  α1302'  <!<  α1322'
//│ ╟── while constraining:  (α1302',)  <!<  (α1322',)
//│ ╟── while constraining:  (α1322' -> (α1333' -> (α1340' | α1341')))  <!<  ((α1302',) -> α1303')
//│ ╟── while constraining:  ‹∀ 0. (α1103' -> (α1104' -> (α1110' | α1125')))›  <!<  ((α1302',) -> α1303')
//│ ╟── while constraining:  ‹∀ 0. (α1103' -> (α1104' -> (α1110' | α1125')))›  <!<  α1302'
//│ ╟── while constraining:  ‹∀ 0. (α1103' -> (α1104' -> (α1110' | α1125')))›  <!<  α1301'
//│ ╟── while constraining:  α1281'  <!<  α1301'
//│ ╟── while constraining:  (α1281',)  <!<  (α1301',)
//│ ╟── while constraining:  (α1301' -> (α1312' -> (α1319' | α1320')))  <!<  ((α1281',) -> α1282')
//│ ╟── while constraining:  ‹∀ 0. (α1103' -> (α1104' -> (α1110' | α1125')))›  <!<  ((α1281',) -> α1282')
//│ ╟── while constraining:  ‹∀ 0. (α1103' -> (α1104' -> (α1110' | α1125')))›  <!<  α1281'
//│ ╟── while constraining:  ‹∀ 0. (α1103' -> (α1104' -> (α1110' | α1125')))›  <!<  α1280'
//│ ╟── while constraining:  α1260'  <!<  α1280'
//│ ╟── while constraining:  (α1260',)  <!<  (α1280',)
//│ ╟── while constraining:  (α1280' -> (α1291' -> (α1298' | α1299')))  <!<  ((α1260',) -> α1261')
//│ ╟── while constraining:  ‹∀ 0. (α1103' -> (α1104' -> (α1110' | α1125')))›  <!<  ((α1260',) -> α1261')
//│ ╟── while constraining:  ‹∀ 0. (α1103' -> (α1104' -> (α1110' | α1125')))›  <!<  α1260'
//│ ╟── while constraining:  ‹∀ 0. (α1103' -> (α1104' -> (α1110' | α1125')))›  <!<  α1259'
//│ ╟── while constraining:  α1239'  <!<  α1259'
//│ ╟── while constraining:  (α1239',)  <!<  (α1259',)
//│ ╟── while constraining:  (α1259' -> (α1270' -> (α1277' | α1278')))  <!<  ((α1239',) -> α1240')
//│ ╟── while constraining:  ‹∀ 0. (α1103' -> (α1104' -> (α1110' | α1125')))›  <!<  ((α1239',) -> α1240')
//│ ╟── while constraining:  ‹∀ 0. (α1103' -> (α1104' -> (α1110' | α1125')))›  <!<  α1239'
//│ ╟── while constraining:  ‹∀ 0. (α1103' -> (α1104' -> (α1110' | α1125')))›  <!<  α1238'
//│ ╟── while constraining:  (‹∀ 0. (α1103' -> (α1104' -> (α1110' | α1125')))›,)  <!<  (α1238',)
//│ ╟── while constraining:  (α1238' -> (α1249' -> (α1256' | α1257')))  <!<  ((‹∀ 0. (α1103' -> (α1104' -> (α1110' | α1125')))›,) -> α1237')
//│ ╙── while constraining:  ‹∀ 0. (α1103' -> (α1104' -> (α1110' | α1125')))›  <!<  ((‹∀ 0. (α1103' -> (α1104' -> (α1110' | α1125')))›,) -> α1237')
//│ eval2_fixed_1: error
//│              = [Function (anonymous)]

eval2_fixed_1 e1
eval2_fixed_1 e2
//│ res: error
//│    = 6
//│ res: error
//│    = -5

:e
def fix f = let fixed = fun x -> f (fun v -> (x x) v) in fixed fixed
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e. ?a -> ?e <: (forall ?f, ?g, ?h, ?i, ?j. ?f -> ?j) -> ?k` exceeded recursion depth limit (400)
//│ ║  l.388: 	def fix f = let fixed = fun x -> f (fun v -> (x x) v) in fixed fixed
//│ ║         	                                                         ^^^^^^^^^^^
//│ ╟── while constraining:  (α1538',)  <!<  (α1543',)
//│ ╟── while constraining:  (α1543' -> α1547')  <!<  ((α1538',) -> α1539')
//│ ╟── while constraining:  ‹∀ 1. (α1469'' -> α1476'')›  <!<  ((α1538',) -> α1539')
//│ ╟── while constraining:  ‹∀ 1. (α1469'' -> α1476'')›  <!<  α1538'
//│ ╟── while constraining:  α1533'  <!<  α1538'
//│ ╟── while constraining:  (α1533',)  <!<  (α1538',)
//│ ╟── while constraining:  (α1538' -> α1542')  <!<  ((α1533',) -> α1534')
//│ ╟── while constraining:  ‹∀ 1. (α1469'' -> α1476'')›  <!<  ((α1533',) -> α1534')
//│ ╟── while constraining:  ‹∀ 1. (α1469'' -> α1476'')›  <!<  α1533'
//│ ╟── while constraining:  α1528'  <!<  α1533'
//│ ╟── while constraining:  (α1528',)  <!<  (α1533',)
//│ ╟── while constraining:  (α1533' -> α1537')  <!<  ((α1528',) -> α1529')
//│ ╟── while constraining:  ‹∀ 1. (α1469'' -> α1476'')›  <!<  ((α1528',) -> α1529')
//│ ╟── while constraining:  ‹∀ 1. (α1469'' -> α1476'')›  <!<  α1528'
//│ ╟── while constraining:  α1523'  <!<  α1528'
//│ ╟── while constraining:  (α1523',)  <!<  (α1528',)
//│ ╟── while constraining:  (α1528' -> α1532')  <!<  ((α1523',) -> α1524')
//│ ╟── while constraining:  ‹∀ 1. (α1469'' -> α1476'')›  <!<  ((α1523',) -> α1524')
//│ ╟── while constraining:  ‹∀ 1. (α1469'' -> α1476'')›  <!<  α1523'
//│ ╟── while constraining:  α1518'  <!<  α1523'
//│ ╟── while constraining:  (α1518',)  <!<  (α1523',)
//│ ╟── while constraining:  (α1523' -> α1527')  <!<  ((α1518',) -> α1519')
//│ ╟── while constraining:  ‹∀ 1. (α1469'' -> α1476'')›  <!<  ((α1518',) -> α1519')
//│ ╟── while constraining:  ‹∀ 1. (α1469'' -> α1476'')›  <!<  α1518'
//│ ╟── while constraining:  α1513'  <!<  α1518'
//│ ╟── while constraining:  (α1513',)  <!<  (α1518',)
//│ ╟── while constraining:  (α1518' -> α1522')  <!<  ((α1513',) -> α1514')
//│ ╟── while constraining:  ‹∀ 1. (α1469'' -> α1476'')›  <!<  ((α1513',) -> α1514')
//│ ╟── while constraining:  ‹∀ 1. (α1469'' -> α1476'')›  <!<  α1513'
//│ ╟── while constraining:  α1508'  <!<  α1513'
//│ ╟── while constraining:  (α1508',)  <!<  (α1513',)
//│ ╟── while constraining:  (α1513' -> α1517')  <!<  ((α1508',) -> α1509')
//│ ╟── while constraining:  ‹∀ 1. (α1469'' -> α1476'')›  <!<  ((α1508',) -> α1509')
//│ ╟── while constraining:  ‹∀ 1. (α1469'' -> α1476'')›  <!<  α1508'
//│ ╟── while constraining:  α1503'  <!<  α1508'
//│ ╟── while constraining:  (α1503',)  <!<  (α1508',)
//│ ╟── while constraining:  (α1508' -> α1512')  <!<  ((α1503',) -> α1504')
//│ ╟── while constraining:  ‹∀ 1. (α1469'' -> α1476'')›  <!<  ((α1503',) -> α1504')
//│ ╟── while constraining:  ‹∀ 1. (α1469'' -> α1476'')›  <!<  α1503'
//│ ╟── while constraining:  α1498'  <!<  α1503'
//│ ╟── while constraining:  (α1498',)  <!<  (α1503',)
//│ ╟── while constraining:  (α1503' -> α1507')  <!<  ((α1498',) -> α1499')
//│ ╟── while constraining:  ‹∀ 1. (α1469'' -> α1476'')›  <!<  ((α1498',) -> α1499')
//│ ╟── while constraining:  ‹∀ 1. (α1469'' -> α1476'')›  <!<  α1498'
//│ ╟── while constraining:  α1493'  <!<  α1498'
//│ ╟── while constraining:  (α1493',)  <!<  (α1498',)
//│ ╟── while constraining:  (α1498' -> α1502')  <!<  ((α1493',) -> α1494')
//│ ╟── while constraining:  ‹∀ 1. (α1469'' -> α1476'')›  <!<  ((α1493',) -> α1494')
//│ ╟── while constraining:  ‹∀ 1. (α1469'' -> α1476'')›  <!<  α1493'
//│ ╟── while constraining:  α1488'  <!<  α1493'
//│ ╟── while constraining:  (α1488',)  <!<  (α1493',)
//│ ╟── while constraining:  (α1493' -> α1497')  <!<  ((α1488',) -> α1489')
//│ ╟── while constraining:  ‹∀ 1. (α1469'' -> α1476'')›  <!<  ((α1488',) -> α1489')
//│ ╟── while constraining:  ‹∀ 1. (α1469'' -> α1476'')›  <!<  α1488'
//│ ╟── while constraining:  α1483'  <!<  α1488'
//│ ╟── while constraining:  (α1483',)  <!<  (α1488',)
//│ ╟── while constraining:  (α1488' -> α1492')  <!<  ((α1483',) -> α1484')
//│ ╟── while constraining:  ‹∀ 1. (α1469'' -> α1476'')›  <!<  ((α1483',) -> α1484')
//│ ╟── while constraining:  ‹∀ 1. (α1469'' -> α1476'')›  <!<  α1483'
//│ ╟── while constraining:  (‹∀ 1. (α1469'' -> α1476'')›,)  <!<  (α1483',)
//│ ╟── while constraining:  (α1483' -> α1487')  <!<  ((‹∀ 1. (α1469'' -> α1476'')›,) -> α1482')
//│ ╙── while constraining:  ‹∀ 1. (α1469'' -> α1476'')›  <!<  ((‹∀ 1. (α1469'' -> α1476'')›,) -> α1482')
//│ fix: ((anything -> nothing) -> anything) -> error
//│    = [Function: fix]

def eval2_fixed_2 = fix eval2f
//│ eval2_fixed_2: error
//│              = [Function (anonymous)]

eval2_fixed_2 e1
eval2_fixed_2 e2
//│ res: error
//│    = 6
//│ res: error
//│    = -5




// === === === ERROR CASES === === === //



// FIXME should be a code-gen error
:re
rec def eval1_fixed = eval1f (eval1f eval1_fixed)
//│ eval1_fixed: 'a -> int
//│   where
//│     'a <: Add[?] & {lhs: 'a, rhs: 'a} | Lit
//│ Runtime error:
//│   ReferenceError: eval1_fixed is not defined

rec def eval1_fixed() = eval1f (eval1f (eval1_fixed()))
//│ eval1_fixed: () -> 'a -> int
//│   where
//│     'a <: Add[?] & {lhs: 'a, rhs: 'a} | Lit
//│            = [Function: eval1_fixed1]

:re
eval1_fixed() e1
//│ res: int
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded



:ShowRelativeLineNums
:AllowTypeErrors



def eval1_fixed = eval1f (fun x -> eval1f eval1f x)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	def eval1_fixed = eval1f (fun x -> eval1f eval1f x)
//│ ║        	                                   ^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (?val | ?b)` is not an instance of type `int`
//│ ║  l.29: 	def eval1f eval1 e = case e of {
//│ ║        	                 ^^^^^^^^^^^^^^^
//│ ║  l.30: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.32: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ╙──      	                         ^^^^^^^^^^^
//│ eval1_fixed: (Add[?] & {lhs: Add[?] & {lhs: nothing -> int, rhs: nothing -> int} | Lit, rhs: Add[?] & {lhs: nothing -> int, rhs: nothing -> int} | Lit} | (Lit with {val: 'val})) -> (int | 'val)

rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (?val | ?b)` does not match type `Add[?] & ?c | Lit & ?d`
//│ ║  l.29: 	def eval1f eval1 e = case e of {
//│ ║        	                 ^^^^^^^^^^^^^^^
//│ ║  l.30: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.32: 	  }
//│ ║        	^^^
//│ ╟── but it flows into application with expected type `Add[?] & ?e | Lit & ?f`
//│ ║  l.+1: 	rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.29: 	def eval1f eval1 e = case e of {
//│ ╙──      	                          ^
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` is not a function
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	           ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ║        	                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ╙──      	                                       ^^^^^^^^^^^^^^^^^^^^^^^
//│ eval1_fixed: ((Add[?] with {lhs: 'a, rhs: 'a}) | (Lit with {val: 'a -> int & 'val})) -> (int | 'val)

:e
rec def eval1_fixed = eval1f eval1_fixed e1
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f eval1_fixed e1
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` is not a function
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	           ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into application with expected type `?rhs -> ?a`
//│ ║  l.+1: 	rec def eval1_fixed = eval1f eval1_fixed e1
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	                         ^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f eval1_fixed e1
//│ ╙──      	                             ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f eval1_fixed e1
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` is not a function
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	           ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into application with expected type `?lhs -> ?a`
//│ ║  l.+1: 	rec def eval1_fixed = eval1f eval1_fixed e1
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	           ^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f eval1_fixed e1
//│ ╙──      	                             ^^^^^^^^^^^
//│ eval1_fixed: int


def eval2_broken eval2 e = case e of {
  | Nega -> e.arg
  | _ -> eval1 eval2 e
  }
//│ eval2_broken: ('a -> 'rhs -> int & 'a -> 'lhs -> int & 'a) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'arg}) | (Nega[?] with {arg: 'arg})) -> ('arg | int)

:e
eval2_broken eval2_broken e2
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?arg, ?rhs, ?lhs, ?val, ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n. ?a -> ?g -> (?arg | ?m) <: (forall ?arg, ?rhs, ?lhs, ?val, ?o, ?p, ?q, ?r, ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1. ?o -> ?u -> (?arg | ?a1)) -> ?c1` exceeded recursion depth limit (400)
//│ ║  l.+1: 	eval2_broken eval2_broken e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. (α1954' -> (α1955' -> (arg1957' | α1972')))›  <!<  α2144
//│ ╟── while constraining:  α2127  <!<  α2144
//│ ╟── while constraining:  (α2127,)  <!<  (α2144,)
//│ ╟── while constraining:  (α2144 -> (α2152 -> (arg2154 | α2160)))  <!<  ((α2127,) -> α2128)
//│ ╟── while constraining:  ‹∀ 0. (α1954' -> (α1955' -> (arg1957' | α1972')))›  <!<  ((α2127,) -> α2128)
//│ ╟── while constraining:  ‹∀ 0. (α1954' -> (α1955' -> (arg1957' | α1972')))›  <!<  α2127
//│ ╟── while constraining:  ‹∀ 0. (α1954' -> (α1955' -> (arg1957' | α1972')))›  <!<  α2126
//│ ╟── while constraining:  α2109  <!<  α2126
//│ ╟── while constraining:  (α2109,)  <!<  (α2126,)
//│ ╟── while constraining:  (α2126 -> (α2134 -> (arg2136 | α2142)))  <!<  ((α2109,) -> α2110)
//│ ╟── while constraining:  ‹∀ 0. (α1954' -> (α1955' -> (arg1957' | α1972')))›  <!<  ((α2109,) -> α2110)
//│ ╟── while constraining:  ‹∀ 0. (α1954' -> (α1955' -> (arg1957' | α1972')))›  <!<  α2109
//│ ╟── while constraining:  ‹∀ 0. (α1954' -> (α1955' -> (arg1957' | α1972')))›  <!<  α2108
//│ ╟── while constraining:  α2091  <!<  α2108
//│ ╟── while constraining:  (α2091,)  <!<  (α2108,)
//│ ╟── while constraining:  (α2108 -> (α2116 -> (arg2118 | α2124)))  <!<  ((α2091,) -> α2092)
//│ ╟── while constraining:  ‹∀ 0. (α1954' -> (α1955' -> (arg1957' | α1972')))›  <!<  ((α2091,) -> α2092)
//│ ╟── while constraining:  ‹∀ 0. (α1954' -> (α1955' -> (arg1957' | α1972')))›  <!<  α2091
//│ ╟── while constraining:  ‹∀ 0. (α1954' -> (α1955' -> (arg1957' | α1972')))›  <!<  α2090
//│ ╟── while constraining:  α2073  <!<  α2090
//│ ╟── while constraining:  (α2073,)  <!<  (α2090,)
//│ ╟── while constraining:  (α2090 -> (α2098 -> (arg2100 | α2106)))  <!<  ((α2073,) -> α2074)
//│ ╟── while constraining:  ‹∀ 0. (α1954' -> (α1955' -> (arg1957' | α1972')))›  <!<  ((α2073,) -> α2074)
//│ ╟── while constraining:  ‹∀ 0. (α1954' -> (α1955' -> (arg1957' | α1972')))›  <!<  α2073
//│ ╟── while constraining:  ‹∀ 0. (α1954' -> (α1955' -> (arg1957' | α1972')))›  <!<  α2072
//│ ╟── while constraining:  α2055  <!<  α2072
//│ ╟── while constraining:  (α2055,)  <!<  (α2072,)
//│ ╟── while constraining:  (α2072 -> (α2080 -> (arg2082 | α2088)))  <!<  ((α2055,) -> α2056)
//│ ╟── while constraining:  ‹∀ 0. (α1954' -> (α1955' -> (arg1957' | α1972')))›  <!<  ((α2055,) -> α2056)
//│ ╟── while constraining:  ‹∀ 0. (α1954' -> (α1955' -> (arg1957' | α1972')))›  <!<  α2055
//│ ╟── while constraining:  ‹∀ 0. (α1954' -> (α1955' -> (arg1957' | α1972')))›  <!<  α2054
//│ ╟── while constraining:  α2037  <!<  α2054
//│ ╟── while constraining:  (α2037,)  <!<  (α2054,)
//│ ╟── while constraining:  (α2054 -> (α2062 -> (arg2064 | α2070)))  <!<  ((α2037,) -> α2038)
//│ ╟── while constraining:  ‹∀ 0. (α1954' -> (α1955' -> (arg1957' | α1972')))›  <!<  ((α2037,) -> α2038)
//│ ╟── while constraining:  ‹∀ 0. (α1954' -> (α1955' -> (arg1957' | α1972')))›  <!<  α2037
//│ ╟── while constraining:  ‹∀ 0. (α1954' -> (α1955' -> (arg1957' | α1972')))›  <!<  α2036
//│ ╟── while constraining:  α2019  <!<  α2036
//│ ╟── while constraining:  (α2019,)  <!<  (α2036,)
//│ ╟── while constraining:  (α2036 -> (α2044 -> (arg2046 | α2052)))  <!<  ((α2019,) -> α2020)
//│ ╟── while constraining:  ‹∀ 0. (α1954' -> (α1955' -> (arg1957' | α1972')))›  <!<  ((α2019,) -> α2020)
//│ ╟── while constraining:  ‹∀ 0. (α1954' -> (α1955' -> (arg1957' | α1972')))›  <!<  α2019
//│ ╟── while constraining:  ‹∀ 0. (α1954' -> (α1955' -> (arg1957' | α1972')))›  <!<  α2018
//│ ╟── while constraining:  α2001  <!<  α2018
//│ ╟── while constraining:  (α2001,)  <!<  (α2018,)
//│ ╟── while constraining:  (α2018 -> (α2026 -> (arg2028 | α2034)))  <!<  ((α2001,) -> α2002)
//│ ╟── while constraining:  ‹∀ 0. (α1954' -> (α1955' -> (arg1957' | α1972')))›  <!<  ((α2001,) -> α2002)
//│ ╟── while constraining:  ‹∀ 0. (α1954' -> (α1955' -> (arg1957' | α1972')))›  <!<  α2001
//│ ╟── while constraining:  ‹∀ 0. (α1954' -> (α1955' -> (arg1957' | α1972')))›  <!<  α2000
//│ ╟── while constraining:  (‹∀ 0. (α1954' -> (α1955' -> (arg1957' | α1972')))›,)  <!<  (α2000,)
//│ ╟── while constraining:  (α2000 -> (α2008 -> (arg2010 | α2016)))  <!<  ((‹∀ 0. (α1954' -> (α1955' -> (arg1957' | α1972')))›,) -> α1999)
//│ ╙── while constraining:  ‹∀ 0. (α1954' -> (α1955' -> (arg1957' | α1972')))›  <!<  ((‹∀ 0. (α1954' -> (α1955' -> (arg1957' | α1972')))›,) -> α1999)
//│ res: error


def eval2f_oops eval2 e = case e of {
  | Nega -> 0 - (eval2 e.arg)
  | _ -> eval1 eval2 e // should be: eval1f eval2 e
  }
//│ eval2f_oops: ('arg -> int & 'a -> 'rhs -> int & 'a -> 'lhs -> int & 'a) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'val}) | (Nega[?] with {arg: 'arg})) -> (int | 'val)

// :e
fix eval2f_oops e2
//│ res: error


