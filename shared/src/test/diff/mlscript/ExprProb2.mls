
// --- Lit, Add ---


class Lit: { val: int }
class Add[E]: { lhs: E; rhs: E }
def lit val = Lit { val }
def add lhs rhs = Add { lhs; rhs }
//│ Defined class Lit
//│ Defined class Add[+E]
//│ lit: (int & 'val) -> (Lit with {val: 'val})
//│    = [Function: lit]
//│ add: ('lhs & 'E) -> ('E & 'rhs) -> (Add['E] with {lhs: 'lhs, rhs: 'rhs})
//│    = [Function: add]


:stats
def eval1 eval1 e = case e of {
  | Lit -> e.val
  | Add -> eval1 eval1 e.lhs + eval1 eval1 e.rhs
  }
//│ eval1: ('a -> 'rhs -> int & 'a -> 'lhs -> int & 'a) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'val})) -> (int | 'val)
//│      = [Function: eval1]
//│ constrain calls  : 36
//│ annoying  calls  : 0
//│ subtyping calls  : 55

:stats
def eval1f eval1 e = case e of {
  | Lit -> e.val
  | Add -> eval1 e.lhs + eval1 e.rhs
  }
//│ eval1f: ('rhs -> int & 'lhs -> int) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'val})) -> (int | 'val)
//│       = [Function: eval1f]
//│ constrain calls  : 32
//│ annoying  calls  : 0
//│ subtyping calls  : 52


e1 = add (lit 1) (add (lit 2) (lit 3))
//│ e1: Add[Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}} | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Add { lhs: Lit { val: 2 }, rhs: Lit { val: 3 } }
//│     }


:e
eval1 eval1 e1
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?val, ?lhs, ?rhs, ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i. ?a -> ?f -> (?val | ?i) <: (forall ?val, ?lhs, ?rhs, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r. ?j -> ?o -> (?val | ?r)) -> ?s` exceeded recursion depth limit (200)
//│ ║  l.49: 	eval1 eval1 e1
//│ ║        	^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α248
//│ ╟── while constraining:  α236  <!<  α248
//│ ╟── while constraining:  (α236,)  <!<  (α248,)
//│ ╟── while constraining:  (α248 -> (α255 -> (val257 | α259)))  <!<  ((α236,) -> α237)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α236,) -> α237)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α236
//│ ╟── while constraining:  α224  <!<  α236
//│ ╟── while constraining:  (α224,)  <!<  (α236,)
//│ ╟── while constraining:  (α236 -> (α243 -> (val245 | α247)))  <!<  ((α224,) -> α225)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α224,) -> α225)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α224
//│ ╟── while constraining:  α212  <!<  α224
//│ ╟── while constraining:  (α212,)  <!<  (α224,)
//│ ╟── while constraining:  (α224 -> (α231 -> (val233 | α235)))  <!<  ((α212,) -> α213)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α212,) -> α213)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α212
//│ ╟── while constraining:  α200  <!<  α212
//│ ╟── while constraining:  (α200,)  <!<  (α212,)
//│ ╟── while constraining:  (α212 -> (α219 -> (val221 | α223)))  <!<  ((α200,) -> α201)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α200,) -> α201)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α200
//│ ╟── while constraining:  α188  <!<  α200
//│ ╟── while constraining:  (α188,)  <!<  (α200,)
//│ ╟── while constraining:  (α200 -> (α207 -> (val209 | α211)))  <!<  ((α188,) -> α189)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α188,) -> α189)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α188
//│ ╟── while constraining:  α176  <!<  α188
//│ ╟── while constraining:  (α176,)  <!<  (α188,)
//│ ╟── while constraining:  (α188 -> (α195 -> (val197 | α199)))  <!<  ((α176,) -> α177)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α176,) -> α177)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α176
//│ ╟── while constraining:  α164  <!<  α176
//│ ╟── while constraining:  (α164,)  <!<  (α176,)
//│ ╟── while constraining:  (α176 -> (α183 -> (val185 | α187)))  <!<  ((α164,) -> α165)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α164,) -> α165)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α164
//│ ╟── while constraining:  α152  <!<  α164
//│ ╟── while constraining:  (α152,)  <!<  (α164,)
//│ ╟── while constraining:  (α164 -> (α171 -> (val173 | α175)))  <!<  ((α152,) -> α153)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α152,) -> α153)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α152
//│ ╟── while constraining:  (‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›,)  <!<  (α152,)
//│ ╟── while constraining:  (α152 -> (α159 -> (val161 | α163)))  <!<  ((‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›,) -> α151)
//│ ╙── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›,) -> α151)
//│ res: error
//│    = 6

:e
def eval1_fixed_1 = eval1 eval1
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?val, ?lhs, ?rhs, ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i. ?a -> ?f -> (?val | ?i) <: (forall ?val, ?lhs, ?rhs, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r. ?j -> ?o -> (?val | ?r)) -> ?s` exceeded recursion depth limit (200)
//│ ║  l.101: 	def eval1_fixed_1 = eval1 eval1
//│ ║         	                    ^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α377'
//│ ╟── while constraining:  α365'  <!<  α377'
//│ ╟── while constraining:  (α365',)  <!<  (α377',)
//│ ╟── while constraining:  (α377' -> (α384' -> (val386' | α388')))  <!<  ((α365',) -> α366')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α365',) -> α366')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α365'
//│ ╟── while constraining:  α353'  <!<  α365'
//│ ╟── while constraining:  (α353',)  <!<  (α365',)
//│ ╟── while constraining:  (α365' -> (α372' -> (val374' | α376')))  <!<  ((α353',) -> α354')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α353',) -> α354')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α353'
//│ ╟── while constraining:  α341'  <!<  α353'
//│ ╟── while constraining:  (α341',)  <!<  (α353',)
//│ ╟── while constraining:  (α353' -> (α360' -> (val362' | α364')))  <!<  ((α341',) -> α342')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α341',) -> α342')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α341'
//│ ╟── while constraining:  α329'  <!<  α341'
//│ ╟── while constraining:  (α329',)  <!<  (α341',)
//│ ╟── while constraining:  (α341' -> (α348' -> (val350' | α352')))  <!<  ((α329',) -> α330')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α329',) -> α330')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α329'
//│ ╟── while constraining:  α317'  <!<  α329'
//│ ╟── while constraining:  (α317',)  <!<  (α329',)
//│ ╟── while constraining:  (α329' -> (α336' -> (val338' | α340')))  <!<  ((α317',) -> α318')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α317',) -> α318')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α317'
//│ ╟── while constraining:  α305'  <!<  α317'
//│ ╟── while constraining:  (α305',)  <!<  (α317',)
//│ ╟── while constraining:  (α317' -> (α324' -> (val326' | α328')))  <!<  ((α305',) -> α306')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α305',) -> α306')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α305'
//│ ╟── while constraining:  α293'  <!<  α305'
//│ ╟── while constraining:  (α293',)  <!<  (α305',)
//│ ╟── while constraining:  (α305' -> (α312' -> (val314' | α316')))  <!<  ((α293',) -> α294')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α293',) -> α294')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α293'
//│ ╟── while constraining:  α281'  <!<  α293'
//│ ╟── while constraining:  (α281',)  <!<  (α293',)
//│ ╟── while constraining:  (α293' -> (α300' -> (val302' | α304')))  <!<  ((α281',) -> α282')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α281',) -> α282')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α281'
//│ ╟── while constraining:  (‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›,)  <!<  (α281',)
//│ ╟── while constraining:  (α281' -> (α288' -> (val290' | α292')))  <!<  ((‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›,) -> α280')
//│ ╙── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›,) -> α280')
//│ eval1_fixed_1: error
//│              = [Function (anonymous)]

eval1_fixed_1 e1
//│ res: error
//│    = 6


rec def eval1_fixed_2 = eval1f (fun x -> eval1f eval1_fixed_2 x)
//│ eval1_fixed_2: 'a -> int
//│   where
//│     'a <: Add[?] & {lhs: Add[?] & {lhs: 'a, rhs: 'a} | Lit, rhs: Add[?] & {lhs: 'a, rhs: 'a} | Lit} | Lit
//│              = [Function (anonymous)]

eval1_fixed_2 e1
//│ res: int
//│    = 6


:e
// Tying the know without a recursive def:
def eval1_fixed_3 =
  let fixed fixed = eval1f (fun x -> eval1f (fixed fixed) x)
  in fixed fixed
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?rhs, ?lhs, ?val, ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?rhs0, ?i, ?j, ?k, ?val0, ?l, ?rhs1, ?lhs0, ?lhs1, ?m, ?n, ?o, ?val1, ?p, ?rhs2, ?lhs2, ?q. ?a -> ?e <: (forall ?rhs, ?lhs, ?val, ?r, ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?rhs3, ?z, ?a1, ?b1, ?val2, ?c1, ?rhs4, ?lhs3, ?lhs4, ?d1, ?e1, ?f1, ?val3, ?g1, ?rhs5, ?lhs5, ?h1. ?r -> ?v) -> ?i1` exceeded recursion depth limit (200)
//│ ║  l.172: 	  in fixed fixed
//│ ║         	     ^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. (α526'' -> α546'')›  <!<  ((α772',) -> α773')
//│ ╟── while constraining:  ‹∀ 1. (α526'' -> α546'')›  <!<  α772'
//│ ╟── while constraining:  α744'  <!<  α772'
//│ ╟── while constraining:  (α744',)  <!<  (α772',)
//│ ╟── while constraining:  (α772' -> α778')  <!<  ((α744',) -> α745')
//│ ╟── while constraining:  ‹∀ 1. (α526'' -> α546'')›  <!<  ((α744',) -> α745')
//│ ╟── while constraining:  ‹∀ 1. (α526'' -> α546'')›  <!<  α744'
//│ ╟── while constraining:  α716'  <!<  α744'
//│ ╟── while constraining:  (α716',)  <!<  (α744',)
//│ ╟── while constraining:  (α744' -> α750')  <!<  ((α716',) -> α717')
//│ ╟── while constraining:  ‹∀ 1. (α526'' -> α546'')›  <!<  ((α716',) -> α717')
//│ ╟── while constraining:  ‹∀ 1. (α526'' -> α546'')›  <!<  α716'
//│ ╟── while constraining:  α688'  <!<  α716'
//│ ╟── while constraining:  (α688',)  <!<  (α716',)
//│ ╟── while constraining:  (α716' -> α722')  <!<  ((α688',) -> α689')
//│ ╟── while constraining:  ‹∀ 1. (α526'' -> α546'')›  <!<  ((α688',) -> α689')
//│ ╟── while constraining:  ‹∀ 1. (α526'' -> α546'')›  <!<  α688'
//│ ╟── while constraining:  α660'  <!<  α688'
//│ ╟── while constraining:  (α660',)  <!<  (α688',)
//│ ╟── while constraining:  (α688' -> α694')  <!<  ((α660',) -> α661')
//│ ╟── while constraining:  ‹∀ 1. (α526'' -> α546'')›  <!<  ((α660',) -> α661')
//│ ╟── while constraining:  ‹∀ 1. (α526'' -> α546'')›  <!<  α660'
//│ ╟── while constraining:  α632'  <!<  α660'
//│ ╟── while constraining:  (α632',)  <!<  (α660',)
//│ ╟── while constraining:  (α660' -> α666')  <!<  ((α632',) -> α633')
//│ ╟── while constraining:  ‹∀ 1. (α526'' -> α546'')›  <!<  ((α632',) -> α633')
//│ ╟── while constraining:  ‹∀ 1. (α526'' -> α546'')›  <!<  α632'
//│ ╟── while constraining:  α604'  <!<  α632'
//│ ╟── while constraining:  (α604',)  <!<  (α632',)
//│ ╟── while constraining:  (α632' -> α638')  <!<  ((α604',) -> α605')
//│ ╟── while constraining:  ‹∀ 1. (α526'' -> α546'')›  <!<  ((α604',) -> α605')
//│ ╟── while constraining:  ‹∀ 1. (α526'' -> α546'')›  <!<  α604'
//│ ╟── while constraining:  α576'  <!<  α604'
//│ ╟── while constraining:  (α576',)  <!<  (α604',)
//│ ╟── while constraining:  (α604' -> α610')  <!<  ((α576',) -> α577')
//│ ╟── while constraining:  ‹∀ 1. (α526'' -> α546'')›  <!<  ((α576',) -> α577')
//│ ╟── while constraining:  ‹∀ 1. (α526'' -> α546'')›  <!<  α576'
//│ ╟── while constraining:  (‹∀ 1. (α526'' -> α546'')›,)  <!<  (α576',)
//│ ╟── while constraining:  (α576' -> α582')  <!<  ((‹∀ 1. (α526'' -> α546'')›,) -> α575')
//│ ╙── while constraining:  ‹∀ 1. (α526'' -> α546'')›  <!<  ((‹∀ 1. (α526'' -> α546'')›,) -> α575')
//│ eval1_fixed_3: error
//│              = [Function (anonymous)]

eval1_fixed_3 e1
//│ res: error
//│    = 6



// --- Nega ---


class Nega[E]: { arg: E }
def nega arg = Nega { arg }
//│ Defined class Nega[+E]
//│ nega: 'arg -> Nega['arg]
//│     = [Function: nega]


def eval2 eval2 e = case e of {
  | Nega -> 0 - (eval2 eval2 e.arg)
  | _ -> eval1 eval2 e
  }
//│ eval2: ('a -> 'arg -> int & 'a -> 'rhs -> int & 'a -> 'lhs -> int & 'a) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'val}) | (Nega[?] with {arg: 'arg})) -> (int | 'val)
//│      = [Function: eval2]

def eval2f eval2 e = case e of {
  | Nega -> 0 - (eval2 e.arg)
  | _ -> eval1f eval2 e
  }
//│ eval2f: ('arg -> int & 'rhs -> int & 'lhs -> int) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'val}) | (Nega[?] with {arg: 'arg})) -> (int | 'val)
//│       = [Function: eval2f]


e2 = add (lit 1) (nega e1)
//│ e2: Add[Lit & {val: 1} | Nega[Add[Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}} | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}]] with {lhs: Lit & {val: 1}, rhs: Nega[Add[Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}} | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}]}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Nega { arg: Add { lhs: [Lit], rhs: [Add] } }
//│     }


:e
def eval2_fixed_1 = eval2 eval2
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?arg, ?rhs, ?lhs, ?val, ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q. ?a -> ?i -> (?o | ?p) <: (forall ?arg, ?rhs, ?lhs, ?val, ?r, ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1. ?r -> ?z -> (?f1 | ?g1)) -> ?i1` exceeded recursion depth limit (200)
//│ ║  l.259: 	def eval2_fixed_1 = eval2 eval2
//│ ║         	                    ^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. (α867' -> (α868' -> (α874' | α889')))›  <!<  α1108'
//│ ╟── while constraining:  ‹∀ 0. (α867' -> (α868' -> (α874' | α889')))›  <!<  α1107'
//│ ╟── while constraining:  α1087'  <!<  α1107'
//│ ╟── while constraining:  (α1087',)  <!<  (α1107',)
//│ ╟── while constraining:  (α1107' -> (α1118' -> (α1125' | α1126')))  <!<  ((α1087',) -> α1088')
//│ ╟── while constraining:  ‹∀ 0. (α867' -> (α868' -> (α874' | α889')))›  <!<  ((α1087',) -> α1088')
//│ ╟── while constraining:  ‹∀ 0. (α867' -> (α868' -> (α874' | α889')))›  <!<  α1087'
//│ ╟── while constraining:  ‹∀ 0. (α867' -> (α868' -> (α874' | α889')))›  <!<  α1086'
//│ ╟── while constraining:  α1066'  <!<  α1086'
//│ ╟── while constraining:  (α1066',)  <!<  (α1086',)
//│ ╟── while constraining:  (α1086' -> (α1097' -> (α1104' | α1105')))  <!<  ((α1066',) -> α1067')
//│ ╟── while constraining:  ‹∀ 0. (α867' -> (α868' -> (α874' | α889')))›  <!<  ((α1066',) -> α1067')
//│ ╟── while constraining:  ‹∀ 0. (α867' -> (α868' -> (α874' | α889')))›  <!<  α1066'
//│ ╟── while constraining:  ‹∀ 0. (α867' -> (α868' -> (α874' | α889')))›  <!<  α1065'
//│ ╟── while constraining:  α1045'  <!<  α1065'
//│ ╟── while constraining:  (α1045',)  <!<  (α1065',)
//│ ╟── while constraining:  (α1065' -> (α1076' -> (α1083' | α1084')))  <!<  ((α1045',) -> α1046')
//│ ╟── while constraining:  ‹∀ 0. (α867' -> (α868' -> (α874' | α889')))›  <!<  ((α1045',) -> α1046')
//│ ╟── while constraining:  ‹∀ 0. (α867' -> (α868' -> (α874' | α889')))›  <!<  α1045'
//│ ╟── while constraining:  ‹∀ 0. (α867' -> (α868' -> (α874' | α889')))›  <!<  α1044'
//│ ╟── while constraining:  α1024'  <!<  α1044'
//│ ╟── while constraining:  (α1024',)  <!<  (α1044',)
//│ ╟── while constraining:  (α1044' -> (α1055' -> (α1062' | α1063')))  <!<  ((α1024',) -> α1025')
//│ ╟── while constraining:  ‹∀ 0. (α867' -> (α868' -> (α874' | α889')))›  <!<  ((α1024',) -> α1025')
//│ ╟── while constraining:  ‹∀ 0. (α867' -> (α868' -> (α874' | α889')))›  <!<  α1024'
//│ ╟── while constraining:  ‹∀ 0. (α867' -> (α868' -> (α874' | α889')))›  <!<  α1023'
//│ ╟── while constraining:  α1003'  <!<  α1023'
//│ ╟── while constraining:  (α1003',)  <!<  (α1023',)
//│ ╟── while constraining:  (α1023' -> (α1034' -> (α1041' | α1042')))  <!<  ((α1003',) -> α1004')
//│ ╟── while constraining:  ‹∀ 0. (α867' -> (α868' -> (α874' | α889')))›  <!<  ((α1003',) -> α1004')
//│ ╟── while constraining:  ‹∀ 0. (α867' -> (α868' -> (α874' | α889')))›  <!<  α1003'
//│ ╟── while constraining:  ‹∀ 0. (α867' -> (α868' -> (α874' | α889')))›  <!<  α1002'
//│ ╟── while constraining:  (‹∀ 0. (α867' -> (α868' -> (α874' | α889')))›,)  <!<  (α1002',)
//│ ╟── while constraining:  (α1002' -> (α1013' -> (α1020' | α1021')))  <!<  ((‹∀ 0. (α867' -> (α868' -> (α874' | α889')))›,) -> α1001')
//│ ╙── while constraining:  ‹∀ 0. (α867' -> (α868' -> (α874' | α889')))›  <!<  ((‹∀ 0. (α867' -> (α868' -> (α874' | α889')))›,) -> α1001')
//│ eval2_fixed_1: error
//│              = [Function (anonymous)]

eval2_fixed_1 e1
eval2_fixed_1 e2
//│ res: error
//│    = 6
//│ res: error
//│    = -5

:e
def fix f = let fixed = fun x -> f (fun v -> (x x) v) in fixed fixed
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e. ?a -> ?e <: (forall ?f, ?g, ?h, ?i, ?j. ?f -> ?j) -> ?k` exceeded recursion depth limit (200)
//│ ║  l.309: 	def fix f = let fixed = fun x -> f (fun v -> (x x) v) in fixed fixed
//│ ║         	                                                         ^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. (α1170'' -> α1177'')›  <!<  ((α1219',) -> α1220')
//│ ╟── while constraining:  ‹∀ 1. (α1170'' -> α1177'')›  <!<  α1219'
//│ ╟── while constraining:  α1214'  <!<  α1219'
//│ ╟── while constraining:  (α1214',)  <!<  (α1219',)
//│ ╟── while constraining:  (α1219' -> α1223')  <!<  ((α1214',) -> α1215')
//│ ╟── while constraining:  ‹∀ 1. (α1170'' -> α1177'')›  <!<  ((α1214',) -> α1215')
//│ ╟── while constraining:  ‹∀ 1. (α1170'' -> α1177'')›  <!<  α1214'
//│ ╟── while constraining:  α1209'  <!<  α1214'
//│ ╟── while constraining:  (α1209',)  <!<  (α1214',)
//│ ╟── while constraining:  (α1214' -> α1218')  <!<  ((α1209',) -> α1210')
//│ ╟── while constraining:  ‹∀ 1. (α1170'' -> α1177'')›  <!<  ((α1209',) -> α1210')
//│ ╟── while constraining:  ‹∀ 1. (α1170'' -> α1177'')›  <!<  α1209'
//│ ╟── while constraining:  α1204'  <!<  α1209'
//│ ╟── while constraining:  (α1204',)  <!<  (α1209',)
//│ ╟── while constraining:  (α1209' -> α1213')  <!<  ((α1204',) -> α1205')
//│ ╟── while constraining:  ‹∀ 1. (α1170'' -> α1177'')›  <!<  ((α1204',) -> α1205')
//│ ╟── while constraining:  ‹∀ 1. (α1170'' -> α1177'')›  <!<  α1204'
//│ ╟── while constraining:  α1199'  <!<  α1204'
//│ ╟── while constraining:  (α1199',)  <!<  (α1204',)
//│ ╟── while constraining:  (α1204' -> α1208')  <!<  ((α1199',) -> α1200')
//│ ╟── while constraining:  ‹∀ 1. (α1170'' -> α1177'')›  <!<  ((α1199',) -> α1200')
//│ ╟── while constraining:  ‹∀ 1. (α1170'' -> α1177'')›  <!<  α1199'
//│ ╟── while constraining:  α1194'  <!<  α1199'
//│ ╟── while constraining:  (α1194',)  <!<  (α1199',)
//│ ╟── while constraining:  (α1199' -> α1203')  <!<  ((α1194',) -> α1195')
//│ ╟── while constraining:  ‹∀ 1. (α1170'' -> α1177'')›  <!<  ((α1194',) -> α1195')
//│ ╟── while constraining:  ‹∀ 1. (α1170'' -> α1177'')›  <!<  α1194'
//│ ╟── while constraining:  α1189'  <!<  α1194'
//│ ╟── while constraining:  (α1189',)  <!<  (α1194',)
//│ ╟── while constraining:  (α1194' -> α1198')  <!<  ((α1189',) -> α1190')
//│ ╟── while constraining:  ‹∀ 1. (α1170'' -> α1177'')›  <!<  ((α1189',) -> α1190')
//│ ╟── while constraining:  ‹∀ 1. (α1170'' -> α1177'')›  <!<  α1189'
//│ ╟── while constraining:  α1184'  <!<  α1189'
//│ ╟── while constraining:  (α1184',)  <!<  (α1189',)
//│ ╟── while constraining:  (α1189' -> α1193')  <!<  ((α1184',) -> α1185')
//│ ╟── while constraining:  ‹∀ 1. (α1170'' -> α1177'')›  <!<  ((α1184',) -> α1185')
//│ ╟── while constraining:  ‹∀ 1. (α1170'' -> α1177'')›  <!<  α1184'
//│ ╟── while constraining:  (‹∀ 1. (α1170'' -> α1177'')›,)  <!<  (α1184',)
//│ ╟── while constraining:  (α1184' -> α1188')  <!<  ((‹∀ 1. (α1170'' -> α1177'')›,) -> α1183')
//│ ╙── while constraining:  ‹∀ 1. (α1170'' -> α1177'')›  <!<  ((‹∀ 1. (α1170'' -> α1177'')›,) -> α1183')
//│ fix: ((anything -> nothing) -> anything) -> error
//│    = [Function: fix]

def eval2_fixed_2 = fix eval2f
//│ eval2_fixed_2: error
//│              = [Function (anonymous)]

eval2_fixed_2 e1
eval2_fixed_2 e2
//│ res: error
//│    = 6
//│ res: error
//│    = -5




// === === === ERROR CASES === === === //



// FIXME should be a code-gen error
:re
rec def eval1_fixed = eval1f (eval1f eval1_fixed)
//│ eval1_fixed: 'a -> int
//│   where
//│     'a <: Add[?] & {lhs: 'a, rhs: 'a} | Lit
//│ Runtime error:
//│   ReferenceError: eval1_fixed is not defined

rec def eval1_fixed() = eval1f (eval1f (eval1_fixed()))
//│ eval1_fixed: () -> 'a -> int
//│   where
//│     'a <: Add[?] & {lhs: 'a, rhs: 'a} | Lit
//│            = [Function: eval1_fixed1]

:re
eval1_fixed() e1
//│ res: int
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded



:ShowRelativeLineNums
:AllowTypeErrors



def eval1_fixed = eval1f (fun x -> eval1f eval1f x)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	def eval1_fixed = eval1f (fun x -> eval1f eval1f x)
//│ ║        	                                   ^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (?val | ?b)` is not an instance of type `int`
//│ ║  l.29: 	def eval1f eval1 e = case e of {
//│ ║        	                 ^^^^^^^^^^^^^^^
//│ ║  l.30: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.32: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ╙──      	                         ^^^^^^^^^^^
//│ eval1_fixed: (Add[?] & {lhs: Add[?] & {lhs: nothing -> int, rhs: nothing -> int} | Lit, rhs: Add[?] & {lhs: nothing -> int, rhs: nothing -> int} | Lit} | (Lit with {val: 'val})) -> (int | 'val)

rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (?val | ?b)` does not match type `Add[?] & ?c | Lit & ?d`
//│ ║  l.29: 	def eval1f eval1 e = case e of {
//│ ║        	                 ^^^^^^^^^^^^^^^
//│ ║  l.30: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.32: 	  }
//│ ║        	^^^
//│ ╟── but it flows into application with expected type `Add[?] & ?e | Lit & ?f`
//│ ║  l.+1: 	rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.29: 	def eval1f eval1 e = case e of {
//│ ╙──      	                          ^
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` is not a function
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	           ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ║        	                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ╙──      	                                       ^^^^^^^^^^^^^^^^^^^^^^^
//│ eval1_fixed: ((Add[?] with {lhs: 'a, rhs: 'a}) | (Lit with {val: 'a -> int & 'val})) -> (int | 'val)

:e
rec def eval1_fixed = eval1f eval1_fixed e1
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f eval1_fixed e1
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` is not a function
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	           ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into application with expected type `?rhs -> ?a`
//│ ║  l.+1: 	rec def eval1_fixed = eval1f eval1_fixed e1
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	                         ^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f eval1_fixed e1
//│ ╙──      	                             ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f eval1_fixed e1
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` is not a function
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	           ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into application with expected type `?lhs -> ?a`
//│ ║  l.+1: 	rec def eval1_fixed = eval1f eval1_fixed e1
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	           ^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f eval1_fixed e1
//│ ╙──      	                             ^^^^^^^^^^^
//│ eval1_fixed: int


def eval2_broken eval2 e = case e of {
  | Nega -> e.arg
  | _ -> eval1 eval2 e
  }
//│ eval2_broken: ('a -> 'rhs -> int & 'a -> 'lhs -> int & 'a) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'arg}) | (Nega[?] with {arg: 'arg})) -> ('arg | int)

:e
eval2_broken eval2_broken e2
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?arg, ?rhs, ?lhs, ?val, ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n. ?a -> ?g -> (?arg | ?m) <: (forall ?arg, ?rhs, ?lhs, ?val, ?o, ?p, ?q, ?r, ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1. ?o -> ?u -> (?arg | ?a1)) -> ?c1` exceeded recursion depth limit (200)
//│ ║  l.+1: 	eval2_broken eval2_broken e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. (α1630' -> (α1631' -> (arg1633' | α1648')))›  <!<  α1767
//│ ╟── while constraining:  ‹∀ 0. (α1630' -> (α1631' -> (arg1633' | α1648')))›  <!<  α1766
//│ ╟── while constraining:  α1749  <!<  α1766
//│ ╟── while constraining:  (α1749,)  <!<  (α1766,)
//│ ╟── while constraining:  (α1766 -> (α1774 -> (arg1776 | α1782)))  <!<  ((α1749,) -> α1750)
//│ ╟── while constraining:  ‹∀ 0. (α1630' -> (α1631' -> (arg1633' | α1648')))›  <!<  ((α1749,) -> α1750)
//│ ╟── while constraining:  ‹∀ 0. (α1630' -> (α1631' -> (arg1633' | α1648')))›  <!<  α1749
//│ ╟── while constraining:  ‹∀ 0. (α1630' -> (α1631' -> (arg1633' | α1648')))›  <!<  α1748
//│ ╟── while constraining:  α1731  <!<  α1748
//│ ╟── while constraining:  (α1731,)  <!<  (α1748,)
//│ ╟── while constraining:  (α1748 -> (α1756 -> (arg1758 | α1764)))  <!<  ((α1731,) -> α1732)
//│ ╟── while constraining:  ‹∀ 0. (α1630' -> (α1631' -> (arg1633' | α1648')))›  <!<  ((α1731,) -> α1732)
//│ ╟── while constraining:  ‹∀ 0. (α1630' -> (α1631' -> (arg1633' | α1648')))›  <!<  α1731
//│ ╟── while constraining:  ‹∀ 0. (α1630' -> (α1631' -> (arg1633' | α1648')))›  <!<  α1730
//│ ╟── while constraining:  α1713  <!<  α1730
//│ ╟── while constraining:  (α1713,)  <!<  (α1730,)
//│ ╟── while constraining:  (α1730 -> (α1738 -> (arg1740 | α1746)))  <!<  ((α1713,) -> α1714)
//│ ╟── while constraining:  ‹∀ 0. (α1630' -> (α1631' -> (arg1633' | α1648')))›  <!<  ((α1713,) -> α1714)
//│ ╟── while constraining:  ‹∀ 0. (α1630' -> (α1631' -> (arg1633' | α1648')))›  <!<  α1713
//│ ╟── while constraining:  ‹∀ 0. (α1630' -> (α1631' -> (arg1633' | α1648')))›  <!<  α1712
//│ ╟── while constraining:  α1695  <!<  α1712
//│ ╟── while constraining:  (α1695,)  <!<  (α1712,)
//│ ╟── while constraining:  (α1712 -> (α1720 -> (arg1722 | α1728)))  <!<  ((α1695,) -> α1696)
//│ ╟── while constraining:  ‹∀ 0. (α1630' -> (α1631' -> (arg1633' | α1648')))›  <!<  ((α1695,) -> α1696)
//│ ╟── while constraining:  ‹∀ 0. (α1630' -> (α1631' -> (arg1633' | α1648')))›  <!<  α1695
//│ ╟── while constraining:  ‹∀ 0. (α1630' -> (α1631' -> (arg1633' | α1648')))›  <!<  α1694
//│ ╟── while constraining:  α1677  <!<  α1694
//│ ╟── while constraining:  (α1677,)  <!<  (α1694,)
//│ ╟── while constraining:  (α1694 -> (α1702 -> (arg1704 | α1710)))  <!<  ((α1677,) -> α1678)
//│ ╟── while constraining:  ‹∀ 0. (α1630' -> (α1631' -> (arg1633' | α1648')))›  <!<  ((α1677,) -> α1678)
//│ ╟── while constraining:  ‹∀ 0. (α1630' -> (α1631' -> (arg1633' | α1648')))›  <!<  α1677
//│ ╟── while constraining:  ‹∀ 0. (α1630' -> (α1631' -> (arg1633' | α1648')))›  <!<  α1676
//│ ╟── while constraining:  (‹∀ 0. (α1630' -> (α1631' -> (arg1633' | α1648')))›,)  <!<  (α1676,)
//│ ╟── while constraining:  (α1676 -> (α1684 -> (arg1686 | α1692)))  <!<  ((‹∀ 0. (α1630' -> (α1631' -> (arg1633' | α1648')))›,) -> α1675)
//│ ╙── while constraining:  ‹∀ 0. (α1630' -> (α1631' -> (arg1633' | α1648')))›  <!<  ((‹∀ 0. (α1630' -> (α1631' -> (arg1633' | α1648')))›,) -> α1675)
//│ res: error


def eval2f_oops eval2 e = case e of {
  | Nega -> 0 - (eval2 e.arg)
  | _ -> eval1 eval2 e // should be: eval1f eval2 e
  }
//│ eval2f_oops: ('arg -> int & 'a -> 'rhs -> int & 'a -> 'lhs -> int & 'a) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'val}) | (Nega[?] with {arg: 'arg})) -> (int | 'val)

// :e
fix eval2f_oops e2
//│ res: error


