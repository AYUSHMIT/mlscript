
// --- Lit, Add ---


class Lit: { val: int }
class Add[E]: { lhs: E; rhs: E }
def lit val = Lit { val }
def add lhs rhs = Add { lhs; rhs }
//│ Defined class Lit
//│ Defined class Add[+E]
//│ lit: (int & 'val) -> (Lit with {val: 'val})
//│    = [Function: lit]
//│ add: ('lhs & 'E) -> ('E & 'rhs) -> (Add['E] with {lhs: 'lhs, rhs: 'rhs})
//│    = [Function: add]


:stats
def eval1 eval1 e = case e of {
  | Lit -> e.val
  | Add -> eval1 eval1 e.lhs + eval1 eval1 e.rhs
  }
//│ eval1: ('a -> 'rhs -> int & 'a -> 'lhs -> int & 'a) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'val})) -> (int | 'val)
//│      = [Function: eval1]
//│ constrain calls  : 36
//│ annoying  calls  : 0
//│ subtyping calls  : 55

:stats
def eval1f eval1 e = case e of {
  | Lit -> e.val
  | Add -> eval1 e.lhs + eval1 e.rhs
  }
//│ eval1f: ('rhs -> int & 'lhs -> int) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'val})) -> (int | 'val)
//│       = [Function: eval1f]
//│ constrain calls  : 32
//│ annoying  calls  : 0
//│ subtyping calls  : 52


e1 = add (lit 1) (add (lit 2) (lit 3))
//│ e1: Add[Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}} | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Add { lhs: Lit { val: 2 }, rhs: Lit { val: 3 } }
//│     }


:e
eval1 eval1 e1
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?val, ?lhs, ?rhs, ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i. ?a -> ?f -> (?val | ?i) <: (forall ?val, ?lhs, ?rhs, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r. ?j -> ?o -> (?val | ?r)) -> ?s` exceeded recursion depth limit (400)
//│ ║  l.49: 	eval1 eval1 e1
//│ ║        	^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α296
//│ ╟── while constraining:  α284  <!<  α296
//│ ╟── while constraining:  (α284,)  <!<  (α296,)
//│ ╟── while constraining:  (α296 -> (α303 -> (val305 | α307)))  <!<  ((α284,) -> α285)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α284,) -> α285)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α284
//│ ╟── while constraining:  α272  <!<  α284
//│ ╟── while constraining:  (α272,)  <!<  (α284,)
//│ ╟── while constraining:  (α284 -> (α291 -> (val293 | α295)))  <!<  ((α272,) -> α273)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α272,) -> α273)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α272
//│ ╟── while constraining:  α260  <!<  α272
//│ ╟── while constraining:  (α260,)  <!<  (α272,)
//│ ╟── while constraining:  (α272 -> (α279 -> (val281 | α283)))  <!<  ((α260,) -> α261)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α260,) -> α261)
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α176,) -> α177)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α176
//│ ╟── while constraining:  α164  <!<  α176
//│ ╟── while constraining:  (α164,)  <!<  (α176,)
//│ ╟── while constraining:  (α176 -> (α183 -> (val185 | α187)))  <!<  ((α164,) -> α165)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α164,) -> α165)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α164
//│ ╟── while constraining:  α152  <!<  α164
//│ ╟── while constraining:  (α152,)  <!<  (α164,)
//│ ╟── while constraining:  (α164 -> (α171 -> (val173 | α175)))  <!<  ((α152,) -> α153)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α152,) -> α153)
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α152
//│ ╟── while constraining:  (‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›,)  <!<  (α152,)
//│ ╟── while constraining:  (α152 -> (α159 -> (val161 | α163)))  <!<  ((‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›,) -> α151)
//│ ╙── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›,) -> α151)
//│ res: error
//│    = 6

:e
def eval1_fixed_1 = eval1 eval1
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?val, ?lhs, ?rhs, ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i. ?a -> ?f -> (?val | ?i) <: (forall ?val, ?lhs, ?rhs, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r. ?j -> ?o -> (?val | ?r)) -> ?s` exceeded recursion depth limit (400)
//│ ║  l.89: 	def eval1_fixed_1 = eval1 eval1
//│ ║        	                    ^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α473'
//│ ╟── while constraining:  α461'  <!<  α473'
//│ ╟── while constraining:  (α461',)  <!<  (α473',)
//│ ╟── while constraining:  (α473' -> (α480' -> (val482' | α484')))  <!<  ((α461',) -> α462')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α461',) -> α462')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α461'
//│ ╟── while constraining:  α449'  <!<  α461'
//│ ╟── while constraining:  (α449',)  <!<  (α461',)
//│ ╟── while constraining:  (α461' -> (α468' -> (val470' | α472')))  <!<  ((α449',) -> α450')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α449',) -> α450')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α449'
//│ ╟── while constraining:  α437'  <!<  α449'
//│ ╟── while constraining:  (α437',)  <!<  (α449',)
//│ ╟── while constraining:  (α449' -> (α456' -> (val458' | α460')))  <!<  ((α437',) -> α438')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α437',) -> α438')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α353',) -> α354')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α353'
//│ ╟── while constraining:  α341'  <!<  α353'
//│ ╟── while constraining:  (α341',)  <!<  (α353',)
//│ ╟── while constraining:  (α353' -> (α360' -> (val362' | α364')))  <!<  ((α341',) -> α342')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α341',) -> α342')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α341'
//│ ╟── while constraining:  α329'  <!<  α341'
//│ ╟── while constraining:  (α329',)  <!<  (α341',)
//│ ╟── while constraining:  (α341' -> (α348' -> (val350' | α352')))  <!<  ((α329',) -> α330')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((α329',) -> α330')
//│ ╟── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  α329'
//│ ╟── while constraining:  (‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›,)  <!<  (α329',)
//│ ╟── while constraining:  (α329' -> (α336' -> (val338' | α340')))  <!<  ((‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›,) -> α328')
//│ ╙── while constraining:  ‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›  <!<  ((‹∀ 0. (α53' -> (α54' -> (val56' | α65')))›,) -> α328')
//│ eval1_fixed_1: error
//│              = [Function (anonymous)]

eval1_fixed_1 e1
//│ res: error
//│    = 6


rec def eval1_fixed_2 = eval1f (fun x -> eval1f eval1_fixed_2 x)
//│ eval1_fixed_2: 'a -> int
//│   where
//│     'a <: Add[?] & {lhs: Add[?] & {lhs: 'a, rhs: 'a} | Lit, rhs: Add[?] & {lhs: 'a, rhs: 'a} | Lit} | Lit
//│              = [Function (anonymous)]

eval1_fixed_2 e1
//│ res: int
//│    = 6


:e
// Tying the know without a recursive def:
def eval1_fixed_3 =
  let fixed fixed = eval1f (fun x -> eval1f (fixed fixed) x)
  in fixed fixed
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?val, ?rhs, ?lhs, ?rhs0, ?lhs0, ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?rhs1, ?n, ?o, ?p, ?val0, ?q, ?lhs1, ?r, ?s, ?t, ?val1, ?u, ?v. ?a -> ?j <: (forall ?val, ?rhs, ?lhs, ?rhs0, ?lhs0, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1, ?i1, ?rhs2, ?j1, ?k1, ?l1, ?val2, ?m1, ?lhs2, ?n1, ?o1, ?p1, ?val3, ?q1, ?r1. ?w -> ?f1) -> ?s1` exceeded recursion depth limit (400)
//│ ║  l.148: 	  in fixed fixed
//│ ║         	     ^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 1. (α618'' -> α633'')›  <!<  α1043'
//│ ╟── while constraining:  α1012'  <!<  α1043'
//│ ╟── while constraining:  (α1012',)  <!<  (α1043',)
//│ ╟── while constraining:  (α1043' -> α1056')  <!<  ((α1012',) -> α1013')
//│ ╟── while constraining:  ‹∀ 1. (α618'' -> α633'')›  <!<  ((α1012',) -> α1013')
//│ ╟── while constraining:  ‹∀ 1. (α618'' -> α633'')›  <!<  α1012'
//│ ╟── while constraining:  α981'  <!<  α1012'
//│ ╟── while constraining:  (α981',)  <!<  (α1012',)
//│ ╟── while constraining:  (α1012' -> α1025')  <!<  ((α981',) -> α982')
//│ ╟── while constraining:  ‹∀ 1. (α618'' -> α633'')›  <!<  ((α981',) -> α982')
//│ ╟── while constraining:  ‹∀ 1. (α618'' -> α633'')›  <!<  α981'
//│ ╟── while constraining:  α950'  <!<  α981'
//│ ╟── while constraining:  (α950',)  <!<  (α981',)
//│ ╟── while constraining:  (α981' -> α994')  <!<  ((α950',) -> α951')
//│ ╟── while constraining:  ‹∀ 1. (α618'' -> α633'')›  <!<  ((α950',) -> α951')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 1. (α618'' -> α633'')›  <!<  ((α733',) -> α734')
//│ ╟── while constraining:  ‹∀ 1. (α618'' -> α633'')›  <!<  α733'
//│ ╟── while constraining:  α702'  <!<  α733'
//│ ╟── while constraining:  (α702',)  <!<  (α733',)
//│ ╟── while constraining:  (α733' -> α746')  <!<  ((α702',) -> α703')
//│ ╟── while constraining:  ‹∀ 1. (α618'' -> α633'')›  <!<  ((α702',) -> α703')
//│ ╟── while constraining:  ‹∀ 1. (α618'' -> α633'')›  <!<  α702'
//│ ╟── while constraining:  α671'  <!<  α702'
//│ ╟── while constraining:  (α671',)  <!<  (α702',)
//│ ╟── while constraining:  (α702' -> α715')  <!<  ((α671',) -> α672')
//│ ╟── while constraining:  ‹∀ 1. (α618'' -> α633'')›  <!<  ((α671',) -> α672')
//│ ╟── while constraining:  ‹∀ 1. (α618'' -> α633'')›  <!<  α671'
//│ ╟── while constraining:  (‹∀ 1. (α618'' -> α633'')›,)  <!<  (α671',)
//│ ╟── while constraining:  (α671' -> α684')  <!<  ((‹∀ 1. (α618'' -> α633'')›,) -> α670')
//│ ╙── while constraining:  ‹∀ 1. (α618'' -> α633'')›  <!<  ((‹∀ 1. (α618'' -> α633'')›,) -> α670')
//│ eval1_fixed_3: error
//│              = [Function (anonymous)]

eval1_fixed_3 e1
//│ res: error
//│    = 6



// --- Nega ---


class Nega[E]: { arg: E }
def nega arg = Nega { arg }
//│ Defined class Nega[+E]
//│ nega: 'arg -> Nega['arg]
//│     = [Function: nega]


def eval2 eval2 e = case e of {
  | Nega -> 0 - (eval2 eval2 e.arg)
  | _ -> eval1 eval2 e
  }
//│ eval2: ('a -> 'arg -> int & 'a -> 'rhs -> int & 'a -> 'lhs -> int & 'a) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'val}) | (Nega[?] with {arg: 'arg})) -> (int | 'val)
//│      = [Function: eval2]

def eval2f eval2 e = case e of {
  | Nega -> 0 - (eval2 e.arg)
  | _ -> eval1f eval2 e
  }
//│ eval2f: ('arg -> int & 'rhs -> int & 'lhs -> int) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'val}) | (Nega[?] with {arg: 'arg})) -> (int | 'val)
//│       = [Function: eval2f]


e2 = add (lit 1) (nega e1)
//│ e2: Add[Lit & {val: 1} | Nega[Add[Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}} | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}]] with {lhs: Lit & {val: 1}, rhs: Nega[Add[Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}} | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}]}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Nega { arg: Add { lhs: [Lit], rhs: [Add] } }
//│     }


:e
def eval2_fixed_1 = eval2 eval2
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?arg, ?rhs, ?lhs, ?val, ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q. ?a -> ?i -> (?o | ?p) <: (forall ?arg, ?rhs, ?lhs, ?val, ?r, ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1. ?r -> ?z -> (?f1 | ?g1)) -> ?i1` exceeded recursion depth limit (400)
//│ ║  l.227: 	def eval2_fixed_1 = eval2 eval2
//│ ║         	                    ^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. (α1143' -> (α1144' -> (α1150' | α1165')))›  <!<  α1446'
//│ ╟── while constraining:  α1426'  <!<  α1446'
//│ ╟── while constraining:  (α1426',)  <!<  (α1446',)
//│ ╟── while constraining:  (α1446' -> (α1457' -> (α1464' | α1465')))  <!<  ((α1426',) -> α1427')
//│ ╟── while constraining:  ‹∀ 0. (α1143' -> (α1144' -> (α1150' | α1165')))›  <!<  ((α1426',) -> α1427')
//│ ╟── while constraining:  ‹∀ 0. (α1143' -> (α1144' -> (α1150' | α1165')))›  <!<  α1426'
//│ ╟── while constraining:  ‹∀ 0. (α1143' -> (α1144' -> (α1150' | α1165')))›  <!<  α1425'
//│ ╟── while constraining:  α1405'  <!<  α1425'
//│ ╟── while constraining:  (α1405',)  <!<  (α1425',)
//│ ╟── while constraining:  (α1425' -> (α1436' -> (α1443' | α1444')))  <!<  ((α1405',) -> α1406')
//│ ╟── while constraining:  ‹∀ 0. (α1143' -> (α1144' -> (α1150' | α1165')))›  <!<  ((α1405',) -> α1406')
//│ ╟── while constraining:  ‹∀ 0. (α1143' -> (α1144' -> (α1150' | α1165')))›  <!<  α1405'
//│ ╟── while constraining:  ‹∀ 0. (α1143' -> (α1144' -> (α1150' | α1165')))›  <!<  α1404'
//│ ╟── while constraining:  α1384'  <!<  α1404'
//│ ╟── while constraining:  (α1384',)  <!<  (α1404',)
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  α1300'  <!<  α1320'
//│ ╟── while constraining:  (α1300',)  <!<  (α1320',)
//│ ╟── while constraining:  (α1320' -> (α1331' -> (α1338' | α1339')))  <!<  ((α1300',) -> α1301')
//│ ╟── while constraining:  ‹∀ 0. (α1143' -> (α1144' -> (α1150' | α1165')))›  <!<  ((α1300',) -> α1301')
//│ ╟── while constraining:  ‹∀ 0. (α1143' -> (α1144' -> (α1150' | α1165')))›  <!<  α1300'
//│ ╟── while constraining:  ‹∀ 0. (α1143' -> (α1144' -> (α1150' | α1165')))›  <!<  α1299'
//│ ╟── while constraining:  α1279'  <!<  α1299'
//│ ╟── while constraining:  (α1279',)  <!<  (α1299',)
//│ ╟── while constraining:  (α1299' -> (α1310' -> (α1317' | α1318')))  <!<  ((α1279',) -> α1280')
//│ ╟── while constraining:  ‹∀ 0. (α1143' -> (α1144' -> (α1150' | α1165')))›  <!<  ((α1279',) -> α1280')
//│ ╟── while constraining:  ‹∀ 0. (α1143' -> (α1144' -> (α1150' | α1165')))›  <!<  α1279'
//│ ╟── while constraining:  ‹∀ 0. (α1143' -> (α1144' -> (α1150' | α1165')))›  <!<  α1278'
//│ ╟── while constraining:  (‹∀ 0. (α1143' -> (α1144' -> (α1150' | α1165')))›,)  <!<  (α1278',)
//│ ╟── while constraining:  (α1278' -> (α1289' -> (α1296' | α1297')))  <!<  ((‹∀ 0. (α1143' -> (α1144' -> (α1150' | α1165')))›,) -> α1277')
//│ ╙── while constraining:  ‹∀ 0. (α1143' -> (α1144' -> (α1150' | α1165')))›  <!<  ((‹∀ 0. (α1143' -> (α1144' -> (α1150' | α1165')))›,) -> α1277')
//│ eval2_fixed_1: error
//│              = [Function (anonymous)]

eval2_fixed_1 e1
eval2_fixed_1 e2
//│ res: error
//│    = 6
//│ res: error
//│    = -5

// FIXME strange type
// :e
def fix f = let fixed = fun x -> f (fun v -> (x x) v) in fixed fixed
//│ fix: ((forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'a -> 'b -> 'c)) -> 'd) -> 'd
//│    = [Function: fix]

def eval2_fixed_2 = fix eval2f
//│ eval2_fixed_2: 'a -> int
//│   where
//│     'a <: Add[?] & {lhs: 'a, rhs: 'a} | Lit | Nega[?] & {arg: 'a}
//│              = [Function (anonymous)]

eval2_fixed_2 e1
eval2_fixed_2 e2
//│ res: int
//│    = 6
//│ res: int
//│    = -5




// === === === ERROR CASES === === === //



// FIXME should be a code-gen error
:re
rec def eval1_fixed = eval1f (eval1f eval1_fixed)
//│ eval1_fixed: 'a -> int
//│   where
//│     'a <: Add[?] & {lhs: 'a, rhs: 'a} | Lit
//│ Runtime error:
//│   ReferenceError: eval1_fixed is not defined

rec def eval1_fixed() = eval1f (eval1f (eval1_fixed()))
//│ eval1_fixed: () -> 'a -> int
//│   where
//│     'a <: Add[?] & {lhs: 'a, rhs: 'a} | Lit
//│            = [Function: eval1_fixed1]

:re
eval1_fixed() e1
//│ res: int
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded



:ShowRelativeLineNums
:AllowTypeErrors



def eval1_fixed = eval1f (fun x -> eval1f eval1f x)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	def eval1_fixed = eval1f (fun x -> eval1f eval1f x)
//│ ║        	                                   ^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (?val | ?b)` is not an instance of type `int`
//│ ║  l.29: 	def eval1f eval1 e = case e of {
//│ ║        	                 ^^^^^^^^^^^^^^^
//│ ║  l.30: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.32: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ╙──      	                         ^^^^^^^^^^^
//│ eval1_fixed: (Add[?] & {lhs: Add[?] & {lhs: nothing -> int, rhs: nothing -> int} | Lit, rhs: Add[?] & {lhs: nothing -> int, rhs: nothing -> int} | Lit} | (Lit with {val: 'val})) -> (int | 'val)

rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (?val | ?b)` does not match type `Add[?] & ?c | Lit & ?d`
//│ ║  l.29: 	def eval1f eval1 e = case e of {
//│ ║        	                 ^^^^^^^^^^^^^^^
//│ ║  l.30: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.32: 	  }
//│ ║        	^^^
//│ ╟── but it flows into application with expected type `Add[?] & ?e | Lit & ?f`
//│ ║  l.+1: 	rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.29: 	def eval1f eval1 e = case e of {
//│ ╙──      	                          ^
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` is not a function
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	           ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ║        	                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ╙──      	                                       ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` is not a function
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	           ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ║        	                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f (fun x -> eval1_fixed eval1_fixed x)
//│ ╙──      	                                       ^^^^^^^^^^^^^^^^^^^^^^^
//│ eval1_fixed: ((Add[?] with {lhs: 'a, rhs: 'b}) | (Lit with {val: 'b -> int & 'a -> int & 'val})) -> (int | 'val)

:e
rec def eval1_fixed = eval1f eval1_fixed e1
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f eval1_fixed e1
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` is not a function
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	           ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into application with expected type `?rhs -> ?a`
//│ ║  l.+1: 	rec def eval1_fixed = eval1f eval1_fixed e1
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	                         ^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f eval1_fixed e1
//│ ╙──      	                             ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in binding of application:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f eval1_fixed e1
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── operator application of type `int` is not a function
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	           ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into application with expected type `?lhs -> ?a`
//│ ║  l.+1: 	rec def eval1_fixed = eval1f eval1_fixed e1
//│ ║        	                      ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.31: 	  | Add -> eval1 e.lhs + eval1 e.rhs
//│ ║        	           ^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.+1: 	rec def eval1_fixed = eval1f eval1_fixed e1
//│ ╙──      	                             ^^^^^^^^^^^
//│ eval1_fixed: int


def eval2_broken eval2 e = case e of {
  | Nega -> e.arg
  | _ -> eval1 eval2 e
  }
//│ eval2_broken: ('a -> 'rhs -> int & 'a -> 'lhs -> int & 'a) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'arg}) | (Nega[?] with {arg: 'arg})) -> ('arg | int)

:e
eval2_broken eval2_broken e2
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?arg, ?rhs, ?lhs, ?val, ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n. ?a -> ?g -> (?arg | ?m) <: (forall ?arg, ?rhs, ?lhs, ?val, ?o, ?p, ?q, ?r, ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1. ?o -> ?u -> (?arg | ?a1)) -> ?c1` exceeded recursion depth limit (400)
//│ ║  l.+1: 	eval2_broken eval2_broken e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. (α2015' -> (α2016' -> (arg2018' | α2033')))›  <!<  α2205
//│ ╟── while constraining:  α2188  <!<  α2205
//│ ╟── while constraining:  (α2188,)  <!<  (α2205,)
//│ ╟── while constraining:  (α2205 -> (α2213 -> (arg2215 | α2221)))  <!<  ((α2188,) -> α2189)
//│ ╟── while constraining:  ‹∀ 0. (α2015' -> (α2016' -> (arg2018' | α2033')))›  <!<  ((α2188,) -> α2189)
//│ ╟── while constraining:  ‹∀ 0. (α2015' -> (α2016' -> (arg2018' | α2033')))›  <!<  α2188
//│ ╟── while constraining:  ‹∀ 0. (α2015' -> (α2016' -> (arg2018' | α2033')))›  <!<  α2187
//│ ╟── while constraining:  α2170  <!<  α2187
//│ ╟── while constraining:  (α2170,)  <!<  (α2187,)
//│ ╟── while constraining:  (α2187 -> (α2195 -> (arg2197 | α2203)))  <!<  ((α2170,) -> α2171)
//│ ╟── while constraining:  ‹∀ 0. (α2015' -> (α2016' -> (arg2018' | α2033')))›  <!<  ((α2170,) -> α2171)
//│ ╟── while constraining:  ‹∀ 0. (α2015' -> (α2016' -> (arg2018' | α2033')))›  <!<  α2170
//│ ╟── while constraining:  ‹∀ 0. (α2015' -> (α2016' -> (arg2018' | α2033')))›  <!<  α2169
//│ ╟── while constraining:  α2152  <!<  α2169
//│ ╟── while constraining:  (α2152,)  <!<  (α2169,)
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  α2080  <!<  α2097
//│ ╟── while constraining:  (α2080,)  <!<  (α2097,)
//│ ╟── while constraining:  (α2097 -> (α2105 -> (arg2107 | α2113)))  <!<  ((α2080,) -> α2081)
//│ ╟── while constraining:  ‹∀ 0. (α2015' -> (α2016' -> (arg2018' | α2033')))›  <!<  ((α2080,) -> α2081)
//│ ╟── while constraining:  ‹∀ 0. (α2015' -> (α2016' -> (arg2018' | α2033')))›  <!<  α2080
//│ ╟── while constraining:  ‹∀ 0. (α2015' -> (α2016' -> (arg2018' | α2033')))›  <!<  α2079
//│ ╟── while constraining:  α2062  <!<  α2079
//│ ╟── while constraining:  (α2062,)  <!<  (α2079,)
//│ ╟── while constraining:  (α2079 -> (α2087 -> (arg2089 | α2095)))  <!<  ((α2062,) -> α2063)
//│ ╟── while constraining:  ‹∀ 0. (α2015' -> (α2016' -> (arg2018' | α2033')))›  <!<  ((α2062,) -> α2063)
//│ ╟── while constraining:  ‹∀ 0. (α2015' -> (α2016' -> (arg2018' | α2033')))›  <!<  α2062
//│ ╟── while constraining:  ‹∀ 0. (α2015' -> (α2016' -> (arg2018' | α2033')))›  <!<  α2061
//│ ╟── while constraining:  (‹∀ 0. (α2015' -> (α2016' -> (arg2018' | α2033')))›,)  <!<  (α2061,)
//│ ╟── while constraining:  (α2061 -> (α2069 -> (arg2071 | α2077)))  <!<  ((‹∀ 0. (α2015' -> (α2016' -> (arg2018' | α2033')))›,) -> α2060)
//│ ╙── while constraining:  ‹∀ 0. (α2015' -> (α2016' -> (arg2018' | α2033')))›  <!<  ((‹∀ 0. (α2015' -> (α2016' -> (arg2018' | α2033')))›,) -> α2060)
//│ res: error


def eval2f_oops eval2 e = case e of {
  | Nega -> 0 - (eval2 e.arg)
  | _ -> eval1 eval2 e // should be: eval1f eval2 e
  }
//│ eval2f_oops: ('arg -> int & 'a -> 'rhs -> int & 'a -> 'lhs -> int & 'a) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'val}) | (Nega[?] with {arg: 'arg})) -> (int | 'val)

// :e
fix eval2f_oops e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	fix eval2f_oops e2
//│ ║        	^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> ?b` does not match type `Add[?] & ?c | Lit & ?d`
//│ ║  l.275: 	def fix f = let fixed = fun x -> f (fun v -> (x x) v) in fixed fixed
//│ ║         	                                    ^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.18: 	def eval1 eval1 e = case e of {
//│ ║        	                         ^
//│ ╟── from reference:
//│ ║  l.473: 	def eval2f_oops eval2 e = case e of {
//│ ╙──       	                               ^
//│ res: error | int


