// Example from Code reuse through polymorphic variants

//************************** PRELIMINARIES *************************

class NotFound
class Success: { result: anything }
//│ Defined class NotFound
//│ Defined class Success

def NotFound = NotFound {}
def Success result = Success { result }
//│ NotFound: NotFound
//│         = [Function: NotFound1]
//│ Success: 'result -> (Success with {result: 'result})
//│        = [Function: Success1]

type Tuple[A, B] = (A, B)
//│ Defined type alias Tuple[+A, +B]

def Tuple l r = (l, r)
//│ Tuple: 'a -> 'b -> ('a, 'b,)
//│      = [Function: Tuple]

class Nil
class Cons[A]: { head: A; tail: List[A] }
type List[A] = Nil | Cons[A]
//│ Defined class Nil
//│ Defined class Cons[+A]
//│ Defined type alias List[+A]

def Nil = Nil {}
//│ Nil: Nil
//│    = [Function: Nil1]

def Cons head tail = Cons { head; tail }
//│ Cons: ('head & 'A) -> (List['A] & 'tail) -> (Cons['A] with {head: 'head, tail: 'tail})
//│     = [Function: Cons1]

def eq: string -> string -> bool
//│ eq: string -> string -> bool
//│   = <missing implementation>

rec def list_assoc s l = case l of {
  | Cons ->
      if eq l.head._1 s then Success l.head._2
      else list_assoc s l.tail
  | Nil -> NotFound
  }
//│ list_assoc: string -> 'a -> (NotFound | (Success with {result: 'result}))
//│   where
//│     'a <: (Cons[?] with {head: {_1: string, _2: 'result}, tail: 'a}) | Nil
//│           = <no result>
//│             eq is not implemented

list_assoc "2" (Cons (Tuple "2" 1) Nil )
//│ res: NotFound | Success & {result: 1}
//│    = <no result>
//│      list_assoc and eq are not implemented

// ***************************** Var *******************************

class Expr
class Lambda
//│ Defined class Expr
//│ Defined class Lambda

class Var: Lambda & { name: string }
//│ Defined class Var

def eval_var sub v = case v of {
  | Var -> let res = list_assoc v.name sub in case res of {
          | NotFound -> v
          | Success -> res.result
          }
  }
//│ eval_var: 'a -> (Var & 'result) -> 'result
//│   where
//│     'a <: (Cons[?] with {head: {_1: string, _2: 'result}, tail: 'a}) | Nil
//│         = <no result>
//│           list_assoc and eq are not implemented

// *************************** Lambda ********************************

class Abs[a]: Lambda & { name: string; body: a }
class App[a]: Lambda & { lhs: a; rhs: a }
//│ Defined class Abs[+a]
//│ Defined class App[+a]

:js
def incr: {a: int} -> unit
// def incr x = x.a <- x.a + 1
//│ // Query 1 is empty
//│ // End of generated code
//│ incr: {a: int} -> unit
//│     = <missing implementation>

:js
def gensym: () -> (unit, {a: 'a},)
// def gensym = let n = { mut a = 0 } in fun () -> (incr n, n)
//│ // Query 1 is empty
//│ // End of generated code
//│ gensym: () -> (unit, {a: nothing},)
//│       = <missing implementation>

def int_to_string: int -> string
//│ int_to_string: int -> string
//│              = <missing implementation>

def eval_lambda eval_rec subst v = case v of {
  | Var -> eval_var subst v
  | App -> let l2 = eval_rec subst v.lhs in
    let l1 = eval_rec subst v.rhs in
    case l1 of {
    | Abs -> eval_rec (Cons (Tuple l1.name l2) Nil) l1.body
    | _ -> App { lhs = l1; rhs = l2 }
    }
  | Abs -> let new_name = int_to_string ((gensym ())._2.a) in
    Abs { name = new_name;
          body = eval_rec (Cons (Tuple v.name (Var { name = new_name })) subst) v.body }
  }
//│ eval_lambda: ('tail -> 'lhs -> 'a & 'tail -> 'rhs -> ((Abs[?] with {body: 'body, name: 'b}) | 'lhs0 & ~#Abs) & (Cons[('c, Var with {name: forall 'd. string | 'd},) | 'A] with {head: ('c, Var with {name: forall 'd. string | 'd},), tail: 'tail}) -> 'body0 -> 'body1 & (Cons[('b, forall 'e. 'e | 'a,)] with {tail: Nil}) -> 'body -> 'result) -> ('f & List['A] & 'tail) -> ((Abs[?] with {body: 'body0, name: 'c}) | (App[?] with {lhs: 'lhs, rhs: 'rhs}) | Var & 'result) -> ((Abs['body1] with {name: forall 'd. string | 'd}) | (App[forall 'e. 'lhs0 | 'e | 'a] with {lhs: 'lhs0, rhs: forall 'e. 'e | 'a}) | 'result)
//│   where
//│     'f <: (Cons[?] with {head: {_1: string, _2: 'result}, tail: 'f}) | Nil
//│            = <no result>
//│              eval_var, list_assoc and eq are not implemented

rec def eval1 subst = eval_lambda eval1 subst
//│ eval1: (List[?] & 'tail) -> 'b -> 'a
//│   where
//│     'tail <: (Cons[?] with {head: {_1: string, _2: 'result}, tail: 'tail}) | Nil
//│     'result :> 'rhs | (Var with {name: forall 'c. string | 'c})
//│             <: 'b & (Abs[?] & 'd | 'lhs & ~#Abs)
//│     'rhs :> 'a
//│     'a :> (Abs['a] with {name: forall 'c. string | 'c}) | (App['a0] with {lhs: 'lhs, rhs: 'rhs}) | 'result | 'e
//│     'a0 :> (App['a0] with {lhs: 'lhs, rhs: 'rhs}) | 'rhs | (Var with {name: forall 'c. string | 'c})
//│     'lhs :> (App['a0] with {lhs: 'lhs, rhs: 'rhs}) | (Var with {name: forall 'c. string | 'c})
//│          <: 'a0 & 'b
//│     'b <: Abs[?] & {body: 'b} | App[?] & {lhs: 'b, rhs: 'b} | Var & 'e
//│     'e :> Var with {name: forall 'c. string | 'c}
//│        <: 'b & (Abs[?] & 'd | {name: string} & 'lhs & ~#Abs)
//│     'd <: {body: 'b, name: string}
//│      = <no result>
//│        eval_lambda, eval_var, list_assoc and eq are not implemented

// ------------- OCaml's type -------------
// val eval_lambda :
//   ((string *
//     ([> `Abs of string * 'a | `App of 'a * 'a | `Var of string ] as 'a))
//   list -> 'a -> 'a) ->
//   (string * 'a) list ->
//   [< `Abs of string * 'a | `App of 'a * 'a | `Var of string ] -> 'a = <fun>
//
//   val eval1 :
//   (string * ([ `Abs of string * 'a | `App of 'a * 'a | `Var of string ] as 'a))
//   list -> 'a -> 'a = <fun>

// ************************* Expr ******************************

class Num: Expr & { num: int }
class Add[a]: Expr & { lhs: a; rhs: a }
class Mul[a]: Expr & { lhs: a; rhs: a }
//│ Defined class Num
//│ Defined class Add[+a]
//│ Defined class Mul[+a]

def map_expr f v = case v of {
  | Var -> v
  | Num -> v
  | Add -> Add { lhs = f v.lhs; rhs = f v.rhs }
  | Mul -> Mul { lhs = f v.lhs; rhs = f v.rhs }
  }
//│ map_expr: ('lhs -> ('a & 'lhs0) & 'rhs -> ('rhs0 & 'a) & 'rhs1 -> ('rhs2 & 'a0) & 'lhs1 -> ('a0 & 'lhs2)) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Mul[?] with {lhs: 'lhs1, rhs: 'rhs1}) | 'b & (Num | Var)) -> ((Add['a] with {lhs: 'lhs0, rhs: 'rhs0}) | (Mul['a0] with {lhs: 'lhs2, rhs: 'rhs2}) | 'b)
//│         = [Function: map_expr]

rec def eval_expr eval_rec subst v =
  let vv = map_expr (eval_rec subst) v in
  case vv of {
    | Var -> eval_var subst vv
    | Add -> let vv1 = vv.lhs in
              let vv2 = vv.rhs in
              case vv1 of {
              | Num -> case vv2 of {
                | Num -> Num { num = vv1.num + vv2.num }
                | _ -> vv
                }
              | _ -> vv
              }
    | Mul -> let vv1 = vv.lhs in
              let vv2 = vv.rhs in
              case vv1 of {
              | Num -> case vv2 of {
                | Num -> Num { num = vv1.num * vv2.num }
                | _ -> vv
                }
              | _ -> vv
              }
    | Num -> vv // _ -> vv
    }
//│ eval_expr: ('b -> ('lhs -> ('a & 'lhs0 & (~#Num | Num)) & 'rhs -> ('rhs0 & 'a & (Num | ~#Num)) & 'rhs1 -> ('a0 & 'rhs2 & (Num | ~#Num)) & 'lhs1 -> ('a0 & 'lhs2 & (~#Num | Num)))) -> ('b & 'c) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Mul[?] with {lhs: 'lhs1, rhs: 'rhs1}) | Num & 'result | Var & 'result) -> ((Add['a] with {lhs: 'lhs0, rhs: 'rhs0}) | (Mul['a0] with {lhs: 'lhs2, rhs: 'rhs2}) | Num | 'result)
//│   where
//│     'c <: (Cons[?] with {head: {_1: string, _2: 'result}, tail: 'c}) | Nil
//│          = <no result>
//│            eval_var, list_assoc and eq are not implemented

rec def eval2 subst = eval_expr eval2 subst
//│ eval2: 'a -> 'b -> 'result
//│   where
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Mul[?] & {lhs: 'b, rhs: 'b} | Num & 'result | Var & 'result
//│     'a <: (Cons[?] with {head: {_1: string, _2: 'result & (Num | ~#Num)}, tail: 'a}) | Nil
//│     'result :> Num | Add['result] | Mul['result]
//│      = <no result>
//│        eval_expr, eval_var, list_assoc and eq are not implemented


// ------------- OCaml's type -------------
// val map_expr :
//   ('a -> 'b) ->
//   [< `Add of 'a * 'a | `Mult of 'a * 'a | `Num of 'c | `Var of string ] ->
//   [> `Add of 'b * 'b | `Mult of 'b * 'b | `Num of 'c | `Var of string ] = <fun>

// val eval_expr :
//   ((string *
//     ([> `Add of ([> `Num of int ] as 'b) * 'b
//       | `Mult of 'b * 'b
//       | `Num of int
//       | `Var of string ]
//      as 'a))
//    list -> 'c -> 'b) ->
//   (string * 'a) list ->
//   [< `Add of 'c * 'c | `Mult of 'c * 'c | `Num of int | `Var of string ] -> 'a =
//   <fun>
// val eval2 :
//   (string *
//    ([> `Add of 'a * 'a | `Mult of 'a * 'a | `Num of int | `Var of string ]
//     as 'a))
//   list ->
//   ([< `Add of 'b * 'b | `Mult of 'b * 'b | `Num of int | `Var of string ] as 'b) ->
//   'a = <fun>


// ************************** Mix things *******************************

def eval_lexpr eval_rec subst v = case v of {
  | Lambda -> eval_lambda eval_rec subst v
  | Expr -> eval_expr eval_rec subst v
  }
//│ eval_lexpr: ('tail -> ('lhs -> ('lhs0 & 'a & (~#Num | Num)) & 'rhs -> ('rhs0 & 'a & (Num | ~#Num)) & 'rhs1 -> ('rhs2 & 'a0 & (Num | ~#Num)) & 'lhs1 -> ('a0 & 'lhs2 & (~#Num | Num))) & 'tail -> 'lhs3 -> 'b & 'tail -> 'rhs3 -> ((Abs[?] with {body: 'body, name: 'c}) | 'lhs4 & ~#Abs) & (Cons[('d, Var with {name: forall 'e. string | 'e},) | 'A] with {head: ('d, Var with {name: forall 'e. string | 'e},), tail: 'tail}) -> 'body0 -> 'body1 & (Cons[('c, forall 'f. 'f | 'b,)] with {tail: Nil}) -> 'body -> 'result) -> ('g & List['A] & 'tail) -> ((Abs[?] with {body: 'body0, name: 'd}) | (Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (App[?] with {lhs: 'lhs3, rhs: 'rhs3}) | (Mul[?] with {lhs: 'lhs1, rhs: 'rhs1}) | Num & 'result | Var & 'result) -> ((Abs['body1] with {name: forall 'e. string | 'e}) | (Add['a] with {lhs: 'lhs0, rhs: 'rhs0}) | (App[forall 'f. 'lhs4 | 'f | 'b] with {lhs: 'lhs4, rhs: forall 'f. 'f | 'b}) | (Mul['a0] with {lhs: 'lhs2, rhs: 'rhs2}) | Num | 'result)
//│   where
//│     'g <: (Cons[?] with {head: {_1: string, _2: 'result}, tail: 'g}) | Nil
//│           = <no result>
//│             eval_lambda, eval_var, list_assoc and eq are not implemented

rec def eval3 subst = eval_lexpr eval3 subst
//│ eval3: (List[?] & 'tail) -> 'b -> 'a
//│   where
//│     'tail <: (Cons[?] with {head: {_1: string, _2: 'result}, tail: 'tail}) | Nil
//│     'result :> 'rhs | (Var with {name: forall 'c. string | 'c}) | Num
//│             <: 'b & (Abs[?] & 'd | 'lhs & (Num | ~#Abs & ~#Num))
//│     'rhs :> 'a
//│     'a :> (Abs['a] with {name: forall 'c. string | 'c}) | (App['a0] with {lhs: 'lhs, rhs: 'rhs}) | Num | 'result | 'e | 'f
//│     'a0 :> (Add['a] with {lhs: 'a, rhs: 'a}) | (App['a0] with {lhs: 'lhs, rhs: 'rhs}) | (Mul['a] with {lhs: 'a, rhs: 'a}) | Num | 'rhs | (Var with {name: forall 'c. string | 'c})
//│     'lhs :> (Add['a] with {lhs: 'a, rhs: 'a}) | (App['a0] with {lhs: 'lhs, rhs: 'rhs}) | (Mul['a] with {lhs: 'a, rhs: 'a}) | Num | (Var with {name: forall 'c. string | 'c})
//│          <: 'b & 'a0
//│     'b <: Abs[?] & {body: 'b} | Add[?] & {lhs: 'b, rhs: 'b} | App[?] & {lhs: 'b, rhs: 'b} | Mul[?] & {lhs: 'b, rhs: 'b} | Num & (Add[?] & 'f | Mul[?] & 'f | Num & 'result | Var & 'e) | Var & 'e
//│     'e :> Var with {name: forall 'c. string | 'c}
//│        <: 'b & (Abs[?] & 'd | 'lhs & (Num & {name: string} | {name: string} & ~#Abs & ~#Num))
//│     'f :> (Mul['a] with {lhs: 'a, rhs: 'a}) | (Add['a] with {lhs: 'a, rhs: 'a})
//│        <: 'b & (Abs[?] & {lhs: anything, rhs: anything} & 'd | 'lhs & (Num & {lhs: anything, rhs: anything} | {lhs: anything, rhs: anything} & ~#Abs & ~#Num))
//│     'd <: {body: 'b, name: string}
//│      = <no result>
//│        eval_lexpr, eval_lambda, eval_var, list_assoc and eq are not implemented

// ------------- OCaml's type -------------
// val eval_lexpr :
//   ((string *
//     ([> `Abs of string * 'a
//       | `Add of 'a * 'a
//       | `App of 'a * 'a
//       | `Mult of 'a * 'a
//       | `Num of int
//       | `Var of string ]
//      as 'a))
//    list -> 'a -> 'a) ->
//   (string * 'a) list ->
//   [< `Abs of string * 'a
//    | `Add of 'a * 'a
//    | `App of 'a * 'a
//    | `Mult of 'a * 'a
//    | `Num of int
//    | `Var of string ] ->
//   'a = <fun>
//
// val eval3 :
//   (string *
//    ([ `Abs of string * 'a
//     | `Add of 'a * 'a
//     | `App of 'a * 'a
//     | `Mult of 'a * 'a
//     | `Num of int
//     | `Var of string ] as 'a))
//   list -> 'a -> 'a = <fun>

// ************************** Tests *******************************

eval3 Nil (Var { name = "s" })
//│ res: 'result
//│   where
//│     'result :> (Abs['result] with {name: forall 'b. string | 'b}) | (App['a] with {lhs: 'lhs, rhs: 'rhs}) | Num | (Var with {name: forall 'b. string | 'b}) | 'c | 'rhs
//│     'a :> 'lhs | 'rhs
//│     'lhs :> (App['a] with {lhs: 'lhs, rhs: 'rhs}) | Num | (Var with {name: forall 'b. string | 'b}) | 'c
//│     'c :> Mul['result] | Add['result]
//│     'rhs :> 'result
//│    = <no result>
//│      eval3, eval_lexpr, eval_lambda, eval_var, list_assoc and eq are not implemented
// ------------- OCaml's type -------------
// - : [ `Abs of string * 'a
//     | `Add of 'a * 'a
//     | `App of 'a * 'a
//     | `Mult of 'a * 'a
//     | `Num of int
//     | `Var of string ] as 'a
// = `Var "s"


eval3 Nil (Abs { name = "s"; body = Var { name = "s" } })
//│ res: 'result
//│   where
//│     'result :> (Abs['result] with {name: forall 'b. string | 'b}) | (App['a] with {lhs: 'lhs, rhs: 'rhs}) | Num | (Var with {name: forall 'b. string | 'b}) | 'c | 'rhs
//│     'a :> 'lhs | 'rhs
//│     'lhs :> (App['a] with {lhs: 'lhs, rhs: 'rhs}) | Num | (Var with {name: forall 'b. string | 'b}) | 'c
//│     'c :> Mul['result] | Add['result]
//│     'rhs :> 'result
//│    = <no result>
//│      eval3, eval_lexpr, eval_lambda, eval_var, list_assoc and eq are not implemented

eval2 Nil (Num { num = 1 })
//│ res: 'rhs
//│   where
//│     'rhs :> Mul['rhs] | Add['rhs] | Num
//│    = <no result>
//│      eval2, eval_expr, eval_var, list_assoc and eq are not implemented

eval3 Nil (Num { num = 1 })
//│ res: 'result
//│   where
//│     'result :> (Abs['result] with {name: forall 'b. string | 'b}) | (App['a] with {lhs: 'lhs, rhs: 'rhs}) | Num | (Var with {name: forall 'b. string | 'b}) | 'c | 'rhs
//│     'a :> 'lhs | 'rhs
//│     'lhs :> (App['a] with {lhs: 'lhs, rhs: 'rhs}) | Num | (Var with {name: forall 'b. string | 'b}) | 'c
//│     'c :> Mul['result] | Add['result]
//│     'rhs :> 'result
//│    = <no result>
//│      eval3, eval_lexpr, eval_lambda, eval_var, list_assoc and eq are not implemented

eval3 Nil (App { lhs = Num {num = 0}; rhs = Num {num = 0}})
//│ res: 'result
//│   where
//│     'result :> (Abs['result] with {name: forall 'b. string | 'b}) | (App['a] with {lhs: 'lhs, rhs: 'rhs}) | Num | (Var with {name: forall 'b. string | 'b}) | 'c | 'rhs
//│     'a :> 'lhs | 'rhs
//│     'lhs :> (App['a] with {lhs: 'lhs, rhs: 'rhs}) | Num | (Var with {name: forall 'b. string | 'b}) | 'c
//│     'c :> Mul['result] | Add['result]
//│     'rhs :> 'result
//│    = <no result>
//│      eval3, eval_lexpr, eval_lambda, eval_var, list_assoc and eq are not implemented

eval3 Nil (Abs { name = "s"; body = Add { lhs = Var { name = "s" }; rhs = Num { num = 1 } } })
//│ res: 'result
//│   where
//│     'result :> (Abs['result] with {name: forall 'b. string | 'b}) | (App['a] with {lhs: 'lhs, rhs: 'rhs}) | Num | (Var with {name: forall 'b. string | 'b}) | 'c | 'rhs
//│     'a :> 'lhs | 'rhs
//│     'lhs :> (App['a] with {lhs: 'lhs, rhs: 'rhs}) | Num | (Var with {name: forall 'b. string | 'b}) | 'c
//│     'c :> Mul['result] | Add['result]
//│     'rhs :> 'result
//│    = <no result>
//│      eval3, eval_lexpr, eval_lambda, eval_var, list_assoc and eq are not implemented


// *************************************

def eval_lexpr' eval_rec subst v = case v of {
  | Var -> eval_var eval_rec subst v
  | Abs -> eval_lambda eval_rec subst v
  | App -> eval_lambda eval_rec subst v
  | Num -> eval_expr eval_rec subst v
  | Add -> eval_expr eval_rec subst v
  | Mul -> eval_expr eval_rec subst v
  }
//│ eval_lexpr': nothing -> nothing -> ((Abs[?] with {body: anything, name: anything}) | (Add[?] with {lhs: anything, rhs: anything}) | (App[?] with {lhs: anything, rhs: anything}) | (Mul[?] with {lhs: anything, rhs: anything}) | Num | Var) -> ((Abs[nothing] with {name: forall 'a. string | 'a}) | (Add[nothing] with {lhs: nothing, rhs: nothing}) | (App[forall 'b, 'c. 'b | 'c] with {lhs: nothing, rhs: forall 'b, 'c. 'b | 'c}) | (Mul[nothing] with {lhs: nothing, rhs: nothing}) | Num)
//│            = <no result>
//│              eval_var, list_assoc and eq are not implemented
