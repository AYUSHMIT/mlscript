
class None: {}
def None = None{}
//│ Defined class None
//│ None: None & {}

class Some[A]: { value: A }
def Some v = Some { value = v }
//│ Defined class Some
//│ Some: 'a -> Some & {value: 'a}

Some 42
(Some 42).value
//│ res: Some & {value: 42}
//│ res: 42

type Option[A] = Some[A] | None
//│ Defined type Option

None: Option[int]
Some 42 : Option[int]
//│ res: Option int
//│ res: Option int

:e
res.value
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.26: 	res.value
//│ ║        	^^^
//│ ╟── expression of type `None & {}` does not match type `{value: ?a}`
//│ ║  l.17: 	type Option[A] = Some[A] | None
//│ ║        	                           ^^^^
//│ ╟── but it flows into reference with expected type `{value: ?a}`
//│ ║  l.26: 	res.value
//│ ╙──      	^^^
//│ res: error | int

// FIXME properly check:
42: Option[int, int]
//│ /!!!\ Uncaught error: java.lang.AssertionError: assertion failed
//│ 	at: scala.Predef$.assert(Predef.scala:264)
//│ 	at: mlscript.TyperDatatypes$TypeRef.<init>(TyperDatatypes.scala:100)
//│ 	at: mlscript.Typer.typeType(Typer.scala:136)
//│ 	at: mlscript.Typer.$anonfun$typeTerm$1(Typer.scala:275)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:17)
//│ 	at: mlscript.Typer.typeTerm(Typer.scala:371)
//│ 	at: mlscript.Typer.typeStatement(Typer.scala:194)
//│ 	at: mlscript.DiffTests.$anonfun$new$15(DiffTests.scala:188)
//│ 	at: mlscript.DiffTests.$anonfun$new$15$adapted(DiffTests.scala:184)
//│ 	at: scala.collection.immutable.List.foreach(List.scala:333)

