
def intToString: int -> string
def intToString x = toString x
def done x = case x of {}
//│ intToString: int -> string
//│            = <missing implementation>
//│ anything -> string
//│   <:  intToString:
//│ int -> string
//│            = [Function: intToString]
//│ done: nothing -> nothing
//│     = [Function: done]



class Lit: { val: int }
class Add[E]: { lhs: E; rhs: E }
def lit val = Lit { val }
def add lhs rhs = Add { lhs; rhs }
//│ Defined class Lit
//│ Defined class Add
//│ lit: (int & 'val) -> (Lit with {val: 'val})
//│    = [Function: lit]
//│ add: ('lhs & 'E) -> ('E & 'rhs) -> (Add['E] with {lhs: 'lhs, rhs: 'rhs})
//│    = [Function: add]



rec def eval1_stub k e = case e of {
  | Add -> eval1_stub k e.lhs
  | _ -> k e
  }
//│ eval1_stub: ('a -> 'b) -> ((Add[?]\rhs with {lhs: 'c}) | 'a & ~add as 'c) -> 'b
//│           = [Function: eval1_stub]

rec def eval1_stub k e = case e of {
  | Add -> eval1_stub k e.lhs + eval1_stub k e.rhs
  | _ -> k e
  }
//│ eval1_stub: ('a -> int) -> ((Add[?] with {lhs: 'b, rhs: 'b}) | 'a & ~add as 'b) -> int
//│           = [Function: eval1_stub1]

:ns
rec def eval1_stub e = case e of {
  | Lit -> 1
  | Add -> eval1_stub e.lhs
  | _ -> 0
  }
//│ eval1_stub: forall 'a, 'b, 'c, 'd, 'e, 'f, 'g. (lit & 'c | (add & {lhs: 'h} | 'g & ~add) & ~lit as 'h) -> (1 | 'i | 0 as 'i)
//│           = [Function: eval1_stub2]

eval1_stub
//│ res: ((Add[?]\rhs with {lhs: 'a}) | Lit | ~add & ~lit as 'a) -> (0 | 1)
//│    = [Function: eval1_stub2]

// def eval1: ('b -> int) -> Expr['b] -> int
:stats
rec def eval1 k e = case e of {
  | Lit -> e.val
  | Add -> eval1 k e.lhs + eval1 k e.rhs
  | _ -> k e
  }
//│ eval1: ('a -> int) -> ((Add[?] with {lhs: 'b, rhs: 'b}) | Lit | 'a & ~add & ~lit as 'b) -> int
//│      = [Function: eval1]
//│ constrain calls  : 81
//│ annoying  calls  : 0
//│ subtyping calls  : 698

:ns
eval1
//│ res: forall 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o. ('n -> int) -> (lit & {val: int} | (add & {rhs: 'p} & {lhs: 'p} | 'n & ~add) & ~lit as 'p) -> ('e | int | 'o)
//│    = [Function: eval1]

:re
error: ~Add[?]
//│ res: ~Add[?]
//│ Runtime error:
//│   Error: unexpected runtime error

:re
error: ('a & ~Lit) -> 'a
//│ res: ('a & (~{val: int} | ~lit)) -> 'a
//│ Runtime error:
//│   Error: unexpected runtime error

:re
error: ('a & ~Add[?]) -> 'a
//│ res: ('a & (~{Add#E} | ~{lhs: anything} | ~{rhs: anything} | ~add)) -> 'a
//│ Runtime error:
//│   Error: unexpected runtime error

:re
error: ('a & ~add) -> 'a
//│ res: ('a & ~add) -> 'a
//│ Runtime error:
//│   Error: unexpected runtime error

:ns
def eval1_ty_ugly: ('a -> int) -> (Lit | Add['b] | 'a & ~Lit & ~Add[?] as 'b) -> int
//│ eval1_ty_ugly: forall 'a, 'b. ('a -> int) -> (Lit | Add['b0 .. Lit | Add['b0 .. 'b1] | 'a & ~Lit & ~Add[?] as 'b1] | 'a & ~Lit & ~Add[?] as 'b0) -> int
//│              = <missing implementation>

eval1_ty_ugly // TODO simplify positive record negatins to bottom!
//│ res: ('a -> int) -> ('b & ((Add['d .. 'e] with {lhs: 'c, rhs: 'c}) | Lit | 'a & (~{val: int} & ~add | ~add & ~lit | ~{Add#E} & ~lit | ~{lhs: anything} & ~lit | ~{rhs: anything} & ~lit)) as 'c) -> int
//│    = <no result>
//│      eval1_ty_ugly is not implemented

:stats
def eval1_ty_ugly = eval1
//│ ('a -> int) -> ((Add[?] with {lhs: 'b, rhs: 'b}) | Lit | 'a & ~add & ~lit as 'b) -> int
//│   <:  eval1_ty_ugly:
//│ ('a -> int) -> ('b & ((Add['d .. 'e] with {lhs: 'c, rhs: 'c}) | Lit | 'a & (~{val: int} & ~add | ~add & ~lit | ~{Add#E} & ~lit | ~{lhs: anything} & ~lit | ~{rhs: anything} & ~lit)) as 'c) -> int
//│              = [Function: eval1]
//│ constrain calls  : 77
//│ annoying  calls  : 36
//│ subtyping calls  : 6973

:ns
def eval1_ty: ('a -> int) -> (Lit | Add['b] | 'a & ~lit & ~add as 'b) -> int
//│ eval1_ty: forall 'a, 'b. ('a -> int) -> (Lit | Add['b0 .. Lit | Add['b0 .. 'b1] | 'a & ~lit & ~add as 'b1] | 'a & ~lit & ~add as 'b0) -> int
//│         = <missing implementation>

eval1_ty
//│ res: ('a -> int) -> ('b & ('a & ~add & ~lit | (Add['d .. 'e] with {lhs: 'c, rhs: 'c}) | Lit) as 'c) -> int
//│    = <no result>
//│      eval1_ty is not implemented

:stats
def eval1_ty = eval1
//│ ('a -> int) -> ((Add[?] with {lhs: 'b, rhs: 'b}) | Lit | 'a & ~add & ~lit as 'b) -> int
//│   <:  eval1_ty:
//│ ('a -> int) -> ('b & ('a & ~add & ~lit | (Add['d .. 'e] with {lhs: 'c, rhs: 'c}) | Lit) as 'c) -> int
//│         = [Function: eval1]
//│ constrain calls  : 77
//│ annoying  calls  : 36
//│ subtyping calls  : 1380

:stats
eval1_ty_ugly = eval1_ty
//│ ('a -> int) -> ('b & ('a & ~add & ~lit | (Add['d .. 'e] with {lhs: 'c, rhs: 'c}) | Lit) as 'c) -> int
//│   <:  eval1_ty_ugly:
//│ ('a -> int) -> ('b & ((Add['d .. 'e] with {lhs: 'c, rhs: 'c}) | Lit | 'a & (~{val: int} & ~add | ~add & ~lit | ~{Add#E} & ~lit | ~{lhs: anything} & ~lit | ~{rhs: anything} & ~lit)) as 'c) -> int
//│              = [Function: eval1]
//│ constrain calls  : 16
//│ annoying  calls  : 1
//│ subtyping calls  : 6844

:stats
eval1_ty = eval1_ty_ugly
//│ ('a -> int) -> ('b & ((Add['d .. 'e] with {lhs: 'c, rhs: 'c}) | Lit | 'a & (~{val: int} & ~add | ~add & ~lit | ~{Add#E} & ~lit | ~{lhs: anything} & ~lit | ~{rhs: anything} & ~lit)) as 'c) -> int
//│   <:  eval1_ty:
//│ ('a -> int) -> ('b & ('a & ~add & ~lit | (Add['d .. 'e] with {lhs: 'c, rhs: 'c}) | Lit) as 'c) -> int
//│         = [Function: eval1]
//│ constrain calls  : 16
//│ annoying  calls  : 1
//│ subtyping calls  : 7020


// Workaround:
:ns
type E1[A] = Lit | Add[E1[A]] | A & ~lit & ~add
def eval1_ty: ('a -> int) -> E1['a] -> int
//│ Defined type alias E1
//│ eval1_ty: forall 'a. ('a -> int) -> E1['a] -> int
//│         = <missing implementation>

eval1_ty
//│ res: ('a -> int) -> ('a & ~add & ~lit | (Add['c .. 'd] with {lhs: 'b, rhs: 'b}) | Lit as 'b) -> int
//│    = <no result>
//│      eval1_ty is not implemented

:stats
def eval1_ty = eval1
//│ ('a -> int) -> ((Add[?] with {lhs: 'b, rhs: 'b}) | Lit | 'a & ~add & ~lit as 'b) -> int
//│   <:  eval1_ty:
//│ ('a -> int) -> ('a & ~add & ~lit | (Add['c .. 'd] with {lhs: 'b, rhs: 'b}) | Lit as 'b) -> int
//│         = [Function: eval1]
//│ constrain calls  : 81
//│ annoying  calls  : 38
//│ subtyping calls  : 1084


rec def pretty1 k e = case e of {
  | Lit -> intToString e.val
  | Add -> concat (pretty1 k e.lhs) (pretty1 k e.rhs)
  | _ -> k e
  }
//│ pretty1: ('a -> string) -> ((Add[?] with {lhs: 'b, rhs: 'b}) | Lit | 'a & ~add & ~lit as 'b) -> string
//│        = [Function: pretty1]

// TODO find out why the `prettier` types are not simplified more

:stats
rec def prettier1 k ev e = case e of {
  | Lit -> intToString e.val
  | Add ->
      let tmp = pretty1 k e.lhs
      in if ev e == 0 then tmp else concat tmp (pretty1 k e.rhs)
  | _ -> k e
  }
//│ prettier1: ('a -> string & 'b -> 'c & 'd -> (string & 'c)) -> ('e -> int) -> ((Add[?] with {lhs: (Add[?] with {lhs: 'f, rhs: 'f}) | Lit | 'd & ~add & ~lit as 'f, rhs: (Add[?] with {lhs: 'g, rhs: 'g}) | Lit | 'a & ~add & ~lit as 'g}) & 'e | Lit | 'b & ~add & ~lit) -> (string | 'c)
//│          = [Function: prettier1]
//│ constrain calls  : 166
//│ annoying  calls  : 0
//│ subtyping calls  : 1589

:stats
e1 = Add{lhs = Lit {val = 1}; rhs = Add{lhs = Lit {val = 2}; rhs = Lit {val = 3}}}
eval1 done e1
pretty1 done e1
prettier1 done (eval1 done) e1
//│ e1: Add['E .. 'E | (Add['E0 .. 'E0 | Lit & {val: 2} | Lit & {val: 3}] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}) | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add['E0 .. 'E0 | Lit & {val: 2} | Lit & {val: 3}] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Add { lhs: Lit { val: 2 }, rhs: Lit { val: 3 } }
//│     }
//│ res: int
//│    = 6
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'
//│ constrain calls  : 685
//│ annoying  calls  : 240
//│ subtyping calls  : 740

e1 = add (lit 1) (add (lit 2) (lit 3))
eval1 done e1
pretty1 done e1
prettier1 done (eval1 done) e1
//│ e1: Add['E .. 'E | (Add['E0 .. 'E0 | Lit & {val: 2} | Lit & {val: 3}] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}) | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add['E0 .. 'E0 | Lit & {val: 2} | Lit & {val: 3}] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Add { lhs: Lit { val: 2 }, rhs: Lit { val: 3 } }
//│     }
//│ res: int
//│    = 6
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'



class Nega[E]: { arg: E }
def nega arg = Nega { arg }
//│ Defined class Nega
//│ nega: ('arg & 'E) -> (Nega['E] with {arg: 'arg})
//│     = [Function: nega]



rec def eval2 k = eval1 (fun x -> case x of {
  | Nega -> 0 - (eval2 k x.arg)
  | _ -> k x
  })
//│ eval2: ('a -> int) -> ((Add[?] with {lhs: 'b, rhs: 'b}) | Lit | (Nega[?] with {arg: 'b}) | 'a & ~add & ~lit & ~nega as 'b) -> int
//│      = [Function: eval2]


// FIXME particularly egregious type!
:stats
rec def prettier2 k ev = prettier1 (fun x -> case x of {
  | Nega -> concat "-" (prettier2 k ev x.arg)
  | _ -> k x
  }) ev
//│ prettier2: ('a -> string) -> ('b -> int) -> ((Add[?] with {lhs: (Add[?] with {lhs: 'd, rhs: 'd}) | Lit | (Nega[?] with {arg: 'c}) | 'a & ~add & ~lit & ~nega as 'd, rhs: (Add[?] with {lhs: 'e, rhs: 'e}) | Lit | (Nega[?] with {arg: 'c}) | 'a & ~add & ~lit & ~nega as 'e}) & 'b | Lit | (Nega[?] with {arg: 'c}) | 'a & ~add & ~lit & ~nega as 'c) -> string
//│          = [Function: prettier2]
//│ constrain calls  : 201
//│ annoying  calls  : 0
//│ subtyping calls  : 118906



:stats
eval2 done e1
//│ res: int
//│    = 6
//│ constrain calls  : 192
//│ annoying  calls  : 60
//│ subtyping calls  : 146

e2 = add (lit 1) (nega e1)
//│ e2: Add['E .. 'E | Lit & {val: 1} | (Nega['E0 .. 'E0 | (Add['E1 .. 'E1 | (Add['E2 .. 'E2 | Lit & {val: 2} | Lit & {val: 3}] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}) | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add['E2 .. 'E2 | Lit & {val: 2} | Lit & {val: 3}] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}})] with {arg: Add['E1 .. 'E1 | (Add['E2 .. 'E2 | Lit & {val: 2} | Lit & {val: 3}] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}) | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add['E2 .. 'E2 | Lit & {val: 2} | Lit & {val: 3}] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}})] with {lhs: Lit & {val: 1}, rhs: Nega['E0 .. 'E0 | (Add['E1 .. 'E1 | (Add['E2 .. 'E2 | Lit & {val: 2} | Lit & {val: 3}] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}) | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add['E2 .. 'E2 | Lit & {val: 2} | Lit & {val: 3}] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}})] with {arg: Add['E1 .. 'E1 | (Add['E2 .. 'E2 | Lit & {val: 2} | Lit & {val: 3}] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}) | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add['E2 .. 'E2 | Lit & {val: 2} | Lit & {val: 3}] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}}}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Nega { arg: Add { lhs: [Lit], rhs: [Add] } }
//│     }

:e // FIXME (reproduced in `ADRsRepro.mls`)
:stats
eval2 done e2
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?E, ?arg, ?b. ?b) -> ?c` exceeded recursion depth limit (100)
//│ ║  l.292: 	eval2 done e2
//│ ║         	^^^^^^^^^^^^^
//│ ╟── while constraining:  (add<> & {Add#E: (E1261 -> E1261), lhs: lhs1259, rhs: rhs1263})  <!<  {rhs: α1232}
//│ ╟── while constraining:  (add<> & {Add#E: (E1261 -> E1261), lhs: lhs1259, rhs: rhs1263})  <!<  α1231
//│ ╟── while constraining:  (add<> & {lhs: lhs1259, rhs: rhs1263, Add#E: (E1261 -> E1261)})  <!<  ((lit<> & α1229) | (((add<> & α1231) | (α1234 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (add<> & {lhs: lhs1259, rhs: rhs1263, Add#E: (E1261 -> E1261)})  <!<  α1228
//│ ╟── while constraining:  (add<> & {lhs: lhs1259, rhs: rhs1263, Add#E: (E1261 -> E1261)})  <!<  α1232
//│ ╟── while constraining:  rhs1264  <!<  α1232
//│ ╟── while constraining:  (add<> & {Add#E: (E1258 -> E1258), lhs: lhs1256, rhs: rhs1264})  <!<  {rhs: α1232}
//│ ╟── while constraining:  (add<> & {Add#E: (E1258 -> E1258), lhs: lhs1256, rhs: rhs1264})  <!<  α1231
//│ ╟── while constraining:  (add<> & {lhs: lhs1256, rhs: rhs1264, Add#E: (E1258 -> E1258)})  <!<  ((lit<> & α1229) | (((add<> & α1231) | (α1234 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α1255  <!<  ((lit<> & α1229) | (((add<> & α1231) | (α1234 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α747'  <!<  ((lit<> & α1229) | (((add<> & α1231) | (α1234 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α747'  <!<  α1228
//│ ╟── while constraining:  ∀ 0. α747'  <!<  α1238
//│ ╟── while constraining:  ∀ 0. α747'  <!<  α1237
//│ ╟── while constraining:  arg1252  <!<  α1237
//│ ╟── while constraining:  (nega<> & {arg: arg1252, Nega#E: (E1253 -> E1253)})  <!<  {arg: α1237}
//│ ╟── while constraining:  (nega<> & {arg: arg1252, Nega#E: (E1253 -> E1253)})  <!<  α1236
//│ ╟── while constraining:  (nega<> & {arg: arg1252, Nega#E: (E1253 -> E1253)})  <!<  ((nega<> & α1236) | (α1239 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg1252, Nega#E: (E1253 -> E1253)})  <!<  α1235
//│ ╟── while constraining:  (nega<> & {arg: arg1252, Nega#E: (E1253 -> E1253)})  <!<  α1234
//│ ╟── while constraining:  (nega<> & {arg: arg1252, Nega#E: (E1253 -> E1253)})  <!<  ((lit<> & α1229) | (((add<> & α1231) | (α1234 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg1252, Nega#E: (E1253 -> E1253)})  <!<  α1228
//│ ╟── while constraining:  (nega<> & {arg: arg1252, Nega#E: (E1253 -> E1253)})  <!<  α1232
//│ ╟── while constraining:  rhs1254  <!<  α1232
//│ ╟── while constraining:  (add<> & {Add#E: (E1251 -> E1251), lhs: lhs1249, rhs: rhs1254})  <!<  {rhs: α1232}
//│ ╟── while constraining:  (add<> & {Add#E: (E1251 -> E1251), lhs: lhs1249, rhs: rhs1254})  <!<  α1231
//│ ╟── while constraining:  (add<> & {lhs: lhs1249, rhs: rhs1254, Add#E: (E1251 -> E1251)})  <!<  ((lit<> & α1229) | (((add<> & α1231) | (α1234 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α1248  <!<  ((lit<> & α1229) | (((add<> & α1231) | (α1234 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1200'  <!<  ((lit<> & α1229) | (((add<> & α1231) | (α1234 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1200'  <!<  α1228
//│ ╟── while constraining:  (∀ 0. α1200',)  <!<  (α1228,)
//│ ╟── while constraining:  ((α1228,) -> (α1230 | (α1240 | α1241)))  <!<  ((∀ 0. α1200',) -> α1247)
//│ ╙── while constraining:  α1222  <!<  ((∀ 0. α1200',) -> α1247)
//│ res: error
//│    = -5
//│ constrain calls  : 128
//│ annoying  calls  : 38
//│ subtyping calls  : 787

d2 = nega (add (lit 1) (nega (lit 1)))
//│ d2: Nega['E .. 'E | (Add['E0 .. 'E0 | Lit & {val: 1} | (Nega['E1 .. 'E1 | Lit & {val: 1}] with {arg: Lit & {val: 1}})] with {lhs: Lit & {val: 1}, rhs: Nega['E1 .. 'E1 | Lit & {val: 1}] with {arg: Lit & {val: 1}}})] with {arg: Add['E0 .. 'E0 | Lit & {val: 1} | (Nega['E1 .. 'E1 | Lit & {val: 1}] with {arg: Lit & {val: 1}})] with {lhs: Lit & {val: 1}, rhs: Nega['E1 .. 'E1 | Lit & {val: 1}] with {arg: Lit & {val: 1}}}}
//│   = Nega { arg: Add { lhs: Lit { val: 1 }, rhs: Nega { arg: [Lit] } } }

:e // FIXME (reproduced in `ADRsRepro.mls`)
:stats
eval2 done d2
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?val, ?lhs, ?E, ?rhs, ?val0, ?arg, ?E0, ?E1, ?b, ?arg0, ?lhs0, ?val1, ?E2, ?arg1, ?val2, ?E3, ?rhs0, ?E4. ?b) -> ?c` exceeded recursion depth limit (100)
//│ ║  l.341: 	eval2 done d2
//│ ║         	^^^^^^^^^^^^^
//│ ╟── while constraining:  (lit<> & {val: val1406})  <!<  ((lit<> & α1381) | (((add<> & α1383) | (α1386 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (lit<> & {val: val1406})  <!<  α1380
//│ ╟── while constraining:  (lit<> & {val: val1406})  <!<  α1390
//│ ╟── while constraining:  (lit<> & {val: val1406})  <!<  α1389
//│ ╟── while constraining:  arg1405  <!<  α1389
//│ ╟── while constraining:  (nega<> & {arg: arg1405, Nega#E: (E1407 -> E1407)})  <!<  {arg: α1389}
//│ ╟── while constraining:  (nega<> & {arg: arg1405, Nega#E: (E1407 -> E1407)})  <!<  α1388
//│ ╟── while constraining:  (nega<> & {arg: arg1405, Nega#E: (E1407 -> E1407)})  <!<  ((nega<> & α1388) | (α1391 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg1405, Nega#E: (E1407 -> E1407)})  <!<  α1387
//│ ╟── while constraining:  (nega<> & {arg: arg1405, Nega#E: (E1407 -> E1407)})  <!<  α1386
//│ ╟── while constraining:  (nega<> & {arg: arg1405, Nega#E: (E1407 -> E1407)})  <!<  ((lit<> & α1381) | (((add<> & α1383) | (α1386 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg1405, Nega#E: (E1407 -> E1407)})  <!<  α1380
//│ ╟── while constraining:  (nega<> & {arg: arg1405, Nega#E: (E1407 -> E1407)})  <!<  α1384
//│ ╟── while constraining:  rhs1408  <!<  α1384
//│ ╟── while constraining:  (add<> & {Add#E: (E1404 -> E1404), lhs: lhs1402, rhs: rhs1408})  <!<  {rhs: α1384}
//│ ╟── while constraining:  (add<> & {Add#E: (E1404 -> E1404), lhs: lhs1402, rhs: rhs1408})  <!<  α1383
//│ ╟── while constraining:  (add<> & {lhs: lhs1402, rhs: rhs1408, Add#E: (E1404 -> E1404)})  <!<  ((lit<> & α1381) | (((add<> & α1383) | (α1386 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (add<> & {lhs: lhs1402, rhs: rhs1408, Add#E: (E1404 -> E1404)})  <!<  α1380
//│ ╟── while constraining:  (add<> & {lhs: lhs1402, rhs: rhs1408, Add#E: (E1404 -> E1404)})  <!<  α1390
//│ ╟── while constraining:  (add<> & {lhs: lhs1402, rhs: rhs1408, Add#E: (E1404 -> E1404)})  <!<  α1389
//│ ╟── while constraining:  arg1401  <!<  α1389
//│ ╟── while constraining:  (nega<> & {arg: arg1401, Nega#E: (E1409 -> E1409)})  <!<  {arg: α1389}
//│ ╟── while constraining:  (nega<> & {arg: arg1401, Nega#E: (E1409 -> E1409)})  <!<  α1388
//│ ╟── while constraining:  (nega<> & {arg: arg1401, Nega#E: (E1409 -> E1409)})  <!<  ((nega<> & α1388) | (α1391 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg1401, Nega#E: (E1409 -> E1409)})  <!<  α1387
//│ ╟── while constraining:  (nega<> & {arg: arg1401, Nega#E: (E1409 -> E1409)})  <!<  α1386
//│ ╟── while constraining:  (nega<> & {arg: arg1401, Nega#E: (E1409 -> E1409)})  <!<  ((lit<> & α1381) | (((add<> & α1383) | (α1386 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α1400  <!<  ((lit<> & α1381) | (((add<> & α1383) | (α1386 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1356'  <!<  ((lit<> & α1381) | (((add<> & α1383) | (α1386 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1356'  <!<  α1380
//│ ╟── while constraining:  (∀ 0. α1356',)  <!<  (α1380,)
//│ ╟── while constraining:  ((α1380,) -> (α1382 | (α1392 | α1393)))  <!<  ((∀ 0. α1356',) -> α1399)
//│ ╙── while constraining:  α1374  <!<  ((∀ 0. α1356',) -> α1399)
//│ res: error
//│    = 0
//│ constrain calls  : 128
//│ annoying  calls  : 36
//│ subtyping calls  : 1116


prettier2 done
//│ res: ('a -> int) -> ((Add[?] with {lhs: (Add[?] with {lhs: 'c, rhs: 'c}) | Lit | (Nega[?] with {arg: 'b}) as 'c, rhs: (Add[?] with {lhs: 'd, rhs: 'd}) | Lit | (Nega[?] with {arg: 'b}) as 'd}) & 'a | Lit | (Nega[?] with {arg: 'b}) as 'b) -> string
//│    = [Function (anonymous)]

:stats
prettier2 done (eval1 done)
//│ res: ((Add[?] with {lhs: (Add[?] with {lhs: 'b, rhs: 'b}) | Lit as 'b, rhs: (Add[?] with {lhs: 'c, rhs: 'c}) | Lit as 'c}) | Lit | (Nega[?] with {arg: 'a}) as 'a) -> string
//│    = [Function (anonymous)]
//│ constrain calls  : 81
//│ annoying  calls  : 0
//│ subtyping calls  : 7188

:e // FIXME (reproduced in `ADRsRepro.mls`)
:stats
prettier2 done (eval2 done)
prettier2 done (eval2 done) e2
prettier2 done (eval2 done) d2
//│ res: (((Add[?] with {lhs: (Add[?] with {lhs: 'c, rhs: 'c}) | Lit | (Nega[?] with {arg: 'b | (Nega[?] with {arg: 'd}) as 'd}) as 'c, rhs: (Add[?] with {lhs: 'e, rhs: 'e}) | Lit | (Nega[?] with {arg: 'b | (Nega[?] with {arg: 'd}) as 'd}) as 'e}) | Lit as 'b) | (Nega[?] with {arg: 'a}) as 'a) -> string
//│    = [Function (anonymous)]
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?E, ?arg, ?b. ?b) -> ?c` exceeded recursion depth limit (100)
//│ ║  l.400: 	prettier2 done (eval2 done) e2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (add<> & {lhs: lhs2004, rhs: rhs2008, Add#E: (E2006 -> E2006)})  <!<  ((lit<> & α1973) | (((add<> & α1975) | (α1978 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (add<> & {lhs: lhs2004, rhs: rhs2008, Add#E: (E2006 -> E2006)})  <!<  α1972
//│ ╟── while constraining:  (add<> & {lhs: lhs2004, rhs: rhs2008, Add#E: (E2006 -> E2006)})  <!<  α1976
//│ ╟── while constraining:  rhs2009  <!<  α1976
//│ ╟── while constraining:  (add<> & {Add#E: (E2003 -> E2003), lhs: lhs2001, rhs: rhs2009})  <!<  {rhs: α1976}
//│ ╟── while constraining:  (add<> & {Add#E: (E2003 -> E2003), lhs: lhs2001, rhs: rhs2009})  <!<  α1975
//│ ╟── while constraining:  (add<> & {lhs: lhs2001, rhs: rhs2009, Add#E: (E2003 -> E2003)})  <!<  ((lit<> & α1973) | (((add<> & α1975) | (α1978 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α2000  <!<  ((lit<> & α1973) | (((add<> & α1975) | (α1978 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α747'  <!<  ((lit<> & α1973) | (((add<> & α1975) | (α1978 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α747'  <!<  α1972
//│ ╟── while constraining:  ∀ 0. α747'  <!<  α1982
//│ ╟── while constraining:  ∀ 0. α747'  <!<  α1981
//│ ╟── while constraining:  arg1997  <!<  α1981
//│ ╟── while constraining:  (nega<> & {arg: arg1997, Nega#E: (E1998 -> E1998)})  <!<  {arg: α1981}
//│ ╟── while constraining:  (nega<> & {arg: arg1997, Nega#E: (E1998 -> E1998)})  <!<  α1980
//│ ╟── while constraining:  (nega<> & {arg: arg1997, Nega#E: (E1998 -> E1998)})  <!<  ((nega<> & α1980) | (α1983 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg1997, Nega#E: (E1998 -> E1998)})  <!<  α1979
//│ ╟── while constraining:  (nega<> & {arg: arg1997, Nega#E: (E1998 -> E1998)})  <!<  α1978
//│ ╟── while constraining:  (nega<> & {arg: arg1997, Nega#E: (E1998 -> E1998)})  <!<  ((lit<> & α1973) | (((add<> & α1975) | (α1978 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg1997, Nega#E: (E1998 -> E1998)})  <!<  α1972
//│ ╟── while constraining:  (nega<> & {arg: arg1997, Nega#E: (E1998 -> E1998)})  <!<  α1976
//│ ╟── while constraining:  rhs1999  <!<  α1976
//│ ╟── while constraining:  (add<> & {Add#E: (E1996 -> E1996), lhs: lhs1994, rhs: rhs1999})  <!<  {rhs: α1976}
//│ ╟── while constraining:  (add<> & {Add#E: (E1996 -> E1996), lhs: lhs1994, rhs: rhs1999})  <!<  α1975
//│ ╟── while constraining:  (add<> & {Add#E: (E1996 -> E1996), lhs: lhs1994, rhs: rhs1999})  <!<  ((lit<> & α1973) | (((add<> & α1975) | (α1978 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (add<> & {Add#E: (E1996 -> E1996), lhs: lhs1994, rhs: rhs1999})  <!<  α1972
//│ ╟── while constraining:  (add<> & {Add#E: (E1996 -> E1996), lhs: lhs1994, rhs: rhs1999})  <!<  α1913
//│ ╟── while constraining:  (add<> & {lhs: lhs1994, rhs: rhs1999, Add#E: (E1996 -> E1996)})  <!<  ((lit<> & α1927) | (((add<> & α1913) | (α1929 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α1993  <!<  ((lit<> & α1927) | (((add<> & α1913) | (α1929 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1200'  <!<  ((lit<> & α1927) | (((add<> & α1913) | (α1929 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1200'  <!<  α1926
//│ ╟── while constraining:  (∀ 0. α1200',)  <!<  (α1926,)
//│ ╟── while constraining:  ((α1926,) -> (α1950 | (α1951 | α1959)))  <!<  ((∀ 0. α1200',) -> α1992)
//│ ╙── while constraining:  α1991  <!<  ((∀ 0. α1200',) -> α1992)
//│ res: error
//│    = '1-123'
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?val, ?lhs, ?E, ?rhs, ?val0, ?arg, ?E0, ?E1, ?b, ?arg0, ?lhs0, ?val1, ?E2, ?arg1, ?val2, ?E3, ?rhs0, ?E4. ?b) -> ?c` exceeded recursion depth limit (100)
//│ ║  l.401: 	prettier2 done (eval2 done) d2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (lit<> & {val: val2218})  <!<  α2200
//│ ╟── while constraining:  arg2217  <!<  α2200
//│ ╟── while constraining:  (nega<> & {arg: arg2217, Nega#E: (E2219 -> E2219)})  <!<  {arg: α2200}
//│ ╟── while constraining:  (nega<> & {arg: arg2217, Nega#E: (E2219 -> E2219)})  <!<  α2199
//│ ╟── while constraining:  (nega<> & {arg: arg2217, Nega#E: (E2219 -> E2219)})  <!<  ((nega<> & α2199) | (α2202 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg2217, Nega#E: (E2219 -> E2219)})  <!<  α2198
//│ ╟── while constraining:  (nega<> & {arg: arg2217, Nega#E: (E2219 -> E2219)})  <!<  α2197
//│ ╟── while constraining:  (nega<> & {arg: arg2217, Nega#E: (E2219 -> E2219)})  <!<  ((lit<> & α2192) | (((add<> & α2194) | (α2197 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg2217, Nega#E: (E2219 -> E2219)})  <!<  α2191
//│ ╟── while constraining:  (nega<> & {arg: arg2217, Nega#E: (E2219 -> E2219)})  <!<  α2195
//│ ╟── while constraining:  rhs2220  <!<  α2195
//│ ╟── while constraining:  (add<> & {Add#E: (E2216 -> E2216), lhs: lhs2214, rhs: rhs2220})  <!<  {rhs: α2195}
//│ ╟── while constraining:  (add<> & {Add#E: (E2216 -> E2216), lhs: lhs2214, rhs: rhs2220})  <!<  α2194
//│ ╟── while constraining:  (add<> & {Add#E: (E2216 -> E2216), lhs: lhs2214, rhs: rhs2220})  <!<  ((lit<> & α2192) | (((add<> & α2194) | (α2197 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (add<> & {Add#E: (E2216 -> E2216), lhs: lhs2214, rhs: rhs2220})  <!<  α2191
//│ ╟── while constraining:  (add<> & {Add#E: (E2216 -> E2216), lhs: lhs2214, rhs: rhs2220})  <!<  α2132
//│ ╟── while constraining:  (add<> & {lhs: lhs2214, rhs: rhs2220, Add#E: (E2216 -> E2216)})  <!<  ((lit<> & α2146) | (((add<> & α2132) | (α2148 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (add<> & {lhs: lhs2214, rhs: rhs2220, Add#E: (E2216 -> E2216)})  <!<  α2145
//│ ╟── while constraining:  (add<> & {lhs: lhs2214, rhs: rhs2220, Add#E: (E2216 -> E2216)})  <!<  α2144
//│ ╟── while constraining:  (add<> & {lhs: lhs2214, rhs: rhs2220, Add#E: (E2216 -> E2216)})  <!<  α2151
//│ ╟── while constraining:  arg2213  <!<  α2151
//│ ╟── while constraining:  (nega<> & {arg: arg2213, Nega#E: (E2221 -> E2221)})  <!<  {arg: α2151}
//│ ╟── while constraining:  (nega<> & {arg: arg2213, Nega#E: (E2221 -> E2221)})  <!<  α2150
//│ ╟── while constraining:  (nega<> & {arg: arg2213, Nega#E: (E2221 -> E2221)})  <!<  ((nega<> & α2150) | (α2152 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg2213, Nega#E: (E2221 -> E2221)})  <!<  α2149
//│ ╟── while constraining:  (nega<> & {arg: arg2213, Nega#E: (E2221 -> E2221)})  <!<  α2148
//│ ╟── while constraining:  (nega<> & {arg: arg2213, Nega#E: (E2221 -> E2221)})  <!<  ((lit<> & α2146) | (((add<> & α2132) | (α2148 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α2212  <!<  ((lit<> & α2146) | (((add<> & α2132) | (α2148 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1356'  <!<  ((lit<> & α2146) | (((add<> & α2132) | (α2148 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1356'  <!<  α2145
//│ ╟── while constraining:  (∀ 0. α1356',)  <!<  (α2145,)
//│ ╟── while constraining:  ((α2145,) -> (α2169 | (α2170 | α2178)))  <!<  ((∀ 0. α1356',) -> α2211)
//│ ╙── while constraining:  α2210  <!<  ((∀ 0. α1356',) -> α2211)
//│ res: error
//│    = '-1'
//│ constrain calls  : 486
//│ annoying  calls  : 79
//│ subtyping calls  : 363241




// === === === ERROR CASES === === === //


:ShowRelativeLineNums


:e
eval1 done e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	eval1 done e2
//│ ║        	^^^^^^^^^^^^^
//│ ╟── application of type `Nega[?E] & {arg: ?arg}` does not match type `nothing`
//│ ║  l.246: 	def nega arg = Nega { arg }
//│ ║         	               ^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.4: 	def done x = case x of {}
//│ ║       	                  ^
//│ ╟── from field selection:
//│ ║  l.60: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ╙──      	                                   ^^^^^
//│ res: error | int
//│ Runtime error:
//│   Error: non-exhaustive case expression


:e
prettier2 done eval1 e1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval1 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (?b | ?c | ?d)` does not match type `int`
//│ ║  l.58: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.59: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.60: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.61: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.62: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.198: 	      in if ev e == 0 then tmp else concat tmp (pretty1 k e.rhs)
//│ ╙──       	            ^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval1 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Add[?E] & {lhs: ?lhs, rhs: ?rhs}` is not a function
//│ ║  l.19: 	def add lhs rhs = Add { lhs; rhs }
//│ ║        	                  ^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `?a -> ?b`
//│ ║  l.+1: 	prettier2 done eval1 e1
//│ ║        	                     ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.61: 	  | _ -> k e
//│ ║        	         ^^^
//│ ╟── from reference:
//│ ║  l.194: 	rec def prettier1 k ev e = case e of {
//│ ╙──       	                                ^
//│ res: error | string
//│    = '123'


:e
:stats
prettier2 done (eval1 done) e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done (eval1 done) e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Nega[?E] & {arg: ?arg}` does not match type `nothing`
//│ ║  l.246: 	def nega arg = Nega { arg }
//│ ║         	               ^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.4: 	def done x = case x of {}
//│ ║       	                  ^
//│ ╟── from field selection:
//│ ║  l.60: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ╙──      	                                   ^^^^^
//│ res: error
//│ Runtime error:
//│   Error: non-exhaustive case expression
//│ constrain calls  : 259
//│ annoying  calls  : 73
//│ subtyping calls  : 1845

:e
:stats
prettier2 done eval2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (?b | ?c | ?d)` does not match type `int`
//│ ║  l.58: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.59: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.60: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.61: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.62: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.198: 	      in if ev e == 0 then tmp else concat tmp (pretty1 k e.rhs)
//│ ╙──       	            ^^^^
//│ res: (Lit | (Nega[?] with {arg: 'a}) as 'a) -> string | error
//│    = [Function (anonymous)]
//│ constrain calls  : 59
//│ annoying  calls  : 0
//│ subtyping calls  : 340

:e
:stats
prettier2 done eval2 e1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (?b | ?c | ?d)` does not match type `int`
//│ ║  l.58: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.59: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.60: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.61: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.62: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.198: 	      in if ev e == 0 then tmp else concat tmp (pretty1 k e.rhs)
//│ ╙──       	            ^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Add[?E] & {lhs: ?lhs, rhs: ?rhs}` is not a function
//│ ║  l.19: 	def add lhs rhs = Add { lhs; rhs }
//│ ║        	                  ^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `?a -> ?b`
//│ ║  l.+1: 	prettier2 done eval2 e1
//│ ║        	                     ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.255: 	  | _ -> k x
//│ ║         	         ^^^
//│ ╟── from reference:
//│ ║  l.194: 	rec def prettier1 k ev e = case e of {
//│ ╙──       	                                ^
//│ res: error | string
//│    = '123'
//│ constrain calls  : 227
//│ annoying  calls  : 62
//│ subtyping calls  : 254

:e
:stats
prettier2 done eval2 e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (?b | ?c | ?d)` does not match type `int`
//│ ║  l.58: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.59: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.60: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.61: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.62: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.198: 	      in if ev e == 0 then tmp else concat tmp (pretty1 k e.rhs)
//│ ╙──       	            ^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Add[?E] & {lhs: ?lhs, rhs: ?rhs}` is not a function
//│ ║  l.19: 	def add lhs rhs = Add { lhs; rhs }
//│ ║        	                  ^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `?a -> ?b`
//│ ║  l.+1: 	prettier2 done eval2 e2
//│ ║        	                     ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.255: 	  | _ -> k x
//│ ║         	         ^^^
//│ ╟── from reference:
//│ ║  l.194: 	rec def prettier1 k ev e = case e of {
//│ ╙──       	                                ^
//│ res: error
//│    = '1-123'
//│ constrain calls  : 181
//│ annoying  calls  : 42
//│ subtyping calls  : 1168

:e
:stats
prettier2 done eval2 d2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 d2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (?b | ?c | ?d)` does not match type `int`
//│ ║  l.58: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.59: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.60: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.61: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.62: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.198: 	      in if ev e == 0 then tmp else concat tmp (pretty1 k e.rhs)
//│ ╙──       	            ^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 d2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Add[?E] & {lhs: ?lhs, rhs: ?rhs}` is not a function
//│ ║  l.19: 	def add lhs rhs = Add { lhs; rhs }
//│ ║        	                  ^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.255: 	  | _ -> k x
//│ ║         	         ^^^
//│ ╟── from field selection:
//│ ║  l.264: 	  | Nega -> concat "-" (prettier2 k ev x.arg)
//│ ╙──       	                                       ^^^^^
//│ res: error
//│    = '-1-1'
//│ constrain calls  : 171
//│ annoying  calls  : 38
//│ subtyping calls  : 1276

:e
:stats
prettier2 done eval1 e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval1 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (?b | ?c | ?d)` does not match type `int`
//│ ║  l.58: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.59: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.60: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.61: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.62: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.198: 	      in if ev e == 0 then tmp else concat tmp (pretty1 k e.rhs)
//│ ╙──       	            ^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval1 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Add[?E] & {lhs: ?lhs, rhs: ?rhs}` is not a function
//│ ║  l.19: 	def add lhs rhs = Add { lhs; rhs }
//│ ║        	                  ^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `?a -> ?b`
//│ ║  l.+1: 	prettier2 done eval1 e2
//│ ║        	                     ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.61: 	  | _ -> k e
//│ ║        	         ^^^
//│ ╟── from reference:
//│ ║  l.194: 	rec def prettier1 k ev e = case e of {
//│ ╙──       	                                ^
//│ res: error
//│    = '1-123'
//│ constrain calls  : 176
//│ annoying  calls  : 42
//│ subtyping calls  : 1166

