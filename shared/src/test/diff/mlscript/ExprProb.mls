
def intToString: int -> string
def intToString x = toString x
def done x = case x of {}
//│ intToString: int -> string
//│            = <missing implementation>
//│ anything -> string
//│   <:  intToString:
//│ int -> string
//│            = [Function: intToString]
//│ done: nothing -> nothing
//│     = [Function: done]



class Lit: { val: int }
class Add[E]: { lhs: E; rhs: E }
def lit val = Lit { val }
def add lhs rhs = Add { lhs; rhs }
//│ Defined class Lit
//│ Defined class Add[+E]
//│ lit: (int & 'val) -> (Lit with {val: 'val})
//│    = [Function: lit]
//│ add: ('lhs & 'E) -> ('E & 'rhs) -> (Add['E] with {lhs: 'lhs, rhs: 'rhs})
//│    = [Function: add]



rec def eval1_stub k e = case e of {
  | Add -> eval1_stub k e.lhs
  | _ -> k e
  }
//│ eval1_stub: ('a -> 'b) -> 'c -> 'b
//│   where
//│     'c <: Add[?] & {lhs: 'c} | 'a & ~add
//│           = [Function: eval1_stub]

rec def eval1_stub k e = case e of {
  | Add -> eval1_stub k e.lhs + eval1_stub k e.rhs
  | _ -> k e
  }
//│ eval1_stub: ('a -> int) -> 'b -> int
//│   where
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | 'a & ~add
//│           = [Function: eval1_stub1]

:ns
rec def eval1_stub e = case e of {
  | Lit -> 1
  | Add -> eval1_stub e.lhs
  | _ -> 0
  }
//│ eval1_stub: forall 'eval1_stub, 'a, 'b, 'c, 'lhs, 'd, 'e. 'eval1_stub
//│   where
//│     'eval1_stub :> 'a -> (1 | 'd | 0)
//│                 <: 'lhs -> 'd
//│     'd :> 1 | 'd | 0
//│     'a <: lit & 'b | (add & 'c | 'e & ~add) & ~lit
//│     'c <: {lhs: 'lhs}
//│     'lhs <: 'a
//│           = [Function: eval1_stub2]

eval1_stub
//│ res: 'a -> (0 | 1)
//│   where
//│     'a <: Add[?] & {lhs: 'a} | Lit | ~Add[?] & ~Lit
//│    = [Function: eval1_stub2]

// def eval1: ('b -> int) -> Expr['b] -> int
:stats
rec def eval1 k e = case e of {
  | Lit -> e.val
  | Add -> eval1 k e.lhs + eval1 k e.rhs
  | _ -> k e
  }
//│ eval1: ('a -> int) -> 'b -> int
//│   where
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | 'a & ~add & ~lit
//│      = [Function: eval1]
//│ constrain calls  : 79
//│ annoying  calls  : 0
//│ subtyping calls  : 87

:ns
eval1
//│ res: forall 'eval1, 'a, 'b, 'c, 'val, 'd, 'e, 'lhs, 'f, 'g, 'rhs, 'h, 'i, 'j, 'k. 'eval1
//│   where
//│     'eval1 :> 'a -> 'b -> ('val | 'i | 'k)
//│            <: 'a -> 'g & 'a -> 'e
//│     'e :> 'b -> ('val | 'i | 'k)
//│        <: 'lhs -> 'f
//│     'f :> 'val | 'i | 'k
//│        <: int
//│     'g :> 'b -> ('val | 'i | 'k)
//│        <: 'rhs -> 'h
//│     'h :> 'val | 'i | 'k
//│        <: int
//│     'i := int
//│     'b <: lit & 'c | (add & 'd | 'j & ~add) & ~lit
//│     'd <: {rhs: 'rhs} & {lhs: 'lhs}
//│     'lhs <: 'b
//│     'rhs <: 'b
//│     'c <: {val: 'val}
//│     'val <: int
//│     'a <: 'j -> 'k
//│     'k <: int
//│    = [Function: eval1]

:re
error: ~Add[?]
//│ res: ~Add[nothing]
//│ Runtime error:
//│   Error: unexpected runtime error

:re
error: ('a & ~Lit) -> 'a
//│ res: ('a & ~Lit) -> 'a
//│ Runtime error:
//│   Error: unexpected runtime error

:re
error: ('a) -> ('a & Add[?])
error: ('a) -> ('a & ~Add[?])
error: ('a & ~Add[?]) -> 'a
//│ res: 'a -> (Add[?] & 'a)
//│ Runtime error:
//│   Error: unexpected runtime error
//│ res: 'a -> ('a & ~Add[nothing])
//│ Runtime error:
//│   Error: unexpected runtime error
//│ res: ('a & ~Add[?]) -> 'a
//│ Runtime error:
//│   Error: unexpected runtime error

:re
error: ('a & ~add) -> 'a
//│ res: ('a & ~add) -> 'a
//│ Runtime error:
//│   Error: unexpected runtime error

:ns
def eval1_ty_ugly: ('a -> int) -> (Lit | Add['b] | 'a & ~Lit & ~Add[?] as 'b) -> int
//│ eval1_ty_ugly: forall 'a, 'b. ('a -> int) -> 'b -> int
//│   where
//│     'b := Lit | Add['b] | 'a & ~Lit & ~Add[?]
//│              = <missing implementation>

eval1_ty_ugly
//│ res: ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~Add[?] & ~Lit | Add['b] | Lit
//│    = <no result>
//│      eval1_ty_ugly is not implemented

:stats
def eval1_ty_ugly = eval1
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | 'a & ~add & ~lit
//│   <:  eval1_ty_ugly:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~Add[?] & ~Lit | Add['b] | Lit
//│              = [Function: eval1]
//│ constrain calls  : 79
//│ annoying  calls  : 36
//│ subtyping calls  : 315

:ns
def eval1_ty: ('a -> int) -> (Lit | Add['b] | 'a & ~lit & ~add as 'b) -> int
//│ eval1_ty: forall 'a, 'b. ('a -> int) -> 'b -> int
//│   where
//│     'b := Lit | Add['b] | 'a & ~lit & ~add
//│         = <missing implementation>

eval1_ty
//│ res: ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~add & ~lit | Add['b] | Lit
//│    = <no result>
//│      eval1_ty is not implemented

:stats
def eval1_ty = eval1
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | 'a & ~add & ~lit
//│   <:  eval1_ty:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~add & ~lit | Add['b] | Lit
//│         = [Function: eval1]
//│ constrain calls  : 79
//│ annoying  calls  : 36
//│ subtyping calls  : 317

:stats
eval1_ty_ugly = eval1_ty
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~add & ~lit | Add['b] | Lit
//│   <:  eval1_ty_ugly:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~Add[?] & ~Lit | Add['b] | Lit
//│              = [Function: eval1]
//│ constrain calls  : 16
//│ annoying  calls  : 1
//│ subtyping calls  : 196

:stats
eval1_ty = eval1_ty_ugly
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~Add[?] & ~Lit | Add['b] | Lit
//│   <:  eval1_ty:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~add & ~lit | Add['b] | Lit
//│         = [Function: eval1]
//│ constrain calls  : 16
//│ annoying  calls  : 1
//│ subtyping calls  : 978


// Workaround:
:ns
type E1[A] = Lit | Add[E1[A]] | A & ~lit & ~add
def eval1_ty: ('a -> int) -> E1['a] -> int
//│ Defined type alias E1[+A]
//│ eval1_ty: forall 'a. ('a -> int) -> E1['a] -> int
//│         = <missing implementation>

eval1_ty
//│ res: ('a -> int) -> E1['a] -> int
//│    = <no result>
//│      eval1_ty is not implemented

:stats
def eval1_ty = eval1
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | 'a & ~add & ~lit
//│   <:  eval1_ty:
//│ ('a -> int) -> E1['a] -> int
//│         = [Function: eval1]
//│ constrain calls  : 83
//│ annoying  calls  : 38
//│ subtyping calls  : 216


:stats
rec def pretty1 k e = case e of {
  | Lit -> intToString e.val
  | Add -> concat (pretty1 k e.lhs) (pretty1 k e.rhs)
  | _ -> k e
  }
//│ pretty1: ('a -> string) -> 'b -> string
//│   where
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | 'a & ~add & ~lit
//│        = [Function: pretty1]
//│ constrain calls  : 91
//│ annoying  calls  : 0
//│ subtyping calls  : 91


:stats
rec def prettier1 k ev e = case e of {
  | Lit -> intToString e.val
  | Add ->
      if ev e.lhs == 0 then prettier1 k ev e.rhs
      else if ev e.rhs == 0 then prettier1 k ev e.lhs
      else concat (prettier1 k ev e.lhs) (prettier1 k ev e.rhs)
  | _ -> k e
  }
//│ prettier1: ('a -> string) -> ('rhs -> int & 'lhs -> int) -> 'b -> string
//│   where
//│     'b <: Add[?] & {lhs: 'lhs & 'b, rhs: 'rhs & 'b} | Lit | 'a & ~add & ~lit
//│          = [Function: prettier1]
//│ constrain calls  : 300
//│ annoying  calls  : 0
//│ subtyping calls  : 115

:stats
rec def prettier11 k ev e = case e of {
  | Lit -> intToString e.val
  | Add ->
      let tmp = pretty1 k e.lhs
      in if ev e.rhs == 0 then tmp else concat tmp (prettier11 k ev e.rhs)
  | _ -> k e
  }
//│ prettier11: ('a -> string & 'b -> string) -> ('rhs -> int) -> 'c -> string
//│   where
//│     'c <: Add[?] & {lhs: 'd, rhs: 'rhs & 'c} | Lit | 'a & ~add & ~lit
//│     'd <: Add[?] & {lhs: 'd, rhs: 'd} | Lit | 'b & ~add & ~lit
//│           = [Function: prettier11]
//│ constrain calls  : 198
//│ annoying  calls  : 0
//│ subtyping calls  : 205

// Doesn't make much sense, but generates very ugly type unless aggressively simplified:
:stats
rec def prettier12 k ev e = case e of {
  | Lit -> intToString e.val
  | Add ->
      let tmp = pretty1 k e.lhs
      in if ev e == 0 then tmp else concat tmp (pretty1 k e.rhs)
  | _ -> k e
  }
//│ prettier12: ('a -> string & 'b -> 'c & 'd -> string) -> ('e -> int) -> (Add[?] & {lhs: 'f, rhs: 'g} & 'e | Lit | 'b & ~add & ~lit) -> (string | 'c)
//│   where
//│     'g <: Add[?] & {lhs: 'g, rhs: 'g} | Lit | 'd & ~add & ~lit
//│     'f <: Add[?] & {lhs: 'f, rhs: 'f} | Lit | 'a & ~add & ~lit
//│           = [Function: prettier12]
//│ constrain calls  : 169
//│ annoying  calls  : 0
//│ subtyping calls  : 281


:stats
e1 = Add{lhs = Lit {val = 1}; rhs = Add{lhs = Lit {val = 2}; rhs = Lit {val = 3}}}
eval1 done e1
pretty1 done e1
prettier1 done (eval1 done) e1
prettier11 done (eval1 done) e1
prettier12 done (eval1 done) e1
//│ e1: Add[Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}} | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Add { lhs: Lit { val: 2 }, rhs: Lit { val: 3 } }
//│     }
//│ res: int
//│    = 6
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'
//│ constrain calls  : 1410
//│ annoying  calls  : 490
//│ subtyping calls  : 2007


e1 = add (lit 1) (add (lit 2) (lit 3))
eval1 done e1
pretty1 done e1
prettier1 done (eval1 done) e1
prettier11 done (eval1 done) e1
prettier12 done (eval1 done) e1
//│ e1: Add[Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}} | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Add { lhs: Lit { val: 2 }, rhs: Lit { val: 3 } }
//│     }
//│ res: int
//│    = 6
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'



class Nega[E]: { arg: E }
def nega arg = Nega { arg }
//│ Defined class Nega[+E]
//│ nega: 'arg -> Nega['arg]
//│     = [Function: nega]



rec def eval2 k = eval1 (fun x -> case x of {
  | Nega -> 0 - (eval2 k x.arg)
  | _ -> k x
  })
//│ eval2: ('a -> int) -> 'b -> int
//│   where
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | Nega[?] & {arg: 'b} | 'a & ~add & ~lit & ~nega
//│      = [Function: eval2]


:stats
rec def prettier2 k ev = prettier1 (fun x -> case x of {
  | Nega -> concat "-" (prettier2 k ev x.arg)
  | _ -> k x
  }) ev
//│ prettier2: ('a -> string) -> ('rhs -> int & 'lhs -> int) -> 'b -> string
//│   where
//│     'b <: Add[?] & {lhs: 'lhs & 'b, rhs: 'rhs & 'b} | Lit | Nega[?] & {arg: 'b} | 'a & ~add & ~lit & ~nega
//│          = [Function: prettier2]
//│ constrain calls  : 136
//│ annoying  calls  : 0
//│ subtyping calls  : 207

:stats
rec def prettier22 k ev = prettier12 (fun x -> case x of {
  | Nega -> concat "-" (prettier22 k ev x.arg)
  | _ -> k x
  }) ev
//│ prettier22: ('a -> string) -> ('b -> int) -> 'c -> string
//│   where
//│     'b <: {lhs: 'd, rhs: 'd}
//│     'd <: Add[?] & {lhs: 'd, rhs: 'd} | Lit | Nega[?] & {arg: 'c} | 'a & ~add & ~lit & ~nega
//│     'c <: Add[?] & 'b | Lit | Nega[?] & {arg: 'c} | 'a & ~add & ~lit & ~nega
//│           = [Function: prettier22]
//│ constrain calls  : 204
//│ annoying  calls  : 0
//│ subtyping calls  : 480



:stats
eval2 done e1
//│ res: int
//│    = 6
//│ constrain calls  : 204
//│ annoying  calls  : 60
//│ subtyping calls  : 203

e2 = add (lit 1) (nega e1)
//│ e2: Add[Lit & {val: 1} | Nega[Add[Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}} | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}]] with {lhs: Lit & {val: 1}, rhs: Nega[Add[Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}} | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}]}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Nega { arg: Add { lhs: [Lit], rhs: [Add] } }
//│     }

:e // FIXME (reproduced in `ADRsRepro.mls`)
:stats
eval2 done e2
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?b, ?E, ?E0. ?b) -> ?c` exceeded recursion depth limit (100)
//│ ║  l.436: 	eval2 done e2
//│ ║         	^^^^^^^^^^^^^
//│ ╟── while constraining:  (add<> & {Add#E: mut E1730..E1730, lhs: lhs1728, rhs: rhs1732})  <!<  {rhs: rhs1701}
//│ ╟── while constraining:  (add<> & {Add#E: mut E1730..E1730, lhs: lhs1728, rhs: rhs1732})  <!<  α1700
//│ ╟── while constraining:  (add<> & {lhs: lhs1728, rhs: rhs1732, Add#E: mut E1730..E1730})  <!<  ((lit<> & α1698) | (((add<> & α1700) | (α1703 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (add<> & {lhs: lhs1728, rhs: rhs1732, Add#E: mut E1730..E1730})  <!<  α1697
//│ ╟── while constraining:  (add<> & {lhs: lhs1728, rhs: rhs1732, Add#E: mut E1730..E1730})  <!<  rhs1701
//│ ╟── while constraining:  rhs1733  <!<  rhs1701
//│ ╟── while constraining:  (add<> & {Add#E: mut E1727..E1727, lhs: lhs1725, rhs: rhs1733})  <!<  {rhs: rhs1701}
//│ ╟── while constraining:  (add<> & {Add#E: mut E1727..E1727, lhs: lhs1725, rhs: rhs1733})  <!<  α1700
//│ ╟── while constraining:  (add<> & {lhs: lhs1725, rhs: rhs1733, Add#E: mut E1727..E1727})  <!<  ((lit<> & α1698) | (((add<> & α1700) | (α1703 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α1724  <!<  ((lit<> & α1698) | (((add<> & α1700) | (α1703 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1000'  <!<  ((lit<> & α1698) | (((add<> & α1700) | (α1703 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1000'  <!<  α1697
//│ ╟── while constraining:  ∀ 0. α1000'  <!<  arg1707
//│ ╟── while constraining:  ∀ 0. α1000'  <!<  arg1706
//│ ╟── while constraining:  arg1721  <!<  arg1706
//│ ╟── while constraining:  (nega<> & {arg: arg1721, Nega#E: mut E1722..E1722})  <!<  {arg: arg1706}
//│ ╟── while constraining:  (nega<> & {arg: arg1721, Nega#E: mut E1722..E1722})  <!<  α1705
//│ ╟── while constraining:  (nega<> & {arg: arg1721, Nega#E: mut E1722..E1722})  <!<  ((nega<> & α1705) | (α1708 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg1721, Nega#E: mut E1722..E1722})  <!<  α1704
//│ ╟── while constraining:  (nega<> & {arg: arg1721, Nega#E: mut E1722..E1722})  <!<  α1703
//│ ╟── while constraining:  (nega<> & {arg: arg1721, Nega#E: mut E1722..E1722})  <!<  ((lit<> & α1698) | (((add<> & α1700) | (α1703 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg1721, Nega#E: mut E1722..E1722})  <!<  α1697
//│ ╟── while constraining:  (nega<> & {arg: arg1721, Nega#E: mut E1722..E1722})  <!<  rhs1701
//│ ╟── while constraining:  rhs1723  <!<  rhs1701
//│ ╟── while constraining:  (add<> & {Add#E: mut E1720..E1720, lhs: lhs1718, rhs: rhs1723})  <!<  {rhs: rhs1701}
//│ ╟── while constraining:  (add<> & {Add#E: mut E1720..E1720, lhs: lhs1718, rhs: rhs1723})  <!<  α1700
//│ ╟── while constraining:  (add<> & {lhs: lhs1718, rhs: rhs1723, Add#E: mut E1720..E1720})  <!<  ((lit<> & α1698) | (((add<> & α1700) | (α1703 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α1717  <!<  ((lit<> & α1698) | (((add<> & α1700) | (α1703 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1673'  <!<  ((lit<> & α1698) | (((add<> & α1700) | (α1703 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1673'  <!<  α1697
//│ ╟── while constraining:  (∀ 0. α1673',)  <!<  (α1697,)
//│ ╟── while constraining:  (α1697 -> (val1699 | (α1709 | α1710)))  <!<  ((∀ 0. α1673',) -> α1716)
//│ ╙── while constraining:  α1691  <!<  ((∀ 0. α1673',) -> α1716)
//│ res: error
//│    = -5
//│ constrain calls  : 128
//│ annoying  calls  : 38
//│ subtyping calls  : 1103

d2 = nega (add (lit 1) (nega (lit 1)))
//│ d2: Nega[Add[Lit & {val: 1} | Nega[Lit & {val: 1}]] with {lhs: Lit & {val: 1}, rhs: Nega[Lit & {val: 1}]}]
//│   = Nega { arg: Add { lhs: Lit { val: 1 }, rhs: Nega { arg: [Lit] } } }

:e // FIXME (reproduced in `ADRsRepro.mls`)
:stats
eval2 done d2
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?b, ?arg, ?lhs, ?val, ?E, ?arg0, ?val0, ?E0, ?rhs, ?E1. ?b) -> ?c` exceeded recursion depth limit (100)
//│ ║  l.485: 	eval2 done d2
//│ ║         	^^^^^^^^^^^^^
//│ ╟── while constraining:  (lit<> & {val: val1872})  <!<  ((lit<> & α1847) | (((add<> & α1849) | (α1852 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (lit<> & {val: val1872})  <!<  α1846
//│ ╟── while constraining:  (lit<> & {val: val1872})  <!<  arg1856
//│ ╟── while constraining:  (lit<> & {val: val1872})  <!<  arg1855
//│ ╟── while constraining:  arg1871  <!<  arg1855
//│ ╟── while constraining:  (nega<> & {arg: arg1871, Nega#E: mut E1873..E1873})  <!<  {arg: arg1855}
//│ ╟── while constraining:  (nega<> & {arg: arg1871, Nega#E: mut E1873..E1873})  <!<  α1854
//│ ╟── while constraining:  (nega<> & {arg: arg1871, Nega#E: mut E1873..E1873})  <!<  ((nega<> & α1854) | (α1857 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg1871, Nega#E: mut E1873..E1873})  <!<  α1853
//│ ╟── while constraining:  (nega<> & {arg: arg1871, Nega#E: mut E1873..E1873})  <!<  α1852
//│ ╟── while constraining:  (nega<> & {arg: arg1871, Nega#E: mut E1873..E1873})  <!<  ((lit<> & α1847) | (((add<> & α1849) | (α1852 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg1871, Nega#E: mut E1873..E1873})  <!<  α1846
//│ ╟── while constraining:  (nega<> & {arg: arg1871, Nega#E: mut E1873..E1873})  <!<  rhs1850
//│ ╟── while constraining:  rhs1874  <!<  rhs1850
//│ ╟── while constraining:  (add<> & {Add#E: mut E1870..E1870, lhs: lhs1868, rhs: rhs1874})  <!<  {rhs: rhs1850}
//│ ╟── while constraining:  (add<> & {Add#E: mut E1870..E1870, lhs: lhs1868, rhs: rhs1874})  <!<  α1849
//│ ╟── while constraining:  (add<> & {lhs: lhs1868, rhs: rhs1874, Add#E: mut E1870..E1870})  <!<  ((lit<> & α1847) | (((add<> & α1849) | (α1852 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (add<> & {lhs: lhs1868, rhs: rhs1874, Add#E: mut E1870..E1870})  <!<  α1846
//│ ╟── while constraining:  (add<> & {lhs: lhs1868, rhs: rhs1874, Add#E: mut E1870..E1870})  <!<  arg1856
//│ ╟── while constraining:  (add<> & {lhs: lhs1868, rhs: rhs1874, Add#E: mut E1870..E1870})  <!<  arg1855
//│ ╟── while constraining:  arg1867  <!<  arg1855
//│ ╟── while constraining:  (nega<> & {arg: arg1867, Nega#E: mut E1875..E1875})  <!<  {arg: arg1855}
//│ ╟── while constraining:  (nega<> & {arg: arg1867, Nega#E: mut E1875..E1875})  <!<  α1854
//│ ╟── while constraining:  (nega<> & {arg: arg1867, Nega#E: mut E1875..E1875})  <!<  ((nega<> & α1854) | (α1857 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg1867, Nega#E: mut E1875..E1875})  <!<  α1853
//│ ╟── while constraining:  (nega<> & {arg: arg1867, Nega#E: mut E1875..E1875})  <!<  α1852
//│ ╟── while constraining:  (nega<> & {arg: arg1867, Nega#E: mut E1875..E1875})  <!<  ((lit<> & α1847) | (((add<> & α1849) | (α1852 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α1866  <!<  ((lit<> & α1847) | (((add<> & α1849) | (α1852 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1825'  <!<  ((lit<> & α1847) | (((add<> & α1849) | (α1852 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1825'  <!<  α1846
//│ ╟── while constraining:  (∀ 0. α1825',)  <!<  (α1846,)
//│ ╟── while constraining:  (α1846 -> (val1848 | (α1858 | α1859)))  <!<  ((∀ 0. α1825',) -> α1865)
//│ ╙── while constraining:  α1840  <!<  ((∀ 0. α1825',) -> α1865)
//│ res: error
//│    = 0
//│ constrain calls  : 128
//│ annoying  calls  : 36
//│ subtyping calls  : 1115


prettier2 done
//│ res: ('rhs -> int & 'lhs -> int) -> 'a -> string
//│   where
//│     'a <: Add[?] & {lhs: 'lhs & 'a, rhs: 'rhs & 'a} | Lit | Nega[?] & {arg: 'a}
//│    = [Function (anonymous)]

prettier22 done
//│ res: ('a -> int) -> 'b -> string
//│   where
//│     'a <: {lhs: 'c, rhs: 'c}
//│     'c <: Add[?] & {lhs: 'c, rhs: 'c} | Lit | Nega[?] & {arg: 'b}
//│     'b <: Add[?] & 'a | Lit | Nega[?] & {arg: 'b}
//│    = [Function (anonymous)]

:stats
prettier2 done (eval1 done)
//│ res: 'a -> string
//│   where
//│     'a <: Add[?] & {lhs: 'a & 'b, rhs: 'a & 'b} | Lit | Nega[?] & {arg: 'a}
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit
//│    = [Function (anonymous)]
//│ constrain calls  : 93
//│ annoying  calls  : 0
//│ subtyping calls  : 229

prettier22 done (eval1 done)
//│ res: 'a -> string
//│   where
//│     'a <: Add[?] & {lhs: 'b, rhs: 'b} & 'c | Lit | Nega[?] & {arg: 'a}
//│     'c <: Add[?] & {lhs: 'c, rhs: 'c} | Lit
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | Nega[?] & {arg: 'a}
//│    = [Function (anonymous)]

// :e // FIXME (reproduced in `ADRsRepro.mls`)
// TODO could probably merge `a` and `b` here!
:stats
prettier2 done (eval2 done)
//│ res: 'a -> string
//│   where
//│     'a <: Add[?] & {lhs: 'a & 'b, rhs: 'a & 'b} | Lit | Nega[?] & {arg: 'a}
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | Nega[?] & {arg: 'b}
//│    = [Function (anonymous)]
//│ constrain calls  : 106
//│ annoying  calls  : 0
//│ subtyping calls  : 297

:e
prettier2 done (eval2 done) e2
prettier2 done (eval2 done) d2
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?b, ?E, ?E0. ?b) -> ?c` exceeded recursion depth limit (100)
//│ ║  l.576: 	prettier2 done (eval2 done) e2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (add<> & {Add#E: mut E2542..E2542, lhs: lhs2540, rhs: rhs2544})  <!<  {rhs: rhs2483}
//│ ╟── while constraining:  (add<> & {Add#E: mut E2542..E2542, lhs: lhs2540, rhs: rhs2544})  <!<  α2482
//│ ╟── while constraining:  (add<> & {lhs: lhs2540, rhs: rhs2544, Add#E: mut E2542..E2542})  <!<  ((lit<> & α2480) | (((add<> & α2482) | (α2487 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (add<> & {lhs: lhs2540, rhs: rhs2544, Add#E: mut E2542..E2542})  <!<  α2479
//│ ╟── while constraining:  (add<> & {lhs: lhs2540, rhs: rhs2544, Add#E: mut E2542..E2542})  <!<  rhs2483
//│ ╟── while constraining:  rhs2545  <!<  rhs2483
//│ ╟── while constraining:  (add<> & {Add#E: mut E2539..E2539, lhs: lhs2537, rhs: rhs2545})  <!<  {rhs: rhs2483}
//│ ╟── while constraining:  (add<> & {Add#E: mut E2539..E2539, lhs: lhs2537, rhs: rhs2545})  <!<  α2482
//│ ╟── while constraining:  (add<> & {lhs: lhs2537, rhs: rhs2545, Add#E: mut E2539..E2539})  <!<  ((lit<> & α2480) | (((add<> & α2482) | (α2487 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α2536  <!<  ((lit<> & α2480) | (((add<> & α2482) | (α2487 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1000'  <!<  ((lit<> & α2480) | (((add<> & α2482) | (α2487 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1000'  <!<  α2479
//│ ╟── while constraining:  ∀ 0. α1000'  <!<  arg2491
//│ ╟── while constraining:  ∀ 0. α1000'  <!<  arg2490
//│ ╟── while constraining:  arg2533  <!<  arg2490
//│ ╟── while constraining:  (nega<> & {arg: arg2533, Nega#E: mut E2534..E2534})  <!<  {arg: arg2490}
//│ ╟── while constraining:  (nega<> & {arg: arg2533, Nega#E: mut E2534..E2534})  <!<  α2489
//│ ╟── while constraining:  (nega<> & {arg: arg2533, Nega#E: mut E2534..E2534})  <!<  ((nega<> & α2489) | (α2492 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg2533, Nega#E: mut E2534..E2534})  <!<  α2488
//│ ╟── while constraining:  (nega<> & {arg: arg2533, Nega#E: mut E2534..E2534})  <!<  α2487
//│ ╟── while constraining:  (nega<> & {arg: arg2533, Nega#E: mut E2534..E2534})  <!<  ((lit<> & α2480) | (((add<> & α2482) | (α2487 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg2533, Nega#E: mut E2534..E2534})  <!<  α2479
//│ ╟── while constraining:  (nega<> & {arg: arg2533, Nega#E: mut E2534..E2534})  <!<  rhs2483
//│ ╟── while constraining:  rhs2535  <!<  rhs2483
//│ ╟── while constraining:  (add<> & {Add#E: mut E2532..E2532, lhs: lhs2530, rhs: rhs2535})  <!<  {rhs: rhs2483}
//│ ╟── while constraining:  (add<> & {Add#E: mut E2532..E2532, lhs: lhs2530, rhs: rhs2535})  <!<  α2482
//│ ╟── while constraining:  (add<> & {lhs: lhs2530, rhs: rhs2535, Add#E: mut E2532..E2532})  <!<  ((lit<> & α2480) | (((add<> & α2482) | (α2487 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α2529  <!<  ((lit<> & α2480) | (((add<> & α2482) | (α2487 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1673'  <!<  ((lit<> & α2480) | (((add<> & α2482) | (α2487 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1673'  <!<  α2479
//│ ╟── while constraining:  (∀ 0. α1673',)  <!<  (α2479,)
//│ ╟── while constraining:  (α2479 -> (α2493 | (α2494 | α2495)))  <!<  ((∀ 0. α1673',) -> α2528)
//│ ╙── while constraining:  α2527  <!<  ((∀ 0. α1673',) -> α2528)
//│ res: error
//│    = '1-123'
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?b, ?arg, ?lhs, ?val, ?E, ?arg0, ?val0, ?E0, ?rhs, ?E1. ?b) -> ?c` exceeded recursion depth limit (100)
//│ ║  l.577: 	prettier2 done (eval2 done) d2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (lit<> & {val: val2703})  <!<  ((lit<> & α2648) | (((add<> & α2650) | (α2655 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (lit<> & {val: val2703})  <!<  α2647
//│ ╟── while constraining:  (lit<> & {val: val2703})  <!<  arg2659
//│ ╟── while constraining:  (lit<> & {val: val2703})  <!<  arg2658
//│ ╟── while constraining:  arg2702  <!<  arg2658
//│ ╟── while constraining:  (nega<> & {arg: arg2702, Nega#E: mut E2704..E2704})  <!<  {arg: arg2658}
//│ ╟── while constraining:  (nega<> & {arg: arg2702, Nega#E: mut E2704..E2704})  <!<  α2657
//│ ╟── while constraining:  (nega<> & {arg: arg2702, Nega#E: mut E2704..E2704})  <!<  ((nega<> & α2657) | (α2660 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg2702, Nega#E: mut E2704..E2704})  <!<  α2656
//│ ╟── while constraining:  (nega<> & {arg: arg2702, Nega#E: mut E2704..E2704})  <!<  α2655
//│ ╟── while constraining:  (nega<> & {arg: arg2702, Nega#E: mut E2704..E2704})  <!<  ((lit<> & α2648) | (((add<> & α2650) | (α2655 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg2702, Nega#E: mut E2704..E2704})  <!<  α2647
//│ ╟── while constraining:  (nega<> & {arg: arg2702, Nega#E: mut E2704..E2704})  <!<  rhs2651
//│ ╟── while constraining:  rhs2705  <!<  rhs2651
//│ ╟── while constraining:  (add<> & {Add#E: mut E2701..E2701, lhs: lhs2699, rhs: rhs2705})  <!<  {rhs: rhs2651}
//│ ╟── while constraining:  (add<> & {Add#E: mut E2701..E2701, lhs: lhs2699, rhs: rhs2705})  <!<  α2650
//│ ╟── while constraining:  (add<> & {lhs: lhs2699, rhs: rhs2705, Add#E: mut E2701..E2701})  <!<  ((lit<> & α2648) | (((add<> & α2650) | (α2655 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (add<> & {lhs: lhs2699, rhs: rhs2705, Add#E: mut E2701..E2701})  <!<  α2647
//│ ╟── while constraining:  (add<> & {lhs: lhs2699, rhs: rhs2705, Add#E: mut E2701..E2701})  <!<  arg2659
//│ ╟── while constraining:  (add<> & {lhs: lhs2699, rhs: rhs2705, Add#E: mut E2701..E2701})  <!<  arg2658
//│ ╟── while constraining:  arg2698  <!<  arg2658
//│ ╟── while constraining:  (nega<> & {arg: arg2698, Nega#E: mut E2706..E2706})  <!<  {arg: arg2658}
//│ ╟── while constraining:  (nega<> & {arg: arg2698, Nega#E: mut E2706..E2706})  <!<  α2657
//│ ╟── while constraining:  (nega<> & {arg: arg2698, Nega#E: mut E2706..E2706})  <!<  ((nega<> & α2657) | (α2660 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg2698, Nega#E: mut E2706..E2706})  <!<  α2656
//│ ╟── while constraining:  (nega<> & {arg: arg2698, Nega#E: mut E2706..E2706})  <!<  α2655
//│ ╟── while constraining:  (nega<> & {arg: arg2698, Nega#E: mut E2706..E2706})  <!<  ((lit<> & α2648) | (((add<> & α2650) | (α2655 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α2697  <!<  ((lit<> & α2648) | (((add<> & α2650) | (α2655 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1825'  <!<  ((lit<> & α2648) | (((add<> & α2650) | (α2655 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1825'  <!<  α2647
//│ ╟── while constraining:  (∀ 0. α1825',)  <!<  (α2647,)
//│ ╟── while constraining:  (α2647 -> (α2661 | (α2662 | α2663)))  <!<  ((∀ 0. α1825',) -> α2696)
//│ ╙── while constraining:  α2695  <!<  ((∀ 0. α1825',) -> α2696)
//│ res: error
//│    = '-1-1'

:e
:stats
prettier22 done (eval2 done)
prettier22 done (eval2 done) e2
prettier22 done (eval2 done) d2
//│ res: 'a -> string
//│   where
//│     'a <: Add[?] & {lhs: 'b, rhs: 'b} & 'c | Lit | Nega[?] & {arg: 'a}
//│     'c <: Add[?] & {lhs: 'c, rhs: 'c} | Lit | Nega[?] & {arg: 'c}
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | Nega[?] & {arg: 'a}
//│    = [Function (anonymous)]
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?b, ?E, ?E0. ?b) -> ?c` exceeded recursion depth limit (100)
//│ ║  l.658: 	prettier22 done (eval2 done) e2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (add<> & {lhs: lhs3037, rhs: rhs3041, Add#E: mut E3039..E3039})  <!<  ((lit<> & α3006) | (((add<> & α3008) | (α3011 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (add<> & {lhs: lhs3037, rhs: rhs3041, Add#E: mut E3039..E3039})  <!<  α3005
//│ ╟── while constraining:  (add<> & {lhs: lhs3037, rhs: rhs3041, Add#E: mut E3039..E3039})  <!<  rhs3009
//│ ╟── while constraining:  rhs3042  <!<  rhs3009
//│ ╟── while constraining:  (add<> & {Add#E: mut E3036..E3036, lhs: lhs3034, rhs: rhs3042})  <!<  {rhs: rhs3009}
//│ ╟── while constraining:  (add<> & {Add#E: mut E3036..E3036, lhs: lhs3034, rhs: rhs3042})  <!<  α3008
//│ ╟── while constraining:  (add<> & {lhs: lhs3034, rhs: rhs3042, Add#E: mut E3036..E3036})  <!<  ((lit<> & α3006) | (((add<> & α3008) | (α3011 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α3033  <!<  ((lit<> & α3006) | (((add<> & α3008) | (α3011 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1000'  <!<  ((lit<> & α3006) | (((add<> & α3008) | (α3011 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1000'  <!<  α3005
//│ ╟── while constraining:  ∀ 0. α1000'  <!<  arg3015
//│ ╟── while constraining:  ∀ 0. α1000'  <!<  arg3014
//│ ╟── while constraining:  arg3030  <!<  arg3014
//│ ╟── while constraining:  (nega<> & {arg: arg3030, Nega#E: mut E3031..E3031})  <!<  {arg: arg3014}
//│ ╟── while constraining:  (nega<> & {arg: arg3030, Nega#E: mut E3031..E3031})  <!<  α3013
//│ ╟── while constraining:  (nega<> & {arg: arg3030, Nega#E: mut E3031..E3031})  <!<  ((nega<> & α3013) | (α3016 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg3030, Nega#E: mut E3031..E3031})  <!<  α3012
//│ ╟── while constraining:  (nega<> & {arg: arg3030, Nega#E: mut E3031..E3031})  <!<  α3011
//│ ╟── while constraining:  (nega<> & {arg: arg3030, Nega#E: mut E3031..E3031})  <!<  ((lit<> & α3006) | (((add<> & α3008) | (α3011 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg3030, Nega#E: mut E3031..E3031})  <!<  α3005
//│ ╟── while constraining:  (nega<> & {arg: arg3030, Nega#E: mut E3031..E3031})  <!<  rhs3009
//│ ╟── while constraining:  rhs3032  <!<  rhs3009
//│ ╟── while constraining:  (add<> & {Add#E: mut E3029..E3029, lhs: lhs3027, rhs: rhs3032})  <!<  {rhs: rhs3009}
//│ ╟── while constraining:  (add<> & {Add#E: mut E3029..E3029, lhs: lhs3027, rhs: rhs3032})  <!<  α3008
//│ ╟── while constraining:  (add<> & {Add#E: mut E3029..E3029, lhs: lhs3027, rhs: rhs3032})  <!<  ((lit<> & α3006) | (((add<> & α3008) | (α3011 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (add<> & {Add#E: mut E3029..E3029, lhs: lhs3027, rhs: rhs3032})  <!<  α3005
//│ ╟── while constraining:  (add<> & {Add#E: mut E3029..E3029, lhs: lhs3027, rhs: rhs3032})  <!<  α2946
//│ ╟── while constraining:  (add<> & {lhs: lhs3027, rhs: rhs3032, Add#E: mut E3029..E3029})  <!<  ((lit<> & α2960) | (((add<> & α2946) | (α2962 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α3026  <!<  ((lit<> & α2960) | (((add<> & α2946) | (α2962 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1673'  <!<  ((lit<> & α2960) | (((add<> & α2946) | (α2962 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1673'  <!<  α2959
//│ ╟── while constraining:  (∀ 0. α1673',)  <!<  (α2959,)
//│ ╟── while constraining:  (α2959 -> (α2983 | (α2984 | α2992)))  <!<  ((∀ 0. α1673',) -> α3025)
//│ ╙── while constraining:  α3024  <!<  ((∀ 0. α1673',) -> α3025)
//│ res: error
//│    = '1-123'
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?b, ?arg, ?lhs, ?val, ?E, ?arg0, ?val0, ?E0, ?rhs, ?E1. ?b) -> ?c` exceeded recursion depth limit (100)
//│ ║  l.659: 	prettier22 done (eval2 done) d2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (lit<> & {val: val3251})  <!<  arg3233
//│ ╟── while constraining:  arg3250  <!<  arg3233
//│ ╟── while constraining:  (nega<> & {arg: arg3250, Nega#E: mut E3252..E3252})  <!<  {arg: arg3233}
//│ ╟── while constraining:  (nega<> & {arg: arg3250, Nega#E: mut E3252..E3252})  <!<  α3232
//│ ╟── while constraining:  (nega<> & {arg: arg3250, Nega#E: mut E3252..E3252})  <!<  ((nega<> & α3232) | (α3235 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg3250, Nega#E: mut E3252..E3252})  <!<  α3231
//│ ╟── while constraining:  (nega<> & {arg: arg3250, Nega#E: mut E3252..E3252})  <!<  α3230
//│ ╟── while constraining:  (nega<> & {arg: arg3250, Nega#E: mut E3252..E3252})  <!<  ((lit<> & α3225) | (((add<> & α3227) | (α3230 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg3250, Nega#E: mut E3252..E3252})  <!<  α3224
//│ ╟── while constraining:  (nega<> & {arg: arg3250, Nega#E: mut E3252..E3252})  <!<  rhs3228
//│ ╟── while constraining:  rhs3253  <!<  rhs3228
//│ ╟── while constraining:  (add<> & {Add#E: mut E3249..E3249, lhs: lhs3247, rhs: rhs3253})  <!<  {rhs: rhs3228}
//│ ╟── while constraining:  (add<> & {Add#E: mut E3249..E3249, lhs: lhs3247, rhs: rhs3253})  <!<  α3227
//│ ╟── while constraining:  (add<> & {Add#E: mut E3249..E3249, lhs: lhs3247, rhs: rhs3253})  <!<  ((lit<> & α3225) | (((add<> & α3227) | (α3230 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (add<> & {Add#E: mut E3249..E3249, lhs: lhs3247, rhs: rhs3253})  <!<  α3224
//│ ╟── while constraining:  (add<> & {Add#E: mut E3249..E3249, lhs: lhs3247, rhs: rhs3253})  <!<  α3165
//│ ╟── while constraining:  (add<> & {lhs: lhs3247, rhs: rhs3253, Add#E: mut E3249..E3249})  <!<  ((lit<> & α3179) | (((add<> & α3165) | (α3181 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (add<> & {lhs: lhs3247, rhs: rhs3253, Add#E: mut E3249..E3249})  <!<  α3178
//│ ╟── while constraining:  (add<> & {lhs: lhs3247, rhs: rhs3253, Add#E: mut E3249..E3249})  <!<  arg3177
//│ ╟── while constraining:  (add<> & {lhs: lhs3247, rhs: rhs3253, Add#E: mut E3249..E3249})  <!<  arg3184
//│ ╟── while constraining:  arg3246  <!<  arg3184
//│ ╟── while constraining:  (nega<> & {arg: arg3246, Nega#E: mut E3254..E3254})  <!<  {arg: arg3184}
//│ ╟── while constraining:  (nega<> & {arg: arg3246, Nega#E: mut E3254..E3254})  <!<  α3183
//│ ╟── while constraining:  (nega<> & {arg: arg3246, Nega#E: mut E3254..E3254})  <!<  ((nega<> & α3183) | (α3185 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg3246, Nega#E: mut E3254..E3254})  <!<  α3182
//│ ╟── while constraining:  (nega<> & {arg: arg3246, Nega#E: mut E3254..E3254})  <!<  α3181
//│ ╟── while constraining:  (nega<> & {arg: arg3246, Nega#E: mut E3254..E3254})  <!<  ((lit<> & α3179) | (((add<> & α3165) | (α3181 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α3245  <!<  ((lit<> & α3179) | (((add<> & α3165) | (α3181 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1825'  <!<  ((lit<> & α3179) | (((add<> & α3165) | (α3181 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1825'  <!<  α3178
//│ ╟── while constraining:  (∀ 0. α1825',)  <!<  (α3178,)
//│ ╟── while constraining:  (α3178 -> (α3202 | (α3203 | α3211)))  <!<  ((∀ 0. α1825',) -> α3244)
//│ ╙── while constraining:  α3243  <!<  ((∀ 0. α1825',) -> α3244)
//│ res: error
//│    = '-1'
//│ constrain calls  : 489
//│ annoying  calls  : 79
//│ subtyping calls  : 3435




// === === === ERROR CASES === === === //


:ShowRelativeLineNums


:e
eval1 done e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	eval1 done e2
//│ ║        	^^^^^^^^^^^^^
//│ ╟── application of type `Nega[?E] & {Nega#E = ?E, arg: ?arg}` does not match type `nothing`
//│ ║  l.372: 	def nega arg = Nega { arg }
//│ ║         	               ^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.4: 	def done x = case x of {}
//│ ║       	                  ^
//│ ╟── from field selection:
//│ ║  l.73: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ╙──      	                                   ^^^^^
//│ res: error | int
//│ Runtime error:
//│   Error: non-exhaustive case expression


:e
prettier2 done eval1 e1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval1 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (?b | ?c)` is not an instance of type `int`
//│ ║  l.71: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.72: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.73: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.74: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.75: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.272: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval1 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Lit & {val: ?val}` is not a function
//│ ║  l.18: 	def lit val = Lit { val }
//│ ║        	              ^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.74: 	  | _ -> k e
//│ ║        	         ^^^
//│ ╟── from field selection:
//│ ║  l.272: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	                 ^^^^^
//│ res: error
//│    = '123'


:e
:stats
prettier2 done (eval1 done) e2
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?b, ?E, ?E0. ?b) -> ?c` exceeded recursion depth limit (100)
//│ ║  l.+1: 	prettier2 done (eval1 done) e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (add<> & {Add#E: mut E3599..E3599, lhs: lhs3597, rhs: rhs3601})  <!<  {rhs: rhs3548}
//│ ╟── while constraining:  (add<> & {Add#E: mut E3599..E3599, lhs: lhs3597, rhs: rhs3601})  <!<  α3547
//│ ╟── while constraining:  (add<> & {lhs: lhs3597, rhs: rhs3601, Add#E: mut E3599..E3599})  <!<  ((lit<> & α3545) | (((add<> & α3547) | (α3552 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (add<> & {lhs: lhs3597, rhs: rhs3601, Add#E: mut E3599..E3599})  <!<  α3544
//│ ╟── while constraining:  (add<> & {lhs: lhs3597, rhs: rhs3601, Add#E: mut E3599..E3599})  <!<  rhs3548
//│ ╟── while constraining:  rhs3602  <!<  rhs3548
//│ ╟── while constraining:  (add<> & {Add#E: mut E3596..E3596, lhs: lhs3594, rhs: rhs3602})  <!<  {rhs: rhs3548}
//│ ╟── while constraining:  (add<> & {Add#E: mut E3596..E3596, lhs: lhs3594, rhs: rhs3602})  <!<  α3547
//│ ╟── while constraining:  (add<> & {lhs: lhs3594, rhs: rhs3602, Add#E: mut E3596..E3596})  <!<  ((lit<> & α3545) | (((add<> & α3547) | (α3552 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α3593  <!<  ((lit<> & α3545) | (((add<> & α3547) | (α3552 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1000'  <!<  ((lit<> & α3545) | (((add<> & α3547) | (α3552 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1000'  <!<  α3544
//│ ╟── while constraining:  ∀ 0. α1000'  <!<  arg3556
//│ ╟── while constraining:  ∀ 0. α1000'  <!<  arg3555
//│ ╟── while constraining:  arg3590  <!<  arg3555
//│ ╟── while constraining:  (nega<> & {arg: arg3590, Nega#E: mut E3591..E3591})  <!<  {arg: arg3555}
//│ ╟── while constraining:  (nega<> & {arg: arg3590, Nega#E: mut E3591..E3591})  <!<  α3554
//│ ╟── while constraining:  (nega<> & {arg: arg3590, Nega#E: mut E3591..E3591})  <!<  ((nega<> & α3554) | (α3557 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg3590, Nega#E: mut E3591..E3591})  <!<  α3553
//│ ╟── while constraining:  (nega<> & {arg: arg3590, Nega#E: mut E3591..E3591})  <!<  α3552
//│ ╟── while constraining:  (nega<> & {arg: arg3590, Nega#E: mut E3591..E3591})  <!<  ((lit<> & α3545) | (((add<> & α3547) | (α3552 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg3590, Nega#E: mut E3591..E3591})  <!<  α3544
//│ ╟── while constraining:  (nega<> & {arg: arg3590, Nega#E: mut E3591..E3591})  <!<  rhs3548
//│ ╟── while constraining:  rhs3592  <!<  rhs3548
//│ ╟── while constraining:  (add<> & {Add#E: mut E3589..E3589, lhs: lhs3587, rhs: rhs3592})  <!<  {rhs: rhs3548}
//│ ╟── while constraining:  (add<> & {Add#E: mut E3589..E3589, lhs: lhs3587, rhs: rhs3592})  <!<  α3547
//│ ╟── while constraining:  (add<> & {lhs: lhs3587, rhs: rhs3592, Add#E: mut E3589..E3589})  <!<  ((lit<> & α3545) | (((add<> & α3547) | (α3552 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α3586  <!<  ((lit<> & α3545) | (((add<> & α3547) | (α3552 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1673'  <!<  ((lit<> & α3545) | (((add<> & α3547) | (α3552 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1673'  <!<  α3544
//│ ╟── while constraining:  (∀ 0. α1673',)  <!<  (α3544,)
//│ ╟── while constraining:  (α3544 -> (α3558 | (α3559 | α3560)))  <!<  ((∀ 0. α1673',) -> α3585)
//│ ╙── while constraining:  α3584  <!<  ((∀ 0. α1673',) -> α3585)
//│ res: error
//│ Runtime error:
//│   Error: non-exhaustive case expression
//│ constrain calls  : 195
//│ annoying  calls  : 38
//│ subtyping calls  : 1152

:e
:stats
prettier2 done eval2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> ?b` is not an instance of type `int`
//│ ║  l.71: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.72: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.73: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.74: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.75: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.272: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ res: 'a -> string | error
//│   where
//│     'a <: Add[?] & {lhs: nothing -> int & 'a, rhs: nothing -> int & 'a} | Lit | Nega[?] & {arg: 'a}
//│    = [Function (anonymous)]
//│ constrain calls  : 77
//│ annoying  calls  : 0
//│ subtyping calls  : 244

:e
:stats
prettier2 done eval2 e1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> ?b` is not an instance of type `int`
//│ ║  l.71: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.72: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.73: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.74: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.75: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.272: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Lit & {val: ?val}` is not a function
//│ ║  l.18: 	def lit val = Lit { val }
//│ ║        	              ^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.381: 	  | _ -> k x
//│ ║         	         ^^^
//│ ╟── from field selection:
//│ ║  l.272: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	                 ^^^^^
//│ res: error
//│    = '123'
//│ constrain calls  : 388
//│ annoying  calls  : 108
//│ subtyping calls  : 1934

:e
:stats
prettier2 done eval2 e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> ?b` is not an instance of type `int`
//│ ║  l.71: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.72: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.73: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.74: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.75: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.272: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?b, ?E, ?E0. ?b) -> ?c` exceeded recursion depth limit (100)
//│ ║  l.+1: 	prettier2 done eval2 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (add<> & {Add#E: mut E4140..E4140, lhs: lhs4138, rhs: rhs4142})  <!<  {rhs: rhs4026}
//│ ╟── while constraining:  (add<> & {Add#E: mut E4140..E4140, lhs: lhs4138, rhs: rhs4142})  <!<  α4025
//│ ╟── while constraining:  (add<> & {lhs: lhs4138, rhs: rhs4142, Add#E: mut E4140..E4140})  <!<  ((lit<> & α4023) | (((add<> & α4025) | (α4030 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (add<> & {lhs: lhs4138, rhs: rhs4142, Add#E: mut E4140..E4140})  <!<  α4022
//│ ╟── while constraining:  (add<> & {lhs: lhs4138, rhs: rhs4142, Add#E: mut E4140..E4140})  <!<  rhs4026
//│ ╟── while constraining:  rhs4143  <!<  rhs4026
//│ ╟── while constraining:  (add<> & {Add#E: mut E4137..E4137, lhs: lhs4135, rhs: rhs4143})  <!<  {rhs: rhs4026}
//│ ╟── while constraining:  (add<> & {Add#E: mut E4137..E4137, lhs: lhs4135, rhs: rhs4143})  <!<  α4025
//│ ╟── while constraining:  (add<> & {lhs: lhs4135, rhs: rhs4143, Add#E: mut E4137..E4137})  <!<  ((lit<> & α4023) | (((add<> & α4025) | (α4030 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α4134  <!<  ((lit<> & α4023) | (((add<> & α4025) | (α4030 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1000'  <!<  ((lit<> & α4023) | (((add<> & α4025) | (α4030 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1000'  <!<  α4022
//│ ╟── while constraining:  ∀ 0. α1000'  <!<  arg4034
//│ ╟── while constraining:  ∀ 0. α1000'  <!<  arg4033
//│ ╟── while constraining:  arg4131  <!<  arg4033
//│ ╟── while constraining:  (nega<> & {arg: arg4131, Nega#E: mut E4132..E4132})  <!<  {arg: arg4033}
//│ ╟── while constraining:  (nega<> & {arg: arg4131, Nega#E: mut E4132..E4132})  <!<  α4032
//│ ╟── while constraining:  (nega<> & {arg: arg4131, Nega#E: mut E4132..E4132})  <!<  ((nega<> & α4032) | (α4035 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg4131, Nega#E: mut E4132..E4132})  <!<  α4031
//│ ╟── while constraining:  (nega<> & {arg: arg4131, Nega#E: mut E4132..E4132})  <!<  α4030
//│ ╟── while constraining:  (nega<> & {arg: arg4131, Nega#E: mut E4132..E4132})  <!<  ((lit<> & α4023) | (((add<> & α4025) | (α4030 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg4131, Nega#E: mut E4132..E4132})  <!<  α4022
//│ ╟── while constraining:  (nega<> & {arg: arg4131, Nega#E: mut E4132..E4132})  <!<  rhs4026
//│ ╟── while constraining:  rhs4133  <!<  rhs4026
//│ ╟── while constraining:  (add<> & {Add#E: mut E4130..E4130, lhs: lhs4128, rhs: rhs4133})  <!<  {rhs: rhs4026}
//│ ╟── while constraining:  (add<> & {Add#E: mut E4130..E4130, lhs: lhs4128, rhs: rhs4133})  <!<  α4025
//│ ╟── while constraining:  (add<> & {lhs: lhs4128, rhs: rhs4133, Add#E: mut E4130..E4130})  <!<  ((lit<> & α4023) | (((add<> & α4025) | (α4030 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α4127  <!<  ((lit<> & α4023) | (((add<> & α4025) | (α4030 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1673'  <!<  ((lit<> & α4023) | (((add<> & α4025) | (α4030 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1673'  <!<  α4022
//│ ╟── while constraining:  (∀ 0. α1673',)  <!<  (α4022,)
//│ ╟── while constraining:  (α4022 -> (α4036 | (α4037 | α4038)))  <!<  ((∀ 0. α1673',) -> α4126)
//│ ╙── while constraining:  α4045  <!<  ((∀ 0. α1673',) -> α4126)
//│ res: error
//│    = '1-123'
//│ constrain calls  : 179
//│ annoying  calls  : 38
//│ subtyping calls  : 1217

:e
:stats
prettier2 done eval2 d2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 d2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> ?b` is not an instance of type `int`
//│ ║  l.71: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.72: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.73: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.74: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.75: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.272: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?b, ?arg, ?lhs, ?val, ?E, ?arg0, ?val0, ?E0, ?rhs, ?E1. ?b) -> ?c` exceeded recursion depth limit (100)
//│ ║  l.+1: 	prettier2 done eval2 d2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (lit<> & {val: val4346})  <!<  ((lit<> & α4236) | (((add<> & α4238) | (α4243 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (lit<> & {val: val4346})  <!<  α4235
//│ ╟── while constraining:  (lit<> & {val: val4346})  <!<  arg4247
//│ ╟── while constraining:  (lit<> & {val: val4346})  <!<  arg4246
//│ ╟── while constraining:  arg4345  <!<  arg4246
//│ ╟── while constraining:  (nega<> & {arg: arg4345, Nega#E: mut E4347..E4347})  <!<  {arg: arg4246}
//│ ╟── while constraining:  (nega<> & {arg: arg4345, Nega#E: mut E4347..E4347})  <!<  α4245
//│ ╟── while constraining:  (nega<> & {arg: arg4345, Nega#E: mut E4347..E4347})  <!<  ((nega<> & α4245) | (α4248 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg4345, Nega#E: mut E4347..E4347})  <!<  α4244
//│ ╟── while constraining:  (nega<> & {arg: arg4345, Nega#E: mut E4347..E4347})  <!<  α4243
//│ ╟── while constraining:  (nega<> & {arg: arg4345, Nega#E: mut E4347..E4347})  <!<  ((lit<> & α4236) | (((add<> & α4238) | (α4243 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg4345, Nega#E: mut E4347..E4347})  <!<  α4235
//│ ╟── while constraining:  (nega<> & {arg: arg4345, Nega#E: mut E4347..E4347})  <!<  rhs4239
//│ ╟── while constraining:  rhs4348  <!<  rhs4239
//│ ╟── while constraining:  (add<> & {Add#E: mut E4344..E4344, lhs: lhs4342, rhs: rhs4348})  <!<  {rhs: rhs4239}
//│ ╟── while constraining:  (add<> & {Add#E: mut E4344..E4344, lhs: lhs4342, rhs: rhs4348})  <!<  α4238
//│ ╟── while constraining:  (add<> & {lhs: lhs4342, rhs: rhs4348, Add#E: mut E4344..E4344})  <!<  ((lit<> & α4236) | (((add<> & α4238) | (α4243 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (add<> & {lhs: lhs4342, rhs: rhs4348, Add#E: mut E4344..E4344})  <!<  α4235
//│ ╟── while constraining:  (add<> & {lhs: lhs4342, rhs: rhs4348, Add#E: mut E4344..E4344})  <!<  arg4247
//│ ╟── while constraining:  (add<> & {lhs: lhs4342, rhs: rhs4348, Add#E: mut E4344..E4344})  <!<  arg4246
//│ ╟── while constraining:  arg4341  <!<  arg4246
//│ ╟── while constraining:  (nega<> & {arg: arg4341, Nega#E: mut E4349..E4349})  <!<  {arg: arg4246}
//│ ╟── while constraining:  (nega<> & {arg: arg4341, Nega#E: mut E4349..E4349})  <!<  α4245
//│ ╟── while constraining:  (nega<> & {arg: arg4341, Nega#E: mut E4349..E4349})  <!<  ((nega<> & α4245) | (α4248 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg4341, Nega#E: mut E4349..E4349})  <!<  α4244
//│ ╟── while constraining:  (nega<> & {arg: arg4341, Nega#E: mut E4349..E4349})  <!<  α4243
//│ ╟── while constraining:  (nega<> & {arg: arg4341, Nega#E: mut E4349..E4349})  <!<  ((lit<> & α4236) | (((add<> & α4238) | (α4243 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α4340  <!<  ((lit<> & α4236) | (((add<> & α4238) | (α4243 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1825'  <!<  ((lit<> & α4236) | (((add<> & α4238) | (α4243 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1825'  <!<  α4235
//│ ╟── while constraining:  (∀ 0. α1825',)  <!<  (α4235,)
//│ ╟── while constraining:  (α4235 -> (α4249 | (α4250 | α4251)))  <!<  ((∀ 0. α1825',) -> α4339)
//│ ╙── while constraining:  α4258  <!<  ((∀ 0. α1825',) -> α4339)
//│ res: error
//│    = '-1-1'
//│ constrain calls  : 179
//│ annoying  calls  : 36
//│ subtyping calls  : 1237

:e
:stats
prettier2 done eval1 e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval1 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (?b | ?c)` is not an instance of type `int`
//│ ║  l.71: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.72: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.73: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.74: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.75: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.272: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?b, ?E, ?E0. ?b) -> ?c` exceeded recursion depth limit (100)
//│ ║  l.+1: 	prettier2 done eval1 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (add<> & {Add#E: mut E4505..E4505, lhs: lhs4503, rhs: rhs4507})  <!<  {rhs: rhs4425}
//│ ╟── while constraining:  (add<> & {Add#E: mut E4505..E4505, lhs: lhs4503, rhs: rhs4507})  <!<  α4424
//│ ╟── while constraining:  (add<> & {lhs: lhs4503, rhs: rhs4507, Add#E: mut E4505..E4505})  <!<  ((lit<> & α4422) | (((add<> & α4424) | (α4429 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (add<> & {lhs: lhs4503, rhs: rhs4507, Add#E: mut E4505..E4505})  <!<  α4421
//│ ╟── while constraining:  (add<> & {lhs: lhs4503, rhs: rhs4507, Add#E: mut E4505..E4505})  <!<  rhs4425
//│ ╟── while constraining:  rhs4508  <!<  rhs4425
//│ ╟── while constraining:  (add<> & {Add#E: mut E4502..E4502, lhs: lhs4500, rhs: rhs4508})  <!<  {rhs: rhs4425}
//│ ╟── while constraining:  (add<> & {Add#E: mut E4502..E4502, lhs: lhs4500, rhs: rhs4508})  <!<  α4424
//│ ╟── while constraining:  (add<> & {lhs: lhs4500, rhs: rhs4508, Add#E: mut E4502..E4502})  <!<  ((lit<> & α4422) | (((add<> & α4424) | (α4429 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α4499  <!<  ((lit<> & α4422) | (((add<> & α4424) | (α4429 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1000'  <!<  ((lit<> & α4422) | (((add<> & α4424) | (α4429 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1000'  <!<  α4421
//│ ╟── while constraining:  ∀ 0. α1000'  <!<  arg4433
//│ ╟── while constraining:  ∀ 0. α1000'  <!<  arg4432
//│ ╟── while constraining:  arg4496  <!<  arg4432
//│ ╟── while constraining:  (nega<> & {arg: arg4496, Nega#E: mut E4497..E4497})  <!<  {arg: arg4432}
//│ ╟── while constraining:  (nega<> & {arg: arg4496, Nega#E: mut E4497..E4497})  <!<  α4431
//│ ╟── while constraining:  (nega<> & {arg: arg4496, Nega#E: mut E4497..E4497})  <!<  ((nega<> & α4431) | (α4434 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg4496, Nega#E: mut E4497..E4497})  <!<  α4430
//│ ╟── while constraining:  (nega<> & {arg: arg4496, Nega#E: mut E4497..E4497})  <!<  α4429
//│ ╟── while constraining:  (nega<> & {arg: arg4496, Nega#E: mut E4497..E4497})  <!<  ((lit<> & α4422) | (((add<> & α4424) | (α4429 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg4496, Nega#E: mut E4497..E4497})  <!<  α4421
//│ ╟── while constraining:  (nega<> & {arg: arg4496, Nega#E: mut E4497..E4497})  <!<  rhs4425
//│ ╟── while constraining:  rhs4498  <!<  rhs4425
//│ ╟── while constraining:  (add<> & {Add#E: mut E4495..E4495, lhs: lhs4493, rhs: rhs4498})  <!<  {rhs: rhs4425}
//│ ╟── while constraining:  (add<> & {Add#E: mut E4495..E4495, lhs: lhs4493, rhs: rhs4498})  <!<  α4424
//│ ╟── while constraining:  (add<> & {lhs: lhs4493, rhs: rhs4498, Add#E: mut E4495..E4495})  <!<  ((lit<> & α4422) | (((add<> & α4424) | (α4429 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α4492  <!<  ((lit<> & α4422) | (((add<> & α4424) | (α4429 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1673'  <!<  ((lit<> & α4422) | (((add<> & α4424) | (α4429 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1673'  <!<  α4421
//│ ╟── while constraining:  (∀ 0. α1673',)  <!<  (α4421,)
//│ ╟── while constraining:  (α4421 -> (α4435 | (α4436 | α4437)))  <!<  ((∀ 0. α1673',) -> α4491)
//│ ╙── while constraining:  α4444  <!<  ((∀ 0. α1673',) -> α4491)
//│ res: error
//│    = '1-123'
//│ constrain calls  : 173
//│ annoying  calls  : 38
//│ subtyping calls  : 1185

