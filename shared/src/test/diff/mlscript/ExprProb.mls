
def intToString: int -> string
def intToString x = toString x
def done x = case x of {}
//│ intToString: int -> string
//│            = <missing implementation>
//│ anything -> string
//│   <:  intToString:
//│ int -> string
//│            = [Function: intToString]
//│ done: nothing -> nothing
//│     = [Function: done]



class Lit: { val: int }
class Add[E]: { lhs: E; rhs: E }
def lit val = Lit { val }
def add lhs rhs = Add { lhs; rhs }
//│ Defined class Lit
//│ Defined class Add[+E]
//│ lit: (int & 'val) -> (Lit with {val: 'val})
//│    = [Function: lit]
//│ add: 'a -> 'rhs -> (Add['rhs | 'a] with {lhs: 'a, rhs: 'rhs})
//│    = [Function: add]



rec def eval1_stub k e = case e of {
  | Add -> eval1_stub k e.lhs
  | _ -> k e
  }
//│ eval1_stub: ('a -> 'b & 'c -> 'b) -> (Add[?] & {lhs: 'lhs} | 'a & ~#Add) -> 'b
//│   where
//│     'lhs <: Add[?] & {lhs: 'lhs} | 'c & ~#Add
//│           = [Function: eval1_stub]

rec def eval1_stub k e = case e of {
  | Add -> eval1_stub k e.lhs + eval1_stub k e.rhs
  | _ -> k e
  }
//│ eval1_stub: ('a -> 'b & 'c -> int & 'd -> int) -> (Add[?] & {lhs: 'lhs, rhs: 'rhs} | 'a & ~#Add) -> (int | 'b)
//│   where
//│     'lhs <: Add[?] & {lhs: 'lhs, rhs: 'rhs} | 'c & ~#Add
//│     'rhs <: Add[?] & {lhs: 'lhs, rhs: 'rhs} | 'd & ~#Add
//│           = [Function: eval1_stub1]

:ns
rec def eval1_stub e = case e of {
  | Lit -> 1
  | Add -> eval1_stub e.lhs
  | _ -> 0
  }
//│ eval1_stub: forall 'lhs, 'a, 'b, 'c, 'lhs0, 'd, 'e, 'eval1_stub. 'eval1_stub
//│   where
//│     'eval1_stub := forall 'f, 'g, 'h, 'lhs1, 'i, 'j. 'j -> (1 | 'i | 0)
//│     'i :> 'c
//│     'c :> forall 'k. 1 | 'k | 0
//│     'k :> 'c
//│     'j <: #Lit & 'f | (#Add & 'g | 'h & ~#Add) & ~#Lit
//│     'g <: {lhs: 'lhs1}
//│     'lhs1 <: 'lhs0
//│     'lhs0 <: 'd
//│     'd <: #Lit & 'e | (#Add & 'a | 'b & ~#Add) & ~#Lit
//│     'a <: {lhs: 'lhs}
//│     'lhs <: 'lhs0
//│           = [Function: eval1_stub2]

eval1_stub
//│ res: 'lhs -> (0 | 1)
//│   where
//│     'lhs <: Add[?] & {lhs: 'lhs} | Lit | ~Add[?] & ~Lit
//│    = [Function: eval1_stub2]

// def eval1: ('b -> int) -> Expr['b] -> int
:stats
rec def eval1 k e = case e of {
  | Lit -> e.val
  | Add -> eval1 k e.lhs + eval1 k e.rhs
  | _ -> k e
  }
//│ eval1: ('a -> 'val & 'b -> int & 'c -> int) -> (Add[?] & {lhs: 'lhs, rhs: 'rhs} | (Lit with {val: 'val}) | 'a & ~#Add & ~#Lit) -> (int | 'val)
//│   where
//│     'lhs <: Add[?] & {lhs: 'lhs, rhs: 'rhs} | Lit | 'b & ~#Add & ~#Lit
//│     'rhs <: Add[?] & {lhs: 'lhs, rhs: 'rhs} | Lit | 'c & ~#Add & ~#Lit
//│      = [Function: eval1]
//│ constrain calls  : 117
//│ annoying  calls  : 0
//│ subtyping calls  : 509

:ns
eval1
//│ res: forall 'val, 'rhs, 'a, 'b, 'val0, 'rhs0, 'c, 'd, 'e, 'eval1, 'f, 'lhs, 'rhs1, 'g, 'h, 'i, 'j, 'lhs0, 'k, 'l, 'm, 'n, 'lhs1, 'o, 'p. 'eval1
//│   where
//│     'eval1 := forall 'q, 'r, 's. 's -> (forall 't, 'lhs2, 'u, 'v, 'w, 'x, 'val1, 'rhs2, 'y. 'u -> ('val1 | 'x | 'w))
//│     'w :> 'r
//│     'x :> int
//│     'u <: #Lit & 'v | (#Add & 't | 'y & ~#Add) & ~#Lit
//│     'y <: 'q
//│     't <: {rhs: 'rhs2} & {lhs: 'lhs2}
//│     'lhs2 <: 'lhs1
//│     'rhs2 <: 'rhs
//│     'rhs <: 'n
//│     'n <: #Lit & 'b | (#Add & 'p | 'a & ~#Add) & ~#Lit
//│     'a <: 'm
//│     'p <: {rhs: 'rhs0} & {lhs: 'lhs0}
//│     'lhs0 <: 'lhs1
//│     'lhs1 <: 'g
//│     'g <: #Lit & 'h | (#Add & 'e | 'c & ~#Add) & ~#Lit
//│     'c <: 'k
//│     'e <: {rhs: 'rhs1} & {lhs: 'lhs}
//│     'lhs <: 'lhs1
//│     'rhs1 <: 'rhs
//│     'h <: {val: 'val0}
//│     'val0 <: int
//│     'rhs0 <: 'rhs
//│     'b <: {val: 'val}
//│     'val <: int
//│     'v <: {val: 'val1}
//│     's <: 'q -> 'r & 'l & 'f
//│     'l <: 'o
//│     'o <: 'm -> 'j & 'l & 'f
//│     'f <: 'i
//│     'i <: 'k -> 'd & 'l & 'f
//│     'd <: int
//│     'j <: int
//│    = [Function: eval1]

:re
error: ~Add[?]
//│ res: ~Add[nothing]
//│ Runtime error:
//│   Error: unexpected runtime error

:re
error: ('a & ~Lit) -> 'a
//│ res: ('a & ~Lit) -> 'a
//│ Runtime error:
//│   Error: unexpected runtime error

:re
error: ('a) -> ('a & Add[?])
error: ('a) -> ('a & ~Add[?])
error: ('a & ~Add[?]) -> 'a
//│ res: 'a -> (Add[?] & 'a)
//│ Runtime error:
//│   Error: unexpected runtime error
//│ res: 'a -> ('a & ~Add[nothing])
//│ Runtime error:
//│   Error: unexpected runtime error
//│ res: ('a & ~Add[?]) -> 'a
//│ Runtime error:
//│   Error: unexpected runtime error

:re
error: ('a & ~add) -> 'a
//│ res: ('a & ~#Add) -> 'a
//│ Runtime error:
//│   Error: unexpected runtime error

:ns
def eval1_ty_ugly: ('a -> int) -> (Lit | Add['b] | 'a & ~Lit & ~Add[?] as 'b) -> int
//│ eval1_ty_ugly: forall 'a, 'b. ('a -> int) -> 'b -> int
//│   where
//│     'b := Lit | Add['b] | 'a & ~Lit & ~Add[?]
//│              = <missing implementation>

eval1_ty_ugly
//│ res: ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~Add[?] & ~Lit | Add['b] | Lit
//│    = <no result>
//│      eval1_ty_ugly is not implemented

:stats
def eval1_ty_ugly = eval1
//│ ('a -> 'val & 'b -> int & 'c -> int) -> (Add[?] & {lhs: 'lhs, rhs: 'rhs} | (Lit with {val: 'val}) | 'a & ~#Add & ~#Lit) -> (int | 'val)
//│   where
//│     'lhs <: Add[?] & {lhs: 'lhs, rhs: 'rhs} | Lit | 'b & ~#Add & ~#Lit
//│     'rhs <: Add[?] & {lhs: 'lhs, rhs: 'rhs} | Lit | 'c & ~#Add & ~#Lit
//│   <:  eval1_ty_ugly:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~Add[?] & ~Lit | Add['b] | Lit
//│              = [Function: eval1_ty_ugly]
//│ constrain calls  : 194
//│ annoying  calls  : 111
//│ subtyping calls  : 1972

:ns
def eval1_ty: ('a -> int) -> (Lit | Add['b] | 'a & ~lit & ~add as 'b) -> int
//│ eval1_ty: forall 'a, 'b. ('a -> int) -> 'b -> int
//│   where
//│     'b := Lit | Add['b] | 'a & ~#Lit & ~#Add
//│         = <missing implementation>

eval1_ty
//│ res: ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~#Add & ~#Lit | Add['b] | Lit
//│    = <no result>
//│      eval1_ty is not implemented

:stats
def eval1_ty = eval1
//│ ('a -> 'val & 'b -> int & 'c -> int) -> (Add[?] & {lhs: 'lhs, rhs: 'rhs} | (Lit with {val: 'val}) | 'a & ~#Add & ~#Lit) -> (int | 'val)
//│   where
//│     'lhs <: Add[?] & {lhs: 'lhs, rhs: 'rhs} | Lit | 'b & ~#Add & ~#Lit
//│     'rhs <: Add[?] & {lhs: 'lhs, rhs: 'rhs} | Lit | 'c & ~#Add & ~#Lit
//│   <:  eval1_ty:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~#Add & ~#Lit | Add['b] | Lit
//│         = [Function: eval1_ty]
//│ constrain calls  : 194
//│ annoying  calls  : 111
//│ subtyping calls  : 1962

:stats
eval1_ty_ugly = eval1_ty
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~#Add & ~#Lit | Add['b] | Lit
//│   <:  eval1_ty_ugly:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~Add[?] & ~Lit | Add['b] | Lit
//│              = [Function: eval1]
//│ constrain calls  : 31
//│ annoying  calls  : 33
//│ subtyping calls  : 414

:stats
eval1_ty = eval1_ty_ugly
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~Add[?] & ~Lit | Add['b] | Lit
//│   <:  eval1_ty:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~#Add & ~#Lit | Add['b] | Lit
//│         = [Function: eval1]
//│ constrain calls  : 203
//│ annoying  calls  : 529
//│ subtyping calls  : 4550


// Workaround:
:ns
type E1[A] = Lit | Add[E1[A]] | A & ~lit & ~add
def eval1_ty: ('a -> int) -> E1['a] -> int
//│ Defined type alias E1[+A]
//│ eval1_ty: forall 'a. ('a -> int) -> E1['a] -> int
//│         = <missing implementation>

eval1_ty
//│ res: ('a -> int) -> E1['a] -> int
//│    = <no result>
//│      eval1_ty is not implemented

:stats
def eval1_ty = eval1
//│ ('a -> 'val & 'b -> int & 'c -> int) -> (Add[?] & {lhs: 'lhs, rhs: 'rhs} | (Lit with {val: 'val}) | 'a & ~#Add & ~#Lit) -> (int | 'val)
//│   where
//│     'lhs <: Add[?] & {lhs: 'lhs, rhs: 'rhs} | Lit | 'b & ~#Add & ~#Lit
//│     'rhs <: Add[?] & {lhs: 'lhs, rhs: 'rhs} | Lit | 'c & ~#Add & ~#Lit
//│   <:  eval1_ty:
//│ ('a -> int) -> E1['a] -> int
//│         = [Function: eval1_ty2]
//│ constrain calls  : 190
//│ annoying  calls  : 111
//│ subtyping calls  : 1756


:stats
rec def pretty1 k e = case e of {
  | Lit -> intToString e.val
  | Add -> concat (pretty1 k e.lhs) (pretty1 k e.rhs)
  | _ -> k e
  }
//│ pretty1: ('a -> 'b & 'c -> string & 'd -> string) -> (Add[?] & {lhs: 'lhs, rhs: 'rhs} | Lit | 'a & ~#Add & ~#Lit) -> (string | 'b)
//│   where
//│     'lhs <: Add[?] & {lhs: 'lhs, rhs: 'rhs} | Lit | 'c & ~#Add & ~#Lit
//│     'rhs <: Add[?] & {lhs: 'lhs, rhs: 'rhs} | Lit | 'd & ~#Add & ~#Lit
//│        = [Function: pretty1]
//│ constrain calls  : 126
//│ annoying  calls  : 0
//│ subtyping calls  : 543


:stats
rec def prettier1 k ev e = case e of {
  | Lit -> intToString e.val
  | Add ->
      if ev e.lhs == 0 then prettier1 k ev e.rhs
      else if ev e.rhs == 0 then prettier1 k ev e.lhs
      else concat (prettier1 k ev e.lhs) (prettier1 k ev e.rhs)
  | _ -> k e
  }
//│ prettier1: ('a -> 'b & 'c -> string & 'd -> string & 'e -> string & 'f -> string) -> ('rhs -> number & 'rhs0 -> number & 'rhs1 -> number & 'rhs2 -> number & 'rhs3 -> number) -> (Add[?] & {lhs: 'lhs & 'rhs, rhs: 'rhs4 & 'rhs} | Lit | 'a & ~#Add & ~#Lit) -> (string | 'b)
//│   where
//│     'lhs <: (Add[?] & {lhs: 'rhs1 & 'lhs, rhs: 'rhs1 & 'rhs4} | Lit | 'c & ~#Add & ~#Lit) & (Add[?] & {lhs: 'rhs2 & 'lhs, rhs: 'rhs2 & 'rhs4} | Lit | 'd & ~#Add & ~#Lit)
//│     'rhs4 <: (Add[?] & {lhs: 'rhs0 & 'lhs, rhs: 'rhs0 & 'rhs4} | Lit | 'e & ~#Add & ~#Lit) & (Add[?] & {lhs: 'rhs3 & 'lhs, rhs: 'rhs3 & 'rhs4} | Lit | 'f & ~#Add & ~#Lit)
//│          = [Function: prettier1]
//│ constrain calls  : 496
//│ annoying  calls  : 0
//│ subtyping calls  : 2115

:stats
rec def prettier11 k ev e = case e of {
  | Lit -> intToString e.val
  | Add ->
      let tmp = pretty1 k e.lhs
      in if ev e.rhs == 0 then tmp else concat tmp (prettier11 k ev e.rhs)
  | _ -> k e
  }
//│ prettier11: ('a -> 'b & 'c -> string & 'd -> string) -> ('rhs -> number & 'rhs0 -> number) -> (Add[?] & {lhs: Add[?] & {lhs: 'lhs, rhs: 'lhs} | Lit | 'c & ~#Add & ~#Lit, rhs: 'rhs1 & 'rhs} | Lit | 'a & ~#Add & ~#Lit) -> (string | 'b)
//│   where
//│     'rhs1 <: Add[?] & {lhs: Add[?] & {lhs: 'lhs0, rhs: 'lhs0} | Lit | 'd & ~#Add & ~#Lit, rhs: 'rhs0 & 'rhs1} | Lit | 'd & ~#Add & ~#Lit
//│     'lhs0 <: Add[?] & {lhs: 'lhs0, rhs: 'lhs0} | Lit | 'd & ~#Add & ~#Lit
//│     'lhs <: Add[?] & {lhs: 'lhs, rhs: 'lhs} | Lit | 'c & ~#Add & ~#Lit
//│           = [Function: prettier11]
//│ constrain calls  : 250
//│ annoying  calls  : 0
//│ subtyping calls  : 1352

// Doesn't make much sense, but generates very ugly type unless aggressively simplified:
:stats
rec def prettier12 k ev e = case e of {
  | Lit -> intToString e.val
  | Add ->
      let tmp = pretty1 k e.lhs
      in if ev e == 0 then tmp else concat tmp (pretty1 k e.rhs)
  | _ -> k e
  }
//│ prettier12: ('a -> 'b & 'c -> string) -> ('d -> number) -> (Add[?] & {lhs: Add[?] & {lhs: 'lhs, rhs: 'lhs} | Lit | 'c & ~#Add & ~#Lit, rhs: Add[?] & {lhs: 'lhs0, rhs: 'lhs0} | Lit | 'c & ~#Add & ~#Lit} & 'd | Lit | 'a & ~#Add & ~#Lit) -> (string | 'b)
//│   where
//│     'lhs0 <: Add[?] & {lhs: 'lhs0, rhs: 'lhs0} | Lit | 'c & ~#Add & ~#Lit
//│     'lhs <: Add[?] & {lhs: 'lhs, rhs: 'lhs} | Lit | 'c & ~#Add & ~#Lit
//│           = [Function: prettier12]
//│ constrain calls  : 238
//│ annoying  calls  : 0
//│ subtyping calls  : 1435


:stats
e1 = Add{lhs = Lit {val = 1}; rhs = Add{lhs = Lit {val = 2}; rhs = Lit {val = 3}}}
eval1 done e1
pretty1 done e1
prettier1 done (eval1 done) e1
prettier11 done (eval1 done) e1
prettier12 done (eval1 done) e1
//│ e1: Add[Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}} | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Add { lhs: Lit { val: 2 }, rhs: Lit { val: 3 } }
//│     }
//│ res: int
//│    = 6
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'
//│ constrain calls  : 2320
//│ annoying  calls  : 605
//│ subtyping calls  : 21027


e1 = add (lit 1) (add (lit 2) (lit 3))
eval1 done e1
pretty1 done e1
prettier1 done (eval1 done) e1
prettier11 done (eval1 done) e1
prettier12 done (eval1 done) e1
//│ e1: Add[Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}} | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Add { lhs: Lit { val: 2 }, rhs: Lit { val: 3 } }
//│     }
//│ res: int
//│    = 6
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'



class Nega[E]: { arg: E }
def nega arg = Nega { arg }
//│ Defined class Nega[+E]
//│ nega: 'arg -> Nega['arg]
//│     = [Function: nega]



rec def eval2 k = eval1 (fun x -> case x of {
  | Nega -> 0 - (eval2 k x.arg)
  | _ -> k x
  })
//│ eval2: ('a -> int & 'b -> int) -> (Add[?] & {lhs: 'rhs, rhs: 'rhs} | (Lit with {val: 'val}) | Nega[?] & {arg: 'rhs0} | 'a & ~#Add & ~#Lit & ~#Nega) -> (int | 'val)
//│   where
//│     'rhs <: Add[?] & {lhs: 'rhs, rhs: 'rhs} | Lit | Nega[?] & {arg: 'rhs0} | 'a & ~#Add & ~#Lit & ~#Nega
//│     'rhs0 <: Add[?] & {lhs: 'rhs0, rhs: 'rhs0} | Lit | Nega[?] & {arg: 'rhs0} | 'b & ~#Add & ~#Lit & ~#Nega
//│      = [Function: eval2]


:stats
rec def prettier2 k ev = prettier1 (fun x -> case x of {
  | Nega -> concat "-" (prettier2 k ev x.arg)
  | _ -> k x
  }) ev
//│ prettier2: ('a -> string & 'b -> string) -> ('rhs -> number & 'rhs0 -> number & 'rhs1 -> number & 'rhs2 -> number & 'rhs3 -> number & 'rhs4 -> number & 'rhs5 -> number & 'rhs6 -> number & 'rhs7 -> number & 'rhs8 -> number) -> (Add[?] & {lhs: 'rhs & 'lhs, rhs: 'rhs & 'rhs9} | Lit | Nega[?] & {arg: 'arg} | 'a & ~#Add & ~#Lit & ~#Nega) -> string
//│   where
//│     'lhs <: (Add[?] & {lhs: 'rhs6 & 'lhs, rhs: 'rhs6 & 'rhs9} | Lit | Nega[?] & {arg: 'arg} | 'a & ~#Add & ~#Lit & ~#Nega) & (Add[?] & {lhs: 'rhs7 & 'lhs, rhs: 'rhs7 & 'rhs9} | Lit | Nega[?] & {arg: 'arg} | 'a & ~#Add & ~#Lit & ~#Nega)
//│     'rhs9 <: (Add[?] & {lhs: 'rhs5 & 'lhs, rhs: 'rhs5 & 'rhs9} | Lit | Nega[?] & {arg: 'arg} | 'a & ~#Add & ~#Lit & ~#Nega) & (Add[?] & {lhs: 'rhs8 & 'lhs, rhs: 'rhs8 & 'rhs9} | Lit | Nega[?] & {arg: 'arg} | 'a & ~#Add & ~#Lit & ~#Nega)
//│     'arg <: Add[?] & {lhs: 'rhs4 & 'lhs0, rhs: 'rhs4 & 'rhs10} | Lit | Nega[?] & {arg: 'arg} | 'b & ~#Add & ~#Lit & ~#Nega
//│     'lhs0 <: (Add[?] & {lhs: 'rhs1 & 'lhs0, rhs: 'rhs1 & 'rhs10} | Lit | Nega[?] & {arg: 'arg} | 'b & ~#Add & ~#Lit & ~#Nega) & (Add[?] & {lhs: 'rhs2 & 'lhs0, rhs: 'rhs2 & 'rhs10} | Lit | Nega[?] & {arg: 'arg} | 'b & ~#Add & ~#Lit & ~#Nega)
//│     'rhs10 <: (Add[?] & {lhs: 'rhs0 & 'lhs0, rhs: 'rhs0 & 'rhs10} | Lit | Nega[?] & {arg: 'arg} | 'b & ~#Add & ~#Lit & ~#Nega) & (Add[?] & {lhs: 'rhs3 & 'lhs0, rhs: 'rhs3 & 'rhs10} | Lit | Nega[?] & {arg: 'arg} | 'b & ~#Add & ~#Lit & ~#Nega)
//│          = [Function: prettier2]
//│ constrain calls  : 365
//│ annoying  calls  : 0
//│ subtyping calls  : 2753

:stats
rec def prettier22 k ev = prettier12 (fun x -> case x of {
  | Nega -> concat "-" (prettier22 k ev x.arg)
  | _ -> k x
  }) ev
//│ prettier22: ('a -> string & 'b -> string) -> ('c -> number & 'd -> number) -> (Add[?] & {lhs: 'rhs, rhs: 'rhs} & 'c | Lit | Nega[?] & {arg: 'arg} | 'a & ~#Add & ~#Lit & ~#Nega) -> string
//│   where
//│     'rhs <: Add[?] & {lhs: 'rhs, rhs: 'rhs} | Lit | Nega[?] & {arg: 'arg} | 'a & ~#Add & ~#Lit & ~#Nega
//│     'arg <: Add[?] & {lhs: 'rhs0, rhs: 'rhs0} & 'd | Lit | Nega[?] & {arg: 'arg} | 'b & ~#Add & ~#Lit & ~#Nega
//│     'rhs0 <: Add[?] & {lhs: 'rhs0, rhs: 'rhs0} | Lit | Nega[?] & {arg: 'arg} | 'b & ~#Add & ~#Lit & ~#Nega
//│           = [Function: prettier22]
//│ constrain calls  : 369
//│ annoying  calls  : 0
//│ subtyping calls  : 3383



:stats
eval2 done e1
//│ res: int
//│    = 6
//│ constrain calls  : 209
//│ annoying  calls  : 60
//│ subtyping calls  : 1325

e2 = add (lit 1) (nega e1)
//│ e2: Add[Lit & {val: 1} | Nega[Add[Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}} | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}]] with {lhs: Lit & {val: 1}, rhs: Nega[Add[Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}} | Lit & {val: 1}] with {lhs: Lit & {val: 1}, rhs: Add[Lit & {val: 2 | 3}] & {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}]}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Nega { arg: Add { lhs: [Lit], rhs: [Add] } }
//│     }

:stats
eval2 done e2
//│ res: int
//│    = -5
//│ constrain calls  : 308
//│ annoying  calls  : 103
//│ subtyping calls  : 2063

d2 = nega (add (lit 1) (nega (lit 1)))
//│ d2: Nega[Add[Lit & {val: 1} | Nega[Lit & {val: 1}]] with {lhs: Lit & {val: 1}, rhs: Nega[Lit & {val: 1}]}]
//│   = Nega { arg: Add { lhs: Lit { val: 1 }, rhs: Nega { arg: [Lit] } } }

:stats
eval2 done d2
//│ res: int
//│    = 0
//│ constrain calls  : 214
//│ annoying  calls  : 71
//│ subtyping calls  : 1355


prettier2 done
//│ res: ('rhs -> number & 'rhs0 -> number & 'rhs1 -> number & 'rhs2 -> number & 'rhs3 -> number & 'rhs4 -> number & 'rhs5 -> number & 'rhs6 -> number & 'rhs7 -> number & 'rhs8 -> number) -> (Add[?] & {lhs: 'rhs & 'lhs, rhs: 'rhs & 'rhs9} | Lit | Nega[?] & {arg: 'arg}) -> string
//│   where
//│     'lhs <: (Add[?] & {lhs: 'rhs1 & 'lhs, rhs: 'rhs1 & 'rhs9} | Lit | Nega[?] & {arg: 'arg}) & (Add[?] & {lhs: 'rhs2 & 'lhs, rhs: 'rhs2 & 'rhs9} | Lit | Nega[?] & {arg: 'arg})
//│     'rhs9 <: (Add[?] & {lhs: 'rhs0 & 'lhs, rhs: 'rhs0 & 'rhs9} | Lit | Nega[?] & {arg: 'arg}) & (Add[?] & {lhs: 'rhs3 & 'lhs, rhs: 'rhs3 & 'rhs9} | Lit | Nega[?] & {arg: 'arg})
//│     'arg <: Add[?] & {lhs: 'rhs8 & 'lhs0, rhs: 'rhs8 & 'rhs10} | Lit | Nega[?] & {arg: 'arg}
//│     'lhs0 <: (Add[?] & {lhs: 'rhs7 & 'lhs0, rhs: 'rhs7 & 'rhs10} | Lit | Nega[?] & {arg: 'arg}) & (Add[?] & {lhs: 'rhs4 & 'lhs0, rhs: 'rhs4 & 'rhs10} | Lit | Nega[?] & {arg: 'arg})
//│     'rhs10 <: (Add[?] & {lhs: 'rhs6 & 'lhs0, rhs: 'rhs6 & 'rhs10} | Lit | Nega[?] & {arg: 'arg}) & (Add[?] & {lhs: 'rhs5 & 'lhs0, rhs: 'rhs5 & 'rhs10} | Lit | Nega[?] & {arg: 'arg})
//│    = [Function (anonymous)]

prettier22 done
//│ res: ('a -> number & 'b -> number) -> (Add[?] & {lhs: 'rhs, rhs: 'rhs} & 'a | Lit | Nega[?] & {arg: 'arg}) -> string
//│   where
//│     'rhs <: Add[?] & {lhs: 'rhs, rhs: 'rhs} | Lit | Nega[?] & {arg: 'arg}
//│     'arg <: Add[?] & {lhs: 'rhs, rhs: 'rhs} & 'b | Lit | Nega[?] & {arg: 'arg}
//│    = [Function (anonymous)]

:stats
prettier2 done (eval1 done)
//│ res: 'rhs -> string
//│   where
//│     'rhs <: Add[?] & {lhs: 'rhs & 'rhs0, rhs: 'rhs & 'rhs0} | Lit | Nega[?] & {arg: 'rhs}
//│     'rhs0 <: Add[?] & {lhs: 'rhs0, rhs: 'rhs0} | Lit
//│    = [Function (anonymous)]
//│ constrain calls  : 667
//│ annoying  calls  : 0
//│ subtyping calls  : 4310



prettier22 done (eval1 done)
//│ res: (Add[?] & {lhs: 'rhs & 'rhs0, rhs: 'rhs & 'rhs0} | Lit | Nega[?] & {arg: 'arg}) -> string
//│   where
//│     'rhs0 <: Add[?] & {lhs: 'rhs0, rhs: 'rhs0} | Lit | Nega[?] & {arg: 'arg}
//│     'arg <: Add[?] & {lhs: 'rhs & 'rhs0, rhs: 'rhs & 'rhs0} | Lit | Nega[?] & {arg: 'arg}
//│     'rhs <: Add[?] & {lhs: 'rhs, rhs: 'rhs} | Lit
//│    = [Function (anonymous)]

// * TODO could probably merge `a` and `b` here!
:stats
prettier2 done (eval2 done)
//│ res: (Add[?] & {lhs: 'lhs & 'rhs, rhs: 'rhs0 & 'rhs} | Lit | Nega[?] & {arg: 'arg}) -> string
//│   where
//│     'lhs <: Add[?] & {lhs: 'lhs & 'rhs, rhs: 'rhs0 & 'rhs} | Lit | Nega[?] & {arg: 'arg}
//│     'rhs0 <: Add[?] & {lhs: 'lhs & 'rhs, rhs: 'rhs0 & 'rhs} | Lit | Nega[?] & {arg: 'arg}
//│     'arg <: Add[?] & {lhs: 'lhs0 & 'rhs, rhs: 'rhs1 & 'rhs} | Lit | Nega[?] & {arg: 'arg}
//│     'lhs0 <: Add[?] & {lhs: 'lhs0 & 'rhs, rhs: 'rhs1 & 'rhs} | Lit | Nega[?] & {arg: 'arg}
//│     'rhs1 <: Add[?] & {lhs: 'lhs0 & 'rhs, rhs: 'rhs1 & 'rhs} | Lit | Nega[?] & {arg: 'arg}
//│     'rhs <: Add[?] & {lhs: 'rhs, rhs: 'rhs} | Lit | Nega[?] & {arg: 'rhs}
//│    = [Function (anonymous)]
//│ constrain calls  : 772
//│ annoying  calls  : 0
//│ subtyping calls  : 10378

prettier2 done (eval2 done) e2
prettier2 done (eval2 done) d2
//│ res: string
//│    = '1-123'
//│ res: string
//│    = '-1-1'

:stats
prettier22 done (eval2 done)
prettier22 done (eval2 done) e2
prettier22 done (eval2 done) d2
//│ res: (Add[?] & {lhs: 'rhs & 'rhs0, rhs: 'rhs & 'rhs0} | Lit | Nega[?] & {arg: 'arg}) -> string
//│   where
//│     'rhs0 <: Add[?] & {lhs: 'rhs0, rhs: 'rhs0} | Lit | Nega[?] & {arg: 'arg}
//│     'arg <: Add[?] & {lhs: 'rhs & 'rhs0, rhs: 'rhs & 'rhs0} | Lit | Nega[?] & {arg: 'arg}
//│     'rhs <: Add[?] & {lhs: 'rhs, rhs: 'rhs} | Lit | Nega[?] & {arg: 'rhs}
//│    = [Function (anonymous)]
//│ res: string
//│    = '1-123'
//│ res: string
//│    = '-1'
//│ constrain calls  : 1484
//│ annoying  calls  : 390
//│ subtyping calls  : 12267




// === === === ERROR CASES === === === //


:ShowRelativeLineNums


:e
eval1 done e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	eval1 done e2
//│ ║        	^^^^^^^^^^^^^
//│ ╟── application of type `Nega[?E] & {Nega#E = ?E, arg: ?arg}` does not match type `nothing`
//│ ║  l.398: 	def nega arg = Nega { arg }
//│ ║         	               ^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.4: 	def done x = case x of {}
//│ ║       	                  ^
//│ ╟── from field selection:
//│ ║  l.79: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ╙──      	                                   ^^^^^
//│ res: error | int
//│ Runtime error:
//│   Error: non-exhaustive case expression


:e
prettier2 done eval1 e1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval1 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (forall ?b, ?c. ?val | ?b | ?c)` is not an instance of type `number`
//│ ║  l.77: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.78: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.79: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.80: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.81: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.296: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ res: error
//│    = '123'


:e
:stats
prettier2 done (eval1 done) e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done (eval1 done) e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Nega[?E] & {Nega#E = ?E, arg: ?arg}` does not match type `nothing`
//│ ║  l.398: 	def nega arg = Nega { arg }
//│ ║         	               ^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.4: 	def done x = case x of {}
//│ ║       	                  ^
//│ ╟── from field selection:
//│ ║  l.296: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	                 ^^^^^
//│ res: error | string
//│ Runtime error:
//│   Error: non-exhaustive case expression
//│ constrain calls  : 1577
//│ annoying  calls  : 361
//│ subtyping calls  : 15106

:e
:stats
prettier2 done eval2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (forall ?b, ?c. ?val | ?b | ?c)` is not an instance of type `number`
//│ ║  l.77: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.78: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.79: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.80: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.81: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.296: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ res: error
//│    = [Function (anonymous)]
//│ constrain calls  : 185
//│ annoying  calls  : 0
//│ subtyping calls  : 1179

:e
:stats
prettier2 done eval2 e1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (forall ?b, ?c. ?val | ?b | ?c)` is not an instance of type `number`
//│ ║  l.77: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.78: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.79: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.80: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.81: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.296: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ res: error
//│    = '123'
//│ constrain calls  : 192
//│ annoying  calls  : 0
//│ subtyping calls  : 1189

:e
:stats
prettier2 done eval2 e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (forall ?b, ?c. ?val | ?b | ?c)` is not an instance of type `number`
//│ ║  l.77: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.78: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.79: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.80: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.81: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.296: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ res: error
//│    = '1-123'
//│ constrain calls  : 192
//│ annoying  calls  : 0
//│ subtyping calls  : 1189

:e
:stats
prettier2 done eval2 d2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 d2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (forall ?b, ?c. ?val | ?b | ?c)` is not an instance of type `number`
//│ ║  l.77: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.78: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.79: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.80: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.81: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.296: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ res: error
//│    = '-1-1'
//│ constrain calls  : 192
//│ annoying  calls  : 0
//│ subtyping calls  : 1189

:e
:stats
prettier2 done eval1 e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval1 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (forall ?b, ?c. ?val | ?b | ?c)` is not an instance of type `number`
//│ ║  l.77: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.78: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.79: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.80: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.81: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.296: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ res: error
//│    = '1-123'
//│ constrain calls  : 172
//│ annoying  calls  : 0
//│ subtyping calls  : 709

