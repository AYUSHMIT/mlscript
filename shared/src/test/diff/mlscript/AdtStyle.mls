datatype Either[A, B] = Left[A] of {_0: A} || Right[B] of {_0: B}
// datatype Either[A, B] = Left[A] of {left: A} | Right[B] of {right: B}
//│ Defined type alias Either[+A, +B]
//│ Defined class Left[+A]
//│ Defined class Right[+B]
//│ Left: 'a -> Either['a, nothing]
//│     = <missing implementation>
//│ Right: 'a -> Either[nothing, 'a]
//│      = <missing implementation>

datatype List[A] = Cons[A] of {head: A; tail: List[A]} || Nil
//│ Defined type alias List[+A]
//│ Defined class Cons[+A]
//│ Defined class Nil
//│ Cons: ('a, List['a],) -> List['a]
//│     = <missing implementation>
//│ Nil: List[nothing]
//│    = <missing implementation>

type Heap = List[(string, int)]
datatype HeapVar = HeapInt of {_0: int} || HeapV of {_0: Heap}
datatype Exp = EInt of int || Var of string || Plus of (Exp, Exp) || Times of (Exp, Exp)
datatype Stmt = Skip || Assign of (string, Exp)
//│ ╔══[ERROR] cannot inherit from a tuple type
//│ ║  l.22: 	datatype Exp = EInt of int || Var of string || Plus of (Exp, Exp) || Times of (Exp, Exp)
//│ ╙──      	                                               ^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] cannot inherit from a tuple type
//│ ║  l.22: 	datatype Exp = EInt of int || Var of string || Plus of (Exp, Exp) || Times of (Exp, Exp)
//│ ╙──      	                                                                     ^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] cannot inherit from a tuple type
//│ ║  l.23: 	datatype Stmt = Skip || Assign of (string, Exp)
//│ ╙──      	                        ^^^^^^^^^^^^^^^^^^^^^^^
//│ Defined type alias Heap
//│ Defined type alias HeapVar
//│ Defined class HeapInt
//│ Defined class HeapV
//│ Defined type alias Exp
//│ Defined class EInt
//│ Defined class Var
//│ Defined type alias Stmt
//│ Defined class Skip
//│ HeapInt: int -> HeapVar
//│ HeapV: Heap -> HeapVar
//│ Skip: Stmt
//│ Code generation encountered an error:
//│   cannot inherit from type alias int

datatype Poly[A] = PolyList[A] of List[A -> A]
//│ ╔══[ERROR] cannot inherit from a type alias
//│ ║  l.48: 	datatype Poly[A] = PolyList[A] of List[A -> A]
//│ ╙──      	                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ Defined type alias Poly[±A]
//│ ╔══[WARNING] Type definition Poly has bivariant type parameters:
//│ ║  l.48: 	datatype Poly[A] = PolyList[A] of List[A -> A]
//│ ║        	         ^^^^
//│ ╟── A is irrelevant and may be removed
//│ ║  l.48: 	datatype Poly[A] = PolyList[A] of List[A -> A]
//│ ╙──      	              ^
//│ Code generation encountered an error:
//│   cannot inherit from type alias List

datatype FCPoly[A] = FCPolyList[A] of List[forall 'a. A -> A]
//│ ╔══[ERROR] cannot inherit from a type alias
//│ ║  l.62: 	datatype FCPoly[A] = FCPolyList[A] of List[forall 'a. A -> A]
//│ ╙──      	                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ Defined type alias FCPoly[±A]
//│ ╔══[WARNING] Type definition FCPoly has bivariant type parameters:
//│ ║  l.62: 	datatype FCPoly[A] = FCPolyList[A] of List[forall 'a. A -> A]
//│ ║        	         ^^^^^^
//│ ╟── A is irrelevant and may be removed
//│ ║  l.62: 	datatype FCPoly[A] = FCPolyList[A] of List[forall 'a. A -> A]
//│ ╙──      	                ^
//│ Code generation encountered an error:
//│   cannot inherit from type alias List
