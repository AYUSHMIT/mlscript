datatype Either[A, B] = Left[A](A,) || Right[B](B,)
//│ Defined type alias Either[+A, +B]
//│ Left: 'a -> Either['a, nothing]
//│     = <missing implementation>
//│ Right: 'a -> Either[nothing, 'a]
//│      = <missing implementation>

datatype List[A] = Cons[A](A, List[A]) || Nil
//│ Defined type alias List[+A]
//│ Cons: ('a, List['a],) -> List['a]
//│     = <missing implementation>
//│ Nil: List[nothing]
//│    = <missing implementation>

type Heap = List[(string, int)]
datatype HeapVar = HeapInt(int,) || HeapV(Heap,)
datatype Exp = EInt(int,) || Var(string,) || Plus(Exp, Exp) || Times(Exp, Exp)
datatype Stmt = Skip || Assign(string, Exp)
//│ Defined type alias Heap
//│ Defined type alias HeapVar
//│ Defined type alias Exp
//│ Defined type alias Stmt
//│ HeapInt: int -> HeapVar
//│        = <missing implementation>
//│ HeapV: Heap -> HeapVar
//│      = <missing implementation>
//│ EInt: int -> Exp
//│     = <missing implementation>
//│ Var: string -> Exp
//│    = <missing implementation>
//│ Plus: (Exp, Exp,) -> Exp
//│     = <missing implementation>
//│ Times: (Exp, Exp,) -> Exp
//│      = <missing implementation>
//│ Skip: Stmt
//│     = <missing implementation>
//│ Assign: (string, Exp,) -> Stmt
//│       = <missing implementation>

datatype Poly[A] = PolyList[A](List[A -> A],)
//│ Defined type alias Poly[=A]
//│ PolyList: List['a -> 'a] -> Poly['a]
//│         = <missing implementation>

datatype FCPoly = FCPolyList(List[forall 'a. 'a -> 'a],)
//│ Defined type alias FCPoly
//│ FCPolyList: List[forall 'a. 'a -> 'a] -> FCPoly
//│           = <missing implementation>
