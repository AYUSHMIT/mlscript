class Foo[A, B]: { x: A; y: B }
    method Fun[C]: (A -> B -> C) -> (A -> B -> C)
//│ Defined class Foo
//│ Declared Foo.Fun: (foo & {y: 'B, x: 'A}) -> ('A -> 'B -> 'C) -> 'A -> 'B -> 'C

class Bar: Foo[int, bool]
    method Fun f = f
//│ Defined class Bar
//│ Defined Bar.Fun: (bar & {y: bool, x: int}) -> 'a -> 'a

Foo.Fun
Bar.Fun
//│ res: (foo & {y: 'B, x: 'A}) -> ('A -> 'B -> 'C) -> 'A -> 'B -> 'C
//│ res: (bar & {y: bool, x: int}) -> 'a -> 'a

f = Foo { x = 1; y = 2 }
//│ f: foo & {y: 2, x: 1}

f.(Foo.Fun)
//│ res: (('A | 1) -> ('B | 2) -> 'C) -> 'A -> 'B -> 'C

Foo.Fun f
//│ res: (('A | 1) -> ('B | 2) -> 'C) -> 'A -> 'B -> 'C

f.Fun
//│ res: (('A | 1) -> ('B | 2) -> 'C) -> 'A -> 'B -> 'C

g = Bar { x = 42; y = true }
//│ g: bar & {y: true, x: 42}

g.(Foo.Fun)
g.(Bar.Fun)
//│ res: (('A | 42) -> ('B | true) -> 'C) -> 'A -> 'B -> 'C
//│ res: 'a -> 'a

Foo.Fun g
Bar.Fun g
//│ res: (('A | 42) -> ('B | true) -> 'C) -> 'A -> 'B -> 'C
//│ res: 'a -> 'a

g.Fun
//│ res: (('A | 42) -> ('B | true) -> 'C) -> 'A -> 'B -> 'C

h = Bar { x = 43; y = true }
h.Fun
//│ h: bar & {y: true, x: 43}
//│ res: (('A | 43) -> ('B | true) -> 'C) -> 'A -> 'B -> 'C




class Wrapper[A]: { x: A }
    method Apply[B]: (A -> B) -> Wrapper[B]
//│ Defined class Wrapper
//│ Declared Wrapper.Apply: (wrapper & {x: 'A}) -> ('A -> 'B) -> (wrapper & {x: 'B})

class IntWrapper: Wrapper[int]
    method Apply f = Wrapper { x = f this.x }
//│ Defined class IntWrapper
//│ Defined IntWrapper.Apply: (intWrapper & {x: int}) -> (int -> 'a) -> (wrapper & {x: 'a})

class Psyduck[B]: Wrapper[B]
    method Apply[A]: (B -> A) -> Psyduck[A]
    method Apply f = Psyduck { x = f this.x }
//│ Defined class Psyduck
//│ Declared Psyduck.Apply: (psyduck & {x: 'B}) -> ('B -> 'a) -> (psyduck & {x: 'a})
//│ Defined Psyduck.Apply: (psyduck & {x: 'B}) -> ('B -> 'a) -> (psyduck & {x: 'a})

class WrapperWrapper[A]: Wrapper[Wrapper[A]]
    method Apply2[B]: (A -> B) -> WrapperWrapper[B]
    method Apply2 f = WrapperWrapper { x = this.x.Apply f }
//│ Defined class WrapperWrapper
//│ Declared WrapperWrapper.Apply2: (wrapperWrapper & {x: wrapper & {x: 'A}}) -> ('A -> 'a) -> (wrapperWrapper & {x: wrapper & {x: 'a}})
//│ Defined WrapperWrapper.Apply2: (wrapperWrapper & {x: wrapper & {x: 'A}}) -> ('A -> 'a) -> (wrapperWrapper & {x: wrapper & {x: 'a}})

WrapperWrapper { x = Psyduck { x = 0 } }
//│ res: wrapperWrapper & {x: psyduck & {x: 0}}

res.Apply2 (fun x -> mul x 2)
//│ res: wrapperWrapper & {x: wrapper & {x: int}}

Wrapper
//│ res: {x: 'x} -> (wrapper & {x: 'x})




class Asc[A, B]: { x: A; y: B }
    method Left = { x = this.x; y = this.y } : { x: A }
    method Right2 = this : { y: B }
//│ Defined class Asc
//│ Defined Asc.Left: (asc & {y: anything, x: 'A}) -> {x: 'A}
//│ Defined Asc.Right2: (asc & {y: 'B, x: anything}) -> {y: 'B}




class Simple[A]
    method Get: A
//│ Defined class Simple
//│ Declared Simple.Get: simple -> nothing

class Simple2[A]: { a: A }
    method Get: A
//│ Defined class Simple2
//│ Declared Simple2.Get: (simple2 & {a: 'A}) -> 'A




class AbstractPair[A, B]: { x: A; y: B }
    method Test: (A -> B -> bool) -> bool
    method Map[C, D]: (A -> C) -> (B -> D) -> AbstractPair[C, D]
//│ Defined class AbstractPair
//│ Declared AbstractPair.Test: (abstractPair & {y: 'B, x: 'A}) -> ('A -> 'B -> bool) -> bool
//│ Declared AbstractPair.Map: (abstractPair & {y: 'B, x: 'A}) -> ('A -> 'C) -> ('B -> 'D) -> (abstractPair & {y: 'D, x: 'C})

class Pair[A, B]: AbstractPair[A, B]
    method Test(f: A -> B -> bool) = f this.x this.y
    method Map fx fy = Pair { x = fx this.x; y = fy this.y }
//│ Defined class Pair
//│ Defined Pair.Test: (pair & {y: 'B, x: 'A}) -> ('A -> 'B -> (bool & 'a)) -> 'a
//│ Defined Pair.Map: (pair & {y: 'B, x: 'A}) -> ('A -> 'a) -> ('B -> 'b) -> (pair & {y: 'b, x: 'a})

class True[A, B]: Pair[A, B]
    method Test f = true
    method True = this.Test (fun x -> error)
//│ Defined class True
//│ Defined True.Test: (true & {y: anything, x: anything}) -> anything -> true
//│ Defined True.True: (true & {y: anything, x: anything}) -> true

class True2[A, B]: Pair[A, B]
    method Test: anything -> bool
    method True = this.Test (fun x -> error)
    method Test f = true
//│ Defined class True2
//│ Declared True2.Test: (true2 & {y: anything, x: anything}) -> anything -> true
//│ Defined True2.True: (true2 & {y: anything, x: anything}) -> bool
//│ Defined True2.Test: (true2 & {y: anything, x: anything}) -> anything -> true

p = Pair { x = 42; y = true }
fx = fun x -> mul x 2
fy = fun x -> not x
ft = fun x -> fun y -> if (y) then gt x 0 else y
//│ p: pair & {y: true, x: 42}
//│ fx: int -> int
//│ fy: bool -> bool
//│ ft: int -> bool -> bool

p.Map fx fy
p.Test ft
(p.Map fx fy).Test ft
//│ res: abstractPair & {y: bool, x: int}
//│ res: bool
//│ res: bool

t = True { x = "foo"; y = false }
t.(True.True)
//│ t: true & {y: false, x: "foo"}
//│ res: true

t = True2 { x = "bar"; y = false }
t.(True2.True)
//│ t: true2 & {y: false, x: "bar"}
//│ res: bool


class Class1A[A]
    method MtdA: A
trait Trait1A[B]
    method MtdA: B
class Class1B: Class1A["a" | "b"] & Trait1A["b" | "c"]
    method MtdA = "b"
//│ Defined class Class1A
//│ Declared Class1A.MtdA: class1A -> nothing
//│ Defined trait Trait1A
//│ Declared Trait1A.MtdA: trait1A -> nothing
//│ Defined class Class1B
//│ Defined Class1B.MtdA: (class1B & trait1A) -> "b"


trait Trait2A[A]
    method MtdB: A
class Class2B[A, B]: Class1A[A] & Trait2A[B]
    method MtdA: A
    method MtdB: B
class Class2C: Class2B[int, bool]
    method MtdA = 42
    method MtdB = true
//│ Defined trait Trait2A
//│ Declared Trait2A.MtdB: trait2A -> nothing
//│ Defined class Class2B
//│ Declared Class2B.MtdA: (class2B & trait2A) -> nothing
//│ Declared Class2B.MtdB: (class2B & trait2A) -> nothing
//│ Defined class Class2C
//│ Defined Class2C.MtdA: (class2C & trait2A) -> 42
//│ Defined Class2C.MtdB: (class2C & trait2A) -> true


:e
class Class3C: Class2C
    method MtdA = 42
    method MtdB = 42
//│ ╔══[ERROR] Type mismatch in method definition:
//│ ║  l.203: 	    method MtdB = 42
//│ ║         	           ^^^^^^^^^
//│ ╟── expression of type `42` does not match type `bool`
//│ ║  l.203: 	    method MtdB = 42
//│ ║         	                  ^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.187: 	class Class2C: Class2B[int, bool]
//│ ╙──       	                            ^^^^
//│ Defined class Class3C
//│ Defined Class3C.MtdA: (class3C & trait2A) -> 42
//│ Defined Class3C.MtdB: (class3C & trait2A) -> 42

type Id[T] = T
class Test1[A]: { x: A }
    method F: A
class Test2[B]: Test1[Id[B]] & { x: B }
    method F = this.x
//│ Defined type alias Id
//│ Defined class Test1
//│ Declared Test1.F: (test1 & {x: 'A}) -> 'A
//│ Defined class Test2
//│ Defined Test2.F: (test2 & {x: 'B}) -> 'B


class Test3A: Test1['a -> 'a]
Test3A.F
//│ Defined class Test3A
//│ res: (test3A & {x: 'a -> 'a}) -> 'a0 -> 'a0

class Test3B: Test1['a -> 'a] & { x: 'a }
Test3B.F
//│ Defined class Test3B
//│ res: (test3B & {x: 'a -> 'a & 'a}) -> 'a0 -> 'a0




