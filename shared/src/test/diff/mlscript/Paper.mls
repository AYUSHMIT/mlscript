
class None: {}
class Some[A]: { value: A }
type Option[A] = Some[A] | None
//│ Defined class None
//│ Defined class Some
//│ Defined type alias Option


def flatMap f opt = case opt of {
  | Some -> f opt.value
  | None -> None{}
  }
//│ flatMap: ('a -> 'b) -> (some & {value: 'a} | none) -> ('b | none)

def flatMap2 f opt = case opt of { Some -> f opt.value | _ -> opt }
//│ flatMap2: ('a -> 'b) -> (some & {value: 'a} | 'b & ~some) -> 'b

def flatMap3 f opt = case opt of { Some -> f opt | _ -> opt }
//│ flatMap3: ('a -> 'b) -> (some & 'a | 'b & ~some) -> 'b



type List[A] = Cons[A] | None
class Cons[A]: Some[A] & { tail: List[A] }
//│ Defined type alias List
//│ Defined class Cons

// Note – no longer needed with the new class ctor semantics:
// def Cons{value; tail} = Cons(Some{value} with {tail})

rec def map2 f ls = case ls of {
  | Cons -> Cons{value = f ls.value; tail = map2 f ls.tail}
  | None -> None{}
  }
//│ map2: ('a -> ('value & 'A)) -> (cons & {tail: 'b, value: 'a} | none as 'b) -> (cons & {Some#A, Cons#A = 'A, tail: 'c, value: 'value} | none as 'c)




def safeDiv x (y: ~0) = div x y
//│ safeDiv: int -> (int & ~0) -> int

:e
safeDiv 1 0
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.45: 	safeDiv 1 0
//│ ║        	^^^^^^^^^^^
//│ ╟── expression of type `0` does not match type `~0`
//│ ║  l.45: 	safeDiv 1 0
//│ ║        	          ^
//│ ╟── Note: constraint arises from type negation:
//│ ║  l.41: 	def safeDiv x (y: ~0) = div x y
//│ ╙──      	                  ^^
//│ res: int | error

fun x -> safeDiv 1 x
//│ res: (int & ~0) -> int

fun x -> case x of { int -> safeDiv 1 x | _ -> None{} }
//│ res: (int & ~0 | ~int) -> (int | none)

// TOOD mayeb we shouldn't refine x's type here...
fun (x: int) -> safeDiv 1 x
//│ res: (int & ~0) -> int

def tryDiv: int -> int -> Option[int]
//│ tryDiv: int -> int -> (some & {Some#A = int, value: int} | none)

def tryDiv x y = case y of { 0 -> None{} | _ -> Some { value = safeDiv x y } }
//│ int -> (0 | int & ~0) -> (none | some & {Some#A :> 'A | int <: 'A, value: int})  <:  tryDiv: int -> int -> (some & {Some#A = int, value: int} | none)
// ^ Note: `0 | int & ~0` could be further simplified

tryDiv 1 1
tryDiv 1 0
//│ res: some & {Some#A = int, value: int} | none
//│ res: some & {Some#A = int, value: int} | none

