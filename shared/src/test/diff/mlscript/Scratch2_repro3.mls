
:GeneralizeCurriedFunctions
// :DistributeForalls

// def s n = fun f -> fun x -> f (n f x)
// def s n = fun f -> f (n f)
// def s n = fun f -> fun x -> (n f x)
def s n = fun f -> n f
// def s n = n
//│ s: 'a -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c))
//│  = [Function: s]

:ns
s
//│ res: forall 'a. 'a -> (forall 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c))
//│    = [Function: s]

type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ Defined type alias ChurchInt

def zero: ChurchInt
//│ zero: ChurchInt
//│     = <missing implementation>

// def z f x = x

// def succ: ChurchInt -> ChurchInt

// def to_church: int -> ChurchInt
def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ to_church: int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│          = <missing implementation>

// :d
// rec def to_ch n =
//   if n == 0 then zero
//   else s (to_ch (n - 1))
// rec def to_ch n =
//   if n == 0 then zero
//   else s (to_ch n)
// rec def to_ch n =
//   if true then zero
//   else s (to_ch n)
// rec def to_ch n =
//   if true then zero
//   else s (to_church n)
// def to_ch n =
//   if true then zero
//   else s (to_church n)
def to_ch n =
  s (to_church n)
// def to_ch (n:int) =
//   s (to_church n)
// def to_ch =
//   s (to_church 0)
//│ to_ch: int -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c))
//│      = <no result>
//│        to_church is not implemented

// rec def to_ch n =
//   s (to_ch (n - 1))
// rec def to_ch n =
//   s (to_ch n)
// rec def to_ch n =
//   to_ch n

// :ns
// to_ch
// to_ch: ChurchInt
// :re
// to_ch 1 2

// :DistributeForalls
:d
// FIXME?
to_church = to_ch
//│ 1. Typing term to_ch   None
//│ 1. : ‹∀ 0. ‹∀ 1. (α39'' -> α41'')››
//│ ⬤ Typed as: ‹∀ 0. ‹∀ 0. ‹∀ 1. (α39'' -> α41'')›››
//│  where: 
//│ 		α39'' <: Int
//│ 		α41'' :> ‹∀ 2. {(α43''' -> α44''') where: α42'' <: ((α43''',) -> α44''')}›
//│ 		α42'' :> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›
//│ ⬤ Typed as: ‹∀ 0. (Int -> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›)›
//│  where: 
//│ int -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c))
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ CONSTRAIN ‹∀ 0. ‹∀ 0. ‹∀ 1. (α39'' -> α41'')››› <! ‹∀ 0. (Int -> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›)›
//│   where 
//│ 		α39'' <: Int
//│ 		α41'' :> ‹∀ 2. {(α43''' -> α44''') where: α42'' <: ((α43''',) -> α44''')}›
//│ 		α42'' :> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›
//│ 0. C ‹∀ 0. ‹∀ 0. ‹∀ 1. (α39'' -> α41'')››› <! ‹∀ 0. (Int -> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›)›
//│ | BUMP TO LEVEL 1
//│ | 1. C ‹∀ 0. ‹∀ 0. ‹∀ 1. (α39'' -> α41'')››› <! (Int -> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›)
//│ | | 1. C ‹∀ 0. ‹∀ 1. (α39'' -> α41'')›› <! (Int -> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›)
//│ | | | 1. C ‹∀ 1. (α39'' -> α41'')› <! (Int -> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›)
//│ | | | | INST [1]   ‹∀ 1. (α39'' -> α41'')›
//│ | | | |   where  
//│ 		α39'' <: Int
//│ 		α41'' :> ‹∀ 2. {(α43''' -> α44''') where: α42'' <: ((α43''',) -> α44''')}›
//│ 		α42'' :> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›
//│ | | | | TO [1] ~>  (α70' -> α71')
//│ | | | |   where  
//│ 		α70' <: Int
//│ 		α71' :> ‹∀ 2. {(α73''' -> α74''') where: α72' <: ((α73''',) -> α74''')}›
//│ 		α72' :> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›
//│ | | | | 1. C (α70' -> α71') <! (Int -> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›)
//│ | | | | | 1. C (Int,) <! (α70',)
//│ | | | | | | 1. C Int <! α70'
//│ | | | | | | | NEW α70' LB (0)
//│ | | | | | | | 1. C Int <! Int
//│ | | | | | 1. C α71' <! ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›
//│ | | | | | | NEW α71' UB (0)
//│ | | | | | | 1. C ‹∀ 2. {(α73''' -> α74''') where: α72' <: ((α73''',) -> α74''')}› <! ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›
//│ | | | | | | | 1. C ‹∀ 2. {(α73''' -> α74''') where: α72' <: ((α73''',) -> α74''')}› <! ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›
//│ | | | | | | | | 1. C ‹∀ 2. {(α73''' -> α74''') where: α72' <: ((α73''',) -> α74''')}› <! ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›
//│ | | | | | | | | | BUMP TO LEVEL 2
//│ | | | | | | | | | 2. C ‹∀ 2. {(α73''' -> α74''') where: α72' <: ((α73''',) -> α74''')}› <! ((‘M'' -> ‘M'') -> (‘M'' -> ‘M''))
//│ | | | | | | | | | | INST [2]   ‹∀ 2. {(α73''' -> α74''') where: α72' <: ((α73''',) -> α74''')}›
//│ | | | | | | | | | |   where  
//│ 		α72' :> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›
//│ | | | | | | | | | | TO [2] ~>  {(α75'' -> α76'') where: α72' <: ((α75'',) -> α76'')}
//│ | | | | | | | | | |   where  
//│ 		α72' :> ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›
//│ | | | | | | | | | | 2. C {(α75'' -> α76'') where: α72' <: ((α75'',) -> α76'')} <! ((‘M'' -> ‘M'') -> (‘M'' -> ‘M''))
//│ | | | | | | | | | | | DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | 2. C α72' <! ((α75'',) -> α76'')
//│ | | | | | | | | | | | | | EXTR RHS  ~>  ((α77',) -> α78')  to 1
//│ | | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | |    and 
//│ 		α75'' <: α77'
//│ 		α76'' :> α78'
//│ | | | | | | | | | | | | | 2. C α72' <! ((α77',) -> α78')
//│ | | | | | | | | | | | | | | NEW α72' UB (1)
//│ | | | | | | | | | | | | | | 2. C ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))› <! ((α77',) -> α78')
//│ | | | | | | | | | | | | | | | 2. C ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))› <! ((α77',) -> α78')
//│ | | | | | | | | | | | | | | | | 2. C ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))› <! ((α77',) -> α78')
//│ | | | | | | | | | | | | | | | | | 2. C ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))› <! ((α77',) -> α78')
//│ | | | | | | | | | | | | | | | | | | 2. C ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))› <! ((α77',) -> α78')
//│ | | | | | | | | | | | | | | | | | | | 2. C ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))› <! ((α77',) -> α78')
//│ | | | | | | | | | | | | | | | | | | | | INST [1]   ‹∀ 1. (('M35'' -> 'M35'') -> ('M35'' -> 'M35''))›
//│ | | | | | | | | | | | | | | | | | | | |   where  
//│ | | | | | | | | | | | | | | | | | | | | TO [2] ~>  (('M79'' -> 'M79'') -> ('M79'' -> 'M79''))
//│ | | | | | | | | | | | | | | | | | | | |   where  
//│ | | | | | | | | | | | | | | | | | | | | 2. C (('M79'' -> 'M79'') -> ('M79'' -> 'M79'')) <! ((α77',) -> α78')
//│ | | | | | | | | | | | | | | | | | | | | | 2. C (α77',) <! (('M79'' -> 'M79''),)
//│ | | | | | | | | | | | | | | | | | | | | | | 2. C (α77',) <! (('M79'' -> 'M79''),)
//│ | | | | | | | | | | | | | | | | | | | | | | | 2. C α77' <! ('M79'' -> 'M79'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | 2. C α77' <! ('M79'' -> 'M79'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | EXTR RHS  ~>  ('M80' -> 'M81')  to 1
//│ | | | | | | | | | | | | | | | | | | | | | | | | |  where 
//│ 		'M81' <: 'M80'
//│ | | | | | | | | | | | | | | | | | | | | | | | | |    and 
//│ 		'M79'' :> 'M81' <: 'M80'
//│ 		'M81' <: 'M80'
//│ | | | | | | | | | | | | | | | | | | | | | | | | | 2. C α77' <! ('M80' -> 'M81')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | NEW α77' UB (1)
//│ | | | | | | | | | | | | | | | | | | | | | 2. C ('M79'' -> 'M79'') <! α78'
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR LHS  ~>  ('M82' -> 'M83')  to 1
//│ | | | | | | | | | | | | | | | | | | | | | |  where 
//│ 		'M81' <: 'M80'
//│ 		'M82' <: 'M80'
//│ 		'M83' :> 'M82' | 'M81'
//│ | | | | | | | | | | | | | | | | | | | | | |    and 
//│ 		'M79'' :> 'M82' | 'M81' <: 'M83' & 'M80'
//│ 		'M81' <: 'M80'
//│ 		'M82' <: 'M80'
//│ 		'M83' :> 'M82' | 'M81'
//│ | | | | | | | | | | | | | | | | | | | | | | 2. C ('M82' -> 'M83') <! α78'
//│ | | | | | | | | | | | | | | | | | | | | | | | NEW α78' LB (1)
//│ | | | | | | | | | | | 2. C (α75'' -> α76'') <! ((‘M'' -> ‘M'') -> (‘M'' -> ‘M''))
//│ | | | | | | | | | | | | 2. C ((‘M'' -> ‘M''),) <! (α75'',)
//│ | | | | | | | | | | | | | 2. C (‘M'' -> ‘M'') <! α75''
//│ | | | | | | | | | | | | | | NEW α75'' LB (2)
//│ | | | | | | | | | | | | | | 2. C (‘M'' -> ‘M'') <! α77'
//│ | | | | | | | | | | | | | | | EXTR LHS  ~>  (⊥ -> ⊤)  to 1
//│ | | | | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | | | |    and 
//│ | | | | | | | | | | | | | | | 2. C (⊥ -> ⊤) <! α77'
//│ | | | | | | | | | | | | | | | | NEW α77' LB (0)
//│ | | | | | | | | | | | | | | | | 2. C (⊥ -> ⊤) <! ('M80' -> 'M81')
//│ | | | | | | | | | | | | | | | | | 2. C ('M80',) <! (⊥,)
//│ | | | | | | | | | | | | | | | | | | 2. C 'M80' <! ⊥
//│ | | | | | | | | | | | | | | | | | | | NEW 'M80' UB (0)
//│ | | | | | | | | | | | | | | | | | 2. C ⊤ <! 'M81'
//│ | | | | | | | | | | | | | | | | | | NEW 'M81' LB (0)
//│ | | | | | | | | | | | | | | | | | | 2. C ⊤ <! 'M80'
//│ | | | | | | | | | | | | | | | | | | | NEW 'M80' LB (0)
//│ | | | | | | | | | | | | | | | | | | | 2. C ⊤ <! ⊥
//│ | | | | | | | | | | | | | | | | | | | | CONSTRAINT FAILURE: ⊤ <: ⊥
//│ | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | norm[-] ⊥
//│ | | | | | | | | | | | | | | | | | | | | | DNF: DNF(1024, )
//│ | | | | | | | | | | | | | | | | | | | | ~> ⊥
//│ | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | norm[+] ⊤
//│ | | | | | | | | | | | | | | | | | | | | | DNF: DNF(1024, )
//│ | | | | | | | | | | | | | | | | | | | | ~> ⊤
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.82: 	to_church = to_ch
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.34: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                              ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ╙──      	                              ^^
//│ | | | | | | | | | | | | 2. C α76'' <! (‘M'' -> ‘M'')
//│ | | | | | | | | | | | | | NEW α76'' UB (2)
//│ | | | | | | | | | | | | | 2. C α78' <! (‘M'' -> ‘M'')
//│ | | | | | | | | | | | | | | EXTR RHS  ~>  ‹∀ 1. ('M84'' -> 'M85'')›  to 1
//│ | | | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | | |    and 
//│ | | | | | | | | | | | | | | 2. C α78' <! ‹∀ 1. ('M84'' -> 'M85'')›
//│ | | | | | | | | | | | | | | | NEW α78' UB (0)
//│ | | | | | | | | | | | | | | | 2. C ('M82' -> 'M83') <! ‹∀ 1. ('M84'' -> 'M85'')›
//│ | | | | | | | | | | | | | | | | BUMP TO LEVEL 3
//│ | | | | | | | | | | | | | | | | 3. C ('M82' -> 'M83') <! (‘M''' -> ‘M''')
//│ | | | | | | | | | | | | | | | | | 3. C (‘M''',) <! ('M82',)
//│ | | | | | | | | | | | | | | | | | | 3. C ‘M''' <! 'M82'
//│ | | | | | | | | | | | | | | | | | | | EXTR LHS  ~>  ⊤  to 1
//│ | | | | | | | | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | | | | | | | |    and 
//│ | | | | | | | | | | | | | | | | | | | 3. C ⊤ <! 'M82'
//│ | | | | | | | | | | | | | | | | | | | | NEW 'M82' LB (0)
//│ | | | | | | | | | | | | | | | | | | | | 3. C ⊤ <! 'M80'
//│ | | | | | | | | | | | | | | | | | | | | | Cached!
//│ | | | | | | | | | | | | | | | | | 3. C 'M83' <! ‘M'''
//│ | | | | | | | | | | | | | | | | | | EXTR RHS  ~>  ‹∀ 1. 'M86''›  to 1
//│ | | | | | | | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | | | | | | |    and 
//│ | | | | | | | | | | | | | | | | | | 3. C 'M83' <! ‹∀ 1. 'M86''›
//│ | | | | | | | | | | | | | | | | | | | NEW 'M83' UB (0)
//│ | | | | | | | | | | | | | | | | | | | 3. C 'M82' <! ‹∀ 1. 'M86''›
//│ | | | | | | | | | | | | | | | | | | | | NEW 'M82' UB (0)
//│ | | | | | | | | | | | | | | | | | | | | 3. C ⊤ <! ‹∀ 1. 'M86''›
//│ | | | | | | | | | | | | | | | | | | | | | BUMP TO LEVEL 4
//│ | | | | | | | | | | | | | | | | | | | | | 4. C ⊤ <! ‘M''''
//│ | | | | | | | | | | | | | | | | | | | | | | CONSTRAINT FAILURE: ⊤ <: ‘M''''
//│ | | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | | norm[+] ⊤
//│ | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(1024, )
//│ | | | | | | | | | | | | | | | | | | | | | | ~> ⊤
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.82: 	to_church = to_ch
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` is not an instance of type `'M`
//│ ║  l.34: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                              ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	def to_church: int -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ╙──      	                              ^^
//│ | | | | | | | | | | | | | | | | | | | 3. C 'M81' <! ‹∀ 1. 'M86''›
//│ | | | | | | | | | | | | | | | | | | | | NEW 'M81' UB (0)
//│ | | | | | | | | | | | | | | | | | | | | 3. C ⊤ <! ‹∀ 1. 'M86''›
//│ | | | | | | | | | | | | | | | | | | | | | Cached!
//│          = <no result>
//│            to_ch and to_church are not implemented

:DistributeForalls

to_church = to_ch
//│ int -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c))
//│   <:  to_church:
//│ int -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│          = <no result>
//│            to_ch and to_church are not implemented



rec def to_ch_weird n =
  s (to_ch_weird n)
//│ to_ch_weird: anything -> anything -> nothing
//│            = [Function: to_ch_weird]



