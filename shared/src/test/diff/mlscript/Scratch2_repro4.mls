:GeneralizeCurriedFunctions

// type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)

// :ArgGen

// :d
// :ns
// def s n = fun f -> fun x -> f (n f x)
// def s n = fun f -> fun x -> (n f x)
def s n = fun f -> n f
// def s n = n
//│ s: 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'a <: 'b -> 'c)))
//│  = [Function: s]

def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ succ: (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = <missing implementation>

// :DistributeForalls

// :ns
:e // * Needs distrib (see below)
:d
succ = s
//│ 1. Typing term s   None
//│ 1. : ‹∀ 0. ‹∀ 1. (α21'' -> ‹∀ 3. (α22'''' -> ‹∀ 4. {α23''''' where: α21'' <: ((α22'''',) -> α23''''')}›)›)››
//│ ⬤ Typed as: ‹∀ 0. ‹∀ 0. ‹∀ 1. (α21'' -> ‹∀ 3. (α22'''' -> ‹∀ 4. {α23''''' where: α21'' <: ((α22'''',) -> α23''''')}›)›)›››
//│  where: 
//│ ⬤ Typed as: ‹∀ 0. (‹∀ 1. (('N33'' -> 'N33'') -> ('N33'' -> 'N33''))› -> ‹∀ 1. (('M34'' -> 'M34'') -> ('M34'' -> 'M34''))›)›
//│  where: 
//│ 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'a <: 'b -> 'c)))
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ CHECKING SUBSUMPTION...
//│ CONSTRAIN ‹∀ 0. ‹∀ 0. ‹∀ 1. (α21'' -> ‹∀ 3. (α22'''' -> ‹∀ 4. {α23''''' where: α21'' <: ((α22'''',) -> α23''''')}›)›)››› <! ‹∀ 0. (‹∀ 1. (('N33'' -> 'N33'') -> ('N33'' -> 'N33''))› -> ‹∀ 1. (('M34'' -> 'M34'') -> ('M34'' -> 'M34''))›)›
//│   where 
//│ 0. C ‹∀ 0. ‹∀ 0. ‹∀ 1. (α21'' -> ‹∀ 3. (α22'''' -> ‹∀ 4. {α23''''' where: α21'' <: ((α22'''',) -> α23''''')}›)›)››› <! ‹∀ 0. (‹∀ 1. (('N33'' -> 'N33'') -> ('N33'' -> 'N33''))› -> ‹∀ 1. (('M34'' -> 'M34'') -> ('M34'' -> 'M34''))›)›
//│ | BUMP TO LEVEL 1  -->  (‹∀ 1. (('N33'' -> 'N33'') -> ('N33'' -> 'N33''))› -> ‹∀ 1. (('M34'' -> 'M34'') -> ('M34'' -> 'M34''))›)
//│ | where 
//│ | 1. C ‹∀ 0. ‹∀ 0. ‹∀ 1. (α21'' -> ‹∀ 3. (α22'''' -> ‹∀ 4. {α23''''' where: α21'' <: ((α22'''',) -> α23''''')}›)›)››› <! (‹∀ 1. (('N33'' -> 'N33'') -> ('N33'' -> 'N33''))› -> ‹∀ 1. (('M34'' -> 'M34'') -> ('M34'' -> 'M34''))›)
//│ | | 1. C ‹∀ 0. ‹∀ 1. (α21'' -> ‹∀ 3. (α22'''' -> ‹∀ 4. {α23''''' where: α21'' <: ((α22'''',) -> α23''''')}›)›)›› <! (‹∀ 1. (('N33'' -> 'N33'') -> ('N33'' -> 'N33''))› -> ‹∀ 1. (('M34'' -> 'M34'') -> ('M34'' -> 'M34''))›)
//│ | | | 1. C ‹∀ 1. (α21'' -> ‹∀ 3. (α22'''' -> ‹∀ 4. {α23''''' where: α21'' <: ((α22'''',) -> α23''''')}›)›)› <! (‹∀ 1. (('N33'' -> 'N33'') -> ('N33'' -> 'N33''))› -> ‹∀ 1. (('M34'' -> 'M34'') -> ('M34'' -> 'M34''))›)
//│ | | | | INST [1]   ‹∀ 1. (α21'' -> ‹∀ 3. (α22'''' -> ‹∀ 4. {α23''''' where: α21'' <: ((α22'''',) -> α23''''')}›)›)›
//│ | | | |   where  
//│ | | | | TO [1] ~>  (α21_56' -> ‹∀ 3. (α22_57'''' -> ‹∀ 4. {α23_58''''' where: α21_56' <: ((α22_57'''',) -> α23_58''''')}›)›)
//│ | | | |   where  
//│ | | | | 1. C (α21_56' -> ‹∀ 3. (α22_57'''' -> ‹∀ 4. {α23_58''''' where: α21_56' <: ((α22_57'''',) -> α23_58''''')}›)›) <! (‹∀ 1. (('N33'' -> 'N33'') -> ('N33'' -> 'N33''))› -> ‹∀ 1. (('M34'' -> 'M34'') -> ('M34'' -> 'M34''))›)
//│ | | | | | 1. C (‹∀ 1. (('N33'' -> 'N33'') -> ('N33'' -> 'N33''))›,) <! (α21_56',)
//│ | | | | | | 1. C ‹∀ 1. (('N33'' -> 'N33'') -> ('N33'' -> 'N33''))› <! α21_56'
//│ | | | | | | | NEW α21_56' LB (0)
//│ | | | | | 1. C ‹∀ 3. (α22_57'''' -> ‹∀ 4. {α23_58''''' where: α21_56' <: ((α22_57'''',) -> α23_58''''')}›)› <! ‹∀ 1. (('M34'' -> 'M34'') -> ('M34'' -> 'M34''))›
//│ | | | | | | BUMP TO LEVEL 2  -->  ((‘M'' -> ‘M'') -> (‘M'' -> ‘M''))
//│ | | | | | | where 
//│ | | | | | | 2. C ‹∀ 3. (α22_57'''' -> ‹∀ 4. {α23_58''''' where: α21_56' <: ((α22_57'''',) -> α23_58''''')}›)› <! ((‘M'' -> ‘M'') -> (‘M'' -> ‘M''))
//│ | | | | | | | INST [3]   ‹∀ 3. (α22_57'''' -> ‹∀ 4. {α23_58''''' where: α21_56' <: ((α22_57'''',) -> α23_58''''')}›)›
//│ | | | | | | |   where  
//│ 		α21_56' :> ‹∀ 1. (('N33'' -> 'N33'') -> ('N33'' -> 'N33''))›
//│ | | | | | | | TO [2] ~>  (α22_59'' -> ‹∀ 4. {α23_60''''' where: α21_56' <: ((α22_59'',) -> α23_60''''')}›)
//│ | | | | | | |   where  
//│ 		α21_56' :> ‹∀ 1. (('N33'' -> 'N33'') -> ('N33'' -> 'N33''))›
//│ | | | | | | | 2. C (α22_59'' -> ‹∀ 4. {α23_60''''' where: α21_56' <: ((α22_59'',) -> α23_60''''')}›) <! ((‘M'' -> ‘M'') -> (‘M'' -> ‘M''))
//│ | | | | | | | | 2. C ((‘M'' -> ‘M''),) <! (α22_59'',)
//│ | | | | | | | | | 2. C (‘M'' -> ‘M'') <! α22_59''
//│ | | | | | | | | | | NEW α22_59'' LB (2)
//│ | | | | | | | | 2. C ‹∀ 4. {α23_60''''' where: α21_56' <: ((α22_59'',) -> α23_60''''')}› <! (‘M'' -> ‘M'')
//│ | | | | | | | | | INST [4]   ‹∀ 4. {α23_60''''' where: α21_56' <: ((α22_59'',) -> α23_60''''')}›
//│ | | | | | | | | |   where  
//│ 		α21_56' :> ‹∀ 1. (('N33'' -> 'N33'') -> ('N33'' -> 'N33''))›
//│ 		α22_59'' :> (‘M'' -> ‘M'')
//│ | | | | | | | | | TO [2] ~>  {α23_61'' where: α21_56' <: ((α22_59'',) -> α23_61'')}
//│ | | | | | | | | |   where  
//│ 		α21_56' :> ‹∀ 1. (('N33'' -> 'N33'') -> ('N33'' -> 'N33''))›
//│ 		α22_59'' :> (‘M'' -> ‘M'')
//│ | | | | | | | | | 2. C {α23_61'' where: α21_56' <: ((α22_59'',) -> α23_61'')} <! (‘M'' -> ‘M'')
//│ | | | | | | | | | | DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | 2. C α21_56' <! ((α22_59'',) -> α23_61'')
//│ | | | | | | | | | | | | EXTR RHS  ~>  ((α62',) -> α65')  to 1
//│ | | | | | | | | | | | |  where 
//│ 		α62' :> ('M63'' -> 'M64'')
//│ | | | | | | | | | | | |    and 
//│ 		α22_59'' :> (‘M'' -> ‘M'') <: α62'
//│ 		α23_61'' :> α65'
//│ 		α62' :> ('M63'' -> 'M64'')
//│ | | | | | | | | | | | | 2. C α21_56' <! ((α62',) -> α65')
//│ | | | | | | | | | | | | | NEW α21_56' UB (1)
//│ | | | | | | | | | | | | | 2. C ‹∀ 1. (('N33'' -> 'N33'') -> ('N33'' -> 'N33''))› <! ((α62',) -> α65')
//│ | | | | | | | | | | | | | | INST [1]   ‹∀ 1. (('N33'' -> 'N33'') -> ('N33'' -> 'N33''))›
//│ | | | | | | | | | | | | | |   where  
//│ | | | | | | | | | | | | | | TO [2] ~>  (('N33_66'' -> 'N33_66'') -> ('N33_66'' -> 'N33_66''))
//│ | | | | | | | | | | | | | |   where  
//│ | | | | | | | | | | | | | | 2. C (('N33_66'' -> 'N33_66'') -> ('N33_66'' -> 'N33_66'')) <! ((α62',) -> α65')
//│ | | | | | | | | | | | | | | | 2. C (α62',) <! (('N33_66'' -> 'N33_66''),)
//│ | | | | | | | | | | | | | | | | 2. C (α62',) <! (('N33_66'' -> 'N33_66''),)
//│ | | | | | | | | | | | | | | | | | 2. C α62' <! ('N33_66'' -> 'N33_66'')
//│ | | | | | | | | | | | | | | | | | | 2. C α62' <! ('N33_66'' -> 'N33_66'')
//│ | | | | | | | | | | | | | | | | | | | EXTR RHS  ~>  ('N67' -> 'N68')  to 1
//│ | | | | | | | | | | | | | | | | | | |  where 
//│ 		'N68' <: 'N67'
//│ | | | | | | | | | | | | | | | | | | |    and 
//│ 		'N33_66'' :> 'N68' <: 'N67'
//│ 		'N68' <: 'N67'
//│ | | | | | | | | | | | | | | | | | | | 2. C α62' <! ('N67' -> 'N68')
//│ | | | | | | | | | | | | | | | | | | | | NEW α62' UB (1)
//│ | | | | | | | | | | | | | | | | | | | | 2. C ('M63'' -> 'M64'') <! ('N67' -> 'N68')
//│ | | | | | | | | | | | | | | | | | | | | | 2. C ('N67',) <! ('M63'',)
//│ | | | | | | | | | | | | | | | | | | | | | | 2. C 'N67' <! 'M63''
//│ | | | | | | | | | | | | | | | | | | | | | | | NEW 'M63'' LB (1)
//│ | | | | | | | | | | | | | | | | | | | | | 2. C 'M64'' <! 'N68'
//│ | | | | | | | | | | | | | | | | | | | | | | NEW 'M64'' UB (1)
//│ | | | | | | | | | | | | | | | 2. C ('N33_66'' -> 'N33_66'') <! α65'
//│ | | | | | | | | | | | | | | | | EXTR LHS  ~>  ('N69' -> 'N70')  to 1
//│ | | | | | | | | | | | | | | | |  where 
//│ 		'N68' <: 'N67'
//│ 		'N69' <: 'N67'
//│ 		'N70' :> 'N69' | 'N68'
//│ | | | | | | | | | | | | | | | |    and 
//│ 		'N33_66'' :> 'N69' | 'N68' <: 'N70' & 'N67'
//│ 		'N68' <: 'N67'
//│ 		'N69' <: 'N67'
//│ 		'N70' :> 'N69' | 'N68'
//│ | | | | | | | | | | | | | | | | 2. C ('N69' -> 'N70') <! α65'
//│ | | | | | | | | | | | | | | | | | NEW α65' LB (1)
//│ | | | | | | | | | | 2. C α23_61'' <! (‘M'' -> ‘M'')
//│ | | | | | | | | | | | NEW α23_61'' UB (2)
//│ | | | | | | | | | | | 2. C α65' <! (‘M'' -> ‘M'')
//│ | | | | | | | | | | | | EXTR RHS  ~>  ‹∀ 1. ('M71'' -> 'M72'')›  to 1
//│ | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | |    and 
//│ | | | | | | | | | | | | 2. C α65' <! ‹∀ 1. ('M71'' -> 'M72'')›
//│ | | | | | | | | | | | | | NEW α65' UB (0)
//│ | | | | | | | | | | | | | 2. C ('N69' -> 'N70') <! ‹∀ 1. ('M71'' -> 'M72'')›
//│ | | | | | | | | | | | | | | BUMP TO LEVEL 3  -->  (‘M''' -> ‘M''')
//│ | | | | | | | | | | | | | | where 
//│ | | | | | | | | | | | | | | 3. C ('N69' -> 'N70') <! (‘M''' -> ‘M''')
//│ | | | | | | | | | | | | | | | 3. C (‘M''',) <! ('N69',)
//│ | | | | | | | | | | | | | | | | 3. C ‘M''' <! 'N69'
//│ | | | | | | | | | | | | | | | | | EXTR LHS  ~>  ‘M73'  to 1
//│ | | | | | | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | | | | | |    and 
//│ | | | | | | | | | | | | | | | | | 3. C ‘M73' <! 'N69'
//│ | | | | | | | | | | | | | | | | | | NEW 'N69' LB (1)
//│ | | | | | | | | | | | | | | | | | | 3. C ‘M73' <! 'N67'
//│ | | | | | | | | | | | | | | | | | | | NEW 'N67' LB (1)
//│ | | | | | | | | | | | | | | | 3. C 'N70' <! ‘M'''
//│ | | | | | | | | | | | | | | | | EXTR RHS  ~>  ‹∀ 1. 'M74''›  to 1
//│ | | | | | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | | | | |    and 
//│ | | | | | | | | | | | | | | | | 3. C 'N70' <! ‹∀ 1. 'M74''›
//│ | | | | | | | | | | | | | | | | | NEW 'N70' UB (0)
//│ | | | | | | | | | | | | | | | | | 3. C 'N69' <! ‹∀ 1. 'M74''›
//│ | | | | | | | | | | | | | | | | | | NEW 'N69' UB (0)
//│ | | | | | | | | | | | | | | | | | | 3. C ‘M73' <! ‹∀ 1. 'M74''›
//│ | | | | | | | | | | | | | | | | | | | BUMP TO LEVEL 4  -->  ‘M''''
//│ | | | | | | | | | | | | | | | | | | | where 
//│ | | | | | | | | | | | | | | | | | | | 4. C ‘M73' <! ‘M''''
//│ | | | | | | | | | | | | | | | | | | | | CONSTRAINT FAILURE: ‘M73' <: ‘M''''
//│ | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | norm[+] ‘M73'
//│ | | | | | | | | | | | | | | | | | | | | | DNF: DNF(1024, {}∧‘M73')
//│ | | | | | | | | | | | | | | | | | | | | ~> ‘M73'
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.27: 	succ = s
//│ ║        	^^^^^^^^
//│ ╟── type `‘M73` is not an instance of type `'M`
//│ ║  l.18: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                                           ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.18: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ╙──      	                                                           ^^
//│ | | | | | | | | | | | | | | | | | 3. C 'N68' <! ‹∀ 1. 'M74''›
//│ | | | | | | | | | | | | | | | | | | NEW 'N68' UB (0)
//│     = [Function: s]



// def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
def succ: (forall 'N. ('N -> 'N)) -> (forall 'M. ('M -> 'M))
//│ succ: (forall 'N. 'N -> 'N) -> (forall 'M. 'M -> 'M)
//│     = <missing implementation>

// :DistributeForalls

// :ns
// :e // * Needs distrib (see below)
// :d
succ = s
// succ n = s n
// s id : (forall 'M. ('M -> 'M))
//│ 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'a <: 'b -> 'c)))
//│   <:  succ:
//│ (forall 'N. 'N -> 'N) -> (forall 'M. 'M -> 'M)
//│     = [Function: s]



