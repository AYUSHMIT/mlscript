:GeneralizeCurriedFunctions

// type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)

// :ArgGen

// :d
// :ns
// def s n = fun f -> fun x -> f (n f x)
def s n = fun f -> fun x -> (n f x)
// def s n = fun f -> n f
// def s n = n
//│ s: 'a -> (forall 'a, 'b, 'c, 'd. ('c -> (forall 'a, 'b, 'c, 'e, 'f. ('e -> 'f
//│   where
//│     'a <: 'c -> 'b
//│     'b <: 'e -> 'f))
//│   where
//│     'a <: 'c -> 'd
//│     'd <: nothing -> 'b))
//│   where
//│     'a <: nothing -> 'g
//│     'g <: nothing -> 'b
//│  = [Function: s]

def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ succ: (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = <missing implementation>

// :DistributeForalls

// :ns
:e // * Needs distrib (see below)
// :d
succ = s
//│ 'a -> (forall 'a, 'b, 'c, 'd. ('c -> (forall 'a, 'b, 'c, 'e, 'f. ('e -> 'f
//│   where
//│     'a <: 'c -> 'b
//│     'b <: 'e -> 'f))
//│   where
//│     'a <: 'c -> 'd
//│     'd <: nothing -> 'b))
//│   where
//│     'a <: nothing -> 'g
//│     'g <: nothing -> 'b
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.34: 	succ = s
//│ ║        	^^^^^^^^
//│ ╟── type `‘M158` is not an instance of type `'M`
//│ ║  l.25: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                                           ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.25: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ╙──      	                                                           ^^
//│     = [Function: s]



// ==========================================================================


def s n = fun f -> n f
//│ s: 'a -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c))
//│   where
//│     'a <: nothing -> 'a
//│  = [Function: s1]

// def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
def succ_min : (forall 'N. ('N -> 'N)) -> (forall 'M. ('M -> 'M))
//│ succ_min: (forall 'N. 'N -> 'N) -> (forall 'M. 'M -> 'M)
//│         = <missing implementation>

// :DistributeForalls

// :ns
:e // * Needs distrib (see below)
:d
succ_min = s
// succ n = s n
// s id : (forall 'M. ('M -> 'M))
//│ 1. Typing term s   None
//│ 1. : ‹∀ 0. ‹∀ 1. {(α160'' -> ‹∀ 2. {(α161''' -> α162''') where: α160'' <: ((α161''',) -> α162''')}›) where: α160'' <: ((α161_163'',) -> α162_164'')}››
//│ ⬤ Typed as: ‹∀ 0. ‹∀ 0. ‹∀ 1. {(α160'' -> ‹∀ 2. {(α161''' -> α162''') where: α160'' <: ((α161''',) -> α162''')}›) where: α160'' <: ((α161_163'',) -> α162_164'')}›››
//│  where: 
//│ ⬤ Typed as: ‹∀ 0. (‹∀ 1. ('N181'' -> 'N181'')› -> ‹∀ 1. ('M182'' -> 'M182'')›)›
//│  where: 
//│ 'a -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c))
//│   where
//│     'a <: nothing -> 'a
//│   <:  succ_min:
//│ (forall 'N. 'N -> 'N) -> (forall 'M. 'M -> 'M)
//│ CHECKING SUBSUMPTION...
//│ CONSTRAIN ‹∀ 0. ‹∀ 0. ‹∀ 1. {(α160'' -> ‹∀ 2. {(α161''' -> α162''') where: α160'' <: ((α161''',) -> α162''')}›) where: α160'' <: ((α161_163'',) -> α162_164'')}››› <! ‹∀ 0. (‹∀ 1. ('N181'' -> 'N181'')› -> ‹∀ 1. ('M182'' -> 'M182'')›)›
//│   where 
//│ 0. C ‹∀ 0. ‹∀ 0. ‹∀ 1. {(α160'' -> ‹∀ 2. {(α161''' -> α162''') where: α160'' <: ((α161''',) -> α162''')}›) where: α160'' <: ((α161_163'',) -> α162_164'')}››› <! ‹∀ 0. (‹∀ 1. ('N181'' -> 'N181'')› -> ‹∀ 1. ('M182'' -> 'M182'')›)›
//│ | BUMP TO LEVEL 1  -->  (‹∀ 1. ('N181'' -> 'N181'')› -> ‹∀ 1. ('M182'' -> 'M182'')›)
//│ | where 
//│ | 1. C ‹∀ 0. ‹∀ 0. ‹∀ 1. {(α160'' -> ‹∀ 2. {(α161''' -> α162''') where: α160'' <: ((α161''',) -> α162''')}›) where: α160'' <: ((α161_163'',) -> α162_164'')}››› <! (‹∀ 1. ('N181'' -> 'N181'')› -> ‹∀ 1. ('M182'' -> 'M182'')›)
//│ | | 1. C ‹∀ 0. ‹∀ 1. {(α160'' -> ‹∀ 2. {(α161''' -> α162''') where: α160'' <: ((α161''',) -> α162''')}›) where: α160'' <: ((α161_163'',) -> α162_164'')}›› <! (‹∀ 1. ('N181'' -> 'N181'')› -> ‹∀ 1. ('M182'' -> 'M182'')›)
//│ | | | 1. C ‹∀ 1. {(α160'' -> ‹∀ 2. {(α161''' -> α162''') where: α160'' <: ((α161''',) -> α162''')}›) where: α160'' <: ((α161_163'',) -> α162_164'')}› <! (‹∀ 1. ('N181'' -> 'N181'')› -> ‹∀ 1. ('M182'' -> 'M182'')›)
//│ | | | | INST [1]   ‹∀ 1. {(α160'' -> ‹∀ 2. {(α161''' -> α162''') where: α160'' <: ((α161''',) -> α162''')}›) where: α160'' <: ((α161_163'',) -> α162_164'')}›
//│ | | | |   where  
//│ | | | | TO [1] ~>  {(α160_206' -> ‹∀ 2. {(α161_209''' -> α162_210''') where: α160_206' <: ((α161_209''',) -> α162_210''')}›) where: α160_206' <: ((α161_207',) -> α162_208')}
//│ | | | |   where  
//│ | | | | 1. C {(α160_206' -> ‹∀ 2. {(α161_209''' -> α162_210''') where: α160_206' <: ((α161_209''',) -> α162_210''')}›) where: α160_206' <: ((α161_207',) -> α162_208')} <! (‹∀ 1. ('N181'' -> 'N181'')› -> ‹∀ 1. ('M182'' -> 'M182'')›)
//│ | | | | | DISCHARGE CONSTRAINTS
//│ | | | | | | 1. C α160_206' <! ((α161_207',) -> α162_208')
//│ | | | | | | | NEW α160_206' UB (1)
//│ | | | | | 1. C (α160_206' -> ‹∀ 2. {(α161_209''' -> α162_210''') where: α160_206' <: ((α161_209''',) -> α162_210''')}›) <! (‹∀ 1. ('N181'' -> 'N181'')› -> ‹∀ 1. ('M182'' -> 'M182'')›)
//│ | | | | | | 1. C (‹∀ 1. ('N181'' -> 'N181'')›,) <! (α160_206',)
//│ | | | | | | | 1. C ‹∀ 1. ('N181'' -> 'N181'')› <! α160_206'
//│ | | | | | | | | NEW α160_206' LB (0)
//│ | | | | | | | | 1. C ‹∀ 1. ('N181'' -> 'N181'')› <! ((α161_207',) -> α162_208')
//│ | | | | | | | | | INST [1]   ‹∀ 1. ('N181'' -> 'N181'')›
//│ | | | | | | | | |   where  
//│ | | | | | | | | | TO [1] ~>  ('N181_211' -> 'N181_211')
//│ | | | | | | | | |   where  
//│ | | | | | | | | | 1. C ('N181_211' -> 'N181_211') <! ((α161_207',) -> α162_208')
//│ | | | | | | | | | | 1. C (α161_207',) <! ('N181_211',)
//│ | | | | | | | | | | | 1. C (α161_207',) <! ('N181_211',)
//│ | | | | | | | | | | | | 1. C α161_207' <! 'N181_211'
//│ | | | | | | | | | | | | | 1. C α161_207' <! 'N181_211'
//│ | | | | | | | | | | | | | | NEW α161_207' UB (1)
//│ | | | | | | | | | | 1. C 'N181_211' <! α162_208'
//│ | | | | | | | | | | | NEW 'N181_211' UB (1)
//│ | | | | | | 1. C ‹∀ 2. {(α161_209''' -> α162_210''') where: α160_206' <: ((α161_209''',) -> α162_210''')}› <! ‹∀ 1. ('M182'' -> 'M182'')›
//│ | | | | | | | BUMP TO LEVEL 2  -->  (‘M'' -> ‘M'')
//│ | | | | | | | where 
//│ | | | | | | | 2. C ‹∀ 2. {(α161_209''' -> α162_210''') where: α160_206' <: ((α161_209''',) -> α162_210''')}› <! (‘M'' -> ‘M'')
//│ | | | | | | | | INST [2]   ‹∀ 2. {(α161_209''' -> α162_210''') where: α160_206' <: ((α161_209''',) -> α162_210''')}›
//│ | | | | | | | |   where  
//│ 		α160_206' :> ‹∀ 1. ('N181'' -> 'N181'')› <: ((α161_207',) -> α162_208')
//│ 		α161_207' <: 'N181_211'
//│ 		'N181_211' <: α162_208'
//│ | | | | | | | | TO [2] ~>  {(α161_212'' -> α162_213'') where: α160_206' <: ((α161_212'',) -> α162_213'')}
//│ | | | | | | | |   where  
//│ 		α160_206' :> ‹∀ 1. ('N181'' -> 'N181'')› <: ((α161_207',) -> α162_208')
//│ 		α161_207' <: 'N181_211'
//│ 		'N181_211' <: α162_208'
//│ | | | | | | | | 2. C {(α161_212'' -> α162_213'') where: α160_206' <: ((α161_212'',) -> α162_213'')} <! (‘M'' -> ‘M'')
//│ | | | | | | | | | DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | 2. C α160_206' <! ((α161_212'',) -> α162_213'')
//│ | | | | | | | | | | | EXTR RHS  ~>  ((α214',) -> α215')  to 1
//│ | | | | | | | | | | |  where 
//│ | | | | | | | | | | |    and 
//│ 		α161_212'' <: α214'
//│ 		α162_213'' :> α215'
//│ | | | | | | | | | | | 2. C α160_206' <! ((α214',) -> α215')
//│ | | | | | | | | | | | | NEW α160_206' UB (1)
//│ | | | | | | | | | | | | 2. C ‹∀ 1. ('N181'' -> 'N181'')› <! ((α214',) -> α215')
//│ | | | | | | | | | | | | | INST [1]   ‹∀ 1. ('N181'' -> 'N181'')›
//│ | | | | | | | | | | | | |   where  
//│ | | | | | | | | | | | | | TO [2] ~>  ('N181_216'' -> 'N181_216'')
//│ | | | | | | | | | | | | |   where  
//│ | | | | | | | | | | | | | 2. C ('N181_216'' -> 'N181_216'') <! ((α214',) -> α215')
//│ | | | | | | | | | | | | | | 2. C (α214',) <! ('N181_216'',)
//│ | | | | | | | | | | | | | | | 2. C (α214',) <! ('N181_216'',)
//│ | | | | | | | | | | | | | | | | 2. C α214' <! 'N181_216''
//│ | | | | | | | | | | | | | | | | | 2. C α214' <! 'N181_216''
//│ | | | | | | | | | | | | | | | | | | NEW 'N181_216'' LB (1)
//│ | | | | | | | | | | | | | | 2. C 'N181_216'' <! α215'
//│ | | | | | | | | | | | | | | | NEW 'N181_216'' UB (1)
//│ | | | | | | | | | | | | | | | 2. C α214' <! α215'
//│ | | | | | | | | | | | | | | | | NEW α214' UB (1)
//│ | | | | | | | | | 2. C (α161_212'' -> α162_213'') <! (‘M'' -> ‘M'')
//│ | | | | | | | | | | 2. C (‘M'',) <! (α161_212'',)
//│ | | | | | | | | | | | 2. C ‘M'' <! α161_212''
//│ | | | | | | | | | | | | NEW α161_212'' LB (2)
//│ | | | | | | | | | | | | 2. C ‘M'' <! α214'
//│ | | | | | | | | | | | | | EXTR LHS  ~>  ‘M217'  to 1
//│ | | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | |    and 
//│ | | | | | | | | | | | | | 2. C ‘M217' <! α214'
//│ | | | | | | | | | | | | | | NEW α214' LB (1)
//│ | | | | | | | | | | | | | | 2. C ‘M217' <! α215'
//│ | | | | | | | | | | | | | | | NEW α215' LB (1)
//│ | | | | | | | | | | 2. C α162_213'' <! ‘M''
//│ | | | | | | | | | | | NEW α162_213'' UB (2)
//│ | | | | | | | | | | | 2. C α215' <! ‘M''
//│ | | | | | | | | | | | | EXTR RHS  ~>  ‹∀ 1. 'M218''›  to 1
//│ | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | |    and 
//│ | | | | | | | | | | | | 2. C α215' <! ‹∀ 1. 'M218''›
//│ | | | | | | | | | | | | | NEW α215' UB (0)
//│ | | | | | | | | | | | | | 2. C ‘M217' <! ‹∀ 1. 'M218''›
//│ | | | | | | | | | | | | | | BUMP TO LEVEL 3  -->  ‘M'''
//│ | | | | | | | | | | | | | | where 
//│ | | | | | | | | | | | | | | 3. C ‘M217' <! ‘M'''
//│ | | | | | | | | | | | | | | | CONSTRAINT FAILURE: ‘M217' <: ‘M'''
//│ | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | norm[+] ‘M217'
//│ | | | | | | | | | | | | | | | | DNF: DNF(1024, {}∧‘M217')
//│ | | | | | | | | | | | | | | | ~> ‘M217'
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.81: 	succ_min = s
//│ ║        	^^^^^^^^^^^^
//│ ╟── type `‘M217` is not an instance of type `'M`
//│ ║  l.72: 	def succ_min : (forall 'N. ('N -> 'N)) -> (forall 'M. ('M -> 'M))
//│ ║        	                                                  ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.72: 	def succ_min : (forall 'N. ('N -> 'N)) -> (forall 'M. ('M -> 'M))
//│ ╙──      	                                                  ^^
//│         = [Function: s1]



