:GeneralizeCurriedFunctions

// type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)

// :ArgGen

// :d
// :ns
// def s n = fun f -> fun x -> f (n f x)
def s n = fun f -> fun x -> (n f x)
// def s n = fun f -> n f
// def s n = n
//│ s: 'a -> (forall 'b. 'b -> (forall 'c. 'c -> (forall 'a, 'b, 'c, 'd. ('d
//│   where
//│     'a <: 'b -> 'c -> 'd))))
//│  = [Function: s]

def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ succ: (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = <missing implementation>

// :DistributeForalls

// :ns
// :e // * Needs distrib (see below)
// :d
succ = s
//│ 'a -> (forall 'b. 'b -> (forall 'c. 'c -> (forall 'a, 'b, 'c, 'd. ('d
//│   where
//│     'a <: 'b -> 'c -> 'd))))
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = [Function: s]



// ==========================================================================


:d
def s n = fun f -> n f
//│ 1. Typing term ((n,) => ((f,) => (n (f,))))
//│ | TYPING POLY LAM
//│ | 2. Typing pattern (n,)
//│ | | 2. Typing pattern n
//│ | | 2. : α81''
//│ | 2. : (α81'',)
//│ | 3. Typing term ((f,) => (n (f,)))
//│ | | TYPING POLY LAM
//│ | | 4. Typing pattern (f,)
//│ | | | 4. Typing pattern f
//│ | | | 4. : α82''''
//│ | | 4. : (α82'''',)
//│ | | 5. Typing term (n (f,))
//│ | | | 5. Typing term n
//│ | | | 5. : α81''
//│ | | | 5. Typing term f
//│ | | | 5. : α82''''
//│ | | | CONSTRAIN α81'' <! (α82'''' -> α83''''')
//│ | | |   where 
//│ | | | 5. C α81'' <! (α82'''' -> α83''''')
//│ | | | | STASHING α81'' bound in extr ctx
//│ | | 5. : α83'''''
//│ | | UNSTASHING... (out)
//│ | | UNSTASHING... (out)
//│ | 3. : ‹∀ 3. (α82'''' -> ‹∀ 4. {α83''''' where: α81'' <: (α82'''' -> α83''''')}›)›
//│ | UNSTASHING... (out)
//│ | UNSTASHING... (out)
//│ 1. : ‹∀ 1. (α81'' -> ‹∀ 3. (α82'''' -> ‹∀ 4. {α83''''' where: α81'' <: (α82'''' -> α83''''')}›)›)›
//│ UNSTASHING... (out)
//│ ⬤ Typed as: ‹∀ 0. ‹∀ 1. (α81'' -> ‹∀ 3. (α82'''' -> ‹∀ 4. {α83''''' where: α81'' <: (α82'''' -> α83''''')}›)›)››
//│  where: 
//│ s: 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'a <: 'b -> 'c)))
//│  = [Function: s1]

// def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
def succ_min : (forall 'N. ('N -> 'N)) -> (forall 'M. ('M -> 'M))
//│ succ_min: (forall 'N. 'N -> 'N) -> (forall 'M. 'M -> 'M)
//│         = <missing implementation>

// :DistributeForalls

// :ns
// :e // * Needs distrib (see below)
:d
succ_min = s
// succ n = s n
// s id : (forall 'M. ('M -> 'M))
//│ 1. Typing term s
//│ 1. : ‹∀ 0. ‹∀ 1. (α81'' -> ‹∀ 3. (α82'''' -> ‹∀ 4. {α83''''' where: α81'' <: (α82'''' -> α83''''')}›)›)››
//│ UNSTASHING... (out)
//│ ⬤ Typed as: ‹∀ 0. ‹∀ 0. ‹∀ 1. (α81'' -> ‹∀ 3. (α82'''' -> ‹∀ 4. {α83''''' where: α81'' <: (α82'''' -> α83''''')}›)›)›››
//│  where: 
//│ ⬤ Typed as: (‹∀ 1. ('N93'' -> 'N93'')› -> ‹∀ 1. ('M94'' -> 'M94'')›)
//│  where: 
//│ 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'a <: 'b -> 'c)))
//│   <:  succ_min:
//│ (forall 'N. 'N -> 'N) -> (forall 'M. 'M -> 'M)
//│ CHECKING SUBSUMPTION...
//│ CONSTRAIN ‹∀ 0. ‹∀ 0. ‹∀ 1. (α81'' -> ‹∀ 3. (α82'''' -> ‹∀ 4. {α83''''' where: α81'' <: (α82'''' -> α83''''')}›)›)››› <! (‹∀ 1. ('N93'' -> 'N93'')› -> ‹∀ 1. ('M94'' -> 'M94'')›)
//│   where 
//│ 0. C ‹∀ 0. ‹∀ 0. ‹∀ 1. (α81'' -> ‹∀ 3. (α82'''' -> ‹∀ 4. {α83''''' where: α81'' <: (α82'''' -> α83''''')}›)›)››› <! (‹∀ 1. ('N93'' -> 'N93'')› -> ‹∀ 1. ('M94'' -> 'M94'')›)
//│ | 0. C ‹∀ 0. ‹∀ 1. (α81'' -> ‹∀ 3. (α82'''' -> ‹∀ 4. {α83''''' where: α81'' <: (α82'''' -> α83''''')}›)›)›› <! (‹∀ 1. ('N93'' -> 'N93'')› -> ‹∀ 1. ('M94'' -> 'M94'')›)
//│ | | 0. C ‹∀ 1. (α81'' -> ‹∀ 3. (α82'''' -> ‹∀ 4. {α83''''' where: α81'' <: (α82'''' -> α83''''')}›)›)› <! (‹∀ 1. ('N93'' -> 'N93'')› -> ‹∀ 1. ('M94'' -> 'M94'')›)
//│ | | | INST [1]   ‹∀ 1. (α81'' -> ‹∀ 3. (α82'''' -> ‹∀ 4. {α83''''' where: α81'' <: (α82'''' -> α83''''')}›)›)›
//│ | | |   where  
//│ | | | TO [0] ~>  (α81_116 -> ‹∀ 3. (α82_117'''' -> ‹∀ 4. {α83_118''''' where: α81_116 <: (α82_117'''' -> α83_118''''')}›)›)
//│ | | |   where  
//│ | | | 0. C (α81_116 -> ‹∀ 3. (α82_117'''' -> ‹∀ 4. {α83_118''''' where: α81_116 <: (α82_117'''' -> α83_118''''')}›)›) <! (‹∀ 1. ('N93'' -> 'N93'')› -> ‹∀ 1. ('M94'' -> 'M94'')›)
//│ | | | | 0. C (‹∀ 1. ('N93'' -> 'N93'')›,) <! (α81_116,)
//│ | | | | | 0. C ‹∀ 1. ('N93'' -> 'N93'')› <! α81_116
//│ | | | | | | NEW α81_116 LB (0)
//│ | | | | 0. C ‹∀ 3. (α82_117'''' -> ‹∀ 4. {α83_118''''' where: α81_116 <: (α82_117'''' -> α83_118''''')}›)› <! ‹∀ 1. ('M94'' -> 'M94'')›
//│ | | | | | BUMP TO LEVEL 1  -->  (‘M' -> ‘M')
//│ | | | | | where 
//│ | | | | | 1. C ‹∀ 3. (α82_117'''' -> ‹∀ 4. {α83_118''''' where: α81_116 <: (α82_117'''' -> α83_118''''')}›)› <! (‘M' -> ‘M')
//│ | | | | | | INST [3]   ‹∀ 3. (α82_117'''' -> ‹∀ 4. {α83_118''''' where: α81_116 <: (α82_117'''' -> α83_118''''')}›)›
//│ | | | | | |   where  
//│ 		α81_116 :> ‹∀ 1. ('N93'' -> 'N93'')›
//│ | | | | | | TO [1] ~>  (α82_119' -> ‹∀ 4. {α83_120''''' where: α81_116 <: (α82_119' -> α83_120''''')}›)
//│ | | | | | |   where  
//│ 		α81_116 :> ‹∀ 1. ('N93'' -> 'N93'')›
//│ | | | | | | 1. C (α82_119' -> ‹∀ 4. {α83_120''''' where: α81_116 <: (α82_119' -> α83_120''''')}›) <! (‘M' -> ‘M')
//│ | | | | | | | 1. C (‘M',) <! (α82_119',)
//│ | | | | | | | | 1. C ‘M' <! α82_119'
//│ | | | | | | | | | NEW α82_119' LB (1)
//│ | | | | | | | 1. C ‹∀ 4. {α83_120''''' where: α81_116 <: (α82_119' -> α83_120''''')}› <! ‘M'
//│ | | | | | | | | INST [4]   ‹∀ 4. {α83_120''''' where: α81_116 <: (α82_119' -> α83_120''''')}›
//│ | | | | | | | |   where  
//│ 		α81_116 :> ‹∀ 1. ('N93'' -> 'N93'')›
//│ 		α82_119' :> ‘M'
//│ | | | | | | | | TO [1] ~>  {α83_121' where: α81_116 <: (α82_119' -> α83_121')}
//│ | | | | | | | |   where  
//│ 		α81_116 :> ‹∀ 1. ('N93'' -> 'N93'')›
//│ 		α82_119' :> ‘M'
//│ | | | | | | | | 1. C {α83_121' where: α81_116 <: (α82_119' -> α83_121')} <! ‘M'
//│ | | | | | | | | | DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | 1. C α81_116 <! (α82_119' -> α83_121')
//│ | | | | | | | | | | | STASHING α81_116 bound in extr ctx
//│ | | | | | | | | | 1. C α83_121' <! ‘M'
//│ | | | | | | | | | | NEW α83_121' UB (1)
//│ | | | | | UNSTASHING...
//│ | | | | | | 0. C α81_116 <! (α82_119' -> α83_121')
//│ | | | | | | | NEW α81_116 UB (1)
//│ | | | | | | | 0. C ‹∀ 1. ('N93'' -> 'N93'')› <! (α82_119' -> α83_121')
//│ | | | | | | | | INST [1]   ‹∀ 1. ('N93'' -> 'N93'')›
//│ | | | | | | | |   where  
//│ | | | | | | | | TO [0] ~>  ('N93_122 -> 'N93_122)
//│ | | | | | | | |   where  
//│ | | | | | | | | 0. C ('N93_122 -> 'N93_122) <! (α82_119' -> α83_121')
//│ | | | | | | | | | 0. C (α82_119',) <! ('N93_122,)
//│ | | | | | | | | | | 0. C α82_119' <! 'N93_122
//│ | | | | | | | | | | | NEW α82_119' UB (0)
//│ | | | | | | | | | | | 0. C ‘M' <! 'N93_122
//│ | | | | | | | | | | | | NEW 'N93_122 LB (1)
//│ | | | | | | | | | 0. C 'N93_122 <! α83_121'
//│ | | | | | | | | | | NEW 'N93_122 UB (1)
//│ | | | | | | | | | | 0. C ‘M' <! α83_121'
//│ | | | | | | | | | | | NEW α83_121' LB (1)
//│ | | | | | | | | | | | 0. C ‘M' <! ‘M'
//│ | | | | | UNSTASHING... (out)
//│         = [Function: s1]





