:GeneralizeCurriedFunctions

// type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)

// :ArgGen

// :d
// :ns
// def s n = fun f -> fun x -> f (n f x)
def s n = fun f -> fun x -> (n f x)
// def s n = fun f -> n f
// def s n = n
//│ s: ('a -> 'b -> 'c) -> 'a -> 'b -> 'c
//│  = [Function: s]

def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ succ: (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = <missing implementation>

// :DistributeForalls

// :ns
:e // * Needs distrib (see below)
// :d
succ = s
//│ ('a -> 'b -> 'c) -> 'a -> 'b -> 'c
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.25: 	succ = s
//│ ║        	^^^^^^^^
//│ ╟── type `‘M85` is not an instance of type `'M82`
//│ ║  l.16: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                                           ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.16: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                                           ^^
//│ ╟── from reference:
//│ ║  l.10: 	def s n = fun f -> fun x -> (n f x)
//│ ╙──      	                                 ^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.25: 	succ = s
//│ ║        	^^^^^^^^
//│ ╟── type `‘M85` is not an instance of type `'M`
//│ ║  l.16: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                                           ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.16: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ╙──      	                                                           ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.25: 	succ = s
//│ ║        	^^^^^^^^
//│ ╟── type `‘M82` is not an instance of type `'M`
//│ ║  l.16: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                                           ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.16: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ╙──      	                                                           ^^
//│     = [Function: s]



// ==========================================================================


def s n = fun f -> n f
//│ s: ('a -> 'b) -> 'a -> 'b
//│  = [Function: s1]

// def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
def succ_min : (forall 'N. ('N -> 'N)) -> (forall 'M. ('M -> 'M))
//│ succ_min: (forall 'N. 'N -> 'N) -> (forall 'M. 'M -> 'M)
//│         = <missing implementation>

// :DistributeForalls

// :ns
:e // * Needs distrib (see below)
:d
succ_min = s
// succ n = s n
// s id : (forall 'M. ('M -> 'M))
//│ 1. Typing term s   None
//│ 1. : ‹∀ 0. ‹∀ 1. (α87'' -> ‹∀ 2. (α88''' -> α89''')›)››
//│ ⬤ Typed as: ‹∀ 0. ‹∀ 0. ‹∀ 1. (α87'' -> ‹∀ 2. (α88''' -> α89''')›)›››
//│  where: 
//│ 		α87'' <: ((α90'',) -> α91'')
//│ 		α88''' <: α90''
//│ 		α89''' :> α91''
//│ ⬤ Typed as: ‹∀ 0. (‹∀ 1. ('N101'' -> 'N101'')› -> ‹∀ 1. ('M102'' -> 'M102'')›)›
//│  where: 
//│ ('a -> 'b) -> 'a -> 'b
//│   <:  succ_min:
//│ (forall 'N. 'N -> 'N) -> (forall 'M. 'M -> 'M)
//│ CHECKING SUBSUMPTION...
//│ CONSTRAIN ‹∀ 0. ‹∀ 0. ‹∀ 1. (α87'' -> ‹∀ 2. (α88''' -> α89''')›)››› <! ‹∀ 0. (‹∀ 1. ('N101'' -> 'N101'')› -> ‹∀ 1. ('M102'' -> 'M102'')›)›
//│   where 
//│ 		α87'' <: ((α90'',) -> α91'')
//│ 		α88''' <: α90''
//│ 		α89''' :> α91''
//│ 0. C ‹∀ 0. ‹∀ 0. ‹∀ 1. (α87'' -> ‹∀ 2. (α88''' -> α89''')›)››› <! ‹∀ 0. (‹∀ 1. ('N101'' -> 'N101'')› -> ‹∀ 1. ('M102'' -> 'M102'')›)›
//│ | BUMP TO LEVEL 1  -->  (‹∀ 1. ('N101'' -> 'N101'')› -> ‹∀ 1. ('M102'' -> 'M102'')›)
//│ | where 
//│ | 1. C ‹∀ 0. ‹∀ 0. ‹∀ 1. (α87'' -> ‹∀ 2. (α88''' -> α89''')›)››› <! (‹∀ 1. ('N101'' -> 'N101'')› -> ‹∀ 1. ('M102'' -> 'M102'')›)
//│ | | 1. C ‹∀ 0. ‹∀ 1. (α87'' -> ‹∀ 2. (α88''' -> α89''')›)›› <! (‹∀ 1. ('N101'' -> 'N101'')› -> ‹∀ 1. ('M102'' -> 'M102'')›)
//│ | | | 1. C ‹∀ 1. (α87'' -> ‹∀ 2. (α88''' -> α89''')›)› <! (‹∀ 1. ('N101'' -> 'N101'')› -> ‹∀ 1. ('M102'' -> 'M102'')›)
//│ | | | | INST [1]   ‹∀ 1. (α87'' -> ‹∀ 2. (α88''' -> α89''')›)›
//│ | | | |   where  
//│ 		α87'' <: ((α90'',) -> α91'')
//│ 		α88''' <: α90''
//│ 		α89''' :> α91''
//│ | | | | TO [1] ~>  (α87_124' -> ‹∀ 2. (α88_127''' -> α89_128''')›)
//│ | | | |   where  
//│ 		α87_124' <: ((α90_125',) -> α91_126')
//│ 		α88_127''' <: α90_125'
//│ 		α89_128''' :> α91_126'
//│ | | | | 1. C (α87_124' -> ‹∀ 2. (α88_127''' -> α89_128''')›) <! (‹∀ 1. ('N101'' -> 'N101'')› -> ‹∀ 1. ('M102'' -> 'M102'')›)
//│ | | | | | 1. C (‹∀ 1. ('N101'' -> 'N101'')›,) <! (α87_124',)
//│ | | | | | | 1. C ‹∀ 1. ('N101'' -> 'N101'')› <! α87_124'
//│ | | | | | | | NEW α87_124' LB (0)
//│ | | | | | | | 1. C ‹∀ 1. ('N101'' -> 'N101'')› <! ((α90_125',) -> α91_126')
//│ | | | | | | | | 1. C ‹∀ 1. ('N101'' -> 'N101'')› <! ((α90_125',) -> α91_126')
//│ | | | | | | | | | 1. C ‹∀ 1. ('N101'' -> 'N101'')› <! ((α90_125',) -> α91_126')
//│ | | | | | | | | | | 1. C ‹∀ 1. ('N101'' -> 'N101'')› <! ((α90_125',) -> α91_126')
//│ | | | | | | | | | | | 1. C ‹∀ 1. ('N101'' -> 'N101'')› <! ((α90_125',) -> α91_126')
//│ | | | | | | | | | | | | 1. C ‹∀ 1. ('N101'' -> 'N101'')› <! ((α90_125',) -> α91_126')
//│ | | | | | | | | | | | | | INST [1]   ‹∀ 1. ('N101'' -> 'N101'')›
//│ | | | | | | | | | | | | |   where  
//│ | | | | | | | | | | | | | TO [1] ~>  ('N101_129' -> 'N101_129')
//│ | | | | | | | | | | | | |   where  
//│ | | | | | | | | | | | | | 1. C ('N101_129' -> 'N101_129') <! ((α90_125',) -> α91_126')
//│ | | | | | | | | | | | | | | 1. C (α90_125',) <! ('N101_129',)
//│ | | | | | | | | | | | | | | | 1. C (α90_125',) <! ('N101_129',)
//│ | | | | | | | | | | | | | | | | 1. C α90_125' <! 'N101_129'
//│ | | | | | | | | | | | | | | | | | 1. C α90_125' <! 'N101_129'
//│ | | | | | | | | | | | | | | | | | | NEW α90_125' UB (1)
//│ | | | | | | | | | | | | | | 1. C 'N101_129' <! α91_126'
//│ | | | | | | | | | | | | | | | NEW 'N101_129' UB (1)
//│ | | | | | 1. C ‹∀ 2. (α88_127''' -> α89_128''')› <! ‹∀ 1. ('M102'' -> 'M102'')›
//│ | | | | | | BUMP TO LEVEL 2  -->  (‘M'' -> ‘M'')
//│ | | | | | | where 
//│ | | | | | | 2. C ‹∀ 2. (α88_127''' -> α89_128''')› <! (‘M'' -> ‘M'')
//│ | | | | | | | INST [2]   ‹∀ 2. (α88_127''' -> α89_128''')›
//│ | | | | | | |   where  
//│ 		α90_125' <: 'N101_129'
//│ 		α88_127''' <: α90_125'
//│ 		α89_128''' :> α91_126'
//│ 		'N101_129' <: α91_126'
//│ | | | | | | | TO [2] ~>  (α88_130'' -> α89_131'')
//│ | | | | | | |   where  
//│ 		α90_125' <: 'N101_129'
//│ 		'N101_129' <: α91_126'
//│ 		α88_130'' <: α90_125'
//│ 		α89_131'' :> α91_126'
//│ | | | | | | | 2. C (α88_130'' -> α89_131'') <! (‘M'' -> ‘M'')
//│ | | | | | | | | 2. C (‘M'',) <! (α88_130'',)
//│ | | | | | | | | | 2. C ‘M'' <! α88_130''
//│ | | | | | | | | | | NEW α88_130'' LB (2)
//│ | | | | | | | | | | 2. C ‘M'' <! α90_125'
//│ | | | | | | | | | | | EXTR LHS  ~>  ‘M132'  to 1
//│ | | | | | | | | | | |  where 
//│ | | | | | | | | | | |    and 
//│ | | | | | | | | | | | 2. C ‘M132' <! α90_125'
//│ | | | | | | | | | | | | NEW α90_125' LB (1)
//│ | | | | | | | | | | | | 2. C ‘M132' <! 'N101_129'
//│ | | | | | | | | | | | | | NEW 'N101_129' LB (1)
//│ | | | | | | | | | | | | | 2. C ‘M132' <! α91_126'
//│ | | | | | | | | | | | | | | NEW α91_126' LB (1)
//│ | | | | | | | | 2. C α89_131'' <! ‘M''
//│ | | | | | | | | | NEW α89_131'' UB (2)
//│ | | | | | | | | | 2. C α91_126' <! ‘M''
//│ | | | | | | | | | | EXTR RHS  ~>  ‹∀ 1. 'M133''›  to 1
//│ | | | | | | | | | |  where 
//│ | | | | | | | | | |    and 
//│ | | | | | | | | | | 2. C α91_126' <! ‹∀ 1. 'M133''›
//│ | | | | | | | | | | | NEW α91_126' UB (0)
//│ | | | | | | | | | | | 2. C ‘M132' <! ‹∀ 1. 'M133''›
//│ | | | | | | | | | | | | BUMP TO LEVEL 3  -->  ‘M'''
//│ | | | | | | | | | | | | where 
//│ | | | | | | | | | | | | 3. C ‘M132' <! ‘M'''
//│ | | | | | | | | | | | | | CONSTRAINT FAILURE: ‘M132' <: ‘M'''
//│ | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | norm[+] ‘M132'
//│ | | | | | | | | | | | | | | DNF: DNF(1024, {}∧‘M132')
//│ | | | | | | | | | | | | | ~> ‘M132'
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.80: 	succ_min = s
//│ ║        	^^^^^^^^^^^^
//│ ╟── type `‘M132` is not an instance of type `'M`
//│ ║  l.71: 	def succ_min : (forall 'N. ('N -> 'N)) -> (forall 'M. ('M -> 'M))
//│ ║        	                                                  ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.71: 	def succ_min : (forall 'N. ('N -> 'N)) -> (forall 'M. ('M -> 'M))
//│ ╙──      	                                                  ^^
//│         = [Function: s1]



