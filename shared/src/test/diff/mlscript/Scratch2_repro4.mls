:GeneralizeCurriedFunctions

// type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)

// :d
// :ns
// def s n = fun f -> fun x -> f (n f x)
// def s n = fun f -> fun x -> (n f x)
def s n = fun f -> n f
// def s n = n
//│ s: 'a -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c))
//│  = [Function: s]

// def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
def succ: (forall 'N. ('N -> 'N)) -> (forall 'M. ('M -> 'M))
//│ succ: (forall 'N. 'N -> 'N) -> (forall 'M. 'M -> 'M)
//│     = <missing implementation>

// :DistributeForalls

// :ns
:e // * Needs distrib (see below)
// :d
succ = s
// succ n = s n
// s id : (forall 'M. ('M -> 'M))
//│ 'a -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c))
//│   <:  succ:
//│ (forall 'N. 'N -> 'N) -> (forall 'M. 'M -> 'M)
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.26: 	succ = s
//│ ║        	^^^^^^^^
//│ ╟── type `anything` is not an instance of type `'M`
//│ ║  l.17: 	def succ: (forall 'N. ('N -> 'N)) -> (forall 'M. ('M -> 'M))
//│ ║        	                                             ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.17: 	def succ: (forall 'N. ('N -> 'N)) -> (forall 'M. ('M -> 'M))
//│ ╙──      	                                             ^^
//│     = [Function: s]


