:GeneralizeCurriedFunctions

// type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)

// :ArgGen

// :d
// :ns
// def s n = fun f -> fun x -> f (n f x)
// def s n = fun f -> fun x -> (n f x)
def s n = fun f -> n f
// def s n = n
//│ s: (nothing -> 'a & 'a) -> (forall 'a, 'b. ('b -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'a <: 'b -> 'c))
//│   where
//│     'a <: 'b -> 'a))
//│  = [Function: s]

def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ succ: (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = <missing implementation>

// :DistributeForalls

// :ns
:e // * Needs distrib (see below)
// :d
succ = s
//│ (nothing -> 'a & 'a) -> (forall 'a, 'b. ('b -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'a <: 'b -> 'c))
//│   where
//│     'a <: 'b -> 'a))
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.29: 	succ = s
//│ ║        	^^^^^^^^
//│ ╟── type `‘M96` is not an instance of type `'M`
//│ ║  l.20: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                                                           ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.20: 	def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ╙──      	                                                           ^^
//│     = [Function: s]



// def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
def succ: (forall 'N. ('N -> 'N)) -> (forall 'M. ('M -> 'M))
//│ succ: (forall 'N. 'N -> 'N) -> (forall 'M. 'M -> 'M)
//│     = <missing implementation>

// :DistributeForalls

// :ns
// :e // * Needs distrib (see below)
// :d
succ = s
// succ n = s n
// s id : (forall 'M. ('M -> 'M))
//│ (nothing -> 'a & 'a) -> (forall 'a, 'b. ('b -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'a <: 'b -> 'c))
//│   where
//│     'a <: 'b -> 'a))
//│   <:  succ:
//│ (forall 'N. 'N -> 'N) -> (forall 'M. 'M -> 'M)
//│     = [Function: s]



