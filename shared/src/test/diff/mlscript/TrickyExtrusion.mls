
// From SuperType tests

def True = true
//│ True: true
//│     = true

def inc: int -> int
//│ inc: int -> int
//│    = <missing implementation>

test f =
  let r = fun x -> fun g -> (g x, )
  in (r 0 inc, r True not)
//│ test: anything -> ((int,), (bool,),)
//│     = <no result>
//│       inc is not implemented

// * Precise type:
test f = (f 0, f True)
//│ test: (true -> 'a & 0 -> 'b) -> ('b, 'a,)
//│     = [Function: test]

// * Imprecise type (notice the `(0 | true)`):
// * Note: With inferred first-class constraints and generalized curried functions,
// *  this approximation be avoided (see below).
test f =
  let r x = f x
  in (r 0, r True)
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.28: 	  let r x = f x
//│ ║        	            ^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  α50'  <:  ((α53',) -> α54')    TypeVariable  FunctionType
//│ ╙──  ... looks like:  α50'  <:  ((α51'',) -> α52'')
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.29: 	  in (r 0, r True)
//│ ║        	      ^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  0<int,number>  <:  α53'    ClassTag  TypeVariable
//│ ╙──  ... looks like:  0<int,number>  <:  α51''
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.29: 	  in (r 0, r True)
//│ ║        	           ^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. true<bool>›  <:  α53'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. true<bool>›  <:  α51''
//│ test: anything -> (error, error,)
//│     = [Function: test1]

// Same example, a little elaborated
test f =
  let r = fun x -> fun g -> (g x, f x)
  in (r 0 inc, r True not)
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.53: 	  let r = fun x -> fun g -> (g x, f x)
//│ ║        	                                  ^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  α64'  <:  ((α69',) -> α70')    TypeVariable  FunctionType
//│ ╙──  ... looks like:  α64'  <:  ((α65'',) -> α68'')
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.54: 	  in (r 0 inc, r True not)
//│ ║        	      ^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  0<int,number>  <:  α69'    ClassTag  TypeVariable
//│ ╙──  ... looks like:  0<int,number>  <:  α65''
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.54: 	  in (r 0 inc, r True not)
//│ ║        	               ^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 0. true<bool>›  <:  α69'    PolymorphicType  TypeVariable
//│ ╙──  ... looks like:  ‹∀ 0. true<bool>›  <:  α65''
//│ test: anything -> ((int, error,) | error, (bool, error,) | error,)
//│     = <no result>
//│       inc is not implemented


:GeneralizeCurriedFunctions

test f =
  let r x = f x
  in (r 0, r True)
//│ test: (true -> 'a & 0 -> 'b) -> ('b, 'a,)
//│     = [Function: test2]

// * Even works with recursive definition because the constrained type is strictly local to the body!
rec def test f =
  let r x = f x
  in (r 0, r True)
//│ test: (true -> 'a & 0 -> 'b) -> ('b, 'a,)
//│     = [Function: test3]
