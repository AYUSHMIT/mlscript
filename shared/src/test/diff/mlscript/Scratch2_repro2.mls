
:GeneralizeCurriedFunctions
// :DistributeForalls

def s n = fun f -> fun x -> f (n f x)
// def s n = fun f -> fun x -> (n f x)
// def s n = fun f -> n f
// def s n = n
//│ s: ('a -> 'b -> 'c & 'd) -> (forall 'a, 'c, 'd, 'e, 'f, 'g, 'h, 'i. ((('g | 'h | 'c) -> 'i & 'a & 'e) -> (forall 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l. (('b & 'f & 'j) -> ('l | 'i)
//│   where
//│     'd <: 'e -> 'j -> ('h & 'k)
//│     'e <: ('k | 'g | 'c) -> 'l))
//│   where
//│     'd <: 'e -> 'f -> 'g))
//│  = [Function: s]

// type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)

def zero: ('N -> 'N) -> ('N -> 'N)
// def zero: 'N -> 'N
//│ zero: ('N -> 'N) -> 'N -> 'N
//│     = <missing implementation>

type ChI = (forall 'M. ('M -> 'M) -> ('M -> 'M))
// type ChI = (forall 'M. 'M -> 'M)
//│ Defined type alias ChI

:ns
sz = s zero
//│ sz: forall 'a, 'b. 'a
//│   where
//│     'a :> 'c -> ('d -> 'e
//│   where
//│     'b <: 'c -> 'f
//│     'c <: 'g -> 'e)
//│   where
//│     'b <: 'c -> 'h
//│     'f :> 'h
//│        <: 'd -> 'g
//│     'g :> 'i
//│        <: 'j
//│     'h :> 'k
//│        <: 'l -> 'i
//│     'k :> 'N -> 'N
//│        <: 'm -> 'n
//│     'e :> 'o
//│     'd <: 'l
//│     'l <: 'm
//│     'm <: 'N
//│     'c <: 'p & 'j -> 'o
//│     'j :> 'i
//│     'i :> 'n
//│     'p <: 'N -> 'N
//│     'N <: 'n
//│   = <no result>
//│     zero is not implemented

// Note: the error is delayed...
:e // due to tapping
sz1 = sz 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.60: 	sz1 = sz 1
//│ ║        	      ^^^^
//│ ╟── integer literal of type `1` is not a function
//│ ║  l.60: 	sz1 = sz 1
//│ ║        	         ^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.19: 	def zero: ('N -> 'N) -> ('N -> 'N)
//│ ║        	          ^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.5: 	def s n = fun f -> fun x -> f (n f x)
//│ ╙──     	                                 ^
//│ sz1: error
//│    = <no result>
//│      sz and zero are not implemented

// :e // FIXME? succeeds with genLamBodies
sz1 2
//│ res: error
//│    = <no result>
//│      sz1, sz and zero are not implemented

:e // due to tapping
sz true
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.84: 	sz true
//│ ║        	^^^^^^^
//│ ╟── reference of type `true` is not a function
//│ ║  l.84: 	sz true
//│ ║        	   ^^^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.19: 	def zero: ('N -> 'N) -> ('N -> 'N)
//│ ║        	          ^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.5: 	def s n = fun f -> fun x -> f (n f x)
//│ ╙──     	                                 ^
//│ res: error
//│    = <no result>
//│      sz and zero are not implemented

sz: ChI
//│ res: ChI
//│    = <no result>
//│      sz and zero are not implemented

s zero
//│ res: ('N -> 'N & ('N | 'a | 'b) -> 'c & 'd) -> (forall 'd, 'e, 'a, 'b, 'c, 'f, 'g, 'h. (('e & 'N & 'f) -> ('h | 'c)
//│   where
//│     'i <: 'd -> 'f -> ('b & 'g)
//│     'd <: ('N | 'g | 'a) -> 'h))
//│   where
//│     'i <: 'd -> 'e -> 'a
//│    = <no result>
//│      zero is not implemented

// :e // works with quantif extrus
// :e // due to tapping
res: ChI
//│ res: ChI
//│    = [Function: s]

let tmp = s zero in tmp: ChI
//│ res: ChI
//│    = <no result>
//│      zero is not implemented

// FIXedME:
// :d
s zero : ChI
//│ res: ChI
//│    = <no result>
//│      zero is not implemented




// def example f = (f: forall 'a. 'a -> int -> 'b) f
// :ns
// :d
def example f = (f: forall 'a. 'a -> 'a)
//│ example: (forall 'a. 'a -> 'a) -> (forall 'a. 'a -> 'a)
//│        = [Function: example]

:e
example 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.145: 	example 1
//│ ║         	^^^^^^^^^
//│ ╟── integer literal of type `1` is not a function
//│ ║  l.145: 	example 1
//│ ║         	        ^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.140: 	def example f = (f: forall 'a. 'a -> 'a)
//│ ║         	                               ^^^^^^^^
//│ ╟── from reference:
//│ ║  l.140: 	def example f = (f: forall 'a. 'a -> 'a)
//│ ╙──       	                 ^
//│ res: error
//│    = 1

:e
example succ
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.162: 	example succ
//│ ║         	^^^^^^^^^^^^
//│ ╟── type `‘a` is not an instance of type `int`
//│ ║  l.140: 	def example f = (f: forall 'a. 'a -> 'a)
//│ ╙──       	                           ^^
//│ res: error
//│    = [Function: succ]

example id
//│ res: 'a -> 'a
//│    = [Function: id]


// def example f = ((fun x -> x, f) : forall 'a. ('a -> 'a, 'a -> 'a))

// FIXME: Rigid variable extrusion here! We should clean extr contexts of local rigids before returning them....
def example f = ((0, f) : forall 'a. (0, 'a))
//│ example: ‘a377 -> (0, nothing,)
//│        = [Function: example1]

// FIXME same
def example f = ((0, f) : forall 'a. (0, 'a -> 'a))
//│ example: (‘a382 -> ‘a382) -> (forall 'a. (0, 'a -> 'a,))
//│        = [Function: example2]



def id_ty: forall 'a. 'a -> 'a
//│ id_ty: 'a -> 'a
//│      = <missing implementation>

// rec def id x = if true then x else id id x
rec def id x = let tmp = id id x in x
//│ id: 'id
//│   where
//│     'id :> 'a -> 'a
//│     'a :> 'id
//│        <: 'a -> anything
//│   = [Function: id1]

// FIXME
id_ty = id
//│ 'id
//│   where
//│     'id :> 'a -> 'a
//│     'a :> 'id
//│        <: 'a -> anything
//│   <:  id_ty:
//│ 'a -> 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.205: 	id_ty = id
//│ ║         	^^^^^^^^^^
//│ ╟── type `‘a` is not a function
//│ ║  l.191: 	def id_ty: forall 'a. 'a -> 'a
//│ ║         	                  ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.196: 	rec def id x = let tmp = id id x in x
//│ ║         	                         ^^^^^^^
//│ ╟── from reference:
//│ ║  l.196: 	rec def id x = let tmp = id id x in x
//│ ╙──       	                                    ^
//│      = [Function: id1]


