
:GeneralizeCurriedFunctions
// :DistributeForalls

def s n = fun f -> fun x -> f (n f x)
// def s n = fun f -> fun x -> (n f x)
// def s n = fun f -> n f
// def s n = n
//│ s: (nothing -> nothing -> 'a & 'a) -> (forall 'a, 'b, 'c. (('c -> 'a & 'b) -> (forall 'a, 'b, 'd, 'e, 'f. ('d -> 'f
//│   where
//│     'a <: 'b -> 'd -> 'e
//│     'b <: 'e -> 'f))
//│   where
//│     'a <: 'b -> nothing -> 'c))
//│  = [Function: s]

// type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)

def zero: ('N -> 'N) -> ('N -> 'N)
// def zero: 'N -> 'N
//│ zero: ('N -> 'N) -> 'N -> 'N
//│     = <missing implementation>

type ChI = (forall 'M. ('M -> 'M) -> ('M -> 'M))
// type ChI = (forall 'M. 'M -> 'M)
//│ Defined type alias ChI

:ns
sz = s zero
//│ sz: forall 'a, 'b. 'a
//│   where
//│     'a :> 'c -> ('d -> 'e
//│   where
//│     'b <: 'c -> 'f
//│     'c <: 'g -> 'e)
//│   where
//│     'b <: 'c -> 'h
//│     'h <: 'i -> 'j
//│     'f <: 'd -> 'g
//│     'c <: 'j -> 'k
//│   = <no result>
//│     zero is not implemented

// Note: the error is delayed...
:e // due to tapping
sz1 = sz 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.46: 	sz1 = sz 1
//│ ║        	      ^^^^
//│ ╟── integer literal of type `1` is not a function
//│ ║  l.46: 	sz1 = sz 1
//│ ║        	         ^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.19: 	def zero: ('N -> 'N) -> ('N -> 'N)
//│ ║        	          ^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.5: 	def s n = fun f -> fun x -> f (n f x)
//│ ╙──     	                                 ^
//│ sz1: 'a -> 'b | error
//│   where
//│     'c <: 'd -> 'a -> 'e
//│     'd <: 'e -> 'b
//│    = <no result>
//│      sz and zero are not implemented

// :e // FIXME? succeeds with genLamBodies
sz1 2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.67: 	sz1 2
//│ ║        	^^^^^
//│ ╟── integer literal of type `1` is not a function
//│ ║  l.46: 	sz1 = sz 1
//│ ║        	         ^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.19: 	def zero: ('N -> 'N) -> ('N -> 'N)
//│ ╙──      	          ^^^^^^^^^^
//│ res: error
//│    = <no result>
//│      sz1, sz and zero are not implemented

:e // due to tapping
sz true
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.82: 	sz true
//│ ║        	^^^^^^^
//│ ╟── reference of type `true` is not a function
//│ ║  l.82: 	sz true
//│ ║        	   ^^^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.19: 	def zero: ('N -> 'N) -> ('N -> 'N)
//│ ║        	          ^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.5: 	def s n = fun f -> fun x -> f (n f x)
//│ ╙──     	                                 ^
//│ res: 'a -> 'b | error
//│   where
//│     'c <: 'd -> 'a -> 'e
//│     'd <: 'e -> 'b
//│    = <no result>
//│      sz and zero are not implemented

sz: ChI
//│ res: ChI
//│    = <no result>
//│      sz and zero are not implemented

s zero
//│ res: ('a -> anything & 'b) -> (forall 'b, 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'f <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e))
//│   where
//│     'f <: 'b -> nothing -> 'a
//│    = <no result>
//│      zero is not implemented

// :e // works with quantif extrus
:e // due to tapping
res: ChI
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.119: 	res: ChI
//│ ║         	^^^
//│ ╟── type `‘M298` is not an instance of type `'M`
//│ ║  l.24: 	type ChI = (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ║        	                   ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.24: 	type ChI = (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ ╙──      	                   ^^
//│ res: ChI
//│    = [Function: s]

let tmp = s zero in tmp: ChI
//│ res: ChI
//│    = <no result>
//│      zero is not implemented

// FIXedME:
// :d
s zero : ChI
//│ res: ChI
//│    = <no result>
//│      zero is not implemented




// def example f = (f: forall 'a. 'a -> int -> 'b) f
// :ns
// :d
def example f = (f: forall 'a. 'a -> 'a)
//│ example: (forall 'a. 'a -> 'a) -> (forall 'a. 'a -> 'a)
//│        = [Function: example]

:e
example 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.155: 	example 1
//│ ║         	^^^^^^^^^
//│ ╟── integer literal of type `1` is not a function
//│ ║  l.155: 	example 1
//│ ║         	        ^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.150: 	def example f = (f: forall 'a. 'a -> 'a)
//│ ║         	                               ^^^^^^^^
//│ ╟── from reference:
//│ ║  l.150: 	def example f = (f: forall 'a. 'a -> 'a)
//│ ╙──       	                 ^
//│ res: 'a -> 'a | error
//│    = 1

:e
example succ
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.172: 	example succ
//│ ║         	^^^^^^^^^^^^
//│ ╟── type `‘a` is not an instance of type `int`
//│ ║  l.150: 	def example f = (f: forall 'a. 'a -> 'a)
//│ ╙──       	                           ^^
//│ res: 'a -> 'a | error
//│    = [Function: succ]

example id
//│ res: 'a -> 'a
//│    = [Function: id]


// def example f = ((fun x -> x, f) : forall 'a. ('a -> 'a, 'a -> 'a))

// FIXME: Rigid variable extrusion here! We should clean extr contexts of local rigids before returning them....
def example f = ((0, f) : forall 'a. (0, 'a))
//│ example: 'a -> (0, nothing,)
//│   where
//│     'a <: ‘a
//│        = [Function: example1]

// FIXME same
def example f = ((0, f) : forall 'a. (0, 'a -> 'a))
//│ example: 'b -> (forall 'a. (0, 'a -> 'a,))
//│   where
//│     'b <: ‘a -> ‘a
//│        = [Function: example2]



def id_ty: forall 'a. 'a -> 'a
//│ id_ty: 'a -> 'a
//│      = <missing implementation>

// rec def id x = if true then x else id id x
rec def id x = let tmp = id id x in x
//│ id: 'id
//│   where
//│     'id :> 'a -> 'a
//│     'a :> 'id
//│        <: 'a -> anything
//│   = [Function: id1]

// FIXME
id_ty = id
//│ 'id
//│   where
//│     'id :> 'a -> 'a
//│     'a :> 'id
//│        <: 'a -> anything
//│   <:  id_ty:
//│ 'a -> 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.219: 	id_ty = id
//│ ║         	^^^^^^^^^^
//│ ╟── type `‘a` is not a function
//│ ║  l.205: 	def id_ty: forall 'a. 'a -> 'a
//│ ║         	                  ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.210: 	rec def id x = let tmp = id id x in x
//│ ║         	                         ^^^^^^^
//│ ╟── from reference:
//│ ║  l.210: 	rec def id x = let tmp = id id x in x
//│ ╙──       	                                    ^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.219: 	id_ty = id
//│ ║         	^^^^^^^^^^
//│ ╟── function of type `?a -> ?a` is not an instance of type `'a`
//│ ║  l.210: 	rec def id x = let tmp = id id x in x
//│ ║         	           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.205: 	def id_ty: forall 'a. 'a -> 'a
//│ ╙──       	                  ^^
//│      = [Function: id1]


