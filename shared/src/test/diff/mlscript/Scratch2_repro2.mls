
:GeneralizeCurriedFunctions
// :DistributeForalls

def s n = fun f -> fun x -> f (n f x)
// def s n = fun f -> fun x -> (n f x)
// def s n = fun f -> n f
// def s n = n
//│ s: (nothing -> nothing -> 'a & 'a) -> (forall 'a, 'b, 'c. (('c -> 'a & 'b) -> (forall 'a, 'b, 'd, 'e, 'f. ('d -> 'f
//│   where
//│     'a <: 'b -> 'd -> 'e
//│     'b <: 'e -> 'f))
//│   where
//│     'a <: 'b -> nothing -> 'c))
//│  = [Function: s]

// type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)

def zero: ('N -> 'N) -> ('N -> 'N)
// def zero: 'N -> 'N
//│ zero: ('N -> 'N) -> 'N -> 'N
//│     = <missing implementation>

type ChI = (forall 'M. ('M -> 'M) -> ('M -> 'M))
// type ChI = (forall 'M. 'M -> 'M)
//│ Defined type alias ChI

:ns
sz = s zero
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing
//│ 	at: scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrainImpl$65(ConstraintSolver.scala:479)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrainImpl$65$adapted(ConstraintSolver.scala:449)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrainImpl$62(ConstraintSolver.scala:449)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)
//│ 	at: mlscript.ConstraintSolver.recImpl$1(ConstraintSolver.scala:408)
//│ 	at: mlscript.ConstraintSolver.rec$1(ConstraintSolver.scala:391)
//│ 	at: mlscript.ConstraintSolver.constrainImpl(ConstraintSolver.scala:901)

// Note: the error is delayed...
:e // due to tapping
sz1 = sz 1
//│ ╔══[ERROR] identifier not found: sz
//│ ║  l.46: 	sz1 = sz 1
//│ ╙──      	      ^^
//│ sz1: error
//│    = <no result>
//│      sz and zero are not implemented

// :e // FIXME? succeeds with genLamBodies
sz1 2
//│ res: error
//│    = <no result>
//│      sz1, sz and zero are not implemented

:e // due to tapping
sz true
//│ ╔══[ERROR] identifier not found: sz
//│ ║  l.67: 	sz true
//│ ╙──      	^^
//│ res: error
//│    = <no result>
//│      sz and zero are not implemented

sz: ChI
//│ ╔══[ERROR] identifier not found: sz
//│ ║  l.81: 	sz: ChI
//│ ╙──      	^^
//│ res: ChI
//│    = <no result>
//│      sz and zero are not implemented

s zero
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing
//│ 	at: scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrainImpl$65(ConstraintSolver.scala:479)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrainImpl$65$adapted(ConstraintSolver.scala:449)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrainImpl$62(ConstraintSolver.scala:449)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)
//│ 	at: mlscript.ConstraintSolver.recImpl$1(ConstraintSolver.scala:408)
//│ 	at: mlscript.ConstraintSolver.rec$1(ConstraintSolver.scala:391)
//│ 	at: mlscript.ConstraintSolver.constrainImpl(ConstraintSolver.scala:901)

// :e // works with quantif extrus
// :e // due to tapping
res: ChI
//│ res: ChI
//│    = [Function: s]

let tmp = s zero in tmp: ChI
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing
//│ 	at: scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrainImpl$65(ConstraintSolver.scala:479)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrainImpl$65$adapted(ConstraintSolver.scala:449)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrainImpl$62(ConstraintSolver.scala:449)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)
//│ 	at: mlscript.ConstraintSolver.recImpl$1(ConstraintSolver.scala:408)
//│ 	at: mlscript.ConstraintSolver.rec$1(ConstraintSolver.scala:391)
//│ 	at: mlscript.ConstraintSolver.constrainImpl(ConstraintSolver.scala:901)

// FIXedME:
// :d
s zero : ChI
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing
//│ 	at: scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrainImpl$65(ConstraintSolver.scala:479)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrainImpl$65$adapted(ConstraintSolver.scala:449)
//│ 	at: mlscript.utils.package$GenHelper$.$bar$greater$extension(package.scala:101)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrainImpl$62(ConstraintSolver.scala:449)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:30)
//│ 	at: mlscript.ConstraintSolver.recImpl$1(ConstraintSolver.scala:408)
//│ 	at: mlscript.ConstraintSolver.rec$1(ConstraintSolver.scala:391)
//│ 	at: mlscript.ConstraintSolver.constrainImpl(ConstraintSolver.scala:901)




// def example f = (f: forall 'a. 'a -> int -> 'b) f
// :ns
// :d
def example f = (f: forall 'a. 'a -> 'a)
//│ example: (forall 'a. 'a -> 'a) -> (forall 'a. 'a -> 'a)
//│        = [Function: example]

:e
example 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.125: 	example 1
//│ ║         	^^^^^^^^^
//│ ╟── integer literal of type `1` is not a function
//│ ║  l.125: 	example 1
//│ ║         	        ^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.120: 	def example f = (f: forall 'a. 'a -> 'a)
//│ ║         	                               ^^^^^^^^
//│ ╟── from reference:
//│ ║  l.120: 	def example f = (f: forall 'a. 'a -> 'a)
//│ ╙──       	                 ^
//│ res: error
//│    = 1

:e
example succ
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.142: 	example succ
//│ ║         	^^^^^^^^^^^^
//│ ╟── type `‘a` is not an instance of type `int`
//│ ║  l.120: 	def example f = (f: forall 'a. 'a -> 'a)
//│ ╙──       	                           ^^
//│ res: error
//│    = [Function: succ]

example id
//│ res: 'a -> 'a
//│    = [Function: id]


// def example f = ((fun x -> x, f) : forall 'a. ('a -> 'a, 'a -> 'a))

// FIXME: Rigid variable extrusion here! We should clean extr contexts of local rigids before returning them....
def example f = ((0, f) : forall 'a. (0, 'a))
//│ example: ‘a -> (0, nothing,)
//│        = [Function: example1]

// FIXME same
def example f = ((0, f) : forall 'a. (0, 'a -> 'a))
//│ example: (‘a -> ‘a) -> (forall 'a. (0, 'a -> 'a,))
//│        = [Function: example2]



def id_ty: forall 'a. 'a -> 'a
//│ id_ty: 'a -> 'a
//│      = <missing implementation>

// rec def id x = if true then x else id id x
rec def id x = let tmp = id id x in x
//│ id: 'id
//│   where
//│     'id :> 'a -> 'a
//│     'a :> 'id
//│        <: 'a -> anything
//│   = [Function: id1]

// FIXME
id_ty = id
//│ 'id
//│   where
//│     'id :> 'a -> 'a
//│     'a :> 'id
//│        <: 'a -> anything
//│   <:  id_ty:
//│ 'a -> 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.185: 	id_ty = id
//│ ║         	^^^^^^^^^^
//│ ╟── type `‘a` is not a function
//│ ║  l.171: 	def id_ty: forall 'a. 'a -> 'a
//│ ║         	                  ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.176: 	rec def id x = let tmp = id id x in x
//│ ║         	                         ^^^^^^^
//│ ╟── from reference:
//│ ║  l.176: 	rec def id x = let tmp = id id x in x
//│ ╙──       	                                    ^
//│      = [Function: id1]


