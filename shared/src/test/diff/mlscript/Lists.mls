
class Nil: {}
class Cons[A]: { head: A; tail: List[A] }
type List[A] = Nil | Cons[A]
//│ Defined class Nil
//│ Defined class Cons
//│ Defined type alias List

def originalCons = Cons  // Note: type still seems over-complicated because we push 'b inside the union, killing a hash-consing opportunity at the outer level...
//│ originalCons: {head: 'A & 'head, tail: ((Cons['A] with {tail: 'b & ('a | Nil)}) as 'a) & 'tail | Nil & 'tail} -> (Cons['A] with {head: 'head, tail: 'tail})
//│             = [Function: originalCons]

def Nil = Nil {}
//│ Nil: Nil
//│    = Nil {}

def Cons head tail = Cons { head; tail }
//│ Cons: 'a -> (forall 'A, 'tail, 'b. (((Cons['A | 'a .. 'A] with {tail: 'b & ('c | Nil)}) as 'c) & 'tail | Nil & 'tail) -> (Cons['A .. 'A | 'a] with {head: 'a, tail: 'tail}))
//│     = [Function: Cons1]


Cons 2
//│ /!!!\ Uncaught error: java.lang.StackOverflowError

def c = Cons 2 Nil
//│ /!!!\ Uncaught error: java.lang.StackOverflowError

def d = Cons 1 c
//│ /!!!\ Uncaught error: java.lang.StackOverflowError

d.head
//│ ╔══[ERROR] identifier not found: d
//│ ║  l.34: 	d.head
//│ ╙──      	^
//│ res: error
//│    = 1

res: 1
//│ res: 1
//│    = 1

d.tail
//│ ╔══[ERROR] identifier not found: d
//│ ║  l.42: 	d.tail
//│ ╙──      	^
//│ res: error
//│    = Cons { head: 2, tail: Nil {} }

Cons 1 res
//│ /!!!\ Uncaught error: java.lang.StackOverflowError

res.tail
//│ res: error
//│    = Cons { head: 2, tail: Nil {} }

Cons 1 (Cons 2 Nil)
//│ /!!!\ Uncaught error: java.lang.StackOverflowError

res.tail
//│ res: error
//│    = Cons { head: 2, tail: Nil {} }

// We can now access the tail's tail, thanks to the refined type
res.tail
//│ res: error
//│    = Nil {}

:e
res.tail.head
//│ res: error
//│ Runtime error:
//│   TypeError: Cannot read properties of undefined (reading 'head')



// This used to yield a more precise Cons constructor, but it's no longer necessary in the new class semantics
def Cons head tail = originalCons { head; tail } with { head; tail }
//│ Cons: 'a -> (forall 'A, 'tail, 'b. (((Cons['A | 'a .. 'A] with {tail: 'b & ('c | Nil)}) as 'c) & 'tail | Nil & 'tail) -> (Cons['A .. 'A | 'a] with {head: 'a, tail: 'tail}))
//│     = [Function: Cons2]


Cons 2
//│ /!!!\ Uncaught error: java.lang.StackOverflowError

Cons 2 Nil
//│ /!!!\ Uncaught error: java.lang.StackOverflowError

res.head
//│ res: error
//│    = 2

:e
Cons 1 res
//│ /!!!\ Uncaught error: java.lang.StackOverflowError

// Here there used to be a loss of precision in the older with-field approach.
//    The problem occured when constraining `α8 w/ {head: α5, tail: [α6]}  <!  nil | {head: α2}`
//    as we can't decide whether to constrain `α8 <! nil` or `α5 <! α2`...
// I seemingly solved it by just pushing `with` extensions applied on variables to the right
//    just long enough to push it back on the left after travsering type variable bounds...
//    This is okay because `with` types otherwise never occur in negative position... Note we could
//    have used a different "delayed with" type to be cleaner, though it's just not necessary.
// But then I reverted to the use of simple field-hiding types, as they are simpler!
// 
Cons 1 (Cons 2 Nil)
//│ /!!!\ Uncaught error: java.lang.StackOverflowError

{ a = res.head; b = res.tail.head; c = res.tail.tail }
//│ res: {a: error, b: error, c: error}
//│    = { a: 1, b: 2, c: Nil {} }

Cons 2 Nil
//│ /!!!\ Uncaught error: java.lang.StackOverflowError

Cons 1 (id res)
//│ /!!!\ Uncaught error: java.lang.StackOverflowError

{ a = res.head; b = res.tail.head; c = res.tail.tail }
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.150: 	{ a = res.head; b = res.tail.head; c = res.tail.tail }
//│ ║         	      ^^^^^^^^
//│ ╟── record literal of type `{a: ?a, b: ?b, c: ?c}` does not have field 'head'
//│ ║  l.138: 	{ a = res.head; b = res.tail.head; c = res.tail.tail }
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `{head: ?d}`
//│ ║  l.150: 	{ a = res.head; b = res.tail.head; c = res.tail.tail }
//│ ╙──       	      ^^^
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.150: 	{ a = res.head; b = res.tail.head; c = res.tail.tail }
//│ ║         	                    ^^^^^^^^
//│ ╟── record literal of type `{a: ?a, b: ?b, c: ?c}` does not have field 'tail'
//│ ║  l.138: 	{ a = res.head; b = res.tail.head; c = res.tail.tail }
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `{tail: ?d}`
//│ ║  l.150: 	{ a = res.head; b = res.tail.head; c = res.tail.tail }
//│ ╙──       	                    ^^^
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.150: 	{ a = res.head; b = res.tail.head; c = res.tail.tail }
//│ ║         	                                       ^^^^^^^^
//│ ╟── record literal of type `{a: ?a, b: ?b, c: ?c}` does not have field 'tail'
//│ ║  l.138: 	{ a = res.head; b = res.tail.head; c = res.tail.tail }
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `{tail: ?d}`
//│ ║  l.150: 	{ a = res.head; b = res.tail.head; c = res.tail.tail }
//│ ╙──       	                                       ^^^
//│ res: {a: error, b: error, c: error}
//│    = { a: 1, b: 2, c: Nil {} }


def Cons head = originalCons { head=0; tail=Nil } with { head }
//│ Cons: 'a -> (Cons['A .. 0 | 'A] with {head: 'a, tail: Nil})
//│     = [Function: Cons3]

Cons 1
//│ res: Cons['A .. 0 | 'A] with {head: 1, tail: Nil}
//│    = Cons { head: 1, tail: Nil {} }

res.head
//│ res: 1
//│    = 1

def c = Cons 1
//│ c: Cons['A .. 0 | 'A] with {head: 1, tail: Nil}
//│  = Cons { head: 1, tail: Nil {} }

c.head
//│ res: 1
//│    = 1


:re
def c: 'a -> List['b] -> List['a | 'b]
c 1 (c 2 Nil)
//│ c: 'a -> ((Cons['b] with {tail: 'c}) | Nil as 'c) -> ((Cons['a | 'b] with {tail: 'd}) | Nil as 'd)
//│ res: (Cons['a .. 'a | 1 | 2] with {tail: 'b}) | Nil as 'b
//│ Runtime error:
//│   TypeError: c1 is not a function

:re
def c: 'a -> ('l & List['b]) -> (Cons[anything] & { head: 'a; tail: 'l })
c 1 (c 2 Nil)
//│ c: 'a -> (((Cons['b] with {tail: 'd & ('c | Nil)}) as 'c) & 'l | Nil & 'l) -> (Cons[anything] with {head: 'a, tail: ((Cons[anything] with {tail: 'f | 'e | Nil}) as 'e) & 'l | Nil & 'l})
//│ res: Cons[anything] with {head: 1, tail: Cons[anything] with {head: 2, tail: Nil}}
//│ Runtime error:
//│   TypeError: c1 is not a function


