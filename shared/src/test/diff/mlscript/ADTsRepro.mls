
type Add[E] = { x: E -> E }
//│ Defined type alias Add[=E]

def e2: Add['e] as 'e
//│ e2: 'e
//│   where
//│     'e := Add['e]
//│   = <missing implementation>

// :d
// FIXME
e2 : Add['e] as 'e
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?e. ?e <: ?e0` exceeded recursion depth limit (400)
//│ ║  l.13: 	e2 : Add['e] as 'e
//│ ║        	^^
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  {x: ('e39 -> 'e39)}
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  'e40
//│ ╟── while constraining:  'e39  <!<  'e40
//│ ╟── while constraining:  ('e39,)  <!<  ('e40,)
//│ ╟── while constraining:  ('e40 -> 'e40)  <!<  ('e39 -> 'e39)
//│ ╟── while constraining:  {x: ('e40 -> 'e40)}  <!<  {x: ('e39 -> 'e39)}
//│ ╟── while constraining:  Add['e40]  <!<  {x: ('e39 -> 'e39)}
//│ ╟── while constraining:  'e40  <!<  {x: ('e39 -> 'e39)}
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  {x: ('e39 -> 'e39)}
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  Add['e39]
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  'e39
//│ ╟── while constraining:  'e38  <!<  'e39
//│ ╟── while constraining:  ('e38,)  <!<  ('e39,)
//│ ╟── while constraining:  ('e39 -> 'e39)  <!<  ('e38 -> 'e38)
//│ ╟── while constraining:  {x: ('e39 -> 'e39)}  <!<  {x: ('e38 -> 'e38)}
//│ ╟── while constraining:  Add['e39]  <!<  {x: ('e38 -> 'e38)}
//│ ╟── while constraining:  'e39  <!<  {x: ('e38 -> 'e38)}
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  {x: ('e38 -> 'e38)}
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  Add['e38]
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  'e38
//│ ╟── while constraining:  'e37  <!<  'e38
//│ ╟── while constraining:  ('e37,)  <!<  ('e38,)
//│ ╟── while constraining:  ('e38 -> 'e38)  <!<  ('e37 -> 'e37)
//│ ╟── while constraining:  {x: ('e38 -> 'e38)}  <!<  {x: ('e37 -> 'e37)}
//│ ╟── while constraining:  Add['e38]  <!<  {x: ('e37 -> 'e37)}
//│ ╟── while constraining:  'e38  <!<  {x: ('e37 -> 'e37)}
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  {x: ('e37 -> 'e37)}
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  Add['e37]
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  'e37
//│ ╟── while constraining:  'e36  <!<  'e37
//│ ╟── while constraining:  ('e36,)  <!<  ('e37,)
//│ ╟── while constraining:  ('e37 -> 'e37)  <!<  ('e36 -> 'e36)
//│ ╟── while constraining:  {x: ('e37 -> 'e37)}  <!<  {x: ('e36 -> 'e36)}
//│ ╟── while constraining:  Add['e37]  <!<  {x: ('e36 -> 'e36)}
//│ ╟── while constraining:  'e37  <!<  {x: ('e36 -> 'e36)}
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  {x: ('e36 -> 'e36)}
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  Add['e36]
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  'e36
//│ ╟── while constraining:  'e35  <!<  'e36
//│ ╟── while constraining:  ('e35,)  <!<  ('e36,)
//│ ╟── while constraining:  ('e36 -> 'e36)  <!<  ('e35 -> 'e35)
//│ ╟── while constraining:  {x: ('e36 -> 'e36)}  <!<  {x: ('e35 -> 'e35)}
//│ ╟── while constraining:  Add['e36]  <!<  {x: ('e35 -> 'e35)}
//│ ╟── while constraining:  'e36  <!<  {x: ('e35 -> 'e35)}
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  {x: ('e35 -> 'e35)}
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  Add['e35]
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  'e35
//│ ╟── while constraining:  'e34  <!<  'e35
//│ ╟── while constraining:  ('e34,)  <!<  ('e35,)
//│ ╟── while constraining:  ('e35 -> 'e35)  <!<  ('e34 -> 'e34)
//│ ╟── while constraining:  {x: ('e35 -> 'e35)}  <!<  {x: ('e34 -> 'e34)}
//│ ╟── while constraining:  Add['e35]  <!<  {x: ('e34 -> 'e34)}
//│ ╟── while constraining:  'e35  <!<  {x: ('e34 -> 'e34)}
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  {x: ('e34 -> 'e34)}
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  Add['e34]
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  'e34
//│ ╟── while constraining:  'e33  <!<  'e34
//│ ╟── while constraining:  ('e33,)  <!<  ('e34,)
//│ ╟── while constraining:  ('e34 -> 'e34)  <!<  ('e33 -> 'e33)
//│ ╟── while constraining:  {x: ('e34 -> 'e34)}  <!<  {x: ('e33 -> 'e33)}
//│ ╟── while constraining:  Add['e34]  <!<  {x: ('e33 -> 'e33)}
//│ ╟── while constraining:  'e34  <!<  {x: ('e33 -> 'e33)}
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  {x: ('e33 -> 'e33)}
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  Add['e33]
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  'e33
//│ ╟── while constraining:  'e32  <!<  'e33
//│ ╟── while constraining:  ('e32,)  <!<  ('e33,)
//│ ╟── while constraining:  ('e33 -> 'e33)  <!<  ('e32 -> 'e32)
//│ ╟── while constraining:  {x: ('e33 -> 'e33)}  <!<  {x: ('e32 -> 'e32)}
//│ ╟── while constraining:  Add['e33]  <!<  {x: ('e32 -> 'e32)}
//│ ╟── while constraining:  'e33  <!<  {x: ('e32 -> 'e32)}
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  {x: ('e32 -> 'e32)}
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  Add['e32]
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  'e32
//│ ╟── while constraining:  'e31  <!<  'e32
//│ ╟── while constraining:  ('e31,)  <!<  ('e32,)
//│ ╟── while constraining:  ('e32 -> 'e32)  <!<  ('e31 -> 'e31)
//│ ╟── while constraining:  {x: ('e32 -> 'e32)}  <!<  {x: ('e31 -> 'e31)}
//│ ╟── while constraining:  Add['e32]  <!<  {x: ('e31 -> 'e31)}
//│ ╟── while constraining:  'e32  <!<  {x: ('e31 -> 'e31)}
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  {x: ('e31 -> 'e31)}
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  Add['e31]
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  'e31
//│ ╟── while constraining:  'e30  <!<  'e31
//│ ╟── while constraining:  ('e30,)  <!<  ('e31,)
//│ ╟── while constraining:  ('e31 -> 'e31)  <!<  ('e30 -> 'e30)
//│ ╟── while constraining:  {x: ('e31 -> 'e31)}  <!<  {x: ('e30 -> 'e30)}
//│ ╟── while constraining:  Add['e31]  <!<  {x: ('e30 -> 'e30)}
//│ ╟── while constraining:  'e31  <!<  {x: ('e30 -> 'e30)}
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  {x: ('e30 -> 'e30)}
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  Add['e30]
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  'e30
//│ ╟── while constraining:  'e29  <!<  'e30
//│ ╟── while constraining:  ('e29,)  <!<  ('e30,)
//│ ╟── while constraining:  ('e30 -> 'e30)  <!<  ('e29 -> 'e29)
//│ ╟── while constraining:  {x: ('e30 -> 'e30)}  <!<  {x: ('e29 -> 'e29)}
//│ ╟── while constraining:  Add['e30]  <!<  {x: ('e29 -> 'e29)}
//│ ╟── while constraining:  'e30  <!<  {x: ('e29 -> 'e29)}
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  {x: ('e29 -> 'e29)}
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  Add['e29]
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  'e29
//│ ╟── while constraining:  'e28  <!<  'e29
//│ ╟── while constraining:  ('e28,)  <!<  ('e29,)
//│ ╟── while constraining:  ('e29 -> 'e29)  <!<  ('e28 -> 'e28)
//│ ╟── while constraining:  {x: ('e29 -> 'e29)}  <!<  {x: ('e28 -> 'e28)}
//│ ╟── while constraining:  Add['e29]  <!<  {x: ('e28 -> 'e28)}
//│ ╟── while constraining:  'e29  <!<  {x: ('e28 -> 'e28)}
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  {x: ('e28 -> 'e28)}
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  Add['e28]
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  'e28
//│ ╟── while constraining:  'e27  <!<  'e28
//│ ╟── while constraining:  ('e27,)  <!<  ('e28,)
//│ ╟── while constraining:  ('e28 -> 'e28)  <!<  ('e27 -> 'e27)
//│ ╟── while constraining:  {x: ('e28 -> 'e28)}  <!<  {x: ('e27 -> 'e27)}
//│ ╟── while constraining:  Add['e28]  <!<  {x: ('e27 -> 'e27)}
//│ ╟── while constraining:  'e28  <!<  {x: ('e27 -> 'e27)}
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  {x: ('e27 -> 'e27)}
//│ ╟── while constraining:  ‹∀ 0. 'e23'›  <!<  Add['e27]
//│ ╙── while constraining:  ‹∀ 0. 'e23'›  <!<  'e27
//│ res: 'e
//│   where
//│     'e :> forall 'e0. 'e0 | error | Add['e]
//│        <: Add['e] & 'e1
//│     'e1 :> forall 'e0. 'e0 | error | Add['e1]
//│         <: Add['e1] & {x: 'e -> 'e} & 'e2
//│     'e2 :> forall 'e0. 'e0 | error | Add['e2]
//│         <: Add['e2] & {x: 'e1 -> 'e1} & 'e3
//│     'e3 :> forall 'e0. 'e0 | error | Add['e3]
//│         <: Add['e3] & {x: 'e2 -> 'e2} & 'e4
//│     'e4 :> forall 'e0. 'e0 | error | Add['e4]
//│         <: Add['e4] & {x: 'e3 -> 'e3} & 'e5
//│     'e5 :> forall 'e0. 'e0 | error | Add['e5]
//│         <: Add['e5] & {x: 'e4 -> 'e4} & 'e6
//│     'e6 :> forall 'e0. 'e0 | error | Add['e6]
//│         <: Add['e6] & {x: 'e5 -> 'e5} & 'e7
//│     'e7 :> forall 'e0. 'e0 | error | Add['e7]
//│         <: Add['e7] & {x: 'e6 -> 'e6} & 'e8
//│     'e8 :> forall 'e0. 'e0 | error | Add['e8]
//│         <: Add['e8] & {x: 'e7 -> 'e7} & 'e9
//│     'e9 :> forall 'e0. 'e0 | error | Add['e9]
//│         <: Add['e9] & {x: 'e8 -> 'e8} & 'e10
//│     'e10 :> forall 'e0. 'e0 | error | Add['e10]
//│          <: Add['e10] & {x: 'e9 -> 'e9} & 'e11
//│     'e11 :> forall 'e0. 'e0 | error | Add['e11]
//│          <: Add['e11] & {x: 'e10 -> 'e10} & 'e12
//│     'e12 :> forall 'e0. 'e0 | error | Add['e12]
//│          <: Add['e12] & {x: 'e11 -> 'e11} & 'e13
//│     'e13 :> forall 'e0. 'e0 | error | Add['e13]
//│          <: Add['e13] & {x: 'e12 -> 'e12}
//│     'e0 := Add['e0]
//│    = <no result>
//│      e2 is not implemented


def f0: ('a -> int) as 'a
//│ f0: 'a
//│   where
//│     'a := 'a -> int
//│   = <missing implementation>

// :d
// FIXME
f0 = f0
//│ 'a
//│   where
//│     'a := 'a -> int
//│   <:  f0:
//│ 'a
//│   where
//│     'a := 'a -> int
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a. ?a <: forall ?a0. ?a0` exceeded recursion depth limit (400)
//│ ║  l.179: 	f0 = f0
//│ ║         	^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a102'››  <!<  ('a124' -> Int)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a102'››  <!<  'a125'
//│ ╟── while constraining:  'a124'  <!<  'a125'
//│ ╟── while constraining:  ('a124',)  <!<  ('a125',)
//│ ╟── while constraining:  ('a125' -> Int)  <!<  ('a124' -> Int)
//│ ╟── while constraining:  'a125'  <!<  ('a124' -> Int)
//│ ╟── while constraining:  ‹∀ 0. 'a102'›  <!<  ('a124' -> Int)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a102'››  <!<  ('a124' -> Int)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a102'››  <!<  'a124'
//│ ╟── while constraining:  'a123'  <!<  'a124'
//│ ╟── while constraining:  ('a123',)  <!<  ('a124',)
//│ ╟── while constraining:  ('a124' -> Int)  <!<  ('a123' -> Int)
//│ ╟── while constraining:  'a124'  <!<  ('a123' -> Int)
//│ ╟── while constraining:  ‹∀ 0. 'a102'›  <!<  ('a123' -> Int)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a102'››  <!<  ('a123' -> Int)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a102'››  <!<  'a123'
//│ ╟── while constraining:  'a122'  <!<  'a123'
//│ ╟── while constraining:  ('a122',)  <!<  ('a123',)
//│ ╟── while constraining:  ('a123' -> Int)  <!<  ('a122' -> Int)
//│ ╟── while constraining:  'a123'  <!<  ('a122' -> Int)
//│ ╟── while constraining:  ‹∀ 0. 'a102'›  <!<  ('a122' -> Int)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a102'››  <!<  ('a122' -> Int)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a102'››  <!<  'a122'
//│ ╟── while constraining:  'a121'  <!<  'a122'
//│ ╟── while constraining:  ('a121',)  <!<  ('a122',)
//│ ╟── while constraining:  ('a122' -> Int)  <!<  ('a121' -> Int)
//│ ╟── while constraining:  'a122'  <!<  ('a121' -> Int)
//│ ╟── while constraining:  ‹∀ 0. 'a102'›  <!<  ('a121' -> Int)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a102'››  <!<  ('a121' -> Int)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a102'››  <!<  'a121'
//│ ╟── while constraining:  'a120'  <!<  'a121'
//│ ╟── while constraining:  ('a120',)  <!<  ('a121',)
//│ ╟── while constraining:  ('a121' -> Int)  <!<  ('a120' -> Int)
//│ ╟── while constraining:  'a121'  <!<  ('a120' -> Int)
//│ ╟── while constraining:  ‹∀ 0. 'a102'›  <!<  ('a120' -> Int)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a102'››  <!<  ('a120' -> Int)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a102'››  <!<  'a120'
//│ ╟── while constraining:  'a119'  <!<  'a120'
//│ ╟── while constraining:  ('a119',)  <!<  ('a120',)
//│ ╟── while constraining:  ('a120' -> Int)  <!<  ('a119' -> Int)
//│ ╟── while constraining:  'a120'  <!<  ('a119' -> Int)
//│ ╟── while constraining:  ‹∀ 0. 'a102'›  <!<  ('a119' -> Int)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a102'››  <!<  ('a119' -> Int)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a102'››  <!<  'a119'
//│ ╟── while constraining:  'a118'  <!<  'a119'
//│ ╟── while constraining:  ('a118',)  <!<  ('a119',)
//│ ╟── while constraining:  ('a119' -> Int)  <!<  ('a118' -> Int)
//│ ╟── while constraining:  'a119'  <!<  ('a118' -> Int)
//│ ╟── while constraining:  ‹∀ 0. 'a102'›  <!<  ('a118' -> Int)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a102'››  <!<  ('a118' -> Int)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a102'››  <!<  'a118'
//│ ╟── while constraining:  'a117'  <!<  'a118'
//│ ╟── while constraining:  ('a117',)  <!<  ('a118',)
//│ ╟── while constraining:  ('a118' -> Int)  <!<  ('a117' -> Int)
//│ ╟── while constraining:  'a118'  <!<  ('a117' -> Int)
//│ ╟── while constraining:  ‹∀ 0. 'a102'›  <!<  ('a117' -> Int)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a102'››  <!<  ('a117' -> Int)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a102'››  <!<  'a117'
//│ ╟── while constraining:  'a116'  <!<  'a117'
//│ ╟── while constraining:  ('a116',)  <!<  ('a117',)
//│ ╟── while constraining:  ('a117' -> Int)  <!<  ('a116' -> Int)
//│ ╟── while constraining:  'a117'  <!<  ('a116' -> Int)
//│ ╟── while constraining:  ‹∀ 0. 'a102'›  <!<  ('a116' -> Int)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a102'››  <!<  ('a116' -> Int)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a102'››  <!<  'a116'
//│ ╟── while constraining:  'a115'  <!<  'a116'
//│ ╟── while constraining:  ('a115',)  <!<  ('a116',)
//│ ╟── while constraining:  ('a116' -> Int)  <!<  ('a115' -> Int)
//│ ╟── while constraining:  'a116'  <!<  ('a115' -> Int)
//│ ╟── while constraining:  ‹∀ 0. 'a102'›  <!<  ('a115' -> Int)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a102'››  <!<  ('a115' -> Int)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a102'››  <!<  'a115'
//│ ╟── while constraining:  'a114'  <!<  'a115'
//│ ╟── while constraining:  ('a114',)  <!<  ('a115',)
//│ ╟── while constraining:  ('a115' -> Int)  <!<  ('a114' -> Int)
//│ ╟── while constraining:  'a115'  <!<  ('a114' -> Int)
//│ ╟── while constraining:  ‹∀ 0. 'a102'›  <!<  ('a114' -> Int)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a102'››  <!<  ('a114' -> Int)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a102'››  <!<  'a114'
//│ ╟── while constraining:  'a113'  <!<  'a114'
//│ ╟── while constraining:  ('a113',)  <!<  ('a114',)
//│ ╟── while constraining:  ('a114' -> Int)  <!<  ('a113' -> Int)
//│ ╟── while constraining:  'a114'  <!<  ('a113' -> Int)
//│ ╟── while constraining:  ‹∀ 0. 'a102'›  <!<  ('a113' -> Int)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a102'››  <!<  ('a113' -> Int)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a102'››  <!<  'a113'
//│ ╟── while constraining:  'a112'  <!<  'a113'
//│ ╟── while constraining:  ('a112',)  <!<  ('a113',)
//│ ╟── while constraining:  ('a113' -> int<number>)  <!<  ('a112' -> int<number>)
//│ ╟── while constraining:  ('a113' -> Int)  <!<  (‘a' | ('a112' -> Int))
//│ ╟── while constraining:  'a113'  <!<  (‘a' | ('a112' -> Int))
//│ ╟── while constraining:  ‹∀ 0. 'a102'›  <!<  (‘a' | ('a112' -> Int))
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a102'››  <!<  (‘a' | ('a112' -> Int))
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a102'››  <!<  'a112'
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. 'a102'››  <!<  ‹∀ 0. 'a102'›
//│   = <no result>
//│     f0 is not implemented


type F1 = F1 -> int
//│ Defined type alias F1

def f1: F1
//│ f1: F1
//│   = <missing implementation>

f1 = f1
//│ F1
//│   <:  f1:
//│ F1
//│   = <no result>
//│     f1 is not implemented


type F2[A] = F2[A] -> A
//│ Defined type alias F2[=A]

def f1: F2[int]
//│ f1: F2[int]
//│   = <missing implementation>

f1 = f1
//│ F2[int]
//│   <:  f1:
//│ F2[int]
//│   = <no result>
//│     f1 is not implemented


