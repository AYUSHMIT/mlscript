
type Add[E] = { x: E -> E }
//│ Defined type alias Add

def e2: Add['e] as 'e
//│ e2: 'e | {x: ({x: 'a -> 'b} & 'e as 'b) -> 'a} as 'a
//│   = <missing implementation>

// :d
// FIXME
e2 : Add['e] as 'e
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?e. ?e <: ?e0` exceeded recursion depth limit (100)
//│ ║  l.11: 	e2 : Add['e] as 'e
//│ ║        	^^
//│ ╟── while constraining:  ∀ 0. 'e7'  <!<  {x: (('e18,) -> 'e18)}
//│ ╟── while constraining:  ∀ 0. 'e7'  <!<  'e22
//│ ╟── while constraining:  'e18  <!<  'e22
//│ ╟── while constraining:  ('e18,)  <!<  ('e22,)
//│ ╟── while constraining:  (('e22,) -> 'e22)  <!<  (('e18,) -> 'e18)
//│ ╟── while constraining:  {x: (('e22,) -> 'e22)}  <!<  {x: (('e18,) -> 'e18)}
//│ ╟── while constraining:  Add['e22]  <!<  {x: (('e18,) -> 'e18)}
//│ ╟── while constraining:  'e22  <!<  {x: (('e18,) -> 'e18)}
//│ ╟── while constraining:  ∀ 0. 'e7'  <!<  {x: (('e18,) -> 'e18)}
//│ ╟── while constraining:  ∀ 0. 'e7'  <!<  'e21
//│ ╟── while constraining:  'e18  <!<  'e21
//│ ╟── while constraining:  ('e18,)  <!<  ('e21,)
//│ ╟── while constraining:  (('e21,) -> 'e21)  <!<  (('e18,) -> 'e18)
//│ ╟── while constraining:  {x: (('e21,) -> 'e21)}  <!<  {x: (('e18,) -> 'e18)}
//│ ╟── while constraining:  Add['e21]  <!<  {x: (('e18,) -> 'e18)}
//│ ╟── while constraining:  'e21  <!<  {x: (('e18,) -> 'e18)}
//│ ╟── while constraining:  ∀ 0. 'e7'  <!<  {x: (('e18,) -> 'e18)}
//│ ╟── while constraining:  ∀ 0. 'e7'  <!<  'e20
//│ ╟── while constraining:  'e18  <!<  'e20
//│ ╟── while constraining:  ('e18,)  <!<  ('e20,)
//│ ╟── while constraining:  (('e20,) -> 'e20)  <!<  (('e18,) -> 'e18)
//│ ╟── while constraining:  {x: (('e20,) -> 'e20)}  <!<  {x: (('e18,) -> 'e18)}
//│ ╟── while constraining:  Add['e20]  <!<  {x: (('e18,) -> 'e18)}
//│ ╟── while constraining:  'e20  <!<  {x: (('e18,) -> 'e18)}
//│ ╟── while constraining:  ∀ 0. 'e7'  <!<  {x: (('e18,) -> 'e18)}
//│ ╟── while constraining:  ∀ 0. 'e7'  <!<  'e19
//│ ╟── while constraining:  'e18  <!<  'e19
//│ ╟── while constraining:  ('e18,)  <!<  ('e19,)
//│ ╟── while constraining:  (('e19,) -> 'e19)  <!<  (('e18,) -> 'e18)
//│ ╟── while constraining:  {x: (('e19,) -> 'e19)}  <!<  {x: (('e18,) -> 'e18)}
//│ ╟── while constraining:  Add['e19]  <!<  {x: (('e18,) -> 'e18)}
//│ ╟── while constraining:  'e19  <!<  {x: (('e18,) -> 'e18)}
//│ ╟── while constraining:  ∀ 0. 'e7'  <!<  {x: (('e18,) -> 'e18)}
//│ ╟── while constraining:  ∀ 0. 'e7'  <!<  Add['e18]
//│ ╙── while constraining:  ∀ 0. 'e7'  <!<  'e18
//│ res: (forall 'e, 'b. 'e0 | 'e | error | {x: ({x: nothing} & 'e0 & 'e) -> 'a}) as 'a
//│    = <no result>
//│      e2 is not implemented


def f0: ('a -> int) as 'a
//│ f0: 'a | ('b -> int & 'a) -> int as 'b
//│   = <missing implementation>

// :d
// FIXME
f0 = f0
//│ 'a | ('b -> int & 'a) -> int as 'b
//│   <:  f0:
//│ 'a | ('b -> int & 'a) -> int as 'b
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a. ?a <: ?a0` exceeded recursion depth limit (100)
//│ ║  l.61: 	f0 = f0
//│ ║        	^^^^^^^
//│ ╟── while constraining:  ∀ 0. 'a42'  <!<  ('a | (('a61,) -> Int))
//│ ╟── while constraining:  ∀ 0. 'a42'  <!<  'a65
//│ ╟── while constraining:  'a61  <!<  'a65
//│ ╟── while constraining:  ('a61,)  <!<  ('a65,)
//│ ╟── while constraining:  (('a65,) -> Int)  <!<  (('a61,) -> Int)
//│ ╟── while constraining:  (('a65,) -> Int)  <!<  ('a | (('a61,) -> Int))
//│ ╟── while constraining:  'a65  <!<  ('a | (('a61,) -> Int))
//│ ╟── while constraining:  ∀ 0. 'a42'  <!<  ('a | (('a61,) -> Int))
//│ ╟── while constraining:  ∀ 0. 'a42'  <!<  'a64
//│ ╟── while constraining:  'a61  <!<  'a64
//│ ╟── while constraining:  ('a61,)  <!<  ('a64,)
//│ ╟── while constraining:  (('a64,) -> Int)  <!<  (('a61,) -> Int)
//│ ╟── while constraining:  (('a64,) -> Int)  <!<  ('a | (('a61,) -> Int))
//│ ╟── while constraining:  'a64  <!<  ('a | (('a61,) -> Int))
//│ ╟── while constraining:  ∀ 0. 'a42'  <!<  ('a | (('a61,) -> Int))
//│ ╟── while constraining:  ∀ 0. 'a42'  <!<  'a63
//│ ╟── while constraining:  'a61  <!<  'a63
//│ ╟── while constraining:  ('a61,)  <!<  ('a63,)
//│ ╟── while constraining:  (('a63,) -> Int)  <!<  (('a61,) -> Int)
//│ ╟── while constraining:  (('a63,) -> Int)  <!<  ('a | (('a61,) -> Int))
//│ ╟── while constraining:  'a63  <!<  ('a | (('a61,) -> Int))
//│ ╟── while constraining:  ∀ 0. 'a42'  <!<  ('a | (('a61,) -> Int))
//│ ╟── while constraining:  ∀ 0. 'a42'  <!<  'a62
//│ ╟── while constraining:  'a61  <!<  'a62
//│ ╟── while constraining:  ('a61,)  <!<  ('a62,)
//│ ╟── while constraining:  (('a62,) -> Int)  <!<  (('a61,) -> Int)
//│ ╟── while constraining:  (('a62,) -> Int)  <!<  ('a | (('a61,) -> Int))
//│ ╟── while constraining:  'a62  <!<  ('a | (('a61,) -> Int))
//│ ╟── while constraining:  ∀ 0. 'a42'  <!<  ('a | (('a61,) -> Int))
//│ ╙── while constraining:  ∀ 0. 'a42'  <!<  'a61
//│   = <no result>
//│     f0 is not implemented


type F1 = F1 -> int
//│ Defined type alias F1

def f1: F1
//│ f1: ('a -> int) -> int as 'a
//│   = <missing implementation>

f1 = f1
//│ ('a -> int) -> int as 'a
//│   <:  f1:
//│ ('a -> int) -> int as 'a
//│   = <no result>
//│     f1 is not implemented


type F2[A] = F2[A] -> A
//│ Defined type alias F2

def f1: F2[int]
//│ f1: ('a -> int) -> int as 'a
//│   = <missing implementation>

f1 = f1
//│ ('a -> int) -> int as 'a
//│   <:  f1:
//│ ('a -> int) -> int as 'a
//│   = <no result>
//│     f1 is not implemented


