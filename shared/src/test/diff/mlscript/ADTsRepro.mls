
type Add[E] = { x: E -> E }
//│ Defined type alias Add

def e2: Add['e] as 'e
//│ e2: 'e | {x: ({x: 'a -> 'b} & 'e as 'b) -> 'a} as 'a
//│   = <missing implementation>

// FIXME SOF
// :d
e2 : Add['e] as 'e
//│ /!!!\ Uncaught error: java.lang.StackOverflowError


def f0: ('a -> int) as 'a
//│ f0: 'a | ('b -> int & 'a) -> int as 'b
//│   = <missing implementation>

// FIXME SOF
// :d
f0 = f0
//│ 'a | ('b -> int & 'a) -> int as 'b
//│   <:  f0:
//│ 'a | ('b -> int & 'a) -> int as 'b
//│ /!!!\ Uncaught error: java.lang.StackOverflowError


type F1 = F1 -> int
//│ Defined type alias F1

def f1: F1
//│ f1: ('b & ('a -> int,)) -> int as 'a
//│   = <missing implementation>

f1 = f1
//│ ('b & ('a -> int,)) -> int as 'a
//│   <:  f1:
//│ ('b & ('a -> int,)) -> int as 'a
//│   = <no result>
//│     f1 is not implemented


type F2[A] = F2[A] -> A
//│ Defined type alias F2

def f1: F2[int]
//│ f1: ('b & ('a -> int,)) -> int as 'a
//│   = <missing implementation>

f1 = f1
//│ ('b & ('a -> int,)) -> int as 'a
//│   <:  f1:
//│ ('b & ('a -> int,)) -> int as 'a
//│   = <no result>
//│     f1 is not implemented


