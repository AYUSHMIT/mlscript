
// Declare signature:
def f: int -> int
//│ f: int -> int
//│  = <missing implementation>

// Define body:
def f x = x
//│ 'a -> 'a
//│   <:  f:
//│ int -> int
//│  = [Function: f]

:e
def f = 42
//│ 42
//│   <:  f:
//│ int -> int
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.15: 	def f = 42
//│ ║        	^^^^^^^^^^
//│ ╟── integer literal of type `42` is not a function
//│ ║  l.15: 	def f = 42
//│ ║        	        ^^
//│ ╟── Note: constraint arises from function type:
//│ ║  l.3: 	def f: int -> int
//│ ╙──     	       ^^^^^^^^^^
//│  = 42

:re
f 1
//│ res: int
//│ Runtime error:
//│   TypeError: f1 is not a function

fun x -> f x
//│ res: int -> int
//│    = [Function: res]



def boom: anything
//│ boom: anything
//│     = <missing implementation>

def boom = 1
//│ 1
//│   <:  boom:
//│ anything
//│     = 1

:e
add boom 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.53: 	add boom 1
//│ ║        	^^^^^^^^
//│ ╟── type `anything` is not an instance of type `int`
//│ ║  l.42: 	def boom: anything
//│ ║        	          ^^^^^^^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.53: 	add boom 1
//│ ╙──      	    ^^^^
//│ res: error | int
//│    = 2


def boom: nothing
//│ boom: nothing
//│     = <missing implementation>

:e
def boom = 1
//│ 1
//│   <:  boom:
//│ nothing
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.72: 	def boom = 1
//│ ║        	^^^^^^^^^^^^
//│ ╟── integer literal of type `1` does not match type `nothing`
//│ ║  l.72: 	def boom = 1
//│ ║        	           ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.67: 	def boom: nothing
//│ ╙──      	          ^^^^^^^
//│     = 1


def boom: 'a
//│ boom: nothing
//│     = <missing implementation>

:e
def boom = 1
//│ 1
//│   <:  boom:
//│ nothing
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.93: 	def boom = 1
//│ ║        	^^^^^^^^^^^^
//│ ╟── integer literal of type `1` is not an instance of type `'a`
//│ ║  l.93: 	def boom = 1
//│ ║        	           ^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.88: 	def boom: 'a
//│ ╙──      	          ^^
//│     = 1



def id: 'a -> 'a
//│ id: 'a -> 'a
//│   = <missing implementation>

id 1
id true
//│ res: 1
//│    = <no result>
//│      id is not implemented
//│ res: true
//│    = <no result>
//│      id is not implemented

def id x = x
//│ 'a -> 'a
//│   <:  id:
//│ 'a -> 'a
//│   = [Function: id1]

id 1
id true
//│ res: 1
//│    = 1
//│ res: true
//│    = true


:e
def id n = add n 1
//│ int -> int
//│   <:  id:
//│ 'a -> 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.138: 	def id n = add n 1
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a` is not an instance of type `int`
//│ ║  l.110: 	def id: 'a -> 'a
//│ ║         	        ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.138: 	def id n = add n 1
//│ ╙──       	               ^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.138: 	def id n = add n 1
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `int` is not an instance of type `'a`
//│ ║  l.138: 	def id n = add n 1
//│ ║         	           ^^^^^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.110: 	def id: 'a -> 'a
//│ ╙──       	              ^^
//│   = [Function: id2]

:e
def id (x: int) = x
//│ int -> int
//│   <:  id:
//│ 'a -> 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.163: 	def id (x: int) = x
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘a` is not an instance of type `int`
//│ ║  l.110: 	def id: 'a -> 'a
//│ ║         	        ^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.163: 	def id (x: int) = x
//│ ╙──       	           ^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.163: 	def id (x: int) = x
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` is not an instance of type `'a`
//│ ║  l.163: 	def id (x: int) = x
//│ ║         	           ^^^
//│ ╟── but it flows into reference with expected type `‘a`
//│ ║  l.163: 	def id (x: int) = x
//│ ║         	                  ^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.110: 	def id: 'a -> 'a
//│ ╙──       	              ^^
//│   = [Function: id3]



def f: (int & 'a) -> 'a
//│ f: (int & 'a) -> 'a
//│  = <missing implementation>

def impl a = a a
//│ impl: ('a -> 'b & 'a) -> 'b
//│     = [Function: impl]

:e
def f = impl
//│ ('a -> 'b & 'a) -> 'b
//│   <:  f:
//│ (int & 'a) -> 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.201: 	def f = impl
//│ ║         	^^^^^^^^^^^^
//│ ╟── type `int & ‘a` is not a function
//│ ║  l.192: 	def f: (int & 'a) -> 'a
//│ ║         	       ^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.196: 	def impl a = a a
//│ ║         	             ^^^
//│ ╟── from reference:
//│ ║  l.196: 	def impl a = a a
//│ ╙──       	             ^
//│  = [Function: impl]

:re
f 1 
//│ res: 1
//│ Runtime error:
//│   TypeError: a is not a function


def f: (int & 'a) -> (int & 'a) -> 'a 
def f a b = if gt a b then a else b
//│ f: (int & 'a) -> (int & 'a) -> 'a
//│  = <missing implementation>
//│ (int & 'a) -> (int & 'a) -> 'a
//│   <:  f:
//│ (int & 'a) -> (int & 'a) -> 'a
//│  = [Function: f3]

f 1 
//│ res: (int & 'a) -> ('a | 1)
//│    = [Function (anonymous)]

:e
def f a b = if gt a b then a else b b // mistake!
//│ (int & 'a) -> nothing -> 'a
//│   <:  f:
//│ (int & 'a) -> (int & 'a) -> 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.240: 	def f a b = if gt a b then a else b b // mistake!
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int & ‘a` is not a function
//│ ║  l.226: 	def f: (int & 'a) -> (int & 'a) -> 'a 
//│ ║         	                     ^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.240: 	def f a b = if gt a b then a else b b // mistake!
//│ ║         	                                  ^^^
//│ ╟── from reference:
//│ ║  l.240: 	def f a b = if gt a b then a else b b // mistake!
//│ ╙──       	                                  ^
//│  = [Function: f4]

f 1 
//│ res: (int & 'a) -> ('a | 1)
//│    = [Function (anonymous)]

:re
res 2
//│ res: 1 | 2
//│ Runtime error:
//│   TypeError: b is not a function


:e
def g: (int & 'a) -> 'a
def g a = add a 1
//│ g: (int & 'a) -> 'a
//│  = <missing implementation>
//│ int -> int
//│   <:  g:
//│ (int & 'a) -> 'a
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.271: 	def g a = add a 1
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── application of type `int` is not an instance of type `'a`
//│ ║  l.271: 	def g a = add a 1
//│ ║         	          ^^^^^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.270: 	def g: (int & 'a) -> 'a
//│ ╙──       	                     ^^
//│  = [Function: g]



// --- // The Twice Function // --- //


def twice f x = f (f x)
//│ twice: ('a -> 'b & 'c -> 'a) -> 'c -> 'b
//│      = [Function: twice]

def ty1: (('b | 'c) -> 'c) -> 'b -> 'c
def ty2: ('b -> ('b & 'd)) -> 'b -> 'd
//│ ty1: (('b | 'c) -> 'c) -> 'b -> 'c
//│    = <missing implementation>
//│ ty2: ('b -> ('b & 'd)) -> 'b -> 'd
//│    = <missing implementation>

ty1 = ty2
//│ ('b -> ('b & 'd)) -> 'b -> 'd
//│   <:  ty1:
//│ (('b | 'c) -> 'c) -> 'b -> 'c
//│    = <no result>
//│      ty2 is not implemented

ty2 = ty1
//│ (('b | 'c) -> 'c) -> 'b -> 'c
//│   <:  ty2:
//│ ('b -> ('b & 'd)) -> 'b -> 'd
//│    = <no result>
//│      ty1 and ty2 are not implemented

ty1 = twice
ty2 = twice
//│ ('a -> 'b & 'c -> 'a) -> 'c -> 'b
//│   <:  ty1:
//│ (('b | 'c) -> 'c) -> 'b -> 'c
//│    = [Function: twice]
//│ ('a -> 'b & 'c -> 'a) -> 'c -> 'b
//│   <:  ty2:
//│ ('b -> ('b & 'd)) -> 'b -> 'd
//│    = [Function: twice]



// --- // Self Application // --- //


def self1: ('a -> 'b & 'a) -> 'b
//│ self1: ('a -> 'b & 'a) -> 'b
//│      = <missing implementation>

def self1 a = a a
//│ ('a -> 'b & 'a) -> 'b
//│   <:  self1:
//│ ('a -> 'b & 'a) -> 'b
//│      = [Function: self1]

fun a -> a a
//│ res: ('a -> 'b & 'a) -> 'b
//│    = [Function: res]

self1 = res
//│ ('a -> 'b & 'a) -> 'b
//│   <:  self1:
//│ ('a -> 'b & 'a) -> 'b
//│      = [Function: res]

def self2: 'a -> 'b as 'a
//│ self2: 'a
//│   where
//│     'a := 'a -> 'b
//│      = <missing implementation>

:e
def self2 = self1
//│ ('a -> 'b & 'a) -> 'b
//│   <:  self2:
//│ 'a
//│   where
//│     'a := 'a -> 'b
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b. (?a -> ?b & ?a) -> ?b <: ?a0` exceeded recursion depth limit (200)
//│ ║  l.361: 	def self2 = self1
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  ('a420 -> 'b421)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a420 -> 'b421) & 'a420)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a418
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a418 -> 'b419) & 'a418)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a416
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a416 -> 'b417) & 'a416)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a414
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a414 -> 'b415) & 'a414)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a412
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a412 -> 'b413) & 'a412)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a410
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a410 -> 'b411) & 'a410)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a408
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a408 -> 'b409) & 'a408)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a406
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a406 -> 'b407) & 'a406)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a404
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a404 -> 'b405) & 'a404)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a402
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a402 -> 'b403) & 'a402)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a400
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a400 -> 'b401) & 'a400)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a398
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a398 -> 'b399) & 'a398)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a396
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a396 -> 'b397) & 'a396)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a394
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a394 -> 'b395) & 'a394)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a392
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a392 -> 'b393) & 'a392)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a390
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a390 -> 'b391) & 'a390)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a388
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a388 -> 'b389) & 'a388)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a386
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a386 -> 'b387) & 'a386)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a384
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a384 -> 'b385) & 'a384)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a382
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a382 -> 'b383) & 'a382)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a380
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a380 -> 'b381) & 'a380)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a378
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a378 -> 'b379) & 'a378)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a376
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a376 -> 'b377) & 'a376)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a374
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a374 -> 'b375) & 'a374)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a372
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a372 -> 'b373) & 'a372)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a370
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a370 -> 'b371) & 'a370)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a368
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a368 -> 'b369) & 'a368)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a366
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a366 -> 'b367) & 'a366)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a364
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a364 -> 'b365) & 'a364)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a362
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a362 -> 'b363) & 'a362)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a360
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a360 -> 'b361) & 'a360)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a358
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a358 -> 'b359) & 'a358)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a356
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a356 -> 'b357) & 'a356)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a354
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a354 -> 'b355) & 'a354)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a352
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a352 -> 'b353) & 'a352)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a350
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a350 -> 'b351) & 'a350)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a348
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a348 -> 'b349) & 'a348)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a346
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a346 -> 'b347) & 'a346)
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a344
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (('a344 -> 'b345) & 'a344)
//│ ╟── while constraining:  'a343  <!<  (('a344 -> 'b345) & 'a344)
//│ ╟── while constraining:  ('a343,)  <!<  ((('a344 -> 'b345) & 'a344),)
//│ ╟── while constraining:  ((('a344 -> 'b345) & 'a344) -> 'b345)  <!<  ('a343 -> ‘b)
//│ ╟── while constraining:  ((('a344 -> 'b345) & 'a344) -> 'b345)  <!<  (‘a | ('a343 -> ‘b))
//│ ╟── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  (‘a | ('a343 -> ‘b))
//│ ╙── while constraining:  ‹∀ 0. ((('a279' -> 'b280') & 'a279') -> 'b280')›  <!<  'a343
//│      = [Function: res]


fun p -> fun q -> p q p
//│ res: ('a -> 'b -> 'c & 'b) -> 'a -> 'c
//│    = [Function: res]

:ns
fun p -> fun q -> p q p
//│ res: 'a -> 'b -> 'c
//│   where
//│     'a <: 'b -> 'd
//│     'd <: 'a -> 'c
//│    = [Function: res]

