class Left[A]: { value: A }
def Left value = Left{ value }
//│ Defined class Left
//│ Left: 'a -> (left & {Left#A :> 'A | 'a <: 'A, value: 'a})

class Right[A]: { value: A }
def Right value = Right{ value }
//│ Defined class Right
//│ Right: 'a -> (right & {Right#A :> 'A | 'a <: 'A, value: 'a})

def testVal = if true then Left 1 else Right 2
//│ testVal: left & {Left#A :> 'A | 1 <: 'A, value: 1} | right & {Right#A :> 'A0 | 2 <: 'A0, value: 2}

testVal.value
//│ res: 2 | 1

def res = case testVal of
  { Left -> testVal.value
  | Right -> 1
  }
//│ res: 1

res: 1
//│ res: 1

case res of { 1 -> "ok" }
//│ res: "ok"

def res = case testVal of
  { Left -> testVal
  | Right -> 1
  }
//│ res: left & {Left#A :> 'A | 1 <: 'A, value: 1} | 1

