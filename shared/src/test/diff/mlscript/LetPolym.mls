
def test x =
  let local g = g x
  in local succ
//│ test: int -> int
//│     = [Function: test]

test 1
//│ res: int
//│    = 2

:e
test "hi"
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.13: 	test "hi"
//│ ║        	^^^^^^^^^
//│ ╟── string literal of type `"hi"` is not an instance of type `int`
//│ ║  l.13: 	test "hi"
//│ ║        	     ^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.3: 	  let local g = g x
//│ ╙──     	                  ^
//│ res: error
//│    = 'hi1'

def test f =
  let local() = succ (f 1)
  in local()
//│ test: (1 -> int) -> int
//│     = [Function: test1]

test succ
test id
//│ res: int
//│    = 3
//│ res: int
//│    = 2

:e
test (fun x -> false)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.40: 	test (fun x -> false)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^
//│ ╟── reference of type `false` is not an instance of type `int`
//│ ║  l.40: 	test (fun x -> false)
//│ ║        	               ^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.27: 	  let local() = succ (f 1)
//│ ╙──      	                      ^^^
//│ res: error
//│    = 1

:e
test concat
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.54: 	test concat
//│ ║        	^^^^^^^^^^^
//│ ╟── integer literal of type `1` is not an instance of type `string`
//│ ║  l.27: 	  let local() = succ (f 1)
//│ ╙──      	                        ^
//│ res: error
//│    = '(y) => x + y1'

def test f =
  let local g = g f
  in local succ
//│ test: int -> int
//│     = [Function: test2]

def test f =
  let local g = g (f 1)
  in local succ
//│ test: (1 -> int) -> int
//│     = [Function: test3]

:e
test (fun x -> "oops")
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.77: 	test (fun x -> "oops")
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── string literal of type `"oops"` is not an instance of type `int`
//│ ║  l.77: 	test (fun x -> "oops")
//│ ║        	               ^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.71: 	  let local g = g (f 1)
//│ ╙──      	                   ^^^
//│ res: error
//│    = 'oops1'


def test f =
  let local g x = g (f x)
  in local succ
//│ test: ('a -> int) -> 'a -> int
//│     = [Function: test4]

def test f =
  let local g x = g (f x)
  in local add
//│ test: ('a -> int) -> 'a -> int -> int
//│     = [Function: test5]

def test f =
  let local g x = g (f x)
  in local add 1
//│ test: (1 -> int) -> int -> int
//│     = [Function: test6]

def test f =
  let local g x = g (f x)
  in (local add 1, local (fun y -> fun z -> y + z) 2)
//│ test: ((1 | 2) -> int) -> (int -> int, int -> int,)
//│     = [Function: test7]

:re // TODO
f_g = test succ
f_g._1 42
f_g._2 42
//│ f_g: (int -> int, int -> int,)
//│    = [ [Function (anonymous)], [Function (anonymous)] ]
//│ res: int
//│ Runtime error:
//│   TypeError: f_g._1 is not a function
//│ res: int
//│ Runtime error:
//│   TypeError: f_g._2 is not a function


def test f =
  let local g x = g (f x)
  in (local add 1, local concat "ok")
//│ test: (("ok" | 1) -> nothing) -> (int -> int, string -> string,)
//│     = [Function: test8]

:e
test succ
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.136: 	test succ
//│ ║         	^^^^^^^^^
//│ ╟── string literal of type `"ok"` is not an instance of type `int`
//│ ║  l.131: 	  in (local add 1, local concat "ok")
//│ ╙──       	                                ^^^^
//│ res: error
//│    = [ [Function (anonymous)], [Function (anonymous)] ]


def test =
  (fun f ->
    let local g x = f (g x)
    in local
  ) add
//│ test: ('a -> int) -> 'a -> int -> int
//│     = [Function (anonymous)]

def test =
  (fun f -> fun x ->
    let local g = f (g x)
    in local
  ) add "1"
//│ test: ("1" -> int) -> int -> int
//│     = [Function (anonymous)]

def test =
  (fun f -> fun x ->
    let local g = f (g x)
    in local add "1"
  )
//│ test: ((int -> int) -> "1" -> 'a) -> int -> 'a
//│     = [Function: test11]

// :GeneralizeCurriedFunctions

// :d
fun f -> fun x ->
  let local = (fun y -> f y) x
  in ()
//│ res: ('a -> anything) -> 'a -> ()
//│    = [Function: res]

:e
res add "1"
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.181: 	res add "1"
//│ ║         	^^^^^^^^^^^
//│ ╟── string literal of type `"1"` is not an instance of type `int`
//│ ║  l.181: 	res add "1"
//│ ║         	        ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.175: 	  let local = (fun y -> f y) x
//│ ╙──       	                          ^
//│ res: error
//│    = []

fun f -> fun x ->
  let local = f ((fun y -> y) x)
  in ()
//│ res: ('a -> anything) -> 'a -> ()
//│    = [Function: res]

:e
res add "1"
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.201: 	res add "1"
//│ ║         	^^^^^^^^^^^
//│ ╟── string literal of type `"1"` is not an instance of type `int`
//│ ║  l.201: 	res add "1"
//│ ║         	        ^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.195: 	  let local = f ((fun y -> y) x)
//│ ║         	                 ^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.195: 	  let local = f ((fun y -> y) x)
//│ ╙──       	                           ^
//│ res: error
//│    = []

def id: 'a -> 'a
//│ id: 'a -> 'a
//│   = <missing implementation>

fun f -> fun x ->
  let local = f (id x)
  in ()
//│ res: ('a -> anything) -> 'a -> ()
//│    = <no result>
//│      id is not implemented




