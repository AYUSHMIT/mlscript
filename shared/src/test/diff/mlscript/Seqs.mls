
class Seq[A]: { size: int }
//│ Defined class Seq

class ListBase[A]: Seq[A]
//│ Defined class ListBase

class Nil: ListBase[nothing] & {}
class Cons[A]: ListBase[A] & { head: A; tail: List[A] }
type List[A] = Nil | Cons[A]
//│ Defined class Nil
//│ Defined class Cons
//│ Defined type List

:e
Nil{}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.16: 	Nil{}
//│ ║        	^^^^^
//│ ╟── expression of type `anything` does not have field 'size'
//│ ║  l.16: 	Nil{}
//│ ╙──      	   ^^
//│ res: (nil & ListBase[nothing]) | error

def Nil = Nil { size = 0 }
//│ Nil: nil & ListBase[nothing]

// FIXME
Cons 1 Nil
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.29: 	Cons 1 Nil
//│ ║        	^^^^^^
//│ ╟── expression of type `1` does not match type `{head: ?a, size: int, tail: List[?a]}`
//│ ║  l.29: 	Cons 1 Nil
//│ ╙──      	     ^
//│ /!!!\ Uncaught error: scala.MatchError: ({head: α10, size: int, tail: List[α10]},|Some(([[α12]] -> α13))|None) (of class scala.Tuple2)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$5(ConstraintSolver.scala:179)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:17)
//│ 	at: mlscript.ConstraintSolver.annoyingImpl$1(ConstraintSolver.scala:124)
//│ 	at: mlscript.ConstraintSolver.annoying$1(ConstraintSolver.scala:121)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$5(ConstraintSolver.scala:192)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:17)
//│ 	at: mlscript.ConstraintSolver.annoyingImpl$1(ConstraintSolver.scala:124)
//│ 	at: mlscript.ConstraintSolver.annoying$1(ConstraintSolver.scala:121)

// In the old inheritance semantics, this used to be required:
def Cons_old head tail =
  Cons (ListBase (Seq { size = succ tail.size }) with { head; tail })
//│ Cons_old: 'a -> List['a] & {size: int} -> cons & (ListBase['a] & {head: 'a, tail: List['a]})

def Cons head tail =
  Cons { size = succ tail.size; head; tail }
//│ Cons: 'a -> List['a] & {size: int} -> cons & (ListBase['a] & {head: 'a, tail: List['a]})

Nil: ListBase[anything]
//│ res: ListBase[anything]

def c = Cons 1 Nil
//│ c: cons & (ListBase[1] & {head: 1, tail: List[1]})

c: ListBase[int]
//│ res: ListBase[int]

c.head
//│ res: 1

c.tail
//│ res: List[1]

c.size
//│ res: int

def d = Cons 2 c
//│ d: cons & (ListBase[1 | 2] & {head: 1 | 2, tail: List[1 | 2]})

d.head
//│ res: 2 | 1

d.size
//│ res: int

d.tail
//│ res: List[1 | 2]

d.tail.size
//│ res: int

:e
d.tail.head
d.tail.tail
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.91: 	d.tail.head
//│ ║        	^
//│ ╟── expression of type `nil & ListBase[nothing]` does not match type `{head: ?a}`
//│ ║  l.10: 	type List[A] = Nil | Cons[A]
//│ ║        	               ^^^
//│ ╟── but it flows into field selection with expected type `{head: ?a}`
//│ ║  l.91: 	d.tail.head
//│ ╙──      	^
//│ res: 2 | 1 | error
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.92: 	d.tail.tail
//│ ║        	^
//│ ╟── expression of type `nil & ListBase[nothing]` does not match type `{tail: ?a}`
//│ ║  l.10: 	type List[A] = Nil | Cons[A]
//│ ║        	               ^^^
//│ ╟── but it flows into field selection with expected type `{tail: ?a}`
//│ ║  l.92: 	d.tail.tail
//│ ╙──      	^
//│ res: List[1 | 2] | error

