
// TODO clean this afterwards

:GeneralizeCurriedFunctions

type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt

def zero: forall 'a. ('a -> 'a) -> ('a -> 'a)
def zero f = fun x -> x
//│ zero: ('a -> 'a) -> 'a -> 'a
//│     = <missing implementation>
//│ anything -> (forall 'a. 'a -> 'a)
//│   <:  zero:
//│ ('a -> 'a) -> 'a -> 'a
//│     = [Function: zero]

def id: forall 'a. 'a -> 'a
//│ id: 'a -> 'a
//│   = <missing implementation>

def id x = x
//│ 'a -> 'a
//│   <:  id:
//│ 'a -> 'a
//│   = [Function: id1]


rec def foo x y =
  let tmp = foo x y in (x, y,)
//│ foo: 'a -> 'b -> ('a, 'b,)
//│    = [Function: foo]

// rec def foo x y z =
//   let tmp = foo x y z in (x, y, z)

// :d
foo
//│ res: 'a -> 'b -> ('a, 'b,)
//│    = [Function: foo]

def foo_ty: 'a -> (forall 'b. 'b -> ('a, 'b,))
//│ foo_ty: 'a -> (forall 'b. 'b -> ('a, 'b,))
//│       = <missing implementation>

// def foo_ty: 'a -> (forall 'b. 'b -> (forall 'c. 'c -> ('a, 'b, 'c,)))

// :d
:e // skolem extrusion?
foo_ty = foo
//│ 'a -> 'b -> ('a, 'b,)
//│   <:  foo_ty:
//│ 'a -> (forall 'b. 'b -> ('a, 'b,))
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.50: 	foo_ty = foo
//│ ║        	^^^^^^^^^^^^
//│ ╟── type `‘b_110_111` is not an instance of type `'b_110_112`
//│ ║  l.42: 	def foo_ty: 'a -> (forall 'b. 'b -> ('a, 'b,))
//│ ║        	                          ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.42: 	def foo_ty: 'a -> (forall 'b. 'b -> ('a, 'b,))
//│ ╙──      	                          ^^
//│       = [Function: foo]


// :d
// rec def r x = let tmp = x in x

// :d
// :ds
// rec def x = x


// rec def lr1 = { head = 0; tail = lr1 }

// // class Cons[A]: List[A] & { head: A; tail: List[A] }
// class Cons: { tail: anything }

// :ds
// rec def lr1 = Cons { tail = lr1 }

