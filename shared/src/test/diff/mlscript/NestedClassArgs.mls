:NoJS
// :NoProvs


class C[A]
  method In: A -> A
  method In = id
//│ Defined class C[=A]
//│ Declared C.In: C['A] -> 'A -> 'A
//│ Defined C.In: C['A] -> (forall 'a. 'a -> 'a)

def c: C[C[int]]
//│ c: C[C[int]]

def c: 'a -> C[C['a]]
//│ c: 'a -> C[C['a]]

def c: C[C['a]] -> 'a
//│ c: C[C['a]] -> 'a

def c: C['a] as 'a
//│ c: 'a
//│   where
//│     'a := C['a]

def c: C['a] | 'a as 'a
//│ c: 'a
//│   where
//│     'a :> C['a]

def c: C[C['a]] as 'a
//│ c: 'a
//│   where
//│     'a := C[C['a]]

def c: C[C['a] & 'a] as 'a
//│ c: 'a
//│   where
//│     'a := C[C['a] & 'a]

def c: C[C['a] & 'a | 'a] as 'a
//│ c: 'a
//│   where
//│     'a := C['a]

def c: C['a]
//│ c: C['a]


class C2[A]: { a: A }
  method In: A -> A
  method In = id
//│ Defined class C2[=A]
//│ Declared C2.In: C2['A] -> 'A -> 'A
//│ Defined C2.In: C2['A] -> (forall 'a. 'a -> 'a)


def mkC: 'a -> C2['a]
//│ mkC: 'a -> C2['a]

mkC' a = C2 { a }
//│ mkC': ('a & 'A) -> (C2['A] with {a: 'a})

mkC = mkC'
//│ ('a & 'A) -> (C2['A] with {a: 'a})
//│   <:  mkC:
//│ 'a -> C2['a]

rec def rc = mkC(rc)
//│ rc: 'rc
//│   where
//│     'rc :> C2['a]
//│     'a :> 'rc

rec def rc = mkC'(rc)
//│ rc: 'a
//│   where
//│     'a :> C2['A] with {a: 'a}
//│     'A :> 'a



class C3[A]: { a: C3[A] }
  method In: A -> A
  method In = id
//│ Defined class C3[=A]
//│ Declared C3.In: C3['A] -> 'A -> 'A
//│ Defined C3.In: C3['A] -> (forall 'a. 'a -> 'a)

def c: 'a -> C3['a]
//│ c: 'a -> C3['a]

rec def c a = C3 { a = c a }
//│ anything -> 'a
//│   where
//│     'a :> C3['A] with {a: 'a}
//│   <:  c:
//│ 'a -> C3['a]

rec def c (a: 'X) = C3 { a = c a: 'X }: C3['X]
//│ anything -> C3['X]
//│   <:  c:
//│ 'a -> C3['a]


class C4[A]: { a: C[C4[A]] }
  method In: A -> A
  method In = id
//│ Defined class C4[=A]
//│ Declared C4.In: C4['A] -> 'A -> 'A
//│ Defined C4.In: C4['A] -> (forall 'a. 'a -> 'a)

def c: 'a -> C4['a]
//│ c: 'a -> C4['a]

C{}
//│ res: C['A]

def c4 a = C4{ a = C{} }
//│ c4: anything -> C4['A]

def c = c4
//│ anything -> C4['A]
//│   <:  c:
//│ 'a -> C4['a]


class C5[A]: { a: C2[C5[A]] }
  method In: A -> A
  method In = id
//│ Defined class C5[=A]
//│ Declared C5.In: C5['A] -> 'A -> 'A
//│ Defined C5.In: C5['A] -> (forall 'a. 'a -> 'a)

def c: 'a -> C5['a]
//│ c: 'a -> C5['a]

rec def c5 a = C5{ a = C2 { a = c5 a } }
//│ c5: anything -> 'a
//│   where
//│     'a :> C5['A] with {a: C2['A0] with {a: 'a}}
//│     'A0 :> 'a | C5['A]
//│         <: C5['A]

c = c5
//│ anything -> 'a
//│   where
//│     'a :> C5['A] with {a: C2['A0] with {a: 'a}}
//│     'A0 :> 'a | C5['A]
//│         <: C5['A]
//│   <:  c:
//│ 'a -> C5['a]


class C6[A]: { a: C5[C6[A]] }
  method In: A -> A
  method In = id
//│ Defined class C6[=A]
//│ Declared C6.In: C6['A] -> 'A -> 'A
//│ Defined C6.In: C6['A] -> (forall 'a. 'a -> 'a)

def c: 'a -> C6['a]
//│ c: 'a -> C6['a]

rec def c6 a = C6{ a = c5 (c6 a) }
//│ c6: anything -> (C6['A] with {a: 'a})
//│   where
//│     'a :> C5[C6['A]] with {a: C2['A0] with {a: 'a}}
//│     'A0 :> 'a | C5[C6['A]]
//│         <: C5[C6['A]]

:stats
c = c6
//│ anything -> (C6['A] with {a: 'a})
//│   where
//│     'a :> C5[C6['A]] with {a: C2['A0] with {a: 'a}}
//│     'A0 :> 'a | C5[C6['A]]
//│         <: C5[C6['A]]
//│   <:  c:
//│ 'a -> C6['a]
//│ constrain calls  : 89
//│ annoying  calls  : 25
//│ subtyping calls  : 177


// Reproduction of an issue found while trying out TypeRef ctor typing:

def e: C5[C6['A]] | C5[C6['A]] & ~c5 | C5[C6['A]] | C5[C6['A]] & ~{a: C2[C5[C6['A]]]}
//│ e: C5[C6['A]]

def e: C5[C6['A]] & {a: C2[C5[C6['A]] | C5[C6['A]] & ~c5 | C5[C6['A]] | C5[C6['A]] & ~{a: C2[C5[C6['A]]]}] & {a: 'a}}
//│ e: C5[C6['A]] & {a: C2[C5[C6['A]]] & {a: nothing}}

type Inner = C5[C6['A]] & {a: C2[C5[C6['A]] | C5[C6['A]] & ~c5 | C5[C6['A]] | C5[C6['A]] & ~{a: C2[C5[C6['A]]]}] & {a: 'a}} as 'a
//│ Defined type alias Inner

def e: anything -> (C6['A] & {a: Inner})
//│ e: anything -> (C6['A] with {a: Inner})

// * The problem seems to come from Inner defining type variables, which are given level 0...
// *  This is actually the expected behavior of type vars in type aliases,
// *  but it's really weird and fishy so it should probably be rejected.
// :e // no longer an error...(?)
// :e // Fails with polymorphic RHS extrusion
c = e
//│ anything -> (C6['A] with {a: Inner})
//│   <:  c:
//│ 'a -> C6['a]
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?A. anything -> (C6[?A] with {a: Inner}) <: forall ?a. ?a -> C6[?a]` exceeded recursion depth limit (300)
//│ ║  l.205: 	c = e
//│ ║         	^^^^^
//│ ╟── while constraining:  ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((‘a_453 & ~(‘a_470)) & ~(‘a_497)) & ~(‘a_487)) & ~(‘a_504)) & ~(‘a_463)) & ~(‘a_508)) & ~(‘a_491)) & ~(‘a_475)) & ~(‘a_499)) & ~(‘a_480)) & ~(‘a_501)) & ~(‘a_493)) & ~(‘a_476)) & ~(‘a_498)) & ~(‘a_464)) & ~(‘a_490)) & ~(‘a_496)) & ~(‘a_505)) & ~(‘a_479)) & ~(‘a_457)) & ~(‘a_465)) & ~(‘a_458)) & ~(‘a_500)) & ~(‘a_492)) & ~(‘a_506)) & ~(‘a_503)) & ~(‘a_509)) & ~(‘a_459)) & ~(‘a_485)) & ~(‘a_502)) & ~(‘a_472)) & ~(‘a_488)) & ~(‘a_489)) & ~(‘a_477)) & ~(‘a_486)) & ~(‘a_483)) & ~(‘a_474)) & ~(‘a_481)) & ~(‘a_462)) & ~(‘a_460)) & ~(‘a_484)) & ~(‘a_482)) & ~(‘a_510)) & ~(‘a_507)) & ~(‘a_468)) & ~(‘a_478)) & ~(‘a_467)) & ~(‘a_461)) & ~(‘a_494)) & ~(‘a_469)) & ~(‘a_511)) & ~(‘a_471)) & ~(‘a_495)) & ~(‘a_473)) & ~(‘a_512)) & ~(‘a_466)) & ~(‘a_513)) & ~(‘a_514))  <!<  ('A413 & 'A442)
//│ ╟── while constraining:  ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((‘a_453 & ~(‘a_470)) & ~(‘a_497)) & ~(‘a_487)) & ~(‘a_504)) & ~(‘a_463)) & ~(‘a_508)) & ~(‘a_491)) & ~(‘a_475)) & ~(‘a_499)) & ~(‘a_480)) & ~(‘a_501)) & ~(‘a_493)) & ~(‘a_476)) & ~(‘a_498)) & ~(‘a_464)) & ~(‘a_490)) & ~(‘a_496)) & ~(‘a_505)) & ~(‘a_479)) & ~(‘a_457)) & ~(‘a_465)) & ~(‘a_458)) & ~(‘a_500)) & ~(‘a_492)) & ~(‘a_506)) & ~(‘a_503)) & ~(‘a_509)) & ~(‘a_459)) & ~(‘a_485)) & ~(‘a_502)) & ~(‘a_472)) & ~(‘a_488)) & ~(‘a_489)) & ~(‘a_477)) & ~(‘a_486)) & ~(‘a_483)) & ~(‘a_474)) & ~(‘a_481)) & ~(‘a_462)) & ~(‘a_460)) & ~(‘a_484)) & ~(‘a_482)) & ~(‘a_510)) & ~(‘a_507)) & ~(‘a_468)) & ~(‘a_478)) & ~(‘a_467)) & ~(‘a_461)) & ~(‘a_494)) & ~(‘a_469)) & ~(‘a_511)) & ~(‘a_471)) & ~(‘a_495)) & ~(‘a_473)) & ~(‘a_512)) & ~(‘a_466)) & ~(‘a_513)) & ~(‘a_514))  <!<  'A413
//│ ╟── while constraining:  ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((‘a_453 & ~(‘a_470)) & ~(‘a_497)) & ~(‘a_487)) & ~(‘a_504)) & ~(‘a_463)) & ~(‘a_508)) & ~(‘a_491)) & ~(‘a_475)) & ~(‘a_499)) & ~(‘a_480)) & ~(‘a_501)) & ~(‘a_493)) & ~(‘a_476)) & ~(‘a_498)) & ~(‘a_464)) & ~(‘a_490)) & ~(‘a_496)) & ~(‘a_505)) & ~(‘a_479)) & ~(‘a_457)) & ~(‘a_465)) & ~(‘a_458)) & ~(‘a_500)) & ~(‘a_492)) & ~(‘a_506)) & ~(‘a_503)) & ~(‘a_509)) & ~(‘a_459)) & ~(‘a_485)) & ~(‘a_502)) & ~(‘a_472)) & ~(‘a_488)) & ~(‘a_489)) & ~(‘a_477)) & ~(‘a_486)) & ~(‘a_483)) & ~(‘a_474)) & ~(‘a_481)) & ~(‘a_462)) & ~(‘a_460)) & ~(‘a_484)) & ~(‘a_482)) & ~(‘a_510)) & ~(‘a_507)) & ~(‘a_468)) & ~(‘a_478)) & ~(‘a_467)) & ~(‘a_461)) & ~(‘a_494)) & ~(‘a_469)) & ~(‘a_511)) & ~(‘a_471)) & ~(‘a_495)) & ~(‘a_473)) & ~(‘a_512)) & ~(‘a_466)) & ~(‘a_513)) & ~(‘a'))  <!<  'A413
//│ ╟── while constraining:  (((((((((((((((((((((((((((((((((((((((((((((((((((((((((‘a_453 & ~(‘a_466)) & ~(‘a_473)) & ~(‘a_471)) & ~(‘a_469)) & ~(‘a_461)) & ~(‘a_478)) & ~(‘a_507)) & ~(‘a_482)) & ~(‘a_460)) & ~(‘a_481)) & ~(‘a_483)) & ~(‘a_477)) & ~(‘a_488)) & ~(‘a_502)) & ~(‘a_459)) & ~(‘a_503)) & ~(‘a_492)) & ~(‘a_458)) & ~(‘a_457)) & ~(‘a_505)) & ~(‘a_490)) & ~(‘a_498)) & ~(‘a_493)) & ~(‘a_480)) & ~(‘a_475)) & ~(‘a_508)) & ~(‘a_504)) & ~(‘a_497)) & ~(‘a_470)) & ~(‘a_487)) & ~(‘a_463)) & ~(‘a_491)) & ~(‘a_499)) & ~(‘a_501)) & ~(‘a_476)) & ~(‘a_464)) & ~(‘a_496)) & ~(‘a_479)) & ~(‘a_465)) & ~(‘a_500)) & ~(‘a_506)) & ~(‘a_509)) & ~(‘a_485)) & ~(‘a_472)) & ~(‘a_489)) & ~(‘a_486)) & ~(‘a_474)) & ~(‘a_462)) & ~(‘a_484)) & ~(‘a_510)) & ~(‘a_468)) & ~(‘a_467)) & ~(‘a_494)) & ~(‘a_511)) & ~(‘a_495)) & ~(‘a_512)) & ~(‘a_513))  <!<  ‹∀ 0. ((('a456' | 'A413) | ~(‘a_453)) | ~((‘a_453 & ~('A413))))›
//│ ╟── while constraining:  (((((((((((((((((((((((((((((((((((((((((((((((((((((((((‘a_453 & ~(‘a_466)) & ~(‘a_473)) & ~(‘a_471)) & ~(‘a_469)) & ~(‘a_461)) & ~(‘a_478)) & ~(‘a_507)) & ~(‘a_482)) & ~(‘a_460)) & ~(‘a_481)) & ~(‘a_483)) & ~(‘a_477)) & ~(‘a_488)) & ~(‘a_502)) & ~(‘a_459)) & ~(‘a_503)) & ~(‘a_492)) & ~(‘a_458)) & ~(‘a_457)) & ~(‘a_505)) & ~(‘a_490)) & ~(‘a_498)) & ~(‘a_493)) & ~(‘a_480)) & ~(‘a_475)) & ~(‘a_508)) & ~(‘a_504)) & ~(‘a_497)) & ~(‘a_470)) & ~(‘a_487)) & ~(‘a_463)) & ~(‘a_491)) & ~(‘a_499)) & ~(‘a_501)) & ~(‘a_476)) & ~(‘a_464)) & ~(‘a_496)) & ~(‘a_479)) & ~(‘a_465)) & ~(‘a_500)) & ~(‘a_506)) & ~(‘a_509)) & ~(‘a_485)) & ~(‘a_472)) & ~(‘a_489)) & ~(‘a_486)) & ~(‘a_474)) & ~(‘a_462)) & ~(‘a_484)) & ~(‘a_510)) & ~(‘a_468)) & ~(‘a_467)) & ~(‘a_494)) & ~(‘a_511)) & ~(‘a_495)) & ~(‘a_512)) & ~(‘a_513))  <!<  'A442
//│ ╟── while constraining:  (((((((((((((((((((((((((((((((((((((((((((((((((((((((((‘a_453 & ~(‘a_466)) & ~(‘a_473)) & ~(‘a_471)) & ~(‘a_469)) & ~(‘a_461)) & ~(‘a_478)) & ~(‘a_507)) & ~(‘a_482)) & ~(‘a_460)) & ~(‘a_481)) & ~(‘a_483)) & ~(‘a_477)) & ~(‘a_488)) & ~(‘a_502)) & ~(‘a_459)) & ~(‘a_503)) & ~(‘a_492)) & ~(‘a_458)) & ~(‘a_457)) & ~(‘a_505)) & ~(‘a_490)) & ~(‘a_498)) & ~(‘a_493)) & ~(‘a_480)) & ~(‘a_475)) & ~(‘a_508)) & ~(‘a_504)) & ~(‘a_497)) & ~(‘a_470)) & ~(‘a_487)) & ~(‘a_463)) & ~(‘a_491)) & ~(‘a_499)) & ~(‘a_501)) & ~(‘a_476)) & ~(‘a_464)) & ~(‘a_496)) & ~(‘a_479)) & ~(‘a_465)) & ~(‘a_500)) & ~(‘a_506)) & ~(‘a_509)) & ~(‘a_485)) & ~(‘a_472)) & ~(‘a_489)) & ~(‘a_486)) & ~(‘a_474)) & ~(‘a_462)) & ~(‘a_484)) & ~(‘a_510)) & ~(‘a_468)) & ~(‘a_467)) & ~(‘a_494)) & ~(‘a_511)) & ~(‘a_495)) & ~(‘a_512)) & ~(‘a_513))  <!<  ('A413 & 'A442)
//│ ╟── while constraining:  (((((((((((((((((((((((((((((((((((((((((((((((((((((((((‘a_453 & ~(‘a_466)) & ~(‘a_473)) & ~(‘a_471)) & ~(‘a_469)) & ~(‘a_461)) & ~(‘a_478)) & ~(‘a_507)) & ~(‘a_482)) & ~(‘a_460)) & ~(‘a_481)) & ~(‘a_483)) & ~(‘a_477)) & ~(‘a_488)) & ~(‘a_502)) & ~(‘a_459)) & ~(‘a_503)) & ~(‘a_492)) & ~(‘a_458)) & ~(‘a_457)) & ~(‘a_505)) & ~(‘a_490)) & ~(‘a_498)) & ~(‘a_493)) & ~(‘a_480)) & ~(‘a_475)) & ~(‘a_508)) & ~(‘a_504)) & ~(‘a_497)) & ~(‘a_470)) & ~(‘a_487)) & ~(‘a_463)) & ~(‘a_491)) & ~(‘a_499)) & ~(‘a_501)) & ~(‘a_476)) & ~(‘a_464)) & ~(‘a_496)) & ~(‘a_479)) & ~(‘a_465)) & ~(‘a_500)) & ~(‘a_506)) & ~(‘a_509)) & ~(‘a_485)) & ~(‘a_472)) & ~(‘a_489)) & ~(‘a_486)) & ~(‘a_474)) & ~(‘a_462)) & ~(‘a_484)) & ~(‘a_510)) & ~(‘a_468)) & ~(‘a_467)) & ~(‘a_494)) & ~(‘a_511)) & ~(‘a_495)) & ~(‘a_512)) & ~(‘a_513))  <!<  'A413
//│ ╟── while constraining:  (((((((((((((((((((((((((((((((((((((((((((((((((((((((((‘a_453 & ~(‘a_466)) & ~(‘a_473)) & ~(‘a_471)) & ~(‘a_469)) & ~(‘a_461)) & ~(‘a_478)) & ~(‘a_507)) & ~(‘a_482)) & ~(‘a_460)) & ~(‘a_481)) & ~(‘a_483)) & ~(‘a_477)) & ~(‘a_488)) & ~(‘a_502)) & ~(‘a_459)) & ~(‘a_503)) & ~(‘a_492)) & ~(‘a_458)) & ~(‘a_457)) & ~(‘a_505)) & ~(‘a_490)) & ~(‘a_498)) & ~(‘a_493)) & ~(‘a_480)) & ~(‘a_475)) & ~(‘a_508)) & ~(‘a_504)) & ~(‘a_497)) & ~(‘a_470)) & ~(‘a_487)) & ~(‘a_463)) & ~(‘a_491)) & ~(‘a_499)) & ~(‘a_501)) & ~(‘a_476)) & ~(‘a_464)) & ~(‘a_496)) & ~(‘a_479)) & ~(‘a_465)) & ~(‘a_500)) & ~(‘a_506)) & ~(‘a_509)) & ~(‘a_485)) & ~(‘a_472)) & ~(‘a_489)) & ~(‘a_486)) & ~(‘a_474)) & ~(‘a_462)) & ~(‘a_484)) & ~(‘a_510)) & ~(‘a_468)) & ~(‘a_467)) & ~(‘a_494)) & ~(‘a_511)) & ~(‘a_495)) & ~(‘a_512)) & ~(‘a'))  <!<  'A413
//│ ╟── while constraining:  ((((((((((((((((((((((((((((((((((((((((((((((((((((((((‘a_453 & ~(‘a_495)) & ~(‘a_494)) & ~(‘a_468)) & ~(‘a_484)) & ~(‘a_474)) & ~(‘a_489)) & ~(‘a_485)) & ~(‘a_506)) & ~(‘a_465)) & ~(‘a_496)) & ~(‘a_476)) & ~(‘a_499)) & ~(‘a_463)) & ~(‘a_470)) & ~(‘a_504)) & ~(‘a_475)) & ~(‘a_493)) & ~(‘a_490)) & ~(‘a_457)) & ~(‘a_492)) & ~(‘a_459)) & ~(‘a_488)) & ~(‘a_483)) & ~(‘a_460)) & ~(‘a_507)) & ~(‘a_461)) & ~(‘a_471)) & ~(‘a_466)) & ~(‘a_473)) & ~(‘a_469)) & ~(‘a_478)) & ~(‘a_482)) & ~(‘a_481)) & ~(‘a_477)) & ~(‘a_502)) & ~(‘a_503)) & ~(‘a_458)) & ~(‘a_505)) & ~(‘a_498)) & ~(‘a_480)) & ~(‘a_508)) & ~(‘a_497)) & ~(‘a_487)) & ~(‘a_491)) & ~(‘a_501)) & ~(‘a_464)) & ~(‘a_479)) & ~(‘a_500)) & ~(‘a_509)) & ~(‘a_472)) & ~(‘a_486)) & ~(‘a_462)) & ~(‘a_510)) & ~(‘a_467)) & ~(‘a_511)) & ~(‘a_512))  <!<  ‹∀ 0. ((('a456' | 'A413) | ~(‘a_453)) | ~((‘a_453 & ~('A413))))›
//│ ╟── while constraining:  ((((((((((((((((((((((((((((((((((((((((((((((((((((((((‘a_453 & ~(‘a_495)) & ~(‘a_494)) & ~(‘a_468)) & ~(‘a_484)) & ~(‘a_474)) & ~(‘a_489)) & ~(‘a_485)) & ~(‘a_506)) & ~(‘a_465)) & ~(‘a_496)) & ~(‘a_476)) & ~(‘a_499)) & ~(‘a_463)) & ~(‘a_470)) & ~(‘a_504)) & ~(‘a_475)) & ~(‘a_493)) & ~(‘a_490)) & ~(‘a_457)) & ~(‘a_492)) & ~(‘a_459)) & ~(‘a_488)) & ~(‘a_483)) & ~(‘a_460)) & ~(‘a_507)) & ~(‘a_461)) & ~(‘a_471)) & ~(‘a_466)) & ~(‘a_473)) & ~(‘a_469)) & ~(‘a_478)) & ~(‘a_482)) & ~(‘a_481)) & ~(‘a_477)) & ~(‘a_502)) & ~(‘a_503)) & ~(‘a_458)) & ~(‘a_505)) & ~(‘a_498)) & ~(‘a_480)) & ~(‘a_508)) & ~(‘a_497)) & ~(‘a_487)) & ~(‘a_491)) & ~(‘a_501)) & ~(‘a_464)) & ~(‘a_479)) & ~(‘a_500)) & ~(‘a_509)) & ~(‘a_472)) & ~(‘a_486)) & ~(‘a_462)) & ~(‘a_510)) & ~(‘a_467)) & ~(‘a_511)) & ~(‘a_512))  <!<  'A442
//│ ╟── while constraining:  ((((((((((((((((((((((((((((((((((((((((((((((((((((((((‘a_453 & ~(‘a_495)) & ~(‘a_494)) & ~(‘a_468)) & ~(‘a_484)) & ~(‘a_474)) & ~(‘a_489)) & ~(‘a_485)) & ~(‘a_506)) & ~(‘a_465)) & ~(‘a_496)) & ~(‘a_476)) & ~(‘a_499)) & ~(‘a_463)) & ~(‘a_470)) & ~(‘a_504)) & ~(‘a_475)) & ~(‘a_493)) & ~(‘a_490)) & ~(‘a_457)) & ~(‘a_492)) & ~(‘a_459)) & ~(‘a_488)) & ~(‘a_483)) & ~(‘a_460)) & ~(‘a_507)) & ~(‘a_461)) & ~(‘a_471)) & ~(‘a_466)) & ~(‘a_473)) & ~(‘a_469)) & ~(‘a_478)) & ~(‘a_482)) & ~(‘a_481)) & ~(‘a_477)) & ~(‘a_502)) & ~(‘a_503)) & ~(‘a_458)) & ~(‘a_505)) & ~(‘a_498)) & ~(‘a_480)) & ~(‘a_508)) & ~(‘a_497)) & ~(‘a_487)) & ~(‘a_491)) & ~(‘a_501)) & ~(‘a_464)) & ~(‘a_479)) & ~(‘a_500)) & ~(‘a_509)) & ~(‘a_472)) & ~(‘a_486)) & ~(‘a_462)) & ~(‘a_510)) & ~(‘a_467)) & ~(‘a_511)) & ~(‘a_512))  <!<  ('A413 & 'A442)
//│ ╟── while constraining:  ((((((((((((((((((((((((((((((((((((((((((((((((((((((((‘a_453 & ~(‘a_495)) & ~(‘a_494)) & ~(‘a_468)) & ~(‘a_484)) & ~(‘a_474)) & ~(‘a_489)) & ~(‘a_485)) & ~(‘a_506)) & ~(‘a_465)) & ~(‘a_496)) & ~(‘a_476)) & ~(‘a_499)) & ~(‘a_463)) & ~(‘a_470)) & ~(‘a_504)) & ~(‘a_475)) & ~(‘a_493)) & ~(‘a_490)) & ~(‘a_457)) & ~(‘a_492)) & ~(‘a_459)) & ~(‘a_488)) & ~(‘a_483)) & ~(‘a_460)) & ~(‘a_507)) & ~(‘a_461)) & ~(‘a_471)) & ~(‘a_466)) & ~(‘a_473)) & ~(‘a_469)) & ~(‘a_478)) & ~(‘a_482)) & ~(‘a_481)) & ~(‘a_477)) & ~(‘a_502)) & ~(‘a_503)) & ~(‘a_458)) & ~(‘a_505)) & ~(‘a_498)) & ~(‘a_480)) & ~(‘a_508)) & ~(‘a_497)) & ~(‘a_487)) & ~(‘a_491)) & ~(‘a_501)) & ~(‘a_464)) & ~(‘a_479)) & ~(‘a_500)) & ~(‘a_509)) & ~(‘a_472)) & ~(‘a_486)) & ~(‘a_462)) & ~(‘a_510)) & ~(‘a_467)) & ~(‘a_511)) & ~(‘a_512))  <!<  'A413
//│ ╟── while constraining:  ((((((((((((((((((((((((((((((((((((((((((((((((((((((((‘a_453 & ~(‘a_495)) & ~(‘a_494)) & ~(‘a_468)) & ~(‘a_484)) & ~(‘a_474)) & ~(‘a_489)) & ~(‘a_485)) & ~(‘a_506)) & ~(‘a_465)) & ~(‘a_496)) & ~(‘a_476)) & ~(‘a_499)) & ~(‘a_463)) & ~(‘a_470)) & ~(‘a_504)) & ~(‘a_475)) & ~(‘a_493)) & ~(‘a_490)) & ~(‘a_457)) & ~(‘a_492)) & ~(‘a_459)) & ~(‘a_488)) & ~(‘a_483)) & ~(‘a_460)) & ~(‘a_507)) & ~(‘a_461)) & ~(‘a_471)) & ~(‘a_466)) & ~(‘a_473)) & ~(‘a_469)) & ~(‘a_478)) & ~(‘a_482)) & ~(‘a_481)) & ~(‘a_477)) & ~(‘a_502)) & ~(‘a_503)) & ~(‘a_458)) & ~(‘a_505)) & ~(‘a_498)) & ~(‘a_480)) & ~(‘a_508)) & ~(‘a_497)) & ~(‘a_487)) & ~(‘a_491)) & ~(‘a_501)) & ~(‘a_464)) & ~(‘a_479)) & ~(‘a_500)) & ~(‘a_509)) & ~(‘a_472)) & ~(‘a_486)) & ~(‘a_462)) & ~(‘a_510)) & ~(‘a_467)) & ~(‘a_511)) & ~(‘a'))  <!<  'A413
//│ ╟── while constraining:  (((((((((((((((((((((((((((((((((((((((((((((((((((((((‘a_453 & ~(‘a_467)) & ~(‘a_462)) & ~(‘a_472)) & ~(‘a_500)) & ~(‘a_464)) & ~(‘a_491)) & ~(‘a_497)) & ~(‘a_480)) & ~(‘a_505)) & ~(‘a_503)) & ~(‘a_477)) & ~(‘a_482)) & ~(‘a_469)) & ~(‘a_466)) & ~(‘a_461)) & ~(‘a_460)) & ~(‘a_488)) & ~(‘a_492)) & ~(‘a_490)) & ~(‘a_475)) & ~(‘a_470)) & ~(‘a_499)) & ~(‘a_496)) & ~(‘a_506)) & ~(‘a_489)) & ~(‘a_484)) & ~(‘a_494)) & ~(‘a_495)) & ~(‘a_468)) & ~(‘a_474)) & ~(‘a_485)) & ~(‘a_465)) & ~(‘a_476)) & ~(‘a_463)) & ~(‘a_504)) & ~(‘a_493)) & ~(‘a_457)) & ~(‘a_459)) & ~(‘a_483)) & ~(‘a_507)) & ~(‘a_471)) & ~(‘a_473)) & ~(‘a_478)) & ~(‘a_481)) & ~(‘a_502)) & ~(‘a_458)) & ~(‘a_498)) & ~(‘a_508)) & ~(‘a_487)) & ~(‘a_501)) & ~(‘a_479)) & ~(‘a_509)) & ~(‘a_486)) & ~(‘a_510)) & ~(‘a_511))  <!<  ‹∀ 0. ((('a456' | 'A413) | ~(‘a_453)) | ~((‘a_453 & ~('A413))))›
//│ ╟── while constraining:  (((((((((((((((((((((((((((((((((((((((((((((((((((((((‘a_453 & ~(‘a_467)) & ~(‘a_462)) & ~(‘a_472)) & ~(‘a_500)) & ~(‘a_464)) & ~(‘a_491)) & ~(‘a_497)) & ~(‘a_480)) & ~(‘a_505)) & ~(‘a_503)) & ~(‘a_477)) & ~(‘a_482)) & ~(‘a_469)) & ~(‘a_466)) & ~(‘a_461)) & ~(‘a_460)) & ~(‘a_488)) & ~(‘a_492)) & ~(‘a_490)) & ~(‘a_475)) & ~(‘a_470)) & ~(‘a_499)) & ~(‘a_496)) & ~(‘a_506)) & ~(‘a_489)) & ~(‘a_484)) & ~(‘a_494)) & ~(‘a_495)) & ~(‘a_468)) & ~(‘a_474)) & ~(‘a_485)) & ~(‘a_465)) & ~(‘a_476)) & ~(‘a_463)) & ~(‘a_504)) & ~(‘a_493)) & ~(‘a_457)) & ~(‘a_459)) & ~(‘a_483)) & ~(‘a_507)) & ~(‘a_471)) & ~(‘a_473)) & ~(‘a_478)) & ~(‘a_481)) & ~(‘a_502)) & ~(‘a_458)) & ~(‘a_498)) & ~(‘a_508)) & ~(‘a_487)) & ~(‘a_501)) & ~(‘a_479)) & ~(‘a_509)) & ~(‘a_486)) & ~(‘a_510)) & ~(‘a_511))  <!<  'A442
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  (‘a_453 & ~(‘a_457))  <!<  'A413
//│ ╟── while constraining:  (‘a_453 & ~(‘a'))  <!<  'A413
//│ ╟── while constraining:  (‘a_453 & ~('A413))  <!<  ‹∀ 0. ((('a456' | 'A413) | ~(‘a_453)) | ~((‘a_453 & ~('A413))))›
//│ ╟── while constraining:  'A442  <!<  ‹∀ 0. ((('a456' | 'A413) | ~(‘a_453)) | ~((‘a_453 & ~('A413))))›
//│ ╟── while constraining:  'A442  <!<  (((‘a' | 'A413) | ~(‘a_453)) | ~((‘a_453 & ~('A413))))
//│ ╟── while constraining:  ((‘a_453 & ~('A413)) & 'A442)  <!<  ‹∀ 0. ('a455' | ~((‘a_453 & ~('A413))))›
//│ ╟── while constraining:  'A442  <!<  ‹∀ 0. ('a455' | ~((‘a_453 & ~('A413))))›
//│ ╟── while constraining:  'A442  <!<  (‘a' | ~((‘a_453 & ~('A413))))
//│ ╟── while constraining:  ((‘a_453 & ~('A413)) & 'A442)  <!<  ‹∀ 0. 'a454'›
//│ ╟── while constraining:  'A442  <!<  ‹∀ 0. 'a454'›
//│ ╟── while constraining:  'A442  <!<  ‘a'
//│ ╟── while constraining:  (C5[C6['A413]] & {a: (C2[(((C5[C6['A413]] | (C5[C6['A413]] & ~(c5<>))) | C5[C6['A413]]) | (C5[C6['A413]] & ~({a: C2[C5[C6['A413]]]})))] & {a: 'a412_428})})  <!<  ‹∀ 0. ({a: C2[C5[C6['a434'..'a435']..C6['a436'..'a437']]..C5[C6['a438'..'a439']..C6['a440'..'a441']]]} | ~((c5<> & {C5#A: mut C6['A442..'A444]..C6['A442..'A444], a: C2[C5[C6['A442..'A444]..C6['A442..'A444]]..C5[C6['A442..'A444]..C6['A442..'A444]]]})))›
//│ ╟── while constraining:  'a412_428  <!<  ‹∀ 0. ({a: C2[C5[C6['a434'..'a435']..C6['a436'..'a437']]..C5[C6['a438'..'a439']..C6['a440'..'a441']]]} | ~((c5<> & {C5#A: mut C6['A442..'A444]..C6['A442..'A444], a: C2[C5[C6['A442..'A444]..C6['A442..'A444]]..C5[C6['A442..'A444]..C6['A442..'A444]]]})))›
//│ ╟── while constraining:  'a412_428  <!<  ({a: C2[C5[C6[‘a']]]} | ~((c5<> & {C5#A: mut C6['A416_426']..C6['A416_426'], a: C2[C5[C6['A416_426']]]})))
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. (Anything -> (C6['A416'] & {a: Inner}))››  <!<  ‹∀ 0. ('a339' -> C6['a339'])›

type Inner2[A] = C5[C6[A]] & {a: C2[C5[C6[A]] | C5[C6[A]] & ~c5 | C5[C6[A]] | C5[C6[A]] & ~{a: C2[C5[C6[A]]]}] & {a: Inner2[A]}}
//│ Defined type alias Inner2[=A]

def e: anything -> (C6['A] & {a: Inner2['A]})
//│ e: anything -> (C6['A] with {a: Inner2['A]})

c = e
//│ anything -> (C6['A] with {a: Inner2['A]})
//│   <:  c:
//│ 'a -> C6['a]



class N: {}
class S[T]: { v: T }
  method In: T -> ()
  method In _ = ()
type O[T] = S[T] | N
class L[T]: { h: T; t: O[L[T]] }
  method Append: T -> L[T]
  method Append elem = L { h = elem; t = S { v = this } }
//│ Defined class N
//│ Defined class S[=T]
//│ Declared S.In: S['T] -> 'T -> ()
//│ Defined S.In: S['T] -> anything -> ()
//│ Defined type alias O[=T]
//│ Defined class L[=T]
//│ Declared L.Append: L['T] -> 'T -> L['T]
//│ Defined L.Append: (L['T] & 'this) -> ('T & 'h) -> (L['T] with {h: 'h, t: S[L['T]] & {v: L['T] & 'this}})

s1 = S{v=1}:O['_]
s2 = S{v=S{v=1}}:O[O['_]]
//│ s1: O['_]
//│   where
//│     '_ :> 1
//│ s2: O[O['_]]
//│   where
//│     '_ :> 1

:e
L{h=error;t=s1}
L{h=error;t=s2}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.285: 	L{h=error;t=s1}
//│ ║         	^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `1` is not an instance of type `L`
//│ ║  l.275: 	s1 = S{v=1}:O['_]
//│ ║         	         ^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.263: 	class L[T]: { h: T; t: O[L[T]] }
//│ ╙──       	                         ^^^^
//│ res: error
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.286: 	L{h=error;t=s2}
//│ ║         	^^^^^^^^^^^^^^^
//│ ╟── type `S[?_]` is not an instance of type `L`
//│ ║  l.262: 	type O[T] = S[T] | N
//│ ║         	            ^^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.263: 	class L[T]: { h: T; t: O[L[T]] }
//│ ╙──       	                         ^^^^
//│ res: error

// :ds
// L.Append

// before:
//  Defined L.Append: L['T] -> ('T & 'a & 'b) -> (L['T & 'b .. 'T | 'b] with {h: 'a, t: S[L['T & 'b .. 'T | 'b] & 'c .. L['T & 'b .. 'T | 'b] | L['T] | 'c] with {v: L['T]}})

L.Append
//│ res: L['T] -> 'T -> L['T]


def append ls elem = L { h = elem; t = S { v = ls } }
//│ append: (L['T] & 'v) -> ('T & 'h) -> (L['T] with {h: 'h, t: S[L['T]] with {v: 'v}})

:ns
append
//│ res: forall 'a, 'b, 'v, 'T, 'c, 'h, 'T0, 't. 'a -> 'b -> 'c
//│   where
//│     'c :> l & {h: 'h, t: 't, L#T = 'T0}
//│     't :> s & {v: 'v, S#T = 'T}
//│        <: O[L['T0]]
//│     'b <: 'h
//│     'h <: 'T0
//│     'a <: 'v
//│     'v <: L['T0] & 'T
//│     'T := L['T0]

append error
//│ res: ('h & 'T) -> (L['T] with {h: 'h, t: S[L['T]] & {v: nothing}})


def append_ty: (L['T] & 'v) -> ('T & 'h) -> (L['T] & {h: 'h; t: S[L['T]] & {v: 'v}})
//│ append_ty: (L['T] & 'v) -> ('T & 'h) -> (L['T] with {h: 'h, t: S[L['T]] with {v: 'v}})

append_ty error
//│ res: ('T & 'h) -> (L['T] with {h: 'h, t: S[L['T]] & {v: nothing}})

append_ty = append
//│ (L['T] & 'v) -> ('T & 'h) -> (L['T] with {h: 'h, t: S[L['T]] with {v: 'v}})
//│   <:  append_ty:
//│ (L['T] & 'v) -> ('T & 'h) -> (L['T] with {h: 'h, t: S[L['T]] with {v: 'v}})


// * Note: An older bug (fixed in 2a562ddfc712ab44a55a12370380ef4f1c3383cb)
// *    was dropping the bounds on T0 and generating this signature, which is too general:
def append_ty_2: (L['T] & 'v & 'T0) -> ('T & 'h) -> (L['T] & {h: 'h; t: S['T0] & {v: 'v}})
//│ append_ty_2: (L['T] & 'v & 'T0) -> ('T & 'h) -> (L['T] with {h: 'h, t: S['T0] with {v: 'v}})

append_ty_2 error
//│ res: ('T & 'h) -> (L['T] with {h: 'h, t: S['T0] with {v: nothing}})

:e
append_ty_2 = append
//│ (L['T] & 'v) -> ('T & 'h) -> (L['T] with {h: 'h, t: S[L['T]] with {v: 'v}})
//│   <:  append_ty_2:
//│ (L['T] & 'v & 'T0) -> ('T & 'h) -> (L['T] with {h: 'h, t: S['T0] with {v: 'v}})
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.359: 	append_ty_2 = append
//│ ║         	^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘T0` is not an instance of type `L`
//│ ║  l.352: 	def append_ty_2: (L['T] & 'v & 'T0) -> ('T & 'h) -> (L['T] & {h: 'h; t: S['T0] & {v: 'v}})
//│ ║         	                                                                          ^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.263: 	class L[T]: { h: T; t: O[L[T]] }
//│ ║         	                         ^^^^
//│ ╟── Note: class type parameter T is defined at:
//│ ║  l.259: 	class S[T]: { v: T }
//│ ╙──       	        ^

append_ty = append_ty_2
//│ (L['T] & 'v & 'T0) -> ('T & 'h) -> (L['T] with {h: 'h, t: S['T0] with {v: 'v}})
//│   <:  append_ty:
//│ (L['T] & 'v) -> ('T & 'h) -> (L['T] with {h: 'h, t: S[L['T]] with {v: 'v}})

:e
append_ty_2 = append_ty
//│ (L['T] & 'v) -> ('T & 'h) -> (L['T] with {h: 'h, t: S[L['T]] with {v: 'v}})
//│   <:  append_ty_2:
//│ (L['T] & 'v & 'T0) -> ('T & 'h) -> (L['T] with {h: 'h, t: S['T0] with {v: 'v}})
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.382: 	append_ty_2 = append_ty
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘T0` is not an instance of type `L`
//│ ║  l.352: 	def append_ty_2: (L['T] & 'v & 'T0) -> ('T & 'h) -> (L['T] & {h: 'h; t: S['T0] & {v: 'v}})
//│ ║         	                                                                          ^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.338: 	def append_ty: (L['T] & 'v) -> ('T & 'h) -> (L['T] & {h: 'h; t: S[L['T]] & {v: 'v}})
//│ ╙──       	                                                                  ^^^^^


def append0 ls = L { h = 0; t = S { v = ls } }
//│ append0: (L['T] & 'v) -> (L['T] with {h: 0, t: S[L['T]] with {v: 'v}})
//│   where
//│     'T :> 0

def appendNil elem = L { h = elem; t = N{} }
//│ appendNil: ('h & 'T) -> (L['T] with {h: 'h, t: N})


S{v=1}
//│ res: S['T] & {v: 1}
//│   where
//│     'T :> 1

