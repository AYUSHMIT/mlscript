
:GeneralizeCurriedFunctions


def f n = n 0
//│ f: 'a -> 'b
//│   where
//│     'a <: 0 -> 'b
//│  = [Function: f]

:e
f {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.12: 	f {}
//│ ║        	^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.12: 	f {}
//│ ║        	  ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.5: 	def f n = n 0
//│ ╙──     	          ^^^
//│ res: error
//│ Runtime error:
//│   TypeError: n is not a function

:e
f {} {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.27: 	f {} {}
//│ ║        	^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.27: 	f {} {}
//│ ║        	  ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.5: 	def f n = n 0
//│ ╙──     	          ^^^
//│ res: error
//│ Runtime error:
//│   TypeError: n is not a function


def f n m = n 0
//│ f: 'a -> (forall 'a, 'b. ('a -> 'b
//│   where
//│     'a <: 0 -> 'b))
//│  = [Function: f1]

// :e
f {}
//│ res: anything -> 'a
//│   where
//│     'b <: 0 -> 'a
//│    = [Function (anonymous)]

:e
f {} {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.56: 	f {} {}
//│ ║        	^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.56: 	f {} {}
//│ ║        	  ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.42: 	def f n m = n 0
//│ ╙──      	            ^^^
//│ res: error
//│ Runtime error:
//│   TypeError: n is not a function


