
class Parent: { name: string }
//│ Defined class Parent

class Child: Parent & { age: int }
//│ Defined class Child

:e
def c = Child(Parent { name = "Bob" })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.9: 	def c = Child(Parent { name = "Bob" })
//│ ║       	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `Parent & {name: string}` does not match type `{age: int}`
//│ ║  l.9: 	def c = Child(Parent { name = "Bob" })
//│ ║       	              ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.5: 	class Child: Parent & { age: int }
//│ ╙──     	                      ^^^^^^^^^^^^
//│ c: (Child & (Parent & {age: int})) | error

def c = Child(Parent { name = "Bob" } with { age = 123 })
//│ c: Child & (Parent & {age: int})

