
class Parent: { name: string }
//│ Defined class Parent

class Child: Parent & { age: int }
//│ Defined class Child

def p = Parent{ name = "Bob" }
//│ p: (parent & {name: string}) & {name: "Bob"}

p: Parent
//│ res: Parent

:e
def c = Child(Parent { name = "Bob" })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.15: 	def c = Child(Parent { name = "Bob" })
//│ ║        	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `(parent & {name: string}) & {name: ?a | "Bob"}` does not match type `{age: ?b & int, name: ?c & string}`
//│ ║  l.15: 	def c = Child(Parent { name = "Bob" })
//│ ╙──      	              ^^^^^^^^^^^^^^^^^^^^^^^
//│ c: ((child & (Parent & {age: int})) & {age: nothing, name: string & "Bob"}) | error

def c = Child(Parent { name = "Bob" } with { age = 123 })
//│ c: (child & (Parent & {age: int})) & {age: 123, name: string & "Bob"}

c: Parent
//│ res: Parent

c.name
//│ res: string & (string & "Bob")

c: { name: 'a }
//│ res: {name: string & (string & "Bob")}

c: { name: string }
//│ res: {name: string}


def f x = case x of {
  | Parent -> x.name
  }
//│ f: parent & {name: 'a} -> 'a

f c
//│ res: string & (string & "Bob")

f (c: Parent)
//│ res: string


def f x = case x of {
  | Child -> x.name
  }
//│ f: child & {name: 'a} -> 'a

f c
//│ res: string & (string & "Bob")

:e
f (c: Parent)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.61: 	f (c: Parent)
//│ ║        	^^^^
//│ ╟── expression of type `parent & {name: string}` does not match type `child`
//│ ║  l.61: 	f (c: Parent)
//│ ║        	      ^^^^^^
//│ ╟── but it flows into argument with expected type `child`
//│ ║  l.61: 	f (c: Parent)
//│ ║        	   ^
//│ ╟── Note: constraint arises from type pattern:
//│ ║  l.53: 	  | Child -> x.name
//│ ║        	    ^^^^^
//│ ╟── from reference:
//│ ║  l.52: 	def f x = case x of {
//│ ╙──      	               ^
//│ res: string | error


def f x = case x of {
  | Parent -> x.name
  | _ -> ""
  }
//│ f: ((parent & {name: 'a}) | (anything & ~parent)) -> 'a | ""

f c
//│ res: (string & (string & "Bob")) | ""

f (c: Parent)
//│ res: string | ""


def f x = case x of {
  | Parent -> x.name
  | Child -> x.name
  }
//│ f: ((parent & {name: 'a}) | ((child & {name: 'b}) & ~parent)) -> 'a | 'b

f c
//│ res: (string & (string & "Bob")) | nothing

f (c: Parent)
//│ res: string | nothing

