
def intToString: int -> string
def intToString x = toString x
def done x = case x of {}
//│ intToString: int -> string
//│            = <missing implementation>
//│ anything -> string
//│   <:  intToString:
//│ int -> string
//│            = [Function: intToString]
//│ done: nothing -> nothing
//│     = [Function: done]



class Lit: { val: int }
class Add[E]: { lhs: E; rhs: E }
  method Inv (x: E) = x
def lit val = Lit { val }
def add lhs rhs = Add { lhs; rhs }
//│ Defined class Lit
//│ Defined class Add[=E]
//│ Defined Add.Inv: Add['E] -> 'E -> 'E
//│ lit: (int & 'val) -> (Lit with {val: 'val})
//│    = [Function: lit]
//│ add: 'a -> ('rhs & 'E) -> (Add['E] with {lhs: 'a, rhs: 'rhs})
//│   where
//│     'E :> 'a
//│    = [Function: add]



rec def eval1_stub k e = case e of {
  | Add -> eval1_stub k e.lhs
  | _ -> k e
  }
//│ eval1_stub: ('a -> 'b) -> 'lhs -> 'b
//│   where
//│     'lhs <: (Add[?]\rhs with {lhs: 'lhs}) | 'a & ~#Add
//│           = [Function: eval1_stub]

rec def eval1_stub k e = case e of {
  | Add -> eval1_stub k e.lhs + eval1_stub k e.rhs
  | _ -> k e
  }
//│ eval1_stub: ('a -> int) -> 'rhs -> int
//│   where
//│     'rhs <: (Add[?] with {lhs: 'rhs, rhs: 'rhs}) | 'a & ~#Add
//│           = [Function: eval1_stub1]

:ns
rec def eval1_stub e = case e of {
  | Lit -> 1
  | Add -> eval1_stub e.lhs
  | _ -> 0
  }
//│ eval1_stub: forall 'lhs 'a 'b 'eval1_stub 'c 'd 'e. 'eval1_stub
//│   where
//│     'eval1_stub := 'c -> (1 | 'd | 0)
//│     'd :> 1 | 'd | 0
//│     'c <: #Lit & 'e | (#Add & 'a | 'b & ~#Add) & ~#Lit
//│     'a <: {lhs: 'lhs}
//│     'lhs <: 'c
//│           = [Function: eval1_stub2]

eval1_stub
//│ res: 'a -> (0 | 1)
//│   where
//│     'a <: (Add[?]\rhs with {lhs: 'a}) | Lit | ~Add[?] & ~Lit
//│    = [Function: eval1_stub2]

// def eval1: ('b -> int) -> Expr['b] -> int
:stats
rec def eval1 k e = case e of {
  | Lit -> e.val
  | Add -> eval1 k e.lhs + eval1 k e.rhs
  | _ -> k e
  }
//│ eval1: ('a -> int) -> ((Add[?] with {lhs: 'rhs, rhs: 'rhs}) | (Lit with {val: 'val}) | 'a & ~#Add & ~#Lit) -> (int | 'val)
//│   where
//│     'rhs <: (Add[?] with {lhs: 'rhs, rhs: 'rhs}) | Lit | 'a & ~#Add & ~#Lit
//│      = [Function: eval1]
//│ constrain calls  : 109
//│ annoying  calls  : 0
//│ subtyping calls  : 547

:ns
eval1
//│ res: forall 'val 'a 'b 'c 'd 'lhs 'rhs 'rhs0 'e 'val0 'f 'g 'rhs1 'eval1 'h 'lhs0 'i 'j 'k 'lhs1. 'eval1
//│   where
//│     'eval1 := 'f -> (forall 'val1 'rhs2 'l 'm 'lhs2 'n 'o 'p 'q. 'o -> ('val1 | 'l | 'm))
//│     'm :> 'i
//│     'l :> int
//│     'o <: #Lit & 'n | (#Add & 'p | 'q & ~#Add) & ~#Lit
//│     'q <: 'h
//│     'p <: {rhs: 'rhs2} & {lhs: 'lhs2}
//│     'lhs2 <: 'lhs1
//│     'rhs2 <: 'rhs1
//│     'rhs1 <: 'a
//│     'a <: #Lit & 'c | (#Add & 'k | 'g & ~#Add) & ~#Lit
//│     'g <: 'h
//│     'k <: {rhs: 'rhs0} & {lhs: 'lhs}
//│     'lhs <: 'lhs1
//│     'lhs1 <: 'd
//│     'd <: #Lit & 'b | (#Add & 'e | 'j & ~#Add) & ~#Lit
//│     'j <: 'h
//│     'e <: {rhs: 'rhs} & {lhs: 'lhs0}
//│     'lhs0 <: 'lhs1
//│     'rhs <: 'rhs1
//│     'b <: {val: 'val0}
//│     'val0 <: int
//│     'rhs0 <: 'rhs1
//│     'c <: {val: 'val}
//│     'val <: int
//│     'n <: {val: 'val1}
//│     'f <: 'h -> 'i
//│     'i <: int
//│    = [Function: eval1]

:re
error: ~Add[?]
//│ res: ~Add[?]
//│ Runtime error:
//│   Error: unexpected runtime error

:re
error: ('a & ~Lit) -> 'a
//│ res: ('a & ~Lit) -> 'a
//│ Runtime error:
//│   Error: unexpected runtime error

:re
error: ('a) -> ('a & Add[?])
error: ('a) -> ('a & ~Add[?])
error: ('a & ~Add[?]) -> 'a
//│ res: 'a -> (Add[?] & 'a)
//│ Runtime error:
//│   Error: unexpected runtime error
//│ res: 'a -> ('a & ~Add[?])
//│ Runtime error:
//│   Error: unexpected runtime error
//│ res: ('a & ~Add[?]) -> 'a
//│ Runtime error:
//│   Error: unexpected runtime error

:re
error: ('a & ~add) -> 'a
//│ res: ('a & ~#Add) -> 'a
//│ Runtime error:
//│   Error: unexpected runtime error

:ns
def eval1_ty_ugly: ('a -> int) -> (Lit | Add['b] | 'a & ~Lit & ~Add[?] as 'b) -> int
//│ eval1_ty_ugly: forall 'a 'b. ('a -> int) -> 'b -> int
//│   where
//│     'b := Lit | Add['b] | 'a & ~Lit & ~Add[?]
//│              = <missing implementation>

eval1_ty_ugly
//│ res: ('a -> int) -> 'b -> int
//│   where
//│     'b := 'a & ~Add[?] & ~Lit | Add['b] | Lit
//│    = <no result>
//│      eval1_ty_ugly is not implemented

:stats
def eval1_ty_ugly = eval1
//│ ('a -> int) -> ((Add[?] with {lhs: 'rhs, rhs: 'rhs}) | (Lit with {val: 'val}) | 'a & ~#Add & ~#Lit) -> (int | 'val)
//│   where
//│     'rhs <: (Add[?] with {lhs: 'rhs, rhs: 'rhs}) | Lit | 'a & ~#Add & ~#Lit
//│   <:  eval1_ty_ugly:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b := 'a & ~Add[?] & ~Lit | Add['b] | Lit
//│              = [Function: eval1_ty_ugly]
//│ constrain calls  : 153
//│ annoying  calls  : 111
//│ subtyping calls  : 1851

:ns
def eval1_ty: ('a -> int) -> (Lit | Add['b] | 'a & ~lit & ~add as 'b) -> int
//│ eval1_ty: forall 'a 'b. ('a -> int) -> 'b -> int
//│   where
//│     'b := Lit | Add['b] | 'a & ~#Lit & ~#Add
//│         = <missing implementation>

eval1_ty
//│ res: ('a -> int) -> 'b -> int
//│   where
//│     'b := 'a & ~#Add & ~#Lit | Add['b] | Lit
//│    = <no result>
//│      eval1_ty is not implemented

:stats
def eval1_ty = eval1
//│ ('a -> int) -> ((Add[?] with {lhs: 'rhs, rhs: 'rhs}) | (Lit with {val: 'val}) | 'a & ~#Add & ~#Lit) -> (int | 'val)
//│   where
//│     'rhs <: (Add[?] with {lhs: 'rhs, rhs: 'rhs}) | Lit | 'a & ~#Add & ~#Lit
//│   <:  eval1_ty:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b := 'a & ~#Add & ~#Lit | Add['b] | Lit
//│         = [Function: eval1_ty]
//│ constrain calls  : 153
//│ annoying  calls  : 111
//│ subtyping calls  : 1835

// :d
:stats
eval1_ty_ugly = eval1_ty
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b := 'a & ~#Add & ~#Lit | Add['b] | Lit
//│   <:  eval1_ty_ugly:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b := 'a & ~Add[?] & ~Lit | Add['b] | Lit
//│              = [Function: eval1]
//│ constrain calls  : 77
//│ annoying  calls  : 1810
//│ subtyping calls  : 4355

:stats
eval1_ty = eval1_ty_ugly
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b := 'a & ~Add[?] & ~Lit | Add['b] | Lit
//│   <:  eval1_ty:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b := 'a & ~#Add & ~#Lit | Add['b] | Lit
//│         = [Function: eval1]
//│ constrain calls  : 615
//│ annoying  calls  : 674
//│ subtyping calls  : 59240


// Workaround:
:ns
type E1[A] = Lit | Add[E1[A]] | A & ~lit & ~add
def eval1_ty: ('a -> int) -> E1['a] -> int
//│ Defined type alias E1[=A]
//│ eval1_ty: forall 'a. ('a -> int) -> E1['a] -> int
//│         = <missing implementation>

eval1_ty
//│ res: ('a -> int) -> E1['a] -> int
//│    = <no result>
//│      eval1_ty is not implemented

:stats
def eval1_ty = eval1
//│ ('a -> int) -> ((Add[?] with {lhs: 'rhs, rhs: 'rhs}) | (Lit with {val: 'val}) | 'a & ~#Add & ~#Lit) -> (int | 'val)
//│   where
//│     'rhs <: (Add[?] with {lhs: 'rhs, rhs: 'rhs}) | Lit | 'a & ~#Add & ~#Lit
//│   <:  eval1_ty:
//│ ('a -> int) -> E1['a] -> int
//│         = [Function: eval1_ty2]
//│ constrain calls  : 149
//│ annoying  calls  : 111
//│ subtyping calls  : 1613


:stats
rec def pretty1 k e = case e of {
  | Lit -> intToString e.val
  | Add -> concat (pretty1 k e.lhs) (pretty1 k e.rhs)
  | _ -> k e
  }
//│ pretty1: ('a -> string) -> 'rhs -> string
//│   where
//│     'rhs <: (Add[?] with {lhs: 'rhs, rhs: 'rhs}) | Lit | 'a & ~#Add & ~#Lit
//│        = [Function: pretty1]
//│ constrain calls  : 118
//│ annoying  calls  : 0
//│ subtyping calls  : 575


:stats
rec def prettier1 k ev e = case e of {
  | Lit -> intToString e.val
  | Add ->
      if ev e.lhs == 0 then prettier1 k ev e.rhs
      else if ev e.rhs == 0 then prettier1 k ev e.lhs
      else concat (prettier1 k ev e.lhs) (prettier1 k ev e.rhs)
  | _ -> k e
  }
//│ prettier1: ('a -> string) -> ('lhs -> number & 'lhs0 -> number & 'lhs1 -> number & 'lhs2 -> number & 'lhs3 -> number) -> ((Add[?] with {lhs: 'lhs4 & 'lhs, rhs: 'rhs & 'lhs}) | Lit | 'a & ~#Add & ~#Lit) -> string
//│   where
//│     'lhs4 <: ((Add[?] with {lhs: 'lhs1 & 'lhs4, rhs: 'lhs1 & 'rhs}) | Lit | 'a & ~#Add & ~#Lit) & ((Add[?] with {lhs: 'lhs2 & 'lhs4, rhs: 'lhs2 & 'rhs}) | Lit | 'a & ~#Add & ~#Lit)
//│     'rhs <: ((Add[?] with {lhs: 'lhs0 & 'lhs4, rhs: 'lhs0 & 'rhs}) | Lit | 'a & ~#Add & ~#Lit) & ((Add[?] with {lhs: 'lhs3 & 'lhs4, rhs: 'lhs3 & 'rhs}) | Lit | 'a & ~#Add & ~#Lit)
//│          = [Function: prettier1]
//│ constrain calls  : 480
//│ annoying  calls  : 0
//│ subtyping calls  : 2249

:stats
rec def prettier11 k ev e = case e of {
  | Lit -> intToString e.val
  | Add ->
      let tmp = pretty1 k e.lhs
      in if ev e.rhs == 0 then tmp else concat tmp (prettier11 k ev e.rhs)
  | _ -> k e
  }
//│ prettier11: ('a -> string) -> ('rhs -> number & 'rhs0 -> number) -> ((Add[?] with {lhs: 'rhs1, rhs: 'rhs2 & 'rhs}) | Lit | 'a & ~#Add & ~#Lit) -> string
//│   where
//│     'rhs2 <: (Add[?] with {lhs: 'rhs1, rhs: 'rhs0 & 'rhs2}) | Lit | 'a & ~#Add & ~#Lit
//│     'rhs1 <: (Add[?] with {lhs: 'rhs1, rhs: 'rhs1}) | Lit | 'a & ~#Add & ~#Lit
//│           = [Function: prettier11]
//│ constrain calls  : 218
//│ annoying  calls  : 0
//│ subtyping calls  : 1336

// Doesn't make much sense, but generates very ugly type unless aggressively simplified:
:stats
rec def prettier12 k ev e = case e of {
  | Lit -> intToString e.val
  | Add ->
      let tmp = pretty1 k e.lhs
      in if ev e == 0 then tmp else concat tmp (pretty1 k e.rhs)
  | _ -> k e
  }
//│ prettier12: ('a -> string & 'b -> 'c) -> ('d -> number) -> ((Add[?] with {lhs: 'rhs, rhs: 'rhs}) & 'd | Lit | 'b & ~#Add & ~#Lit) -> (string | 'c)
//│   where
//│     'rhs <: (Add[?] with {lhs: 'rhs, rhs: 'rhs}) | Lit | 'a & ~#Add & ~#Lit
//│           = [Function: prettier12]
//│ constrain calls  : 182
//│ annoying  calls  : 0
//│ subtyping calls  : 1199


:stats
e1 = Add{lhs = Lit {val = 1}; rhs = Add{lhs = Lit {val = 2}; rhs = Lit {val = 3}}}
eval1 done e1
pretty1 done e1
prettier1 done (eval1 done) e1
prettier11 done (eval1 done) e1
prettier12 done (eval1 done) e1
//│ e1: Add['E] with {lhs: Lit & {val: 1}, rhs: Add['E0] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}
//│   where
//│     'E :> (Add['E0] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}) | Lit & {val: 1}
//│     'E0 :> Lit & {val: 2 | 3}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Add { lhs: Lit { val: 2 }, rhs: Lit { val: 3 } }
//│     }
//│ res: int
//│    = 6
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'
//│ constrain calls  : 1800
//│ annoying  calls  : 605
//│ subtyping calls  : 18370


e1 = add (lit 1) (add (lit 2) (lit 3))
eval1 done e1
pretty1 done e1
prettier1 done (eval1 done) e1
prettier11 done (eval1 done) e1
prettier12 done (eval1 done) e1
//│ e1: Add['E] with {lhs: Lit & {val: 1}, rhs: Add['E0] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}
//│   where
//│     'E :> (Add['E0] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}) | Lit & {val: 1}
//│     'E0 :> Lit & {val: 2 | 3}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Add { lhs: Lit { val: 2 }, rhs: Lit { val: 3 } }
//│     }
//│ res: int
//│    = 6
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'



class Nega[E]: { arg: E }
def nega arg = Nega { arg }
//│ Defined class Nega[+E]
//│ nega: 'arg -> Nega['arg]
//│     = [Function: nega]



rec def eval2 k = eval1 (fun x -> case x of {
  | Nega -> 0 - (eval2 k x.arg)
  | _ -> k x
  })
//│ eval2: ('a -> int) -> ((Add[?] with {lhs: 'rhs, rhs: 'rhs}) | (Lit with {val: 'val}) | 'b & ~#Add & ~#Lit) -> (int | 'val)
//│   where
//│     'rhs <: (Add[?] with {lhs: 'rhs, rhs: 'rhs}) | Lit | 'b & ~#Add & ~#Lit
//│     'b <: Nega[?] & {arg: 'rhs} | 'a & ~#Nega
//│      = [Function: eval2]


:stats
rec def prettier2 k ev = prettier1 (fun x -> case x of {
  | Nega -> concat "-" (prettier2 k ev x.arg)
  | _ -> k x
  }) ev
//│ prettier2: ('a -> string) -> ('lhs -> number & 'lhs0 -> number & 'lhs1 -> number & 'lhs2 -> number & 'lhs3 -> number & 'lhs4 -> number & 'lhs5 -> number & 'lhs6 -> number & 'lhs7 -> number & 'lhs8 -> number) -> ((Add[?] with {lhs: 'lhs & 'lhs9, rhs: 'lhs & 'rhs}) | Lit | Nega[?] & {arg: 'arg} | 'a & ~#Add & ~#Lit & ~#Nega) -> string
//│   where
//│     'lhs9 <: ((Add[?] with {lhs: 'lhs8 & 'lhs9, rhs: 'lhs8 & 'rhs}) | Lit | Nega[?] & {arg: 'arg} | 'a & ~#Add & ~#Lit & ~#Nega) & ((Add[?] with {lhs: 'lhs6 & 'lhs9, rhs: 'lhs6 & 'rhs}) | Lit | Nega[?] & {arg: 'arg} | 'a & ~#Add & ~#Lit & ~#Nega)
//│     'rhs <: ((Add[?] with {lhs: 'lhs5 & 'lhs9, rhs: 'lhs5 & 'rhs}) | Lit | Nega[?] & {arg: 'arg} | 'a & ~#Add & ~#Lit & ~#Nega) & ((Add[?] with {lhs: 'lhs7 & 'lhs9, rhs: 'lhs7 & 'rhs}) | Lit | Nega[?] & {arg: 'arg} | 'a & ~#Add & ~#Lit & ~#Nega)
//│     'arg <: (Add[?] with {lhs: 'lhs0 & 'lhs10, rhs: 'lhs0 & 'rhs0}) | Lit | 'b & ~#Add & ~#Lit
//│     'lhs10 <: ((Add[?] with {lhs: 'lhs2 & 'lhs10, rhs: 'lhs2 & 'rhs0}) | Lit | 'b & ~#Add & ~#Lit) & ((Add[?] with {lhs: 'lhs3 & 'lhs10, rhs: 'lhs3 & 'rhs0}) | Lit | 'b & ~#Add & ~#Lit)
//│     'rhs0 <: ((Add[?] with {lhs: 'lhs1 & 'lhs10, rhs: 'lhs1 & 'rhs0}) | Lit | 'b & ~#Add & ~#Lit) & ((Add[?] with {lhs: 'lhs4 & 'lhs10, rhs: 'lhs4 & 'rhs0}) | Lit | 'b & ~#Add & ~#Lit)
//│     'b <: Nega[?] & {arg: 'arg} | 'a & ~#Nega
//│          = [Function: prettier2]
//│ constrain calls  : 200
//│ annoying  calls  : 0
//│ subtyping calls  : 2217

:stats
rec def prettier22 k ev = prettier12 (fun x -> case x of {
  | Nega -> concat "-" (prettier22 k ev x.arg)
  | _ -> k x
  }) ev
//│ prettier22: ('a -> string) -> ('b -> number & 'c -> number) -> ((Add[?] with {lhs: 'rhs, rhs: 'rhs}) & 'b | Lit | Nega[?] & {arg: 'arg} | 'a & ~#Add & ~#Lit & ~#Nega) -> string
//│   where
//│     'rhs <: (Add[?] with {lhs: 'rhs, rhs: 'rhs}) | Lit | Nega[?] & {arg: 'arg} | 'a & ~#Add & ~#Lit & ~#Nega
//│     'arg <: (Add[?] with {lhs: 'rhs0, rhs: 'rhs0}) & 'c | Lit | Nega[?] & {arg: 'arg} | 'a & ~#Add & ~#Lit & ~#Nega
//│     'rhs0 <: (Add[?] with {lhs: 'rhs0, rhs: 'rhs0}) | Lit | 'd & ~#Add & ~#Lit
//│     'd <: Nega[?] & {arg: 'arg} | 'a & ~#Nega
//│           = [Function: prettier22]
//│ constrain calls  : 226
//│ annoying  calls  : 0
//│ subtyping calls  : 2420



:stats
eval2 done e1
//│ res: int
//│    = 6
//│ constrain calls  : 189
//│ annoying  calls  : 60
//│ subtyping calls  : 1271

e2 = add (lit 1) (nega e1)
//│ e2: Add['E] with {lhs: Lit & {val: 1}, rhs: Nega[forall 'E0 'E1. Add['E0] with {lhs: Lit & {val: 1}, rhs: Add['E1] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}]}
//│   where
//│     'E :> Lit & {val: 1} | Nega[forall 'E0 'E1. Add['E0] with {lhs: Lit & {val: 1}, rhs: Add['E1] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}]
//│     'E0 :> (Add['E1] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}) | Lit & {val: 1}
//│     'E1 :> Lit & {val: 2 | 3}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Nega { arg: Add { lhs: [Lit], rhs: [Add] } }
//│     }

:stats
eval2 done e2
//│ res: int
//│    = -5
//│ constrain calls  : 288
//│ annoying  calls  : 103
//│ subtyping calls  : 2009

d2 = nega (add (lit 1) (nega (lit 1)))
//│ d2: Nega[Add['E] with {lhs: Lit & {val: 1}, rhs: Nega[Lit & {val: 1}]}]
//│   where
//│     'E :> Lit & {val: 1} | Nega[Lit & {val: 1}]
//│   = Nega { arg: Add { lhs: Lit { val: 1 }, rhs: Nega { arg: [Lit] } } }

:stats
eval2 done d2
//│ res: int
//│    = 0
//│ constrain calls  : 194
//│ annoying  calls  : 71
//│ subtyping calls  : 1301


prettier2 done
//│ res: ('lhs -> number & 'lhs0 -> number & 'lhs1 -> number & 'lhs2 -> number & 'lhs3 -> number & 'lhs4 -> number & 'lhs5 -> number & 'lhs6 -> number & 'lhs7 -> number & 'lhs8 -> number) -> ((Add[?] with {lhs: 'lhs & 'lhs9, rhs: 'lhs & 'rhs}) | Lit | 'a) -> string
//│   where
//│     'lhs9 <: ((Add[?] with {lhs: 'lhs6 & 'lhs9, rhs: 'lhs6 & 'rhs}) | Lit | 'a) & ((Add[?] with {lhs: 'lhs7 & 'lhs9, rhs: 'lhs7 & 'rhs}) | Lit | 'a)
//│     'rhs <: ((Add[?] with {lhs: 'lhs4 & 'lhs9, rhs: 'lhs4 & 'rhs}) | Lit | 'a) & ((Add[?] with {lhs: 'lhs8 & 'lhs9, rhs: 'lhs8 & 'rhs}) | Lit | 'a)
//│     'a <: Nega[?] & {arg: (Add[?] with {lhs: 'lhs0 & 'lhs10, rhs: 'lhs0 & 'rhs0}) | Lit | 'a & ~#Add & ~#Lit}
//│     'lhs10 <: ((Add[?] with {lhs: 'lhs2 & 'lhs10, rhs: 'lhs2 & 'rhs0}) | Lit | 'a & ~#Add & ~#Lit) & ((Add[?] with {lhs: 'lhs3 & 'lhs10, rhs: 'lhs3 & 'rhs0}) | Lit | 'a & ~#Add & ~#Lit)
//│     'rhs0 <: ((Add[?] with {lhs: 'lhs1 & 'lhs10, rhs: 'lhs1 & 'rhs0}) | Lit | 'a & ~#Add & ~#Lit) & ((Add[?] with {lhs: 'lhs5 & 'lhs10, rhs: 'lhs5 & 'rhs0}) | Lit | 'a & ~#Add & ~#Lit)
//│    = [Function (anonymous)]

prettier22 done
//│ res: ('a -> number & 'b -> number) -> ((Add[?] with {lhs: 'rhs, rhs: 'rhs}) & 'a | Lit | 'c) -> string
//│   where
//│     'rhs <: (Add[?] with {lhs: 'rhs, rhs: 'rhs}) | Lit | 'c
//│     'c <: Nega[?] & {arg: (Add[?] with {lhs: 'rhs0, rhs: 'rhs0}) & 'b | Lit | 'c}
//│     'rhs0 <: (Add[?] with {lhs: 'rhs0, rhs: 'rhs0}) | Lit | 'c & ~#Add & ~#Lit
//│    = [Function (anonymous)]

:stats
prettier2 done (eval1 done)
//│ res: ((Add[?] with {lhs: 'lhs & 'rhs, rhs: 'rhs0 & 'rhs}) | Lit | 'a) -> string
//│   where
//│     'lhs <: (Add[?] with {lhs: 'lhs & 'rhs, rhs: 'rhs0 & 'rhs}) | Lit | 'a
//│     'rhs0 <: (Add[?] with {lhs: 'lhs & 'rhs, rhs: 'rhs0 & 'rhs}) | Lit | 'a
//│     'a <: Nega[?] & {arg: (Add[?] with {lhs: 'lhs0 & 'rhs, rhs: 'rhs1 & 'rhs}) | Lit | 'a & ~#Add & ~#Lit}
//│     'lhs0 <: (Add[?] with {lhs: 'lhs0 & 'rhs, rhs: 'rhs1 & 'rhs}) | Lit | 'a & ~#Add & ~#Lit
//│     'rhs1 <: (Add[?] with {lhs: 'lhs0 & 'rhs, rhs: 'rhs1 & 'rhs}) | Lit | 'a & ~#Add & ~#Lit
//│     'rhs <: (Add[?] with {lhs: 'rhs, rhs: 'rhs}) | Lit
//│    = [Function (anonymous)]
//│ constrain calls  : 627
//│ annoying  calls  : 0
//│ subtyping calls  : 7640


prettier22 done (eval1 done)
//│ res: ((Add[?] with {lhs: 'rhs & 'rhs0, rhs: 'rhs & 'rhs0}) | Lit | 'a) -> string
//│   where
//│     'rhs0 <: (Add[?] with {lhs: 'rhs0, rhs: 'rhs0}) | Lit | 'a
//│     'a <: Nega[?] & {arg: (Add[?] with {lhs: 'rhs & 'rhs1, rhs: 'rhs & 'rhs1}) | Lit | 'a}
//│     'rhs1 <: (Add[?] with {lhs: 'rhs1, rhs: 'rhs1}) | Lit | 'a & ~#Add & ~#Lit
//│     'rhs <: (Add[?] with {lhs: 'rhs, rhs: 'rhs}) | Lit
//│    = [Function (anonymous)]

// TODO could probably merge `a` and `b` here!
:stats
prettier2 done (eval2 done)
//│ res: ((Add[?] with {lhs: 'lhs & 'rhs, rhs: 'rhs0 & 'rhs1}) | Lit | 'a) -> string
//│   where
//│     'rhs1 <: (Add[?] with {lhs: 'rhs1, rhs: 'rhs1}) | Lit | 'b & ~#Add & ~#Lit
//│     'b <: Nega[?] & {arg: 'rhs1}
//│     'rhs <: (Add[?] with {lhs: 'rhs, rhs: 'rhs}) | Lit | 'c & ~#Add & ~#Lit
//│     'c <: Nega[?] & {arg: 'rhs}
//│     'lhs <: ((Add[?] with {lhs: 'lhs & ((Add[?] with {lhs: 'rhs2, rhs: 'rhs2}) | 'd & ~#Add & ~#Lit | Lit), rhs: 'rhs0 & 'rhs3}) | Lit | 'a) & ((Add[?] with {lhs: 'lhs & ((Add[?] with {lhs: 'rhs4, rhs: 'rhs4}) | 'e & ~#Add & ~#Lit | Lit), rhs: 'rhs0 & 'rhs5}) | Lit | 'a)
//│     'rhs5 <: (Add[?] with {lhs: 'rhs5, rhs: 'rhs5}) | Lit | 'f & ~#Add & ~#Lit
//│     'f <: Nega[?] & {arg: 'rhs5}
//│     'rhs4 <: (Add[?] with {lhs: 'rhs4, rhs: 'rhs4}) | Lit | 'e & ~#Add & ~#Lit
//│     'e <: Nega[?] & {arg: 'rhs4}
//│     'rhs3 <: (Add[?] with {lhs: 'rhs3, rhs: 'rhs3}) | Lit | 'g & ~#Add & ~#Lit
//│     'g <: Nega[?] & {arg: 'rhs3}
//│     'rhs0 <: ((Add[?] with {lhs: 'lhs & ((Add[?] with {lhs: 'rhs6, rhs: 'rhs6}) | 'h & ~#Add & ~#Lit | Lit), rhs: 'rhs0 & 'rhs7}) | Lit | 'a) & ((Add[?] with {lhs: 'lhs & ((Add[?] with {lhs: 'rhs8, rhs: 'rhs8}) | 'i & ~#Add & ~#Lit | Lit), rhs: 'rhs0 & 'rhs9}) | Lit | 'a)
//│     'rhs9 <: (Add[?] with {lhs: 'rhs9, rhs: 'rhs9}) | Lit | 'j & ~#Add & ~#Lit
//│     'j <: Nega[?] & {arg: 'rhs9}
//│     'rhs8 <: (Add[?] with {lhs: 'rhs8, rhs: 'rhs8}) | Lit | 'i & ~#Add & ~#Lit
//│     'i <: Nega[?] & {arg: 'rhs8}
//│     'a <: Nega[?] & {arg: (Add[?] with {lhs: 'lhs0 & 'rhs10, rhs: 'rhs11 & 'rhs12}) | Lit | 'a & ~#Add & ~#Lit}
//│     'rhs12 <: (Add[?] with {lhs: 'rhs12, rhs: 'rhs12}) | Lit | 'k & ~#Add & ~#Lit
//│     'k <: Nega[?] & {arg: 'rhs12}
//│     'rhs10 <: (Add[?] with {lhs: 'rhs10, rhs: 'rhs10}) | Lit | 'l & ~#Add & ~#Lit
//│     'l <: Nega[?] & {arg: 'rhs10}
//│     'lhs0 <: ((Add[?] with {lhs: 'lhs0 & ((Add[?] with {lhs: 'rhs13, rhs: 'rhs13}) | 'm & ~#Add & ~#Lit | Lit), rhs: 'rhs11 & 'rhs14}) | Lit | 'a & ~#Add & ~#Lit) & ((Add[?] with {lhs: 'lhs0 & ((Add[?] with {lhs: 'rhs15, rhs: 'rhs15}) | 'n & ~#Add & ~#Lit | Lit), rhs: 'rhs11 & 'rhs16}) | Lit | 'a & ~#Add & ~#Lit)
//│     'rhs16 <: (Add[?] with {lhs: 'rhs16, rhs: 'rhs16}) | Lit | 'o & ~#Add & ~#Lit
//│     'o <: Nega[?] & {arg: 'rhs16}
//│     'rhs15 <: (Add[?] with {lhs: 'rhs15, rhs: 'rhs15}) | Lit | 'n & ~#Add & ~#Lit
//│     'n <: Nega[?] & {arg: 'rhs15}
//│     'rhs14 <: (Add[?] with {lhs: 'rhs14, rhs: 'rhs14}) | Lit | 'p & ~#Add & ~#Lit
//│     'p <: Nega[?] & {arg: 'rhs14}
//│     'rhs11 <: ((Add[?] with {lhs: 'lhs0 & ((Add[?] with {lhs: 'rhs17, rhs: 'rhs17}) | 'q & ~#Add & ~#Lit | Lit), rhs: 'rhs11 & 'rhs18}) | Lit | 'a & ~#Add & ~#Lit) & ((Add[?] with {lhs: 'lhs0 & ((Add[?] with {lhs: 'rhs19, rhs: 'rhs19}) | 'r & ~#Add & ~#Lit | Lit), rhs: 'rhs11 & 'rhs20}) | Lit | 'a & ~#Add & ~#Lit)
//│     'rhs20 <: (Add[?] with {lhs: 'rhs20, rhs: 'rhs20}) | Lit | 's & ~#Add & ~#Lit
//│     's <: Nega[?] & {arg: 'rhs20}
//│     'rhs19 <: (Add[?] with {lhs: 'rhs19, rhs: 'rhs19}) | Lit | 'r & ~#Add & ~#Lit
//│     'r <: Nega[?] & {arg: 'rhs19}
//│     'rhs18 <: (Add[?] with {lhs: 'rhs18, rhs: 'rhs18}) | Lit | 't & ~#Add & ~#Lit
//│     't <: Nega[?] & {arg: 'rhs18}
//│     'rhs17 <: (Add[?] with {lhs: 'rhs17, rhs: 'rhs17}) | Lit | 'q & ~#Add & ~#Lit
//│     'q <: Nega[?] & {arg: 'rhs17}
//│     'rhs13 <: (Add[?] with {lhs: 'rhs13, rhs: 'rhs13}) | Lit | 'm & ~#Add & ~#Lit
//│     'm <: Nega[?] & {arg: 'rhs13}
//│     'rhs7 <: (Add[?] with {lhs: 'rhs7, rhs: 'rhs7}) | Lit | 'u & ~#Add & ~#Lit
//│     'u <: Nega[?] & {arg: 'rhs7}
//│     'rhs6 <: (Add[?] with {lhs: 'rhs6, rhs: 'rhs6}) | Lit | 'h & ~#Add & ~#Lit
//│     'h <: Nega[?] & {arg: 'rhs6}
//│     'rhs2 <: (Add[?] with {lhs: 'rhs2, rhs: 'rhs2}) | Lit | 'd & ~#Add & ~#Lit
//│     'd <: Nega[?] & {arg: 'rhs2}
//│    = [Function (anonymous)]
//│ constrain calls  : 752
//│ annoying  calls  : 0
//│ subtyping calls  : 14990

prettier2 done (eval2 done) e2
prettier2 done (eval2 done) d2
//│ res: string
//│    = '1-123'
//│ res: string
//│    = '-1-1'

:stats
prettier22 done (eval2 done)
prettier22 done (eval2 done) e2
prettier22 done (eval2 done) d2
//│ res: ((Add[?] with {lhs: 'rhs & 'rhs0, rhs: 'rhs & 'rhs0}) | Lit | 'a) -> string
//│   where
//│     'rhs0 <: (Add[?] with {lhs: 'rhs0, rhs: 'rhs0}) | Lit | 'a
//│     'a <: Nega[?] & {arg: (Add[?] with {lhs: 'rhs1 & 'rhs2, rhs: 'rhs1 & 'rhs2}) | Lit | 'a}
//│     'rhs2 <: (Add[?] with {lhs: 'rhs2, rhs: 'rhs2}) | Lit | 'a & ~#Add & ~#Lit
//│     'rhs1 <: (Add[?] with {lhs: 'rhs1, rhs: 'rhs1}) | Lit | 'b & ~#Add & ~#Lit
//│     'b <: Nega[?] & {arg: 'rhs1}
//│     'rhs <: (Add[?] with {lhs: 'rhs, rhs: 'rhs}) | Lit | 'c & ~#Add & ~#Lit
//│     'c <: Nega[?] & {arg: 'rhs}
//│    = [Function (anonymous)]
//│ res: string
//│    = '1-123'
//│ res: string
//│    = '-1'
//│ constrain calls  : 1370
//│ annoying  calls  : 390
//│ subtyping calls  : 12109




// === === === ERROR CASES === === === //


:ShowRelativeLineNums


:e
eval1 done e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	eval1 done e2
//│ ║        	^^^^^^^^^^^^^
//│ ╟── application of type `Nega[?E] & {Nega#E = ?E, arg: ?arg}` does not match type `nothing`
//│ ║  l.390: 	def nega arg = Nega { arg }
//│ ║         	               ^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.4: 	def done x = case x of {}
//│ ║       	                  ^
//│ ╟── from field selection:
//│ ║  l.76: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ╙──      	                                   ^^^^^
//│ res: error | int
//│ Runtime error:
//│   Error: non-exhaustive case expression


:e
prettier2 done eval1 e1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval1 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (forall ?b ?c. ?val | ?b | ?c)` is not an instance of type `number`
//│ ║  l.74: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.75: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.76: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.77: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.78: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.284: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ res: error
//│    = '123'


:e
:stats
prettier2 done (eval1 done) e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done (eval1 done) e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Nega[?E] & {Nega#E = ?E, arg: ?arg}` does not match type `nothing`
//│ ║  l.390: 	def nega arg = Nega { arg }
//│ ║         	               ^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.4: 	def done x = case x of {}
//│ ║       	                  ^
//│ ╟── from field selection:
//│ ║  l.284: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	                 ^^^^^
//│ res: error | string
//│ Runtime error:
//│   Error: non-exhaustive case expression
//│ constrain calls  : 1516
//│ annoying  calls  : 351
//│ subtyping calls  : 15181

:e
:stats
prettier2 done eval2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (forall ?b ?c. ?val | ?b | ?c)` is not an instance of type `number`
//│ ║  l.74: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.75: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.76: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.77: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.78: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.284: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ res: error
//│    = [Function (anonymous)]
//│ constrain calls  : 162
//│ annoying  calls  : 0
//│ subtyping calls  : 1030

:e
:stats
prettier2 done eval2 e1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (forall ?b ?c. ?val | ?b | ?c)` is not an instance of type `number`
//│ ║  l.74: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.75: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.76: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.77: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.78: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.284: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ res: error
//│    = '123'
//│ constrain calls  : 169
//│ annoying  calls  : 0
//│ subtyping calls  : 1040

:e
:stats
prettier2 done eval2 e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (forall ?b ?c. ?val | ?b | ?c)` is not an instance of type `number`
//│ ║  l.74: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.75: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.76: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.77: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.78: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.284: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ res: error
//│    = '1-123'
//│ constrain calls  : 169
//│ annoying  calls  : 0
//│ subtyping calls  : 1040

:e
:stats
prettier2 done eval2 d2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 d2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (forall ?b ?c. ?val | ?b | ?c)` is not an instance of type `number`
//│ ║  l.74: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.75: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.76: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.77: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.78: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.284: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ res: error
//│    = '-1-1'
//│ constrain calls  : 169
//│ annoying  calls  : 0
//│ subtyping calls  : 1040

:e
:stats
prettier2 done eval1 e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval1 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (forall ?b ?c. ?val | ?b | ?c)` is not an instance of type `number`
//│ ║  l.74: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.75: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.76: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.77: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.78: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.284: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ res: error
//│    = '1-123'
//│ constrain calls  : 153
//│ annoying  calls  : 0
//│ subtyping calls  : 680

