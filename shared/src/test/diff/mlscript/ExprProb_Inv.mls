
def intToString: int -> string
def intToString x = toString x
def done x = case x of {}
//│ intToString: int -> string
//│            = <missing implementation>
//│ anything -> string
//│   <:  intToString:
//│ int -> string
//│            = [Function: intToString]
//│ done: nothing -> nothing
//│     = [Function: done]



class Lit: { val: int }
class Add[E]: { lhs: E; rhs: E }
  method Inv (x: E) = x
def lit val = Lit { val }
def add lhs rhs = Add { lhs; rhs }
//│ Defined class Lit
//│ Defined class Add[=E]
//│ Defined Add.Inv: Add['E] -> 'E -> 'E
//│ lit: (int & 'val) -> (Lit with {val: 'val})
//│    = [Function: lit]
//│ add: 'a -> ('rhs & 'E) -> (Add['E] with {lhs: 'a, rhs: 'rhs})
//│   where
//│     'E :> 'a
//│    = [Function: add]



rec def eval1_stub k e = case e of {
  | Add -> eval1_stub k e.lhs
  | _ -> k e
  }
//│ eval1_stub: ('a -> 'b & 'c -> 'b) -> ((Add[?]\rhs with {lhs: 'lhs}) | 'a & ~#Add) -> 'b
//│   where
//│     'lhs <: (Add[?]\rhs with {lhs: 'lhs}) | 'c & ~#Add
//│           = [Function: eval1_stub]

rec def eval1_stub k e = case e of {
  | Add -> eval1_stub k e.lhs + eval1_stub k e.rhs
  | _ -> k e
  }
//│ eval1_stub: ('a -> 'b & 'c -> int & 'd -> int) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | 'a & ~#Add) -> (int | 'b)
//│   where
//│     'lhs <: (Add[?] with {lhs: 'lhs, rhs: 'rhs}) | 'c & ~#Add
//│     'rhs <: (Add[?] with {lhs: 'lhs, rhs: 'rhs}) | 'd & ~#Add
//│           = [Function: eval1_stub1]

:ns
rec def eval1_stub e = case e of {
  | Lit -> 1
  | Add -> eval1_stub e.lhs
  | _ -> 0
  }
//│ eval1_stub: forall 'a, 'lhs, 'b, 'c, 'lhs0, 'd, 'eval1_stub, 'e. 'eval1_stub
//│   where
//│     'eval1_stub := forall 'lhs1, 'f, 'g, 'h, 'i, 'j. 'i -> (1 | 'j | 0)
//│     'j :> 'b
//│     'b :> forall 'k. 1 | 'k | 0
//│     'k :> 'b
//│     'i <: #Lit & 'h | (#Add & 'g | 'f & ~#Add) & ~#Lit
//│     'g <: {lhs: 'lhs1}
//│     'lhs1 <: 'lhs0
//│     'lhs0 <: 'd
//│     'd <: #Lit & 'e | (#Add & 'a | 'c & ~#Add) & ~#Lit
//│     'a <: {lhs: 'lhs}
//│     'lhs <: 'lhs0
//│           = [Function: eval1_stub2]

eval1_stub
//│ res: 'lhs -> (0 | 1)
//│   where
//│     'lhs <: (Add[?]\rhs with {lhs: 'lhs}) | Lit | ~Add[?] & ~Lit
//│    = [Function: eval1_stub2]

// def eval1: ('b -> int) -> Expr['b] -> int
:stats
rec def eval1 k e = case e of {
  | Lit -> e.val
  | Add -> eval1 k e.lhs + eval1 k e.rhs
  | _ -> k e
  }
//│ eval1: ('a -> 'val & 'b -> int & 'c -> int) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'val}) | 'a & ~#Add & ~#Lit) -> (int | 'val)
//│   where
//│     'lhs <: (Add[?] with {lhs: 'lhs, rhs: 'rhs}) | Lit | 'b & ~#Add & ~#Lit
//│     'rhs <: (Add[?] with {lhs: 'lhs, rhs: 'rhs}) | Lit | 'c & ~#Add & ~#Lit
//│      = [Function: eval1]
//│ constrain calls  : 117
//│ annoying  calls  : 0
//│ subtyping calls  : 573

:ns
eval1
//│ res: forall 'a, 'eval1, 'b, 'c, 'd, 'e, 'rhs, 'f, 'g, 'val, 'val0, 'h, 'lhs, 'i, 'j, 'lhs0, 'k, 'l, 'rhs0, 'lhs1, 'm, 'rhs1, 'n, 'o, 'p. 'eval1
//│   where
//│     'eval1 := forall 'q, 'r, 's. 'q -> (forall 't, 'u, 'v, 'w, 'x, 'lhs2, 'val1, 'y, 'rhs2. 'y -> ('val1 | 'x | 'u))
//│     'u :> 's
//│     'x :> int
//│     'y <: #Lit & 'v | (#Add & 't | 'w & ~#Add) & ~#Lit
//│     'w <: 'r
//│     't <: {rhs: 'rhs2} & {lhs: 'lhs2}
//│     'lhs2 <: 'lhs
//│     'rhs2 <: 'rhs
//│     'rhs <: 'g
//│     'g <: #Lit & 'd | (#Add & 'j | 'c & ~#Add) & ~#Lit
//│     'c <: 'm
//│     'j <: {rhs: 'rhs0} & {lhs: 'lhs1}
//│     'lhs1 <: 'lhs
//│     'lhs <: 'a
//│     'a <: #Lit & 'i | (#Add & 'e | 'o & ~#Add) & ~#Lit
//│     'o <: 'n
//│     'e <: {rhs: 'rhs1} & {lhs: 'lhs0}
//│     'lhs0 <: 'lhs
//│     'rhs1 <: 'rhs
//│     'i <: {val: 'val0}
//│     'val0 <: int
//│     'rhs0 <: 'rhs
//│     'd <: {val: 'val}
//│     'val <: int
//│     'v <: {val: 'val1}
//│     'q <: 'r -> 's & 'p & 'h
//│     'p <: 'k
//│     'k <: 'm -> 'b & 'p & 'h
//│     'h <: 'f
//│     'f <: 'n -> 'l & 'p & 'h
//│     'l <: int
//│     'b <: int
//│    = [Function: eval1]

:re
error: ~Add[?]
//│ res: ~Add[?]
//│ Runtime error:
//│   Error: unexpected runtime error

:re
error: ('a & ~Lit) -> 'a
//│ res: ('a & ~Lit) -> 'a
//│ Runtime error:
//│   Error: unexpected runtime error

:re
error: ('a) -> ('a & Add[?])
error: ('a) -> ('a & ~Add[?])
error: ('a & ~Add[?]) -> 'a
//│ res: 'a -> (Add[?] & 'a)
//│ Runtime error:
//│   Error: unexpected runtime error
//│ res: 'a -> ('a & ~Add[?])
//│ Runtime error:
//│   Error: unexpected runtime error
//│ res: ('a & ~Add[?]) -> 'a
//│ Runtime error:
//│   Error: unexpected runtime error

:re
error: ('a & ~add) -> 'a
//│ res: ('a & ~#Add) -> 'a
//│ Runtime error:
//│   Error: unexpected runtime error

:ns
def eval1_ty_ugly: ('a -> int) -> (Lit | Add['b] | 'a & ~Lit & ~Add[?] as 'b) -> int
//│ eval1_ty_ugly: forall 'a, 'b. ('a -> int) -> 'b -> int
//│   where
//│     'b := Lit | Add['b] | 'a & ~Lit & ~Add[?]
//│              = <missing implementation>

eval1_ty_ugly
//│ res: ('a -> int) -> 'b -> int
//│   where
//│     'b := 'a & ~Add[?] & ~Lit | Add['b] | Lit
//│    = <no result>
//│      eval1_ty_ugly is not implemented

:stats
def eval1_ty_ugly = eval1
//│ ('a -> 'val & 'b -> int & 'c -> int) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'val}) | 'a & ~#Add & ~#Lit) -> (int | 'val)
//│   where
//│     'lhs <: (Add[?] with {lhs: 'lhs, rhs: 'rhs}) | Lit | 'b & ~#Add & ~#Lit
//│     'rhs <: (Add[?] with {lhs: 'lhs, rhs: 'rhs}) | Lit | 'c & ~#Add & ~#Lit
//│   <:  eval1_ty_ugly:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b := 'a & ~Add[?] & ~Lit | Add['b] | Lit
//│              = [Function: eval1_ty_ugly]
//│ constrain calls  : 194
//│ annoying  calls  : 111
//│ subtyping calls  : 2058

:ns
def eval1_ty: ('a -> int) -> (Lit | Add['b] | 'a & ~lit & ~add as 'b) -> int
//│ eval1_ty: forall 'b, 'a. ('a -> int) -> 'b -> int
//│   where
//│     'b := Lit | Add['b] | 'a & ~#Lit & ~#Add
//│         = <missing implementation>

eval1_ty
//│ res: ('a -> int) -> 'b -> int
//│   where
//│     'b := 'a & ~#Add & ~#Lit | Add['b] | Lit
//│    = <no result>
//│      eval1_ty is not implemented

:stats
def eval1_ty = eval1
//│ ('a -> 'val & 'b -> int & 'c -> int) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'val}) | 'a & ~#Add & ~#Lit) -> (int | 'val)
//│   where
//│     'lhs <: (Add[?] with {lhs: 'lhs, rhs: 'rhs}) | Lit | 'b & ~#Add & ~#Lit
//│     'rhs <: (Add[?] with {lhs: 'lhs, rhs: 'rhs}) | Lit | 'c & ~#Add & ~#Lit
//│   <:  eval1_ty:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b := 'a & ~#Add & ~#Lit | Add['b] | Lit
//│         = [Function: eval1_ty]
//│ constrain calls  : 194
//│ annoying  calls  : 111
//│ subtyping calls  : 2042

// :d
:stats
eval1_ty_ugly = eval1_ty
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b := 'a & ~#Add & ~#Lit | Add['b] | Lit
//│   <:  eval1_ty_ugly:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b := 'a & ~Add[?] & ~Lit | Add['b] | Lit
//│              = [Function: eval1]
//│ constrain calls  : 77
//│ annoying  calls  : 1810
//│ subtyping calls  : 4355

:stats
eval1_ty = eval1_ty_ugly
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b := 'a & ~Add[?] & ~Lit | Add['b] | Lit
//│   <:  eval1_ty:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b := 'a & ~#Add & ~#Lit | Add['b] | Lit
//│         = [Function: eval1]
//│ constrain calls  : 615
//│ annoying  calls  : 674
//│ subtyping calls  : 59240


// Workaround:
:ns
type E1[A] = Lit | Add[E1[A]] | A & ~lit & ~add
def eval1_ty: ('a -> int) -> E1['a] -> int
//│ Defined type alias E1[=A]
//│ eval1_ty: forall 'a. ('a -> int) -> E1['a] -> int
//│         = <missing implementation>

eval1_ty
//│ res: ('a -> int) -> E1['a] -> int
//│    = <no result>
//│      eval1_ty is not implemented

:stats
def eval1_ty = eval1
//│ ('a -> 'val & 'b -> int & 'c -> int) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | (Lit with {val: 'val}) | 'a & ~#Add & ~#Lit) -> (int | 'val)
//│   where
//│     'lhs <: (Add[?] with {lhs: 'lhs, rhs: 'rhs}) | Lit | 'b & ~#Add & ~#Lit
//│     'rhs <: (Add[?] with {lhs: 'lhs, rhs: 'rhs}) | Lit | 'c & ~#Add & ~#Lit
//│   <:  eval1_ty:
//│ ('a -> int) -> E1['a] -> int
//│         = [Function: eval1_ty2]
//│ constrain calls  : 190
//│ annoying  calls  : 111
//│ subtyping calls  : 1820


:stats
rec def pretty1 k e = case e of {
  | Lit -> intToString e.val
  | Add -> concat (pretty1 k e.lhs) (pretty1 k e.rhs)
  | _ -> k e
  }
//│ pretty1: ('a -> 'b & 'c -> string & 'd -> string) -> ((Add[?] with {lhs: 'lhs, rhs: 'rhs}) | Lit | 'a & ~#Add & ~#Lit) -> (string | 'b)
//│   where
//│     'lhs <: (Add[?] with {lhs: 'lhs, rhs: 'rhs}) | Lit | 'c & ~#Add & ~#Lit
//│     'rhs <: (Add[?] with {lhs: 'lhs, rhs: 'rhs}) | Lit | 'd & ~#Add & ~#Lit
//│        = [Function: pretty1]
//│ constrain calls  : 126
//│ annoying  calls  : 0
//│ subtyping calls  : 608


:stats
rec def prettier1 k ev e = case e of {
  | Lit -> intToString e.val
  | Add ->
      if ev e.lhs == 0 then prettier1 k ev e.rhs
      else if ev e.rhs == 0 then prettier1 k ev e.lhs
      else concat (prettier1 k ev e.lhs) (prettier1 k ev e.rhs)
  | _ -> k e
  }
//│ prettier1: ('a -> 'b & 'c -> string & 'd -> string & 'e -> string & 'f -> string) -> ('rhs -> number & 'lhs -> number & 'rhs0 -> number & 'lhs0 -> number & 'rhs1 -> number & 'lhs1 -> number & 'rhs2 -> number & 'lhs2 -> number & 'rhs3 -> number & 'lhs3 -> number) -> ((Add[?] with {lhs: 'lhs4 & 'lhs, rhs: 'rhs4 & 'rhs}) | Lit | 'a & ~#Add & ~#Lit) -> (string | 'b)
//│   where
//│     'lhs4 <: ((Add[?] with {lhs: 'lhs1 & 'lhs4, rhs: 'rhs1 & 'rhs4}) | Lit | 'e & ~#Add & ~#Lit) & ((Add[?] with {lhs: 'lhs2 & 'lhs4, rhs: 'rhs2 & 'rhs4}) | Lit | 'c & ~#Add & ~#Lit)
//│     'rhs4 <: ((Add[?] with {lhs: 'lhs0 & 'lhs4, rhs: 'rhs0 & 'rhs4}) | Lit | 'd & ~#Add & ~#Lit) & ((Add[?] with {lhs: 'lhs3 & 'lhs4, rhs: 'rhs3 & 'rhs4}) | Lit | 'f & ~#Add & ~#Lit)
//│          = [Function: prettier1]
//│ constrain calls  : 496
//│ annoying  calls  : 0
//│ subtyping calls  : 2237

:stats
rec def prettier11 k ev e = case e of {
  | Lit -> intToString e.val
  | Add ->
      let tmp = pretty1 k e.lhs
      in if ev e.rhs == 0 then tmp else concat tmp (prettier11 k ev e.rhs)
  | _ -> k e
  }
//│ prettier11: ('a -> string & 'b -> string & 'c -> 'd & 'e -> string & 'f -> string & 'g -> string & 'h -> string & 'i -> string) -> ('rhs -> number & 'rhs0 -> number) -> ((Add[?] with {lhs: (Add[?] with {lhs: 'lhs, rhs: 'rhs1}) | Lit | 'a & ~#Add & ~#Lit, rhs: 'rhs2 & 'rhs}) | Lit | 'c & ~#Add & ~#Lit) -> (string | 'd)
//│   where
//│     'rhs2 <: (Add[?] with {lhs: (Add[?] with {lhs: 'lhs0, rhs: 'rhs3}) | Lit | 'f & ~#Add & ~#Lit, rhs: 'rhs0 & 'rhs2}) | Lit | 'h & ~#Add & ~#Lit
//│     'lhs0 <: (Add[?] with {lhs: 'lhs0, rhs: 'rhs3}) | Lit | 'i & ~#Add & ~#Lit
//│     'rhs3 <: (Add[?] with {lhs: 'lhs0, rhs: 'rhs3}) | Lit | 'g & ~#Add & ~#Lit
//│     'lhs <: (Add[?] with {lhs: 'lhs, rhs: 'rhs1}) | Lit | 'e & ~#Add & ~#Lit
//│     'rhs1 <: (Add[?] with {lhs: 'lhs, rhs: 'rhs1}) | Lit | 'b & ~#Add & ~#Lit
//│           = [Function: prettier11]
//│ constrain calls  : 250
//│ annoying  calls  : 0
//│ subtyping calls  : 1448

// Doesn't make much sense, but generates very ugly type unless aggressively simplified:
:stats
rec def prettier12 k ev e = case e of {
  | Lit -> intToString e.val
  | Add ->
      let tmp = pretty1 k e.lhs
      in if ev e == 0 then tmp else concat tmp (pretty1 k e.rhs)
  | _ -> k e
  }
//│ prettier12: ('a -> string & 'b -> string & 'c -> string & 'd -> string & 'e -> string & 'f -> 'g & 'h -> string) -> ('i -> number) -> ((Add[?] with {lhs: (Add[?] with {lhs: 'lhs, rhs: 'rhs}) | Lit | 'a & ~#Add & ~#Lit, rhs: (Add[?] with {lhs: 'lhs0, rhs: 'rhs0}) | Lit | 'd & ~#Add & ~#Lit}) & 'i | Lit | 'f & ~#Add & ~#Lit) -> (string | 'g)
//│   where
//│     'lhs0 <: (Add[?] with {lhs: 'lhs0, rhs: 'rhs0}) | Lit | 'h & ~#Add & ~#Lit
//│     'rhs0 <: (Add[?] with {lhs: 'lhs0, rhs: 'rhs0}) | Lit | 'e & ~#Add & ~#Lit
//│     'lhs <: (Add[?] with {lhs: 'lhs, rhs: 'rhs}) | Lit | 'c & ~#Add & ~#Lit
//│     'rhs <: (Add[?] with {lhs: 'lhs, rhs: 'rhs}) | Lit | 'b & ~#Add & ~#Lit
//│           = [Function: prettier12]
//│ constrain calls  : 238
//│ annoying  calls  : 0
//│ subtyping calls  : 1471


:stats
e1 = Add{lhs = Lit {val = 1}; rhs = Add{lhs = Lit {val = 2}; rhs = Lit {val = 3}}}
eval1 done e1
pretty1 done e1
prettier1 done (eval1 done) e1
prettier11 done (eval1 done) e1
prettier12 done (eval1 done) e1
//│ e1: Add['E] with {lhs: Lit & {val: 1}, rhs: Add['E0] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}
//│   where
//│     'E :> (Add['E0] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}) | Lit & {val: 1}
//│     'E0 :> Lit & {val: 2 | 3}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Add { lhs: Lit { val: 2 }, rhs: Lit { val: 3 } }
//│     }
//│ res: int
//│    = 6
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'
//│ constrain calls  : 2320
//│ annoying  calls  : 605
//│ subtyping calls  : 20889


e1 = add (lit 1) (add (lit 2) (lit 3))
eval1 done e1
pretty1 done e1
prettier1 done (eval1 done) e1
prettier11 done (eval1 done) e1
prettier12 done (eval1 done) e1
//│ e1: Add['E] with {lhs: Lit & {val: 1}, rhs: Add['E0] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}
//│   where
//│     'E :> (Add['E0] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}) | Lit & {val: 1}
//│     'E0 :> Lit & {val: 2 | 3}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Add { lhs: Lit { val: 2 }, rhs: Lit { val: 3 } }
//│     }
//│ res: int
//│    = 6
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'



class Nega[E]: { arg: E }
def nega arg = Nega { arg }
//│ Defined class Nega[+E]
//│ nega: 'arg -> Nega['arg]
//│     = [Function: nega]



rec def eval2 k = eval1 (fun x -> case x of {
  | Nega -> 0 - (eval2 k x.arg)
  | _ -> k x
  })
//│ eval2: ('a -> int & 'b -> int) -> ((Add[?] with {lhs: 'rhs, rhs: 'rhs}) | (Lit with {val: 'val}) | Nega[?] & {arg: 'rhs0} | 'a & ~#Add & ~#Lit & ~#Nega) -> (int | 'val)
//│   where
//│     'rhs <: (Add[?] with {lhs: 'rhs, rhs: 'rhs}) | Lit | Nega[?] & {arg: 'rhs0} | 'a & ~#Add & ~#Lit & ~#Nega
//│     'rhs0 <: (Add[?] with {lhs: 'rhs0, rhs: 'rhs0}) | Lit | Nega[?] & {arg: 'rhs0} | 'b & ~#Add & ~#Lit & ~#Nega
//│      = [Function: eval2]


:stats
rec def prettier2 k ev = prettier1 (fun x -> case x of {
  | Nega -> concat "-" (prettier2 k ev x.arg)
  | _ -> k x
  }) ev
//│ prettier2: ('a -> string & 'b -> string) -> ('rhs -> number & 'lhs -> number & 'rhs0 -> number & 'lhs0 -> number & 'rhs1 -> number & 'lhs1 -> number & 'rhs2 -> number & 'lhs2 -> number & 'rhs3 -> number & 'lhs3 -> number & 'rhs4 -> number & 'lhs4 -> number & 'rhs5 -> number & 'lhs5 -> number & 'rhs6 -> number & 'lhs6 -> number & 'rhs7 -> number & 'lhs7 -> number & 'rhs8 -> number & 'lhs8 -> number) -> ((Add[?] with {lhs: 'lhs & 'lhs9, rhs: 'rhs & 'rhs9}) | Lit | Nega[?] & {arg: 'arg} | 'a & ~#Add & ~#Lit & ~#Nega) -> string
//│   where
//│     'lhs9 <: ((Add[?] with {lhs: 'lhs5 & 'lhs9, rhs: 'rhs5 & 'rhs9}) | Lit | Nega[?] & {arg: 'arg} | 'a & ~#Add & ~#Lit & ~#Nega) & ((Add[?] with {lhs: 'lhs6 & 'lhs9, rhs: 'rhs6 & 'rhs9}) | Lit | Nega[?] & {arg: 'arg} | 'a & ~#Add & ~#Lit & ~#Nega)
//│     'rhs9 <: ((Add[?] with {lhs: 'lhs7 & 'lhs9, rhs: 'rhs7 & 'rhs9}) | Lit | Nega[?] & {arg: 'arg} | 'a & ~#Add & ~#Lit & ~#Nega) & ((Add[?] with {lhs: 'lhs8 & 'lhs9, rhs: 'rhs8 & 'rhs9}) | Lit | Nega[?] & {arg: 'arg} | 'a & ~#Add & ~#Lit & ~#Nega)
//│     'arg <: (Add[?] with {lhs: 'lhs4 & 'lhs10, rhs: 'rhs4 & 'rhs10}) | Lit | Nega[?] & {arg: 'arg} | 'b & ~#Add & ~#Lit & ~#Nega
//│     'lhs10 <: ((Add[?] with {lhs: 'lhs1 & 'lhs10, rhs: 'rhs1 & 'rhs10}) | Lit | Nega[?] & {arg: 'arg} | 'b & ~#Add & ~#Lit & ~#Nega) & ((Add[?] with {lhs: 'lhs2 & 'lhs10, rhs: 'rhs2 & 'rhs10}) | Lit | Nega[?] & {arg: 'arg} | 'b & ~#Add & ~#Lit & ~#Nega)
//│     'rhs10 <: ((Add[?] with {lhs: 'lhs0 & 'lhs10, rhs: 'rhs0 & 'rhs10}) | Lit | Nega[?] & {arg: 'arg} | 'b & ~#Add & ~#Lit & ~#Nega) & ((Add[?] with {lhs: 'lhs3 & 'lhs10, rhs: 'rhs3 & 'rhs10}) | Lit | Nega[?] & {arg: 'arg} | 'b & ~#Add & ~#Lit & ~#Nega)
//│          = [Function: prettier2]
//│ constrain calls  : 365
//│ annoying  calls  : 0
//│ subtyping calls  : 3008

:stats
rec def prettier22 k ev = prettier12 (fun x -> case x of {
  | Nega -> concat "-" (prettier22 k ev x.arg)
  | _ -> k x
  }) ev
//│ prettier22: ('a -> string & 'b -> string) -> ('c -> number & 'd -> number) -> ((Add[?] with {lhs: 'rhs, rhs: 'rhs}) & 'c | Lit | Nega[?] & {arg: 'arg} | 'a & ~#Add & ~#Lit & ~#Nega) -> string
//│   where
//│     'rhs <: (Add[?] with {lhs: 'rhs, rhs: 'rhs}) | Lit | Nega[?] & {arg: 'arg} | 'a & ~#Add & ~#Lit & ~#Nega
//│     'arg <: (Add[?] with {lhs: 'rhs0, rhs: 'rhs0}) & 'd | Lit | Nega[?] & {arg: 'arg} | 'b & ~#Add & ~#Lit & ~#Nega
//│     'rhs0 <: (Add[?] with {lhs: 'rhs0, rhs: 'rhs0}) | Lit | Nega[?] & {arg: 'arg} | 'b & ~#Add & ~#Lit & ~#Nega
//│           = [Function: prettier22]
//│ constrain calls  : 369
//│ annoying  calls  : 0
//│ subtyping calls  : 3685



:stats
eval2 done e1
//│ res: int
//│    = 6
//│ constrain calls  : 209
//│ annoying  calls  : 60
//│ subtyping calls  : 1325

e2 = add (lit 1) (nega e1)
//│ e2: Add['E] with {lhs: Lit & {val: 1}, rhs: Nega[forall 'E0, 'E1. Add['E1] with {lhs: Lit & {val: 1}, rhs: Add['E0] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}]}
//│   where
//│     'E :> Lit & {val: 1} | Nega[forall 'E0, 'E1. Add['E1] with {lhs: Lit & {val: 1}, rhs: Add['E0] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}]
//│     'E1 :> (Add['E0] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}) | Lit & {val: 1}
//│     'E0 :> Lit & {val: 2 | 3}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Nega { arg: Add { lhs: [Lit], rhs: [Add] } }
//│     }

:stats
eval2 done e2
//│ res: int
//│    = -5
//│ constrain calls  : 308
//│ annoying  calls  : 103
//│ subtyping calls  : 2063

d2 = nega (add (lit 1) (nega (lit 1)))
//│ d2: Nega[Add['E] with {lhs: Lit & {val: 1}, rhs: Nega[Lit & {val: 1}]}]
//│   where
//│     'E :> Lit & {val: 1} | Nega[Lit & {val: 1}]
//│   = Nega { arg: Add { lhs: Lit { val: 1 }, rhs: Nega { arg: [Lit] } } }

:stats
eval2 done d2
//│ res: int
//│    = 0
//│ constrain calls  : 214
//│ annoying  calls  : 71
//│ subtyping calls  : 1355


prettier2 done
//│ res: ('rhs -> number & 'lhs -> number & 'rhs0 -> number & 'lhs0 -> number & 'rhs1 -> number & 'lhs1 -> number & 'rhs2 -> number & 'lhs2 -> number & 'rhs3 -> number & 'lhs3 -> number & 'rhs4 -> number & 'lhs4 -> number & 'rhs5 -> number & 'lhs5 -> number & 'rhs6 -> number & 'lhs6 -> number & 'rhs7 -> number & 'lhs7 -> number & 'rhs8 -> number & 'lhs8 -> number) -> ((Add[?] with {lhs: 'lhs & 'lhs9, rhs: 'rhs & 'rhs9}) | Lit | Nega[?] & {arg: 'arg}) -> string
//│   where
//│     'lhs9 <: ((Add[?] with {lhs: 'lhs1 & 'lhs9, rhs: 'rhs1 & 'rhs9}) | Lit | Nega[?] & {arg: 'arg}) & ((Add[?] with {lhs: 'lhs2 & 'lhs9, rhs: 'rhs2 & 'rhs9}) | Lit | Nega[?] & {arg: 'arg})
//│     'rhs9 <: ((Add[?] with {lhs: 'lhs0 & 'lhs9, rhs: 'rhs0 & 'rhs9}) | Lit | Nega[?] & {arg: 'arg}) & ((Add[?] with {lhs: 'lhs3 & 'lhs9, rhs: 'rhs3 & 'rhs9}) | Lit | Nega[?] & {arg: 'arg})
//│     'arg <: (Add[?] with {lhs: 'lhs8 & 'lhs10, rhs: 'rhs8 & 'rhs10}) | Lit | Nega[?] & {arg: 'arg}
//│     'lhs10 <: ((Add[?] with {lhs: 'lhs5 & 'lhs10, rhs: 'rhs5 & 'rhs10}) | Lit | Nega[?] & {arg: 'arg}) & ((Add[?] with {lhs: 'lhs6 & 'lhs10, rhs: 'rhs6 & 'rhs10}) | Lit | Nega[?] & {arg: 'arg})
//│     'rhs10 <: ((Add[?] with {lhs: 'lhs4 & 'lhs10, rhs: 'rhs4 & 'rhs10}) | Lit | Nega[?] & {arg: 'arg}) & ((Add[?] with {lhs: 'lhs7 & 'lhs10, rhs: 'rhs7 & 'rhs10}) | Lit | Nega[?] & {arg: 'arg})
//│    = [Function (anonymous)]

prettier22 done
//│ res: ('a -> number & 'b -> number) -> ((Add[?] with {lhs: 'rhs, rhs: 'rhs}) & 'a | Lit | Nega[?] & {arg: 'arg}) -> string
//│   where
//│     'rhs <: (Add[?] with {lhs: 'rhs, rhs: 'rhs}) | Lit | Nega[?] & {arg: 'arg}
//│     'arg <: (Add[?] with {lhs: 'rhs, rhs: 'rhs}) & 'b | Lit | Nega[?] & {arg: 'arg}
//│    = [Function (anonymous)]

:stats
prettier2 done (eval1 done)
//│ res: 'rhs -> string
//│   where
//│     'rhs <: (Add[?] with {lhs: 'rhs & 'rhs0, rhs: 'rhs & 'rhs0}) | Lit | Nega[?] & {arg: 'rhs}
//│     'rhs0 <: (Add[?] with {lhs: 'rhs0, rhs: 'rhs0}) | Lit
//│    = [Function (anonymous)]
//│ constrain calls  : 667
//│ annoying  calls  : 0
//│ subtyping calls  : 5088


prettier22 done (eval1 done)
//│ res: ((Add[?] with {lhs: 'rhs & 'rhs0, rhs: 'rhs & 'rhs0}) | Lit | Nega[?] & {arg: 'arg}) -> string
//│   where
//│     'rhs0 <: (Add[?] with {lhs: 'rhs0, rhs: 'rhs0}) | Lit | Nega[?] & {arg: 'arg}
//│     'arg <: (Add[?] with {lhs: 'rhs & 'rhs0, rhs: 'rhs & 'rhs0}) | Lit | Nega[?] & {arg: 'arg}
//│     'rhs <: (Add[?] with {lhs: 'rhs, rhs: 'rhs}) | Lit
//│    = [Function (anonymous)]

// TODO could probably merge `a` and `b` here!
:stats
prettier2 done (eval2 done)
//│ res: ((Add[?] with {lhs: 'lhs & 'rhs, rhs: 'rhs0 & 'rhs}) | Lit | Nega[?] & {arg: 'arg}) -> string
//│   where
//│     'lhs <: (Add[?] with {lhs: 'lhs & 'rhs, rhs: 'rhs0 & 'rhs}) | Lit | Nega[?] & {arg: 'arg}
//│     'rhs0 <: (Add[?] with {lhs: 'lhs & 'rhs, rhs: 'rhs0 & 'rhs}) | Lit | Nega[?] & {arg: 'arg}
//│     'arg <: (Add[?] with {lhs: 'lhs0 & 'rhs, rhs: 'rhs1 & 'rhs}) | Lit | Nega[?] & {arg: 'arg}
//│     'lhs0 <: (Add[?] with {lhs: 'lhs0 & 'rhs, rhs: 'rhs1 & 'rhs}) | Lit | Nega[?] & {arg: 'arg}
//│     'rhs1 <: (Add[?] with {lhs: 'lhs0 & 'rhs, rhs: 'rhs1 & 'rhs}) | Lit | Nega[?] & {arg: 'arg}
//│     'rhs <: (Add[?] with {lhs: 'rhs, rhs: 'rhs}) | Lit | Nega[?] & {arg: 'rhs}
//│    = [Function (anonymous)]
//│ constrain calls  : 772
//│ annoying  calls  : 0
//│ subtyping calls  : 12004

prettier2 done (eval2 done) e2
prettier2 done (eval2 done) d2
//│ res: string
//│    = '1-123'
//│ res: string
//│    = '-1-1'

:stats
prettier22 done (eval2 done)
prettier22 done (eval2 done) e2
prettier22 done (eval2 done) d2
//│ res: ((Add[?] with {lhs: 'rhs & 'rhs0, rhs: 'rhs & 'rhs0}) | Lit | Nega[?] & {arg: 'arg}) -> string
//│   where
//│     'rhs0 <: (Add[?] with {lhs: 'rhs0, rhs: 'rhs0}) | Lit | Nega[?] & {arg: 'arg}
//│     'arg <: (Add[?] with {lhs: 'rhs & 'rhs0, rhs: 'rhs & 'rhs0}) | Lit | Nega[?] & {arg: 'arg}
//│     'rhs <: (Add[?] with {lhs: 'rhs, rhs: 'rhs}) | Lit | Nega[?] & {arg: 'rhs}
//│    = [Function (anonymous)]
//│ res: string
//│    = '1-123'
//│ res: string
//│    = '-1'
//│ constrain calls  : 1484
//│ annoying  calls  : 390
//│ subtyping calls  : 12705




// === === === ERROR CASES === === === //


:ShowRelativeLineNums


:e
eval1 done e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	eval1 done e2
//│ ║        	^^^^^^^^^^^^^
//│ ╟── application of type `Nega[?E] & {Nega#E = ?E, arg: ?arg}` does not match type `nothing`
//│ ║  l.413: 	def nega arg = Nega { arg }
//│ ║         	               ^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.4: 	def done x = case x of {}
//│ ║       	                  ^
//│ ╟── from field selection:
//│ ║  l.83: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ╙──      	                                   ^^^^^
//│ res: error | int
//│ Runtime error:
//│   Error: non-exhaustive case expression


:e
prettier2 done eval1 e1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval1 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (forall ?b, ?c. ?val | ?b | ?c)` is not an instance of type `number`
//│ ║  l.81: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.82: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.83: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.84: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.85: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.301: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ res: error
//│    = '123'


:e
:stats
prettier2 done (eval1 done) e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done (eval1 done) e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Nega[?E] & {Nega#E = ?E, arg: ?arg}` does not match type `nothing`
//│ ║  l.413: 	def nega arg = Nega { arg }
//│ ║         	               ^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.4: 	def done x = case x of {}
//│ ║       	                  ^
//│ ╟── from field selection:
//│ ║  l.301: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	                 ^^^^^
//│ res: error | string
//│ Runtime error:
//│   Error: non-exhaustive case expression
//│ constrain calls  : 1577
//│ annoying  calls  : 361
//│ subtyping calls  : 15140

:e
:stats
prettier2 done eval2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (forall ?b, ?c. ?val | ?b | ?c)` is not an instance of type `number`
//│ ║  l.81: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.82: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.83: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.84: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.85: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.301: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ res: error
//│    = [Function (anonymous)]
//│ constrain calls  : 185
//│ annoying  calls  : 0
//│ subtyping calls  : 1227

:e
:stats
prettier2 done eval2 e1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (forall ?b, ?c. ?val | ?b | ?c)` is not an instance of type `number`
//│ ║  l.81: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.82: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.83: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.84: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.85: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.301: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ res: error
//│    = '123'
//│ constrain calls  : 192
//│ annoying  calls  : 0
//│ subtyping calls  : 1237

:e
:stats
prettier2 done eval2 e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (forall ?b, ?c. ?val | ?b | ?c)` is not an instance of type `number`
//│ ║  l.81: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.82: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.83: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.84: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.85: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.301: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ res: error
//│    = '1-123'
//│ constrain calls  : 192
//│ annoying  calls  : 0
//│ subtyping calls  : 1237

:e
:stats
prettier2 done eval2 d2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 d2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (forall ?b, ?c. ?val | ?b | ?c)` is not an instance of type `number`
//│ ║  l.81: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.82: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.83: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.84: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.85: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.301: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ res: error
//│    = '-1-1'
//│ constrain calls  : 192
//│ annoying  calls  : 0
//│ subtyping calls  : 1237

:e
:stats
prettier2 done eval1 e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval1 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (forall ?b, ?c. ?val | ?b | ?c)` is not an instance of type `number`
//│ ║  l.81: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.82: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.83: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.84: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.85: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.301: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ res: error
//│    = '1-123'
//│ constrain calls  : 172
//│ annoying  calls  : 0
//│ subtyping calls  : 733

