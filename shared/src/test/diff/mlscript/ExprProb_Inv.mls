
def intToString: int -> string
def intToString x = toString x
def done x = case x of {}
//│ intToString: int -> string
//│            = <missing implementation>
//│ anything -> string
//│   <:  intToString:
//│ int -> string
//│            = [Function: intToString]
//│ done: nothing -> nothing
//│     = [Function: done]



class Lit: { val: int }
class Add[E]: { lhs: E; rhs: E }
  method Inv (x: E) = x
def lit val = Lit { val }
def add lhs rhs = Add { lhs; rhs }
//│ Defined class Lit
//│ Defined class Add[=E]
//│ Defined Add.Inv: Add['E] -> 'E -> 'E
//│ lit: (int & 'val) -> (Lit with {val: 'val})
//│    = [Function: lit]
//│ add: ('lhs & 'E) -> ('E & 'rhs) -> (Add['E] with {lhs: 'lhs, rhs: 'rhs})
//│    = [Function: add]



rec def eval1_stub k e = case e of {
  | Add -> eval1_stub k e.lhs
  | _ -> k e
  }
//│ eval1_stub: ('a -> 'b) -> 'c -> 'b
//│   where
//│     'c <: (Add[?]\rhs with {lhs: 'c}) | 'a & ~add
//│           = [Function: eval1_stub]

rec def eval1_stub k e = case e of {
  | Add -> eval1_stub k e.lhs + eval1_stub k e.rhs
  | _ -> k e
  }
//│ eval1_stub: ('a -> int) -> 'b -> int
//│   where
//│     'b <: (Add[?] with {lhs: 'b, rhs: 'b}) | 'a & ~add
//│           = [Function: eval1_stub1]

:ns
rec def eval1_stub e = case e of {
  | Lit -> 1
  | Add -> eval1_stub e.lhs
  | _ -> 0
  }
//│ eval1_stub: forall 'eval1_stub, 'a, 'b, 'c, 'lhs, 'd, 'e. 'eval1_stub
//│   where
//│     'eval1_stub :> 'a -> (1 | 'd | 0)
//│                 <: 'lhs -> 'd
//│     'd :> 1 | 'd | 0
//│     'a <: lit & 'b | (add & 'c | 'e & ~add) & ~lit
//│     'c <: {lhs: 'lhs}
//│     'lhs <: 'a
//│           = [Function: eval1_stub2]

eval1_stub
//│ res: 'a -> (0 | 1)
//│   where
//│     'a <: (Add[?]\rhs with {lhs: 'a}) | Lit | ~Add[?] & ~Lit
//│    = [Function: eval1_stub2]

// def eval1: ('b -> int) -> Expr['b] -> int
:stats
rec def eval1 k e = case e of {
  | Lit -> e.val
  | Add -> eval1 k e.lhs + eval1 k e.rhs
  | _ -> k e
  }
//│ eval1: ('a -> int) -> 'b -> int
//│   where
//│     'b <: (Add[?] with {lhs: 'b, rhs: 'b}) | Lit | 'a & ~add & ~lit
//│      = [Function: eval1]
//│ constrain calls  : 79
//│ annoying  calls  : 0
//│ subtyping calls  : 82

:ns
eval1
//│ res: forall 'eval1, 'a, 'b, 'c, 'val, 'd, 'e, 'lhs, 'f, 'g, 'rhs, 'h, 'i, 'j, 'k. 'eval1
//│   where
//│     'eval1 :> 'a -> 'b -> ('val | 'i | 'k)
//│            <: 'a -> 'g & 'a -> 'e
//│     'e :> 'b -> ('val | 'i | 'k)
//│        <: 'lhs -> 'f
//│     'f :> 'val | 'i | 'k
//│        <: int
//│     'g :> 'b -> ('val | 'i | 'k)
//│        <: 'rhs -> 'h
//│     'h :> 'val | 'i | 'k
//│        <: int
//│     'i := int
//│     'b <: lit & 'c | (add & 'd | 'j & ~add) & ~lit
//│     'd <: {rhs: 'rhs} & {lhs: 'lhs}
//│     'lhs <: 'b
//│     'rhs <: 'b
//│     'c <: {val: 'val}
//│     'val <: int
//│     'a <: 'j -> 'k
//│     'k <: int
//│    = [Function: eval1]

:re
error: ~Add[?]
//│ res: ~Add[?]
//│ Runtime error:
//│   Error: unexpected runtime error

:re
error: ('a & ~Lit) -> 'a
//│ res: ('a & ~Lit) -> 'a
//│ Runtime error:
//│   Error: unexpected runtime error

:re
error: ('a) -> ('a & Add[?])
error: ('a) -> ('a & ~Add[?])
error: ('a & ~Add[?]) -> 'a
//│ res: 'a -> (Add[?] & 'a)
//│ Runtime error:
//│   Error: unexpected runtime error
//│ res: 'a -> ('a & ~Add[?])
//│ Runtime error:
//│   Error: unexpected runtime error
//│ res: ('a & ~Add[?]) -> 'a
//│ Runtime error:
//│   Error: unexpected runtime error

:re
error: ('a & ~add) -> 'a
//│ res: ('a & ~add) -> 'a
//│ Runtime error:
//│   Error: unexpected runtime error

:ns
def eval1_ty_ugly: ('a -> int) -> (Lit | Add['b] | 'a & ~Lit & ~Add[?] as 'b) -> int
//│ eval1_ty_ugly: forall 'a, 'b. ('a -> int) -> 'b -> int
//│   where
//│     'b := Lit | Add['b] | 'a & ~Lit & ~Add[?]
//│              = <missing implementation>

eval1_ty_ugly
//│ res: ('a -> int) -> 'b -> int
//│   where
//│     'b := 'a & ~Add[?] & ~Lit | Add['b] | Lit
//│    = <no result>
//│      eval1_ty_ugly is not implemented

:stats
def eval1_ty_ugly = eval1
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: (Add[?] with {lhs: 'b, rhs: 'b}) | Lit | 'a & ~add & ~lit
//│   <:  eval1_ty_ugly:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b := 'a & ~Add[?] & ~Lit | Add['b] | Lit
//│              = [Function: eval1]
//│ constrain calls  : 79
//│ annoying  calls  : 36
//│ subtyping calls  : 362

:ns
def eval1_ty: ('a -> int) -> (Lit | Add['b] | 'a & ~lit & ~add as 'b) -> int
//│ eval1_ty: forall 'a, 'b. ('a -> int) -> 'b -> int
//│   where
//│     'b := Lit | Add['b] | 'a & ~lit & ~add
//│         = <missing implementation>

eval1_ty
//│ res: ('a -> int) -> 'b -> int
//│   where
//│     'b := 'a & ~add & ~lit | Add['b] | Lit
//│    = <no result>
//│      eval1_ty is not implemented

:stats
def eval1_ty = eval1
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: (Add[?] with {lhs: 'b, rhs: 'b}) | Lit | 'a & ~add & ~lit
//│   <:  eval1_ty:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b := 'a & ~add & ~lit | Add['b] | Lit
//│         = [Function: eval1]
//│ constrain calls  : 79
//│ annoying  calls  : 36
//│ subtyping calls  : 354

:stats
eval1_ty_ugly = eval1_ty
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b := 'a & ~add & ~lit | Add['b] | Lit
//│   <:  eval1_ty_ugly:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b := 'a & ~Add[?] & ~Lit | Add['b] | Lit
//│              = [Function: eval1]
//│ constrain calls  : 16
//│ annoying  calls  : 1
//│ subtyping calls  : 290

:stats
eval1_ty = eval1_ty_ugly
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b := 'a & ~Add[?] & ~Lit | Add['b] | Lit
//│   <:  eval1_ty:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b := 'a & ~add & ~lit | Add['b] | Lit
//│         = [Function: eval1]
//│ constrain calls  : 16
//│ annoying  calls  : 1
//│ subtyping calls  : 1072


// Workaround:
:ns
type E1[A] = Lit | Add[E1[A]] | A & ~lit & ~add
def eval1_ty: ('a -> int) -> E1['a] -> int
//│ Defined type alias E1[=A]
//│ eval1_ty: forall 'a. ('a -> int) -> E1['a] -> int
//│         = <missing implementation>

eval1_ty
//│ res: ('a -> int) -> E1['a] -> int
//│    = <no result>
//│      eval1_ty is not implemented

:stats
def eval1_ty = eval1
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: (Add[?] with {lhs: 'b, rhs: 'b}) | Lit | 'a & ~add & ~lit
//│   <:  eval1_ty:
//│ ('a -> int) -> E1['a] -> int
//│         = [Function: eval1]
//│ constrain calls  : 83
//│ annoying  calls  : 38
//│ subtyping calls  : 211


:stats
rec def pretty1 k e = case e of {
  | Lit -> intToString e.val
  | Add -> concat (pretty1 k e.lhs) (pretty1 k e.rhs)
  | _ -> k e
  }
//│ pretty1: ('a -> string) -> 'b -> string
//│   where
//│     'b <: (Add[?] with {lhs: 'b, rhs: 'b}) | Lit | 'a & ~add & ~lit
//│        = [Function: pretty1]
//│ constrain calls  : 91
//│ annoying  calls  : 0
//│ subtyping calls  : 86


:stats
rec def prettier1 k ev e = case e of {
  | Lit -> intToString e.val
  | Add ->
      if ev e.lhs == 0 then prettier1 k ev e.rhs
      else if ev e.rhs == 0 then prettier1 k ev e.lhs
      else concat (prettier1 k ev e.lhs) (prettier1 k ev e.rhs)
  | _ -> k e
  }
//│ prettier1: ('a -> string) -> ('rhs -> int & 'lhs -> int) -> 'b -> string
//│   where
//│     'b <: (Add[?] with {lhs: 'lhs & 'b, rhs: 'rhs & 'b}) | Lit | 'a & ~add & ~lit
//│          = [Function: prettier1]
//│ constrain calls  : 300
//│ annoying  calls  : 0
//│ subtyping calls  : 110

:stats
rec def prettier11 k ev e = case e of {
  | Lit -> intToString e.val
  | Add ->
      let tmp = pretty1 k e.lhs
      in if ev e.rhs == 0 then tmp else concat tmp (prettier11 k ev e.rhs)
  | _ -> k e
  }
//│ prettier11: ('a -> string & 'b -> string) -> ('rhs -> int) -> 'c -> string
//│   where
//│     'c <: (Add[?] with {lhs: 'd, rhs: 'rhs & 'c}) | Lit | 'a & ~add & ~lit
//│     'd <: (Add[?] with {lhs: 'd, rhs: 'd}) | Lit | 'b & ~add & ~lit
//│           = [Function: prettier11]
//│ constrain calls  : 198
//│ annoying  calls  : 0
//│ subtyping calls  : 198

// Doesn't make much sense, but generates very ugly type unless aggressively simplified:
:stats
rec def prettier12 k ev e = case e of {
  | Lit -> intToString e.val
  | Add ->
      let tmp = pretty1 k e.lhs
      in if ev e == 0 then tmp else concat tmp (pretty1 k e.rhs)
  | _ -> k e
  }
//│ prettier12: ('a -> string & 'b -> 'c & 'd -> string) -> ('e -> int) -> ((Add[?] with {lhs: 'f, rhs: 'g}) & 'e | Lit | 'b & ~add & ~lit) -> (string | 'c)
//│   where
//│     'g <: (Add[?] with {lhs: 'g, rhs: 'g}) | Lit | 'd & ~add & ~lit
//│     'f <: (Add[?] with {lhs: 'f, rhs: 'f}) | Lit | 'a & ~add & ~lit
//│           = [Function: prettier12]
//│ constrain calls  : 169
//│ annoying  calls  : 0
//│ subtyping calls  : 271


:stats
e1 = Add{lhs = Lit {val = 1}; rhs = Add{lhs = Lit {val = 2}; rhs = Lit {val = 3}}}
eval1 done e1
pretty1 done e1
prettier1 done (eval1 done) e1
prettier11 done (eval1 done) e1
prettier12 done (eval1 done) e1
//│ e1: Add['E] with {lhs: Lit & {val: 1}, rhs: Add['E0] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}
//│   where
//│     'E :> (Add['E0] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}) | Lit & {val: 1}
//│     'E0 :> Lit & {val: 2 | 3}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Add { lhs: Lit { val: 2 }, rhs: Lit { val: 3 } }
//│     }
//│ res: int
//│    = 6
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'
//│ constrain calls  : 1410
//│ annoying  calls  : 490
//│ subtyping calls  : 1861


e1 = add (lit 1) (add (lit 2) (lit 3))
eval1 done e1
pretty1 done e1
prettier1 done (eval1 done) e1
prettier11 done (eval1 done) e1
prettier12 done (eval1 done) e1
//│ e1: Add['E] with {lhs: Lit & {val: 1}, rhs: Add['E0] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}
//│   where
//│     'E :> (Add['E0] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}) | Lit & {val: 1}
//│     'E0 :> Lit & {val: 2 | 3}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Add { lhs: Lit { val: 2 }, rhs: Lit { val: 3 } }
//│     }
//│ res: int
//│    = 6
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'
//│ res: string
//│    = '123'



class Nega[E]: { arg: E }
def nega arg = Nega { arg }
//│ Defined class Nega[+E]
//│ nega: 'arg -> Nega['arg]
//│     = [Function: nega]



rec def eval2 k = eval1 (fun x -> case x of {
  | Nega -> 0 - (eval2 k x.arg)
  | _ -> k x
  })
//│ eval2: ('a -> int) -> 'b -> int
//│   where
//│     'b <: (Add[?] with {lhs: 'b, rhs: 'b}) | Lit | Nega[?] & {arg: 'b} | 'a & ~add & ~lit & ~nega
//│      = [Function: eval2]


:stats
rec def prettier2 k ev = prettier1 (fun x -> case x of {
  | Nega -> concat "-" (prettier2 k ev x.arg)
  | _ -> k x
  }) ev
//│ prettier2: ('a -> string) -> ('rhs -> int & 'lhs -> int) -> 'b -> string
//│   where
//│     'b <: (Add[?] with {lhs: 'lhs & 'b, rhs: 'rhs & 'b}) | Lit | Nega[?] & {arg: 'b} | 'a & ~add & ~lit & ~nega
//│          = [Function: prettier2]
//│ constrain calls  : 136
//│ annoying  calls  : 0
//│ subtyping calls  : 194

:stats
rec def prettier22 k ev = prettier12 (fun x -> case x of {
  | Nega -> concat "-" (prettier22 k ev x.arg)
  | _ -> k x
  }) ev
//│ prettier22: ('a -> string) -> ('b -> int) -> 'c -> string
//│   where
//│     'b <: {lhs: 'd, rhs: 'd}
//│     'd <: (Add[?] with {lhs: 'd, rhs: 'd}) | Lit | Nega[?] & {arg: 'c} | 'a & ~add & ~lit & ~nega
//│     'c <: Add[?] & 'b | Lit | Nega[?] & {arg: 'c} | 'a & ~add & ~lit & ~nega
//│           = [Function: prettier22]
//│ constrain calls  : 204
//│ annoying  calls  : 0
//│ subtyping calls  : 458



:stats
eval2 done e1
//│ res: int
//│    = 6
//│ constrain calls  : 204
//│ annoying  calls  : 60
//│ subtyping calls  : 203

e2 = add (lit 1) (nega e1)
//│ e2: Add['E] with {lhs: Lit & {val: 1}, rhs: Nega[forall 'E0, 'E1. Add['E0] with {lhs: Lit & {val: 1}, rhs: Add['E1] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}]}
//│   where
//│     'E :> Lit & {val: 1} | Nega[forall 'E0, 'E1. Add['E0] with {lhs: Lit & {val: 1}, rhs: Add['E1] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}}]
//│     'E0 :> (Add['E1] with {lhs: Lit & {val: 2}, rhs: Lit & {val: 3}}) | Lit & {val: 1}
//│     'E1 :> Lit & {val: 2 | 3}
//│   = Add {
//│       lhs: Lit { val: 1 },
//│       rhs: Nega { arg: Add { lhs: [Lit], rhs: [Add] } }
//│     }

:e
:stats
eval2 done e2
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?b, ?E, ?E0. ?b) -> ?c` exceeded recursion depth limit (100)
//│ ║  l.448: 	eval2 done e2
//│ ║         	^^^^^^^^^^^^^
//│ ╟── while constraining:  (add<> & {Add#E: mut E1747..E1747, lhs: lhs1745, rhs: rhs1749})  <!<  {rhs: rhs1718}
//│ ╟── while constraining:  (add<> & {Add#E: mut E1747..E1747, lhs: lhs1745, rhs: rhs1749})  <!<  α1717
//│ ╟── while constraining:  (add<> & {lhs: lhs1745, rhs: rhs1749, Add#E: mut E1747..E1747})  <!<  ((lit<> & α1715) | (((add<> & α1717) | (α1720 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (add<> & {lhs: lhs1745, rhs: rhs1749, Add#E: mut E1747..E1747})  <!<  α1714
//│ ╟── while constraining:  (add<> & {lhs: lhs1745, rhs: rhs1749, Add#E: mut E1747..E1747})  <!<  rhs1718
//│ ╟── while constraining:  rhs1750  <!<  rhs1718
//│ ╟── while constraining:  (add<> & {Add#E: mut E1744..E1744, lhs: lhs1742, rhs: rhs1750})  <!<  {rhs: rhs1718}
//│ ╟── while constraining:  (add<> & {Add#E: mut E1744..E1744, lhs: lhs1742, rhs: rhs1750})  <!<  α1717
//│ ╟── while constraining:  (add<> & {lhs: lhs1742, rhs: rhs1750, Add#E: mut E1744..E1744})  <!<  ((lit<> & α1715) | (((add<> & α1717) | (α1720 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α1741  <!<  ((lit<> & α1715) | (((add<> & α1717) | (α1720 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1007'  <!<  ((lit<> & α1715) | (((add<> & α1717) | (α1720 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1007'  <!<  α1714
//│ ╟── while constraining:  ∀ 0. α1007'  <!<  arg1724
//│ ╟── while constraining:  ∀ 0. α1007'  <!<  arg1723
//│ ╟── while constraining:  arg1738  <!<  arg1723
//│ ╟── while constraining:  (nega<> & {arg: arg1738, Nega#E: mut E1739..E1739})  <!<  {arg: arg1723}
//│ ╟── while constraining:  (nega<> & {arg: arg1738, Nega#E: mut E1739..E1739})  <!<  α1722
//│ ╟── while constraining:  (nega<> & {arg: arg1738, Nega#E: mut E1739..E1739})  <!<  ((nega<> & α1722) | (α1725 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg1738, Nega#E: mut E1739..E1739})  <!<  α1721
//│ ╟── while constraining:  (nega<> & {arg: arg1738, Nega#E: mut E1739..E1739})  <!<  α1720
//│ ╟── while constraining:  (nega<> & {arg: arg1738, Nega#E: mut E1739..E1739})  <!<  ((lit<> & α1715) | (((add<> & α1717) | (α1720 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg1738, Nega#E: mut E1739..E1739})  <!<  α1714
//│ ╟── while constraining:  (nega<> & {arg: arg1738, Nega#E: mut E1739..E1739})  <!<  rhs1718
//│ ╟── while constraining:  rhs1740  <!<  rhs1718
//│ ╟── while constraining:  (add<> & {Add#E: mut E1737..E1737, lhs: lhs1735, rhs: rhs1740})  <!<  {rhs: rhs1718}
//│ ╟── while constraining:  (add<> & {Add#E: mut E1737..E1737, lhs: lhs1735, rhs: rhs1740})  <!<  α1717
//│ ╟── while constraining:  (add<> & {lhs: lhs1735, rhs: rhs1740, Add#E: mut E1737..E1737})  <!<  ((lit<> & α1715) | (((add<> & α1717) | (α1720 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α1734  <!<  ((lit<> & α1715) | (((add<> & α1717) | (α1720 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1684'  <!<  ((lit<> & α1715) | (((add<> & α1717) | (α1720 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1684'  <!<  α1714
//│ ╟── while constraining:  (∀ 0. α1684',)  <!<  (α1714,)
//│ ╟── while constraining:  (α1714 -> (val1716 | (α1726 | α1727)))  <!<  ((∀ 0. α1684',) -> α1733)
//│ ╙── while constraining:  α1708  <!<  ((∀ 0. α1684',) -> α1733)
//│ res: error
//│    = -5
//│ constrain calls  : 128
//│ annoying  calls  : 38
//│ subtyping calls  : 1060

d2 = nega (add (lit 1) (nega (lit 1)))
//│ d2: Nega[Add['E] with {lhs: Lit & {val: 1}, rhs: Nega[Lit & {val: 1}]}]
//│   where
//│     'E :> Lit & {val: 1} | Nega[Lit & {val: 1}]
//│   = Nega { arg: Add { lhs: Lit { val: 1 }, rhs: Nega { arg: [Lit] } } }

:e
:stats
eval2 done d2
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?b, ?arg, ?lhs, ?val, ?E, ?arg0, ?val0, ?E0, ?rhs, ?E1. ?b) -> ?c` exceeded recursion depth limit (100)
//│ ║  l.499: 	eval2 done d2
//│ ║         	^^^^^^^^^^^^^
//│ ╟── while constraining:  (lit<> & {val: val1891})  <!<  ((lit<> & α1866) | (((add<> & α1868) | (α1871 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (lit<> & {val: val1891})  <!<  α1865
//│ ╟── while constraining:  (lit<> & {val: val1891})  <!<  arg1875
//│ ╟── while constraining:  (lit<> & {val: val1891})  <!<  arg1874
//│ ╟── while constraining:  arg1890  <!<  arg1874
//│ ╟── while constraining:  (nega<> & {arg: arg1890, Nega#E: mut E1892..E1892})  <!<  {arg: arg1874}
//│ ╟── while constraining:  (nega<> & {arg: arg1890, Nega#E: mut E1892..E1892})  <!<  α1873
//│ ╟── while constraining:  (nega<> & {arg: arg1890, Nega#E: mut E1892..E1892})  <!<  ((nega<> & α1873) | (α1876 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg1890, Nega#E: mut E1892..E1892})  <!<  α1872
//│ ╟── while constraining:  (nega<> & {arg: arg1890, Nega#E: mut E1892..E1892})  <!<  α1871
//│ ╟── while constraining:  (nega<> & {arg: arg1890, Nega#E: mut E1892..E1892})  <!<  ((lit<> & α1866) | (((add<> & α1868) | (α1871 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg1890, Nega#E: mut E1892..E1892})  <!<  α1865
//│ ╟── while constraining:  (nega<> & {arg: arg1890, Nega#E: mut E1892..E1892})  <!<  rhs1869
//│ ╟── while constraining:  rhs1893  <!<  rhs1869
//│ ╟── while constraining:  (add<> & {Add#E: mut E1889..E1889, lhs: lhs1887, rhs: rhs1893})  <!<  {rhs: rhs1869}
//│ ╟── while constraining:  (add<> & {Add#E: mut E1889..E1889, lhs: lhs1887, rhs: rhs1893})  <!<  α1868
//│ ╟── while constraining:  (add<> & {lhs: lhs1887, rhs: rhs1893, Add#E: mut E1889..E1889})  <!<  ((lit<> & α1866) | (((add<> & α1868) | (α1871 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (add<> & {lhs: lhs1887, rhs: rhs1893, Add#E: mut E1889..E1889})  <!<  α1865
//│ ╟── while constraining:  (add<> & {lhs: lhs1887, rhs: rhs1893, Add#E: mut E1889..E1889})  <!<  arg1875
//│ ╟── while constraining:  (add<> & {lhs: lhs1887, rhs: rhs1893, Add#E: mut E1889..E1889})  <!<  arg1874
//│ ╟── while constraining:  arg1886  <!<  arg1874
//│ ╟── while constraining:  (nega<> & {arg: arg1886, Nega#E: mut E1894..E1894})  <!<  {arg: arg1874}
//│ ╟── while constraining:  (nega<> & {arg: arg1886, Nega#E: mut E1894..E1894})  <!<  α1873
//│ ╟── while constraining:  (nega<> & {arg: arg1886, Nega#E: mut E1894..E1894})  <!<  ((nega<> & α1873) | (α1876 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg1886, Nega#E: mut E1894..E1894})  <!<  α1872
//│ ╟── while constraining:  (nega<> & {arg: arg1886, Nega#E: mut E1894..E1894})  <!<  α1871
//│ ╟── while constraining:  (nega<> & {arg: arg1886, Nega#E: mut E1894..E1894})  <!<  ((lit<> & α1866) | (((add<> & α1868) | (α1871 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α1885  <!<  ((lit<> & α1866) | (((add<> & α1868) | (α1871 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1842'  <!<  ((lit<> & α1866) | (((add<> & α1868) | (α1871 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1842'  <!<  α1865
//│ ╟── while constraining:  (∀ 0. α1842',)  <!<  (α1865,)
//│ ╟── while constraining:  (α1865 -> (val1867 | (α1877 | α1878)))  <!<  ((∀ 0. α1842',) -> α1884)
//│ ╙── while constraining:  α1859  <!<  ((∀ 0. α1842',) -> α1884)
//│ res: error
//│    = 0
//│ constrain calls  : 128
//│ annoying  calls  : 36
//│ subtyping calls  : 1087


prettier2 done
//│ res: ('rhs -> int & 'lhs -> int) -> 'a -> string
//│   where
//│     'a <: (Add[?] with {lhs: 'lhs & 'a, rhs: 'rhs & 'a}) | Lit | Nega[?] & {arg: 'a}
//│    = [Function (anonymous)]

prettier22 done
//│ res: ('a -> int) -> 'b -> string
//│   where
//│     'a <: {lhs: 'c, rhs: 'c}
//│     'c <: (Add[?] with {lhs: 'c, rhs: 'c}) | Lit | Nega[?] & {arg: 'b}
//│     'b <: Add[?] & 'a | Lit | Nega[?] & {arg: 'b}
//│    = [Function (anonymous)]

:stats
prettier2 done (eval1 done)
//│ res: 'a -> string
//│   where
//│     'a <: (Add[?] with {lhs: 'a & 'b, rhs: 'a & 'b}) | Lit | Nega[?] & {arg: 'a}
//│     'b <: (Add[?] with {lhs: 'b, rhs: 'b}) | Lit
//│    = [Function (anonymous)]
//│ constrain calls  : 93
//│ annoying  calls  : 0
//│ subtyping calls  : 247


prettier22 done (eval1 done)
//│ res: 'a -> string
//│   where
//│     'a <: (Add[?] with {lhs: 'b, rhs: 'b}) & 'c | Lit | Nega[?] & {arg: 'a}
//│     'c <: (Add[?] with {lhs: 'c, rhs: 'c}) | Lit
//│     'b <: (Add[?] with {lhs: 'b, rhs: 'b}) | Lit | Nega[?] & {arg: 'a}
//│    = [Function (anonymous)]

// TODO could probably merge `a` and `b` here!
:stats
prettier2 done (eval2 done)
//│ res: 'a -> string
//│   where
//│     'a <: (Add[?] with {lhs: 'a & 'b, rhs: 'a & 'b}) | Lit | Nega[?] & {arg: 'a}
//│     'b <: (Add[?] with {lhs: 'b, rhs: 'b}) | Lit | Nega[?] & {arg: 'b}
//│    = [Function (anonymous)]
//│ constrain calls  : 106
//│ annoying  calls  : 0
//│ subtyping calls  : 309

:e
prettier2 done (eval2 done) e2
prettier2 done (eval2 done) d2
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?b, ?E, ?E0. ?b) -> ?c` exceeded recursion depth limit (100)
//│ ║  l.590: 	prettier2 done (eval2 done) e2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (add<> & {Add#E: mut E2561..E2561, lhs: lhs2559, rhs: rhs2563})  <!<  {rhs: rhs2502}
//│ ╟── while constraining:  (add<> & {Add#E: mut E2561..E2561, lhs: lhs2559, rhs: rhs2563})  <!<  α2501
//│ ╟── while constraining:  (add<> & {lhs: lhs2559, rhs: rhs2563, Add#E: mut E2561..E2561})  <!<  ((lit<> & α2499) | (((add<> & α2501) | (α2506 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (add<> & {lhs: lhs2559, rhs: rhs2563, Add#E: mut E2561..E2561})  <!<  α2498
//│ ╟── while constraining:  (add<> & {lhs: lhs2559, rhs: rhs2563, Add#E: mut E2561..E2561})  <!<  rhs2502
//│ ╟── while constraining:  rhs2564  <!<  rhs2502
//│ ╟── while constraining:  (add<> & {Add#E: mut E2558..E2558, lhs: lhs2556, rhs: rhs2564})  <!<  {rhs: rhs2502}
//│ ╟── while constraining:  (add<> & {Add#E: mut E2558..E2558, lhs: lhs2556, rhs: rhs2564})  <!<  α2501
//│ ╟── while constraining:  (add<> & {lhs: lhs2556, rhs: rhs2564, Add#E: mut E2558..E2558})  <!<  ((lit<> & α2499) | (((add<> & α2501) | (α2506 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α2555  <!<  ((lit<> & α2499) | (((add<> & α2501) | (α2506 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1007'  <!<  ((lit<> & α2499) | (((add<> & α2501) | (α2506 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1007'  <!<  α2498
//│ ╟── while constraining:  ∀ 0. α1007'  <!<  arg2510
//│ ╟── while constraining:  ∀ 0. α1007'  <!<  arg2509
//│ ╟── while constraining:  arg2552  <!<  arg2509
//│ ╟── while constraining:  (nega<> & {arg: arg2552, Nega#E: mut E2553..E2553})  <!<  {arg: arg2509}
//│ ╟── while constraining:  (nega<> & {arg: arg2552, Nega#E: mut E2553..E2553})  <!<  α2508
//│ ╟── while constraining:  (nega<> & {arg: arg2552, Nega#E: mut E2553..E2553})  <!<  ((nega<> & α2508) | (α2511 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg2552, Nega#E: mut E2553..E2553})  <!<  α2507
//│ ╟── while constraining:  (nega<> & {arg: arg2552, Nega#E: mut E2553..E2553})  <!<  α2506
//│ ╟── while constraining:  (nega<> & {arg: arg2552, Nega#E: mut E2553..E2553})  <!<  ((lit<> & α2499) | (((add<> & α2501) | (α2506 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg2552, Nega#E: mut E2553..E2553})  <!<  α2498
//│ ╟── while constraining:  (nega<> & {arg: arg2552, Nega#E: mut E2553..E2553})  <!<  rhs2502
//│ ╟── while constraining:  rhs2554  <!<  rhs2502
//│ ╟── while constraining:  (add<> & {Add#E: mut E2551..E2551, lhs: lhs2549, rhs: rhs2554})  <!<  {rhs: rhs2502}
//│ ╟── while constraining:  (add<> & {Add#E: mut E2551..E2551, lhs: lhs2549, rhs: rhs2554})  <!<  α2501
//│ ╟── while constraining:  (add<> & {lhs: lhs2549, rhs: rhs2554, Add#E: mut E2551..E2551})  <!<  ((lit<> & α2499) | (((add<> & α2501) | (α2506 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α2548  <!<  ((lit<> & α2499) | (((add<> & α2501) | (α2506 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1684'  <!<  ((lit<> & α2499) | (((add<> & α2501) | (α2506 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1684'  <!<  α2498
//│ ╟── while constraining:  (∀ 0. α1684',)  <!<  (α2498,)
//│ ╟── while constraining:  (α2498 -> (α2512 | (α2513 | α2514)))  <!<  ((∀ 0. α1684',) -> α2547)
//│ ╙── while constraining:  α2546  <!<  ((∀ 0. α1684',) -> α2547)
//│ res: error
//│    = '1-123'
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?b, ?arg, ?lhs, ?val, ?E, ?arg0, ?val0, ?E0, ?rhs, ?E1. ?b) -> ?c` exceeded recursion depth limit (100)
//│ ║  l.591: 	prettier2 done (eval2 done) d2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (lit<> & {val: val2722})  <!<  ((lit<> & α2667) | (((add<> & α2669) | (α2674 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (lit<> & {val: val2722})  <!<  α2666
//│ ╟── while constraining:  (lit<> & {val: val2722})  <!<  arg2678
//│ ╟── while constraining:  (lit<> & {val: val2722})  <!<  arg2677
//│ ╟── while constraining:  arg2721  <!<  arg2677
//│ ╟── while constraining:  (nega<> & {arg: arg2721, Nega#E: mut E2723..E2723})  <!<  {arg: arg2677}
//│ ╟── while constraining:  (nega<> & {arg: arg2721, Nega#E: mut E2723..E2723})  <!<  α2676
//│ ╟── while constraining:  (nega<> & {arg: arg2721, Nega#E: mut E2723..E2723})  <!<  ((nega<> & α2676) | (α2679 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg2721, Nega#E: mut E2723..E2723})  <!<  α2675
//│ ╟── while constraining:  (nega<> & {arg: arg2721, Nega#E: mut E2723..E2723})  <!<  α2674
//│ ╟── while constraining:  (nega<> & {arg: arg2721, Nega#E: mut E2723..E2723})  <!<  ((lit<> & α2667) | (((add<> & α2669) | (α2674 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg2721, Nega#E: mut E2723..E2723})  <!<  α2666
//│ ╟── while constraining:  (nega<> & {arg: arg2721, Nega#E: mut E2723..E2723})  <!<  rhs2670
//│ ╟── while constraining:  rhs2724  <!<  rhs2670
//│ ╟── while constraining:  (add<> & {Add#E: mut E2720..E2720, lhs: lhs2718, rhs: rhs2724})  <!<  {rhs: rhs2670}
//│ ╟── while constraining:  (add<> & {Add#E: mut E2720..E2720, lhs: lhs2718, rhs: rhs2724})  <!<  α2669
//│ ╟── while constraining:  (add<> & {lhs: lhs2718, rhs: rhs2724, Add#E: mut E2720..E2720})  <!<  ((lit<> & α2667) | (((add<> & α2669) | (α2674 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (add<> & {lhs: lhs2718, rhs: rhs2724, Add#E: mut E2720..E2720})  <!<  α2666
//│ ╟── while constraining:  (add<> & {lhs: lhs2718, rhs: rhs2724, Add#E: mut E2720..E2720})  <!<  arg2678
//│ ╟── while constraining:  (add<> & {lhs: lhs2718, rhs: rhs2724, Add#E: mut E2720..E2720})  <!<  arg2677
//│ ╟── while constraining:  arg2717  <!<  arg2677
//│ ╟── while constraining:  (nega<> & {arg: arg2717, Nega#E: mut E2725..E2725})  <!<  {arg: arg2677}
//│ ╟── while constraining:  (nega<> & {arg: arg2717, Nega#E: mut E2725..E2725})  <!<  α2676
//│ ╟── while constraining:  (nega<> & {arg: arg2717, Nega#E: mut E2725..E2725})  <!<  ((nega<> & α2676) | (α2679 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg2717, Nega#E: mut E2725..E2725})  <!<  α2675
//│ ╟── while constraining:  (nega<> & {arg: arg2717, Nega#E: mut E2725..E2725})  <!<  α2674
//│ ╟── while constraining:  (nega<> & {arg: arg2717, Nega#E: mut E2725..E2725})  <!<  ((lit<> & α2667) | (((add<> & α2669) | (α2674 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α2716  <!<  ((lit<> & α2667) | (((add<> & α2669) | (α2674 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1842'  <!<  ((lit<> & α2667) | (((add<> & α2669) | (α2674 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1842'  <!<  α2666
//│ ╟── while constraining:  (∀ 0. α1842',)  <!<  (α2666,)
//│ ╟── while constraining:  (α2666 -> (α2680 | (α2681 | α2682)))  <!<  ((∀ 0. α1842',) -> α2715)
//│ ╙── while constraining:  α2714  <!<  ((∀ 0. α1842',) -> α2715)
//│ res: error
//│    = '-1-1'

:e
:stats
prettier22 done (eval2 done)
prettier22 done (eval2 done) e2
prettier22 done (eval2 done) d2
//│ res: 'a -> string
//│   where
//│     'a <: (Add[?] with {lhs: 'b, rhs: 'b}) & 'c | Lit | Nega[?] & {arg: 'a}
//│     'c <: (Add[?] with {lhs: 'c, rhs: 'c}) | Lit | Nega[?] & {arg: 'c}
//│     'b <: (Add[?] with {lhs: 'b, rhs: 'b}) | Lit | Nega[?] & {arg: 'a}
//│    = [Function (anonymous)]
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?b, ?E, ?E0. ?b) -> ?c` exceeded recursion depth limit (100)
//│ ║  l.672: 	prettier22 done (eval2 done) e2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (add<> & {lhs: lhs3056, rhs: rhs3060, Add#E: mut E3058..E3058})  <!<  ((lit<> & α3025) | (((add<> & α3027) | (α3030 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (add<> & {lhs: lhs3056, rhs: rhs3060, Add#E: mut E3058..E3058})  <!<  α3024
//│ ╟── while constraining:  (add<> & {lhs: lhs3056, rhs: rhs3060, Add#E: mut E3058..E3058})  <!<  rhs3028
//│ ╟── while constraining:  rhs3061  <!<  rhs3028
//│ ╟── while constraining:  (add<> & {Add#E: mut E3055..E3055, lhs: lhs3053, rhs: rhs3061})  <!<  {rhs: rhs3028}
//│ ╟── while constraining:  (add<> & {Add#E: mut E3055..E3055, lhs: lhs3053, rhs: rhs3061})  <!<  α3027
//│ ╟── while constraining:  (add<> & {lhs: lhs3053, rhs: rhs3061, Add#E: mut E3055..E3055})  <!<  ((lit<> & α3025) | (((add<> & α3027) | (α3030 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α3052  <!<  ((lit<> & α3025) | (((add<> & α3027) | (α3030 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1007'  <!<  ((lit<> & α3025) | (((add<> & α3027) | (α3030 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1007'  <!<  α3024
//│ ╟── while constraining:  ∀ 0. α1007'  <!<  arg3034
//│ ╟── while constraining:  ∀ 0. α1007'  <!<  arg3033
//│ ╟── while constraining:  arg3049  <!<  arg3033
//│ ╟── while constraining:  (nega<> & {arg: arg3049, Nega#E: mut E3050..E3050})  <!<  {arg: arg3033}
//│ ╟── while constraining:  (nega<> & {arg: arg3049, Nega#E: mut E3050..E3050})  <!<  α3032
//│ ╟── while constraining:  (nega<> & {arg: arg3049, Nega#E: mut E3050..E3050})  <!<  ((nega<> & α3032) | (α3035 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg3049, Nega#E: mut E3050..E3050})  <!<  α3031
//│ ╟── while constraining:  (nega<> & {arg: arg3049, Nega#E: mut E3050..E3050})  <!<  α3030
//│ ╟── while constraining:  (nega<> & {arg: arg3049, Nega#E: mut E3050..E3050})  <!<  ((lit<> & α3025) | (((add<> & α3027) | (α3030 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg3049, Nega#E: mut E3050..E3050})  <!<  α3024
//│ ╟── while constraining:  (nega<> & {arg: arg3049, Nega#E: mut E3050..E3050})  <!<  rhs3028
//│ ╟── while constraining:  rhs3051  <!<  rhs3028
//│ ╟── while constraining:  (add<> & {Add#E: mut E3048..E3048, lhs: lhs3046, rhs: rhs3051})  <!<  {rhs: rhs3028}
//│ ╟── while constraining:  (add<> & {Add#E: mut E3048..E3048, lhs: lhs3046, rhs: rhs3051})  <!<  α3027
//│ ╟── while constraining:  (add<> & {Add#E: mut E3048..E3048, lhs: lhs3046, rhs: rhs3051})  <!<  ((lit<> & α3025) | (((add<> & α3027) | (α3030 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (add<> & {Add#E: mut E3048..E3048, lhs: lhs3046, rhs: rhs3051})  <!<  α3024
//│ ╟── while constraining:  (add<> & {Add#E: mut E3048..E3048, lhs: lhs3046, rhs: rhs3051})  <!<  α2965
//│ ╟── while constraining:  (add<> & {lhs: lhs3046, rhs: rhs3051, Add#E: mut E3048..E3048})  <!<  ((lit<> & α2979) | (((add<> & α2965) | (α2981 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α3045  <!<  ((lit<> & α2979) | (((add<> & α2965) | (α2981 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1684'  <!<  ((lit<> & α2979) | (((add<> & α2965) | (α2981 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1684'  <!<  α2978
//│ ╟── while constraining:  (∀ 0. α1684',)  <!<  (α2978,)
//│ ╟── while constraining:  (α2978 -> (α3002 | (α3003 | α3011)))  <!<  ((∀ 0. α1684',) -> α3044)
//│ ╙── while constraining:  α3043  <!<  ((∀ 0. α1684',) -> α3044)
//│ res: error
//│    = '1-123'
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?b, ?arg, ?lhs, ?val, ?E, ?arg0, ?val0, ?E0, ?rhs, ?E1. ?b) -> ?c` exceeded recursion depth limit (100)
//│ ║  l.673: 	prettier22 done (eval2 done) d2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (lit<> & {val: val3270})  <!<  arg3252
//│ ╟── while constraining:  arg3269  <!<  arg3252
//│ ╟── while constraining:  (nega<> & {arg: arg3269, Nega#E: mut E3271..E3271})  <!<  {arg: arg3252}
//│ ╟── while constraining:  (nega<> & {arg: arg3269, Nega#E: mut E3271..E3271})  <!<  α3251
//│ ╟── while constraining:  (nega<> & {arg: arg3269, Nega#E: mut E3271..E3271})  <!<  ((nega<> & α3251) | (α3254 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg3269, Nega#E: mut E3271..E3271})  <!<  α3250
//│ ╟── while constraining:  (nega<> & {arg: arg3269, Nega#E: mut E3271..E3271})  <!<  α3249
//│ ╟── while constraining:  (nega<> & {arg: arg3269, Nega#E: mut E3271..E3271})  <!<  ((lit<> & α3244) | (((add<> & α3246) | (α3249 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg3269, Nega#E: mut E3271..E3271})  <!<  α3243
//│ ╟── while constraining:  (nega<> & {arg: arg3269, Nega#E: mut E3271..E3271})  <!<  rhs3247
//│ ╟── while constraining:  rhs3272  <!<  rhs3247
//│ ╟── while constraining:  (add<> & {Add#E: mut E3268..E3268, lhs: lhs3266, rhs: rhs3272})  <!<  {rhs: rhs3247}
//│ ╟── while constraining:  (add<> & {Add#E: mut E3268..E3268, lhs: lhs3266, rhs: rhs3272})  <!<  α3246
//│ ╟── while constraining:  (add<> & {Add#E: mut E3268..E3268, lhs: lhs3266, rhs: rhs3272})  <!<  ((lit<> & α3244) | (((add<> & α3246) | (α3249 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (add<> & {Add#E: mut E3268..E3268, lhs: lhs3266, rhs: rhs3272})  <!<  α3243
//│ ╟── while constraining:  (add<> & {Add#E: mut E3268..E3268, lhs: lhs3266, rhs: rhs3272})  <!<  α3184
//│ ╟── while constraining:  (add<> & {lhs: lhs3266, rhs: rhs3272, Add#E: mut E3268..E3268})  <!<  ((lit<> & α3198) | (((add<> & α3184) | (α3200 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (add<> & {lhs: lhs3266, rhs: rhs3272, Add#E: mut E3268..E3268})  <!<  α3197
//│ ╟── while constraining:  (add<> & {lhs: lhs3266, rhs: rhs3272, Add#E: mut E3268..E3268})  <!<  arg3196
//│ ╟── while constraining:  (add<> & {lhs: lhs3266, rhs: rhs3272, Add#E: mut E3268..E3268})  <!<  arg3203
//│ ╟── while constraining:  arg3265  <!<  arg3203
//│ ╟── while constraining:  (nega<> & {arg: arg3265, Nega#E: mut E3273..E3273})  <!<  {arg: arg3203}
//│ ╟── while constraining:  (nega<> & {arg: arg3265, Nega#E: mut E3273..E3273})  <!<  α3202
//│ ╟── while constraining:  (nega<> & {arg: arg3265, Nega#E: mut E3273..E3273})  <!<  ((nega<> & α3202) | (α3204 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg3265, Nega#E: mut E3273..E3273})  <!<  α3201
//│ ╟── while constraining:  (nega<> & {arg: arg3265, Nega#E: mut E3273..E3273})  <!<  α3200
//│ ╟── while constraining:  (nega<> & {arg: arg3265, Nega#E: mut E3273..E3273})  <!<  ((lit<> & α3198) | (((add<> & α3184) | (α3200 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α3264  <!<  ((lit<> & α3198) | (((add<> & α3184) | (α3200 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1842'  <!<  ((lit<> & α3198) | (((add<> & α3184) | (α3200 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1842'  <!<  α3197
//│ ╟── while constraining:  (∀ 0. α1842',)  <!<  (α3197,)
//│ ╟── while constraining:  (α3197 -> (α3221 | (α3222 | α3230)))  <!<  ((∀ 0. α1842',) -> α3263)
//│ ╙── while constraining:  α3262  <!<  ((∀ 0. α1842',) -> α3263)
//│ res: error
//│    = '-1'
//│ constrain calls  : 489
//│ annoying  calls  : 79
//│ subtyping calls  : 3345




// === === === ERROR CASES === === === //


:ShowRelativeLineNums


:e
eval1 done e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	eval1 done e2
//│ ║        	^^^^^^^^^^^^^
//│ ╟── application of type `Nega[?E] & {Nega#E = ?E, arg: ?arg}` does not match type `nothing`
//│ ║  l.380: 	def nega arg = Nega { arg }
//│ ║         	               ^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.4: 	def done x = case x of {}
//│ ║       	                  ^
//│ ╟── from field selection:
//│ ║  l.75: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ╙──      	                                   ^^^^^
//│ res: error | int
//│ Runtime error:
//│   Error: non-exhaustive case expression


:e
prettier2 done eval1 e1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval1 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (?b | ?c)` is not an instance of type `int`
//│ ║  l.73: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.74: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.75: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.76: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.77: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.274: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval1 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Lit & {val: ?val}` is not a function
//│ ║  l.19: 	def lit val = Lit { val }
//│ ║        	              ^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.76: 	  | _ -> k e
//│ ║        	         ^^^
//│ ╟── from field selection:
//│ ║  l.274: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	                 ^^^^^
//│ res: error
//│    = '123'


:e
:stats
prettier2 done (eval1 done) e2
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?b, ?E, ?E0. ?b) -> ?c` exceeded recursion depth limit (100)
//│ ║  l.+1: 	prettier2 done (eval1 done) e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (add<> & {Add#E: mut E3618..E3618, lhs: lhs3616, rhs: rhs3620})  <!<  {rhs: rhs3567}
//│ ╟── while constraining:  (add<> & {Add#E: mut E3618..E3618, lhs: lhs3616, rhs: rhs3620})  <!<  α3566
//│ ╟── while constraining:  (add<> & {lhs: lhs3616, rhs: rhs3620, Add#E: mut E3618..E3618})  <!<  ((lit<> & α3564) | (((add<> & α3566) | (α3571 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (add<> & {lhs: lhs3616, rhs: rhs3620, Add#E: mut E3618..E3618})  <!<  α3563
//│ ╟── while constraining:  (add<> & {lhs: lhs3616, rhs: rhs3620, Add#E: mut E3618..E3618})  <!<  rhs3567
//│ ╟── while constraining:  rhs3621  <!<  rhs3567
//│ ╟── while constraining:  (add<> & {Add#E: mut E3615..E3615, lhs: lhs3613, rhs: rhs3621})  <!<  {rhs: rhs3567}
//│ ╟── while constraining:  (add<> & {Add#E: mut E3615..E3615, lhs: lhs3613, rhs: rhs3621})  <!<  α3566
//│ ╟── while constraining:  (add<> & {lhs: lhs3613, rhs: rhs3621, Add#E: mut E3615..E3615})  <!<  ((lit<> & α3564) | (((add<> & α3566) | (α3571 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α3612  <!<  ((lit<> & α3564) | (((add<> & α3566) | (α3571 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1007'  <!<  ((lit<> & α3564) | (((add<> & α3566) | (α3571 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1007'  <!<  α3563
//│ ╟── while constraining:  ∀ 0. α1007'  <!<  arg3575
//│ ╟── while constraining:  ∀ 0. α1007'  <!<  arg3574
//│ ╟── while constraining:  arg3609  <!<  arg3574
//│ ╟── while constraining:  (nega<> & {arg: arg3609, Nega#E: mut E3610..E3610})  <!<  {arg: arg3574}
//│ ╟── while constraining:  (nega<> & {arg: arg3609, Nega#E: mut E3610..E3610})  <!<  α3573
//│ ╟── while constraining:  (nega<> & {arg: arg3609, Nega#E: mut E3610..E3610})  <!<  ((nega<> & α3573) | (α3576 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg3609, Nega#E: mut E3610..E3610})  <!<  α3572
//│ ╟── while constraining:  (nega<> & {arg: arg3609, Nega#E: mut E3610..E3610})  <!<  α3571
//│ ╟── while constraining:  (nega<> & {arg: arg3609, Nega#E: mut E3610..E3610})  <!<  ((lit<> & α3564) | (((add<> & α3566) | (α3571 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg3609, Nega#E: mut E3610..E3610})  <!<  α3563
//│ ╟── while constraining:  (nega<> & {arg: arg3609, Nega#E: mut E3610..E3610})  <!<  rhs3567
//│ ╟── while constraining:  rhs3611  <!<  rhs3567
//│ ╟── while constraining:  (add<> & {Add#E: mut E3608..E3608, lhs: lhs3606, rhs: rhs3611})  <!<  {rhs: rhs3567}
//│ ╟── while constraining:  (add<> & {Add#E: mut E3608..E3608, lhs: lhs3606, rhs: rhs3611})  <!<  α3566
//│ ╟── while constraining:  (add<> & {lhs: lhs3606, rhs: rhs3611, Add#E: mut E3608..E3608})  <!<  ((lit<> & α3564) | (((add<> & α3566) | (α3571 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α3605  <!<  ((lit<> & α3564) | (((add<> & α3566) | (α3571 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1684'  <!<  ((lit<> & α3564) | (((add<> & α3566) | (α3571 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1684'  <!<  α3563
//│ ╟── while constraining:  (∀ 0. α1684',)  <!<  (α3563,)
//│ ╟── while constraining:  (α3563 -> (α3577 | (α3578 | α3579)))  <!<  ((∀ 0. α1684',) -> α3604)
//│ ╙── while constraining:  α3603  <!<  ((∀ 0. α1684',) -> α3604)
//│ res: error
//│ Runtime error:
//│   Error: non-exhaustive case expression
//│ constrain calls  : 195
//│ annoying  calls  : 38
//│ subtyping calls  : 1111

:e
:stats
prettier2 done eval2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> ?b` is not an instance of type `int`
//│ ║  l.73: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.74: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.75: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.76: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.77: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.274: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ res: 'a -> string | error
//│   where
//│     'a <: (Add[?] with {lhs: nothing -> int & 'a, rhs: nothing -> int & 'a}) | Lit | Nega[?] & {arg: 'a}
//│    = [Function (anonymous)]
//│ constrain calls  : 77
//│ annoying  calls  : 0
//│ subtyping calls  : 269

:e
:stats
prettier2 done eval2 e1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> ?b` is not an instance of type `int`
//│ ║  l.73: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.74: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.75: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.76: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.77: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.274: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Lit & {val: ?val}` is not a function
//│ ║  l.19: 	def lit val = Lit { val }
//│ ║        	              ^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.389: 	  | _ -> k x
//│ ║         	         ^^^
//│ ╟── from field selection:
//│ ║  l.274: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	                 ^^^^^
//│ res: error
//│    = '123'
//│ constrain calls  : 388
//│ annoying  calls  : 108
//│ subtyping calls  : 1904

:e
:stats
prettier2 done eval2 e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> ?b` is not an instance of type `int`
//│ ║  l.73: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.74: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.75: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.76: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.77: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.274: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?b, ?E, ?E0. ?b) -> ?c` exceeded recursion depth limit (100)
//│ ║  l.+1: 	prettier2 done eval2 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (add<> & {Add#E: mut E4159..E4159, lhs: lhs4157, rhs: rhs4161})  <!<  {rhs: rhs4045}
//│ ╟── while constraining:  (add<> & {Add#E: mut E4159..E4159, lhs: lhs4157, rhs: rhs4161})  <!<  α4044
//│ ╟── while constraining:  (add<> & {lhs: lhs4157, rhs: rhs4161, Add#E: mut E4159..E4159})  <!<  ((lit<> & α4042) | (((add<> & α4044) | (α4049 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (add<> & {lhs: lhs4157, rhs: rhs4161, Add#E: mut E4159..E4159})  <!<  α4041
//│ ╟── while constraining:  (add<> & {lhs: lhs4157, rhs: rhs4161, Add#E: mut E4159..E4159})  <!<  rhs4045
//│ ╟── while constraining:  rhs4162  <!<  rhs4045
//│ ╟── while constraining:  (add<> & {Add#E: mut E4156..E4156, lhs: lhs4154, rhs: rhs4162})  <!<  {rhs: rhs4045}
//│ ╟── while constraining:  (add<> & {Add#E: mut E4156..E4156, lhs: lhs4154, rhs: rhs4162})  <!<  α4044
//│ ╟── while constraining:  (add<> & {lhs: lhs4154, rhs: rhs4162, Add#E: mut E4156..E4156})  <!<  ((lit<> & α4042) | (((add<> & α4044) | (α4049 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α4153  <!<  ((lit<> & α4042) | (((add<> & α4044) | (α4049 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1007'  <!<  ((lit<> & α4042) | (((add<> & α4044) | (α4049 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1007'  <!<  α4041
//│ ╟── while constraining:  ∀ 0. α1007'  <!<  arg4053
//│ ╟── while constraining:  ∀ 0. α1007'  <!<  arg4052
//│ ╟── while constraining:  arg4150  <!<  arg4052
//│ ╟── while constraining:  (nega<> & {arg: arg4150, Nega#E: mut E4151..E4151})  <!<  {arg: arg4052}
//│ ╟── while constraining:  (nega<> & {arg: arg4150, Nega#E: mut E4151..E4151})  <!<  α4051
//│ ╟── while constraining:  (nega<> & {arg: arg4150, Nega#E: mut E4151..E4151})  <!<  ((nega<> & α4051) | (α4054 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg4150, Nega#E: mut E4151..E4151})  <!<  α4050
//│ ╟── while constraining:  (nega<> & {arg: arg4150, Nega#E: mut E4151..E4151})  <!<  α4049
//│ ╟── while constraining:  (nega<> & {arg: arg4150, Nega#E: mut E4151..E4151})  <!<  ((lit<> & α4042) | (((add<> & α4044) | (α4049 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg4150, Nega#E: mut E4151..E4151})  <!<  α4041
//│ ╟── while constraining:  (nega<> & {arg: arg4150, Nega#E: mut E4151..E4151})  <!<  rhs4045
//│ ╟── while constraining:  rhs4152  <!<  rhs4045
//│ ╟── while constraining:  (add<> & {Add#E: mut E4149..E4149, lhs: lhs4147, rhs: rhs4152})  <!<  {rhs: rhs4045}
//│ ╟── while constraining:  (add<> & {Add#E: mut E4149..E4149, lhs: lhs4147, rhs: rhs4152})  <!<  α4044
//│ ╟── while constraining:  (add<> & {lhs: lhs4147, rhs: rhs4152, Add#E: mut E4149..E4149})  <!<  ((lit<> & α4042) | (((add<> & α4044) | (α4049 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α4146  <!<  ((lit<> & α4042) | (((add<> & α4044) | (α4049 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1684'  <!<  ((lit<> & α4042) | (((add<> & α4044) | (α4049 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1684'  <!<  α4041
//│ ╟── while constraining:  (∀ 0. α1684',)  <!<  (α4041,)
//│ ╟── while constraining:  (α4041 -> (α4055 | (α4056 | α4057)))  <!<  ((∀ 0. α1684',) -> α4145)
//│ ╙── while constraining:  α4064  <!<  ((∀ 0. α1684',) -> α4145)
//│ res: error
//│    = '1-123'
//│ constrain calls  : 179
//│ annoying  calls  : 38
//│ subtyping calls  : 1178

:e
:stats
prettier2 done eval2 d2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 d2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> ?b` is not an instance of type `int`
//│ ║  l.73: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.74: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.75: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.76: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.77: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.274: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?b, ?arg, ?lhs, ?val, ?E, ?arg0, ?val0, ?E0, ?rhs, ?E1. ?b) -> ?c` exceeded recursion depth limit (100)
//│ ║  l.+1: 	prettier2 done eval2 d2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (lit<> & {val: val4365})  <!<  ((lit<> & α4255) | (((add<> & α4257) | (α4262 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (lit<> & {val: val4365})  <!<  α4254
//│ ╟── while constraining:  (lit<> & {val: val4365})  <!<  arg4266
//│ ╟── while constraining:  (lit<> & {val: val4365})  <!<  arg4265
//│ ╟── while constraining:  arg4364  <!<  arg4265
//│ ╟── while constraining:  (nega<> & {arg: arg4364, Nega#E: mut E4366..E4366})  <!<  {arg: arg4265}
//│ ╟── while constraining:  (nega<> & {arg: arg4364, Nega#E: mut E4366..E4366})  <!<  α4264
//│ ╟── while constraining:  (nega<> & {arg: arg4364, Nega#E: mut E4366..E4366})  <!<  ((nega<> & α4264) | (α4267 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg4364, Nega#E: mut E4366..E4366})  <!<  α4263
//│ ╟── while constraining:  (nega<> & {arg: arg4364, Nega#E: mut E4366..E4366})  <!<  α4262
//│ ╟── while constraining:  (nega<> & {arg: arg4364, Nega#E: mut E4366..E4366})  <!<  ((lit<> & α4255) | (((add<> & α4257) | (α4262 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg4364, Nega#E: mut E4366..E4366})  <!<  α4254
//│ ╟── while constraining:  (nega<> & {arg: arg4364, Nega#E: mut E4366..E4366})  <!<  rhs4258
//│ ╟── while constraining:  rhs4367  <!<  rhs4258
//│ ╟── while constraining:  (add<> & {Add#E: mut E4363..E4363, lhs: lhs4361, rhs: rhs4367})  <!<  {rhs: rhs4258}
//│ ╟── while constraining:  (add<> & {Add#E: mut E4363..E4363, lhs: lhs4361, rhs: rhs4367})  <!<  α4257
//│ ╟── while constraining:  (add<> & {lhs: lhs4361, rhs: rhs4367, Add#E: mut E4363..E4363})  <!<  ((lit<> & α4255) | (((add<> & α4257) | (α4262 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (add<> & {lhs: lhs4361, rhs: rhs4367, Add#E: mut E4363..E4363})  <!<  α4254
//│ ╟── while constraining:  (add<> & {lhs: lhs4361, rhs: rhs4367, Add#E: mut E4363..E4363})  <!<  arg4266
//│ ╟── while constraining:  (add<> & {lhs: lhs4361, rhs: rhs4367, Add#E: mut E4363..E4363})  <!<  arg4265
//│ ╟── while constraining:  arg4360  <!<  arg4265
//│ ╟── while constraining:  (nega<> & {arg: arg4360, Nega#E: mut E4368..E4368})  <!<  {arg: arg4265}
//│ ╟── while constraining:  (nega<> & {arg: arg4360, Nega#E: mut E4368..E4368})  <!<  α4264
//│ ╟── while constraining:  (nega<> & {arg: arg4360, Nega#E: mut E4368..E4368})  <!<  ((nega<> & α4264) | (α4267 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg4360, Nega#E: mut E4368..E4368})  <!<  α4263
//│ ╟── while constraining:  (nega<> & {arg: arg4360, Nega#E: mut E4368..E4368})  <!<  α4262
//│ ╟── while constraining:  (nega<> & {arg: arg4360, Nega#E: mut E4368..E4368})  <!<  ((lit<> & α4255) | (((add<> & α4257) | (α4262 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α4359  <!<  ((lit<> & α4255) | (((add<> & α4257) | (α4262 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1842'  <!<  ((lit<> & α4255) | (((add<> & α4257) | (α4262 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1842'  <!<  α4254
//│ ╟── while constraining:  (∀ 0. α1842',)  <!<  (α4254,)
//│ ╟── while constraining:  (α4254 -> (α4268 | (α4269 | α4270)))  <!<  ((∀ 0. α1842',) -> α4358)
//│ ╙── while constraining:  α4277  <!<  ((∀ 0. α1842',) -> α4358)
//│ res: error
//│    = '-1-1'
//│ constrain calls  : 179
//│ annoying  calls  : 36
//│ subtyping calls  : 1213

:e
:stats
prettier2 done eval1 e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval1 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (?b | ?c)` is not an instance of type `int`
//│ ║  l.73: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.74: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.75: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.76: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.77: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.274: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ ╔══[ERROR] Subtyping constraint of the form `?a <: (forall ?b, ?E, ?E0. ?b) -> ?c` exceeded recursion depth limit (100)
//│ ║  l.+1: 	prettier2 done eval1 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (add<> & {Add#E: mut E4524..E4524, lhs: lhs4522, rhs: rhs4526})  <!<  {rhs: rhs4444}
//│ ╟── while constraining:  (add<> & {Add#E: mut E4524..E4524, lhs: lhs4522, rhs: rhs4526})  <!<  α4443
//│ ╟── while constraining:  (add<> & {lhs: lhs4522, rhs: rhs4526, Add#E: mut E4524..E4524})  <!<  ((lit<> & α4441) | (((add<> & α4443) | (α4448 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (add<> & {lhs: lhs4522, rhs: rhs4526, Add#E: mut E4524..E4524})  <!<  α4440
//│ ╟── while constraining:  (add<> & {lhs: lhs4522, rhs: rhs4526, Add#E: mut E4524..E4524})  <!<  rhs4444
//│ ╟── while constraining:  rhs4527  <!<  rhs4444
//│ ╟── while constraining:  (add<> & {Add#E: mut E4521..E4521, lhs: lhs4519, rhs: rhs4527})  <!<  {rhs: rhs4444}
//│ ╟── while constraining:  (add<> & {Add#E: mut E4521..E4521, lhs: lhs4519, rhs: rhs4527})  <!<  α4443
//│ ╟── while constraining:  (add<> & {lhs: lhs4519, rhs: rhs4527, Add#E: mut E4521..E4521})  <!<  ((lit<> & α4441) | (((add<> & α4443) | (α4448 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α4518  <!<  ((lit<> & α4441) | (((add<> & α4443) | (α4448 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1007'  <!<  ((lit<> & α4441) | (((add<> & α4443) | (α4448 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1007'  <!<  α4440
//│ ╟── while constraining:  ∀ 0. α1007'  <!<  arg4452
//│ ╟── while constraining:  ∀ 0. α1007'  <!<  arg4451
//│ ╟── while constraining:  arg4515  <!<  arg4451
//│ ╟── while constraining:  (nega<> & {arg: arg4515, Nega#E: mut E4516..E4516})  <!<  {arg: arg4451}
//│ ╟── while constraining:  (nega<> & {arg: arg4515, Nega#E: mut E4516..E4516})  <!<  α4450
//│ ╟── while constraining:  (nega<> & {arg: arg4515, Nega#E: mut E4516..E4516})  <!<  ((nega<> & α4450) | (α4453 & ~(nega<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg4515, Nega#E: mut E4516..E4516})  <!<  α4449
//│ ╟── while constraining:  (nega<> & {arg: arg4515, Nega#E: mut E4516..E4516})  <!<  α4448
//│ ╟── while constraining:  (nega<> & {arg: arg4515, Nega#E: mut E4516..E4516})  <!<  ((lit<> & α4441) | (((add<> & α4443) | (α4448 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  (nega<> & {arg: arg4515, Nega#E: mut E4516..E4516})  <!<  α4440
//│ ╟── while constraining:  (nega<> & {arg: arg4515, Nega#E: mut E4516..E4516})  <!<  rhs4444
//│ ╟── while constraining:  rhs4517  <!<  rhs4444
//│ ╟── while constraining:  (add<> & {Add#E: mut E4514..E4514, lhs: lhs4512, rhs: rhs4517})  <!<  {rhs: rhs4444}
//│ ╟── while constraining:  (add<> & {Add#E: mut E4514..E4514, lhs: lhs4512, rhs: rhs4517})  <!<  α4443
//│ ╟── while constraining:  (add<> & {lhs: lhs4512, rhs: rhs4517, Add#E: mut E4514..E4514})  <!<  ((lit<> & α4441) | (((add<> & α4443) | (α4448 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  α4511  <!<  ((lit<> & α4441) | (((add<> & α4443) | (α4448 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1684'  <!<  ((lit<> & α4441) | (((add<> & α4443) | (α4448 & ~(add<>))) & ~(lit<>)))
//│ ╟── while constraining:  ∀ 0. α1684'  <!<  α4440
//│ ╟── while constraining:  (∀ 0. α1684',)  <!<  (α4440,)
//│ ╟── while constraining:  (α4440 -> (α4454 | (α4455 | α4456)))  <!<  ((∀ 0. α1684',) -> α4510)
//│ ╙── while constraining:  α4463  <!<  ((∀ 0. α1684',) -> α4510)
//│ res: error
//│    = '1-123'
//│ constrain calls  : 173
//│ annoying  calls  : 38
//│ subtyping calls  : 1146

