:ShowRelativeLineNums
:NoJS

class MyArray[A]: { size: int; set: (int, A) -> (); get: int -> A }
//│ Defined class MyArray[=A]

dummy = MyArray {
    size = 0;
    set = fun (i, a) -> ();
    get = fun i -> error
  }
//│ dummy: MyArray['A] with {get: anything -> nothing, set: (anything, anything,) -> (), size: 0}

dummy: MyArray[int]
//│ res: MyArray[int]

def ty1A: MyArray[int]
def ty1B: MyArray[0 | 1]
//│ ty1A: MyArray[int]
//│ ty1B: MyArray[0 | 1]


def ty2A: MyArray['a]
//│ ty2A: MyArray['a]

:stats
ty2A = ty2A
//│ MyArray['a]
//│   <:  ty2A:
//│ MyArray['a]
//│ constrain calls  : 40
//│ annoying  calls  : 24
//│ subtyping calls  : 28

def ty2B: MyArray[MyArray['a]]
//│ ty2B: MyArray[MyArray['a]]

:stats
ty2B = ty2A
//│ MyArray['a]
//│   <:  ty2B:
//│ MyArray[MyArray['a]]
//│ constrain calls  : 36
//│ annoying  calls  : 24
//│ subtyping calls  : 27



def ty3A: MyArray['a] as 'a
//│ ty3A: 'a
//│   where
//│     'a := MyArray['a]

:e // FIXME (probably the issue reproduced in `ADRsRepro.mls`)
:stats
ty3A = ty3A
//│ 'a
//│   where
//│     'a := MyArray['a]
//│   <:  ty3A:
//│ 'a
//│   where
//│     'a := MyArray['a]
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a. ?a <: forall ?a0. ?a0` exceeded recursion depth limit (400)
//│ ║  l.+1: 	ty3A = ty3A
//│ ║        	^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a117',) -> ()), get: (Int -> 'a117')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a118'
//│ ╟── while constraining:  'a117'  <!<  'a118'
//│ ╟── while constraining:  (int<TypeName(number)>, 'a117',)  <!<  (int<TypeName(number)>, 'a118',)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a118',) -> ())  <!<  ((int<TypeName(number)>, 'a117',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a118',) -> ()), get: (Int -> 'a118')}) & {MyArray#A: mut 'a118'..'a118'})  <!<  {size: Int, set: ((Int, 'a117',) -> ()), get: (Int -> 'a117')}
//│ ╟── while constraining:  MyArray['a118']  <!<  {size: Int, set: ((Int, 'a117',) -> ()), get: (Int -> 'a117')}
//│ ╟── while constraining:  'a118'  <!<  {size: Int, set: ((Int, 'a117',) -> ()), get: (Int -> 'a117')}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a117',) -> ()), get: (Int -> 'a117')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a117',) -> ()), get: (Int -> 'a117')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a117',) -> ()), get: (Int -> 'a117')})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a117',) -> ()), get: (Int -> 'a117')}) & {MyArray#A: mut 'a117'..'a117'})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a117']
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a117'
//│ ╟── while constraining:  'a116'  <!<  'a117'
//│ ╟── while constraining:  (int<TypeName(number)>, 'a116',)  <!<  (int<TypeName(number)>, 'a117',)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a117',) -> ())  <!<  ((int<TypeName(number)>, 'a116',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a117',) -> ()), get: (Int -> 'a117')}) & {MyArray#A: mut 'a117'..'a117'})  <!<  {size: Int, set: ((Int, 'a116',) -> ()), get: (Int -> 'a116')}
//│ ╟── while constraining:  MyArray['a117']  <!<  {size: Int, set: ((Int, 'a116',) -> ()), get: (Int -> 'a116')}
//│ ╟── while constraining:  'a117'  <!<  {size: Int, set: ((Int, 'a116',) -> ()), get: (Int -> 'a116')}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a116',) -> ()), get: (Int -> 'a116')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a116',) -> ()), get: (Int -> 'a116')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a116',) -> ()), get: (Int -> 'a116')})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a116',) -> ()), get: (Int -> 'a116')}) & {MyArray#A: mut 'a116'..'a116'})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a116']
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a116'
//│ ╟── while constraining:  'a115'  <!<  'a116'
//│ ╟── while constraining:  (int<TypeName(number)>, 'a115',)  <!<  (int<TypeName(number)>, 'a116',)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a116',) -> ())  <!<  ((int<TypeName(number)>, 'a115',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a116',) -> ()), get: (Int -> 'a116')}) & {MyArray#A: mut 'a116'..'a116'})  <!<  {size: Int, set: ((Int, 'a115',) -> ()), get: (Int -> 'a115')}
//│ ╟── while constraining:  MyArray['a116']  <!<  {size: Int, set: ((Int, 'a115',) -> ()), get: (Int -> 'a115')}
//│ ╟── while constraining:  'a116'  <!<  {size: Int, set: ((Int, 'a115',) -> ()), get: (Int -> 'a115')}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a115',) -> ()), get: (Int -> 'a115')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a115',) -> ()), get: (Int -> 'a115')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a115',) -> ()), get: (Int -> 'a115')})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a115',) -> ()), get: (Int -> 'a115')}) & {MyArray#A: mut 'a115'..'a115'})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a115']
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a115'
//│ ╟── while constraining:  'a114'  <!<  'a115'
//│ ╟── while constraining:  (int<TypeName(number)>, 'a114',)  <!<  (int<TypeName(number)>, 'a115',)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a115',) -> ())  <!<  ((int<TypeName(number)>, 'a114',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a115',) -> ()), get: (Int -> 'a115')}) & {MyArray#A: mut 'a115'..'a115'})  <!<  {size: Int, set: ((Int, 'a114',) -> ()), get: (Int -> 'a114')}
//│ ╟── while constraining:  MyArray['a115']  <!<  {size: Int, set: ((Int, 'a114',) -> ()), get: (Int -> 'a114')}
//│ ╟── while constraining:  'a115'  <!<  {size: Int, set: ((Int, 'a114',) -> ()), get: (Int -> 'a114')}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a114',) -> ()), get: (Int -> 'a114')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a114',) -> ()), get: (Int -> 'a114')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a114',) -> ()), get: (Int -> 'a114')})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a114',) -> ()), get: (Int -> 'a114')}) & {MyArray#A: mut 'a114'..'a114'})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a114']
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a114'
//│ ╟── while constraining:  'a113'  <!<  'a114'
//│ ╟── while constraining:  (int<TypeName(number)>, 'a113',)  <!<  (int<TypeName(number)>, 'a114',)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a114',) -> ())  <!<  ((int<TypeName(number)>, 'a113',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a114',) -> ()), get: (Int -> 'a114')}) & {MyArray#A: mut 'a114'..'a114'})  <!<  {size: Int, set: ((Int, 'a113',) -> ()), get: (Int -> 'a113')}
//│ ╟── while constraining:  MyArray['a114']  <!<  {size: Int, set: ((Int, 'a113',) -> ()), get: (Int -> 'a113')}
//│ ╟── while constraining:  'a114'  <!<  {size: Int, set: ((Int, 'a113',) -> ()), get: (Int -> 'a113')}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a113',) -> ()), get: (Int -> 'a113')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a113',) -> ()), get: (Int -> 'a113')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a113',) -> ()), get: (Int -> 'a113')})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a113',) -> ()), get: (Int -> 'a113')}) & {MyArray#A: mut 'a113'..'a113'})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a113']
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a113'
//│ ╟── while constraining:  'a112'  <!<  'a113'
//│ ╟── while constraining:  (int<TypeName(number)>, 'a112',)  <!<  (int<TypeName(number)>, 'a113',)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a113',) -> ())  <!<  ((int<TypeName(number)>, 'a112',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a113',) -> ()), get: (Int -> 'a113')}) & {MyArray#A: mut 'a113'..'a113'})  <!<  {size: Int, set: ((Int, 'a112',) -> ()), get: (Int -> 'a112')}
//│ ╟── while constraining:  MyArray['a113']  <!<  {size: Int, set: ((Int, 'a112',) -> ()), get: (Int -> 'a112')}
//│ ╟── while constraining:  'a113'  <!<  {size: Int, set: ((Int, 'a112',) -> ()), get: (Int -> 'a112')}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a112',) -> ()), get: (Int -> 'a112')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a112',) -> ()), get: (Int -> 'a112')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a112',) -> ()), get: (Int -> 'a112')})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a112',) -> ()), get: (Int -> 'a112')}) & {MyArray#A: mut 'a112'..'a112'})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a112']
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a112'
//│ ╟── while constraining:  'a111'  <!<  'a112'
//│ ╟── while constraining:  (int<TypeName(number)>, 'a111',)  <!<  (int<TypeName(number)>, 'a112',)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a112',) -> ())  <!<  ((int<TypeName(number)>, 'a111',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a112',) -> ()), get: (Int -> 'a112')}) & {MyArray#A: mut 'a112'..'a112'})  <!<  {size: Int, set: ((Int, 'a111',) -> ()), get: (Int -> 'a111')}
//│ ╟── while constraining:  MyArray['a112']  <!<  {size: Int, set: ((Int, 'a111',) -> ()), get: (Int -> 'a111')}
//│ ╟── while constraining:  'a112'  <!<  {size: Int, set: ((Int, 'a111',) -> ()), get: (Int -> 'a111')}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a111',) -> ()), get: (Int -> 'a111')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a111',) -> ()), get: (Int -> 'a111')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a111',) -> ()), get: (Int -> 'a111')})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a111',) -> ()), get: (Int -> 'a111')}) & {MyArray#A: mut 'a111'..'a111'})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a111']
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a111'
//│ ╟── while constraining:  'a110'  <!<  'a111'
//│ ╟── while constraining:  (int<TypeName(number)>, 'a110',)  <!<  (int<TypeName(number)>, 'a111',)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a111',) -> ())  <!<  ((int<TypeName(number)>, 'a110',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a111',) -> ()), get: (Int -> 'a111')}) & {MyArray#A: mut 'a111'..'a111'})  <!<  {size: Int, set: ((Int, 'a110',) -> ()), get: (Int -> 'a110')}
//│ ╟── while constraining:  MyArray['a111']  <!<  {size: Int, set: ((Int, 'a110',) -> ()), get: (Int -> 'a110')}
//│ ╟── while constraining:  'a111'  <!<  {size: Int, set: ((Int, 'a110',) -> ()), get: (Int -> 'a110')}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a110',) -> ()), get: (Int -> 'a110')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a110',) -> ()), get: (Int -> 'a110')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a110',) -> ()), get: (Int -> 'a110')})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a110',) -> ()), get: (Int -> 'a110')}) & {MyArray#A: mut 'a110'..'a110'})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a110']
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a110'
//│ ╟── while constraining:  'a109'  <!<  'a110'
//│ ╟── while constraining:  (int<TypeName(number)>, 'a109',)  <!<  (int<TypeName(number)>, 'a110',)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a110',) -> ())  <!<  ((int<TypeName(number)>, 'a109',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a110',) -> ()), get: (Int -> 'a110')}) & {MyArray#A: mut 'a110'..'a110'})  <!<  {size: Int, set: ((Int, 'a109',) -> ()), get: (Int -> 'a109')}
//│ ╟── while constraining:  MyArray['a110']  <!<  {size: Int, set: ((Int, 'a109',) -> ()), get: (Int -> 'a109')}
//│ ╟── while constraining:  'a110'  <!<  {size: Int, set: ((Int, 'a109',) -> ()), get: (Int -> 'a109')}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a109',) -> ()), get: (Int -> 'a109')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a109',) -> ()), get: (Int -> 'a109')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a109',) -> ()), get: (Int -> 'a109')})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a109',) -> ()), get: (Int -> 'a109')}) & {MyArray#A: mut 'a109'..'a109'})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a109']
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a109'
//│ ╟── while constraining:  'a108'  <!<  'a109'
//│ ╟── while constraining:  (int<TypeName(number)>, 'a108',)  <!<  (int<TypeName(number)>, 'a109',)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a109',) -> ())  <!<  ((int<TypeName(number)>, 'a108',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a109',) -> ()), get: (Int -> 'a109')}) & {MyArray#A: mut 'a109'..'a109'})  <!<  {size: Int, set: ((Int, 'a108',) -> ()), get: (Int -> 'a108')}
//│ ╟── while constraining:  MyArray['a109']  <!<  {size: Int, set: ((Int, 'a108',) -> ()), get: (Int -> 'a108')}
//│ ╟── while constraining:  'a109'  <!<  {size: Int, set: ((Int, 'a108',) -> ()), get: (Int -> 'a108')}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a108',) -> ()), get: (Int -> 'a108')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a108',) -> ()), get: (Int -> 'a108')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a108',) -> ()), get: (Int -> 'a108')})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a108',) -> ()), get: (Int -> 'a108')}) & {MyArray#A: mut 'a108'..'a108'})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a108']
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a108'
//│ ╟── while constraining:  'a106'  <!<  'a108'
//│ ╟── while constraining:  (int<TypeName(number)>, 'a106',)  <!<  (int<TypeName(number)>, 'a108',)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a108',) -> ())  <!<  ((int<TypeName(number)>, 'a106',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a108',) -> ()), get: (Int -> 'a108')}) & {MyArray#A: mut 'a108'..'a108'})  <!<  {size: Int, set: ((Int, 'a106',) -> ()), get: (Int -> 'a106')}
//│ ╟── while constraining:  MyArray['a108']  <!<  {size: Int, set: ((Int, 'a106',) -> ()), get: (Int -> 'a106')}
//│ ╟── while constraining:  'a108'  <!<  {size: Int, set: ((Int, 'a106',) -> ()), get: (Int -> 'a106')}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a106',) -> ()), get: (Int -> 'a106')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a106',) -> ()), get: (Int -> 'a106')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a106',) -> ()), get: (Int -> 'a106')})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a106',) -> ()), get: (Int -> 'a106')}) & {MyArray#A: mut 'a106'..'a106'})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a106']
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a106'
//│ ╟── while constraining:  'a105'  <!<  'a106'
//│ ╟── while constraining:  (int<TypeName(number)>, 'a105',)  <!<  (int<TypeName(number)>, 'a106',)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a106',) -> ())  <!<  ((int<TypeName(number)>, 'a105',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a106',) -> ()), get: (Int -> 'a106')}) & {MyArray#A: mut 'a106'..'a106'})  <!<  (‘a' | MyArray['a105'])
//│ ╟── while constraining:  MyArray['a106']  <!<  (‘a' | MyArray['a105'])
//│ ╟── while constraining:  'a106'  <!<  (‘a' | MyArray['a105'])
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  (‘a' | MyArray['a105'])
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (‘a' | MyArray['a105'])
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a105'
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ‹∀ 0. 'a95'›
//│ constrain calls  : 703
//│ annoying  calls  : 172
//│ subtyping calls  : 155

def ty3B: MyArray[MyArray['a]] as 'a
//│ ty3B: 'a
//│   where
//│     'a := MyArray[MyArray['a]]

:e // FIXME (probably the issue reproduced in `ADRsRepro.mls`)
:stats
ty3B = ty3A
//│ 'a
//│   where
//│     'a := MyArray['a]
//│   <:  ty3B:
//│ 'a
//│   where
//│     'a := MyArray[MyArray['a]]
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a. ?a <: forall ?a0. ?a0` exceeded recursion depth limit (400)
//│ ║  l.+1: 	ty3B = ty3A
//│ ║        	^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a143',) -> ()), get: (Int -> 'a143')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a144'
//│ ╟── while constraining:  'a143'  <!<  'a144'
//│ ╟── while constraining:  (int<TypeName(number)>, 'a143',)  <!<  (int<TypeName(number)>, 'a144',)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a144',) -> ())  <!<  ((int<TypeName(number)>, 'a143',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a144',) -> ()), get: (Int -> 'a144')}) & {MyArray#A: mut 'a144'..'a144'})  <!<  {size: Int, set: ((Int, 'a143',) -> ()), get: (Int -> 'a143')}
//│ ╟── while constraining:  MyArray['a144']  <!<  {size: Int, set: ((Int, 'a143',) -> ()), get: (Int -> 'a143')}
//│ ╟── while constraining:  'a144'  <!<  {size: Int, set: ((Int, 'a143',) -> ()), get: (Int -> 'a143')}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a143',) -> ()), get: (Int -> 'a143')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a143',) -> ()), get: (Int -> 'a143')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a143',) -> ()), get: (Int -> 'a143')})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a143',) -> ()), get: (Int -> 'a143')}) & {MyArray#A: mut 'a143'..'a143'})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a143']
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a143'
//│ ╟── while constraining:  'a142'  <!<  'a143'
//│ ╟── while constraining:  (int<TypeName(number)>, 'a142',)  <!<  (int<TypeName(number)>, 'a143',)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a143',) -> ())  <!<  ((int<TypeName(number)>, 'a142',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a143',) -> ()), get: (Int -> 'a143')}) & {MyArray#A: mut 'a143'..'a143'})  <!<  {size: Int, set: ((Int, 'a142',) -> ()), get: (Int -> 'a142')}
//│ ╟── while constraining:  MyArray['a143']  <!<  {size: Int, set: ((Int, 'a142',) -> ()), get: (Int -> 'a142')}
//│ ╟── while constraining:  'a143'  <!<  {size: Int, set: ((Int, 'a142',) -> ()), get: (Int -> 'a142')}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a142',) -> ()), get: (Int -> 'a142')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a142',) -> ()), get: (Int -> 'a142')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a142',) -> ()), get: (Int -> 'a142')})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a142',) -> ()), get: (Int -> 'a142')}) & {MyArray#A: mut 'a142'..'a142'})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a142']
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a142'
//│ ╟── while constraining:  'a141'  <!<  'a142'
//│ ╟── while constraining:  (int<TypeName(number)>, 'a141',)  <!<  (int<TypeName(number)>, 'a142',)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a142',) -> ())  <!<  ((int<TypeName(number)>, 'a141',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a142',) -> ()), get: (Int -> 'a142')}) & {MyArray#A: mut 'a142'..'a142'})  <!<  {size: Int, set: ((Int, 'a141',) -> ()), get: (Int -> 'a141')}
//│ ╟── while constraining:  MyArray['a142']  <!<  {size: Int, set: ((Int, 'a141',) -> ()), get: (Int -> 'a141')}
//│ ╟── while constraining:  'a142'  <!<  {size: Int, set: ((Int, 'a141',) -> ()), get: (Int -> 'a141')}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a141',) -> ()), get: (Int -> 'a141')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a141',) -> ()), get: (Int -> 'a141')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a141',) -> ()), get: (Int -> 'a141')})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a141',) -> ()), get: (Int -> 'a141')}) & {MyArray#A: mut 'a141'..'a141'})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a141']
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a141'
//│ ╟── while constraining:  'a140'  <!<  'a141'
//│ ╟── while constraining:  (int<TypeName(number)>, 'a140',)  <!<  (int<TypeName(number)>, 'a141',)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a141',) -> ())  <!<  ((int<TypeName(number)>, 'a140',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a141',) -> ()), get: (Int -> 'a141')}) & {MyArray#A: mut 'a141'..'a141'})  <!<  {size: Int, set: ((Int, 'a140',) -> ()), get: (Int -> 'a140')}
//│ ╟── while constraining:  MyArray['a141']  <!<  {size: Int, set: ((Int, 'a140',) -> ()), get: (Int -> 'a140')}
//│ ╟── while constraining:  'a141'  <!<  {size: Int, set: ((Int, 'a140',) -> ()), get: (Int -> 'a140')}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a140',) -> ()), get: (Int -> 'a140')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a140',) -> ()), get: (Int -> 'a140')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a140',) -> ()), get: (Int -> 'a140')})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a140',) -> ()), get: (Int -> 'a140')}) & {MyArray#A: mut 'a140'..'a140'})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a140']
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a140'
//│ ╟── while constraining:  'a139'  <!<  'a140'
//│ ╟── while constraining:  (int<TypeName(number)>, 'a139',)  <!<  (int<TypeName(number)>, 'a140',)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a140',) -> ())  <!<  ((int<TypeName(number)>, 'a139',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a140',) -> ()), get: (Int -> 'a140')}) & {MyArray#A: mut 'a140'..'a140'})  <!<  {size: Int, set: ((Int, 'a139',) -> ()), get: (Int -> 'a139')}
//│ ╟── while constraining:  MyArray['a140']  <!<  {size: Int, set: ((Int, 'a139',) -> ()), get: (Int -> 'a139')}
//│ ╟── while constraining:  'a140'  <!<  {size: Int, set: ((Int, 'a139',) -> ()), get: (Int -> 'a139')}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a139',) -> ()), get: (Int -> 'a139')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a139',) -> ()), get: (Int -> 'a139')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a139',) -> ()), get: (Int -> 'a139')})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a139',) -> ()), get: (Int -> 'a139')}) & {MyArray#A: mut 'a139'..'a139'})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a139']
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a139'
//│ ╟── while constraining:  'a138'  <!<  'a139'
//│ ╟── while constraining:  (int<TypeName(number)>, 'a138',)  <!<  (int<TypeName(number)>, 'a139',)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a139',) -> ())  <!<  ((int<TypeName(number)>, 'a138',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a139',) -> ()), get: (Int -> 'a139')}) & {MyArray#A: mut 'a139'..'a139'})  <!<  {size: Int, set: ((Int, 'a138',) -> ()), get: (Int -> 'a138')}
//│ ╟── while constraining:  MyArray['a139']  <!<  {size: Int, set: ((Int, 'a138',) -> ()), get: (Int -> 'a138')}
//│ ╟── while constraining:  'a139'  <!<  {size: Int, set: ((Int, 'a138',) -> ()), get: (Int -> 'a138')}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a138',) -> ()), get: (Int -> 'a138')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a138',) -> ()), get: (Int -> 'a138')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a138',) -> ()), get: (Int -> 'a138')})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a138',) -> ()), get: (Int -> 'a138')}) & {MyArray#A: mut 'a138'..'a138'})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a138']
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a138'
//│ ╟── while constraining:  'a137'  <!<  'a138'
//│ ╟── while constraining:  (int<TypeName(number)>, 'a137',)  <!<  (int<TypeName(number)>, 'a138',)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a138',) -> ())  <!<  ((int<TypeName(number)>, 'a137',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a138',) -> ()), get: (Int -> 'a138')}) & {MyArray#A: mut 'a138'..'a138'})  <!<  {size: Int, set: ((Int, 'a137',) -> ()), get: (Int -> 'a137')}
//│ ╟── while constraining:  MyArray['a138']  <!<  {size: Int, set: ((Int, 'a137',) -> ()), get: (Int -> 'a137')}
//│ ╟── while constraining:  'a138'  <!<  {size: Int, set: ((Int, 'a137',) -> ()), get: (Int -> 'a137')}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a137',) -> ()), get: (Int -> 'a137')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a137',) -> ()), get: (Int -> 'a137')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a137',) -> ()), get: (Int -> 'a137')})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a137',) -> ()), get: (Int -> 'a137')}) & {MyArray#A: mut 'a137'..'a137'})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a137']
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a137'
//│ ╟── while constraining:  'a136'  <!<  'a137'
//│ ╟── while constraining:  (int<TypeName(number)>, 'a136',)  <!<  (int<TypeName(number)>, 'a137',)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a137',) -> ())  <!<  ((int<TypeName(number)>, 'a136',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a137',) -> ()), get: (Int -> 'a137')}) & {MyArray#A: mut 'a137'..'a137'})  <!<  {size: Int, set: ((Int, 'a136',) -> ()), get: (Int -> 'a136')}
//│ ╟── while constraining:  MyArray['a137']  <!<  {size: Int, set: ((Int, 'a136',) -> ()), get: (Int -> 'a136')}
//│ ╟── while constraining:  'a137'  <!<  {size: Int, set: ((Int, 'a136',) -> ()), get: (Int -> 'a136')}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a136',) -> ()), get: (Int -> 'a136')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a136',) -> ()), get: (Int -> 'a136')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a136',) -> ()), get: (Int -> 'a136')})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a136',) -> ()), get: (Int -> 'a136')}) & {MyArray#A: mut 'a136'..'a136'})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a136']
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a136'
//│ ╟── while constraining:  'a135'  <!<  'a136'
//│ ╟── while constraining:  (int<TypeName(number)>, 'a135',)  <!<  (int<TypeName(number)>, 'a136',)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a136',) -> ())  <!<  ((int<TypeName(number)>, 'a135',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a136',) -> ()), get: (Int -> 'a136')}) & {MyArray#A: mut 'a136'..'a136'})  <!<  {size: Int, set: ((Int, 'a135',) -> ()), get: (Int -> 'a135')}
//│ ╟── while constraining:  MyArray['a136']  <!<  {size: Int, set: ((Int, 'a135',) -> ()), get: (Int -> 'a135')}
//│ ╟── while constraining:  'a136'  <!<  {size: Int, set: ((Int, 'a135',) -> ()), get: (Int -> 'a135')}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a135',) -> ()), get: (Int -> 'a135')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a135',) -> ()), get: (Int -> 'a135')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a135',) -> ()), get: (Int -> 'a135')})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a135',) -> ()), get: (Int -> 'a135')}) & {MyArray#A: mut 'a135'..'a135'})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a135']
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a135'
//│ ╟── while constraining:  'a134'  <!<  'a135'
//│ ╟── while constraining:  (int<TypeName(number)>, 'a134',)  <!<  (int<TypeName(number)>, 'a135',)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a135',) -> ())  <!<  ((int<TypeName(number)>, 'a134',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a135',) -> ()), get: (Int -> 'a135')}) & {MyArray#A: mut 'a135'..'a135'})  <!<  {size: Int, set: ((Int, 'a134',) -> ()), get: (Int -> 'a134')}
//│ ╟── while constraining:  MyArray['a135']  <!<  {size: Int, set: ((Int, 'a134',) -> ()), get: (Int -> 'a134')}
//│ ╟── while constraining:  'a135'  <!<  {size: Int, set: ((Int, 'a134',) -> ()), get: (Int -> 'a134')}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a134',) -> ()), get: (Int -> 'a134')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a134',) -> ()), get: (Int -> 'a134')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a134',) -> ()), get: (Int -> 'a134')})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a134',) -> ()), get: (Int -> 'a134')}) & {MyArray#A: mut 'a134'..'a134'})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a134']
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a134'
//│ ╟── while constraining:  'a131'  <!<  'a134'
//│ ╟── while constraining:  (int<TypeName(number)>, 'a131',)  <!<  (int<TypeName(number)>, 'a134',)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a134',) -> ())  <!<  ((int<TypeName(number)>, 'a131',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a134',) -> ()), get: (Int -> 'a134')}) & {MyArray#A: mut 'a134'..'a134'})  <!<  {size: Int, set: ((Int, 'a131',) -> ()), get: (Int -> 'a131')}
//│ ╟── while constraining:  MyArray['a134']  <!<  {size: Int, set: ((Int, 'a131',) -> ()), get: (Int -> 'a131')}
//│ ╟── while constraining:  'a134'  <!<  {size: Int, set: ((Int, 'a131',) -> ()), get: (Int -> 'a131')}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a131',) -> ()), get: (Int -> 'a131')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a131',) -> ()), get: (Int -> 'a131')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a131',) -> ()), get: (Int -> 'a131')})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a131',) -> ()), get: (Int -> 'a131')}) & {MyArray#A: mut 'a131'..'a131'})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a131']
//│ ╟── while constraining:  'a131'  <!<  MyArray['a131']
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a131',) -> ()), get: (Int -> 'a131')}) & {MyArray#A: mut 'a131'..'a131'})  <!<  (‘a' | MyArray[MyArray['a131']])
//│ ╟── while constraining:  MyArray['a131']  <!<  (‘a' | MyArray[MyArray['a131']])
//│ ╟── while constraining:  MyArray['a131']  <!<  'a132'
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray['a131'],)  <!<  (int<TypeName(number)>, 'a132',)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a132',) -> ())  <!<  ((int<TypeName(number)>, MyArray['a131'],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a132',) -> ()), get: (Int -> 'a132')}) & {MyArray#A: mut 'a132'..'a132'})  <!<  (‘a' | MyArray[MyArray['a131']])
//│ ╟── while constraining:  MyArray['a132']  <!<  (‘a' | MyArray[MyArray['a131']])
//│ ╟── while constraining:  'a132'  <!<  (‘a' | MyArray[MyArray['a131']])
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  (‘a' | MyArray[MyArray['a131']])
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (‘a' | MyArray[MyArray['a131']])
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a131'
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ‹∀ 0. 'a121'›
//│ constrain calls  : 753
//│ annoying  calls  : 216
//│ subtyping calls  : 203

:e // FIXME (probably the issue reproduced in `ADRsRepro.mls`)
:stats
ty3A = ty3B
//│ 'a
//│   where
//│     'a := MyArray[MyArray['a]]
//│   <:  ty3A:
//│ 'a
//│   where
//│     'a := MyArray['a]
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a. ?a <: forall ?a0. ?a0` exceeded recursion depth limit (400)
//│ ║  l.+1: 	ty3A = ty3B
//│ ║        	^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  {size: Int, set: ((Int, MyArray['a165'],) -> ()), get: (Int -> MyArray['a165'])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  'a166'
//│ ╟── while constraining:  'a165'  <!<  'a166'
//│ ╟── while constraining:  MyArray['a165']  <!<  MyArray['a166']
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray['a165'],)  <!<  (int<TypeName(number)>, MyArray['a166'],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray['a166'],) -> ())  <!<  ((int<TypeName(number)>, MyArray['a165'],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray['a166'],) -> ()), get: (Int -> MyArray['a166'])}) & {MyArray#A: mut MyArray['a166']..MyArray['a166']})  <!<  {size: Int, set: ((Int, MyArray['a165'],) -> ()), get: (Int -> MyArray['a165'])}
//│ ╟── while constraining:  MyArray[MyArray['a166']]  <!<  {size: Int, set: ((Int, MyArray['a165'],) -> ()), get: (Int -> MyArray['a165'])}
//│ ╟── while constraining:  'a166'  <!<  {size: Int, set: ((Int, MyArray['a165'],) -> ()), get: (Int -> MyArray['a165'])}
//│ ╟── while constraining:  ‹∀ 0. 'a121'›  <!<  {size: Int, set: ((Int, MyArray['a165'],) -> ()), get: (Int -> MyArray['a165'])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  {size: Int, set: ((Int, MyArray['a165'],) -> ()), get: (Int -> MyArray['a165'])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  (myArray<> & {size: Int, set: ((Int, MyArray['a165'],) -> ()), get: (Int -> MyArray['a165'])})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray['a165'],) -> ()), get: (Int -> MyArray['a165'])}) & {MyArray#A: mut MyArray['a165']..MyArray['a165']})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  MyArray[MyArray['a165']]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  'a165'
//│ ╟── while constraining:  'a164'  <!<  'a165'
//│ ╟── while constraining:  MyArray['a164']  <!<  MyArray['a165']
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray['a164'],)  <!<  (int<TypeName(number)>, MyArray['a165'],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray['a165'],) -> ())  <!<  ((int<TypeName(number)>, MyArray['a164'],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray['a165'],) -> ()), get: (Int -> MyArray['a165'])}) & {MyArray#A: mut MyArray['a165']..MyArray['a165']})  <!<  {size: Int, set: ((Int, MyArray['a164'],) -> ()), get: (Int -> MyArray['a164'])}
//│ ╟── while constraining:  MyArray[MyArray['a165']]  <!<  {size: Int, set: ((Int, MyArray['a164'],) -> ()), get: (Int -> MyArray['a164'])}
//│ ╟── while constraining:  'a165'  <!<  {size: Int, set: ((Int, MyArray['a164'],) -> ()), get: (Int -> MyArray['a164'])}
//│ ╟── while constraining:  ‹∀ 0. 'a121'›  <!<  {size: Int, set: ((Int, MyArray['a164'],) -> ()), get: (Int -> MyArray['a164'])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  {size: Int, set: ((Int, MyArray['a164'],) -> ()), get: (Int -> MyArray['a164'])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  (myArray<> & {size: Int, set: ((Int, MyArray['a164'],) -> ()), get: (Int -> MyArray['a164'])})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray['a164'],) -> ()), get: (Int -> MyArray['a164'])}) & {MyArray#A: mut MyArray['a164']..MyArray['a164']})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  MyArray[MyArray['a164']]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  'a164'
//│ ╟── while constraining:  'a163'  <!<  'a164'
//│ ╟── while constraining:  MyArray['a163']  <!<  MyArray['a164']
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray['a163'],)  <!<  (int<TypeName(number)>, MyArray['a164'],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray['a164'],) -> ())  <!<  ((int<TypeName(number)>, MyArray['a163'],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray['a164'],) -> ()), get: (Int -> MyArray['a164'])}) & {MyArray#A: mut MyArray['a164']..MyArray['a164']})  <!<  {size: Int, set: ((Int, MyArray['a163'],) -> ()), get: (Int -> MyArray['a163'])}
//│ ╟── while constraining:  MyArray[MyArray['a164']]  <!<  {size: Int, set: ((Int, MyArray['a163'],) -> ()), get: (Int -> MyArray['a163'])}
//│ ╟── while constraining:  'a164'  <!<  {size: Int, set: ((Int, MyArray['a163'],) -> ()), get: (Int -> MyArray['a163'])}
//│ ╟── while constraining:  ‹∀ 0. 'a121'›  <!<  {size: Int, set: ((Int, MyArray['a163'],) -> ()), get: (Int -> MyArray['a163'])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  {size: Int, set: ((Int, MyArray['a163'],) -> ()), get: (Int -> MyArray['a163'])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  (myArray<> & {size: Int, set: ((Int, MyArray['a163'],) -> ()), get: (Int -> MyArray['a163'])})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray['a163'],) -> ()), get: (Int -> MyArray['a163'])}) & {MyArray#A: mut MyArray['a163']..MyArray['a163']})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  MyArray[MyArray['a163']]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  'a163'
//│ ╟── while constraining:  'a162'  <!<  'a163'
//│ ╟── while constraining:  MyArray['a162']  <!<  MyArray['a163']
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray['a162'],)  <!<  (int<TypeName(number)>, MyArray['a163'],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray['a163'],) -> ())  <!<  ((int<TypeName(number)>, MyArray['a162'],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray['a163'],) -> ()), get: (Int -> MyArray['a163'])}) & {MyArray#A: mut MyArray['a163']..MyArray['a163']})  <!<  {size: Int, set: ((Int, MyArray['a162'],) -> ()), get: (Int -> MyArray['a162'])}
//│ ╟── while constraining:  MyArray[MyArray['a163']]  <!<  {size: Int, set: ((Int, MyArray['a162'],) -> ()), get: (Int -> MyArray['a162'])}
//│ ╟── while constraining:  'a163'  <!<  {size: Int, set: ((Int, MyArray['a162'],) -> ()), get: (Int -> MyArray['a162'])}
//│ ╟── while constraining:  ‹∀ 0. 'a121'›  <!<  {size: Int, set: ((Int, MyArray['a162'],) -> ()), get: (Int -> MyArray['a162'])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  {size: Int, set: ((Int, MyArray['a162'],) -> ()), get: (Int -> MyArray['a162'])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  (myArray<> & {size: Int, set: ((Int, MyArray['a162'],) -> ()), get: (Int -> MyArray['a162'])})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray['a162'],) -> ()), get: (Int -> MyArray['a162'])}) & {MyArray#A: mut MyArray['a162']..MyArray['a162']})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  MyArray[MyArray['a162']]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  'a162'
//│ ╟── while constraining:  'a161'  <!<  'a162'
//│ ╟── while constraining:  MyArray['a161']  <!<  MyArray['a162']
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray['a161'],)  <!<  (int<TypeName(number)>, MyArray['a162'],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray['a162'],) -> ())  <!<  ((int<TypeName(number)>, MyArray['a161'],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray['a162'],) -> ()), get: (Int -> MyArray['a162'])}) & {MyArray#A: mut MyArray['a162']..MyArray['a162']})  <!<  {size: Int, set: ((Int, MyArray['a161'],) -> ()), get: (Int -> MyArray['a161'])}
//│ ╟── while constraining:  MyArray[MyArray['a162']]  <!<  {size: Int, set: ((Int, MyArray['a161'],) -> ()), get: (Int -> MyArray['a161'])}
//│ ╟── while constraining:  'a162'  <!<  {size: Int, set: ((Int, MyArray['a161'],) -> ()), get: (Int -> MyArray['a161'])}
//│ ╟── while constraining:  ‹∀ 0. 'a121'›  <!<  {size: Int, set: ((Int, MyArray['a161'],) -> ()), get: (Int -> MyArray['a161'])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  {size: Int, set: ((Int, MyArray['a161'],) -> ()), get: (Int -> MyArray['a161'])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  (myArray<> & {size: Int, set: ((Int, MyArray['a161'],) -> ()), get: (Int -> MyArray['a161'])})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray['a161'],) -> ()), get: (Int -> MyArray['a161'])}) & {MyArray#A: mut MyArray['a161']..MyArray['a161']})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  MyArray[MyArray['a161']]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  'a161'
//│ ╟── while constraining:  'a160'  <!<  'a161'
//│ ╟── while constraining:  MyArray['a160']  <!<  MyArray['a161']
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray['a160'],)  <!<  (int<TypeName(number)>, MyArray['a161'],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray['a161'],) -> ())  <!<  ((int<TypeName(number)>, MyArray['a160'],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray['a161'],) -> ()), get: (Int -> MyArray['a161'])}) & {MyArray#A: mut MyArray['a161']..MyArray['a161']})  <!<  {size: Int, set: ((Int, MyArray['a160'],) -> ()), get: (Int -> MyArray['a160'])}
//│ ╟── while constraining:  MyArray[MyArray['a161']]  <!<  {size: Int, set: ((Int, MyArray['a160'],) -> ()), get: (Int -> MyArray['a160'])}
//│ ╟── while constraining:  'a161'  <!<  {size: Int, set: ((Int, MyArray['a160'],) -> ()), get: (Int -> MyArray['a160'])}
//│ ╟── while constraining:  ‹∀ 0. 'a121'›  <!<  {size: Int, set: ((Int, MyArray['a160'],) -> ()), get: (Int -> MyArray['a160'])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  {size: Int, set: ((Int, MyArray['a160'],) -> ()), get: (Int -> MyArray['a160'])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  (myArray<> & {size: Int, set: ((Int, MyArray['a160'],) -> ()), get: (Int -> MyArray['a160'])})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray['a160'],) -> ()), get: (Int -> MyArray['a160'])}) & {MyArray#A: mut MyArray['a160']..MyArray['a160']})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  MyArray[MyArray['a160']]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  'a160'
//│ ╟── while constraining:  'a159'  <!<  'a160'
//│ ╟── while constraining:  MyArray['a159']  <!<  MyArray['a160']
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray['a159'],)  <!<  (int<TypeName(number)>, MyArray['a160'],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray['a160'],) -> ())  <!<  ((int<TypeName(number)>, MyArray['a159'],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray['a160'],) -> ()), get: (Int -> MyArray['a160'])}) & {MyArray#A: mut MyArray['a160']..MyArray['a160']})  <!<  {size: Int, set: ((Int, MyArray['a159'],) -> ()), get: (Int -> MyArray['a159'])}
//│ ╟── while constraining:  MyArray[MyArray['a160']]  <!<  {size: Int, set: ((Int, MyArray['a159'],) -> ()), get: (Int -> MyArray['a159'])}
//│ ╟── while constraining:  'a160'  <!<  {size: Int, set: ((Int, MyArray['a159'],) -> ()), get: (Int -> MyArray['a159'])}
//│ ╟── while constraining:  ‹∀ 0. 'a121'›  <!<  {size: Int, set: ((Int, MyArray['a159'],) -> ()), get: (Int -> MyArray['a159'])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  {size: Int, set: ((Int, MyArray['a159'],) -> ()), get: (Int -> MyArray['a159'])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  (myArray<> & {size: Int, set: ((Int, MyArray['a159'],) -> ()), get: (Int -> MyArray['a159'])})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray['a159'],) -> ()), get: (Int -> MyArray['a159'])}) & {MyArray#A: mut MyArray['a159']..MyArray['a159']})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  MyArray[MyArray['a159']]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  'a159'
//│ ╟── while constraining:  'a158'  <!<  'a159'
//│ ╟── while constraining:  MyArray['a158']  <!<  MyArray['a159']
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray['a158'],)  <!<  (int<TypeName(number)>, MyArray['a159'],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray['a159'],) -> ())  <!<  ((int<TypeName(number)>, MyArray['a158'],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray['a159'],) -> ()), get: (Int -> MyArray['a159'])}) & {MyArray#A: mut MyArray['a159']..MyArray['a159']})  <!<  {size: Int, set: ((Int, MyArray['a158'],) -> ()), get: (Int -> MyArray['a158'])}
//│ ╟── while constraining:  MyArray[MyArray['a159']]  <!<  {size: Int, set: ((Int, MyArray['a158'],) -> ()), get: (Int -> MyArray['a158'])}
//│ ╟── while constraining:  'a159'  <!<  {size: Int, set: ((Int, MyArray['a158'],) -> ()), get: (Int -> MyArray['a158'])}
//│ ╟── while constraining:  ‹∀ 0. 'a121'›  <!<  {size: Int, set: ((Int, MyArray['a158'],) -> ()), get: (Int -> MyArray['a158'])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  {size: Int, set: ((Int, MyArray['a158'],) -> ()), get: (Int -> MyArray['a158'])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  (myArray<> & {size: Int, set: ((Int, MyArray['a158'],) -> ()), get: (Int -> MyArray['a158'])})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray['a158'],) -> ()), get: (Int -> MyArray['a158'])}) & {MyArray#A: mut MyArray['a158']..MyArray['a158']})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  MyArray[MyArray['a158']]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  'a158'
//│ ╟── while constraining:  'a157'  <!<  'a158'
//│ ╟── while constraining:  MyArray['a157']  <!<  MyArray['a158']
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray['a157'],)  <!<  (int<TypeName(number)>, MyArray['a158'],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray['a158'],) -> ())  <!<  ((int<TypeName(number)>, MyArray['a157'],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray['a158'],) -> ()), get: (Int -> MyArray['a158'])}) & {MyArray#A: mut MyArray['a158']..MyArray['a158']})  <!<  {size: Int, set: ((Int, MyArray['a157'],) -> ()), get: (Int -> MyArray['a157'])}
//│ ╟── while constraining:  MyArray[MyArray['a158']]  <!<  {size: Int, set: ((Int, MyArray['a157'],) -> ()), get: (Int -> MyArray['a157'])}
//│ ╟── while constraining:  'a158'  <!<  {size: Int, set: ((Int, MyArray['a157'],) -> ()), get: (Int -> MyArray['a157'])}
//│ ╟── while constraining:  ‹∀ 0. 'a121'›  <!<  {size: Int, set: ((Int, MyArray['a157'],) -> ()), get: (Int -> MyArray['a157'])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  {size: Int, set: ((Int, MyArray['a157'],) -> ()), get: (Int -> MyArray['a157'])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  (myArray<> & {size: Int, set: ((Int, MyArray['a157'],) -> ()), get: (Int -> MyArray['a157'])})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray['a157'],) -> ()), get: (Int -> MyArray['a157'])}) & {MyArray#A: mut MyArray['a157']..MyArray['a157']})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  MyArray[MyArray['a157']]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  'a157'
//│ ╟── while constraining:  'a156'  <!<  'a157'
//│ ╟── while constraining:  MyArray['a156']  <!<  MyArray['a157']
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray['a156'],)  <!<  (int<TypeName(number)>, MyArray['a157'],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray['a157'],) -> ())  <!<  ((int<TypeName(number)>, MyArray['a156'],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray['a157'],) -> ()), get: (Int -> MyArray['a157'])}) & {MyArray#A: mut MyArray['a157']..MyArray['a157']})  <!<  {size: Int, set: ((Int, MyArray['a156'],) -> ()), get: (Int -> MyArray['a156'])}
//│ ╟── while constraining:  MyArray[MyArray['a157']]  <!<  {size: Int, set: ((Int, MyArray['a156'],) -> ()), get: (Int -> MyArray['a156'])}
//│ ╟── while constraining:  'a157'  <!<  {size: Int, set: ((Int, MyArray['a156'],) -> ()), get: (Int -> MyArray['a156'])}
//│ ╟── while constraining:  ‹∀ 0. 'a121'›  <!<  {size: Int, set: ((Int, MyArray['a156'],) -> ()), get: (Int -> MyArray['a156'])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  {size: Int, set: ((Int, MyArray['a156'],) -> ()), get: (Int -> MyArray['a156'])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  (myArray<> & {size: Int, set: ((Int, MyArray['a156'],) -> ()), get: (Int -> MyArray['a156'])})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray['a156'],) -> ()), get: (Int -> MyArray['a156'])}) & {MyArray#A: mut MyArray['a156']..MyArray['a156']})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  MyArray[MyArray['a156']]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  'a156'
//│ ╟── while constraining:  'a153'  <!<  'a156'
//│ ╟── while constraining:  (int<TypeName(number)>, 'a153',)  <!<  (int<TypeName(number)>, 'a156',)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a156',) -> ())  <!<  ((int<TypeName(number)>, 'a153',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a156',) -> ()), get: (Int -> 'a156')}) & {MyArray#A: mut 'a156'..'a156'})  <!<  (‘a' | MyArray['a153'])
//│ ╟── while constraining:  MyArray['a156']  <!<  (‘a' | MyArray['a153'])
//│ ╟── while constraining:  MyArray['a156']  <!<  'a154'
//│ ╟── while constraining:  MyArray['a154']  <!<  MyArray[MyArray['a156']]
//│ ╟── while constraining:  MyArray['a154']  <!<  'a156'
//│ ╟── while constraining:  MyArray[MyArray['a154']]  <!<  MyArray['a156']
//│ ╟── while constraining:  'a154'  <!<  MyArray['a156']
//│ ╟── while constraining:  (int<TypeName(number)>, 'a154',)  <!<  (int<TypeName(number)>, MyArray['a156'],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray['a156'],) -> ())  <!<  ((int<TypeName(number)>, 'a154',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray['a156'],) -> ()), get: (Int -> MyArray['a156'])}) & {MyArray#A: mut MyArray['a156']..MyArray['a156']})  <!<  {size: Int, set: ((Int, 'a154',) -> ()), get: (Int -> 'a154')}
//│ ╟── while constraining:  MyArray[MyArray['a156']]  <!<  {size: Int, set: ((Int, 'a154',) -> ()), get: (Int -> 'a154')}
//│ ╟── while constraining:  'a156'  <!<  {size: Int, set: ((Int, 'a154',) -> ()), get: (Int -> 'a154')}
//│ ╟── while constraining:  ‹∀ 0. 'a121'›  <!<  {size: Int, set: ((Int, 'a154',) -> ()), get: (Int -> 'a154')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  {size: Int, set: ((Int, 'a154',) -> ()), get: (Int -> 'a154')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a154',) -> ()), get: (Int -> 'a154')})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a154',) -> ()), get: (Int -> 'a154')}) & {MyArray#A: mut 'a154'..'a154'})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  MyArray['a154']
//│ ╟── while constraining:  'a153'  <!<  MyArray['a154']
//│ ╟── while constraining:  (int<TypeName(number)>, 'a153',)  <!<  (int<TypeName(number)>, MyArray['a154'],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray['a154'],) -> ())  <!<  ((int<TypeName(number)>, 'a153',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray['a154'],) -> ()), get: (Int -> MyArray['a154'])}) & {MyArray#A: mut MyArray['a154']..MyArray['a154']})  <!<  (‘a' | MyArray['a153'])
//│ ╟── while constraining:  MyArray[MyArray['a154']]  <!<  (‘a' | MyArray['a153'])
//│ ╟── while constraining:  'a154'  <!<  (‘a' | MyArray['a153'])
//│ ╟── while constraining:  ‹∀ 0. 'a121'›  <!<  (‘a' | MyArray['a153'])
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  (‘a' | MyArray['a153'])
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  'a153'
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  ‹∀ 0. 'a95'›
//│ constrain calls  : 684
//│ annoying  calls  : 190
//│ subtyping calls  : 185

def ty4B: MyArray[MyArray[MyArray['a]]] as 'a
//│ ty4B: 'a
//│   where
//│     'a := MyArray[MyArray[MyArray['a]]]

:e // FIXME (probably the issue reproduced in `ADRsRepro.mls`)
:stats
ty4B = ty4B
//│ 'a
//│   where
//│     'a := MyArray[MyArray[MyArray['a]]]
//│   <:  ty4B:
//│ 'a
//│   where
//│     'a := MyArray[MyArray[MyArray['a]]]
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a. ?a <: forall ?a0. ?a0` exceeded recursion depth limit (400)
//│ ║  l.+1: 	ty4B = ty4B
//│ ║        	^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  {size: Int, set: ((Int, MyArray[MyArray['a190']],) -> ()), get: (Int -> MyArray[MyArray['a190']])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  'a191'
//│ ╟── while constraining:  'a190'  <!<  'a191'
//│ ╟── while constraining:  MyArray['a190']  <!<  MyArray['a191']
//│ ╟── while constraining:  MyArray[MyArray['a190']]  <!<  MyArray[MyArray['a191']]
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray[MyArray['a190']],)  <!<  (int<TypeName(number)>, MyArray[MyArray['a191']],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray[MyArray['a191']],) -> ())  <!<  ((int<TypeName(number)>, MyArray[MyArray['a190']],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a191']],) -> ()), get: (Int -> MyArray[MyArray['a191']])}) & {MyArray#A: mut MyArray[MyArray['a191']]..MyArray[MyArray['a191']]})  <!<  {size: Int, set: ((Int, MyArray[MyArray['a190']],) -> ()), get: (Int -> MyArray[MyArray['a190']])}
//│ ╟── while constraining:  MyArray[MyArray[MyArray['a191']]]  <!<  {size: Int, set: ((Int, MyArray[MyArray['a190']],) -> ()), get: (Int -> MyArray[MyArray['a190']])}
//│ ╟── while constraining:  'a191'  <!<  {size: Int, set: ((Int, MyArray[MyArray['a190']],) -> ()), get: (Int -> MyArray[MyArray['a190']])}
//│ ╟── while constraining:  ‹∀ 0. 'a169'›  <!<  {size: Int, set: ((Int, MyArray[MyArray['a190']],) -> ()), get: (Int -> MyArray[MyArray['a190']])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  {size: Int, set: ((Int, MyArray[MyArray['a190']],) -> ()), get: (Int -> MyArray[MyArray['a190']])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  (myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a190']],) -> ()), get: (Int -> MyArray[MyArray['a190']])})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a190']],) -> ()), get: (Int -> MyArray[MyArray['a190']])}) & {MyArray#A: mut MyArray[MyArray['a190']]..MyArray[MyArray['a190']]})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  MyArray[MyArray[MyArray['a190']]]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  'a190'
//│ ╟── while constraining:  'a189'  <!<  'a190'
//│ ╟── while constraining:  MyArray['a189']  <!<  MyArray['a190']
//│ ╟── while constraining:  MyArray[MyArray['a189']]  <!<  MyArray[MyArray['a190']]
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray[MyArray['a189']],)  <!<  (int<TypeName(number)>, MyArray[MyArray['a190']],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray[MyArray['a190']],) -> ())  <!<  ((int<TypeName(number)>, MyArray[MyArray['a189']],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a190']],) -> ()), get: (Int -> MyArray[MyArray['a190']])}) & {MyArray#A: mut MyArray[MyArray['a190']]..MyArray[MyArray['a190']]})  <!<  {size: Int, set: ((Int, MyArray[MyArray['a189']],) -> ()), get: (Int -> MyArray[MyArray['a189']])}
//│ ╟── while constraining:  MyArray[MyArray[MyArray['a190']]]  <!<  {size: Int, set: ((Int, MyArray[MyArray['a189']],) -> ()), get: (Int -> MyArray[MyArray['a189']])}
//│ ╟── while constraining:  'a190'  <!<  {size: Int, set: ((Int, MyArray[MyArray['a189']],) -> ()), get: (Int -> MyArray[MyArray['a189']])}
//│ ╟── while constraining:  ‹∀ 0. 'a169'›  <!<  {size: Int, set: ((Int, MyArray[MyArray['a189']],) -> ()), get: (Int -> MyArray[MyArray['a189']])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  {size: Int, set: ((Int, MyArray[MyArray['a189']],) -> ()), get: (Int -> MyArray[MyArray['a189']])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  (myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a189']],) -> ()), get: (Int -> MyArray[MyArray['a189']])})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a189']],) -> ()), get: (Int -> MyArray[MyArray['a189']])}) & {MyArray#A: mut MyArray[MyArray['a189']]..MyArray[MyArray['a189']]})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  MyArray[MyArray[MyArray['a189']]]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  'a189'
//│ ╟── while constraining:  'a188'  <!<  'a189'
//│ ╟── while constraining:  MyArray['a188']  <!<  MyArray['a189']
//│ ╟── while constraining:  MyArray[MyArray['a188']]  <!<  MyArray[MyArray['a189']]
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray[MyArray['a188']],)  <!<  (int<TypeName(number)>, MyArray[MyArray['a189']],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray[MyArray['a189']],) -> ())  <!<  ((int<TypeName(number)>, MyArray[MyArray['a188']],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a189']],) -> ()), get: (Int -> MyArray[MyArray['a189']])}) & {MyArray#A: mut MyArray[MyArray['a189']]..MyArray[MyArray['a189']]})  <!<  {size: Int, set: ((Int, MyArray[MyArray['a188']],) -> ()), get: (Int -> MyArray[MyArray['a188']])}
//│ ╟── while constraining:  MyArray[MyArray[MyArray['a189']]]  <!<  {size: Int, set: ((Int, MyArray[MyArray['a188']],) -> ()), get: (Int -> MyArray[MyArray['a188']])}
//│ ╟── while constraining:  'a189'  <!<  {size: Int, set: ((Int, MyArray[MyArray['a188']],) -> ()), get: (Int -> MyArray[MyArray['a188']])}
//│ ╟── while constraining:  ‹∀ 0. 'a169'›  <!<  {size: Int, set: ((Int, MyArray[MyArray['a188']],) -> ()), get: (Int -> MyArray[MyArray['a188']])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  {size: Int, set: ((Int, MyArray[MyArray['a188']],) -> ()), get: (Int -> MyArray[MyArray['a188']])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  (myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a188']],) -> ()), get: (Int -> MyArray[MyArray['a188']])})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a188']],) -> ()), get: (Int -> MyArray[MyArray['a188']])}) & {MyArray#A: mut MyArray[MyArray['a188']]..MyArray[MyArray['a188']]})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  MyArray[MyArray[MyArray['a188']]]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  'a188'
//│ ╟── while constraining:  'a187'  <!<  'a188'
//│ ╟── while constraining:  MyArray['a187']  <!<  MyArray['a188']
//│ ╟── while constraining:  MyArray[MyArray['a187']]  <!<  MyArray[MyArray['a188']]
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray[MyArray['a187']],)  <!<  (int<TypeName(number)>, MyArray[MyArray['a188']],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray[MyArray['a188']],) -> ())  <!<  ((int<TypeName(number)>, MyArray[MyArray['a187']],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a188']],) -> ()), get: (Int -> MyArray[MyArray['a188']])}) & {MyArray#A: mut MyArray[MyArray['a188']]..MyArray[MyArray['a188']]})  <!<  {size: Int, set: ((Int, MyArray[MyArray['a187']],) -> ()), get: (Int -> MyArray[MyArray['a187']])}
//│ ╟── while constraining:  MyArray[MyArray[MyArray['a188']]]  <!<  {size: Int, set: ((Int, MyArray[MyArray['a187']],) -> ()), get: (Int -> MyArray[MyArray['a187']])}
//│ ╟── while constraining:  'a188'  <!<  {size: Int, set: ((Int, MyArray[MyArray['a187']],) -> ()), get: (Int -> MyArray[MyArray['a187']])}
//│ ╟── while constraining:  ‹∀ 0. 'a169'›  <!<  {size: Int, set: ((Int, MyArray[MyArray['a187']],) -> ()), get: (Int -> MyArray[MyArray['a187']])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  {size: Int, set: ((Int, MyArray[MyArray['a187']],) -> ()), get: (Int -> MyArray[MyArray['a187']])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  (myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a187']],) -> ()), get: (Int -> MyArray[MyArray['a187']])})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a187']],) -> ()), get: (Int -> MyArray[MyArray['a187']])}) & {MyArray#A: mut MyArray[MyArray['a187']]..MyArray[MyArray['a187']]})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  MyArray[MyArray[MyArray['a187']]]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  'a187'
//│ ╟── while constraining:  'a186'  <!<  'a187'
//│ ╟── while constraining:  MyArray['a186']  <!<  MyArray['a187']
//│ ╟── while constraining:  MyArray[MyArray['a186']]  <!<  MyArray[MyArray['a187']]
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray[MyArray['a186']],)  <!<  (int<TypeName(number)>, MyArray[MyArray['a187']],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray[MyArray['a187']],) -> ())  <!<  ((int<TypeName(number)>, MyArray[MyArray['a186']],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a187']],) -> ()), get: (Int -> MyArray[MyArray['a187']])}) & {MyArray#A: mut MyArray[MyArray['a187']]..MyArray[MyArray['a187']]})  <!<  {size: Int, set: ((Int, MyArray[MyArray['a186']],) -> ()), get: (Int -> MyArray[MyArray['a186']])}
//│ ╟── while constraining:  MyArray[MyArray[MyArray['a187']]]  <!<  {size: Int, set: ((Int, MyArray[MyArray['a186']],) -> ()), get: (Int -> MyArray[MyArray['a186']])}
//│ ╟── while constraining:  'a187'  <!<  {size: Int, set: ((Int, MyArray[MyArray['a186']],) -> ()), get: (Int -> MyArray[MyArray['a186']])}
//│ ╟── while constraining:  ‹∀ 0. 'a169'›  <!<  {size: Int, set: ((Int, MyArray[MyArray['a186']],) -> ()), get: (Int -> MyArray[MyArray['a186']])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  {size: Int, set: ((Int, MyArray[MyArray['a186']],) -> ()), get: (Int -> MyArray[MyArray['a186']])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  (myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a186']],) -> ()), get: (Int -> MyArray[MyArray['a186']])})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a186']],) -> ()), get: (Int -> MyArray[MyArray['a186']])}) & {MyArray#A: mut MyArray[MyArray['a186']]..MyArray[MyArray['a186']]})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  MyArray[MyArray[MyArray['a186']]]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  'a186'
//│ ╟── while constraining:  'a185'  <!<  'a186'
//│ ╟── while constraining:  MyArray['a185']  <!<  MyArray['a186']
//│ ╟── while constraining:  MyArray[MyArray['a185']]  <!<  MyArray[MyArray['a186']]
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray[MyArray['a185']],)  <!<  (int<TypeName(number)>, MyArray[MyArray['a186']],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray[MyArray['a186']],) -> ())  <!<  ((int<TypeName(number)>, MyArray[MyArray['a185']],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a186']],) -> ()), get: (Int -> MyArray[MyArray['a186']])}) & {MyArray#A: mut MyArray[MyArray['a186']]..MyArray[MyArray['a186']]})  <!<  {size: Int, set: ((Int, MyArray[MyArray['a185']],) -> ()), get: (Int -> MyArray[MyArray['a185']])}
//│ ╟── while constraining:  MyArray[MyArray[MyArray['a186']]]  <!<  {size: Int, set: ((Int, MyArray[MyArray['a185']],) -> ()), get: (Int -> MyArray[MyArray['a185']])}
//│ ╟── while constraining:  'a186'  <!<  {size: Int, set: ((Int, MyArray[MyArray['a185']],) -> ()), get: (Int -> MyArray[MyArray['a185']])}
//│ ╟── while constraining:  ‹∀ 0. 'a169'›  <!<  {size: Int, set: ((Int, MyArray[MyArray['a185']],) -> ()), get: (Int -> MyArray[MyArray['a185']])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  {size: Int, set: ((Int, MyArray[MyArray['a185']],) -> ()), get: (Int -> MyArray[MyArray['a185']])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  (myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a185']],) -> ()), get: (Int -> MyArray[MyArray['a185']])})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a185']],) -> ()), get: (Int -> MyArray[MyArray['a185']])}) & {MyArray#A: mut MyArray[MyArray['a185']]..MyArray[MyArray['a185']]})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  MyArray[MyArray[MyArray['a185']]]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  'a185'
//│ ╟── while constraining:  'a184'  <!<  'a185'
//│ ╟── while constraining:  MyArray['a184']  <!<  MyArray['a185']
//│ ╟── while constraining:  MyArray[MyArray['a184']]  <!<  MyArray[MyArray['a185']]
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray[MyArray['a184']],)  <!<  (int<TypeName(number)>, MyArray[MyArray['a185']],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray[MyArray['a185']],) -> ())  <!<  ((int<TypeName(number)>, MyArray[MyArray['a184']],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a185']],) -> ()), get: (Int -> MyArray[MyArray['a185']])}) & {MyArray#A: mut MyArray[MyArray['a185']]..MyArray[MyArray['a185']]})  <!<  {size: Int, set: ((Int, MyArray[MyArray['a184']],) -> ()), get: (Int -> MyArray[MyArray['a184']])}
//│ ╟── while constraining:  MyArray[MyArray[MyArray['a185']]]  <!<  {size: Int, set: ((Int, MyArray[MyArray['a184']],) -> ()), get: (Int -> MyArray[MyArray['a184']])}
//│ ╟── while constraining:  'a185'  <!<  {size: Int, set: ((Int, MyArray[MyArray['a184']],) -> ()), get: (Int -> MyArray[MyArray['a184']])}
//│ ╟── while constraining:  ‹∀ 0. 'a169'›  <!<  {size: Int, set: ((Int, MyArray[MyArray['a184']],) -> ()), get: (Int -> MyArray[MyArray['a184']])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  {size: Int, set: ((Int, MyArray[MyArray['a184']],) -> ()), get: (Int -> MyArray[MyArray['a184']])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  (myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a184']],) -> ()), get: (Int -> MyArray[MyArray['a184']])})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a184']],) -> ()), get: (Int -> MyArray[MyArray['a184']])}) & {MyArray#A: mut MyArray[MyArray['a184']]..MyArray[MyArray['a184']]})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  MyArray[MyArray[MyArray['a184']]]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  'a184'
//│ ╟── while constraining:  'a183'  <!<  'a184'
//│ ╟── while constraining:  MyArray['a183']  <!<  MyArray['a184']
//│ ╟── while constraining:  MyArray[MyArray['a183']]  <!<  MyArray[MyArray['a184']]
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray[MyArray['a183']],)  <!<  (int<TypeName(number)>, MyArray[MyArray['a184']],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray[MyArray['a184']],) -> ())  <!<  ((int<TypeName(number)>, MyArray[MyArray['a183']],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a184']],) -> ()), get: (Int -> MyArray[MyArray['a184']])}) & {MyArray#A: mut MyArray[MyArray['a184']]..MyArray[MyArray['a184']]})  <!<  {size: Int, set: ((Int, MyArray[MyArray['a183']],) -> ()), get: (Int -> MyArray[MyArray['a183']])}
//│ ╟── while constraining:  MyArray[MyArray[MyArray['a184']]]  <!<  {size: Int, set: ((Int, MyArray[MyArray['a183']],) -> ()), get: (Int -> MyArray[MyArray['a183']])}
//│ ╟── while constraining:  'a184'  <!<  {size: Int, set: ((Int, MyArray[MyArray['a183']],) -> ()), get: (Int -> MyArray[MyArray['a183']])}
//│ ╟── while constraining:  ‹∀ 0. 'a169'›  <!<  {size: Int, set: ((Int, MyArray[MyArray['a183']],) -> ()), get: (Int -> MyArray[MyArray['a183']])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  {size: Int, set: ((Int, MyArray[MyArray['a183']],) -> ()), get: (Int -> MyArray[MyArray['a183']])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  (myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a183']],) -> ()), get: (Int -> MyArray[MyArray['a183']])})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a183']],) -> ()), get: (Int -> MyArray[MyArray['a183']])}) & {MyArray#A: mut MyArray[MyArray['a183']]..MyArray[MyArray['a183']]})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  MyArray[MyArray[MyArray['a183']]]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  'a183'
//│ ╟── while constraining:  'a182'  <!<  'a183'
//│ ╟── while constraining:  MyArray['a182']  <!<  MyArray['a183']
//│ ╟── while constraining:  MyArray[MyArray['a182']]  <!<  MyArray[MyArray['a183']]
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray[MyArray['a182']],)  <!<  (int<TypeName(number)>, MyArray[MyArray['a183']],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray[MyArray['a183']],) -> ())  <!<  ((int<TypeName(number)>, MyArray[MyArray['a182']],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a183']],) -> ()), get: (Int -> MyArray[MyArray['a183']])}) & {MyArray#A: mut MyArray[MyArray['a183']]..MyArray[MyArray['a183']]})  <!<  {size: Int, set: ((Int, MyArray[MyArray['a182']],) -> ()), get: (Int -> MyArray[MyArray['a182']])}
//│ ╟── while constraining:  MyArray[MyArray[MyArray['a183']]]  <!<  {size: Int, set: ((Int, MyArray[MyArray['a182']],) -> ()), get: (Int -> MyArray[MyArray['a182']])}
//│ ╟── while constraining:  'a183'  <!<  {size: Int, set: ((Int, MyArray[MyArray['a182']],) -> ()), get: (Int -> MyArray[MyArray['a182']])}
//│ ╟── while constraining:  ‹∀ 0. 'a169'›  <!<  {size: Int, set: ((Int, MyArray[MyArray['a182']],) -> ()), get: (Int -> MyArray[MyArray['a182']])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  {size: Int, set: ((Int, MyArray[MyArray['a182']],) -> ()), get: (Int -> MyArray[MyArray['a182']])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  (myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a182']],) -> ()), get: (Int -> MyArray[MyArray['a182']])})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a182']],) -> ()), get: (Int -> MyArray[MyArray['a182']])}) & {MyArray#A: mut MyArray[MyArray['a182']]..MyArray[MyArray['a182']]})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  MyArray[MyArray[MyArray['a182']]]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  'a182'
//│ ╟── while constraining:  'a180'  <!<  'a182'
//│ ╟── while constraining:  MyArray['a180']  <!<  MyArray['a182']
//│ ╟── while constraining:  MyArray[MyArray['a180']]  <!<  MyArray[MyArray['a182']]
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray[MyArray['a180']],)  <!<  (int<TypeName(number)>, MyArray[MyArray['a182']],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray[MyArray['a182']],) -> ())  <!<  ((int<TypeName(number)>, MyArray[MyArray['a180']],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a182']],) -> ()), get: (Int -> MyArray[MyArray['a182']])}) & {MyArray#A: mut MyArray[MyArray['a182']]..MyArray[MyArray['a182']]})  <!<  {size: Int, set: ((Int, MyArray[MyArray['a180']],) -> ()), get: (Int -> MyArray[MyArray['a180']])}
//│ ╟── while constraining:  MyArray[MyArray[MyArray['a182']]]  <!<  {size: Int, set: ((Int, MyArray[MyArray['a180']],) -> ()), get: (Int -> MyArray[MyArray['a180']])}
//│ ╟── while constraining:  'a182'  <!<  {size: Int, set: ((Int, MyArray[MyArray['a180']],) -> ()), get: (Int -> MyArray[MyArray['a180']])}
//│ ╟── while constraining:  ‹∀ 0. 'a169'›  <!<  {size: Int, set: ((Int, MyArray[MyArray['a180']],) -> ()), get: (Int -> MyArray[MyArray['a180']])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  {size: Int, set: ((Int, MyArray[MyArray['a180']],) -> ()), get: (Int -> MyArray[MyArray['a180']])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  (myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a180']],) -> ()), get: (Int -> MyArray[MyArray['a180']])})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a180']],) -> ()), get: (Int -> MyArray[MyArray['a180']])}) & {MyArray#A: mut MyArray[MyArray['a180']]..MyArray[MyArray['a180']]})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  MyArray[MyArray[MyArray['a180']]]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  'a180'
//│ ╟── while constraining:  'a179'  <!<  'a180'
//│ ╟── while constraining:  MyArray['a179']  <!<  MyArray['a180']
//│ ╟── while constraining:  MyArray[MyArray['a179']]  <!<  MyArray[MyArray['a180']]
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray[MyArray['a179']],)  <!<  (int<TypeName(number)>, MyArray[MyArray['a180']],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray[MyArray['a180']],) -> ())  <!<  ((int<TypeName(number)>, MyArray[MyArray['a179']],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a180']],) -> ()), get: (Int -> MyArray[MyArray['a180']])}) & {MyArray#A: mut MyArray[MyArray['a180']]..MyArray[MyArray['a180']]})  <!<  (‘a' | MyArray[MyArray[MyArray['a179']]])
//│ ╟── while constraining:  MyArray[MyArray[MyArray['a180']]]  <!<  (‘a' | MyArray[MyArray[MyArray['a179']]])
//│ ╟── while constraining:  'a180'  <!<  (‘a' | MyArray[MyArray[MyArray['a179']]])
//│ ╟── while constraining:  ‹∀ 0. 'a169'›  <!<  (‘a' | MyArray[MyArray[MyArray['a179']]])
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  (‘a' | MyArray[MyArray[MyArray['a179']]])
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  'a179'
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. 'a169'››  <!<  ‹∀ 0. 'a169'›
//│ constrain calls  : 661
//│ annoying  calls  : 158
//│ subtyping calls  : 144



//===//===//===// ERRORS //===//===//===//


:e
:stats
ty1A = ty1B
//│ MyArray[0 | 1]
//│   <:  ty1A:
//│ MyArray[int]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty1A = ty1B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `int` does not match type `0 | 1`
//│ ║  l.17: 	def ty1A: MyArray[int]
//│ ╙──      	                  ^^^
//│ constrain calls  : 32
//│ annoying  calls  : 29
//│ subtyping calls  : 101

:e
:stats
ty1B = ty1A
//│ MyArray[int]
//│   <:  ty1B:
//│ MyArray[0 | 1]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty1B = ty1A
//│ ║        	^^^^^^^^^^^
//│ ╟── type `int` does not match type `0 | 1`
//│ ║  l.17: 	def ty1A: MyArray[int]
//│ ╙──      	                  ^^^
//│ constrain calls  : 32
//│ annoying  calls  : 29
//│ subtyping calls  : 72


:e
:stats
ty2A = ty2B
//│ MyArray[MyArray['a]]
//│   <:  ty2A:
//│ MyArray['a]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `‘a` is not an instance of type `MyArray`
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ║        	                  ^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ╙──      	                  ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `‘a` is not a record (expected a record with fields: size, set, get)
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ║        	                  ^^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.4: 	class MyArray[A]: { size: int; set: (int, A) -> (); get: int -> A }
//│ ║       	                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ╙──      	                  ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `‘a` does not have field 'MyArray#A'
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ║        	                  ^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ╙──      	                  ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `MyArray[?a]` is not an instance of type `'a`
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ║        	                  ^^^^^^^^^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ╙──      	                  ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `‘a` is not a record (expected a record with fields: size, set, get)
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ║        	                  ^^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.4: 	class MyArray[A]: { size: int; set: (int, A) -> (); get: int -> A }
//│ ║       	                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ╙──      	                  ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `‘a` does not have field 'MyArray#A'
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ║        	                  ^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ╙──      	                  ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `MyArray[?a]` is not an instance of type `'a`
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ║        	                  ^^^^^^^^^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ╙──      	                  ^^
//│ constrain calls  : 46
//│ annoying  calls  : 32
//│ subtyping calls  : 105


