:ShowRelativeLineNums
:NoJS

class MyArray[A]: { size: int; set: (int, A) -> (); get: int -> A }
//│ Defined class MyArray[=A]

dummy = MyArray {
    size = 0;
    set = fun (i, a) -> ();
    get = fun i -> error
  }
//│ dummy: MyArray['A] with {get: anything -> nothing, set: (anything, anything,) -> (), size: 0}

dummy: MyArray[int]
//│ res: MyArray[int]

def ty1A: MyArray[int]
def ty1B: MyArray[0 | 1]
//│ ty1A: MyArray[int]
//│ ty1B: MyArray[0 | 1]


def ty2A: MyArray['a]
//│ ty2A: MyArray['a]

:stats
ty2A = ty2A
//│ MyArray['a]
//│   <:  ty2A:
//│ MyArray['a]
//│ constrain calls  : 40
//│ annoying  calls  : 24
//│ subtyping calls  : 28

def ty2B: MyArray[MyArray['a]]
//│ ty2B: MyArray[MyArray['a]]

:stats
ty2B = ty2A
//│ MyArray['a]
//│   <:  ty2B:
//│ MyArray[MyArray['a]]
//│ constrain calls  : 36
//│ annoying  calls  : 24
//│ subtyping calls  : 27



def ty3A: MyArray['a] as 'a
//│ ty3A: 'a
//│   where
//│     'a := MyArray['a]

:e // FIXME (probably the issue reproduced in `ADRsRepro.mls`)
:stats
ty3A = ty3A
//│ 'a
//│   where
//│     'a := MyArray['a]
//│   <:  ty3A:
//│ 'a
//│   where
//│     'a := MyArray['a]
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a. ?a <: forall ?a0. ?a0` exceeded recursion depth limit (200)
//│ ║  l.+1: 	ty3A = ty3A
//│ ║        	^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a118
//│ ╟── while constraining:  'a117  <!<  'a118
//│ ╟── while constraining:  (int<TypeName(number)>, 'a117,)  <!<  (int<TypeName(number)>, 'a118,)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a118,) -> ())  <!<  ((int<TypeName(number)>, 'a117,) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a118,) -> ()), get: (Int -> 'a118)}) & {MyArray#A: mut 'a118..'a118})  <!<  {size: Int, set: ((Int, 'a117,) -> ()), get: (Int -> 'a117)}
//│ ╟── while constraining:  MyArray['a118]  <!<  {size: Int, set: ((Int, 'a117,) -> ()), get: (Int -> 'a117)}
//│ ╟── while constraining:  'a118  <!<  {size: Int, set: ((Int, 'a117,) -> ()), get: (Int -> 'a117)}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a117,) -> ()), get: (Int -> 'a117)}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a117,) -> ()), get: (Int -> 'a117)}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a117,) -> ()), get: (Int -> 'a117)})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a117,) -> ()), get: (Int -> 'a117)}) & {MyArray#A: mut 'a117..'a117})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a117]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a117
//│ ╟── while constraining:  'a116  <!<  'a117
//│ ╟── while constraining:  (int<TypeName(number)>, 'a116,)  <!<  (int<TypeName(number)>, 'a117,)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a117,) -> ())  <!<  ((int<TypeName(number)>, 'a116,) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a117,) -> ()), get: (Int -> 'a117)}) & {MyArray#A: mut 'a117..'a117})  <!<  {size: Int, set: ((Int, 'a116,) -> ()), get: (Int -> 'a116)}
//│ ╟── while constraining:  MyArray['a117]  <!<  {size: Int, set: ((Int, 'a116,) -> ()), get: (Int -> 'a116)}
//│ ╟── while constraining:  'a117  <!<  {size: Int, set: ((Int, 'a116,) -> ()), get: (Int -> 'a116)}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a116,) -> ()), get: (Int -> 'a116)}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a116,) -> ()), get: (Int -> 'a116)}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a116,) -> ()), get: (Int -> 'a116)})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a116,) -> ()), get: (Int -> 'a116)}) & {MyArray#A: mut 'a116..'a116})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a116]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a116
//│ ╟── while constraining:  'a115  <!<  'a116
//│ ╟── while constraining:  (int<TypeName(number)>, 'a115,)  <!<  (int<TypeName(number)>, 'a116,)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a116,) -> ())  <!<  ((int<TypeName(number)>, 'a115,) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a116,) -> ()), get: (Int -> 'a116)}) & {MyArray#A: mut 'a116..'a116})  <!<  {size: Int, set: ((Int, 'a115,) -> ()), get: (Int -> 'a115)}
//│ ╟── while constraining:  MyArray['a116]  <!<  {size: Int, set: ((Int, 'a115,) -> ()), get: (Int -> 'a115)}
//│ ╟── while constraining:  'a116  <!<  {size: Int, set: ((Int, 'a115,) -> ()), get: (Int -> 'a115)}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a115,) -> ()), get: (Int -> 'a115)}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a115,) -> ()), get: (Int -> 'a115)}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a115,) -> ()), get: (Int -> 'a115)})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a115,) -> ()), get: (Int -> 'a115)}) & {MyArray#A: mut 'a115..'a115})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a115]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a115
//│ ╟── while constraining:  'a114  <!<  'a115
//│ ╟── while constraining:  (int<TypeName(number)>, 'a114,)  <!<  (int<TypeName(number)>, 'a115,)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a115,) -> ())  <!<  ((int<TypeName(number)>, 'a114,) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a115,) -> ()), get: (Int -> 'a115)}) & {MyArray#A: mut 'a115..'a115})  <!<  {size: Int, set: ((Int, 'a114,) -> ()), get: (Int -> 'a114)}
//│ ╟── while constraining:  MyArray['a115]  <!<  {size: Int, set: ((Int, 'a114,) -> ()), get: (Int -> 'a114)}
//│ ╟── while constraining:  'a115  <!<  {size: Int, set: ((Int, 'a114,) -> ()), get: (Int -> 'a114)}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a114,) -> ()), get: (Int -> 'a114)}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a114,) -> ()), get: (Int -> 'a114)}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a114,) -> ()), get: (Int -> 'a114)})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a114,) -> ()), get: (Int -> 'a114)}) & {MyArray#A: mut 'a114..'a114})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a114]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a114
//│ ╟── while constraining:  'a113  <!<  'a114
//│ ╟── while constraining:  (int<TypeName(number)>, 'a113,)  <!<  (int<TypeName(number)>, 'a114,)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a114,) -> ())  <!<  ((int<TypeName(number)>, 'a113,) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a114,) -> ()), get: (Int -> 'a114)}) & {MyArray#A: mut 'a114..'a114})  <!<  {size: Int, set: ((Int, 'a113,) -> ()), get: (Int -> 'a113)}
//│ ╟── while constraining:  MyArray['a114]  <!<  {size: Int, set: ((Int, 'a113,) -> ()), get: (Int -> 'a113)}
//│ ╟── while constraining:  'a114  <!<  {size: Int, set: ((Int, 'a113,) -> ()), get: (Int -> 'a113)}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a113,) -> ()), get: (Int -> 'a113)}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a113,) -> ()), get: (Int -> 'a113)}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a113,) -> ()), get: (Int -> 'a113)})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a113,) -> ()), get: (Int -> 'a113)}) & {MyArray#A: mut 'a113..'a113})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a113]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a113
//│ ╟── while constraining:  'a109  <!<  'a113
//│ ╟── while constraining:  (int<TypeName(number)>, 'a109,)  <!<  (int<TypeName(number)>, 'a113,)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a113,) -> ())  <!<  ((int<TypeName(number)>, 'a109,) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a113,) -> ()), get: (Int -> 'a113)}) & {MyArray#A: mut 'a113..'a113})  <!<  {size: Int, set: ((Int, 'a109,) -> ()), get: (Int -> 'a110)}
//│ ╟── while constraining:  MyArray['a113]  <!<  {size: Int, set: ((Int, 'a109,) -> ()), get: (Int -> 'a110)}
//│ ╟── while constraining:  'a113  <!<  {size: Int, set: ((Int, 'a109,) -> ()), get: (Int -> 'a110)}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a109,) -> ()), get: (Int -> 'a110)}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a109,) -> ()), get: (Int -> 'a110)}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a108
//│ ╟── while constraining:  'a109  <!<  'a108
//│ ╟── while constraining:  (int<TypeName(number)>, 'a109,)  <!<  (int<TypeName(number)>, 'a108,)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a108,) -> ())  <!<  ((int<TypeName(number)>, 'a109,) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a108,) -> ()), get: (Int -> 'a108)}) & {MyArray#A: mut 'a108..'a108})  <!<  {size: Int, set: ((Int, 'a109,) -> ()), get: (Int -> 'a110)}
//│ ╟── while constraining:  MyArray['a108]  <!<  {size: Int, set: ((Int, 'a109,) -> ()), get: (Int -> 'a110)}
//│ ╟── while constraining:  'a108  <!<  {size: Int, set: ((Int, 'a109,) -> ()), get: (Int -> 'a110)}
//│ ╟── while constraining:  'a108  <!<  {size: Int, set: ((Int, 'a106',) -> ()), get: (Int -> 'a106')}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a106',) -> ()), get: (Int -> 'a106')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a106',) -> ()), get: (Int -> 'a106')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a106',) -> ()), get: (Int -> 'a106')})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a106',) -> ()), get: (Int -> 'a106')}) & {MyArray#A: mut 'a106'..'a106'})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a106']
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a106'
//│ ╟── while constraining:  'a105'  <!<  'a106'
//│ ╟── while constraining:  (int<TypeName(number)>, 'a105',)  <!<  (int<TypeName(number)>, 'a106',)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a106',) -> ())  <!<  ((int<TypeName(number)>, 'a105',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a106',) -> ()), get: (Int -> 'a106')}) & {MyArray#A: mut 'a106'..'a106'})  <!<  (‘a' | MyArray['a105'])
//│ ╟── while constraining:  MyArray['a106']  <!<  (‘a' | MyArray['a105'])
//│ ╟── while constraining:  'a106'  <!<  (‘a' | MyArray['a105'])
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  (‘a' | MyArray['a105'])
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (‘a' | MyArray['a105'])
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a105'
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ‹∀ 0. 'a95'›
//│ constrain calls  : 339
//│ annoying  calls  : 116
//│ subtyping calls  : 111

def ty3B: MyArray[MyArray['a]] as 'a
//│ ty3B: 'a
//│   where
//│     'a := MyArray[MyArray['a]]

:e // FIXME (probably the issue reproduced in `ADRsRepro.mls`)
:stats
ty3B = ty3A
//│ 'a
//│   where
//│     'a := MyArray['a]
//│   <:  ty3B:
//│ 'a
//│   where
//│     'a := MyArray[MyArray['a]]
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a. ?a <: forall ?a0. ?a0` exceeded recursion depth limit (200)
//│ ║  l.+1: 	ty3B = ty3A
//│ ║        	^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a138,) -> ()), get: (Int -> 'a138)}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a139
//│ ╟── while constraining:  'a138  <!<  'a139
//│ ╟── while constraining:  (int<TypeName(number)>, 'a138,)  <!<  (int<TypeName(number)>, 'a139,)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a139,) -> ())  <!<  ((int<TypeName(number)>, 'a138,) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a139,) -> ()), get: (Int -> 'a139)}) & {MyArray#A: mut 'a139..'a139})  <!<  {size: Int, set: ((Int, 'a138,) -> ()), get: (Int -> 'a138)}
//│ ╟── while constraining:  MyArray['a139]  <!<  {size: Int, set: ((Int, 'a138,) -> ()), get: (Int -> 'a138)}
//│ ╟── while constraining:  'a139  <!<  {size: Int, set: ((Int, 'a138,) -> ()), get: (Int -> 'a138)}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a138,) -> ()), get: (Int -> 'a138)}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a138,) -> ()), get: (Int -> 'a138)}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a138,) -> ()), get: (Int -> 'a138)})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a138,) -> ()), get: (Int -> 'a138)}) & {MyArray#A: mut 'a138..'a138})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a138]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a138
//│ ╟── while constraining:  'a134  <!<  'a138
//│ ╟── while constraining:  MyArray['a134]  <!<  MyArray['a138]
//│ ╟── while constraining:  MyArray['a134]  <!<  'a138
//│ ╟── while constraining:  'a135  <!<  'a138
//│ ╟── while constraining:  (int<TypeName(number)>, 'a135,)  <!<  (int<TypeName(number)>, 'a138,)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a138,) -> ())  <!<  ((int<TypeName(number)>, 'a135,) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a138,) -> ()), get: (Int -> 'a138)}) & {MyArray#A: mut 'a138..'a138})  <!<  {size: Int, set: ((Int, 'a135,) -> ()), get: (Int -> 'a136)}
//│ ╟── while constraining:  MyArray['a138]  <!<  {size: Int, set: ((Int, 'a135,) -> ()), get: (Int -> 'a136)}
//│ ╟── while constraining:  'a138  <!<  {size: Int, set: ((Int, 'a135,) -> ()), get: (Int -> 'a136)}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a135,) -> ()), get: (Int -> 'a136)}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a135,) -> ()), get: (Int -> 'a136)}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a134
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a136
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a137
//│ ╟── while constraining:  'a135  <!<  'a137
//│ ╟── while constraining:  (int<TypeName(number)>, 'a135,)  <!<  (int<TypeName(number)>, 'a137,)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a137,) -> ())  <!<  ((int<TypeName(number)>, 'a135,) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a137,) -> ()), get: (Int -> 'a137)}) & {MyArray#A: mut 'a137..'a137})  <!<  {size: Int, set: ((Int, 'a135,) -> ()), get: (Int -> 'a136)}
//│ ╟── while constraining:  MyArray['a137]  <!<  {size: Int, set: ((Int, 'a135,) -> ()), get: (Int -> 'a136)}
//│ ╟── while constraining:  MyArray['a137]  <!<  'a134
//│ ╟── while constraining:  MyArray['a137]  <!<  'a136
//│ ╟── while constraining:  'a137  <!<  'a136
//│ ╟── while constraining:  MyArray['a136]  <!<  MyArray['a137]
//│ ╟── while constraining:  MyArray['a136]  <!<  'a137
//│ ╟── while constraining:  'a134  <!<  'a137
//│ ╟── while constraining:  MyArray['a134]  <!<  MyArray['a137]
//│ ╟── while constraining:  MyArray['a134]  <!<  'a137
//│ ╟── while constraining:  'a136  <!<  'a137
//│ ╟── while constraining:  (int<TypeName(number)>, 'a136,)  <!<  (int<TypeName(number)>, 'a137,)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a137,) -> ())  <!<  ((int<TypeName(number)>, 'a136,) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a137,) -> ()), get: (Int -> 'a137)}) & {MyArray#A: mut 'a137..'a137})  <!<  {size: Int, set: ((Int, 'a136,) -> ()), get: (Int -> 'a136)}
//│ ╟── while constraining:  MyArray['a137]  <!<  {size: Int, set: ((Int, 'a136,) -> ()), get: (Int -> 'a136)}
//│ ╟── while constraining:  'a137  <!<  {size: Int, set: ((Int, 'a136,) -> ()), get: (Int -> 'a136)}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a136,) -> ()), get: (Int -> 'a136)}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a136,) -> ()), get: (Int -> 'a136)}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a136,) -> ()), get: (Int -> 'a136)})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a136,) -> ()), get: (Int -> 'a136)}) & {MyArray#A: mut 'a136..'a136})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a136]
//│ ╟── while constraining:  'a135  <!<  MyArray['a136]
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a136..'a135,) -> ()), get: (Int -> 'a136..'a135)}) & {MyArray#A: mut 'a136..'a135..'a136..'a135})  <!<  (⊥ | MyArray[MyArray['a136..'a135]..MyArray['a136..'a135]])
//│ ╟── while constraining:  MyArray['a136..'a135]  <!<  (⊥ | MyArray[MyArray['a136..'a135]..MyArray['a136..'a135]])
//│ ╟── while constraining:  MyArray['a136..'a135]  <!<  'a136
//│ ╟── while constraining:  'a135  <!<  'a136
//│ ╟── while constraining:  (int<TypeName(number)>, 'a135,)  <!<  (int<TypeName(number)>, 'a136,)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a136,) -> ())  <!<  ((int<TypeName(number)>, 'a135,) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a136..'a135,) -> ()), get: (Int -> 'a136..'a135)}) & {MyArray#A: mut 'a136..'a135..'a136..'a135})  <!<  {size: Int, set: ((Int, 'a135,) -> ()), get: (Int -> 'a136)}
//│ ╟── while constraining:  MyArray['a136..'a135]  <!<  {size: Int, set: ((Int, 'a135,) -> ()), get: (Int -> 'a136)}
//│ ╟── while constraining:  MyArray['a136..'a135]  <!<  'a134
//│ ╟── while constraining:  'a135  <!<  'a134
//│ ╟── while constraining:  (int<TypeName(number)>, 'a135,)  <!<  (int<TypeName(number)>, 'a134,)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a134,) -> ())  <!<  ((int<TypeName(number)>, 'a135,) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a134,) -> ()), get: (Int -> 'a134)}) & {MyArray#A: mut 'a134..'a134})  <!<  {size: Int, set: ((Int, 'a135,) -> ()), get: (Int -> 'a136)}
//│ ╟── while constraining:  MyArray['a134]  <!<  {size: Int, set: ((Int, 'a135,) -> ()), get: (Int -> 'a136)}
//│ ╟── while constraining:  'a134  <!<  {size: Int, set: ((Int, 'a135,) -> ()), get: (Int -> 'a136)}
//│ ╟── while constraining:  'a134  <!<  {size: Int, set: ((Int, 'a131',) -> ()), get: (Int -> 'a131')}
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  {size: Int, set: ((Int, 'a131',) -> ()), get: (Int -> 'a131')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  {size: Int, set: ((Int, 'a131',) -> ()), get: (Int -> 'a131')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a131',) -> ()), get: (Int -> 'a131')})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a131',) -> ()), get: (Int -> 'a131')}) & {MyArray#A: mut 'a131'..'a131'})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  MyArray['a131']
//│ ╟── while constraining:  'a131'  <!<  MyArray['a131']
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a131',) -> ()), get: (Int -> 'a131')}) & {MyArray#A: mut 'a131'..'a131'})  <!<  (‘a' | MyArray[MyArray['a131']])
//│ ╟── while constraining:  MyArray['a131']  <!<  (‘a' | MyArray[MyArray['a131']])
//│ ╟── while constraining:  MyArray['a131']  <!<  'a132'
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray['a131'],)  <!<  (int<TypeName(number)>, 'a132',)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a132',) -> ())  <!<  ((int<TypeName(number)>, MyArray['a131'],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a132',) -> ()), get: (Int -> 'a132')}) & {MyArray#A: mut 'a132'..'a132'})  <!<  (‘a' | MyArray[MyArray['a131']])
//│ ╟── while constraining:  MyArray['a132']  <!<  (‘a' | MyArray[MyArray['a131']])
//│ ╟── while constraining:  'a132'  <!<  (‘a' | MyArray[MyArray['a131']])
//│ ╟── while constraining:  ‹∀ 0. 'a95'›  <!<  (‘a' | MyArray[MyArray['a131']])
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  (‘a' | MyArray[MyArray['a131']])
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  'a131'
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. 'a95'››  <!<  ‹∀ 0. 'a121'›
//│ constrain calls  : 631
//│ annoying  calls  : 234
//│ subtyping calls  : 222

:e // FIXME (probably the issue reproduced in `ADRsRepro.mls`)
:stats
ty3A = ty3B
//│ 'a
//│   where
//│     'a := MyArray[MyArray['a]]
//│   <:  ty3A:
//│ 'a
//│   where
//│     'a := MyArray['a]
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a. ?a <: forall ?a0. ?a0` exceeded recursion depth limit (200)
//│ ║  l.+1: 	ty3A = ty3B
//│ ║        	^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  'a159
//│ ╟── while constraining:  'a158  <!<  'a159
//│ ╟── while constraining:  MyArray['a158]  <!<  MyArray['a159]
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray['a158],)  <!<  (int<TypeName(number)>, MyArray['a159],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray['a159],) -> ())  <!<  ((int<TypeName(number)>, MyArray['a158],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray['a159],) -> ()), get: (Int -> MyArray['a159])}) & {MyArray#A: mut MyArray['a159]..MyArray['a159]})  <!<  {size: Int, set: ((Int, MyArray['a158],) -> ()), get: (Int -> MyArray['a158])}
//│ ╟── while constraining:  MyArray[MyArray['a159]]  <!<  {size: Int, set: ((Int, MyArray['a158],) -> ()), get: (Int -> MyArray['a158])}
//│ ╟── while constraining:  'a159  <!<  {size: Int, set: ((Int, MyArray['a158],) -> ()), get: (Int -> MyArray['a158])}
//│ ╟── while constraining:  ‹∀ 0. 'a121'›  <!<  {size: Int, set: ((Int, MyArray['a158],) -> ()), get: (Int -> MyArray['a158])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  {size: Int, set: ((Int, MyArray['a158],) -> ()), get: (Int -> MyArray['a158])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  (myArray<> & {size: Int, set: ((Int, MyArray['a158],) -> ()), get: (Int -> MyArray['a158])})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray['a158],) -> ()), get: (Int -> MyArray['a158])}) & {MyArray#A: mut MyArray['a158]..MyArray['a158]})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  MyArray[MyArray['a158]]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  'a158
//│ ╟── while constraining:  'a157  <!<  'a158
//│ ╟── while constraining:  MyArray['a157]  <!<  MyArray['a158]
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray['a157],)  <!<  (int<TypeName(number)>, MyArray['a158],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray['a158],) -> ())  <!<  ((int<TypeName(number)>, MyArray['a157],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray['a158],) -> ()), get: (Int -> MyArray['a158])}) & {MyArray#A: mut MyArray['a158]..MyArray['a158]})  <!<  {size: Int, set: ((Int, MyArray['a157],) -> ()), get: (Int -> MyArray['a157])}
//│ ╟── while constraining:  MyArray[MyArray['a158]]  <!<  {size: Int, set: ((Int, MyArray['a157],) -> ()), get: (Int -> MyArray['a157])}
//│ ╟── while constraining:  'a158  <!<  {size: Int, set: ((Int, MyArray['a157],) -> ()), get: (Int -> MyArray['a157])}
//│ ╟── while constraining:  ‹∀ 0. 'a121'›  <!<  {size: Int, set: ((Int, MyArray['a157],) -> ()), get: (Int -> MyArray['a157])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  {size: Int, set: ((Int, MyArray['a157],) -> ()), get: (Int -> MyArray['a157])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  (myArray<> & {size: Int, set: ((Int, MyArray['a157],) -> ()), get: (Int -> MyArray['a157])})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray['a157],) -> ()), get: (Int -> MyArray['a157])}) & {MyArray#A: mut MyArray['a157]..MyArray['a157]})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  MyArray[MyArray['a157]]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  'a157
//│ ╟── while constraining:  'a156  <!<  'a157
//│ ╟── while constraining:  MyArray['a156]  <!<  MyArray['a157]
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray['a156],)  <!<  (int<TypeName(number)>, MyArray['a157],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray['a157],) -> ())  <!<  ((int<TypeName(number)>, MyArray['a156],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray['a157],) -> ()), get: (Int -> MyArray['a157])}) & {MyArray#A: mut MyArray['a157]..MyArray['a157]})  <!<  {size: Int, set: ((Int, MyArray['a156],) -> ()), get: (Int -> MyArray['a156])}
//│ ╟── while constraining:  MyArray[MyArray['a157]]  <!<  {size: Int, set: ((Int, MyArray['a156],) -> ()), get: (Int -> MyArray['a156])}
//│ ╟── while constraining:  'a157  <!<  {size: Int, set: ((Int, MyArray['a156],) -> ()), get: (Int -> MyArray['a156])}
//│ ╟── while constraining:  ‹∀ 0. 'a121'›  <!<  {size: Int, set: ((Int, MyArray['a156],) -> ()), get: (Int -> MyArray['a156])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  {size: Int, set: ((Int, MyArray['a156],) -> ()), get: (Int -> MyArray['a156])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  (myArray<> & {size: Int, set: ((Int, MyArray['a156],) -> ()), get: (Int -> MyArray['a156])})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray['a156],) -> ()), get: (Int -> MyArray['a156])}) & {MyArray#A: mut MyArray['a156]..MyArray['a156]})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  MyArray[MyArray['a156]]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  'a156
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  'a151
//│ ╟── while constraining:  'a155  <!<  'a151
//│ ╟── while constraining:  (int<TypeName(number)>, 'a155,)  <!<  (int<TypeName(number)>, 'a151,)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a151,) -> ())  <!<  ((int<TypeName(number)>, 'a155,) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a151,) -> ()), get: (Int -> 'a151)}) & {MyArray#A: mut 'a151..'a151})  <!<  (⊥ | MyArray['a154..'a155])
//│ ╟── while constraining:  MyArray['a151]  <!<  (⊥ | MyArray['a154..'a155])
//│ ╟── while constraining:  MyArray['a151]  <!<  'a153
//│ ╟── while constraining:  (int<TypeName(number)> -> MyArray['a151])  <!<  (int<TypeName(number)> -> 'a153)
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray['a151],) -> ()), get: (Int -> MyArray['a151])}) & {MyArray#A: mut MyArray['a151]..MyArray['a151]})  <!<  {size: Int, set: ((Int, 'a153,) -> ()), get: (Int -> 'a153)}
//│ ╟── while constraining:  MyArray[MyArray['a151]]  <!<  {size: Int, set: ((Int, 'a153,) -> ()), get: (Int -> 'a153)}
//│ ╟── while constraining:  MyArray[MyArray['a151]]  <!<  'a156
//│ ╟── while constraining:  'a151  <!<  'a156
//│ ╟── while constraining:  MyArray['a151]  <!<  MyArray['a156]
//│ ╟── while constraining:  MyArray[MyArray['a156]]  <!<  MyArray[MyArray['a151]]
//│ ╟── while constraining:  MyArray[MyArray['a156]]  <!<  'a151
//│ ╟── while constraining:  'a156  <!<  'a151
//│ ╟── while constraining:  MyArray['a156]  <!<  MyArray['a151]
//│ ╟── while constraining:  MyArray['a156]  <!<  'a152
//│ ╟── while constraining:  MyArray['a156]  <!<  'a153
//│ ╟── while constraining:  MyArray['a156]  <!<  'a153..'a152
//│ ╟── while constraining:  MyArray['a153..'a152]  <!<  MyArray[MyArray['a156]]
//│ ╟── while constraining:  MyArray['a153..'a152]  <!<  'a156
//│ ╟── while constraining:  MyArray['a153..'a152]..MyArray['a153..'a152]  <!<  'a156
//│ ╟── while constraining:  MyArray[MyArray['a153..'a152]..MyArray['a153..'a152]]  <!<  MyArray['a156]
//│ ╟── while constraining:  'a153  <!<  MyArray['a156]
//│ ╟── while constraining:  (int<TypeName(number)>, 'a153,)  <!<  (int<TypeName(number)>, MyArray['a156],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray['a156],) -> ())  <!<  ((int<TypeName(number)>, 'a153,) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray['a156],) -> ()), get: (Int -> MyArray['a156])}) & {MyArray#A: mut MyArray['a156]..MyArray['a156]})  <!<  {size: Int, set: ((Int, 'a153,) -> ()), get: (Int -> 'a153)}
//│ ╟── while constraining:  MyArray[MyArray['a156]]  <!<  {size: Int, set: ((Int, 'a153,) -> ()), get: (Int -> 'a153)}
//│ ╟── while constraining:  'a156  <!<  {size: Int, set: ((Int, 'a153,) -> ()), get: (Int -> 'a153)}
//│ ╟── while constraining:  ‹∀ 0. 'a121'›  <!<  {size: Int, set: ((Int, 'a153,) -> ()), get: (Int -> 'a153)}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  {size: Int, set: ((Int, 'a153,) -> ()), get: (Int -> 'a153)}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a153,) -> ()), get: (Int -> 'a153)})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a153,) -> ()), get: (Int -> 'a153)}) & {MyArray#A: mut 'a153..'a153})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  MyArray['a153]
//│ ╟── while constraining:  'a155  <!<  MyArray['a153]
//│ ╟── while constraining:  (int<TypeName(number)>, 'a155,)  <!<  (int<TypeName(number)>, MyArray['a153],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray['a153],) -> ())  <!<  ((int<TypeName(number)>, 'a155,) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray['a153..'a152]..MyArray['a153..'a152],) -> ()), get: (Int -> MyArray['a153..'a152]..MyArray['a153..'a152])}) & {MyArray#A: mut MyArray['a153..'a152]..MyArray['a153..'a152]..MyArray['a153..'a152]..MyArray['a153..'a152]})  <!<  (⊥ | MyArray['a154..'a155])
//│ ╟── while constraining:  MyArray[MyArray['a153..'a152]..MyArray['a153..'a152]]  <!<  (⊥ | MyArray['a154..'a155])
//│ ╟── while constraining:  MyArray[MyArray['a153..'a152]..MyArray['a153..'a152]]  <!<  'a153
//│ ╟── while constraining:  'a152  <!<  'a153
//│ ╟── while constraining:  (int<TypeName(number)>, 'a152,)  <!<  (int<TypeName(number)>, 'a153,)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a153,) -> ())  <!<  ((int<TypeName(number)>, 'a152,) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a153..'a152,) -> ()), get: (Int -> 'a153..'a152)}) & {MyArray#A: mut 'a153..'a152..'a153..'a152})  <!<  {size: Int, set: ((Int, 'a152,) -> ()), get: (Int -> 'a153)}
//│ ╟── while constraining:  MyArray['a153..'a152]  <!<  {size: Int, set: ((Int, 'a152,) -> ()), get: (Int -> 'a153)}
//│ ╟── while constraining:  MyArray['a153..'a152]  <!<  'a151
//│ ╟── while constraining:  MyArray['a153..'a152]..MyArray['a153..'a152]  <!<  'a151
//│ ╟── while constraining:  MyArray[MyArray['a153..'a152]..MyArray['a153..'a152]]  <!<  MyArray['a151]
//│ ╟── while constraining:  'a152  <!<  MyArray['a151]
//│ ╟── while constraining:  (int<TypeName(number)>, 'a152,)  <!<  (int<TypeName(number)>, MyArray['a151],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray['a151],) -> ())  <!<  ((int<TypeName(number)>, 'a152,) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray['a151],) -> ()), get: (Int -> MyArray['a151])}) & {MyArray#A: mut MyArray['a151]..MyArray['a151]})  <!<  {size: Int, set: ((Int, 'a152,) -> ()), get: (Int -> 'a153)}
//│ ╟── while constraining:  MyArray[MyArray['a151]]  <!<  {size: Int, set: ((Int, 'a152,) -> ()), get: (Int -> 'a153)}
//│ ╟── while constraining:  'a151  <!<  {size: Int, set: ((Int, 'a152,) -> ()), get: (Int -> 'a153)}
//│ ╟── while constraining:  'a151  <!<  {size: Int, set: ((Int, 'a149',) -> ()), get: (Int -> 'a149')}
//│ ╟── while constraining:  ‹∀ 0. 'a121'›  <!<  {size: Int, set: ((Int, 'a149',) -> ()), get: (Int -> 'a149')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  {size: Int, set: ((Int, 'a149',) -> ()), get: (Int -> 'a149')}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  (myArray<> & {size: Int, set: ((Int, 'a149',) -> ()), get: (Int -> 'a149')})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  ((myArray<> & {size: Int, set: ((Int, 'a149',) -> ()), get: (Int -> 'a149')}) & {MyArray#A: mut 'a149'..'a149'})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  MyArray['a149']
//│ ╟── while constraining:  'a148'  <!<  MyArray['a149']
//│ ╟── while constraining:  (int<TypeName(number)>, 'a148',)  <!<  (int<TypeName(number)>, MyArray['a149'],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray['a149'],) -> ())  <!<  ((int<TypeName(number)>, 'a148',) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray['a149'],) -> ()), get: (Int -> MyArray['a149'])}) & {MyArray#A: mut MyArray['a149']..MyArray['a149']})  <!<  (‘a' | MyArray['a148'])
//│ ╟── while constraining:  MyArray[MyArray['a149']]  <!<  (‘a' | MyArray['a148'])
//│ ╟── while constraining:  'a149'  <!<  (‘a' | MyArray['a148'])
//│ ╟── while constraining:  ‹∀ 0. 'a121'›  <!<  (‘a' | MyArray['a148'])
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  (‘a' | MyArray['a148'])
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  'a148'
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. 'a121'››  <!<  ‹∀ 0. 'a95'›
//│ constrain calls  : 404
//│ annoying  calls  : 175
//│ subtyping calls  : 172

def ty4B: MyArray[MyArray[MyArray['a]]] as 'a
//│ ty4B: 'a
//│   where
//│     'a := MyArray[MyArray[MyArray['a]]]

:e // FIXME (probably the issue reproduced in `ADRsRepro.mls`)
:stats
ty4B = ty4B
//│ 'a
//│   where
//│     'a := MyArray[MyArray[MyArray['a]]]
//│   <:  ty4B:
//│ 'a
//│   where
//│     'a := MyArray[MyArray[MyArray['a]]]
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a. ?a <: forall ?a0. ?a0` exceeded recursion depth limit (200)
//│ ║  l.+1: 	ty4B = ty4B
//│ ║        	^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a162'››  <!<  {size: Int, set: ((Int, MyArray[MyArray['a182]],) -> ()), get: (Int -> MyArray[MyArray['a182]])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a162'››  <!<  'a183
//│ ╟── while constraining:  'a182  <!<  'a183
//│ ╟── while constraining:  MyArray['a182]  <!<  MyArray['a183]
//│ ╟── while constraining:  MyArray[MyArray['a182]]  <!<  MyArray[MyArray['a183]]
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray[MyArray['a182]],)  <!<  (int<TypeName(number)>, MyArray[MyArray['a183]],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray[MyArray['a183]],) -> ())  <!<  ((int<TypeName(number)>, MyArray[MyArray['a182]],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a183]],) -> ()), get: (Int -> MyArray[MyArray['a183]])}) & {MyArray#A: mut MyArray[MyArray['a183]]..MyArray[MyArray['a183]]})  <!<  {size: Int, set: ((Int, MyArray[MyArray['a182]],) -> ()), get: (Int -> MyArray[MyArray['a182]])}
//│ ╟── while constraining:  MyArray[MyArray[MyArray['a183]]]  <!<  {size: Int, set: ((Int, MyArray[MyArray['a182]],) -> ()), get: (Int -> MyArray[MyArray['a182]])}
//│ ╟── while constraining:  'a183  <!<  {size: Int, set: ((Int, MyArray[MyArray['a182]],) -> ()), get: (Int -> MyArray[MyArray['a182]])}
//│ ╟── while constraining:  ‹∀ 0. 'a162'›  <!<  {size: Int, set: ((Int, MyArray[MyArray['a182]],) -> ()), get: (Int -> MyArray[MyArray['a182]])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a162'››  <!<  {size: Int, set: ((Int, MyArray[MyArray['a182]],) -> ()), get: (Int -> MyArray[MyArray['a182]])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a162'››  <!<  (myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a182]],) -> ()), get: (Int -> MyArray[MyArray['a182]])})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a162'››  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a182]],) -> ()), get: (Int -> MyArray[MyArray['a182]])}) & {MyArray#A: mut MyArray[MyArray['a182]]..MyArray[MyArray['a182]]})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a162'››  <!<  MyArray[MyArray[MyArray['a182]]]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a162'››  <!<  'a182
//│ ╟── while constraining:  'a181  <!<  'a182
//│ ╟── while constraining:  MyArray['a181]  <!<  MyArray['a182]
//│ ╟── while constraining:  MyArray[MyArray['a181]]  <!<  MyArray[MyArray['a182]]
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray[MyArray['a181]],)  <!<  (int<TypeName(number)>, MyArray[MyArray['a182]],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray[MyArray['a182]],) -> ())  <!<  ((int<TypeName(number)>, MyArray[MyArray['a181]],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a182]],) -> ()), get: (Int -> MyArray[MyArray['a182]])}) & {MyArray#A: mut MyArray[MyArray['a182]]..MyArray[MyArray['a182]]})  <!<  {size: Int, set: ((Int, MyArray[MyArray['a181]],) -> ()), get: (Int -> MyArray[MyArray['a181]])}
//│ ╟── while constraining:  MyArray[MyArray[MyArray['a182]]]  <!<  {size: Int, set: ((Int, MyArray[MyArray['a181]],) -> ()), get: (Int -> MyArray[MyArray['a181]])}
//│ ╟── while constraining:  'a182  <!<  {size: Int, set: ((Int, MyArray[MyArray['a181]],) -> ()), get: (Int -> MyArray[MyArray['a181]])}
//│ ╟── while constraining:  ‹∀ 0. 'a162'›  <!<  {size: Int, set: ((Int, MyArray[MyArray['a181]],) -> ()), get: (Int -> MyArray[MyArray['a181]])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a162'››  <!<  {size: Int, set: ((Int, MyArray[MyArray['a181]],) -> ()), get: (Int -> MyArray[MyArray['a181]])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a162'››  <!<  (myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a181]],) -> ()), get: (Int -> MyArray[MyArray['a181]])})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a162'››  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a181]],) -> ()), get: (Int -> MyArray[MyArray['a181]])}) & {MyArray#A: mut MyArray[MyArray['a181]]..MyArray[MyArray['a181]]})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a162'››  <!<  MyArray[MyArray[MyArray['a181]]]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a162'››  <!<  'a181
//│ ╟── while constraining:  'a180  <!<  'a181
//│ ╟── while constraining:  MyArray['a180]  <!<  MyArray['a181]
//│ ╟── while constraining:  MyArray[MyArray['a180]]  <!<  MyArray[MyArray['a181]]
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray[MyArray['a180]],)  <!<  (int<TypeName(number)>, MyArray[MyArray['a181]],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray[MyArray['a181]],) -> ())  <!<  ((int<TypeName(number)>, MyArray[MyArray['a180]],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a181]],) -> ()), get: (Int -> MyArray[MyArray['a181]])}) & {MyArray#A: mut MyArray[MyArray['a181]]..MyArray[MyArray['a181]]})  <!<  {size: Int, set: ((Int, MyArray[MyArray['a180]],) -> ()), get: (Int -> MyArray[MyArray['a180]])}
//│ ╟── while constraining:  MyArray[MyArray[MyArray['a181]]]  <!<  {size: Int, set: ((Int, MyArray[MyArray['a180]],) -> ()), get: (Int -> MyArray[MyArray['a180]])}
//│ ╟── while constraining:  'a181  <!<  {size: Int, set: ((Int, MyArray[MyArray['a180]],) -> ()), get: (Int -> MyArray[MyArray['a180]])}
//│ ╟── while constraining:  ‹∀ 0. 'a162'›  <!<  {size: Int, set: ((Int, MyArray[MyArray['a180]],) -> ()), get: (Int -> MyArray[MyArray['a180]])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a162'››  <!<  {size: Int, set: ((Int, MyArray[MyArray['a180]],) -> ()), get: (Int -> MyArray[MyArray['a180]])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a162'››  <!<  (myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a180]],) -> ()), get: (Int -> MyArray[MyArray['a180]])})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a162'››  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a180]],) -> ()), get: (Int -> MyArray[MyArray['a180]])}) & {MyArray#A: mut MyArray[MyArray['a180]]..MyArray[MyArray['a180]]})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a162'››  <!<  MyArray[MyArray[MyArray['a180]]]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a162'››  <!<  'a180
//│ ╟── while constraining:  'a177  <!<  'a180
//│ ╟── while constraining:  MyArray['a177]  <!<  MyArray['a180]
//│ ╟── while constraining:  MyArray[MyArray['a177]]  <!<  MyArray[MyArray['a180]]
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray[MyArray['a177]],)  <!<  (int<TypeName(number)>, MyArray[MyArray['a180]],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray[MyArray['a180]],) -> ())  <!<  ((int<TypeName(number)>, MyArray[MyArray['a177]],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a180]],) -> ()), get: (Int -> MyArray[MyArray['a180]])}) & {MyArray#A: mut MyArray[MyArray['a180]]..MyArray[MyArray['a180]]})  <!<  (⊥ | MyArray[MyArray[MyArray['a177..'a178]..MyArray['a177..'a178]]..MyArray[MyArray['a177..'a178]..MyArray['a177..'a178]]])
//│ ╟── while constraining:  MyArray[MyArray[MyArray['a180]]]  <!<  (⊥ | MyArray[MyArray[MyArray['a177..'a178]..MyArray['a177..'a178]]..MyArray[MyArray['a177..'a178]..MyArray['a177..'a178]]])
//│ ╟── while constraining:  'a180  <!<  (⊥ | MyArray[MyArray[MyArray['a177..'a178]..MyArray['a177..'a178]]..MyArray[MyArray['a177..'a178]..MyArray['a177..'a178]]])
//│ ╟── while constraining:  ‹∀ 0. 'a162'›  <!<  (⊥ | MyArray[MyArray[MyArray['a177..'a178]..MyArray['a177..'a178]]..MyArray[MyArray['a177..'a178]..MyArray['a177..'a178]]])
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a162'››  <!<  (⊥ | MyArray[MyArray[MyArray['a177..'a178]..MyArray['a177..'a178]]..MyArray[MyArray['a177..'a178]..MyArray['a177..'a178]]])
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a162'››  <!<  'a176
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a162'››  <!<  'a177
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a162'››  <!<  'a175
//│ ╟── while constraining:  'a179  <!<  'a175
//│ ╟── while constraining:  'a176..'a179  <!<  'a175
//│ ╟── while constraining:  MyArray['a175]  <!<  MyArray['a176..'a179]
//│ ╟── while constraining:  MyArray['a175]  <!<  MyArray['a176..'a179]..MyArray['a176..'a179]
//│ ╟── while constraining:  MyArray[MyArray['a175]]  <!<  MyArray[MyArray['a176..'a179]..MyArray['a176..'a179]]
//│ ╟── while constraining:  MyArray[MyArray['a175]]  <!<  MyArray[MyArray['a176..'a179]..MyArray['a176..'a179]]..MyArray[MyArray['a176..'a179]..MyArray['a176..'a179]]
//│ ╟── while constraining:  MyArray[MyArray[MyArray['a175]]]  <!<  MyArray[MyArray[MyArray['a176..'a179]..MyArray['a176..'a179]]..MyArray[MyArray['a176..'a179]..MyArray['a176..'a179]]]
//│ ╟── while constraining:  MyArray[MyArray[MyArray['a175]]]  <!<  'a176
//│ ╟── while constraining:  'a175  <!<  'a176
//│ ╟── while constraining:  MyArray['a176]  <!<  MyArray['a175]
//│ ╟── while constraining:  MyArray[MyArray['a176]]  <!<  MyArray[MyArray['a175]]
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray[MyArray['a176]],)  <!<  (int<TypeName(number)>, MyArray[MyArray['a175]],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray[MyArray['a175]],) -> ())  <!<  ((int<TypeName(number)>, MyArray[MyArray['a176]],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a175]],) -> ()), get: (Int -> MyArray[MyArray['a175]])}) & {MyArray#A: mut MyArray[MyArray['a175]]..MyArray[MyArray['a175]]})  <!<  {size: Int, set: ((Int, MyArray[MyArray['a176..'a179]..MyArray['a176..'a179]],) -> ()), get: (Int -> MyArray[MyArray['a176..'a179]..MyArray['a176..'a179]])}
//│ ╟── while constraining:  MyArray[MyArray[MyArray['a175]]]  <!<  {size: Int, set: ((Int, MyArray[MyArray['a176..'a179]..MyArray['a176..'a179]],) -> ()), get: (Int -> MyArray[MyArray['a176..'a179]..MyArray['a176..'a179]])}
//│ ╟── while constraining:  'a175  <!<  {size: Int, set: ((Int, MyArray[MyArray['a176..'a179]..MyArray['a176..'a179]],) -> ()), get: (Int -> MyArray[MyArray['a176..'a179]..MyArray['a176..'a179]])}
//│ ╟── while constraining:  'a175  <!<  {size: Int, set: ((Int, MyArray[MyArray['a173']],) -> ()), get: (Int -> MyArray[MyArray['a173']])}
//│ ╟── while constraining:  ‹∀ 0. 'a162'›  <!<  {size: Int, set: ((Int, MyArray[MyArray['a173']],) -> ()), get: (Int -> MyArray[MyArray['a173']])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a162'››  <!<  {size: Int, set: ((Int, MyArray[MyArray['a173']],) -> ()), get: (Int -> MyArray[MyArray['a173']])}
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a162'››  <!<  (myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a173']],) -> ()), get: (Int -> MyArray[MyArray['a173']])})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a162'››  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a173']],) -> ()), get: (Int -> MyArray[MyArray['a173']])}) & {MyArray#A: mut MyArray[MyArray['a173']]..MyArray[MyArray['a173']]})
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a162'››  <!<  MyArray[MyArray[MyArray['a173']]]
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a162'››  <!<  'a173'
//│ ╟── while constraining:  'a172'  <!<  'a173'
//│ ╟── while constraining:  MyArray['a172']  <!<  MyArray['a173']
//│ ╟── while constraining:  MyArray[MyArray['a172']]  <!<  MyArray[MyArray['a173']]
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray[MyArray['a172']],)  <!<  (int<TypeName(number)>, MyArray[MyArray['a173']],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray[MyArray['a173']],) -> ())  <!<  ((int<TypeName(number)>, MyArray[MyArray['a172']],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a173']],) -> ()), get: (Int -> MyArray[MyArray['a173']])}) & {MyArray#A: mut MyArray[MyArray['a173']]..MyArray[MyArray['a173']]})  <!<  (‘a' | MyArray[MyArray[MyArray['a172']]])
//│ ╟── while constraining:  MyArray[MyArray[MyArray['a173']]]  <!<  (‘a' | MyArray[MyArray[MyArray['a172']]])
//│ ╟── while constraining:  'a173'  <!<  (‘a' | MyArray[MyArray[MyArray['a172']]])
//│ ╟── while constraining:  ‹∀ 0. 'a162'›  <!<  (‘a' | MyArray[MyArray[MyArray['a172']]])
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a162'››  <!<  (‘a' | MyArray[MyArray[MyArray['a172']]])
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. 'a162'››  <!<  'a172'
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. 'a162'››  <!<  ‹∀ 0. 'a162'›
//│ constrain calls  : 384
//│ annoying  calls  : 118
//│ subtyping calls  : 112



//===//===//===// ERRORS //===//===//===//


:e
:stats
ty1A = ty1B
//│ MyArray[0 | 1]
//│   <:  ty1A:
//│ MyArray[int]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty1A = ty1B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `int` does not match type `0 | 1`
//│ ║  l.17: 	def ty1A: MyArray[int]
//│ ╙──      	                  ^^^
//│ constrain calls  : 32
//│ annoying  calls  : 29
//│ subtyping calls  : 101

:e
:stats
ty1B = ty1A
//│ MyArray[int]
//│   <:  ty1B:
//│ MyArray[0 | 1]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty1B = ty1A
//│ ║        	^^^^^^^^^^^
//│ ╟── type `int` does not match type `0 | 1`
//│ ║  l.17: 	def ty1A: MyArray[int]
//│ ╙──      	                  ^^^
//│ constrain calls  : 32
//│ annoying  calls  : 29
//│ subtyping calls  : 72


:e
:stats
ty2A = ty2B
//│ MyArray[MyArray['a]]
//│   <:  ty2A:
//│ MyArray['a]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `‘a` is not an instance of type `MyArray`
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ║        	                  ^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ╙──      	                  ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `‘a` is not a record (expected a record with fields: size, set, get)
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ║        	                  ^^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.4: 	class MyArray[A]: { size: int; set: (int, A) -> (); get: int -> A }
//│ ║       	                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ╙──      	                  ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `‘a` does not have field 'MyArray#A'
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ║        	                  ^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ╙──      	                  ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `MyArray[?a]` is not an instance of type `'a`
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ║        	                  ^^^^^^^^^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ╙──      	                  ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `‘a` is not a record (expected a record with fields: size, set, get)
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ║        	                  ^^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.4: 	class MyArray[A]: { size: int; set: (int, A) -> (); get: int -> A }
//│ ║       	                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ╙──      	                  ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `‘a` does not have field 'MyArray#A'
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ║        	                  ^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ╙──      	                  ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `MyArray[?a]` is not an instance of type `'a`
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ║        	                  ^^^^^^^^^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ╙──      	                  ^^
//│ constrain calls  : 46
//│ annoying  calls  : 32
//│ subtyping calls  : 105


