:ShowRelativeLineNums
:NoJS

class MyArray[A]: { size: int; set: (int, A) -> (); get: int -> A }
//│ Defined class MyArray[=A]

dummy = MyArray {
    size = 0;
    set = fun (i, a) -> ();
    get = fun i -> error
  }
//│ dummy: MyArray['A] with {get: anything -> nothing, set: (anything, anything,) -> (), size: 0}

dummy: MyArray[int]
//│ res: MyArray[int]

def ty1A: MyArray[int]
def ty1B: MyArray[0 | 1]
//│ ty1A: MyArray[int]
//│ ty1B: MyArray[0 | 1]


def ty2A: MyArray['a]
//│ ty2A: MyArray['a]

:stats
ty2A = ty2A
//│ MyArray['a]
//│   <:  ty2A:
//│ MyArray['a]
//│ constrain calls  : 34
//│ annoying  calls  : 24
//│ subtyping calls  : 28

def ty2B: MyArray[MyArray['a]]
//│ ty2B: MyArray[MyArray['a]]

:stats
ty2B = ty2A
//│ MyArray['a]
//│   <:  ty2B:
//│ MyArray[MyArray['a]]
//│ constrain calls  : 30
//│ annoying  calls  : 24
//│ subtyping calls  : 27



def ty3A: MyArray['a] as 'a
//│ ty3A: 'a
//│   where
//│     'a := MyArray['a]

:e // FIXME (probably the issue reproduced in `ADRsRepro.mls`)
:stats
ty3A = ty3A
//│ 'a
//│   where
//│     'a := MyArray['a]
//│   <:  ty3A:
//│ 'a
//│   where
//│     'a := MyArray['a]
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a. ?a <: ?a0` exceeded recursion depth limit (100)
//│ ║  l.+1: 	ty3A = ty3A
//│ ║        	^^^^^^^^^^^
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  {size: Int, set: ((Int, 'a110,) -> ()), get: (Int -> 'a110)}
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  'a111
//│ ╟── while constraining:  'a110  <!<  'a111
//│ ╟── while constraining:  (int<TypeName(number)>, 'a110,)  <!<  (int<TypeName(number)>, 'a111,)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a111,) -> ())  <!<  ((int<TypeName(number)>, 'a110,) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a111,) -> ()), get: (Int -> 'a111)}) & {MyArray#A: mut 'a111..'a111})  <!<  {size: Int, set: ((Int, 'a110,) -> ()), get: (Int -> 'a110)}
//│ ╟── while constraining:  MyArray['a111]  <!<  {size: Int, set: ((Int, 'a110,) -> ()), get: (Int -> 'a110)}
//│ ╟── while constraining:  'a111  <!<  {size: Int, set: ((Int, 'a110,) -> ()), get: (Int -> 'a110)}
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  {size: Int, set: ((Int, 'a110,) -> ()), get: (Int -> 'a110)}
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  (myArray<> & {size: Int, set: ((Int, 'a110,) -> ()), get: (Int -> 'a110)})
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  ((myArray<> & {size: Int, set: ((Int, 'a110,) -> ()), get: (Int -> 'a110)}) & {MyArray#A: mut 'a110..'a110})
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  MyArray['a110]
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  'a110
//│ ╟── while constraining:  'a109  <!<  'a110
//│ ╟── while constraining:  (int<TypeName(number)>, 'a109,)  <!<  (int<TypeName(number)>, 'a110,)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a110,) -> ())  <!<  ((int<TypeName(number)>, 'a109,) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a110,) -> ()), get: (Int -> 'a110)}) & {MyArray#A: mut 'a110..'a110})  <!<  {size: Int, set: ((Int, 'a109,) -> ()), get: (Int -> 'a109)}
//│ ╟── while constraining:  MyArray['a110]  <!<  {size: Int, set: ((Int, 'a109,) -> ()), get: (Int -> 'a109)}
//│ ╟── while constraining:  'a110  <!<  {size: Int, set: ((Int, 'a109,) -> ()), get: (Int -> 'a109)}
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  {size: Int, set: ((Int, 'a109,) -> ()), get: (Int -> 'a109)}
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  (myArray<> & {size: Int, set: ((Int, 'a109,) -> ()), get: (Int -> 'a109)})
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  ((myArray<> & {size: Int, set: ((Int, 'a109,) -> ()), get: (Int -> 'a109)}) & {MyArray#A: mut 'a109..'a109})
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  MyArray['a109]
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  'a109
//│ ╟── while constraining:  'a108  <!<  'a109
//│ ╟── while constraining:  (int<TypeName(number)>, 'a108,)  <!<  (int<TypeName(number)>, 'a109,)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a109,) -> ())  <!<  ((int<TypeName(number)>, 'a108,) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a109,) -> ()), get: (Int -> 'a109)}) & {MyArray#A: mut 'a109..'a109})  <!<  {size: Int, set: ((Int, 'a108,) -> ()), get: (Int -> 'a108)}
//│ ╟── while constraining:  MyArray['a109]  <!<  {size: Int, set: ((Int, 'a108,) -> ()), get: (Int -> 'a108)}
//│ ╟── while constraining:  'a109  <!<  {size: Int, set: ((Int, 'a108,) -> ()), get: (Int -> 'a108)}
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  {size: Int, set: ((Int, 'a108,) -> ()), get: (Int -> 'a108)}
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  (myArray<> & {size: Int, set: ((Int, 'a108,) -> ()), get: (Int -> 'a108)})
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  ((myArray<> & {size: Int, set: ((Int, 'a108,) -> ()), get: (Int -> 'a108)}) & {MyArray#A: mut 'a108..'a108})
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  MyArray['a108]
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  'a108
//│ ╟── while constraining:  'a106  <!<  'a108
//│ ╟── while constraining:  (int<TypeName(number)>, 'a106,)  <!<  (int<TypeName(number)>, 'a108,)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a108,) -> ())  <!<  ((int<TypeName(number)>, 'a106,) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a108,) -> ()), get: (Int -> 'a108)}) & {MyArray#A: mut 'a108..'a108})  <!<  {size: Int, set: ((Int, 'a106,) -> ()), get: (Int -> 'a106)}
//│ ╟── while constraining:  MyArray['a108]  <!<  {size: Int, set: ((Int, 'a106,) -> ()), get: (Int -> 'a106)}
//│ ╟── while constraining:  'a108  <!<  {size: Int, set: ((Int, 'a106,) -> ()), get: (Int -> 'a106)}
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  {size: Int, set: ((Int, 'a106,) -> ()), get: (Int -> 'a106)}
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  (myArray<> & {size: Int, set: ((Int, 'a106,) -> ()), get: (Int -> 'a106)})
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  ((myArray<> & {size: Int, set: ((Int, 'a106,) -> ()), get: (Int -> 'a106)}) & {MyArray#A: mut 'a106..'a106})
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  MyArray['a106]
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  'a106
//│ ╟── while constraining:  'a105  <!<  'a106
//│ ╟── while constraining:  (int<TypeName(number)>, 'a105,)  <!<  (int<TypeName(number)>, 'a106,)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a106,) -> ())  <!<  ((int<TypeName(number)>, 'a105,) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a106,) -> ()), get: (Int -> 'a106)}) & {MyArray#A: mut 'a106..'a106})  <!<  ('a | MyArray['a105])
//│ ╟── while constraining:  MyArray['a106]  <!<  ('a | MyArray['a105])
//│ ╟── while constraining:  'a106  <!<  ('a | MyArray['a105])
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  ('a | MyArray['a105])
//│ ╙── while constraining:  ∀ 0. 'a95'  <!<  'a105
//│ constrain calls  : 162
//│ annoying  calls  : 74
//│ subtyping calls  : 83

def ty3B: MyArray[MyArray['a]] as 'a
//│ ty3B: 'a
//│   where
//│     'a := MyArray[MyArray['a]]

:e // FIXME (probably the issue reproduced in `ADRsRepro.mls`)
:stats
ty3B = ty3A
//│ 'a
//│   where
//│     'a := MyArray['a]
//│   <:  ty3B:
//│ 'a
//│   where
//│     'a := MyArray[MyArray['a]]
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a. ?a <: ?a0` exceeded recursion depth limit (100)
//│ ║  l.+1: 	ty3B = ty3A
//│ ║        	^^^^^^^^^^^
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  {size: Int, set: ((Int, 'a135,) -> ()), get: (Int -> 'a135)}
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  'a136
//│ ╟── while constraining:  'a135  <!<  'a136
//│ ╟── while constraining:  (int<TypeName(number)>, 'a135,)  <!<  (int<TypeName(number)>, 'a136,)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a136,) -> ())  <!<  ((int<TypeName(number)>, 'a135,) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a136,) -> ()), get: (Int -> 'a136)}) & {MyArray#A: mut 'a136..'a136})  <!<  {size: Int, set: ((Int, 'a135,) -> ()), get: (Int -> 'a135)}
//│ ╟── while constraining:  MyArray['a136]  <!<  {size: Int, set: ((Int, 'a135,) -> ()), get: (Int -> 'a135)}
//│ ╟── while constraining:  'a136  <!<  {size: Int, set: ((Int, 'a135,) -> ()), get: (Int -> 'a135)}
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  {size: Int, set: ((Int, 'a135,) -> ()), get: (Int -> 'a135)}
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  (myArray<> & {size: Int, set: ((Int, 'a135,) -> ()), get: (Int -> 'a135)})
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  ((myArray<> & {size: Int, set: ((Int, 'a135,) -> ()), get: (Int -> 'a135)}) & {MyArray#A: mut 'a135..'a135})
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  MyArray['a135]
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  'a135
//│ ╟── while constraining:  'a134  <!<  'a135
//│ ╟── while constraining:  (int<TypeName(number)>, 'a134,)  <!<  (int<TypeName(number)>, 'a135,)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a135,) -> ())  <!<  ((int<TypeName(number)>, 'a134,) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a135,) -> ()), get: (Int -> 'a135)}) & {MyArray#A: mut 'a135..'a135})  <!<  {size: Int, set: ((Int, 'a134,) -> ()), get: (Int -> 'a134)}
//│ ╟── while constraining:  MyArray['a135]  <!<  {size: Int, set: ((Int, 'a134,) -> ()), get: (Int -> 'a134)}
//│ ╟── while constraining:  'a135  <!<  {size: Int, set: ((Int, 'a134,) -> ()), get: (Int -> 'a134)}
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  {size: Int, set: ((Int, 'a134,) -> ()), get: (Int -> 'a134)}
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  (myArray<> & {size: Int, set: ((Int, 'a134,) -> ()), get: (Int -> 'a134)})
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  ((myArray<> & {size: Int, set: ((Int, 'a134,) -> ()), get: (Int -> 'a134)}) & {MyArray#A: mut 'a134..'a134})
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  MyArray['a134]
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  'a134
//│ ╟── while constraining:  'a133  <!<  'a134
//│ ╟── while constraining:  (int<TypeName(number)>, 'a133,)  <!<  (int<TypeName(number)>, 'a134,)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a134,) -> ())  <!<  ((int<TypeName(number)>, 'a133,) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a134,) -> ()), get: (Int -> 'a134)}) & {MyArray#A: mut 'a134..'a134})  <!<  {size: Int, set: ((Int, 'a133,) -> ()), get: (Int -> 'a133)}
//│ ╟── while constraining:  MyArray['a134]  <!<  {size: Int, set: ((Int, 'a133,) -> ()), get: (Int -> 'a133)}
//│ ╟── while constraining:  'a134  <!<  {size: Int, set: ((Int, 'a133,) -> ()), get: (Int -> 'a133)}
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  {size: Int, set: ((Int, 'a133,) -> ()), get: (Int -> 'a133)}
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  (myArray<> & {size: Int, set: ((Int, 'a133,) -> ()), get: (Int -> 'a133)})
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  ((myArray<> & {size: Int, set: ((Int, 'a133,) -> ()), get: (Int -> 'a133)}) & {MyArray#A: mut 'a133..'a133})
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  MyArray['a133]
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  'a133
//│ ╟── while constraining:  'a130  <!<  'a133
//│ ╟── while constraining:  (int<TypeName(number)>, 'a130,)  <!<  (int<TypeName(number)>, 'a133,)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a133,) -> ())  <!<  ((int<TypeName(number)>, 'a130,) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a133,) -> ()), get: (Int -> 'a133)}) & {MyArray#A: mut 'a133..'a133})  <!<  {size: Int, set: ((Int, 'a130,) -> ()), get: (Int -> 'a130)}
//│ ╟── while constraining:  MyArray['a133]  <!<  {size: Int, set: ((Int, 'a130,) -> ()), get: (Int -> 'a130)}
//│ ╟── while constraining:  'a133  <!<  {size: Int, set: ((Int, 'a130,) -> ()), get: (Int -> 'a130)}
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  {size: Int, set: ((Int, 'a130,) -> ()), get: (Int -> 'a130)}
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  (myArray<> & {size: Int, set: ((Int, 'a130,) -> ()), get: (Int -> 'a130)})
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  ((myArray<> & {size: Int, set: ((Int, 'a130,) -> ()), get: (Int -> 'a130)}) & {MyArray#A: mut 'a130..'a130})
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  MyArray['a130]
//│ ╟── while constraining:  'a130  <!<  MyArray['a130]
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a130,) -> ()), get: (Int -> 'a130)}) & {MyArray#A: mut 'a130..'a130})  <!<  ('a | MyArray[MyArray['a130]])
//│ ╟── while constraining:  MyArray['a130]  <!<  ('a | MyArray[MyArray['a130]])
//│ ╟── while constraining:  MyArray['a130]  <!<  'a131
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray['a130],)  <!<  (int<TypeName(number)>, 'a131,)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a131,) -> ())  <!<  ((int<TypeName(number)>, MyArray['a130],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a131,) -> ()), get: (Int -> 'a131)}) & {MyArray#A: mut 'a131..'a131})  <!<  ('a | MyArray[MyArray['a130]])
//│ ╟── while constraining:  MyArray['a131]  <!<  ('a | MyArray[MyArray['a130]])
//│ ╟── while constraining:  'a131  <!<  ('a | MyArray[MyArray['a130]])
//│ ╟── while constraining:  ∀ 0. 'a95'  <!<  ('a | MyArray[MyArray['a130]])
//│ ╙── while constraining:  ∀ 0. 'a95'  <!<  'a130
//│ constrain calls  : 231
//│ annoying  calls  : 118
//│ subtyping calls  : 129

:e // FIXME (probably the issue reproduced in `ADRsRepro.mls`)
:stats
ty3A = ty3B
//│ 'a
//│   where
//│     'a := MyArray[MyArray['a]]
//│   <:  ty3A:
//│ 'a
//│   where
//│     'a := MyArray['a]
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a. ?a <: ?a0` exceeded recursion depth limit (100)
//│ ║  l.+1: 	ty3A = ty3B
//│ ║        	^^^^^^^^^^^
//│ ╟── while constraining:  ∀ 0. 'a120'  <!<  'a156
//│ ╟── while constraining:  'a155  <!<  'a156
//│ ╟── while constraining:  MyArray['a155]  <!<  MyArray['a156]
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray['a155],)  <!<  (int<TypeName(number)>, MyArray['a156],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray['a156],) -> ())  <!<  ((int<TypeName(number)>, MyArray['a155],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray['a156],) -> ()), get: (Int -> MyArray['a156])}) & {MyArray#A: mut MyArray['a156]..MyArray['a156]})  <!<  {size: Int, set: ((Int, MyArray['a155],) -> ()), get: (Int -> MyArray['a155])}
//│ ╟── while constraining:  MyArray[MyArray['a156]]  <!<  {size: Int, set: ((Int, MyArray['a155],) -> ()), get: (Int -> MyArray['a155])}
//│ ╟── while constraining:  'a156  <!<  {size: Int, set: ((Int, MyArray['a155],) -> ()), get: (Int -> MyArray['a155])}
//│ ╟── while constraining:  ∀ 0. 'a120'  <!<  {size: Int, set: ((Int, MyArray['a155],) -> ()), get: (Int -> MyArray['a155])}
//│ ╟── while constraining:  ∀ 0. 'a120'  <!<  (myArray<> & {size: Int, set: ((Int, MyArray['a155],) -> ()), get: (Int -> MyArray['a155])})
//│ ╟── while constraining:  ∀ 0. 'a120'  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray['a155],) -> ()), get: (Int -> MyArray['a155])}) & {MyArray#A: mut MyArray['a155]..MyArray['a155]})
//│ ╟── while constraining:  ∀ 0. 'a120'  <!<  MyArray[MyArray['a155]]
//│ ╟── while constraining:  ∀ 0. 'a120'  <!<  'a155
//│ ╟── while constraining:  'a154  <!<  'a155
//│ ╟── while constraining:  MyArray['a154]  <!<  MyArray['a155]
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray['a154],)  <!<  (int<TypeName(number)>, MyArray['a155],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray['a155],) -> ())  <!<  ((int<TypeName(number)>, MyArray['a154],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray['a155],) -> ()), get: (Int -> MyArray['a155])}) & {MyArray#A: mut MyArray['a155]..MyArray['a155]})  <!<  {size: Int, set: ((Int, MyArray['a154],) -> ()), get: (Int -> MyArray['a154])}
//│ ╟── while constraining:  MyArray[MyArray['a155]]  <!<  {size: Int, set: ((Int, MyArray['a154],) -> ()), get: (Int -> MyArray['a154])}
//│ ╟── while constraining:  'a155  <!<  {size: Int, set: ((Int, MyArray['a154],) -> ()), get: (Int -> MyArray['a154])}
//│ ╟── while constraining:  ∀ 0. 'a120'  <!<  {size: Int, set: ((Int, MyArray['a154],) -> ()), get: (Int -> MyArray['a154])}
//│ ╟── while constraining:  ∀ 0. 'a120'  <!<  (myArray<> & {size: Int, set: ((Int, MyArray['a154],) -> ()), get: (Int -> MyArray['a154])})
//│ ╟── while constraining:  ∀ 0. 'a120'  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray['a154],) -> ()), get: (Int -> MyArray['a154])}) & {MyArray#A: mut MyArray['a154]..MyArray['a154]})
//│ ╟── while constraining:  ∀ 0. 'a120'  <!<  MyArray[MyArray['a154]]
//│ ╟── while constraining:  ∀ 0. 'a120'  <!<  'a154
//│ ╟── while constraining:  'a153  <!<  'a154
//│ ╟── while constraining:  MyArray['a153]  <!<  MyArray['a154]
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray['a153],)  <!<  (int<TypeName(number)>, MyArray['a154],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray['a154],) -> ())  <!<  ((int<TypeName(number)>, MyArray['a153],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray['a154],) -> ()), get: (Int -> MyArray['a154])}) & {MyArray#A: mut MyArray['a154]..MyArray['a154]})  <!<  {size: Int, set: ((Int, MyArray['a153],) -> ()), get: (Int -> MyArray['a153])}
//│ ╟── while constraining:  MyArray[MyArray['a154]]  <!<  {size: Int, set: ((Int, MyArray['a153],) -> ()), get: (Int -> MyArray['a153])}
//│ ╟── while constraining:  'a154  <!<  {size: Int, set: ((Int, MyArray['a153],) -> ()), get: (Int -> MyArray['a153])}
//│ ╟── while constraining:  ∀ 0. 'a120'  <!<  {size: Int, set: ((Int, MyArray['a153],) -> ()), get: (Int -> MyArray['a153])}
//│ ╟── while constraining:  ∀ 0. 'a120'  <!<  (myArray<> & {size: Int, set: ((Int, MyArray['a153],) -> ()), get: (Int -> MyArray['a153])})
//│ ╟── while constraining:  ∀ 0. 'a120'  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray['a153],) -> ()), get: (Int -> MyArray['a153])}) & {MyArray#A: mut MyArray['a153]..MyArray['a153]})
//│ ╟── while constraining:  ∀ 0. 'a120'  <!<  MyArray[MyArray['a153]]
//│ ╟── while constraining:  ∀ 0. 'a120'  <!<  'a153
//│ ╟── while constraining:  'a150  <!<  'a153
//│ ╟── while constraining:  (int<TypeName(number)>, 'a150,)  <!<  (int<TypeName(number)>, 'a153,)
//│ ╟── while constraining:  ((int<TypeName(number)>, 'a153,) -> ())  <!<  ((int<TypeName(number)>, 'a150,) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, 'a153,) -> ()), get: (Int -> 'a153)}) & {MyArray#A: mut 'a153..'a153})  <!<  ('a | MyArray['a150])
//│ ╟── while constraining:  MyArray['a153]  <!<  ('a | MyArray['a150])
//│ ╟── while constraining:  MyArray['a153]  <!<  'a151
//│ ╟── while constraining:  MyArray['a151]  <!<  MyArray[MyArray['a153]]
//│ ╟── while constraining:  MyArray['a151]  <!<  'a153
//│ ╟── while constraining:  MyArray[MyArray['a151]]  <!<  MyArray['a153]
//│ ╟── while constraining:  'a151  <!<  MyArray['a153]
//│ ╟── while constraining:  (int<TypeName(number)>, 'a151,)  <!<  (int<TypeName(number)>, MyArray['a153],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray['a153],) -> ())  <!<  ((int<TypeName(number)>, 'a151,) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray['a153],) -> ()), get: (Int -> MyArray['a153])}) & {MyArray#A: mut MyArray['a153]..MyArray['a153]})  <!<  {size: Int, set: ((Int, 'a151,) -> ()), get: (Int -> 'a151)}
//│ ╟── while constraining:  MyArray[MyArray['a153]]  <!<  {size: Int, set: ((Int, 'a151,) -> ()), get: (Int -> 'a151)}
//│ ╟── while constraining:  'a153  <!<  {size: Int, set: ((Int, 'a151,) -> ()), get: (Int -> 'a151)}
//│ ╟── while constraining:  ∀ 0. 'a120'  <!<  {size: Int, set: ((Int, 'a151,) -> ()), get: (Int -> 'a151)}
//│ ╟── while constraining:  ∀ 0. 'a120'  <!<  (myArray<> & {size: Int, set: ((Int, 'a151,) -> ()), get: (Int -> 'a151)})
//│ ╟── while constraining:  ∀ 0. 'a120'  <!<  ((myArray<> & {size: Int, set: ((Int, 'a151,) -> ()), get: (Int -> 'a151)}) & {MyArray#A: mut 'a151..'a151})
//│ ╟── while constraining:  ∀ 0. 'a120'  <!<  MyArray['a151]
//│ ╟── while constraining:  'a150  <!<  MyArray['a151]
//│ ╟── while constraining:  (int<TypeName(number)>, 'a150,)  <!<  (int<TypeName(number)>, MyArray['a151],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray['a151],) -> ())  <!<  ((int<TypeName(number)>, 'a150,) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray['a151],) -> ()), get: (Int -> MyArray['a151])}) & {MyArray#A: mut MyArray['a151]..MyArray['a151]})  <!<  ('a | MyArray['a150])
//│ ╟── while constraining:  MyArray[MyArray['a151]]  <!<  ('a | MyArray['a150])
//│ ╟── while constraining:  'a151  <!<  ('a | MyArray['a150])
//│ ╟── while constraining:  ∀ 0. 'a120'  <!<  ('a | MyArray['a150])
//│ ╙── while constraining:  ∀ 0. 'a120'  <!<  'a150
//│ constrain calls  : 164
//│ annoying  calls  : 92
//│ subtyping calls  : 113

def ty4B: MyArray[MyArray[MyArray['a]]] as 'a
//│ ty4B: 'a
//│   where
//│     'a := MyArray[MyArray[MyArray['a]]]

:e // FIXME (probably the issue reproduced in `ADRsRepro.mls`)
:stats
ty4B = ty4B
//│ 'a
//│   where
//│     'a := MyArray[MyArray[MyArray['a]]]
//│   <:  ty4B:
//│ 'a
//│   where
//│     'a := MyArray[MyArray[MyArray['a]]]
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a. ?a <: ?a0` exceeded recursion depth limit (100)
//│ ║  l.+1: 	ty4B = ty4B
//│ ║        	^^^^^^^^^^^
//│ ╟── while constraining:  ∀ 0. 'a165'  <!<  'a181
//│ ╟── while constraining:  'a180  <!<  'a181
//│ ╟── while constraining:  MyArray['a180]  <!<  MyArray['a181]
//│ ╟── while constraining:  MyArray[MyArray['a180]]  <!<  MyArray[MyArray['a181]]
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray[MyArray['a180]],)  <!<  (int<TypeName(number)>, MyArray[MyArray['a181]],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray[MyArray['a181]],) -> ())  <!<  ((int<TypeName(number)>, MyArray[MyArray['a180]],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a181]],) -> ()), get: (Int -> MyArray[MyArray['a181]])}) & {MyArray#A: mut MyArray[MyArray['a181]]..MyArray[MyArray['a181]]})  <!<  {size: Int, set: ((Int, MyArray[MyArray['a180]],) -> ()), get: (Int -> MyArray[MyArray['a180]])}
//│ ╟── while constraining:  MyArray[MyArray[MyArray['a181]]]  <!<  {size: Int, set: ((Int, MyArray[MyArray['a180]],) -> ()), get: (Int -> MyArray[MyArray['a180]])}
//│ ╟── while constraining:  'a181  <!<  {size: Int, set: ((Int, MyArray[MyArray['a180]],) -> ()), get: (Int -> MyArray[MyArray['a180]])}
//│ ╟── while constraining:  ∀ 0. 'a165'  <!<  {size: Int, set: ((Int, MyArray[MyArray['a180]],) -> ()), get: (Int -> MyArray[MyArray['a180]])}
//│ ╟── while constraining:  ∀ 0. 'a165'  <!<  (myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a180]],) -> ()), get: (Int -> MyArray[MyArray['a180]])})
//│ ╟── while constraining:  ∀ 0. 'a165'  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a180]],) -> ()), get: (Int -> MyArray[MyArray['a180]])}) & {MyArray#A: mut MyArray[MyArray['a180]]..MyArray[MyArray['a180]]})
//│ ╟── while constraining:  ∀ 0. 'a165'  <!<  MyArray[MyArray[MyArray['a180]]]
//│ ╟── while constraining:  ∀ 0. 'a165'  <!<  'a180
//│ ╟── while constraining:  'a179  <!<  'a180
//│ ╟── while constraining:  MyArray['a179]  <!<  MyArray['a180]
//│ ╟── while constraining:  MyArray[MyArray['a179]]  <!<  MyArray[MyArray['a180]]
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray[MyArray['a179]],)  <!<  (int<TypeName(number)>, MyArray[MyArray['a180]],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray[MyArray['a180]],) -> ())  <!<  ((int<TypeName(number)>, MyArray[MyArray['a179]],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a180]],) -> ()), get: (Int -> MyArray[MyArray['a180]])}) & {MyArray#A: mut MyArray[MyArray['a180]]..MyArray[MyArray['a180]]})  <!<  {size: Int, set: ((Int, MyArray[MyArray['a179]],) -> ()), get: (Int -> MyArray[MyArray['a179]])}
//│ ╟── while constraining:  MyArray[MyArray[MyArray['a180]]]  <!<  {size: Int, set: ((Int, MyArray[MyArray['a179]],) -> ()), get: (Int -> MyArray[MyArray['a179]])}
//│ ╟── while constraining:  'a180  <!<  {size: Int, set: ((Int, MyArray[MyArray['a179]],) -> ()), get: (Int -> MyArray[MyArray['a179]])}
//│ ╟── while constraining:  ∀ 0. 'a165'  <!<  {size: Int, set: ((Int, MyArray[MyArray['a179]],) -> ()), get: (Int -> MyArray[MyArray['a179]])}
//│ ╟── while constraining:  ∀ 0. 'a165'  <!<  (myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a179]],) -> ()), get: (Int -> MyArray[MyArray['a179]])})
//│ ╟── while constraining:  ∀ 0. 'a165'  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a179]],) -> ()), get: (Int -> MyArray[MyArray['a179]])}) & {MyArray#A: mut MyArray[MyArray['a179]]..MyArray[MyArray['a179]]})
//│ ╟── while constraining:  ∀ 0. 'a165'  <!<  MyArray[MyArray[MyArray['a179]]]
//│ ╟── while constraining:  ∀ 0. 'a165'  <!<  'a179
//│ ╟── while constraining:  'a178  <!<  'a179
//│ ╟── while constraining:  MyArray['a178]  <!<  MyArray['a179]
//│ ╟── while constraining:  MyArray[MyArray['a178]]  <!<  MyArray[MyArray['a179]]
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray[MyArray['a178]],)  <!<  (int<TypeName(number)>, MyArray[MyArray['a179]],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray[MyArray['a179]],) -> ())  <!<  ((int<TypeName(number)>, MyArray[MyArray['a178]],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a179]],) -> ()), get: (Int -> MyArray[MyArray['a179]])}) & {MyArray#A: mut MyArray[MyArray['a179]]..MyArray[MyArray['a179]]})  <!<  {size: Int, set: ((Int, MyArray[MyArray['a178]],) -> ()), get: (Int -> MyArray[MyArray['a178]])}
//│ ╟── while constraining:  MyArray[MyArray[MyArray['a179]]]  <!<  {size: Int, set: ((Int, MyArray[MyArray['a178]],) -> ()), get: (Int -> MyArray[MyArray['a178]])}
//│ ╟── while constraining:  'a179  <!<  {size: Int, set: ((Int, MyArray[MyArray['a178]],) -> ()), get: (Int -> MyArray[MyArray['a178]])}
//│ ╟── while constraining:  ∀ 0. 'a165'  <!<  {size: Int, set: ((Int, MyArray[MyArray['a178]],) -> ()), get: (Int -> MyArray[MyArray['a178]])}
//│ ╟── while constraining:  ∀ 0. 'a165'  <!<  (myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a178]],) -> ()), get: (Int -> MyArray[MyArray['a178]])})
//│ ╟── while constraining:  ∀ 0. 'a165'  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a178]],) -> ()), get: (Int -> MyArray[MyArray['a178]])}) & {MyArray#A: mut MyArray[MyArray['a178]]..MyArray[MyArray['a178]]})
//│ ╟── while constraining:  ∀ 0. 'a165'  <!<  MyArray[MyArray[MyArray['a178]]]
//│ ╟── while constraining:  ∀ 0. 'a165'  <!<  'a178
//│ ╟── while constraining:  'a176  <!<  'a178
//│ ╟── while constraining:  MyArray['a176]  <!<  MyArray['a178]
//│ ╟── while constraining:  MyArray[MyArray['a176]]  <!<  MyArray[MyArray['a178]]
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray[MyArray['a176]],)  <!<  (int<TypeName(number)>, MyArray[MyArray['a178]],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray[MyArray['a178]],) -> ())  <!<  ((int<TypeName(number)>, MyArray[MyArray['a176]],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a178]],) -> ()), get: (Int -> MyArray[MyArray['a178]])}) & {MyArray#A: mut MyArray[MyArray['a178]]..MyArray[MyArray['a178]]})  <!<  {size: Int, set: ((Int, MyArray[MyArray['a176]],) -> ()), get: (Int -> MyArray[MyArray['a176]])}
//│ ╟── while constraining:  MyArray[MyArray[MyArray['a178]]]  <!<  {size: Int, set: ((Int, MyArray[MyArray['a176]],) -> ()), get: (Int -> MyArray[MyArray['a176]])}
//│ ╟── while constraining:  'a178  <!<  {size: Int, set: ((Int, MyArray[MyArray['a176]],) -> ()), get: (Int -> MyArray[MyArray['a176]])}
//│ ╟── while constraining:  ∀ 0. 'a165'  <!<  {size: Int, set: ((Int, MyArray[MyArray['a176]],) -> ()), get: (Int -> MyArray[MyArray['a176]])}
//│ ╟── while constraining:  ∀ 0. 'a165'  <!<  (myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a176]],) -> ()), get: (Int -> MyArray[MyArray['a176]])})
//│ ╟── while constraining:  ∀ 0. 'a165'  <!<  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a176]],) -> ()), get: (Int -> MyArray[MyArray['a176]])}) & {MyArray#A: mut MyArray[MyArray['a176]]..MyArray[MyArray['a176]]})
//│ ╟── while constraining:  ∀ 0. 'a165'  <!<  MyArray[MyArray[MyArray['a176]]]
//│ ╟── while constraining:  ∀ 0. 'a165'  <!<  'a176
//│ ╟── while constraining:  'a175  <!<  'a176
//│ ╟── while constraining:  MyArray['a175]  <!<  MyArray['a176]
//│ ╟── while constraining:  MyArray[MyArray['a175]]  <!<  MyArray[MyArray['a176]]
//│ ╟── while constraining:  (int<TypeName(number)>, MyArray[MyArray['a175]],)  <!<  (int<TypeName(number)>, MyArray[MyArray['a176]],)
//│ ╟── while constraining:  ((int<TypeName(number)>, MyArray[MyArray['a176]],) -> ())  <!<  ((int<TypeName(number)>, MyArray[MyArray['a175]],) -> ())
//│ ╟── while constraining:  ((myArray<> & {size: Int, set: ((Int, MyArray[MyArray['a176]],) -> ()), get: (Int -> MyArray[MyArray['a176]])}) & {MyArray#A: mut MyArray[MyArray['a176]]..MyArray[MyArray['a176]]})  <!<  ('a | MyArray[MyArray[MyArray['a175]]])
//│ ╟── while constraining:  MyArray[MyArray[MyArray['a176]]]  <!<  ('a | MyArray[MyArray[MyArray['a175]]])
//│ ╟── while constraining:  'a176  <!<  ('a | MyArray[MyArray[MyArray['a175]]])
//│ ╟── while constraining:  ∀ 0. 'a165'  <!<  ('a | MyArray[MyArray[MyArray['a175]]])
//│ ╙── while constraining:  ∀ 0. 'a165'  <!<  'a175
//│ constrain calls  : 162
//│ annoying  calls  : 74
//│ subtyping calls  : 83



//===//===//===// ERRORS //===//===//===//


:e
:stats
ty1A = ty1B
//│ MyArray[0 | 1]
//│   <:  ty1A:
//│ MyArray[int]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty1A = ty1B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `int` does not match type `0 | 1`
//│ ║  l.17: 	def ty1A: MyArray[int]
//│ ╙──      	                  ^^^
//│ constrain calls  : 26
//│ annoying  calls  : 29
//│ subtyping calls  : 101

:e
:stats
ty1B = ty1A
//│ MyArray[int]
//│   <:  ty1B:
//│ MyArray[0 | 1]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty1B = ty1A
//│ ║        	^^^^^^^^^^^
//│ ╟── type `int` does not match type `0 | 1`
//│ ║  l.17: 	def ty1A: MyArray[int]
//│ ╙──      	                  ^^^
//│ constrain calls  : 26
//│ annoying  calls  : 29
//│ subtyping calls  : 72


:e
:stats
ty2A = ty2B
//│ MyArray[MyArray['a]]
//│   <:  ty2A:
//│ MyArray['a]
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `'a` is not an instance of type `MyArray`
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ║        	                  ^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ╙──      	                  ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `'a` is not a record (expected a record with fields: size, set, get)
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ║        	                  ^^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.4: 	class MyArray[A]: { size: int; set: (int, A) -> (); get: int -> A }
//│ ║       	                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ╙──      	                  ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `'a` does not have field 'MyArray#A'
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ║        	                  ^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ╙──      	                  ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `MyArray[?a]` is not an instance of type `'a`
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ║        	                  ^^^^^^^^^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ╙──      	                  ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `'a` is not a record (expected a record with fields: size, set, get)
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ║        	                  ^^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.4: 	class MyArray[A]: { size: int; set: (int, A) -> (); get: int -> A }
//│ ║       	                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from applied type reference:
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ╙──      	                  ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `'a` does not have field 'MyArray#A'
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ║        	                  ^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ╙──      	                  ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.+1: 	ty2A = ty2B
//│ ║        	^^^^^^^^^^^
//│ ╟── type `MyArray[?a]` is not an instance of type `'a`
//│ ║  l.35: 	def ty2B: MyArray[MyArray['a]]
//│ ║        	                  ^^^^^^^^^^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.23: 	def ty2A: MyArray['a]
//│ ╙──      	                  ^^
//│ constrain calls  : 40
//│ annoying  calls  : 32
//│ subtyping calls  : 105


