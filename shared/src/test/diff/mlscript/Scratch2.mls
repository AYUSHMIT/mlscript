
:GeneralizeCurriedFunctions

test1 f =
  (f 0, f true)
//│ test1: 'a -> ('b, 'c,)
//│   where
//│     'a <: 0 -> 'b & true -> 'c
//│      = [Function: test1]

test1 (fun value -> { value })
//│ res: ({value: 0}, {value: true},)
//│    = [ undefined, undefined ]

// :ns
// :d
test2 f =
  let r x = f x
  in (r 0, r true)
//│ test2: 'a -> ('b, 'c,)
//│   where
//│     'd :> 0
//│     'e <: 'b
//│     'f :> true
//│     'g <: 'c
//│     'a <: 'd -> 'e & 'f -> 'g
//│      = [Function: test2]

test2 (fun value -> { value })
//│ res: ({value: 0}, {value: true},)
//│    = [ undefined, undefined ]


type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ Defined type alias ChurchInt

// :ns
def s n = fun f -> fun x -> f (n f x)
//│ s: 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('d -> 'f
//│   where
//│     'c <: 'd -> 'e
//│     'a <: 'b -> 'c
//│     'b <: 'e -> 'f)))
//│  = [Function: s]

// :ns
def s' (n: ChurchInt) = fun f -> fun x -> f (n f x)
//│ s': ChurchInt -> (forall 'a. 'a -> (forall 'b, 'a, 'c, 'd, 'e, 'f. ('f -> 'e
//│   where
//│     'b <: 'a -> 'c
//│     'a <: 'd -> 'e
//│     'c <: 'f -> 'd)))
//│   where
//│     'b := ChurchInt
//│   = [Function: s]

def succ: ChurchInt -> ChurchInt
//│ succ: ChurchInt -> ChurchInt
//│     = <missing implementation>

// :ns
:e // * Needs distrib (see below) // works with quantif extrus
succ = s
//│ 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('d -> 'f
//│   where
//│     'c <: 'd -> 'e
//│     'a <: 'b -> 'c
//│     'b <: 'e -> 'f)))
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.63: 	succ = s
//│ ║        	^^^^^^^^
//│ ╟── type `‘N186` is not an instance of type `'N`
//│ ║  l.34: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── from reference:
//│ ║  l.38: 	def s n = fun f -> fun x -> f (n f x)
//│ ╙──      	                                   ^
//│     = [Function: s]

def succD: forall 'M. ChurchInt -> ('M -> 'M) -> ('M -> 'M)
//│ succD: ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│      = <missing implementation>

succD = s
//│ 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('d -> 'f
//│   where
//│     'c <: 'd -> 'e
//│     'a <: 'b -> 'c
//│     'b <: 'e -> 'f)))
//│   <:  succD:
//│ ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│      = [Function: s]


def z f x = x
//│ z: anything -> (forall 'a. 'a -> 'a)
//│  = [Function: z]

def zero: ChurchInt
//│ zero: ChurchInt
//│     = <missing implementation>

def zero = z
//│ anything -> (forall 'a. 'a -> 'a)
//│   <:  zero:
//│ ChurchInt
//│     = [Function: z]


wrap x = { x }
//│ wrap: 'a -> {x: 'a}
//│     = [Function: wrap]

n1 = s z
//│ n1: 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('c -> 'f
//│   where
//│     'b <: 'c -> 'd
//│     'e <: 'a -> 'b
//│     'a <: 'd -> 'f))
//│   = [Function (anonymous)]

n1 wrap 0
//│ res: {x: 0}
//│    = { x: 0 }

n2 = s (s z)
//│ n2: 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('c -> 'f
//│   where
//│     'b <: 'c -> 'd
//│     'e <: 'a -> 'b
//│     'a <: 'd -> 'f))
//│   = [Function (anonymous)]

n2 wrap 0
//│ res: {x: {x: 0}}
//│    = { x: { x: 0 } }

n3 = s (s (s z))
//│ n3: 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('c -> 'f
//│   where
//│     'b <: 'c -> 'd
//│     'e <: 'a -> 'b
//│     'a <: 'd -> 'f))
//│   = [Function (anonymous)]




// :ns
// :d
// rec def to_ch_simpl n =
//   if n == 0 then zero
//   else to_ch_simpl n
// rec def to_ch_simpl n =
//   to_ch_simpl n

// :d
// to_ch_simpl

// :ns
rec def to_ch n =
  if n == 0 then zero
  else succ (to_ch (n - 1))
//│ to_ch: int -> ChurchInt
//│      = [Function: to_ch]

def to_ch_s_mix n =
  if n == 0 then z
  else s (to_ch (n - 1))
//│ to_ch_s_mix: 'a -> 'b
//│   where
//│     'c :> forall 'd. 'd -> (forall 'd, 'e, 'f, 'g, 'h, 'i. ('f -> 'i
//│   where
//│     'e <: 'f -> 'g
//│     'h <: 'd -> 'e
//│     'd <: 'g -> 'i))
//│     'a <: int
//│     'j :> int -> bool
//│        <: 0 -> 'k
//│     'k <: bool
//│     'l :> 'm -> 'm -> 'm
//│        <: ('n -> (forall 'o. 'o -> 'o)) -> 'p
//│     'p <: 'c -> 'b
//│     'q :> int -> int
//│        <: 1 -> 'r
//│     'n <: 'h
//│     'to_ch <: 'r -> 'n
//│            = [Function: to_ch_s_mix]

rec def to_ch_s n =
  if n == 0 then z
  else s (to_ch_s (n - 1))
//│ to_ch_s: int -> (forall 'a. ('b -> 'a & 'b -> 'b) -> (forall 'a. ('a & 'b) -> 'a))
//│        = [Function: to_ch_s]

// rec def to_ch n =
//   (if n == 0 then zero
//   else succ (to_ch (n - 1) : ChurchInt)): ChurchInt

def to_church: int -> ChurchInt
//│ to_church: int -> ChurchInt
//│          = <missing implementation>

def to_church n =
  if n == 0 then zero
  else succ (to_church (n - 1))
//│ 'a -> 'b
//│   where
//│     'a <: int
//│     'c :> int -> bool
//│        <: 0 -> 'd
//│     'd <: bool
//│     'e :> 'f -> 'f -> 'f
//│        <: ChurchInt -> 'g
//│     'g <: 'h -> 'b
//│     'i :> int -> int
//│        <: 1 -> 'j
//│     'j <: int
//│     'k := ChurchInt
//│     'h :> ChurchInt
//│   <:  to_church:
//│ int -> ChurchInt
//│          = <no result>
//│            to_church is not implemented

to_church = to_ch
//│ int -> ChurchInt
//│   <:  to_church:
//│ int -> ChurchInt
//│          = [Function: to_ch]

// :s
// :ns
// :e // * Needs distrib (see below)
:e // FIXME? succeeds with genLamBodies
to_church = to_ch_s_mix
//│ 'a -> 'b
//│   where
//│     'c :> forall 'd. 'd -> (forall 'd, 'e, 'f, 'g, 'h, 'i. ('f -> 'i
//│   where
//│     'e <: 'f -> 'g
//│     'h <: 'd -> 'e
//│     'd <: 'g -> 'i))
//│     'a <: int
//│     'j :> int -> bool
//│        <: 0 -> 'k
//│     'k <: bool
//│     'l :> 'm -> 'm -> 'm
//│        <: ('n -> (forall 'o. 'o -> 'o)) -> 'p
//│     'p <: 'c -> 'b
//│     'q :> int -> int
//│        <: 1 -> 'r
//│     'n <: 'h
//│     'to_ch <: 'r -> 'n
//│   <:  to_church:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.241: 	to_church = to_ch_s_mix
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘N729` is not an instance of type `'N`
//│ ║  l.34: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── from reference:
//│ ║  l.38: 	def s n = fun f -> fun x -> f (n f x)
//│ ╙──      	                                   ^
//│          = [Function: to_ch_s_mix]

:e // * Needs distrib (see below)
to_church = to_ch_s
//│ int -> (forall 'a. ('b -> 'a & 'b -> 'b) -> (forall 'a. ('a & 'b) -> 'a))
//│   <:  to_church:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.277: 	to_church = to_ch_s
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘N787` is not an instance of type `'N`
//│ ║  l.34: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── from application:
//│ ║  l.38: 	def s n = fun f -> fun x -> f (n f x)
//│ ╙──      	                            ^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.277: 	to_church = to_ch_s
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘N790` is not an instance of type `'N787`
//│ ║  l.34: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── from reference:
//│ ║  l.38: 	def s n = fun f -> fun x -> f (n f x)
//│ ╙──      	                                   ^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.277: 	to_church = to_ch_s
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘N790` is not an instance of type `'N`
//│ ║  l.34: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── from reference:
//│ ║  l.38: 	def s n = fun f -> fun x -> f (n f x)
//│ ╙──      	                                   ^
//│          = [Function: to_ch_s]

rec def to_ch_mix n =
  if n == 0 then zero
  else s (to_ch (n - 1))
//│ to_ch_mix: int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('c -> 'f
//│   where
//│     'b <: 'c -> 'd
//│     'e <: 'a -> 'b
//│     'a <: 'd -> 'f)) | ChurchInt)
//│          = [Function: to_ch_mix]

:e // * Needs distrib (see below)
to_church = to_ch_mix
//│ int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('c -> 'f
//│   where
//│     'b <: 'c -> 'd
//│     'e <: 'a -> 'b
//│     'a <: 'd -> 'f)) | ChurchInt)
//│   <:  to_church:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.330: 	to_church = to_ch_mix
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘N887` is not an instance of type `'N`
//│ ║  l.34: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── from reference:
//│ ║  l.38: 	def s n = fun f -> fun x -> f (n f x)
//│ ╙──      	                                   ^
//│          = [Function: to_ch_mix]


// rec def to_ch n =
//   if n == 0 then zero
//   else succD (to_ch (n - 1))

// rec def to_ch n =
//   succD (to_ch (n - 1))

:e // * Needs to distribute back (in the other direction) here:
rec def to_ch n =
  succD (to_ch n)
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.361: 	rec def to_ch n =
//│ ║         	              ^^^
//│ ║  l.362: 	  succD (to_ch n)
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── type `‘N894` is not an instance of type `'N`
//│ ║  l.34: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.34: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── from quantified type variable:
//│ ║  l.85: 	def succD: forall 'M. ChurchInt -> ('M -> 'M) -> ('M -> 'M)
//│ ╙──      	                  ^^
//│ to_ch: anything -> (('M | ‘N894) -> 'M) -> 'M -> ('M | ‘N894)
//│      = [Function: to_ch1]


// * With distributivity:
:DistributeForalls

succ = s
//│ 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('d -> 'f
//│   where
//│     'c <: 'd -> 'e
//│     'a <: 'b -> 'c
//│     'b <: 'e -> 'f)))
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│     = [Function: s]

succ = s'
//│ ChurchInt -> (forall 'a. 'a -> (forall 'b, 'a, 'c, 'd, 'e, 'f. ('f -> 'e
//│   where
//│     'b <: 'a -> 'c
//│     'a <: 'd -> 'e
//│     'c <: 'f -> 'd)))
//│   where
//│     'b := ChurchInt
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│     = [Function: s]

to_church = to_ch_s_mix
//│ 'a -> 'b
//│   where
//│     'c :> forall 'd. 'd -> (forall 'd, 'e, 'f, 'g, 'h, 'i. ('f -> 'i
//│   where
//│     'e <: 'f -> 'g
//│     'h <: 'd -> 'e
//│     'd <: 'g -> 'i))
//│     'a <: int
//│     'j :> int -> bool
//│        <: 0 -> 'k
//│     'k <: bool
//│     'l :> 'm -> 'm -> 'm
//│        <: ('n -> (forall 'o. 'o -> 'o)) -> 'p
//│     'p <: 'c -> 'b
//│     'q :> int -> int
//│        <: 1 -> 'r
//│     'n <: 'h
//│     'to_ch <: 'r -> 'n
//│   <:  to_church:
//│ int -> ChurchInt
//│          = [Function: to_ch_s_mix]

to_church = to_ch_s
//│ int -> (forall 'a. ('b -> 'a & 'b -> 'b) -> (forall 'a. ('a & 'b) -> 'a))
//│   <:  to_church:
//│ int -> ChurchInt
//│          = [Function: to_ch_s]

to_church = to_ch_mix
//│ int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('c -> 'f
//│   where
//│     'b <: 'c -> 'd
//│     'e <: 'a -> 'b
//│     'a <: 'd -> 'f)) | ChurchInt)
//│   <:  to_church:
//│ int -> ChurchInt
//│          = [Function: to_ch_mix]

rec def to_ch n =
  succD (to_ch n)
//│ to_ch: anything -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│      = [Function: to_ch2]


