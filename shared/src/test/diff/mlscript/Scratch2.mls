
:GeneralizeCurriedFunctions

test1 f =
  (f 0, f true)
//│ test1: (true -> 'a & 0 -> 'a & 'a) -> (forall 'a, 'b, 'c. (('b, 'c,)
//│   where
//│     'a <: 0 -> 'b & true -> 'c))
//│      = [Function: test1]

test1 (fun value -> { value })
//│ res: ('a, 'b,)
//│   where
//│     'c <: 0 -> 'a & true -> 'b
//│    = [ undefined, undefined ]

// :ns
// :d
test2 f =
  let r x = f x
  in (r 0, r true)
//│ test2: (true -> 'a & 0 -> 'a & 'a) -> (forall 'a. ((forall 'a, 'b. ('b
//│   where
//│     'a <: 0 -> 'b), forall 'a, 'c. ('c
//│   where
//│     'a <: true -> 'c),)
//│   where
//│     'a <: 0 -> 'a & true -> 'a))
//│      = [Function: test2]

test2 (fun value -> { value })
//│ res: (forall 'a. ('a
//│   where
//│     'b <: 0 -> 'a), forall 'c. ('c
//│   where
//│     'b <: true -> 'c),)
//│   where
//│     'b <: 0 -> anything & true -> anything
//│    = [ undefined, undefined ]


type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ Defined type alias ChurchInt

// :ns
def s n = fun f -> fun x -> f (n f x)
//│ s: (nothing -> nothing -> 'a & 'a) -> (forall 'a, 'b, 'c. (('c -> 'a & 'b) -> (forall 'a, 'b, 'd, 'e. ('d -> (forall 'a, 'b, 'd, 'f, 'g. ('g
//│   where
//│     'a <: 'b -> 'd -> 'f
//│     'b <: 'f -> 'g))
//│   where
//│     'a <: 'b -> 'd -> 'e
//│     'b <: 'e -> 'a))
//│   where
//│     'a <: 'b -> nothing -> 'c))
//│  = [Function: s]

// :ns
def s' (n: ChurchInt) = fun f -> fun x -> f (n f x)
//│ s': ChurchInt -> (forall 'a, 'b, 'c. (('c -> anything & 'b) -> (forall 'a, 'b, 'd, 'e. ('d -> (forall 'a, 'b, 'd, 'f, 'g. ('g
//│   where
//│     'a <: 'b -> 'd -> 'f
//│     'b <: 'f -> 'g))
//│   where
//│     'a <: 'b -> 'd -> 'e
//│     'b <: 'e -> anything))
//│   where
//│     'a <: 'b -> nothing -> 'c))
//│   = [Function: s]

def succ: ChurchInt -> ChurchInt
//│ succ: ChurchInt -> ChurchInt
//│     = <missing implementation>

// :ns
// :e // * Needs distrib (see below) // works with quantif extrus
succ = s
//│ (nothing -> nothing -> 'a & 'a) -> (forall 'a, 'b, 'c. (('c -> 'a & 'b) -> (forall 'a, 'b, 'd, 'e. ('d -> (forall 'a, 'b, 'd, 'f, 'g. ('g
//│   where
//│     'a <: 'b -> 'd -> 'f
//│     'b <: 'f -> 'g))
//│   where
//│     'a <: 'b -> 'd -> 'e
//│     'b <: 'e -> 'a))
//│   where
//│     'a <: 'b -> nothing -> 'c))
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.77: 	succ = s
//│ ║        	^^^^^^^^
//│ ╟── type `‘N316` is not an instance of type `'N`
//│ ║  l.42: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.42: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──      	                        ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.77: 	succ = s
//│ ║        	^^^^^^^^
//│ ╟── type `‘N337` is not an instance of type `'N`
//│ ║  l.42: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.42: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── from reference:
//│ ║  l.46: 	def s n = fun f -> fun x -> f (n f x)
//│ ╙──      	                                   ^
//│     = [Function: s]

def succD: forall 'M. ChurchInt -> ('M -> 'M) -> ('M -> 'M)
//│ succD: ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│      = <missing implementation>

succD = s
//│ (nothing -> nothing -> 'a & 'a) -> (forall 'a, 'b, 'c. (('c -> 'a & 'b) -> (forall 'a, 'b, 'd, 'e. ('d -> (forall 'a, 'b, 'd, 'f, 'g. ('g
//│   where
//│     'a <: 'b -> 'd -> 'f
//│     'b <: 'f -> 'g))
//│   where
//│     'a <: 'b -> 'd -> 'e
//│     'b <: 'e -> 'a))
//│   where
//│     'a <: 'b -> nothing -> 'c))
//│   <:  succD:
//│ ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│      = [Function: s]


def z f x = x
//│ z: anything -> (forall 'a. 'a -> 'a)
//│  = [Function: z]

def zero: ChurchInt
//│ zero: ChurchInt
//│     = <missing implementation>

def zero = z
//│ anything -> (forall 'a. 'a -> 'a)
//│   <:  zero:
//│ ChurchInt
//│     = [Function: z]


wrap x = { x }
//│ wrap: 'a -> {x: 'a}
//│     = [Function: wrap]

n1 = s z
//│ n1: ('a -> anything & 'b) -> (forall 'c, 'b, 'd, 'e. ('d -> (forall 'c, 'b, 'd, 'f, 'g. ('g
//│   where
//│     'c <: 'b -> 'd -> 'f
//│     'b <: 'f -> 'g))
//│   where
//│     'c <: 'b -> 'd -> 'e
//│     'b <: 'e -> anything))
//│   where
//│     'c <: 'b -> nothing -> 'a
//│   = [Function (anonymous)]

n1 wrap 0
//│ res: 'a
//│   where
//│     'b <: 'c -> 0 -> 'd
//│     'c <: 'd -> 'a
//│    = { x: 0 }

n2 = s (s z)
//│ n2: ('a -> anything & 'b) -> (forall 'c, 'b, 'd, 'e. ('d -> (forall 'c, 'b, 'd, 'f, 'g. ('g
//│   where
//│     'c <: 'b -> 'd -> 'f
//│     'b <: 'f -> 'g))
//│   where
//│     'c <: 'b -> 'd -> 'e
//│     'b <: 'e -> anything))
//│   where
//│     'c <: 'b -> nothing -> 'a
//│   = [Function (anonymous)]

n2 wrap 0
//│ res: 'a
//│   where
//│     'b <: 'c -> 0 -> 'd
//│     'c <: 'd -> 'a
//│    = { x: { x: 0 } }

n3 = s (s (s z))
//│ n3: ('a -> anything & 'b) -> (forall 'c, 'b, 'd, 'e. ('d -> (forall 'c, 'b, 'd, 'f, 'g. ('g
//│   where
//│     'c <: 'b -> 'd -> 'f
//│     'b <: 'f -> 'g))
//│   where
//│     'c <: 'b -> 'd -> 'e
//│     'b <: 'e -> anything))
//│   where
//│     'c <: 'b -> nothing -> 'a
//│   = [Function (anonymous)]




// :ns
// :d
// rec def to_ch_simpl n =
//   if n == 0 then zero
//   else to_ch_simpl n
// rec def to_ch_simpl n =
//   to_ch_simpl n

// :d
// to_ch_simpl

// :ns
rec def to_ch n =
  if n == 0 then zero
  else succ (to_ch (n - 1))
//│ to_ch: int -> ChurchInt
//│      = [Function: to_ch]

def to_ch_s_mix n =
  if n == 0 then z
  else s (to_ch (n - 1))
//│ to_ch_s_mix: int -> (forall 'a, 'b, 'c. (('c -> anything & 'b) -> (forall 'a, 'b, 'd, 'e, 'f. (('f & 'd) -> (forall 'a, 'b, 'd, 'f, 'g, 'h. ('h | 'f
//│   where
//│     'a <: 'b -> 'd -> 'g
//│     'b <: 'g -> 'h))
//│   where
//│     'a <: 'b -> 'd -> 'e
//│     'b <: 'e -> anything))
//│   where
//│     'a <: 'b -> nothing -> 'c))
//│            = [Function: to_ch_s_mix]

rec def to_ch_s n =
  if n == 0 then z
  else s (to_ch_s (n - 1))
//│ ╔══[ERROR] Subtyping constraint of the form `?a -> ?b <: ?to_ch_s` exceeded recursion depth limit (300)
//│ ║  l.235: 	rec def to_ch_s n =
//│ ║         	                ^^^
//│ ║  l.236: 	  if n == 0 then z
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ║  l.237: 	  else s (to_ch_s (n - 1))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  α130_1075'  <!<  ((α131_1323',) -> α133_1333')
//│ ╟── while constraining:  {(α132_1334' -> ‹∀ 6. {α135_1339^7 where: α130_1075' <: ((α131_1323',) -> α133_1337^7), α131_1323' <: ((α134_1338^7,) -> α135_1339^7)}›) where: α130_1075' <: ((α131_1323',) -> α133_1333'), α131_1323' <: ((α134_1335',) -> α135_1336')}  <!<  ((α132_1317',) -> α134_1318')
//│ ╟── while constraining:  ‹∀ 5. {(α132_1327^6 -> ‹∀ 6. {α135_1332^7 where: α130_1075' <: ((α131_1323',) -> α133_1330^7), α131_1323' <: ((α134_1331^7,) -> α135_1332^7)}›) where: α130_1075' <: ((α131_1323',) -> α133_1326^6), α131_1323' <: ((α134_1328^6,) -> α135_1329^6)}›  <!<  ((α132_1317',) -> α134_1318')
//│ ╟── while constraining:  ‹∀ 5. {(α132_1327^6 -> ‹∀ 6. {α135_1332^7 where: α130_1075' <: ((α131_1323',) -> α133_1330^7), α131_1323' <: ((α134_1331^7,) -> α135_1332^7)}›) where: α130_1075' <: ((α131_1323',) -> α133_1326^6), α131_1323' <: ((α134_1328^6,) -> α135_1329^6)}›  <!<  α133_1316'
//│ ╟── while constraining:  (α131_1323' -> ‹∀ 5. {(α132_1327^6 -> ‹∀ 6. {α135_1332^7 where: α130_1075' <: ((α131_1323',) -> α133_1330^7), α131_1323' <: ((α134_1331^7,) -> α135_1332^7)}›) where: α130_1075' <: ((α131_1323',) -> α133_1326^6), α131_1323' <: ((α134_1328^6,) -> α135_1329^6)}›)  <!<  ((α131_1306',) -> α133_1316')
//│ ╟── while constraining:  ‹∀ 3. (α131_1081'''' -> ‹∀ 5. {(α132_1087^6 -> ‹∀ 6. {α135_1092^7 where: α130_1075' <: ((α131_1081'''',) -> α133_1090^7), α131_1081'''' <: ((α134_1091^7,) -> α135_1092^7)}›) where: α130_1075' <: ((α131_1081'''',) -> α133_1086^6), α131_1081'''' <: ((α134_1088^6,) -> α135_1089^6)}›)›  <!<  ((α131_1306',) -> α133_1316')
//│ ╟── while constraining:  α130_1075'  <!<  ((α131_1306',) -> α133_1316')
//│ ╟── while constraining:  {(α132_1317' -> ‹∀ 6. {α135_1322^7 where: α130_1075' <: ((α131_1306',) -> α133_1320^7), α131_1306' <: ((α134_1321^7,) -> α135_1322^7)}›) where: α130_1075' <: ((α131_1306',) -> α133_1316'), α131_1306' <: ((α134_1318',) -> α135_1319')}  <!<  ((α132_1300',) -> α134_1301')
//│ ╟── while constraining:  ‹∀ 5. {(α132_1310^6 -> ‹∀ 6. {α135_1315^7 where: α130_1075' <: ((α131_1306',) -> α133_1313^7), α131_1306' <: ((α134_1314^7,) -> α135_1315^7)}›) where: α130_1075' <: ((α131_1306',) -> α133_1309^6), α131_1306' <: ((α134_1311^6,) -> α135_1312^6)}›  <!<  ((α132_1300',) -> α134_1301')
//│ ╟── while constraining:  ‹∀ 5. {(α132_1310^6 -> ‹∀ 6. {α135_1315^7 where: α130_1075' <: ((α131_1306',) -> α133_1313^7), α131_1306' <: ((α134_1314^7,) -> α135_1315^7)}›) where: α130_1075' <: ((α131_1306',) -> α133_1309^6), α131_1306' <: ((α134_1311^6,) -> α135_1312^6)}›  <!<  α133_1299'
//│ ╟── while constraining:  (α131_1306' -> ‹∀ 5. {(α132_1310^6 -> ‹∀ 6. {α135_1315^7 where: α130_1075' <: ((α131_1306',) -> α133_1313^7), α131_1306' <: ((α134_1314^7,) -> α135_1315^7)}›) where: α130_1075' <: ((α131_1306',) -> α133_1309^6), α131_1306' <: ((α134_1311^6,) -> α135_1312^6)}›)  <!<  ((α131_1289',) -> α133_1299')
//│ ╟── while constraining:  ‹∀ 3. (α131_1081'''' -> ‹∀ 5. {(α132_1087^6 -> ‹∀ 6. {α135_1092^7 where: α130_1075' <: ((α131_1081'''',) -> α133_1090^7), α131_1081'''' <: ((α134_1091^7,) -> α135_1092^7)}›) where: α130_1075' <: ((α131_1081'''',) -> α133_1086^6), α131_1081'''' <: ((α134_1088^6,) -> α135_1089^6)}›)›  <!<  ((α131_1289',) -> α133_1299')
//│ ╟── while constraining:  α130_1075'  <!<  ((α131_1289',) -> α133_1299')
//│ ╟── while constraining:  {(α132_1300' -> ‹∀ 6. {α135_1305^7 where: α130_1075' <: ((α131_1289',) -> α133_1303^7), α131_1289' <: ((α134_1304^7,) -> α135_1305^7)}›) where: α130_1075' <: ((α131_1289',) -> α133_1299'), α131_1289' <: ((α134_1301',) -> α135_1302')}  <!<  ((α132_1283',) -> α134_1284')
//│ ╟── while constraining:  ‹∀ 5. {(α132_1293^6 -> ‹∀ 6. {α135_1298^7 where: α130_1075' <: ((α131_1289',) -> α133_1296^7), α131_1289' <: ((α134_1297^7,) -> α135_1298^7)}›) where: α130_1075' <: ((α131_1289',) -> α133_1292^6), α131_1289' <: ((α134_1294^6,) -> α135_1295^6)}›  <!<  ((α132_1283',) -> α134_1284')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 5. {(α132_1123^6 -> ‹∀ 6. {α135_1128^7 where: α130_1075' <: ((α131_1119',) -> α133_1126^7), α131_1119' <: ((α134_1127^7,) -> α135_1128^7)}›) where: α130_1075' <: ((α131_1119',) -> α133_1122^6), α131_1119' <: ((α134_1124^6,) -> α135_1125^6)}›  <!<  ((α132_1113',) -> α134_1114')
//│ ╟── while constraining:  ‹∀ 5. {(α132_1123^6 -> ‹∀ 6. {α135_1128^7 where: α130_1075' <: ((α131_1119',) -> α133_1126^7), α131_1119' <: ((α134_1127^7,) -> α135_1128^7)}›) where: α130_1075' <: ((α131_1119',) -> α133_1122^6), α131_1119' <: ((α134_1124^6,) -> α135_1125^6)}›  <!<  α133_1112'
//│ ╟── while constraining:  (α131_1119' -> ‹∀ 5. {(α132_1123^6 -> ‹∀ 6. {α135_1128^7 where: α130_1075' <: ((α131_1119',) -> α133_1126^7), α131_1119' <: ((α134_1127^7,) -> α135_1128^7)}›) where: α130_1075' <: ((α131_1119',) -> α133_1122^6), α131_1119' <: ((α134_1124^6,) -> α135_1125^6)}›)  <!<  ((α131_1102',) -> α133_1112')
//│ ╟── while constraining:  ‹∀ 3. (α131_1081'''' -> ‹∀ 5. {(α132_1087^6 -> ‹∀ 6. {α135_1092^7 where: α130_1075' <: ((α131_1081'''',) -> α133_1090^7), α131_1081'''' <: ((α134_1091^7,) -> α135_1092^7)}›) where: α130_1075' <: ((α131_1081'''',) -> α133_1086^6), α131_1081'''' <: ((α134_1088^6,) -> α135_1089^6)}›)›  <!<  ((α131_1102',) -> α133_1112')
//│ ╟── while constraining:  α130_1075'  <!<  ((α131_1102',) -> α133_1112')
//│ ╟── while constraining:  {(α132_1113' -> ‹∀ 6. {α135_1118^7 where: α130_1075' <: ((α131_1102',) -> α133_1116^7), α131_1102' <: ((α134_1117^7,) -> α135_1118^7)}›) where: α130_1075' <: ((α131_1102',) -> α133_1112'), α131_1102' <: ((α134_1114',) -> α135_1115')}  <!<  ((α1096',) -> α1097')
//│ ╟── while constraining:  ‹∀ 5. {(α132_1106^6 -> ‹∀ 6. {α135_1111^7 where: α130_1075' <: ((α131_1102',) -> α133_1109^7), α131_1102' <: ((α134_1110^7,) -> α135_1111^7)}›) where: α130_1075' <: ((α131_1102',) -> α133_1105^6), α131_1102' <: ((α134_1107^6,) -> α135_1108^6)}›  <!<  ((α1096',) -> α1097')
//│ ╟── while constraining:  ‹∀ 5. {(α132_1106^6 -> ‹∀ 6. {α135_1111^7 where: α130_1075' <: ((α131_1102',) -> α133_1109^7), α131_1102' <: ((α134_1110^7,) -> α135_1111^7)}›) where: α130_1075' <: ((α131_1102',) -> α133_1105^6), α131_1102' <: ((α134_1107^6,) -> α135_1108^6)}›  <!<  α1095'
//│ ╟── while constraining:  (α131_1102' -> ‹∀ 5. {(α132_1106^6 -> ‹∀ 6. {α135_1111^7 where: α130_1075' <: ((α131_1102',) -> α133_1109^7), α131_1102' <: ((α134_1110^7,) -> α135_1111^7)}›) where: α130_1075' <: ((α131_1102',) -> α133_1105^6), α131_1102' <: ((α134_1107^6,) -> α135_1108^6)}›)  <!<  ((α1094',) -> α1095')
//│ ╟── while constraining:  ‹∀ 3. (α131_1081'''' -> ‹∀ 5. {(α132_1087^6 -> ‹∀ 6. {α135_1092^7 where: α130_1075' <: ((α131_1081'''',) -> α133_1090^7), α131_1081'''' <: ((α134_1091^7,) -> α135_1092^7)}›) where: α130_1075' <: ((α131_1081'''',) -> α133_1086^6), α131_1081'''' <: ((α134_1088^6,) -> α135_1089^6)}›)›  <!<  ((α1094',) -> α1095')
//│ ╟── while constraining:  ‹∀ 3. (α131_1081'''' -> ‹∀ 5. {(α132_1087^6 -> ‹∀ 6. {α135_1092^7 where: α130_1075' <: ((α131_1081'''',) -> α133_1090^7), α131_1081'''' <: ((α134_1091^7,) -> α135_1092^7)}›) where: α130_1075' <: ((α131_1081'''',) -> α133_1086^6), α131_1081'''' <: ((α134_1088^6,) -> α135_1089^6)}›)›  <!<  α130_1075'
//│ ╟── while constraining:  ‹∀ 3. (α131_1081'''' -> ‹∀ 5. {(α132_1087^6 -> ‹∀ 6. {α135_1092^7 where: α130_1075' <: ((α131_1081'''',) -> α133_1090^7), α131_1081'''' <: ((α134_1091^7,) -> α135_1092^7)}›) where: α130_1075' <: ((α131_1081'''',) -> α133_1086^6), α131_1081'''' <: ((α134_1088^6,) -> α135_1089^6)}›)›  <!<  α1073'
//│ ╟── while constraining:  α1093'  <!<  α1073'
//│ ╟── while constraining:  (α1065' -> α1093')  <!<  ((α1072',) -> α1073')
//│ ╙── while constraining:  (α1065' -> α1093')  <!<  to_ch_s1064'
//│ to_ch_s: int -> (forall 'a. (nothing -> anything & 'a) -> (forall 'a, 'b, 'c, 'd, 'e. (('e & 'c) -> (forall 'a, 'b, 'c, 'e, 'f, 'g. ('g | 'e
//│   where
//│     'b <: 'a -> 'c -> 'f
//│     'a <: 'f -> 'g))
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> anything)))
//│        = [Function: to_ch_s]

// rec def to_ch n =
//   (if n == 0 then zero
//   else succ (to_ch (n - 1) : ChurchInt)): ChurchInt

def to_church: int -> ChurchInt
//│ to_church: int -> ChurchInt
//│          = <missing implementation>

def to_church n =
  if n == 0 then zero
  else succ (to_church (n - 1))
//│ int -> ChurchInt
//│   <:  to_church:
//│ int -> ChurchInt
//│          = <no result>
//│            to_church is not implemented

to_church = to_ch
//│ int -> ChurchInt
//│   <:  to_church:
//│ int -> ChurchInt
//│          = [Function: to_ch]

// :s
// :ns
// :e // * Needs distrib (see below)
// :e // FIXME? succeeds with genLamBodies
to_church = to_ch_s_mix
//│ int -> (forall 'a, 'b, 'c. (('c -> anything & 'b) -> (forall 'a, 'b, 'd, 'e, 'f. (('f & 'd) -> (forall 'a, 'b, 'd, 'f, 'g, 'h. ('h | 'f
//│   where
//│     'a <: 'b -> 'd -> 'g
//│     'b <: 'g -> 'h))
//│   where
//│     'a <: 'b -> 'd -> 'e
//│     'b <: 'e -> anything))
//│   where
//│     'a <: 'b -> nothing -> 'c))
//│   <:  to_church:
//│ int -> ChurchInt
//│          = [Function: to_ch_s_mix]

:e // * Needs distrib (see below)
to_church = to_ch_s
//│ int -> (forall 'a. (nothing -> anything & 'a) -> (forall 'a, 'b, 'c, 'd, 'e. (('e & 'c) -> (forall 'a, 'b, 'c, 'e, 'f, 'g. ('g | 'e
//│   where
//│     'b <: 'a -> 'c -> 'f
//│     'a <: 'f -> 'g))
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> anything)))
//│   <:  to_church:
//│ int -> ChurchInt
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r, ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1, ?i1, ?j1, ?k1, ?l1, ?m1, ?n1, ?o1, ?p1, ?q1, ?r1, ?s1, ?t1, ?u1, ?v1, ?w1, ?x1, ?y1, ?z1, ?a2, ?b2, ?c2, ?d2, ?e2, ?f2, ?g2, ?h2, ?i2, ?j2, ?k2, ?l2, ?m2, ?n2, ?o2, ?p2, ?q2, ?r2, ?s2, ?t2, ?u2, ?v2, ?w2, ?x2, ?y2, ?z2, ?a3, ?b3, ?c3, ?d3, ?e3, ?f3, ?g3, ?h3, ?i3, ?j3, ?k3, ?l3, ?m3, ?n3, ?o3, ?p3, ?q3, ?to_ch_s, ?r3, ?s3, ?t3, ?u3, ?v3, ?w3, ?x3, ?y3, ?z3, ?a4, ?b4, ?c4, ?d4, ?e4, ?f4, ?g4, ?h4, ?i4, ?j4, ?k4, ?l4, ?m4, ?n4, ?o4, ?p4, ?q4, ?r4, ?s4, ?t4, ?u4, ?v4, ?w4, ?x4, ?y4, ?z4, ?a5, ?b5, ?c5, ?d5, ?e5, ?f5, ?g5, ?h5, ?i5, ?j5, ?k5, ?l5, ?m5, ?n5, ?o5, ?p5, ?q5, ?r5, ?s5. ?to_ch_s <: int -> ChurchInt` exceeded recursion depth limit (300)
//│ ║  l.328: 	to_church = to_ch_s
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  α2065'  <!<  ((α2247',) -> α2248')
//│ ╟── while constraining:  α2088'  <!<  ((α2247',) -> α2248')
//│ ╟── while constraining:  α2111'  <!<  ((α2247',) -> α2248')
//│ ╟── while constraining:  α2134'  <!<  ((α2247',) -> α2248')
//│ ╟── while constraining:  α2157'  <!<  ((α2247',) -> α2248')
//│ ╟── while constraining:  α2180'  <!<  ((α2247',) -> α2248')
//│ ╟── while constraining:  α2203'  <!<  ((α2247',) -> α2248')
//│ ╟── while constraining:  α2226'  <!<  ((α2247',) -> α2248')
//│ ╟── while constraining:  α2226'  <!<  ((α134_2238'',) -> α135_2239'')
//│ ╟── while constraining:  α2226'  <!<  α131_2237''
//│ ╟── while constraining:  (α2226',)  <!<  (α131_2237'',)
//│ ╟── while constraining:  (α131_2237'' -> ‹∀ 5. {(α132_2241^6 -> ‹∀ 6. {α135_2246^7 where: α130_1821' <: ((α131_2237'',) -> α133_2244^7), α131_2237'' <: ((α134_2245^7,) -> α135_2246^7)}›) where: α130_1821' <: ((α131_2237'',) -> α133_2240^6), α131_2237'' <: ((α134_2242^6,) -> α135_2243^6)}›)  <!<  ((α2226',) -> α2234')
//│ ╟── while constraining:  ‹∀ 3. (α131_1773'''' -> ‹∀ 5. {(α132_1823^6 -> ‹∀ 6. {α135_1828^7 where: α130_1821' <: ((α131_1773'''',) -> α133_1826^7), α131_1773'''' <: ((α134_1827^7,) -> α135_1828^7)}›) where: α130_1821' <: ((α131_1773'''',) -> α133_1822^6), α131_1773'''' <: ((α134_1824^6,) -> α135_1825^6)}›)›  <!<  ((α2226',) -> α2234')
//│ ╟── while constraining:  α130_1821'  <!<  ((α2226',) -> α2234')
//│ ╟── while constraining:  α130_1821'  <!<  ((α2226',) -> α2227_2230'')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 3. (α131_1773'''' -> ‹∀ 5. {(α132_1823^6 -> ‹∀ 6. {α135_1828^7 where: α130_1821' <: ((α131_1773'''',) -> α133_1826^7), α131_1773'''' <: ((α134_1827^7,) -> α135_1828^7)}›) where: α130_1821' <: ((α131_1773'''',) -> α133_1822^6), α131_1773'''' <: ((α134_1824^6,) -> α135_1825^6)}›)›  <!<  ((α1999',) -> α2002')
//│ ╟── while constraining:  α130_1821'  <!<  ((α1999',) -> α2002')
//│ ╟── while constraining:  α130_1821'  <!<  ((α131_1980'',) -> α133_1992'')
//│ ╟── while constraining:  {(α132_1993'' -> ‹∀ 6. {α135_1998^7 where: α130_1821' <: ((α131_1980'',) -> α133_1996^7), α131_1980'' <: ((α134_1997^7,) -> α135_1998^7)}›) where: α130_1821' <: ((α131_1980'',) -> α133_1992''), α131_1980'' <: ((α134_1994'',) -> α135_1995'')}  <!<  (‘N'' -> ‘N'')
//│ ╟── while constraining:  ‹∀ 5. {(α132_1984^6 -> ‹∀ 6. {α135_1989^7 where: α130_1821' <: ((α131_1980'',) -> α133_1987^7), α131_1980'' <: ((α134_1988^7,) -> α135_1989^7)}›) where: α130_1821' <: ((α131_1980'',) -> α133_1983^6), α131_1980'' <: ((α134_1985^6,) -> α135_1986^6)}›  <!<  (‘N'' -> ‘N'')
//│ ╟── while constraining:  (α131_1980'' -> ‹∀ 5. {(α132_1984^6 -> ‹∀ 6. {α135_1989^7 where: α130_1821' <: ((α131_1980'',) -> α133_1987^7), α131_1980'' <: ((α134_1988^7,) -> α135_1989^7)}›) where: α130_1821' <: ((α131_1980'',) -> α133_1983^6), α131_1980'' <: ((α134_1985^6,) -> α135_1986^6)}›)  <!<  ((‘N'' -> ‘N'') -> (‘N'' -> ‘N''))
//│ ╟── while constraining:  ‹∀ 3. (α131_1773'''' -> ‹∀ 5. {(α132_1823^6 -> ‹∀ 6. {α135_1828^7 where: α130_1821' <: ((α131_1773'''',) -> α133_1826^7), α131_1773'''' <: ((α134_1827^7,) -> α135_1828^7)}›) where: α130_1821' <: ((α131_1773'''',) -> α133_1822^6), α131_1773'''' <: ((α134_1824^6,) -> α135_1825^6)}›)›  <!<  ((‘N'' -> ‘N'') -> (‘N'' -> ‘N''))
//│ ╟── while constraining:  ‹∀ 3. (α131_1773'''' -> ‹∀ 5. {(α132_1823^6 -> ‹∀ 6. {α135_1828^7 where: α130_1821' <: ((α131_1773'''',) -> α133_1826^7), α131_1773'''' <: ((α134_1827^7,) -> α135_1828^7)}›) where: α130_1821' <: ((α131_1773'''',) -> α133_1822^6), α131_1773'''' <: ((α134_1824^6,) -> α135_1825^6)}›)›  <!<  ‹∀ 0. (('N128' -> 'N128') -> ('N128' -> 'N128'))›
//│ ╟── while constraining:  ‹∀ 3. (α131_1773'''' -> ‹∀ 5. {(α132_1823^6 -> ‹∀ 6. {α135_1828^7 where: α130_1821' <: ((α131_1773'''',) -> α133_1826^7), α131_1773'''' <: ((α134_1827^7,) -> α135_1828^7)}›) where: α130_1821' <: ((α131_1773'''',) -> α133_1822^6), α131_1773'''' <: ((α134_1824^6,) -> α135_1825^6)}›)›  <!<  ChurchInt
//│ ╟── while constraining:  α1093_1772'  <!<  ChurchInt
//│ ╟── while constraining:  (α1065_1771' -> α1093_1772')  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  to_ch_s1064_1770'  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 0. to_ch_s1064'›  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_ch_s1064'››  <!<  (Int -> ChurchInt)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. to_ch_s1064'››  <!<  ‹∀ 0. (Int -> ChurchInt)›
//│          = [Function: to_ch_s]

rec def to_ch_mix n =
  if n == 0 then zero
  else s (to_ch (n - 1))
//│ to_ch_mix: int -> (forall 'a. ('N -> 'N & 'N -> anything & 'a) -> (forall 'a, 'b, 'c, 'd. ('c -> (forall 'a, 'b, 'c, 'e, 'f. ('f
//│   where
//│     'b <: 'a -> 'c -> 'e
//│     'a <: 'e -> 'f))
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> anything)) | ChurchInt)
//│          = [Function: to_ch_mix]

:e // * Needs distrib (see below)
to_church = to_ch_mix
//│ int -> (forall 'a. ('N -> 'N & 'N -> anything & 'a) -> (forall 'a, 'b, 'c, 'd. ('c -> (forall 'a, 'b, 'c, 'e, 'f. ('f
//│   where
//│     'b <: 'a -> 'c -> 'e
//│     'a <: 'e -> 'f))
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> anything)) | ChurchInt)
//│   <:  to_church:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.388: 	to_church = to_ch_mix
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘N2477` is not an instance of type `'N`
//│ ║  l.42: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.42: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──      	                        ^^
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.388: 	to_church = to_ch_mix
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘N2498` is not an instance of type `'N`
//│ ║  l.42: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.42: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── from reference:
//│ ║  l.46: 	def s n = fun f -> fun x -> f (n f x)
//│ ╙──      	                                   ^
//│          = [Function: to_ch_mix]


// rec def to_ch n =
//   if n == 0 then zero
//   else succD (to_ch (n - 1))

// rec def to_ch n =
//   succD (to_ch (n - 1))

:e // * Needs to distribute back (in the other direction) here:
rec def to_ch n =
  succD (to_ch n)
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.430: 	rec def to_ch n =
//│ ║         	              ^^^
//│ ║  l.431: 	  succD (to_ch n)
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── type `‘N2521` is not an instance of type `'N`
//│ ║  l.42: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.42: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── from quantified type variable:
//│ ║  l.112: 	def succD: forall 'M. ChurchInt -> ('M -> 'M) -> ('M -> 'M)
//│ ╙──       	                  ^^
//│ to_ch: anything -> (('M | ‘N2521) -> 'M) -> 'M -> ('M | ‘N2521)
//│      = [Function: to_ch1]


// * With distributivity:
:DistributeForalls

succ = s
//│ (nothing -> nothing -> 'a & 'a) -> (forall 'a, 'b, 'c. (('c -> 'a & 'b) -> (forall 'a, 'b, 'd, 'e. ('d -> (forall 'a, 'b, 'd, 'f, 'g. ('g
//│   where
//│     'a <: 'b -> 'd -> 'f
//│     'b <: 'f -> 'g))
//│   where
//│     'a <: 'b -> 'd -> 'e
//│     'b <: 'e -> 'a))
//│   where
//│     'a <: 'b -> nothing -> 'c))
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│     = [Function: s]

succ = s'
//│ ChurchInt -> (forall 'a, 'b, 'c. (('c -> anything & 'b) -> (forall 'a, 'b, 'd, 'e. ('d -> (forall 'a, 'b, 'd, 'f, 'g. ('g
//│   where
//│     'a <: 'b -> 'd -> 'f
//│     'b <: 'f -> 'g))
//│   where
//│     'a <: 'b -> 'd -> 'e
//│     'b <: 'e -> anything))
//│   where
//│     'a <: 'b -> nothing -> 'c))
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│     = [Function: s]

to_church = to_ch_s_mix
//│ int -> (forall 'a, 'b, 'c. (('c -> anything & 'b) -> (forall 'a, 'b, 'd, 'e, 'f. (('f & 'd) -> (forall 'a, 'b, 'd, 'f, 'g, 'h. ('h | 'f
//│   where
//│     'a <: 'b -> 'd -> 'g
//│     'b <: 'g -> 'h))
//│   where
//│     'a <: 'b -> 'd -> 'e
//│     'b <: 'e -> anything))
//│   where
//│     'a <: 'b -> nothing -> 'c))
//│   <:  to_church:
//│ int -> ChurchInt
//│          = [Function: to_ch_s_mix]

to_church = to_ch_s
//│ int -> (forall 'a. (nothing -> anything & 'a) -> (forall 'a, 'b, 'c, 'd, 'e. (('e & 'c) -> (forall 'a, 'b, 'c, 'e, 'f, 'g. ('g | 'e
//│   where
//│     'b <: 'a -> 'c -> 'f
//│     'a <: 'f -> 'g))
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> anything)))
//│   <:  to_church:
//│ int -> ChurchInt
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q, ?r, ?s, ?t, ?u, ?v, ?w, ?x, ?y, ?z, ?a1, ?b1, ?c1, ?d1, ?e1, ?f1, ?g1, ?h1, ?i1, ?j1, ?k1, ?l1, ?m1, ?n1, ?o1, ?p1, ?q1, ?r1, ?s1, ?t1, ?u1, ?v1, ?w1, ?x1, ?y1, ?z1, ?a2, ?b2, ?c2, ?d2, ?e2, ?f2, ?g2, ?h2, ?i2, ?j2, ?k2, ?l2, ?m2, ?n2, ?o2, ?p2, ?q2, ?r2, ?s2, ?t2, ?u2, ?v2, ?w2, ?x2, ?y2, ?z2, ?a3, ?b3, ?c3, ?d3, ?e3, ?f3, ?g3, ?h3, ?i3, ?j3, ?k3, ?l3, ?m3, ?n3, ?o3, ?p3, ?q3, ?to_ch_s, ?r3, ?s3, ?t3, ?u3, ?v3, ?w3, ?x3, ?y3, ?z3, ?a4, ?b4, ?c4, ?d4, ?e4, ?f4, ?g4, ?h4, ?i4, ?j4, ?k4, ?l4, ?m4, ?n4, ?o4, ?p4, ?q4, ?r4, ?s4, ?t4, ?u4, ?v4, ?w4, ?x4, ?y4, ?z4, ?a5, ?b5, ?c5, ?d5, ?e5, ?f5, ?g5, ?h5, ?i5, ?j5, ?k5, ?l5, ?m5, ?n5, ?o5, ?p5, ?q5, ?r5, ?s5. ?to_ch_s <: int -> ChurchInt` exceeded recursion depth limit (300)
//│ ║  l.495: 	to_church = to_ch_s
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  (‘N'' -> ‘N'')  <!<  α131_3246''
//│ ╟── while constraining:  α131_3229''  <!<  α131_3246''
//│ ╟── while constraining:  (α131_3229'',)  <!<  (α131_3246'',)
//│ ╟── while constraining:  (α131_3246'' -> ‹∀ 5. {(α132_3250^6 -> ‹∀ 6. {α135_3255^7 where: α130_2883'' <: ((α131_3246'',) -> α133_3253^7), α131_3246'' <: ((α134_3254^7,) -> α135_3255^7)}›) where: α130_2883'' <: ((α131_3246'',) -> α133_3249^6), α131_3246'' <: ((α134_3251^6,) -> α135_3252^6)}›)  <!<  ((α131_3229'',) -> α133_3239'')
//│ ╟── while constraining:  ‹∀ 3. (α131_2835'''' -> ‹∀ 5. {(α132_2885^6 -> ‹∀ 6. {α135_2890^7 where: α130_2883'' <: ((α131_2835'''',) -> α133_2888^7), α131_2835'''' <: ((α134_2889^7,) -> α135_2890^7)}›) where: α130_2883'' <: ((α131_2835'''',) -> α133_2884^6), α131_2835'''' <: ((α134_2886^6,) -> α135_2887^6)}›)›  <!<  ((α131_3229'',) -> α133_3239'')
//│ ╟── while constraining:  α130_2883''  <!<  ((α131_3229'',) -> α133_3239'')
//│ ╟── while constraining:  {(α132_3240'' -> ‹∀ 6. {α135_3245^7 where: α130_2883'' <: ((α131_3229'',) -> α133_3243^7), α131_3229'' <: ((α134_3244^7,) -> α135_3245^7)}›) where: α130_2883'' <: ((α131_3229'',) -> α133_3239''), α131_3229'' <: ((α134_3241'',) -> α135_3242'')}  <!<  ((α132_3223'',) -> α134_3224'')
//│ ╟── while constraining:  ‹∀ 5. {(α132_3233^6 -> ‹∀ 6. {α135_3238^7 where: α130_2883'' <: ((α131_3229'',) -> α133_3236^7), α131_3229'' <: ((α134_3237^7,) -> α135_3238^7)}›) where: α130_2883'' <: ((α131_3229'',) -> α133_3232^6), α131_3229'' <: ((α134_3234^6,) -> α135_3235^6)}›  <!<  ((α132_3223'',) -> α134_3224'')
//│ ╟── while constraining:  ‹∀ 5. {(α132_3233^6 -> ‹∀ 6. {α135_3238^7 where: α130_2883'' <: ((α131_3229'',) -> α133_3236^7), α131_3229'' <: ((α134_3237^7,) -> α135_3238^7)}›) where: α130_2883'' <: ((α131_3229'',) -> α133_3232^6), α131_3229'' <: ((α134_3234^6,) -> α135_3235^6)}›  <!<  α133_3222''
//│ ╟── while constraining:  (α131_3229'' -> ‹∀ 5. {(α132_3233^6 -> ‹∀ 6. {α135_3238^7 where: α130_2883'' <: ((α131_3229'',) -> α133_3236^7), α131_3229'' <: ((α134_3237^7,) -> α135_3238^7)}›) where: α130_2883'' <: ((α131_3229'',) -> α133_3232^6), α131_3229'' <: ((α134_3234^6,) -> α135_3235^6)}›)  <!<  ((α131_3212'',) -> α133_3222'')
//│ ╟── while constraining:  ‹∀ 3. (α131_2835'''' -> ‹∀ 5. {(α132_2885^6 -> ‹∀ 6. {α135_2890^7 where: α130_2883'' <: ((α131_2835'''',) -> α133_2888^7), α131_2835'''' <: ((α134_2889^7,) -> α135_2890^7)}›) where: α130_2883'' <: ((α131_2835'''',) -> α133_2884^6), α131_2835'''' <: ((α134_2886^6,) -> α135_2887^6)}›)›  <!<  ((α131_3212'',) -> α133_3222'')
//│ ╟── while constraining:  α130_2883''  <!<  ((α131_3212'',) -> α133_3222'')
//│ ╟── while constraining:  {(α132_3223'' -> ‹∀ 6. {α135_3228^7 where: α130_2883'' <: ((α131_3212'',) -> α133_3226^7), α131_3212'' <: ((α134_3227^7,) -> α135_3228^7)}›) where: α130_2883'' <: ((α131_3212'',) -> α133_3222''), α131_3212'' <: ((α134_3224'',) -> α135_3225'')}  <!<  ((α132_3206'',) -> α134_3207'')
//│ ╟── while constraining:  ‹∀ 5. {(α132_3216^6 -> ‹∀ 6. {α135_3221^7 where: α130_2883'' <: ((α131_3212'',) -> α133_3219^7), α131_3212'' <: ((α134_3220^7,) -> α135_3221^7)}›) where: α130_2883'' <: ((α131_3212'',) -> α133_3215^6), α131_3212'' <: ((α134_3217^6,) -> α135_3218^6)}›  <!<  ((α132_3206'',) -> α134_3207'')
//│ ╟── while constraining:  ‹∀ 5. {(α132_3216^6 -> ‹∀ 6. {α135_3221^7 where: α130_2883'' <: ((α131_3212'',) -> α133_3219^7), α131_3212'' <: ((α134_3220^7,) -> α135_3221^7)}›) where: α130_2883'' <: ((α131_3212'',) -> α133_3215^6), α131_3212'' <: ((α134_3217^6,) -> α135_3218^6)}›  <!<  α133_3205''
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  (α131_3059'' -> ‹∀ 5. {(α132_3063^6 -> ‹∀ 6. {α135_3068^7 where: α130_2883'' <: ((α131_3059'',) -> α133_3066^7), α131_3059'' <: ((α134_3067^7,) -> α135_3068^7)}›) where: α130_2883'' <: ((α131_3059'',) -> α133_3062^6), α131_3059'' <: ((α134_3064^6,) -> α135_3065^6)}›)  <!<  ((α131_3042'',) -> α133_3052'')
//│ ╟── while constraining:  ‹∀ 3. (α131_2835'''' -> ‹∀ 5. {(α132_2885^6 -> ‹∀ 6. {α135_2890^7 where: α130_2883'' <: ((α131_2835'''',) -> α133_2888^7), α131_2835'''' <: ((α134_2889^7,) -> α135_2890^7)}›) where: α130_2883'' <: ((α131_2835'''',) -> α133_2884^6), α131_2835'''' <: ((α134_2886^6,) -> α135_2887^6)}›)›  <!<  ((α131_3042'',) -> α133_3052'')
//│ ╟── while constraining:  α130_2883''  <!<  ((α131_3042'',) -> α133_3052'')
//│ ╟── while constraining:  {(α132_3053'' -> ‹∀ 6. {α135_3058^7 where: α130_2883'' <: ((α131_3042'',) -> α133_3056^7), α131_3042'' <: ((α134_3057^7,) -> α135_3058^7)}›) where: α130_2883'' <: ((α131_3042'',) -> α133_3052''), α131_3042'' <: ((α134_3054'',) -> α135_3055'')}  <!<  (‘N'' -> ‘N'')
//│ ╟── while constraining:  ‹∀ 5. {(α132_3046^6 -> ‹∀ 6. {α135_3051^7 where: α130_2883'' <: ((α131_3042'',) -> α133_3049^7), α131_3042'' <: ((α134_3050^7,) -> α135_3051^7)}›) where: α130_2883'' <: ((α131_3042'',) -> α133_3045^6), α131_3042'' <: ((α134_3047^6,) -> α135_3048^6)}›  <!<  (‘N'' -> ‘N'')
//│ ╟── while constraining:  (α131_3042'' -> ‹∀ 5. {(α132_3046^6 -> ‹∀ 6. {α135_3051^7 where: α130_2883'' <: ((α131_3042'',) -> α133_3049^7), α131_3042'' <: ((α134_3050^7,) -> α135_3051^7)}›) where: α130_2883'' <: ((α131_3042'',) -> α133_3045^6), α131_3042'' <: ((α134_3047^6,) -> α135_3048^6)}›)  <!<  ((‘N'' -> ‘N'') -> (‘N'' -> ‘N''))
//│ ╟── while constraining:  ‹∀ 3. (α131_2835'''' -> ‹∀ 5. {(α132_2885^6 -> ‹∀ 6. {α135_2890^7 where: α130_2883'' <: ((α131_2835'''',) -> α133_2888^7), α131_2835'''' <: ((α134_2889^7,) -> α135_2890^7)}›) where: α130_2883'' <: ((α131_2835'''',) -> α133_2884^6), α131_2835'''' <: ((α134_2886^6,) -> α135_2887^6)}›)›  <!<  ((‘N'' -> ‘N'') -> (‘N'' -> ‘N''))
//│ ╟── while constraining:  α1093_2834''  <!<  ((‘N'' -> ‘N'') -> (‘N'' -> ‘N''))
//│ ╟── while constraining:  (α1065_2833'' -> α1093_2834'')  <!<  (Int -> ((‘N'' -> ‘N'') -> (‘N'' -> ‘N'')))
//│ ╟── while constraining:  to_ch_s1064_2832''  <!<  (Int -> ((‘N'' -> ‘N'') -> (‘N'' -> ‘N'')))
//│ ╟── while constraining:  ‹∀ 0. to_ch_s1064'›  <!<  (Int -> ((‘N'' -> ‘N'') -> (‘N'' -> ‘N'')))
//│ ╟── while constraining:  ‹∀ 0. to_ch_s1064'›  <!<  ‹∀ 0. (Int -> (('N128' -> 'N128') -> ('N128' -> 'N128')))›
//│ ╟── while constraining:  ‹∀ 0. to_ch_s1064'›  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_ch_s1064'››  <!<  (Int -> ChurchInt)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. to_ch_s1064'››  <!<  ‹∀ 0. (Int -> ChurchInt)›
//│          = [Function: to_ch_s]

to_church = to_ch_mix
//│ int -> (forall 'a. ('N -> 'N & 'N -> anything & 'a) -> (forall 'a, 'b, 'c, 'd. ('c -> (forall 'a, 'b, 'c, 'e, 'f. ('f
//│   where
//│     'b <: 'a -> 'c -> 'e
//│     'a <: 'e -> 'f))
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> anything)) | ChurchInt)
//│   <:  to_church:
//│ int -> ChurchInt
//│          = [Function: to_ch_mix]

rec def to_ch n =
  succD (to_ch n)
//│ to_ch: anything -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│      = [Function: to_ch2]


