
:GeneralizeCurriedFunctions

test1 f =
  (f 0, f true)
//│ test1: (true -> 'a & 0 -> 'b & 'c) -> ('b, 'a,)
//│      = [Function: test1]

test1 (fun value -> { value })
//│ res: ({value: 0}, {value: true},)
//│    = [ { value: 0 }, { value: true } ]

// :ns
// :d
test2 f =
  let r x = f x
  in (r 0, r true)
//│ test2: ((true | 'a) -> ('b & 'c) & (0 | 'd) -> ('e & 'f) & 'g) -> ('f, 'c,)
//│      = [Function: test2]

test2 (fun value -> { value })
//│ res: ({value: 0}, {value: true},)
//│    = [ { value: 0 }, { value: true } ]


type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ Defined type alias ChurchInt

// :ns
def s n = fun f -> fun x -> f (n f x)
//│ s: 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('c -> 'f
//│   where
//│     'a <: 'b -> ('c -> 'd & 'e)
//│     'b <: 'd -> 'f)))
//│  = [Function: s]

// :ns
def s' (n: ChurchInt) = fun f -> fun x -> f (n f x)
//│ s': ChurchInt -> (forall 'a. 'a -> (forall 'a, 'N, 'b, 'c, 'd. (('N & 'b & 'd) -> 'c
//│   where
//│     'a <: 'N -> ('N & 'b) & 'b -> 'c)))
//│   = [Function: s$]

def succ: ChurchInt -> ChurchInt
//│ succ: ChurchInt -> ChurchInt
//│     = <missing implementation>

// :ns
// :e // * Needs distrib (see below) // works with quantif extrus
// :e // skolem extrusion?
succ = s
//│ 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('c -> 'f
//│   where
//│     'a <: 'b -> ('c -> 'd & 'e)
//│     'b <: 'd -> 'f)))
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│     = [Function: s]

def succD: forall 'M. ChurchInt -> ('M -> 'M) -> ('M -> 'M)
//│ succD: ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│      = <missing implementation>

succD = s
//│ 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('c -> 'f
//│   where
//│     'a <: 'b -> ('c -> 'd & 'e)
//│     'b <: 'd -> 'f)))
//│   <:  succD:
//│ ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│      = [Function: s]


def z f x = x
//│ z: 'a -> (forall 'b. 'b -> 'b)
//│  = [Function: z]

def zero: ChurchInt
//│ zero: ChurchInt
//│     = <missing implementation>

def zero = z
//│ 'a -> (forall 'b. 'b -> 'b)
//│   <:  zero:
//│ ChurchInt
//│     = [Function: zero]


wrap x = { x }
//│ wrap: 'a -> {x: 'a}
//│     = [Function: wrap]

n1 = s z
//│ n1: 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('c -> 'f
//│   where
//│     'b <: 'a -> ('c -> 'd & 'e)
//│     'a <: 'd -> 'f))
//│   = [Function (anonymous)]

n1 wrap 0
//│ res: {x: 0}
//│    = { x: 0 }

n2 = s (s z)
//│ n2: 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('c -> 'f
//│   where
//│     'b <: 'a -> ('c -> 'd & 'e)
//│     'a <: 'd -> 'f))
//│   = [Function (anonymous)]

n2 wrap 0
//│ res: {x: {x: 0}}
//│    = { x: { x: 0 } }

n3 = s (s (s z))
//│ n3: 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('c -> 'f
//│   where
//│     'b <: 'a -> ('c -> 'd & 'e)
//│     'a <: 'd -> 'f))
//│   = [Function (anonymous)]




// :ns
// :d
// rec def to_ch_simpl n =
//   if n == 0 then zero
//   else to_ch_simpl n
// rec def to_ch_simpl n =
//   to_ch_simpl n

// :d
// to_ch_simpl

// :ns
rec def to_ch n =
  if n == 0 then zero
  else succ (to_ch (n - 1))
//│ to_ch: int -> ChurchInt
//│      = [Function: to_ch]

def to_ch_s_mix n =
  if n == 0 then z
  else s (to_ch (n - 1))
//│ to_ch_s_mix: (int & 'a) -> (forall 'b, 'c. ('b & 'c) -> (forall 'c, 'd, 'e, 'f, 'g, 'h, 'i. (('i & 'e) -> ('h | 'i)
//│   where
//│     'd <: 'c -> ('e -> 'f & 'g)
//│     'c <: 'f -> 'h)) | 'j)
//│            = [Function: to_ch_s_mix]

// :e // due to tapping
// :e // FIXME? refreshing-extr
// FIXedME should be caught by cycle checker!
rec def to_ch_s n =
  if n == 0 then z
  else s (to_ch_s (n - 1))
//│ to_ch_s: int -> (forall 'a, 'b, 'c, 'd. (('e | 'a) -> 'b & 'c & 'd & 'e -> 'e) -> (forall 'b, 'f, 'g, 'h. ('f & 'g & 'e) -> ('h | 'f | 'b)))
//│        = [Function: to_ch_s]

// rec def to_ch n =
//   (if n == 0 then zero
//   else succ (to_ch (n - 1) : ChurchInt)): ChurchInt

def to_church: int -> ChurchInt
//│ to_church: int -> ChurchInt
//│          = <missing implementation>

def to_church n =
  if n == 0 then zero
  else succ (to_church (n - 1))
//│ (int & 'a) -> (ChurchInt | 'b)
//│   <:  to_church:
//│ int -> ChurchInt
//│          = <no result>
//│            to_church is not implemented

to_church = to_ch
//│ int -> ChurchInt
//│   <:  to_church:
//│ int -> ChurchInt
//│          = [Function: to_ch]

// :s
// :ns
// :e // * Needs distrib (see below)
// :e // FIXME? succeeds with genLamBodies
// :e // skolem extrusion?
to_church = to_ch_s_mix
//│ (int & 'a) -> (forall 'b, 'c. ('b & 'c) -> (forall 'c, 'd, 'e, 'f, 'g, 'h, 'i. (('i & 'e) -> ('h | 'i)
//│   where
//│     'd <: 'c -> ('e -> 'f & 'g)
//│     'c <: 'f -> 'h)) | 'j)
//│   <:  to_church:
//│ int -> ChurchInt
//│          = [Function: to_ch_s_mix]

:e // * Needs distrib (see below)
to_church = to_ch_s
//│ int -> (forall 'a, 'b, 'c, 'd. (('e | 'a) -> 'b & 'c & 'd & 'e -> 'e) -> (forall 'b, 'f, 'g, 'h. ('f & 'g & 'e) -> ('h | 'f | 'b)))
//│   <:  to_church:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.199: 	to_church = to_ch_s
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘N_737_745` is not an instance of type `'N_737_746`
//│ ║  l.26: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.26: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──      	                        ^^
//│          = [Function: to_ch_s]

rec def to_ch_mix n =
  if n == 0 then zero
  else s (to_ch (n - 1))
//│ to_ch_mix: (int & 'a) -> (forall 'b, 'c, 'd. (('N | 'e | 'b) -> 'c & 'N -> 'N & 'd & 'f) -> (forall 'g, 'h. ('N & 'g & 'i) -> ('h | 'c)) | ChurchInt | 'j)
//│          = [Function: to_ch_mix]

// :e // * Needs distrib (see below)
:e // skolem extrusion?
to_church = to_ch_mix
//│ (int & 'a) -> (forall 'b, 'c, 'd. (('N | 'e | 'b) -> 'c & 'N -> 'N & 'd & 'f) -> (forall 'g, 'h. ('N & 'g & 'i) -> ('h | 'c)) | ChurchInt | 'j)
//│   <:  to_church:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.222: 	to_church = to_ch_mix
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `‘N_874_883` is not an instance of type `'N_874_882`
//│ ║  l.26: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.26: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──      	                        ^^
//│          = [Function: to_ch_mix]


// rec def to_ch n =
//   if n == 0 then zero
//   else succD (to_ch (n - 1))

// rec def to_ch n =
//   succD (to_ch (n - 1))

// :e // * Needs to distribute back (in the other direction) here:
:e // skolem extrusion?
rec def to_ch n =
  succD (to_ch n)
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.247: 	rec def to_ch n =
//│ ║         	              ^^^
//│ ║  l.248: 	  succD (to_ch n)
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── type `‘N_889_891` is not an instance of type `'N_889_890`
//│ ║  l.26: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.26: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── from quantified type variable:
//│ ║  l.60: 	def succD: forall 'M. ChurchInt -> ('M -> 'M) -> ('M -> 'M)
//│ ╙──      	                  ^^
//│ to_ch: anything -> (('M | ‘N_889_891) -> (‘N_889_890 & 'M)) -> (‘N_889_890 & 'M) -> ('M | ‘N_889_891)
//│      = [Function: to_ch1]


// * With distributivity:
:DistributeForalls

succ = s
//│ 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e, 'f. ('c -> 'f
//│   where
//│     'a <: 'b -> ('c -> 'd & 'e)
//│     'b <: 'd -> 'f)))
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│     = [Function: s]

succ = s'
//│ ChurchInt -> (forall 'a. 'a -> (forall 'a, 'N, 'b, 'c, 'd. (('N & 'b & 'd) -> 'c
//│   where
//│     'a <: 'N -> ('N & 'b) & 'b -> 'c)))
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│     = [Function: s$]

to_church = to_ch_s_mix
//│ (int & 'a) -> (forall 'b, 'c. ('b & 'c) -> (forall 'c, 'd, 'e, 'f, 'g, 'h, 'i. (('i & 'e) -> ('h | 'i)
//│   where
//│     'd <: 'c -> ('e -> 'f & 'g)
//│     'c <: 'f -> 'h)) | 'j)
//│   <:  to_church:
//│ int -> ChurchInt
//│          = [Function: to_ch_s_mix]

//:e // due to tapping
// :e // FIXME? refreshing-extr
// FIXedME should be caught by cycle checker!
to_church = to_ch_s
//│ int -> (forall 'a, 'b, 'c, 'd. (('e | 'a) -> 'b & 'c & 'd & 'e -> 'e) -> (forall 'b, 'f, 'g, 'h. ('f & 'g & 'e) -> ('h | 'f | 'b)))
//│   <:  to_church:
//│ int -> ChurchInt
//│          = [Function: to_ch_s]

to_church = to_ch_mix
//│ (int & 'a) -> (forall 'b, 'c, 'd. (('N | 'e | 'b) -> 'c & 'N -> 'N & 'd & 'f) -> (forall 'g, 'h. ('N & 'g & 'i) -> ('h | 'c)) | ChurchInt | 'j)
//│   <:  to_church:
//│ int -> ChurchInt
//│          = [Function: to_ch_mix]

rec def to_ch n =
  succD (to_ch n)
//│ to_ch: anything -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│      = [Function: to_ch2]


