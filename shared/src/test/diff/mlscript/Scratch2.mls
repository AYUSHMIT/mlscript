
:GeneralizeCurriedFunctions

test1 f =
  (f 0, f true)
//│ test1: (true -> 'a & 0 -> 'b) -> ('b, 'a,)
//│      = [Function: test1]

test1 (fun value -> { value })
//│ res: ({value: 0}, {value: true},)
//│    = [ undefined, undefined ]

// :ns
// :d
test2 f =
  let r x = f x
  in (r 0, r true)
//│ test2: (true -> 'a & 0 -> 'b) -> ('b, 'a,)
//│      = [Function: test2]

test2 (fun value -> { value })
//│ res: ({value: 0}, {value: true},)
//│    = [ undefined, undefined ]


type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ Defined type alias ChurchInt

// :ns
// def s (n: ChurchInt) = fun f -> fun x -> f (n f x)

// :ns
def s n = fun f -> fun x -> f (n f x)
//│ s: 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e)))
//│  = [Function: s]

def succ: ChurchInt -> ChurchInt
//│ succ: ChurchInt -> ChurchInt
//│     = <missing implementation>

// TODO requires forall/-> distrib.
:ns
succ = s
//│ forall 'a. 'a -> (forall 'b. 'b -> (forall 'c, 'd, 'e, 'f. ('c -> 'f
//│   where
//│     'a <: 'b -> 'd
//│     'b <: 'e -> 'f)))
//│   where
//│     'd <: 'c -> 'e
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.46: 	succ = s
//│ ║        	^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.26: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.26: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──      	                        ^^
//│     = [Function: s]

def succD: forall 'M. ChurchInt -> ('M -> 'M) -> ('M -> 'M)
//│ succD: ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│      = <missing implementation>

succD = s
//│ 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e)))
//│   <:  succD:
//│ ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│      = [Function: s]


def z f x = x
//│ z: anything -> (forall 'a. 'a -> 'a)
//│  = [Function: z]

def zero: ChurchInt
//│ zero: ChurchInt
//│     = <missing implementation>

def zero = z
//│ anything -> (forall 'a. 'a -> 'a)
//│   <:  zero:
//│ ChurchInt
//│     = [Function: z]


wrap x = { x }
//│ wrap: 'a -> {x: 'a}
//│     = [Function: wrap]

n1 = s z
//│ n1: 'a -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e))
//│   = [Function (anonymous)]

n1 wrap 0
//│ res: {x: 0}
//│    = { x: 0 }

n2 = s (s z)
//│ n2: 'a -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e))
//│   = [Function (anonymous)]

n2 wrap 0
//│ res: {x: {x: 0}}
//│    = { x: { x: 0 } }

n3 = s (s (s z))
//│ n3: 'a -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e))
//│   = [Function (anonymous)]




// :ns
// :d
rec def to_ch_s n =
  if n == 0 then zero
  else to_ch_s n
// rec def to_ch_s n =
//   to_ch_s n
//│ to_ch_s: int -> ChurchInt
//│        = [Function: to_ch_s]

// :d
// to_ch_s

// [fixed] Seems to run out of depth:
// :ns
rec def to_ch n =
  if n == 0 then zero
  else succ (to_ch (n - 1))
//│ to_ch: int -> ChurchInt
//│      = [Function: to_ch]

// rec def to_ch n =
//   (if n == 0 then zero
//   else succ (to_ch (n - 1) : ChurchInt)): ChurchInt

def to_church: int -> ChurchInt
//│ to_church: int -> ChurchInt
//│          = <missing implementation>

def to_church n =
  if n == 0 then zero
  else succ (to_church (n - 1))
//│ int -> ChurchInt
//│   <:  to_church:
//│ int -> ChurchInt
//│          = <no result>
//│            to_church is not implemented

to_church = to_ch_s
//│ int -> ChurchInt
//│   <:  to_church:
//│ int -> ChurchInt
//│          = [Function: to_ch_s]

// :s
// :ns
to_church = to_ch
//│ int -> ChurchInt
//│   <:  to_church:
//│ int -> ChurchInt
//│          = [Function: to_ch]



// rec def to_ch n =
//   if n == 0 then zero
//   else succD (to_ch (n - 1))

// rec def to_ch n =
//   succD (to_ch (n - 1))

// TODO probably need to distribute back here too
rec def to_ch n =
  succD (to_ch n)
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.193: 	rec def to_ch n =
//│ ║         	              ^^^
//│ ║  l.194: 	  succD (to_ch n)
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.26: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.26: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── from quantified type variable:
//│ ║  l.66: 	def succD: forall 'M. ChurchInt -> ('M -> 'M) -> ('M -> 'M)
//│ ╙──      	                  ^^
//│ to_ch: anything -> ('M -> 'M) -> 'M -> 'M
//│      = [Function: to_ch1]


