
:GeneralizeCurriedFunctions

test1 f =
  (f 0, f true)
//│ test1: (true -> 'a & 0 -> 'b) -> ('b, 'a,)
//│      = [Function: test1]

test1 (fun value -> { value })
//│ res: ({value: 0}, {value: true},)
//│    = [ undefined, undefined ]

// :ns
// :d
test2 f =
  let r x = f x
  in (r 0, r true)
//│ test2: (true -> 'a & 0 -> 'b) -> ('b, 'a,)
//│      = [Function: test2]

test2 (fun value -> { value })
//│ res: ({value: 0}, {value: true},)
//│    = [ undefined, undefined ]


type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ Defined type alias ChurchInt

// :ns
def s n = fun f -> fun x -> f (n f x)
//│ s: 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e)))
//│  = [Function: s]

// :ns
def s' (n: ChurchInt) = fun f -> fun x -> f (n f x)
//│ s': ChurchInt -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e)))
//│   = [Function: s]

def succ: ChurchInt -> ChurchInt
//│ succ: ChurchInt -> ChurchInt
//│     = <missing implementation>

// :ns
:e // * Needs distrib (see below)
succ = s
//│ 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e)))
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.51: 	succ = s
//│ ║        	^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.26: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.26: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──      	                        ^^
//│     = [Function: s]

def succD: forall 'M. ChurchInt -> ('M -> 'M) -> ('M -> 'M)
//│ succD: ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│      = <missing implementation>

succD = s
//│ 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e)))
//│   <:  succD:
//│ ChurchInt -> ('M -> 'M) -> 'M -> 'M
//│      = [Function: s]


def z f x = x
//│ z: anything -> (forall 'a. 'a -> 'a)
//│  = [Function: z]

def zero: ChurchInt
//│ zero: ChurchInt
//│     = <missing implementation>

def zero = z
//│ anything -> (forall 'a. 'a -> 'a)
//│   <:  zero:
//│ ChurchInt
//│     = [Function: z]


wrap x = { x }
//│ wrap: 'a -> {x: 'a}
//│     = [Function: wrap]

n1 = s z
//│ n1: 'a -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e))
//│   = [Function (anonymous)]

n1 wrap 0
//│ res: {x: 0}
//│    = { x: 0 }

n2 = s (s z)
//│ n2: 'a -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e))
//│   = [Function (anonymous)]

n2 wrap 0
//│ res: {x: {x: 0}}
//│    = { x: { x: 0 } }

n3 = s (s (s z))
//│ n3: 'a -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e))
//│   = [Function (anonymous)]




// :ns
// :d
// rec def to_ch_simpl n =
//   if n == 0 then zero
//   else to_ch_simpl n
// rec def to_ch_simpl n =
//   to_ch_simpl n

// :d
// to_ch_simpl

// :ns
rec def to_ch n =
  if n == 0 then zero
  else succ (to_ch (n - 1))
//│ to_ch: int -> ChurchInt
//│      = [Function: to_ch]

def to_ch_s_mix n =
  if n == 0 then z
  else s (to_ch (n - 1))
//│ to_ch_s_mix: int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. (('f & 'c) -> ('f | 'e)
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e)))
//│            = [Function: to_ch_s_mix]

rec def to_ch_s n =
  if n == 0 then z
  else s (to_ch_s (n - 1))
//│ to_ch_s: int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. (('f & 'c) -> ('f | 'e)
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e)))
//│        = [Function: to_ch_s]

// rec def to_ch n =
//   (if n == 0 then zero
//   else succ (to_ch (n - 1) : ChurchInt)): ChurchInt

def to_church: int -> ChurchInt
//│ to_church: int -> ChurchInt
//│          = <missing implementation>

def to_church n =
  if n == 0 then zero
  else succ (to_church (n - 1))
//│ int -> ChurchInt
//│   <:  to_church:
//│ int -> ChurchInt
//│          = <no result>
//│            to_church is not implemented

to_church = to_ch
//│ int -> ChurchInt
//│   <:  to_church:
//│ int -> ChurchInt
//│          = [Function: to_ch]

// :s
// :ns
:e // * Needs distrib (see below)
to_church = to_ch_s_mix
//│ int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. (('f & 'c) -> ('f | 'e)
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e)))
//│   <:  to_church:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.196: 	to_church = to_ch_s_mix
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.26: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.26: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──      	                        ^^
//│          = [Function: to_ch_s_mix]

:e // FIXME?
to_church = to_ch_s
//│ int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. (('f & 'c) -> ('f | 'e)
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e)))
//│   <:  to_church:
//│ int -> ChurchInt
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?to_ch_s, ?d, ?e, ?f. ?to_ch_s <: int -> ChurchInt` exceeded recursion depth limit (400)
//│ ║  l.215: 	to_church = to_ch_s
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  α596'  <!<  ((α827',) -> α833')
//│ ╟── while constraining:  α598'  <!<  ((α827',) -> α833')
//│ ╟── while constraining:  α598'  <!<  ((α827',) -> α829'')
//│ ╟── while constraining:  {(α830'' -> α832'') where: α598' <: ((α827',) -> α829''), α827' <: ((α831'',) -> α832'')}  <!<  ((α820',) -> α821')
//│ ╟── while constraining:  ‹∀ 3. {(α824'''' -> α826'''') where: α598' <: ((α827',) -> α828''''), α827' <: ((α825'''',) -> α826'''')}›  <!<  ((α820',) -> α821')
//│ ╟── while constraining:  ‹∀ 3. {(α824'''' -> α826'''') where: α598' <: ((α827',) -> α828''''), α827' <: ((α825'''',) -> α826'''')}›  <!<  α819'
//│ ╟── while constraining:  ‹∀ 3. {(α824'''' -> α826'''') where: α598' <: ((α822'',) -> α823''''), α822'' <: ((α825'''',) -> α826'''')}›  <!<  α819'
//│ ╟── while constraining:  (α822'' -> ‹∀ 3. {(α824'''' -> α826'''') where: α598' <: ((α822'',) -> α823''''), α822'' <: ((α825'''',) -> α826'''')}›)  <!<  ((α813',) -> α819')
//│ ╟── while constraining:  ‹∀ 2. (α597''' -> ‹∀ 3. {(α600'''' -> α602'''') where: α598' <: ((α597''',) -> α599''''), α597''' <: ((α601'''',) -> α602'''')}›)›  <!<  ((α813',) -> α819')
//│ ╟── while constraining:  α596'  <!<  ((α813',) -> α819')
//│ ╟── while constraining:  α598'  <!<  ((α813',) -> α819')
//│ ╟── while constraining:  α598'  <!<  ((α813',) -> α815'')
//│ ╟── while constraining:  {(α816'' -> α818'') where: α598' <: ((α813',) -> α815''), α813' <: ((α817'',) -> α818'')}  <!<  ((α806',) -> α807')
//│ ╟── while constraining:  ‹∀ 3. {(α810'''' -> α812'''') where: α598' <: ((α813',) -> α814''''), α813' <: ((α811'''',) -> α812'''')}›  <!<  ((α806',) -> α807')
//│ ╟── while constraining:  ‹∀ 3. {(α810'''' -> α812'''') where: α598' <: ((α813',) -> α814''''), α813' <: ((α811'''',) -> α812'''')}›  <!<  α805'
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  α595'  <!<  ((α622',) -> α623')
//│ ╟── while constraining:  α595'  <!<  ((α613'',) -> α618'')
//│ ╟── while constraining:  {(α619'' -> α621'') where: α595' <: ((α613'',) -> α618''), α613'' <: ((α620'',) -> α621'')}  <!<  (‘N'' -> ‘N'')
//│ ╟── while constraining:  ‹∀ 3. {(α615'''' -> α617'''') where: α595' <: ((α613'',) -> α614''''), α613'' <: ((α616'''',) -> α617'''')}›  <!<  (‘N'' -> ‘N'')
//│ ╟── while constraining:  (α613'' -> ‹∀ 3. {(α615'''' -> α617'''') where: α595' <: ((α613'',) -> α614''''), α613'' <: ((α616'''',) -> α617'''')}›)  <!<  ((‘N'' -> ‘N'') -> (‘N'' -> ‘N''))
//│ ╟── while constraining:  ‹∀ 2. (α594''' -> ‹∀ 3. {(α604'''' -> α606'''') where: α595' <: ((α594''',) -> α603''''), α594''' <: ((α605'''',) -> α606'''')}›)›  <!<  ((‘N'' -> ‘N'') -> (‘N'' -> ‘N''))
//│ ╟── while constraining:  ‹∀ 2. (α594''' -> ‹∀ 3. {(α604'''' -> α606'''') where: α595' <: ((α594''',) -> α603''''), α594''' <: ((α605'''',) -> α606'''')}›)›  <!<  ‹∀ 0. (('N79' -> 'N79') -> ('N79' -> 'N79'))›
//│ ╟── while constraining:  ‹∀ 2. (α594''' -> ‹∀ 3. {(α604'''' -> α606'''') where: α595' <: ((α594''',) -> α603''''), α594''' <: ((α605'''',) -> α606'''')}›)›  <!<  ChurchInt
//│ ╟── while constraining:  α610'  <!<  ChurchInt
//│ ╟── while constraining:  (α609' -> α610')  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 1. (α592'' -> α593'')›  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  to_ch_s591'  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 0. to_ch_s441'›  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_ch_s441'››  <!<  (Int -> ChurchInt)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. to_ch_s441'››  <!<  ‹∀ 0. (Int -> ChurchInt)›
//│          = [Function: to_ch_s]

rec def to_ch_mix n =
  if n == 0 then zero
  else s (to_ch (n - 1))
//│ to_ch_mix: int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e)) | ChurchInt)
//│          = [Function: to_ch_mix]

:e // * Needs distrib (see below)
to_church = to_ch_mix
//│ int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e)) | ChurchInt)
//│   <:  to_church:
//│ int -> ChurchInt
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.269: 	to_church = to_ch_mix
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.26: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.26: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ╙──      	                        ^^
//│          = [Function: to_ch_mix]


// rec def to_ch n =
//   if n == 0 then zero
//   else succD (to_ch (n - 1))

// rec def to_ch n =
//   succD (to_ch (n - 1))

:e // * Needs to distribute back (in the other direction) here:
rec def to_ch n =
  succD (to_ch n)
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.296: 	rec def to_ch n =
//│ ║         	              ^^^
//│ ║  l.297: 	  succD (to_ch n)
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.26: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── Note: constraint arises from quantified type variable:
//│ ║  l.26: 	type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ ║        	                        ^^
//│ ╟── from quantified type variable:
//│ ║  l.69: 	def succD: forall 'M. ChurchInt -> ('M -> 'M) -> ('M -> 'M)
//│ ╙──      	                  ^^
//│ to_ch: anything -> ('M -> 'M) -> 'M -> 'M
//│      = [Function: to_ch1]


// * With distributivity:
:DistributeForalls

succ = s
//│ 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e)))
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│     = [Function: s]

succ = s'
//│ ChurchInt -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e)))
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│     = [Function: s]

to_church = to_ch_s_mix
//│ int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e, 'f. (('f & 'c) -> ('f | 'e)
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e)))
//│   <:  to_church:
//│ int -> ChurchInt
//│          = [Function: to_ch_s_mix]

// * Stil fails
// to_church = to_ch_s

to_church = to_ch_mix
//│ int -> (forall 'a. 'a -> (forall 'a, 'b, 'c, 'd, 'e. ('c -> 'e
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e)) | ChurchInt)
//│   <:  to_church:
//│ int -> ChurchInt
//│          = [Function: to_ch_mix]

rec def to_ch n =
  succD (to_ch n)
//│ to_ch: anything -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│      = [Function: to_ch2]


