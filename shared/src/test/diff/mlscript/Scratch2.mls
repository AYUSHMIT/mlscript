
:GeneralizeCurriedFunctions

test1 f =
  (f 0, f true)
//│ test1: (true -> 'a & 0 -> 'b) -> ('b, 'a,)
//│      = [Function: test1]

test1 (fun value -> { value })
//│ res: ({value: 0}, {value: true},)
//│    = [ undefined, undefined ]

// :ns
// :d
test2 f =
  let r x = f x
  in (r 0, r true)
//│ test2: (true -> 'a & 0 -> 'b) -> ('b, 'a,)
//│      = [Function: test2]

test2 (fun value -> { value })
//│ res: ({value: 0}, {value: true},)
//│    = [ undefined, undefined ]


type ChurchInt = forall 'a. ('a -> 'a) -> ('a -> 'a)
//│ Defined type alias ChurchInt

// :ns
// def s (n: ChurchInt) = fun f -> fun x -> f (n f x)

:ns
def s n = fun f -> fun x -> f (n f x)
//│ s: forall 'a. 'a -> (forall 'b. 'b -> (forall 'c, 'd, 'e, 'f. ('c -> 'f
//│   where
//│     'a <: 'b -> 'd
//│     'b <: 'e -> 'f)))
//│   where
//│     'd <: 'c -> 'e
//│  = [Function: s]

def succ: ChurchInt -> ChurchInt
//│ succ: ChurchInt -> ChurchInt
//│     = <missing implementation>

:ns
succ = s
//│ forall 'a. 'a -> (forall 'b. 'b -> (forall 'c, 'd, 'e, 'f. ('c -> 'f
//│   where
//│     'a <: 'b -> 'd
//│     'b <: 'e -> 'f)))
//│   where
//│     'd <: 'c -> 'e
//│   <:  succ:
//│ ChurchInt -> ChurchInt
//│     = [Function: s]



