:GeneralizeCurriedFunctions
:NoRecursiveTypes

// ============ Sec 1.1 ============

// i.e. auto
g = fun (f: forall 'a. 'a -> 'a) -> f f
g' = fun f -> f f
//│ g: (forall 'a. 'a -> 'a) -> (forall 'b, 'c. ('c
//│   where
//│     'b <: 'b -> 'c))
//│  = [Function: g]
//│ g': ('a -> anything & 'a) -> (forall 'a, 'b. ('b
//│   where
//│     'a <: 'a -> 'b))
//│   = [Function: g]

// i.e. auto id (FreezeML F5)
(fun (f: forall 'a. 'a -> 'a) -> f f) (fun x -> x)
(fun f -> f f) (fun x -> x)
//│ res: 'a
//│   where
//│     'b <: 'b -> 'a
//│    = [Function (anonymous)]
//│ res: 'a
//│   where
//│     'b <: 'b -> 'a
//│    = [Function (anonymous)]

// i.e. (fun auto -> auto id) auto
(fun g -> g (fun x -> x)) (fun f -> f f)
(fun g -> g (fun x -> x)) (fun (f: forall 'a. 'a -> 'a) -> f f)
//│ res: 'a
//│   where
//│     'b <: (forall 'c. 'c -> 'c) -> 'a
//│    = [Function (anonymous)]
//│ res: 'a
//│   where
//│     'b <: (forall 'c. 'c -> 'c) -> 'a
//│    = [Function (anonymous)]

// ============ Sec 1.2 ============

fun f -> f (g f)
fun f -> f (g' f)
//│ res: ((forall 'b, 'c. ('c
//│   where
//│     'b <: 'b -> 'c)) -> 'd & 'a -> 'a & 'd) -> (forall 'd. ('e
//│   where
//│     'd <: (forall 'f, 'g. ('g
//│   where
//│     'f <: 'f -> 'g)) -> 'e))
//│    = [Function: res]
//│ res: ((forall 'a, 'b. ('b
//│   where
//│     'a <: 'a -> 'b)) -> anything & 'a -> anything & 'c) -> (forall 'c, 'd. ('e
//│   where
//│     'c <: ('c | 'd) -> anything & (forall 'c, 'd, 'f. ('f
//│   where
//│     'd <: ('c | 'd) -> 'f)) -> 'e))
//│    = [Function: res]

// ============ Sec 4.1 ============

let f = fun x -> x in 
  let g = (fun x -> x) f in
    g g
//│ res: 'a -> 'a
//│    = [Function (anonymous)]

:NoJS

// ============ Sec 4.2 ============
// using FCP to solve method typing issues,
// which is overkill since it can be solved with subtyping and two levels of polymorphism...
// all of the following are typable in the main branch

// ------------ Dummy classes to represent the types in the examples ------------

class List[a]
  method Get: a
//│ Defined class List[+a]
//│ Declared List.Get: List['a] -> 'a

// Used to represent `::` in the papers
def cons[a]: a -> List[a] -> List[a]
//│ cons: 'a -> List['a] -> List['a]

// Used to represent `[]` in the papers
def nil: List['a]
//│ nil: List[nothing]

def match_list: forall 'a 'b. List['a] -> 'b -> ('a -> List['a] -> 'b) -> 'b
//│ match_list: List['a] -> 'b -> ('a -> List['a] -> 'b) -> 'b

// ------------ Type signatures for functions used in the examples ------------
// (I guess)

def mem[a]: a -> List[a] -> bool
//│ mem: anything -> List[?] -> bool

:RecursiveTypes // needed for this recursive def
rec def mem x l = match_list l false (fun head -> fun tail -> if eq head x then true else mem x tail)
//│ anything -> List[?] -> bool
//│   <:  mem:
//│ anything -> List[?] -> bool
:NoRecursiveTypes




// def fold_left[a, b]: (a -> b -> a) -> a -> List[b] -> a
def fold_left: forall 'a 'b. ('a -> 'b -> 'a) -> 'a -> List['b] -> 'a
//│ fold_left: ('a -> 'b -> 'a) -> 'a -> List['b] -> 'a

rec def fl f x l = match_list l x (fun head -> fun tail -> fl f (f x head) tail)
//│ fl: ('b -> 'a -> 'b) -> 'b -> List['a] -> 'b

rec def fl2 f x l = match_list l x (fun head -> fun tail -> fold_left f (f x head) tail)
//│ fl2: ('a -> nothing -> 'a & nothing -> nothing -> 'a & 'a0 -> nothing -> 'a0 & nothing -> nothing -> 'a0 & 'a1 -> nothing -> 'a1 & 'c -> nothing -> 'a1 & 'c -> nothing -> 'a2 & 'a2 -> nothing -> 'a2 & 'd) -> (forall 'e. ('c & 'e) -> (forall 'a3, 'a4, 'f, 'g. ((List['f] & 'g) -> (forall 'd, 'e, 'g, 'h, 'a5, 'a6, 'i, 'b, 'a7. ('a7 | 'e
//│   where
//│     'g <: List['h]
//│     'd <: 'a5 -> nothing -> 'a5 & 'e -> nothing -> 'a5 & 'a6 -> nothing -> 'a6 & 'e -> 'h -> 'a6
//│     'i <: List['b]
//│     'd <: 'a7 -> 'b -> 'a7 & 'e -> 'h -> 'a7
//│     'g <: List['h]
//│     'd <: 'a5 -> nothing -> 'a5 & 'e -> nothing -> 'a5 & 'a6 -> nothing -> 'a6 & 'e -> 'h -> 'a6))
//│   where
//│     'd <: 'a3 -> nothing -> 'a3 & 'e -> nothing -> 'a3 & 'a4 -> nothing -> 'a4 & 'e -> 'f -> 'a4)))

:RecursiveTypes // needed for this recursive def
def fold_left = fl
//│ ('b -> 'a -> 'b) -> 'b -> List['a] -> 'b
//│   <:  fold_left:
//│ ('a -> 'b -> 'a) -> 'a -> List['b] -> 'a
:NoRecursiveTypes

def fold_left = fl2
//│ ('a -> nothing -> 'a & nothing -> nothing -> 'a & 'a0 -> nothing -> 'a0 & nothing -> nothing -> 'a0 & 'a1 -> nothing -> 'a1 & 'c -> nothing -> 'a1 & 'c -> nothing -> 'a2 & 'a2 -> nothing -> 'a2 & 'd) -> (forall 'e. ('c & 'e) -> (forall 'a3, 'a4, 'f, 'g. ((List['f] & 'g) -> (forall 'd, 'e, 'g, 'h, 'a5, 'a6, 'i, 'b, 'a7. ('a7 | 'e
//│   where
//│     'g <: List['h]
//│     'd <: 'a5 -> nothing -> 'a5 & 'e -> nothing -> 'a5 & 'a6 -> nothing -> 'a6 & 'e -> 'h -> 'a6
//│     'i <: List['b]
//│     'd <: 'a7 -> 'b -> 'a7 & 'e -> 'h -> 'a7
//│     'g <: List['h]
//│     'd <: 'a5 -> nothing -> 'a5 & 'e -> nothing -> 'a5 & 'a6 -> nothing -> 'a6 & 'e -> 'h -> 'a6))
//│   where
//│     'd <: 'a3 -> nothing -> 'a3 & 'e -> nothing -> 'a3 & 'a4 -> nothing -> 'a4 & 'e -> 'f -> 'a4)))
//│   <:  fold_left:
//│ ('a -> 'b -> 'a) -> 'a -> List['b] -> 'a

// :d
// rec def fold_left f x l = match_list l x (fun head -> fun tail -> fold_left f (f x head) tail)

// ------------ polymorphic methods ------------

class Collection[a]: { l: List[a] }
  method Mem x = mem x this.l
  method Fold f x = fold_left f x this.l
//│ Defined class Collection[+a]
//│ Defined Collection.Mem: Collection[?] -> anything -> bool
//│ Defined Collection.Fold: Collection['a] -> (forall 'a0, 'b. ('a0 -> 'a -> 'a0) -> (forall 'a1, 'c. ('c -> (forall 'a, 'b, 'c, 'a2. ('a2 | 'c
//│   where
//│     'b <: ('a2 | 'c) -> 'a -> 'a2
//│     'b <: ('a2 | 'c) -> 'a -> 'a2))
//│   where
//│     'b <: ('a1 | 'c) -> 'a -> 'a1)))

def coll_mem c x = c.Mem x
//│ coll_mem: (Collection['a] & 'a) -> (forall 'a. ('a -> (forall 'a. (bool
//│   where
//│     'a <: Collection['a]))
//│   where
//│     'a <: Collection['a]))

// typo in the paper? it was `fun x -> fun y -> ...`
def simple_and_double c =
  let l1 = c.Fold (fun y -> fun x -> cons x y) nil in
  let l2 = c.Fold (fun y -> fun x -> cons ((x, x),) y) nil in
  (l1, l2)
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.178: 	  let l1 = c.Fold (fun y -> fun x -> cons x y) nil in
//│ ║         	           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 7. {α967_1002^8 where: α963_991'''' <: List[α222_1001^8]}›  <:  list<>    PolymorphicType  ClassTag
//│ ╙──  ... looks like:  ‹∀ 7. {α967_997^8 where: α963_991'''' <: List[α222_996^8]}›  <:  list<>
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.179: 	  let l2 = c.Fold (fun y -> fun x -> cons ((x, x),) y) nil in
//│ ║         	           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  ‹∀ 7. {α1040_1075^8 where: α1036_1064'''' <: List[α222_1074^8]}›  <:  list<>    PolymorphicType  ClassTag
//│ ╙──  ... looks like:  ‹∀ 7. {α1040_1070^8 where: α1036_1064'''' <: List[α222_1069^8]}›  <:  list<>
//│ simple_and_double: Collection[?] -> (error, error,)

simple_and_double (Collection{l = cons 1 nil})
//│ res: (error, error,)

// ------------ subtyping & methods ------------

class Float
class Color
class Point: { x: Float; y: Float }
class ColorPoint: Point & { c: Color }
class Circle: { x: Float; y: Float; r: Float }
  method Distance: Point -> Float
//│ Defined class Float
//│ Defined class Color
//│ Defined class Point
//│ Defined class ColorPoint
//│ Defined class Circle
//│ Declared Circle.Distance: Circle -> Point -> Float

c = error : Circle
cp = error : ColorPoint
c.Distance cp
//│ c: Circle
//│ cp: ColorPoint
//│ res: Float
