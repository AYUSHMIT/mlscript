:GeneralizeCurriedFunctions
:NoRecursiveTypes

// ============ Sec 1.1 ============

// i.e. auto
g = fun (f: forall 'a. 'a -> 'a) -> f f
g' = fun f -> f f
//│ g: (forall 'a. 'a -> 'a) -> (forall 'b, 'c. ('c
//│   where
//│     'b <: 'b -> 'c))
//│  = [Function: g]
//│ g': ('a -> anything & 'a) -> (forall 'a, 'b. ('b
//│   where
//│     'a <: 'a -> 'b))
//│   = [Function: g]

// i.e. auto id (FreezeML F5)
(fun (f: forall 'a. 'a -> 'a) -> f f) (fun x -> x)
(fun f -> f f) (fun x -> x)
//│ res: 'a
//│   where
//│     'b <: 'b -> 'a
//│    = [Function (anonymous)]
//│ res: 'a
//│   where
//│     'b <: 'b -> 'a
//│    = [Function (anonymous)]

// i.e. (fun auto -> auto id) auto
(fun g -> g (fun x -> x)) (fun f -> f f)
(fun g -> g (fun x -> x)) (fun (f: forall 'a. 'a -> 'a) -> f f)
//│ res: 'a
//│   where
//│     'b <: (forall 'c. 'c -> 'c) -> 'a
//│    = [Function (anonymous)]
//│ res: 'a
//│   where
//│     'b <: (forall 'c. 'c -> 'c) -> 'a
//│    = [Function (anonymous)]

// ============ Sec 1.2 ============

fun f -> f (g f)
fun f -> f (g' f)
//│ res: ((forall 'b, 'c. ('c
//│   where
//│     'b <: 'b -> 'c)) -> 'd & 'a -> 'a & 'd) -> (forall 'd. ('e
//│   where
//│     'd <: (forall 'f, 'g. ('g
//│   where
//│     'f <: 'f -> 'g)) -> 'e))
//│    = [Function: res]
//│ res: ((forall 'a, 'b. ('b
//│   where
//│     'a <: 'a -> 'b)) -> anything & 'c -> anything & 'c) -> (forall 'c, 'd. ('e
//│   where
//│     'c <: 'd -> anything & 'd & (forall 'd, 'f. ('f
//│   where
//│     'd <: 'd -> 'f)) -> 'e))
//│    = [Function: res]

// ============ Sec 4.1 ============

let f = fun x -> x in 
  let g = (fun x -> x) f in
    g g
//│ res: 'a -> 'a
//│    = [Function (anonymous)]

:NoJS

// ============ Sec 4.2 ============
// using FCP to solve method typing issues,
// which is overkill since it can be solved with subtyping and two levels of polymorphism...
// all of the following are typable in the main branch

// ------------ Dummy classes to represent the types in the examples ------------

class List[a]
  method Get: a
//│ Defined class List[+a]
//│ Declared List.Get: List['a] -> 'a

// Used to represent `::` in the papers
def cons[a]: a -> List[a] -> List[a]
//│ cons: 'a -> List['a] -> List['a]

// Used to represent `[]` in the papers
def nil: List['a]
//│ nil: List[nothing]

def match_list: forall 'a 'b. List['a] -> 'b -> ('a -> List['a] -> 'b) -> 'b
//│ match_list: List['a] -> 'b -> ('a -> List['a] -> 'b) -> 'b

// ------------ Type signatures for functions used in the examples ------------
// (I guess)

def mem[a]: a -> List[a] -> bool
//│ mem: anything -> List[?] -> bool

:RecursiveTypes // needed for this recursive def
rec def mem x l = match_list l false (fun head -> fun tail -> if eq head x then true else mem x tail)
//│ anything -> List[?] -> bool
//│   <:  mem:
//│ anything -> List[?] -> bool
:NoRecursiveTypes




// def fold_left[a, b]: (a -> b -> a) -> a -> List[b] -> a
def fold_left: forall 'a 'b. ('a -> 'b -> 'a) -> 'a -> List['b] -> 'a
//│ fold_left: ('a -> 'b -> 'a) -> 'a -> List['b] -> 'a

rec def fl f x l = match_list l x (fun head -> fun tail -> fl f (f x head) tail)
//│ fl: ('b -> 'a -> 'b) -> 'b -> List['a] -> 'b

rec def fl2 f x l = match_list l x (fun head -> fun tail -> fold_left f (f x head) tail)
//│ fl2: ('a -> nothing -> 'a & nothing -> nothing -> 'c & 'a0 -> nothing -> 'a0 & 'a1 -> nothing -> 'a1 & 'a2 -> nothing -> 'a2 & 'a3 -> nothing -> 'a3 & 'a4 -> nothing -> 'a4 & 'a5 -> nothing -> 'a5 & 'a6 -> nothing -> 'a6 & 'a7 -> nothing -> 'a7 & 'a8 -> nothing -> 'a8 & 'a9 -> nothing -> 'a9 & 'a10 -> nothing -> 'a10 & 'a11 -> nothing -> 'a11 & 'a12 -> nothing -> 'a12 & 'a13 -> nothing -> 'a13 & 'a14 -> nothing -> 'a14 & 'a15 -> nothing -> 'a15 & 'a16 -> nothing -> 'a16 & 'a17 -> nothing -> 'a17 & 'a18 -> nothing -> 'a18 & 'a19 -> nothing -> 'a19 & 'a20 -> nothing -> 'a20 & 'a21 -> nothing -> 'a21 & 'a22 -> nothing -> 'a22 & 'a23 -> nothing -> 'a23 & 'a24 -> nothing -> 'a24 & 'a25 -> nothing -> 'a25 & 'a26 -> nothing -> 'a26 & 'a27 -> nothing -> 'a27 & 'a28 -> nothing -> 'a28 & 'a29 -> nothing -> 'a29 & 'a30 -> nothing -> 'a30 & 'a31 -> nothing -> 'a31 & 'a32 -> nothing -> 'a32 & 'd) -> (forall 'c, 'd, 'a33, 'a34, 'a35, 'a36, 'a37, 'a38, 'a39, 'a40, 'a41, 'a42, 'a43, 'a44, 'a45, 'a46, 'a47, 'a48, 'a49, 'e. ('e -> (forall 'c, 'd, 'e, 'a50, 'a51, 'a52, 'a53, 'a54, 'a55, 'a56, 'a57, 'a58, 'a59, 'a60, 'a61, 'a62, 'a63, 'a64, 'a65, 'a66, 'a67, 'a68, 'a69, 'a70, 'a71, 'a72, 'a73, 'a74, 'a75, 'a76, 'a77. ((List['c] & 'c) -> (forall 'c, 'd, 'e, 'a78, 'b, 'f, 'g, 'a79, 'a80, 'a81, 'a82, 'a83, 'a84, 'a85, 'a86, 'h. ('a78 | 'h
//│   where
//│     'd <: 'a78 -> 'b -> 'a78 & 'e -> 'f -> 'a78
//│     'g <: List['b]
//│     'd <: 'a79 -> nothing -> 'a79 & nothing -> nothing -> 'c & 'a80 -> nothing -> 'a80 & 'a81 -> nothing -> 'a81 & 'a82 -> nothing -> 'a82 & 'a83 -> nothing -> 'a83 & 'a84 -> nothing -> 'a84 & 'a85 -> nothing -> 'a85 & 'a86 -> nothing -> 'a86
//│     'e <: 'h
//│     'c <: List['f]
//│     'd <: 'a79 -> nothing -> 'a79 & nothing -> nothing -> 'c & 'a80 -> nothing -> 'a80 & 'a81 -> nothing -> 'a81 & 'a82 -> nothing -> 'a82 & 'a83 -> nothing -> 'a83 & 'a84 -> nothing -> 'a84 & 'a85 -> nothing -> 'a85 & 'a86 -> nothing -> 'a86
//│     'e <: 'h
//│     'c <: List['f]))
//│   where
//│     'd <: 'a50 -> nothing -> 'a50 & nothing -> nothing -> 'c & 'a51 -> nothing -> 'a51 & 'a52 -> nothing -> 'a52 & 'a53 -> nothing -> 'a53 & 'a54 -> nothing -> 'a54 & 'a55 -> nothing -> 'a55 & 'a56 -> nothing -> 'a56 & 'a57 -> nothing -> 'a57 & 'a58 -> nothing -> 'a58 & 'a59 -> nothing -> 'a59 & 'a60 -> nothing -> 'a60 & 'a61 -> nothing -> 'a61 & 'a62 -> nothing -> 'a62
//│     'e <: 'c
//│     'd <: 'a63 -> nothing -> 'a63 & nothing -> nothing -> 'c & 'a64 -> nothing -> 'a64 & 'a65 -> nothing -> 'a65 & 'a66 -> nothing -> 'a66 & 'a67 -> nothing -> 'a67 & 'a68 -> nothing -> 'a68 & 'a69 -> nothing -> 'a69 & 'a70 -> nothing -> 'a70 & 'a71 -> nothing -> 'a71 & 'a72 -> nothing -> 'a72 & 'a73 -> nothing -> 'a73 & 'a74 -> nothing -> 'a74 & 'a75 -> nothing -> 'a75 & 'a76 -> nothing -> 'a76 & 'a77 -> nothing -> 'a77
//│     'e <: 'c))
//│   where
//│     'd <: 'a33 -> nothing -> 'a33 & nothing -> nothing -> 'c & 'a34 -> nothing -> 'a34 & 'a35 -> nothing -> 'a35 & 'a36 -> nothing -> 'a36 & 'a37 -> nothing -> 'a37 & 'a38 -> nothing -> 'a38 & 'a39 -> nothing -> 'a39 & 'a40 -> nothing -> 'a40 & 'a41 -> nothing -> 'a41 & 'a42 -> nothing -> 'a42 & 'a43 -> nothing -> 'a43 & 'a44 -> nothing -> 'a44 & 'a45 -> nothing -> 'a45 & 'a46 -> nothing -> 'a46 & 'a47 -> nothing -> 'a47 & 'a48 -> nothing -> 'a48 & 'a49 -> nothing -> 'a49))

:RecursiveTypes // needed for this recursive def
def fold_left = fl
//│ ('b -> 'a -> 'b) -> 'b -> List['a] -> 'b
//│   <:  fold_left:
//│ ('a -> 'b -> 'a) -> 'a -> List['b] -> 'a
:NoRecursiveTypes

def fold_left = fl2
//│ ('a -> nothing -> 'a & nothing -> nothing -> 'c & 'a0 -> nothing -> 'a0 & 'a1 -> nothing -> 'a1 & 'a2 -> nothing -> 'a2 & 'a3 -> nothing -> 'a3 & 'a4 -> nothing -> 'a4 & 'a5 -> nothing -> 'a5 & 'a6 -> nothing -> 'a6 & 'a7 -> nothing -> 'a7 & 'a8 -> nothing -> 'a8 & 'a9 -> nothing -> 'a9 & 'a10 -> nothing -> 'a10 & 'a11 -> nothing -> 'a11 & 'a12 -> nothing -> 'a12 & 'a13 -> nothing -> 'a13 & 'a14 -> nothing -> 'a14 & 'a15 -> nothing -> 'a15 & 'a16 -> nothing -> 'a16 & 'a17 -> nothing -> 'a17 & 'a18 -> nothing -> 'a18 & 'a19 -> nothing -> 'a19 & 'a20 -> nothing -> 'a20 & 'a21 -> nothing -> 'a21 & 'a22 -> nothing -> 'a22 & 'a23 -> nothing -> 'a23 & 'a24 -> nothing -> 'a24 & 'a25 -> nothing -> 'a25 & 'a26 -> nothing -> 'a26 & 'a27 -> nothing -> 'a27 & 'a28 -> nothing -> 'a28 & 'a29 -> nothing -> 'a29 & 'a30 -> nothing -> 'a30 & 'a31 -> nothing -> 'a31 & 'a32 -> nothing -> 'a32 & 'd) -> (forall 'c, 'd, 'a33, 'a34, 'a35, 'a36, 'a37, 'a38, 'a39, 'a40, 'a41, 'a42, 'a43, 'a44, 'a45, 'a46, 'a47, 'a48, 'a49, 'e. ('e -> (forall 'c, 'd, 'e, 'a50, 'a51, 'a52, 'a53, 'a54, 'a55, 'a56, 'a57, 'a58, 'a59, 'a60, 'a61, 'a62, 'a63, 'a64, 'a65, 'a66, 'a67, 'a68, 'a69, 'a70, 'a71, 'a72, 'a73, 'a74, 'a75, 'a76, 'a77. ((List['c] & 'c) -> (forall 'c, 'd, 'e, 'a78, 'b, 'f, 'g, 'a79, 'a80, 'a81, 'a82, 'a83, 'a84, 'a85, 'a86, 'h. ('a78 | 'h
//│   where
//│     'd <: 'a78 -> 'b -> 'a78 & 'e -> 'f -> 'a78
//│     'g <: List['b]
//│     'd <: 'a79 -> nothing -> 'a79 & nothing -> nothing -> 'c & 'a80 -> nothing -> 'a80 & 'a81 -> nothing -> 'a81 & 'a82 -> nothing -> 'a82 & 'a83 -> nothing -> 'a83 & 'a84 -> nothing -> 'a84 & 'a85 -> nothing -> 'a85 & 'a86 -> nothing -> 'a86
//│     'e <: 'h
//│     'c <: List['f]
//│     'd <: 'a79 -> nothing -> 'a79 & nothing -> nothing -> 'c & 'a80 -> nothing -> 'a80 & 'a81 -> nothing -> 'a81 & 'a82 -> nothing -> 'a82 & 'a83 -> nothing -> 'a83 & 'a84 -> nothing -> 'a84 & 'a85 -> nothing -> 'a85 & 'a86 -> nothing -> 'a86
//│     'e <: 'h
//│     'c <: List['f]))
//│   where
//│     'd <: 'a50 -> nothing -> 'a50 & nothing -> nothing -> 'c & 'a51 -> nothing -> 'a51 & 'a52 -> nothing -> 'a52 & 'a53 -> nothing -> 'a53 & 'a54 -> nothing -> 'a54 & 'a55 -> nothing -> 'a55 & 'a56 -> nothing -> 'a56 & 'a57 -> nothing -> 'a57 & 'a58 -> nothing -> 'a58 & 'a59 -> nothing -> 'a59 & 'a60 -> nothing -> 'a60 & 'a61 -> nothing -> 'a61 & 'a62 -> nothing -> 'a62
//│     'e <: 'c
//│     'd <: 'a63 -> nothing -> 'a63 & nothing -> nothing -> 'c & 'a64 -> nothing -> 'a64 & 'a65 -> nothing -> 'a65 & 'a66 -> nothing -> 'a66 & 'a67 -> nothing -> 'a67 & 'a68 -> nothing -> 'a68 & 'a69 -> nothing -> 'a69 & 'a70 -> nothing -> 'a70 & 'a71 -> nothing -> 'a71 & 'a72 -> nothing -> 'a72 & 'a73 -> nothing -> 'a73 & 'a74 -> nothing -> 'a74 & 'a75 -> nothing -> 'a75 & 'a76 -> nothing -> 'a76 & 'a77 -> nothing -> 'a77
//│     'e <: 'c))
//│   where
//│     'd <: 'a33 -> nothing -> 'a33 & nothing -> nothing -> 'c & 'a34 -> nothing -> 'a34 & 'a35 -> nothing -> 'a35 & 'a36 -> nothing -> 'a36 & 'a37 -> nothing -> 'a37 & 'a38 -> nothing -> 'a38 & 'a39 -> nothing -> 'a39 & 'a40 -> nothing -> 'a40 & 'a41 -> nothing -> 'a41 & 'a42 -> nothing -> 'a42 & 'a43 -> nothing -> 'a43 & 'a44 -> nothing -> 'a44 & 'a45 -> nothing -> 'a45 & 'a46 -> nothing -> 'a46 & 'a47 -> nothing -> 'a47 & 'a48 -> nothing -> 'a48 & 'a49 -> nothing -> 'a49))
//│   <:  fold_left:
//│ ('a -> 'b -> 'a) -> 'a -> List['b] -> 'a
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?c, ?b, ?d, ?e, ?f, ?g, ?b0, ?h, ?i, ?j, ?k, ?b1, ?l, ?m, ?n, ?o, ?b2, ?p, ?q, ?r, ?s, ?b3, ?t, ?u, ?v, ?w, ?b4, ?x, ?y, ?z, ?a1, ?b5, ?b1, ?c1, ?d1, ?e1, ?b6, ?f1, ?g1, ?h1, ?i1, ?b7, ?j1, ?k1, ?l1, ?m1, ?b8, ?n1, ?o1, ?p1, ?q1, ?b9, ?r1, ?s1, ?t1, ?u1, ?b10, ?v1, ?w1, ?x1, ?y1, ?b11, ?z1, ?a2, ?b2, ?c2, ?a, ?d2, ?b12, ?e2, ?f2, ?g2, ?h2, ?a0, ?i2, ?a1, ?j2, ?b13, ?k2, ?l2, ?m2, ?n2, ?a2, ?o2, ?a3, ?p2, ?b14, ?q2, ?r2, ?s2, ?t2, ?a4, ?u2, ?a5, ?v2, ?b15, ?w2, ?x2, ?y2, ?z2, ?a6, ?a3, ?a7, ?b3, ?b16, ?c3, ?d3, ?e3, ?f3, ?a8, ?g3, ?a9, ?h3, ?b17, ?i3, ?j3, ?k3, ?l3, ?a10, ?m3, ?a11, ?n3, ?b18, ?o3, ?p3, ?q3, ?r3, ?a12, ?s3, ?a13, ?t3, ?b19, ?u3, ?v3, ?w3, ?x3, ?a14, ?y3, ?a15, ?z3, ?b20, ?a4, ?b4, ?c4, ?d4, ?a16, ?e4, ?a17, ?f4, ?b21, ?g4, ?h4, ?i4, ?j4, ?a18, ?k4, ?a19, ?l4, ?b22, ?m4, ?n4, ?o4, ?p4, ?a20, ?q4, ?a21, ?r4, ?b23, ?s4, ?t4, ?u4, ?v4, ?a22, ?w4, ?a23, ?x4, ?b24, ?y4, ?z4, ?a5, ?b5, ?a24, ?c5, ?a25, ?d5, ?b25, ?e5, ?f5, ?g5, ?h5, ?a26, ?i5, ?a27, ?j5, ?b26, ?k5, ?l5, ?m5, ?n5, ?a28, ?o5, ?a29, ?p5, ?b27, ?q5, ?r5, ?s5, ?t5, ?a30, ?u5, ?a31, ?v5, ?b28, ?w5, ?x5, ?y5, ?z5, ?a32, ?a6, ?fl2, ?b6, ?c6, ?a33, ?a34, ?d6, ?e6, ?a35, ?a36, ?f6, ?g6, ?a37, ?a38, ?h6, ?i6, ?a39, ?a40, ?j6, ?k6, ?a41, ?a42, ?l6, ?m6, ?a43, ?a44, ?n6, ?o6, ?a45, ?a46, ?p6, ?q6, ?a47, ?a48, ?r6, ?s6, ?a49, ?a50, ?t6, ?u6, ?a51, ?a52, ?v6, ?w6, ?a53, ?a54, ?x6, ?y6, ?a55, ?a56, ?z6, ?a7, ?a57, ?a58, ?b7, ?c7, ?a59, ?a60, ?d7, ?e7, ?a61, ?a62, ?f7, ?g7, ?a63, ?a64, ?h7, ?i7, ?a65, ?a66, ?a67, ?j7, ?k7, ?a68, ?a69, ?l7, ?m7, ?a70, ?a71, ?n7, ?o7, ?a72, ?a73, ?p7, ?q7, ?a74, ?a75, ?r7, ?s7, ?a76, ?a77, ?t7, ?u7, ?a78, ?a79, ?v7, ?w7, ?a80, ?a81, ?x7, ?y7, ?a82, ?a83, ?z7, ?a8, ?a84, ?a85, ?b8, ?c8, ?a86, ?a87, ?d8, ?e8, ?a88, ?a89, ?f8, ?g8, ?a90, ?a91, ?h8, ?i8, ?a92, ?b29. ?fl2 <: forall ?a93, ?b30. (?a93 -> ?b30 -> ?a93) -> ?a93 -> List[?b30] -> ?a93` took too many steps and ran out of fuel (5000)
//│ ║  l.145: 	def fold_left = fl2
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ╟──  + (‘a' -> (‘b' -> ‘a'))
//│ ║  l.113: 	def fold_left: forall 'a 'b. ('a -> 'b -> 'a) -> 'a -> List['b] -> 'a
//│ ║         	                             ^^^^^^^^^^^^^^^^
//│ ╟──  - ('a317_4294' -> ('b318_4296' -> 'a317_4294'))
//│ ║  l.113: 	def fold_left: forall 'a 'b. ('a -> 'b -> 'a) -> 'a -> List['b] -> 'a
//│ ║         	                             ^^^^^^^^^^^^^^^^
//│ ╟──  - ('a317_4294' -> ('b318_4296' -> 'a317_4294'))
//│ ╙──  - α357_5048'

// :d
// rec def fold_left f x l = match_list l x (fun head -> fun tail -> fold_left f (f x head) tail)

// ------------ polymorphic methods ------------

class Collection[a]: { l: List[a] }
  method Mem x = mem x this.l
  method Fold f x = fold_left f x this.l
//│ Defined class Collection[+a]
//│ Defined Collection.Mem: Collection[?] -> anything -> (forall 'a. (bool
//│   where
//│     'a <: anything))
//│ Defined Collection.Fold: Collection['a] -> (forall 'a0. ('a0 -> 'a -> 'a0) -> (forall 'a, 'b, 'a1, 'a2. (anything -> (forall 'a, 'b, 'a3, 'c. ('a3
//│   where
//│     'b <: 'a3 -> 'a -> 'a3
//│     'c <: 'a3))
//│   where
//│     'b <: 'a1 -> 'a -> 'a1
//│     'b <: 'a2 -> 'a -> 'a2)))

def coll_mem c x = c.Mem x
//│ coll_mem: (Collection['a] & 'b) -> (forall 'a, 'b. ('a -> (forall 'a, 'b, 'c. (bool
//│   where
//│     'c <: 'a
//│     'b <: Collection['a]
//│     'a <: 'a))
//│   where
//│     'b <: Collection['a]
//│     'b <: Collection['a]))

// typo in the paper? it was `fun x -> fun y -> ...`
def simple_and_double c =
  let l1 = c.Fold (fun y -> fun x -> cons x y) nil in
  let l2 = c.Fold (fun y -> fun x -> cons ((x, x),) y) nil in
  (l1, l2)
//│ /!!!\ Uncaught error: java.lang.StackOverflowError

simple_and_double (Collection{l = cons 1 nil})
//│ ╔══[ERROR] identifier not found: simple_and_double
//│ ║  l.214: 	simple_and_double (Collection{l = cons 1 nil})
//│ ╙──       	^^^^^^^^^^^^^^^^^
//│ res: error

// ------------ subtyping & methods ------------

class Float
class Color
class Point: { x: Float; y: Float }
class ColorPoint: Point & { c: Color }
class Circle: { x: Float; y: Float; r: Float }
  method Distance: Point -> Float
//│ Defined class Float
//│ Defined class Color
//│ Defined class Point
//│ Defined class ColorPoint
//│ Defined class Circle
//│ Declared Circle.Distance: Circle -> Point -> Float

c = error : Circle
cp = error : ColorPoint
c.Distance cp
//│ c: Circle
//│ cp: ColorPoint
//│ res: Float
