
:GeneralizeCurriedFunctions

// def foo f x = f x


// def s n = fun f -> fun x -> f (n f x)



def z f x = x
//│ z: anything -> (forall 'a. 'a -> 'a)
//│  = [Function: z]

def s n f x = f (n f x)
//│ s: ('a -> 'b -> 'c & 'd) -> (forall 'a, 'c, 'd, 'e, 'f, 'g, 'h, 'i. ((('g | 'h | 'c) -> 'i & 'a & 'e) -> (forall 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l. (('b & 'f & 'j) -> ('l | 'i)
//│   where
//│     'd <: 'e -> 'j -> ('h & 'k)
//│     'e <: ('k | 'g | 'c) -> 'l))
//│   where
//│     'd <: 'e -> 'f -> 'g))
//│  = [Function: s]


def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ succ: (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = <missing implementation>


// * This one requires distributing the RHS forall to rigidify it earlier:

// * Failure comes from:
// | | | C ‹∀ 1. (α27'' -> ‹∀ 2. (α28''' -> ‹∀ 3. {(α29'''' -> α32'''') where: α27'' <: ((α28''',) -> α30''''), α28''' <: ((α31'''',) -> α32'''')}›)›)› <! (‹∀ 1. (('N95'' -> 'N95'') -> ('N95'' -> 'N95''))› -> ‹∀ 1. (('M96'' -> 'M96'') -> ('M96'' -> 'M96''))›)  PolymorphicType  FunctionType
// :d
// :e // works with quantif extrus
// :e // due to tapping
succ = s
//│ ('a -> 'b -> 'c & 'd) -> (forall 'a, 'c, 'd, 'e, 'f, 'g, 'h, 'i. ((('g | 'h | 'c) -> 'i & 'a & 'e) -> (forall 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l. (('b & 'f & 'j) -> ('l | 'i)
//│   where
//│     'd <: 'e -> 'j -> ('h & 'k)
//│     'e <: ('k | 'g | 'c) -> 'l))
//│   where
//│     'd <: 'e -> 'f -> 'g))
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = [Function: s]


// * Manually distributing fixes the error:

def succ0: forall 'M. (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (('M -> 'M) -> ('M -> 'M))
//│ succ0: (forall 'N. ('N -> 'N) -> 'N -> 'N) -> ('M -> 'M) -> 'M -> 'M
//│      = <missing implementation>

succ0 = s
//│ ('a -> 'b -> 'c & 'd) -> (forall 'a, 'c, 'd, 'e, 'f, 'g, 'h, 'i. ((('g | 'h | 'c) -> 'i & 'a & 'e) -> (forall 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l. (('b & 'f & 'j) -> ('l | 'i)
//│   where
//│     'd <: 'e -> 'j -> ('h & 'k)
//│     'e <: ('k | 'g | 'c) -> 'l))
//│   where
//│     'd <: 'e -> 'f -> 'g))
//│   <:  succ0:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> ('M -> 'M) -> 'M -> 'M
//│      = [Function: s]



// * This does not help; we still need distrib. It works in MLF – do they have distrib?!
// :e // works with quantif extrus
// :e // due to tapping
def succ (n: (forall 'N. ('N -> 'N) -> ('N -> 'N))) = fun f -> fun x -> f (n f x)
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'a, 'b, 'c, 'd, 'N0, 'e, 'f. (('N0 -> 'N0 & ('N0 | 'd | 'e) -> 'f & 'b) -> (forall 'a, 'b, 'c, 'd, 'N0, 'e, 'f, 'g, 'h, 'i. (('c & 'N0 & 'g) -> ('i | 'f)
//│   where
//│     'a <: 'b -> 'g -> ('e & 'h)
//│     'b <: ('N0 | 'h | 'd) -> 'i))
//│   where
//│     'a <: 'b -> 'c -> 'd))
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = [Function: succ2]



// :d
n1 = s z
//│ n1: (('a | 'b | 'c) -> 'd & 'e) -> (forall 'f, 'e, 'g, 'a, 'b, 'c, 'd, 'h, 'i, 'j. (('g & 'c & 'h) -> ('j | 'd)
//│   where
//│     'f <: 'e -> 'h -> ('b & 'i)
//│     'e <: ('i | 'a | 'c) -> 'j))
//│   where
//│     'f <: 'e -> 'g -> 'a
//│   = [Function (anonymous)]

n2 = s (s z)
//│ n2: ('a -> 'b & ('c | 'd | 'b) -> 'e & 'f) -> (forall 'g, 'f, 'h, 'c, 'a, 'b, 'd, 'e, 'i, 'j, 'k. (('h & 'a & 'i) -> ('k | 'e)
//│   where
//│     'g <: 'f -> 'i -> ('d & 'j)
//│     'f <: ('j | 'c | 'b) -> 'k))
//│   where
//│     'g <: 'f -> 'h -> 'c
//│   = [Function (anonymous)]

n3 = s (s (s z))
//│ n3: (('a | 'b | 'c) -> 'd & 'e -> 'c & 'f -> 'e & 'g) -> (forall 'h, 'g, 'i, 'a, 'b, 'c, 'd, 'f, 'j, 'k, 'l. (('i & 'f & 'j) -> ('l | 'd)
//│   where
//│     'h <: 'g -> 'j -> ('b & 'k)
//│     'g <: ('k | 'a | 'c) -> 'l))
//│   where
//│     'h <: 'g -> 'i -> 'a
//│   = [Function (anonymous)]

// def wrap: 'WRA -> 'WRA
// def wrap: int -> {x:int}

// def wrap: 'a -> {x: 'a}
wrap x = { x }
//│ wrap: 'a -> {x: 'a}
//│     = [Function: wrap]

// :d
n1w = n1 wrap
//│ n1w: ('a & 'b & 'c) -> ({x: 'b} | 'd)
//│   where
//│     'e <: 'f -> 'a -> ('g & 'b)
//│     'f <: ('g | 'c) -> 'd
//│    = [Function (anonymous)]

// :d
n1w 0
//│ res: {x: 0}
//│    = { x: 0 }

n1 wrap 0
//│ res: {x: 0}
//│    = { x: 0 }

res.x + 1
//│ res: int
//│    = 1

n2 wrap 0
//│ res: {x: {x: 0}}
//│    = { x: { x: 0 } }

res.x.x + 1
//│ res: int
//│    = 1

n3 wrap 0
//│ res: {x: {x: {x: 0}}}
//│    = { x: { x: { x: 0 } } }

res.x.x.x + 1
//│ res: int
//│    = 1


// * With distributivity, it works!:
:DistributeForalls

succ = s
//│ ('a -> 'b -> 'c & 'd) -> (forall 'a, 'c, 'd, 'e, 'f, 'g, 'h, 'i. ((('g | 'h | 'c) -> 'i & 'a & 'e) -> (forall 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l. (('b & 'f & 'j) -> ('l | 'i)
//│   where
//│     'd <: 'e -> 'j -> ('h & 'k)
//│     'e <: ('k | 'g | 'c) -> 'l))
//│   where
//│     'd <: 'e -> 'f -> 'g))
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = [Function: s]


type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ Defined type alias ChurchInt

:stats
z: ChurchInt
//│ res: ChurchInt
//│    = [Function: z]
//│ constrain calls  : 15
//│ annoying  calls  : 0
//│ subtyping calls  : 0

:stats
s: ChurchInt -> ChurchInt
//│ res: ChurchInt -> ChurchInt
//│    = [Function: s]
//│ constrain calls  : 151
//│ annoying  calls  : 0
//│ subtyping calls  : 0





