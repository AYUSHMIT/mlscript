
:GeneralizeCurriedFunctions

// def foo f x = f x


// def s n = fun f -> fun x -> f (n f x)



def z f x = x
//│ z: anything -> (forall 'a. 'a -> 'a)
//│  = [Function: z]

def s n f x = f (n f x)
//│ s: (nothing -> nothing -> 'a & 'a) -> (forall 'a, 'b. ((nothing -> 'a & 'b) -> (forall 'a, 'b, 'c. ('c -> (forall 'a, 'b, 'c, 'd, 'e. ('e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e))
//│   where
//│     'a <: nothing -> nothing -> 'a
//│     'b <: nothing -> 'a
//│     'a <: nothing -> nothing -> 'a
//│     'b <: nothing -> 'a))
//│   where
//│     'a <: nothing -> nothing -> 'a
//│     'a <: nothing -> nothing -> 'a))
//│  = [Function: s]


def succ: (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (forall 'M. ('M -> 'M) -> ('M -> 'M))
//│ succ: (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = <missing implementation>


// * This one requires distributing the RHS forall to rigidify it earlier:

// * Failure comes from:
// | | | C ‹∀ 1. (α27'' -> ‹∀ 2. (α28''' -> ‹∀ 3. {(α29'''' -> α32'''') where: α27'' <: ((α28''',) -> α30''''), α28''' <: ((α31'''',) -> α32'''')}›)›)› <! (‹∀ 1. (('N95'' -> 'N95'') -> ('N95'' -> 'N95''))› -> ‹∀ 1. (('M96'' -> 'M96'') -> ('M96'' -> 'M96''))›)  PolymorphicType  FunctionType
// :d
// :e // works with quantif extrus
// :e // due to tapping
succ = s
//│ (nothing -> nothing -> 'a & 'a) -> (forall 'a, 'b. ((nothing -> 'a & 'b) -> (forall 'a, 'b, 'c. ('c -> (forall 'a, 'b, 'c, 'd, 'e. ('e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e))
//│   where
//│     'a <: nothing -> nothing -> 'a
//│     'b <: nothing -> 'a
//│     'a <: nothing -> nothing -> 'a
//│     'b <: nothing -> 'a))
//│   where
//│     'a <: nothing -> nothing -> 'a
//│     'a <: nothing -> nothing -> 'a))
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = [Function: s]


// * Manually distributing fixes the error:

def succ0: forall 'M. (forall 'N. ('N -> 'N) -> ('N -> 'N)) -> (('M -> 'M) -> ('M -> 'M))
//│ succ0: (forall 'N. ('N -> 'N) -> 'N -> 'N) -> ('M -> 'M) -> 'M -> 'M
//│      = <missing implementation>

succ0 = s
//│ (nothing -> nothing -> 'a & 'a) -> (forall 'a, 'b. ((nothing -> 'a & 'b) -> (forall 'a, 'b, 'c. ('c -> (forall 'a, 'b, 'c, 'd, 'e. ('e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e))
//│   where
//│     'a <: nothing -> nothing -> 'a
//│     'b <: nothing -> 'a
//│     'a <: nothing -> nothing -> 'a
//│     'b <: nothing -> 'a))
//│   where
//│     'a <: nothing -> nothing -> 'a
//│     'a <: nothing -> nothing -> 'a))
//│   <:  succ0:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> ('M -> 'M) -> 'M -> 'M
//│      = [Function: s]



// * This does not help; we still need distrib. It works in MLF – do they have distrib?!
// :e // works with quantif extrus
// :e // due to tapping
def succ (n: (forall 'N. ('N -> 'N) -> ('N -> 'N))) = fun f -> fun x -> f (n f x)
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'a, 'b. ((nothing -> anything & 'b) -> (forall 'a, 'b, 'c. ('c -> (forall 'a, 'b, 'c, 'd, 'e. ('e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e))
//│   where
//│     'a <: nothing -> nothing -> anything
//│     'b <: nothing -> anything
//│     'a <: nothing -> nothing -> anything
//│     'b <: nothing -> anything))
//│   where
//│     'a <: nothing -> nothing -> anything
//│     'a <: nothing -> nothing -> anything))
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = [Function: succ2]



// :d
n1 = s z
//│ n1: (nothing -> anything & 'a) -> (forall 'b, 'a, 'c. ('c -> (forall 'b, 'a, 'c, 'd, 'e. ('e
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e))
//│   where
//│     'b <: nothing -> nothing -> anything
//│     'a <: nothing -> anything
//│     'b <: nothing -> nothing -> anything
//│     'a <: nothing -> anything))
//│   where
//│     'b <: nothing -> nothing -> anything
//│     'b <: nothing -> nothing -> anything
//│   = [Function (anonymous)]

n2 = s (s z)
//│ n2: (nothing -> anything & 'a) -> (forall 'b, 'a, 'c. ('c -> (forall 'b, 'a, 'c, 'd, 'e. ('e
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e))
//│   where
//│     'b <: nothing -> nothing -> anything
//│     'a <: nothing -> anything
//│     'b <: nothing -> nothing -> anything
//│     'a <: nothing -> anything))
//│   where
//│     'b <: nothing -> nothing -> anything
//│     'b <: nothing -> nothing -> anything
//│   = [Function (anonymous)]

n3 = s (s (s z))
//│ n3: (nothing -> anything & 'a) -> (forall 'b, 'a, 'c. ('c -> (forall 'b, 'a, 'c, 'd, 'e. ('e
//│   where
//│     'b <: 'a -> 'c -> 'd
//│     'a <: 'd -> 'e))
//│   where
//│     'b <: nothing -> nothing -> anything
//│     'a <: nothing -> anything
//│     'b <: nothing -> nothing -> anything
//│     'a <: nothing -> anything))
//│   where
//│     'b <: nothing -> nothing -> anything
//│     'b <: nothing -> nothing -> anything
//│   = [Function (anonymous)]

// def wrap: 'WRA -> 'WRA
// def wrap: int -> {x:int}

// def wrap: 'a -> {x: 'a}
wrap x = { x }
//│ wrap: 'a -> {x: 'a}
//│     = [Function: wrap]

// :d
n1w = n1 wrap
//│ n1w: 'a -> (forall 'b, 'c, 'a, 'd, 'e. ('e
//│   where
//│     'b <: 'c -> 'a -> 'd
//│     'c <: 'd -> 'e))
//│   where
//│     'b <: 'c -> 'c -> anything
//│     'c <: 'c -> anything
//│     'b <: 'c -> 'c -> anything
//│     'c <: 'c -> anything
//│    = [Function (anonymous)]

// :d
n1w 0
//│ res: 'a
//│   where
//│     'b <: 'c -> 0 -> 'd
//│     'c <: 'd -> 'a
//│    = { x: 0 }

n1 wrap 0
//│ res: 'a
//│   where
//│     'b <: 'c -> 0 -> 'd
//│     'c <: 'd -> 'a
//│    = { x: 0 }

res.x + 1
//│ res: int
//│    = 1

n2 wrap 0
//│ res: 'a
//│   where
//│     'b <: 'c -> 0 -> 'd
//│     'c <: 'd -> 'a
//│    = { x: { x: 0 } }

res.x.x + 1
//│ res: int
//│    = 1

n3 wrap 0
//│ res: 'a
//│   where
//│     'b <: 'c -> 0 -> 'd
//│     'c <: 'd -> 'a
//│    = { x: { x: { x: 0 } } }

res.x.x.x + 1
//│ res: int
//│    = 1


// * With distributivity, it works!:
:DistributeForalls

succ = s
//│ (nothing -> nothing -> 'a & 'a) -> (forall 'a, 'b. ((nothing -> 'a & 'b) -> (forall 'a, 'b, 'c. ('c -> (forall 'a, 'b, 'c, 'd, 'e. ('e
//│   where
//│     'a <: 'b -> 'c -> 'd
//│     'b <: 'd -> 'e))
//│   where
//│     'a <: nothing -> nothing -> 'a
//│     'b <: nothing -> 'a
//│     'a <: nothing -> nothing -> 'a
//│     'b <: nothing -> 'a))
//│   where
//│     'a <: nothing -> nothing -> 'a
//│     'a <: nothing -> nothing -> 'a))
//│   <:  succ:
//│ (forall 'N. ('N -> 'N) -> 'N -> 'N) -> (forall 'M. ('M -> 'M) -> 'M -> 'M)
//│     = [Function: s]


type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ Defined type alias ChurchInt

:stats
z: ChurchInt
//│ res: ChurchInt
//│    = [Function: z]
//│ constrain calls  : 15
//│ annoying  calls  : 0
//│ subtyping calls  : 0

:stats
s: ChurchInt -> ChurchInt
//│ res: ChurchInt -> ChurchInt
//│    = [Function: s]
//│ constrain calls  : 625
//│ annoying  calls  : 0
//│ subtyping calls  : 0





