
:GeneralizeCurriedFunctions
// :DistributeForalls

// def s n = fun f -> fun x -> f (n f x)
// def s n = fun f -> f (n f)
// def s n = fun f -> fun x -> (n f x)
// def s n = fun f -> fun x -> (n f x)
def s n = fun f -> n f
//│ s: (nothing -> 'a & 'a) -> (forall 'b. ('b -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'a <: 'b -> 'c))
//│   where
//│     'a <: 'b -> 'a))
//│  = [Function: s]

:ns
s
//│ res: forall 'a, 'b, 'c. 'a -> (forall 'd, 'e. (forall 'd. 'd -> (forall 'f. ('f
//│   where
//│     'a <: 'd -> 'f))
//│   where
//│     'a <: 'd -> 'e))
//│   where
//│     'a <: 'b -> 'c
//│    = [Function: s]

type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ Defined type alias ChurchInt

def zero: ChurchInt
//│ zero: ChurchInt
//│     = <missing implementation>

def to_church: int -> ChurchInt
//│ to_church: int -> ChurchInt
//│          = <missing implementation>

// :d
// rec def to_ch n =
//   if n == 0 then zero
//   else s (to_ch (n - 1))
// rec def to_ch n =
//   s (to_ch (n - 1))
rec def to_ch n =
  s (to_ch n)
// rec def to_ch n =
//   to_ch n
//│ to_ch: anything -> (forall 'a. 'a -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'b <: 'a -> 'c)))
//│      = [Function: to_ch]

:ns
to_ch
//│ res: forall 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h. forall 'to_ch, 'i, 'a, 'j, 'b, 'c, 'd, 'e, 'f, 'g, 'h. 'to_ch
//│   where
//│     'to_ch :> 'i -> 'j
//│            <: 'i -> 'a
//│     'j :> forall 'k. 'k -> ('l
//│   where
//│     'b <: 'k -> 'l)
//│        <: 'a
//│     'a :> forall 'k. 'k -> ('l
//│   where
//│     'b <: 'k -> 'l)
//│        <: 'b
//│     'b :> forall 'k. 'k -> ('l
//│   where
//│     'b <: 'k -> 'l)
//│        <: 'e -> 'f & 'c -> 'd
//│     'd :> 'm
//│   where
//│     'b <: 'h -> 'm
//│     'c <: 'h
//│     'h <: 'e
//│     'f :> 'n
//│   where
//│     'b <: 'g -> 'n
//│     'k <: 'e
//│     'e <: 'g
//│     'g <: 'e
//│    = [Function: to_ch]

:re
to_ch 1 2
//│ res: 'a
//│   where
//│     'b <: 2 -> 'a
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

// * NOTE the crash was due to the use of `s` rather than an annotated `succ`:
// :d
:e // fails with quantif extrus
to_church = to_ch
//│ anything -> (forall 'a. 'a -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'b <: 'a -> 'c)))
//│   <:  to_church:
//│ int -> ChurchInt
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?to_ch, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q. ?to_ch <: int -> ChurchInt` exceeded recursion depth limit (300)
//│ ║  l.96: 	to_church = to_ch
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  α398'  <!<  α22_400^35
//│ ╟── while constraining:  (α398',)  <!<  (α22_400^35,)
//│ ╟── while constraining:  (α22_400^35 -> ‹∀ 4. {α23_401''''' where: α21_120' <: ((α22_400^35,) -> α23_401''''')}›)  <!<  ((α398',) -> α399')
//│ ╟── while constraining:  ‹∀ 3. (α22_117'''' -> ‹∀ 4. {α23_121''''' where: α21_120' <: ((α22_117'''',) -> α23_121''''')}›)›  <!<  ((α398',) -> α399')
//│ ╟── while constraining:  ‹∀ 2. ‹∀ 3. (α22_117'''' -> ‹∀ 4. {α23_121''''' where: α21_120' <: ((α22_117'''',) -> α23_121''''')}›)››  <!<  ((α398',) -> α399')
//│ ╟── while constraining:  α21_120'  <!<  ((α398',) -> α399')
//│ ╟── while constraining:  α21_120'  <!<  ((α22_396^35,) -> α23_397^35)
//│ ╟── while constraining:  {α23_397^35 where: α21_120' <: ((α22_396^35,) -> α23_397^35)}  <!<  (‘N^35 -> ‘N^35)
//│ ╟── while constraining:  ‹∀ 4. {α23_393''''' where: α21_120' <: ((α22_392^34,) -> α23_393''''')}›  <!<  (‘N^35 -> ‘N^35)
//│ ╟── while constraining:  ‹∀ 4. {α23_393''''' where: α21_120' <: ((α22_392^34,) -> α23_393''''')}›  <!<  ‹∀ 1. ('N394'' -> 'N395'')›
//│ ╟── while constraining:  α391'  <!<  ‹∀ 1. ('N394'' -> 'N395'')›
//│ ╟── while constraining:  α391'  <!<  (‘N^34 -> ‘N^34)
//│ ╟── while constraining:  α23_389^34  <!<  (‘N^34 -> ‘N^34)
//│ ╟── while constraining:  {α23_389^34 where: α21_120' <: ((α22_388^34,) -> α23_389^34)}  <!<  (‘N^34 -> ‘N^34)
//│ ╟── while constraining:  ‹∀ 4. {α23_385''''' where: α21_120' <: ((α22_384^33,) -> α23_385''''')}›  <!<  (‘N^34 -> ‘N^34)
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  α136'  <!<  (‘N'' -> ‘N'')
//│ ╟── while constraining:  α23_132''  <!<  (‘N'' -> ‘N'')
//│ ╟── while constraining:  {α23_132'' where: α21_120' <: ((α22_129'',) -> α23_132'')}  <!<  (‘N'' -> ‘N'')
//│ ╟── while constraining:  ‹∀ 4. {α23_130''''' where: α21_120' <: ((α22_129'',) -> α23_130''''')}›  <!<  (‘N'' -> ‘N'')
//│ ╟── while constraining:  (α22_129'' -> ‹∀ 4. {α23_130''''' where: α21_120' <: ((α22_129'',) -> α23_130''''')}›)  <!<  ((‘N'' -> ‘N'') -> (‘N'' -> ‘N''))
//│ ╟── while constraining:  ‹∀ 3. (α22_117'''' -> ‹∀ 4. {α23_121''''' where: α21_120' <: ((α22_117'''',) -> α23_121''''')}›)›  <!<  ((‘N'' -> ‘N'') -> (‘N'' -> ‘N''))
//│ ╟── while constraining:  ‹∀ 2. ‹∀ 3. (α22_117'''' -> ‹∀ 4. {α23_121''''' where: α21_120' <: ((α22_117'''',) -> α23_121''''')}›)››  <!<  ((‘N'' -> ‘N'') -> (‘N'' -> ‘N''))
//│ ╟── while constraining:  ‹∀ 2. ‹∀ 3. (α22_117'''' -> ‹∀ 4. {α23_121''''' where: α21_120' <: ((α22_117'''',) -> α23_121''''')}›)››  <!<  ‹∀ 0. (('N39' -> 'N39') -> ('N39' -> 'N39'))›
//│ ╟── while constraining:  ‹∀ 2. ‹∀ 3. (α22_117'''' -> ‹∀ 4. {α23_121''''' where: α21_120' <: ((α22_117'''',) -> α23_121''''')}›)››  <!<  ChurchInt
//│ ╟── while constraining:  α44_116'  <!<  ChurchInt
//│ ╟── while constraining:  (α42_115' -> α44_116')  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  to_ch41_114'  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 0. to_ch41'›  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_ch41'››  <!<  (Int -> ChurchInt)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. to_ch41'››  <!<  ‹∀ 0. (Int -> ChurchInt)›
//│          = [Function: to_ch]


