
:GeneralizeCurriedFunctions
// :DistributeForalls

// def s n = fun f -> fun x -> f (n f x)
// def s n = fun f -> f (n f)
// def s n = fun f -> fun x -> (n f x)
// def s n = fun f -> fun x -> (n f x)
def s n = fun f -> n f
//│ s: 'a -> (forall 'b. 'b -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'a <: 'b -> 'c)))
//│  = [Function: s]

:ns
s
//│ res: forall 'a. 'a -> (forall 'b. 'b -> (forall 'c. ('c
//│   where
//│     'a <: 'b -> 'c)))
//│    = [Function: s]

type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ Defined type alias ChurchInt

def zero: ChurchInt
//│ zero: ChurchInt
//│     = <missing implementation>

def to_church: int -> ChurchInt
//│ to_church: int -> ChurchInt
//│          = <missing implementation>

// :d
// rec def to_ch n =
//   if n == 0 then zero
//   else s (to_ch (n - 1))
// rec def to_ch n =
//   s (to_ch (n - 1))
rec def to_ch n =
  s (to_ch n)
// rec def to_ch n =
//   to_ch n
//│ to_ch: anything -> anything -> nothing
//│      = [Function: to_ch]

:ns
to_ch
//│ res: forall 'a, 'b, 'c, 'd, 'e. forall 'to_ch, 'f, 'a, 'g, 'b, 'c, 'd, 'e. 'to_ch
//│   where
//│     'to_ch :> 'f -> 'g
//│            <: 'f -> 'a
//│     'g :> forall 'h. 'h -> (forall 'i. 'i)
//│        <: 'a
//│     'a :> forall 'h. 'h -> (forall 'i. 'i)
//│        <: 'b
//│     'b :> forall 'h. 'h -> (forall 'i. 'i)
//│        <: 'c -> 'd
//│     'i :> 'd
//│     'd :> forall 'i. 'i
//│     'h <: 'c
//│     'c <: 'e
//│     'e <: 'c
//│    = [Function: to_ch]

:re
to_ch 1 2
//│ res: nothing
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

// * NOTE the crash was due to the use of `s` rather than an annotated `succ`:
// :d
:e // fails with quantif extrus
to_church = to_ch
//│ anything -> anything -> nothing
//│   <:  to_church:
//│ int -> ChurchInt
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?to_ch, ?b, ?c, ?d, ?e, ?f, ?g. ?to_ch <: int -> ChurchInt` exceeded recursion depth limit (300)
//│ ║  l.74: 	to_church = to_ch
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 4. α23_88'''''›  <!<  ‹∀ 1. ('N214'' -> 'N215'')›
//│ ╟── while constraining:  α43_89'  <!<  ‹∀ 1. ('N214'' -> 'N215'')›
//│ ╟── while constraining:  α43_89'  <!<  (‘N^42 -> ‘N^42)
//│ ╟── while constraining:  α23_213^42  <!<  (‘N^42 -> ‘N^42)
//│ ╟── while constraining:  ‹∀ 4. α23_88'''''›  <!<  (‘N^42 -> ‘N^42)
//│ ╟── while constraining:  ‹∀ 4. α23_88'''''›  <!<  ‹∀ 1. ('N211'' -> 'N212'')›
//│ ╟── while constraining:  α43_89'  <!<  ‹∀ 1. ('N211'' -> 'N212'')›
//│ ╟── while constraining:  α43_89'  <!<  (‘N^41 -> ‘N^41)
//│ ╟── while constraining:  α23_210^41  <!<  (‘N^41 -> ‘N^41)
//│ ╟── while constraining:  ‹∀ 4. α23_88'''''›  <!<  (‘N^41 -> ‘N^41)
//│ ╟── while constraining:  ‹∀ 4. α23_88'''''›  <!<  ‹∀ 1. ('N208'' -> 'N209'')›
//│ ╟── while constraining:  α43_89'  <!<  ‹∀ 1. ('N208'' -> 'N209'')›
//│ ╟── while constraining:  α43_89'  <!<  (‘N^40 -> ‘N^40)
//│ ╟── while constraining:  α23_207^40  <!<  (‘N^40 -> ‘N^40)
//│ ╟── while constraining:  ‹∀ 4. α23_88'''''›  <!<  (‘N^40 -> ‘N^40)
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 4. α23_88'''''›  <!<  ‹∀ 1. ('N94'' -> 'N95'')›
//│ ╟── while constraining:  α43_89'  <!<  ‹∀ 1. ('N94'' -> 'N95'')›
//│ ╟── while constraining:  α43_89'  <!<  (‘N'' -> ‘N'')
//│ ╟── while constraining:  α23_93''  <!<  (‘N'' -> ‘N'')
//│ ╟── while constraining:  ‹∀ 4. α23_88'''''›  <!<  (‘N'' -> ‘N'')
//│ ╟── while constraining:  (α22_92'' -> ‹∀ 4. α23_88'''''›)  <!<  ((‘N'' -> ‘N'') -> (‘N'' -> ‘N''))
//│ ╟── while constraining:  ‹∀ 3. (α22_85'''' -> ‹∀ 4. α23_88'''''›)›  <!<  ((‘N'' -> ‘N'') -> (‘N'' -> ‘N''))
//│ ╟── while constraining:  ‹∀ 3. (α22_85'''' -> ‹∀ 4. α23_88'''''›)›  <!<  ‹∀ 0. (('N33' -> 'N33') -> ('N33' -> 'N33'))›
//│ ╟── while constraining:  ‹∀ 3. (α22_85'''' -> ‹∀ 4. α23_88'''''›)›  <!<  ChurchInt
//│ ╟── while constraining:  α38_84'  <!<  ChurchInt
//│ ╟── while constraining:  (α36_83' -> α38_84')  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  to_ch35_82'  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 0. to_ch35'›  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_ch35'››  <!<  (Int -> ChurchInt)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. to_ch35'››  <!<  ‹∀ 0. (Int -> ChurchInt)›
//│          = [Function: to_ch]


