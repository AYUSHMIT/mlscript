
:GeneralizeCurriedFunctions
// :DistributeForalls

// def s n = fun f -> fun x -> f (n f x)
// def s n = fun f -> f (n f)
// def s n = fun f -> fun x -> (n f x)
// def s n = fun f -> fun x -> (n f x)
def s n = fun f -> n f
//│ s: (nothing -> 'a & 'a) -> (forall 'a, 'b. ('b -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'a <: 'b -> 'c))
//│   where
//│     'a <: nothing -> 'a
//│     'a <: nothing -> 'a))
//│  = [Function: s]

:ns
s
//│ res: forall 'a, 'b, 'c. 'a -> (forall 'd, 'e. (forall 'f, 'g, 'h. ('f -> (forall 'i. ('i
//│   where
//│     'a <: 'f -> 'i))
//│   where
//│     'a <: 'g -> 'h)
//│   where
//│     'a <: 'd -> 'e))
//│   where
//│     'a <: 'b -> 'c
//│    = [Function: s]

type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ Defined type alias ChurchInt

def zero: ChurchInt
//│ zero: ChurchInt
//│     = <missing implementation>

def to_church: int -> ChurchInt
//│ to_church: int -> ChurchInt
//│          = <missing implementation>

// :d
// rec def to_ch n =
//   if n == 0 then zero
//   else s (to_ch (n - 1))
// rec def to_ch n =
//   s (to_ch (n - 1))
rec def to_ch n =
  s (to_ch n)
// rec def to_ch n =
//   to_ch n
//│ /!!!\ Uncaught error: java.lang.StackOverflowError

:ns
to_ch
//│ res: forall 'to_ch, 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n, 'o, 'p, 'q, 'r, 's, 't, 'u, 'v, 'w, 'x, 'y, 'z, 'a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'g1, 'h1, 'i1, 'j1, 'k1, 'l1, 'm1, 'n1, 'o1, 'p1, 'q1, 'r1, 's1, 't1, 'u1, 'v1, 'w1, 'x1, 'y1, 'z1, 'a2, 'b2, 'c2, 'd2, 'e2, 'f2, 'g2, 'h2, 'i2, 'j2, 'k2, 'l2, 'm2, 'n2, 'o2, 'p2, 'q2, 'r2, 's2, 't2, 'u2, 'v2, 'w2, 'x2, 'y2, 'z2, 'a3, 'b3, 'c3, 'd3, 'e3, 'f3, 'g3, 'h3, 'i3, 'j3, 'k3, 'l3, 'm3, 'n3, 'o3, 'p3, 'q3, 'r3, 's3, 't3, 'u3, 'v3, 'w3, 'x3, 'y3, 'z3, 'a4, 'b4, 'c4, 'd4, 'e4, 'f4, 'g4, 'h4, 'i4, 'j4, 'k4, 'l4, 'm4, 'n4, 'o4, 'p4, 'q4, 'r4, 's4, 't4, 'u4, 'v4, 'w4, 'x4, 'y4, 'z4, 'a5, 'b5, 'c5, 'd5, 'e5, 'f5, 'g5, 'h5, 'i5, 'j5, 'k5, 'l5, 'm5, 'n5, 'o5, 'p5, 'q5, 'r5, 's5, 't5, 'u5, 'v5, 'w5, 'x5, 'y5, 'z5, 'a6, 'b6, 'c6, 'd6, 'e6, 'f6, 'g6, 'h6, 'i6, 'j6, 'k6, 'l6, 'm6, 'n6, 'o6, 'p6, 'q6, 'r6, 's6, 't6, 'u6, 'v6, 'w6, 'x6, 'y6, 'z6, 'a7, 'b7, 'c7, 'd7, 'e7, 'f7, 'g7, 'h7, 'i7, 'j7, 'k7, 'l7, 'm7, 'n7, 'o7, 'p7, 'q7, 'r7, 's7, 't7, 'u7, 'v7, 'w7, 'x7, 'y7, 'z7, 'a8, 'b8, 'c8, 'd8, 'e8, 'f8, 'g8, 'h8, 'i8, 'j8, 'k8, 'l8. 'to_ch
//│   where
//│     'to_ch :> 'a -> 'c
//│            <: 'a -> 'b
//│     'c :> 'm8 -> ('n8
//│   where
//│     'd <: 'm8 -> 'n8)
//│   where
//│     'd <: 'o8 -> 'p8
//│        <: 'b
//│     'b :> 'm8 -> ('n8
//│   where
//│     'd <: 'm8 -> 'n8)
//│   where
//│     'd <: 'o8 -> 'p8
//│        <: 'd
//│     'd :> 'm8 -> ('n8
//│   where
//│     'd <: 'm8 -> 'n8)
//│   where
//│     'd <: 'o8 -> 'p8
//│        <: 'k8 -> 'l8 & 'i8 -> 'j8 & 'g8 -> 'h8 & 'e8 -> 'f8 & 'c8 -> 'd8 & 'a8 -> 'b8 & 'y7 -> 'z7 & 'w7 -> 'x7 & 'u7 -> 'v7 & 's7 -> 't7 & 'q7 -> 'r7 & 'o7 -> 'p7 & 'm7 -> 'n7 & 'k7 -> 'l7 & 'i7 -> 'j7 & 'g7 -> 'h7 & 'e7 -> 'f7 & 'c7 -> 'd7 & 'a7 -> 'b7 & 'y6 -> 'z6 & 'w6 -> 'x6 & 'u6 -> 'v6 & 's6 -> 't6 & 'q6 -> 'r6 & 'o6 -> 'p6 & 'm6 -> 'n6 & 'k6 -> 'l6 & 'i6 -> 'j6 & 'g6 -> 'h6 & 'e6 -> 'f6 & 'c6 -> 'd6 & 'a6 -> 'b6 & 'y5 -> 'z5 & 'w5 -> 'x5 & 'u5 -> 'v5 & 's5 -> 't5 & 'q5 -> 'r5 & 'o5 -> 'p5 & 'm5 -> 'n5 & 'k5 -> 'l5 & 'i5 -> 'j5 & 'g5 -> 'h5 & 'e5 -> 'f5 & 'c5 -> 'd5 & 'a5 -> 'b5 & 'y4 -> 'z4 & 'w4 -> 'x4 & 'u4 -> 'v4 & 's4 -> 't4 & 'q4 -> 'r4 & 'o4 -> 'p4 & 'm4 -> 'n4 & 'k4 -> 'l4 & 'i4 -> 'j4 & 'g4 -> 'h4 & 'e4 -> 'f4 & 'c4 -> 'd4 & 'a4 -> 'b4 & 'y3 -> 'z3 & 'w3 -> 'x3 & 'u3 -> 'v3 & 's3 -> 't3 & 'q3 -> 'r3 & 'o3 -> 'p3 & 'm3 -> 'n3 & 'k3 -> 'l3 & 'i3 -> 'j3 & 'g3 -> 'h3 & 'e3 -> 'f3 & 'c3 -> 'd3 & 'a3 -> 'b3 & 'y2 -> 'z2 & 'w2 -> 'x2 & 'u2 -> 'v2 & 's2 -> 't2 & 'q2 -> 'r2 & 'o2 -> 'p2 & 'm2 -> 'n2 & 'k2 -> 'l2 & 'i2 -> 'j2 & 'g2 -> 'h2 & 'e2 -> 'f2 & 'c2 -> 'd2 & 'a2 -> 'b2 & 'y1 -> 'z1 & 'w1 -> 'x1 & 'u1 -> 'v1 & 's1 -> 't1 & 'q1 -> 'r1 & 'o1 -> 'p1 & 'm1 -> 'n1 & 'k1 -> 'l1 & 'i1 -> 'j1 & 'g1 -> 'h1 & 'e1 -> 'f1 & 'c1 -> 'd1 & 'a1 -> 'b1 & 'y -> 'z & 'w -> 'x & 'u -> 'v & 's -> 't & 'q -> 'r & 'o -> 'p & 'm -> 'n & 'k -> 'l & 'i -> 'j & 'g -> 'h & 'e -> 'f
//│    = [Function: to_ch]

:re
to_ch 1 2
//│ /!!!\ Uncaught error: java.lang.StackOverflowError

// * NOTE the crash was due to the use of `s` rather than an annotated `succ`:
// :d
// :e // fails with quantif extrus
:e // fails with gen lam bodies
to_church = to_ch
//│ anything -> (forall 'a, 'b. ('b -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'a <: 'b -> 'c))
//│   where
//│     'a <: nothing -> anything))
//│   <:  to_church:
//│ int -> ChurchInt
//│ /!!!\ Uncaught error: java.lang.StackOverflowError


