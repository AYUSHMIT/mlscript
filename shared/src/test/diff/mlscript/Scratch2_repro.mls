
:GeneralizeCurriedFunctions
// :DistributeForalls

// def s n = fun f -> fun x -> f (n f x)
// def s n = fun f -> f (n f)
// def s n = fun f -> fun x -> (n f x)
// def s n = fun f -> fun x -> (n f x)
def s n = fun f -> n f
//│ s: (nothing -> 'a & 'a) -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c))
//│  = [Function: s]

:ns
s
//│ res: forall 'a, 'b, 'c, 'd, 'e. 'a -> (forall 'f, 'g. ('f -> 'g
//│   where
//│     'a <: 'f -> 'g))
//│   where
//│     'a <: 'd -> 'e & 'b -> 'c
//│    = [Function: s]

type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ Defined type alias ChurchInt

def zero: ChurchInt
//│ zero: ChurchInt
//│     = <missing implementation>

def to_church: int -> ChurchInt
//│ to_church: int -> ChurchInt
//│          = <missing implementation>

// :d
// rec def to_ch n =
//   if n == 0 then zero
//   else s (to_ch (n - 1))
// rec def to_ch n =
//   s (to_ch (n - 1))
// :e // FIXME? refreshing-extr
rec def to_ch n =
  s (to_ch n)
// rec def to_ch n =
//   to_ch n
//│ to_ch: anything -> anything -> nothing
//│      = [Function: to_ch]

:ns
to_ch
//│ res: forall 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n. forall 'to_ch, 'o, 'a, 'p, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l, 'm, 'n. 'to_ch
//│   where
//│     'to_ch :> 'o -> 'p
//│            <: 'o -> 'a
//│     'p :> forall 'q, 'r. 'q -> 'r
//│        <: 'a
//│     'a :> forall 'q, 'r. 'q -> 'r
//│        <: 'b
//│     'b :> forall 'q, 'r. 'q -> 'r
//│        <: 'i -> 'j & 'g -> 'h & 'c -> 'd & 'e -> 'f
//│     'e <: 'n
//│     'n <: 'i
//│     'c <: 'm
//│     'm <: 'i
//│     'g <: 'l
//│     'l <: 'i
//│     'r :> 'j
//│     'j <: 'f & 'd & 'h
//│     'q <: 'i
//│     'i <: 'k
//│     'k <: 'i
//│    = [Function: to_ch]

// :d
// :s
// :e // FIXME? refreshing-extr
:re
to_ch 1 2
//│ res: nothing
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

// * NOTE the crash was due to the use of `s` rather than an annotated `succ`:
// :d
// :e // fails with quantif extrus
// :e // fails with gen lam bodies
to_church = to_ch
//│ anything -> anything -> nothing
//│   <:  to_church:
//│ int -> ChurchInt
//│          = [Function: to_ch]


