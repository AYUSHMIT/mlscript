
:GeneralizeCurriedFunctions

// def s n = fun f -> fun x -> f (n f x)
// def s n = fun f -> f (n f)
// def s n = fun f -> fun x -> (n f x)
// def s n = fun f -> fun x -> (n f x)
def s n = fun f -> n f
//│ s: 'a -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c))
//│  = [Function: s]

:ns
s
//│ res: forall 'a. 'a -> (forall 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c))
//│    = [Function: s]

type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ Defined type alias ChurchInt

def zero: ChurchInt
//│ zero: ChurchInt
//│     = <missing implementation>

def to_church: int -> ChurchInt
//│ to_church: int -> ChurchInt
//│          = <missing implementation>

// rec def to_ch n =
//   if n == 0 then zero
//   else s (to_ch (n - 1))
// rec def to_ch n =
//   s (to_ch (n - 1))
rec def to_ch n =
  s (to_ch n)
//│ to_ch: anything -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c))
//│      = [Function: to_ch]

// * NOTE this crashes due to the use of `s` rather than an annotated `succ`:
to_church = to_ch
//│ anything -> (forall 'a, 'b, 'c. ('b -> 'c
//│   where
//│     'a <: 'b -> 'c))
//│   <:  to_church:
//│ int -> ChurchInt
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?to_ch, ?d, ?e, ?f. ?to_ch <: int -> ChurchInt` exceeded recursion depth limit (400)
//│ ║  l.45: 	to_church = to_ch
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  ‹∀ 2. {(α87''' -> α88''') where: α86' <: ((α87''',) -> α88''')}›  <!<  ((α211',) -> α212')
//│ ╟── while constraining:  α85'  <!<  ((α211',) -> α212')
//│ ╟── while constraining:  α86'  <!<  ((α211',) -> α212')
//│ ╟── while constraining:  α86'  <!<  ((α209'',) -> α210'')
//│ ╟── while constraining:  {(α209'' -> α210'') where: α86' <: ((α209'',) -> α210'')}  <!<  ((α207',) -> α208')
//│ ╟── while constraining:  ‹∀ 2. {(α87''' -> α88''') where: α86' <: ((α87''',) -> α88''')}›  <!<  ((α207',) -> α208')
//│ ╟── while constraining:  α85'  <!<  ((α207',) -> α208')
//│ ╟── while constraining:  α86'  <!<  ((α207',) -> α208')
//│ ╟── while constraining:  α86'  <!<  ((α205'',) -> α206'')
//│ ╟── while constraining:  {(α205'' -> α206'') where: α86' <: ((α205'',) -> α206'')}  <!<  ((α203',) -> α204')
//│ ╟── while constraining:  ‹∀ 2. {(α87''' -> α88''') where: α86' <: ((α87''',) -> α88''')}›  <!<  ((α203',) -> α204')
//│ ╟── while constraining:  α85'  <!<  ((α203',) -> α204')
//│ ╟── while constraining:  α86'  <!<  ((α203',) -> α204')
//│ ╟── while constraining:  α86'  <!<  ((α201'',) -> α202'')
//│ ╟── while constraining:  {(α201'' -> α202'') where: α86' <: ((α201'',) -> α202'')}  <!<  ((α199',) -> α200')
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  ‹∀ 2. {(α87''' -> α88''') where: α86' <: ((α87''',) -> α88''')}›  <!<  ((α95',) -> α96')
//│ ╟── while constraining:  α85'  <!<  ((α95',) -> α96')
//│ ╟── while constraining:  α84'  <!<  ((α95',) -> α96')
//│ ╟── while constraining:  α84'  <!<  ((α93'',) -> α94'')
//│ ╟── while constraining:  {(α93'' -> α94'') where: α84' <: ((α93'',) -> α94'')}  <!<  ((‘N'' -> ‘N'') -> (‘N'' -> ‘N''))
//│ ╟── while constraining:  ‹∀ 2. {(α89''' -> α90''') where: α84' <: ((α89''',) -> α90''')}›  <!<  ((‘N'' -> ‘N'') -> (‘N'' -> ‘N''))
//│ ╟── while constraining:  ‹∀ 2. {(α89''' -> α90''') where: α84' <: ((α89''',) -> α90''')}›  <!<  ‹∀ 0. (('N33' -> 'N33') -> ('N33' -> 'N33'))›
//│ ╟── while constraining:  ‹∀ 2. {(α89''' -> α90''') where: α84' <: ((α89''',) -> α90''')}›  <!<  ChurchInt
//│ ╟── while constraining:  α92'  <!<  ChurchInt
//│ ╟── while constraining:  (α91' -> α92')  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 1. (α80'' -> α83'')›  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  to_ch79'  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 0. to_ch35'›  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_ch35'››  <!<  (Int -> ChurchInt)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. to_ch35'››  <!<  ‹∀ 0. (Int -> ChurchInt)›
//│          = [Function: to_ch]


