
:GeneralizeCurriedFunctions
// :DistributeForalls

// def s n = fun f -> fun x -> f (n f x)
// def s n = fun f -> f (n f)
// def s n = fun f -> fun x -> (n f x)
// def s n = fun f -> fun x -> (n f x)
def s n = fun f -> n f
//│ s: (nothing -> 'a & 'a) -> (forall 'a, 'b. ('b -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'a <: 'b -> 'c))
//│   where
//│     'a <: 'b -> 'a))
//│  = [Function: s]

:ns
s
//│ res: forall 'a, 'b, 'c. 'a -> (forall 'd, 'e. ('d -> (forall 'f. ('f
//│   where
//│     'a <: 'd -> 'f))
//│   where
//│     'a <: 'd -> 'e))
//│   where
//│     'a <: 'b -> 'c
//│    = [Function: s]

type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ Defined type alias ChurchInt

def zero: ChurchInt
//│ zero: ChurchInt
//│     = <missing implementation>

def to_church: int -> ChurchInt
//│ to_church: int -> ChurchInt
//│          = <missing implementation>

// :d
// rec def to_ch n =
//   if n == 0 then zero
//   else s (to_ch (n - 1))
// rec def to_ch n =
//   s (to_ch (n - 1))
rec def to_ch n =
  s (to_ch n)
// rec def to_ch n =
//   to_ch n
//│ to_ch: anything -> (forall 'a. 'a -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'b <: 'a -> 'c)))
//│      = [Function: to_ch]

:ns
to_ch
//│ res: forall 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h. forall 'to_ch, 'i, 'a, 'j, 'b, 'c, 'd, 'e, 'f, 'g, 'h. 'to_ch
//│   where
//│     'to_ch :> 'i -> 'j
//│            <: 'i -> 'a
//│     'j :> forall 'k. 'k -> ('l
//│   where
//│     'b <: 'k -> 'l)
//│        <: 'a
//│     'a :> forall 'k. 'k -> ('l
//│   where
//│     'b <: 'k -> 'l)
//│        <: 'b
//│     'b :> forall 'k. 'k -> ('l
//│   where
//│     'b <: 'k -> 'l)
//│        <: 'e -> 'f & 'c -> 'd
//│     'd :> 'm
//│   where
//│     'b <: 'h -> 'm
//│     'c <: 'h
//│     'h <: 'e
//│     'f :> 'n
//│   where
//│     'b <: 'g -> 'n
//│     'k <: 'e
//│     'e <: 'g
//│     'g <: 'e
//│    = [Function: to_ch]

:re
to_ch 1 2
//│ res: 'a
//│   where
//│     'b <: 2 -> 'a
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

// * NOTE the crash was due to the use of `s` rather than an annotated `succ`:
// :d
:e // fails with quantif extrus
to_church = to_ch
//│ anything -> (forall 'a. 'a -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'b <: 'a -> 'c)))
//│   <:  to_church:
//│ int -> ChurchInt
//│ ╔══[ERROR] Subtyping constraint of the form `forall ?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?to_ch, ?i, ?j, ?k, ?l, ?m, ?n, ?o, ?p, ?q. ?to_ch <: int -> ChurchInt` exceeded recursion depth limit (300)
//│ ║  l.96: 	to_church = to_ch
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ╟── while constraining:  α391'  <!<  α52_119'
//│ ╟── while constraining:  α399'  <!<  α52_119'
//│ ╟── while constraining:  α399'  <!<  α22_401^35
//│ ╟── while constraining:  (α399',)  <!<  (α22_401^35,)
//│ ╟── while constraining:  (α22_401^35 -> ‹∀ 4. {α23_402''''' where: α21_121' <: ((α22_401^35,) -> α23_402''''')}›)  <!<  ((α399',) -> α400')
//│ ╟── while constraining:  ‹∀ 3. (α22_118'''' -> ‹∀ 4. {α23_122''''' where: α21_121' <: ((α22_118'''',) -> α23_122''''')}›)›  <!<  ((α399',) -> α400')
//│ ╟── while constraining:  α21_121'  <!<  ((α399',) -> α400')
//│ ╟── while constraining:  α21_121'  <!<  ((α22_397^35,) -> α23_398^35)
//│ ╟── while constraining:  {α23_398^35 where: α21_121' <: ((α22_397^35,) -> α23_398^35)}  <!<  (‘N^35 -> ‘N^35)
//│ ╟── while constraining:  ‹∀ 4. {α23_394''''' where: α21_121' <: ((α22_393^34,) -> α23_394''''')}›  <!<  (‘N^35 -> ‘N^35)
//│ ╟── while constraining:  ‹∀ 4. {α23_394''''' where: α21_121' <: ((α22_393^34,) -> α23_394''''')}›  <!<  ‹∀ 1. ('N395'' -> 'N396'')›
//│ ╟── while constraining:  α392'  <!<  ‹∀ 1. ('N395'' -> 'N396'')›
//│ ╟── while constraining:  α392'  <!<  (‘N^34 -> ‘N^34)
//│ ╟── while constraining:  α23_390^34  <!<  (‘N^34 -> ‘N^34)
//│ ╟── while constraining:  {α23_390^34 where: α21_121' <: ((α22_389^34,) -> α23_390^34)}  <!<  (‘N^34 -> ‘N^34)
//│ ╟── ......
//│ ╟── ......
//│ ╟── while constraining:  α137'  <!<  ‹∀ 1. ('N143'' -> 'N144'')›
//│ ╟── while constraining:  α137'  <!<  (‘N'' -> ‘N'')
//│ ╟── while constraining:  α23_133''  <!<  (‘N'' -> ‘N'')
//│ ╟── while constraining:  {α23_133'' where: α21_121' <: ((α22_130'',) -> α23_133'')}  <!<  (‘N'' -> ‘N'')
//│ ╟── while constraining:  ‹∀ 4. {α23_131''''' where: α21_121' <: ((α22_130'',) -> α23_131''''')}›  <!<  (‘N'' -> ‘N'')
//│ ╟── while constraining:  (α22_130'' -> ‹∀ 4. {α23_131''''' where: α21_121' <: ((α22_130'',) -> α23_131''''')}›)  <!<  ((‘N'' -> ‘N'') -> (‘N'' -> ‘N''))
//│ ╟── while constraining:  ‹∀ 3. (α22_118'''' -> ‹∀ 4. {α23_122''''' where: α21_121' <: ((α22_118'''',) -> α23_122''''')}›)›  <!<  ((‘N'' -> ‘N'') -> (‘N'' -> ‘N''))
//│ ╟── while constraining:  ‹∀ 3. (α22_118'''' -> ‹∀ 4. {α23_122''''' where: α21_121' <: ((α22_118'''',) -> α23_122''''')}›)›  <!<  ‹∀ 0. (('N40' -> 'N40') -> ('N40' -> 'N40'))›
//│ ╟── while constraining:  ‹∀ 3. (α22_118'''' -> ‹∀ 4. {α23_122''''' where: α21_121' <: ((α22_118'''',) -> α23_122''''')}›)›  <!<  ChurchInt
//│ ╟── while constraining:  α45_117'  <!<  ChurchInt
//│ ╟── while constraining:  (α43_116' -> α45_117')  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  to_ch42_115'  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 0. to_ch42'›  <!<  (Int -> ChurchInt)
//│ ╟── while constraining:  ‹∀ 0. ‹∀ 0. to_ch42'››  <!<  (Int -> ChurchInt)
//│ ╙── while constraining:  ‹∀ 0. ‹∀ 0. to_ch42'››  <!<  ‹∀ 0. (Int -> ChurchInt)›
//│          = [Function: to_ch]


