
:GeneralizeCurriedFunctions
// :DistributeForalls

// def s n = fun f -> fun x -> f (n f x)
// def s n = fun f -> f (n f)
// def s n = fun f -> fun x -> (n f x)
// def s n = fun f -> fun x -> (n f x)
def s n = fun f -> n f
//│ s: (nothing -> 'a & 'a) -> (forall 'b. 'b -> (forall 'a, 'b, 'c. ('c
//│   where
//│     'a <: 'b -> 'c)))
//│  = [Function: s]

:ns
s
//│ res: forall 'a, 'b, 'c. 'a -> (forall 'd. 'd -> (forall 'e. ('e
//│   where
//│     'a <: 'd -> 'e)))
//│   where
//│     'a <: 'b -> 'c
//│    = [Function: s]

type ChurchInt = forall 'N. ('N -> 'N) -> ('N -> 'N)
//│ Defined type alias ChurchInt

def zero: ChurchInt
//│ zero: ChurchInt
//│     = <missing implementation>

def to_church: int -> ChurchInt
//│ to_church: int -> ChurchInt
//│          = <missing implementation>

// :d
// rec def to_ch n =
//   if n == 0 then zero
//   else s (to_ch (n - 1))
// rec def to_ch n =
//   s (to_ch (n - 1))
rec def to_ch n =
  s (to_ch n)
// rec def to_ch n =
//   to_ch n
//│ to_ch: anything -> anything -> nothing
//│      = [Function: to_ch]

:ns
to_ch
//│ res: forall 'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k. forall 'to_ch, 'l, 'a, 'm, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k. 'to_ch
//│   where
//│     'to_ch :> 'l -> 'm
//│            <: 'l -> 'a
//│     'm :> forall 'n. 'n -> (forall 'o. 'o)
//│        <: 'a
//│     'a :> forall 'n. 'n -> (forall 'o. 'o)
//│        <: 'b
//│     'b :> forall 'n. 'n -> (forall 'o. 'o)
//│        <: 'g -> 'h & 'e -> 'f & 'c -> 'd
//│     'd :> forall 'o. 'o
//│     'c <: 'k
//│     'f :> forall 'o. 'o
//│     'e <: 'j
//│     'h :> forall 'o. 'o
//│     'g <: 'i
//│    = [Function: to_ch]

:re
to_ch 1 2
//│ res: nothing
//│ Runtime error:
//│   RangeError: Maximum call stack size exceeded

// * NOTE the crash was due to the use of `s` rather than an annotated `succ`:
// :d
// :e // fails with quantif extrus
:e // fails with gen lam bodies
to_church = to_ch
//│ anything -> anything -> nothing
//│   <:  to_church:
//│ int -> ChurchInt
//│          = [Function: to_ch]


