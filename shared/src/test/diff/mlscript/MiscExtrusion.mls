:NoJS


class Expr[A]
  method Inv: A -> A
//│ Defined class Expr[=A]
//│ Declared Expr.Inv: Expr['A] -> 'A -> 'A

def asExpr: Expr['a] -> Expr['a]
//│ asExpr: Expr['a] -> Expr['a]

def alsoPrintSizeSimple f =
  let rec nested expr =
    f expr
  in nested
//│ alsoPrintSizeSimple: ('a -> 'b) -> 'a -> 'b

def alsoPrintSizeSimple f =
  let rec nested expr =
    f (asExpr expr)
  in nested
//│ alsoPrintSizeSimple: (Expr[in 'a out 'a | 'a0] -> 'b) -> Expr['a1] -> 'b
//│   where
//│     'a1 :> 'a
//│         <: 'a0

def alsoPrintSizeSimple f =
  let rec nested expr =
    asExpr (f (asExpr expr))
  in nested
//│ alsoPrintSizeSimple: (Expr[in 'a out 'a | 'a0] -> Expr[in 'a1 out 'a1 | 'a2]) -> Expr['a3] -> Expr['a4]
//│   where
//│     'a4 :> 'a1
//│         <: 'a2
//│     'a3 :> 'a
//│         <: 'a0

def alsoPrintSizeSimple f =
  let rec nested expr =
    f (asExpr expr) nested
  in nested
//│ alsoPrintSizeSimple: (Expr[in 'a out 'a | 'a0] -> (forall 'a1. Expr['a1] -> 'b) -> 'b) -> Expr['a2] -> 'b
//│   where
//│     'a2 :> 'a
//│         <: 'a0
//│     'a1 :> 'a
//│         <: 'a0


class Program
//│ Defined class Program

def mapExpr: (forall 'a. Expr['a] -> Expr['a]) -> Program -> Program
def print: Expr['a] -> unit
//│ mapExpr: (forall 'a. Expr['a] -> Expr['a]) -> Program -> Program
//│ print: Expr['a] -> unit

def alsoPrintSize f =
  mapExpr(fun e -> let tmp = print e in f e)
//│ alsoPrintSize: (Expr[?] -> Expr[in anything out nothing]) -> Program -> Program

:e
alsoPrintSize id
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.63: 	alsoPrintSize id
//│ ║        	^^^^^^^^^^^^^^^^
//│ ╙── expression of type `anything` does not match type `nothing`
//│ res: Program -> Program | error

def alsoPrintSize (f: forall 'a. Expr['a] -> Expr['a]) =
  mapExpr(fun e -> let tmp = print e in f e)
//│ alsoPrintSize: (forall 'a. Expr['a] -> Expr['a]) -> Program -> Program

alsoPrintSize id
//│ res: Program -> Program


class ExprCo[A]
  method Co: A
//│ Defined class ExprCo[+A]
//│ Declared ExprCo.Co: ExprCo['A] -> 'A

def mapExprCo: (forall 'a. ExprCo['a] -> ExprCo['a]) -> Program -> Program
def printCo: ExprCo['a] -> unit
//│ mapExprCo: (forall 'a. ExprCo['a] -> ExprCo['a]) -> Program -> Program
//│ printCo: ExprCo[?] -> unit

def alsoPrintSizeCo f =
  mapExprCo(fun e -> let tmp = printCo e in f e)
//│ alsoPrintSizeCo: (ExprCo[?] -> ExprCo[nothing]) -> Program -> Program

:e
alsoPrintSizeCo id
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.93: 	alsoPrintSizeCo id
//│ ║        	^^^^^^^^^^^^^^^^^^
//│ ╙── expression of type `anything` does not match type `nothing`
//│ res: Program -> Program | error

def alsoPrintSizeCo (f: forall 'a. Expr['a] -> Expr['a]) =
  mapExpr(fun e -> let tmp = print e in f e)
//│ alsoPrintSizeCo: (forall 'a. Expr['a] -> Expr['a]) -> Program -> Program

alsoPrintSizeCo id
//│ res: Program -> Program


