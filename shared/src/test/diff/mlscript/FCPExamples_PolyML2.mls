:NoJS
:GeneralizeCurriedFunctions
:NoRecursiveTypes

// ============ Sec 4.2 ============
// alternative: separate `Cons` and `Nil` types with definition of `mem` and `fold_left`

// ------------ Dummy classes to represent the types in the examples ------------

class Nil: {}
class Cons[a]: { head: a; tail: List[a] }
type List[a] = Nil | Cons[a]
//│ Defined class Nil
//│ Defined class Cons[+a]
//│ Defined type alias List[+a]

def Nil = Nil {}
//│ Nil: Nil

def Cons head tail = Cons { head; tail }
//│ Cons: 'b -> (forall 'c. (List[?] & 'c) -> (forall 'b, 'c, 'a. (Cons['a | 'b] with {head: 'b, tail: 'c}
//│   where
//│     'c <: List['a]
//│     'c <: List['a])))

// ------------ Type signatures for functions used in the examples ------------
// (I guess)

rec def mem x l = case l of
  { Nil -> false
  | Cons -> if eq l.head x then true else mem x l.tail
  }
//│ mem: anything -> 'a -> bool
//│   where
//│     'a <: (Cons[?] with {tail: 'a}) | Nil

rec def fold_left f x l = case l of
  { Nil -> x
  | Cons -> fold_left f (f x l.head) l.tail
  }
//│ fold_left: ('a -> 'head -> 'a) -> 'a -> 'b -> 'a
//│   where
//│     'b <: (Cons[?] with {head: 'head, tail: 'b}) | Nil

// ------------ polymorphic methods ------------

:RecursiveTypes // needed for these recursive defs uses

class Collection[a]: { l: List[a] }
  method Mem x = mem x this.l
  method Fold f x = fold_left f x this.l
//│ Defined class Collection[+a]
//│ Defined Collection.Mem: Collection[?] -> anything -> bool
//│ Defined Collection.Fold: Collection['a] -> (forall 'b, 'c. ('b -> 'a -> 'b) -> (forall 'd, 'e. ('d -> (forall 'a, 'c, 'd, 'f. ('d | 'f
//│   where
//│     'c <: ('d | 'f) -> 'a -> 'f
//│     'c <: ('d | 'f) -> 'a -> 'f))
//│   where
//│     'c <: ('d | 'e) -> 'a -> 'e)))

def coll_mem c x = c.Mem x
//│ coll_mem: (Collection['a] & 'a) -> (forall 'a. ('a -> (forall 'a. (bool
//│   where
//│     'a <: Collection['a]
//│     'a <: Collection['a]
//│     'a <: Collection['a]))
//│   where
//│     'a <: Collection['a]))

// typo in the paper? it was `fun x -> fun y -> ...`
def simple_and_double c =
  let l1 = c.Fold (fun y -> fun x -> Cons x y) Nil in
  let l2 = c.Fold (fun y -> fun x -> Cons ((x, x),) y) Nil in
  (l1, l2)
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.72: 	  let l1 = c.Fold (fun y -> fun x -> Cons x y) Nil in
//│ ║        	           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  α260_311''''  <:  List[a22_331'''']    TypeVariable  TypeRef
//│ ╙──  ... looks like:  α260'''''  <:  List[a22_319^8]
//│ ╔══[ERROR] Cyclic-looking constraint while typing application
//│ ║  l.73: 	  let l2 = c.Fold (fun y -> fun x -> Cons ((x, x),) y) Nil in
//│ ║        	           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ————————— Additional debugging info: —————————
//│ ╟── this constraint:  α482_533''''  <:  List[a22_553'''']    TypeVariable  TypeRef
//│ ╙──  ... looks like:  α482'''''  <:  List[a22_541^8]
//│ simple_and_double: Collection[?] -> (forall 'a, 'b. (error | Nil | 'b
//│   where
//│     'a <: (Nil | 'b) -> nothing -> 'b
//│     'a <: (Nil | 'b) -> nothing -> 'b), forall 'c, 'd. (error | Nil | 'd
//│   where
//│     'c <: (Nil | 'd) -> nothing -> 'd
//│     'c <: (Nil | 'd) -> nothing -> 'd),)
