:NoJS
:GeneralizeCurriedFunctions
:NoRecursiveTypes

// ============ Sec 4.2 ============
// alternative: separate `Cons` and `Nil` types with definition of `mem` and `fold_left`

// ------------ Dummy classes to represent the types in the examples ------------

class Nil: {}
class Cons[a]: { head: a; tail: List[a] }
type List[a] = Nil | Cons[a]
//│ Defined class Nil
//│ Defined class Cons[+a]
//│ Defined type alias List[+a]

def Nil = Nil {}
//│ Nil: Nil

def Cons head tail = Cons { head; tail }
//│ Cons: 'b -> (forall 'b, 'c, 'a, 'head, 'tail, 'd. ('d -> 'c
//│   where
//│     'c :> Cons['a] with {head: 'head, tail: 'tail}
//│     'b <: 'head & 'a
//│     'd <: List['a] & 'tail))

// ------------ Type signatures for functions used in the examples ------------
// (I guess)

rec def mem x l = case l of
  { Nil -> false
  | Cons -> if eq l.head x then true else mem x l.tail
  }
//│ mem: anything -> 'a -> bool
//│   where
//│     'a <: (Cons[?] with {tail: 'a}) | Nil

rec def fold_left f x l = case l of
  { Nil -> x
  | Cons -> fold_left f (f x l.head) l.tail
  }
//│ fold_left: ('a -> 'head -> 'a) -> 'a -> 'b -> 'a
//│   where
//│     'b <: (Cons[?] with {head: 'head, tail: 'b}) | Nil

// ------------ polymorphic methods ------------

:RecursiveTypes // needed for these recursive defs uses

class Collection[a]: { l: List[a] }
  method Mem x = mem x this.l
  method Fold f x = fold_left f x this.l
//│ Defined class Collection[+a]
//│ Defined Collection.Mem: Collection['a] -> (forall 'a, 'l, 'b, 'c, 'mem, 'd. ('d -> 'c
//│   where
//│     'l :> List['a]
//│     'b <: 'l -> 'c
//│     'mem <: 'd -> 'b))
//│ Defined Collection.Fold: Collection['a] -> (forall 'b. 'b -> (forall 'a, 'b, 'c, 'l, 'd, 'e, 'f, 'fold_left. ('f -> 'd
//│   where
//│     'c <: 'l -> 'd
//│     'l :> List['a]
//│     'e <: 'f -> 'c
//│     'fold_left <: 'b -> 'e)))

def coll_mem c x = c.Mem x
//│ coll_mem: 'b -> (forall 'b, 'a, 'c. ('d -> 'e
//│   where
//│     'b <: Collection['a]
//│     'c :> forall 'a, 'l, 'f, 'g, 'mem, 'h. ('h -> 'g
//│   where
//│     'l :> List['a]
//│     'f <: 'l -> 'g
//│     'mem <: 'h -> 'f)
//│        <: 'd -> 'e))

// typo in the paper? it was `fun x -> fun y -> ...`
def simple_and_double c =
  let l1 = c.Fold (fun y -> fun x -> Cons x y) Nil in
  let l2 = c.Fold (fun y -> fun x -> Cons ((x, x),) y) Nil in
  (l1, l2)
//│ simple_and_double: Collection[?] -> (forall 'tail. 'tail, forall 'tail. 'tail,)
//│   where
//│     'tail :> (Cons[nothing] with {tail: 'tail}) | Nil
