:NoJS

// TODO investigate why this makes many tests fail:
:GeneralizeCurriedFunctions
:NoRecursiveTypes


// ------------ Dummy classes to represent the types in the examples ------------

class List[a]
  method Get: a
//│ Defined class List[+a]
//│ Declared List.Get: List['a] -> 'a

// Used to represent `::`
def cons: 'a -> List['a] -> List['a]
//│ cons: 'a -> List['a] -> List['a]

// Used to represent `[]`
def nil: List['a]
//│ nil: List[nothing]

def concat: string -> List[string] -> string
//│ concat: string -> List[string] -> string


// ------------ Examples ------------


// (* s  starts a sequence, cps style *)
def s k = k () nil
//│ s: (() -> List[nothing] -> 'a & 'a) -> (forall 'a, 'b. ('b
//│   where
//│     'a <: () -> List[nothing] -> 'b))

def insert v () acu k = k () (cons v acu)
//│ insert: 'b -> () -> (forall 'c, 'd. (List['c] & 'd) -> (forall 'b, 'c, 'd, 'a. ((() -> List['a | 'b] -> 'c & 'c) -> (forall 'b, 'c, 'd, 'a0, 'e. ('e
//│   where
//│     'd <: List['a0]
//│     'c <: () -> List['a0 | 'b] -> 'e))
//│   where
//│     'd <: List['a])))

// (* x  inserts "x" in the acu *)
def x () = insert "x" ()
//│ x: () -> (forall 'b, 'c. (List['b] & 'c) -> (forall 'b, 'c, 'a. ((() -> List["x" | 'a] -> 'b & 'b) -> (forall 'b, 'c, 'a0, 'd. ('d
//│   where
//│     'c <: List['a0]
//│     'b <: () -> List["x" | 'a0] -> 'd))
//│   where
//│     'c <: List['a])))

// (* We call x a 'token', in the sequence. *)

// (* e  ends the sequence. It builds a token that can be inserted in another sequence or that can be printed. *)
def e () acu = insert (concat "," acu)
//│ e: () -> List[string] -> () -> (forall 'b, 'c. (List['b] & 'c) -> (forall 'b, 'c, 'a. ((() -> List['a | string] -> 'b & 'b) -> (forall 'b, 'c, 'a0, 'd. ('d
//│   where
//│     'c <: List['a0]
//│     'b <: () -> List['a0 | string] -> 'd))
//│   where
//│     'c <: List['a])))


// (* Prints a token *)
def print t = t () nil (fun () -> fun r -> log (concat "," r))
//│ print: (() -> List[nothing] -> (() -> List[string] -> unit) -> 'a & 'a) -> (forall 'a, 'b. ('b
//│   where
//│     'a <: () -> List[nothing] -> (() -> List[string] -> unit) -> 'b))

// Added by me:
s x x (s x x e)
//│ res: 'b
//│   where
//│     'c <: List['a]
//│     'd <: () -> List["x" | 'a] -> 'b


def test8  = (s x x (s x x e) x (s x x x e) e)
//│ test8: 'b
//│   where
//│     'c <: List['a]
//│     'd <: () -> List['a | string] -> 'b

print test8
//│ res: 'a
//│   where
//│     'b <: () -> List[nothing] -> (() -> List[string] -> unit) -> 'a


def test14 = (s x x x x x x x x x x x x x x e)
//│ test14: 'b
//│   where
//│     'c <: List['a]
//│     'd <: () -> List["x" | 'a] -> 'b

def test16 = (s x x x x x x x x x x x x x x x x e)
//│ test16: 'b
//│   where
//│     'c <: List['a]
//│     'd <: () -> List["x" | 'a] -> 'b

// (* This is too much for the type-checker. *)
def test18 = (s x x x x x x x x x x x x x x x x x x e)
//│ test18: 'b
//│   where
//│     'c <: List['a]
//│     'd <: () -> List["x" | 'a] -> 'b


// (* A function that receives a token *)
def f t = (s x x t x x e)
//│ f: (() -> List["x"] -> (() -> (forall 'b, 'c. (List['b] & 'c) -> (forall 'b, 'c, 'a, 'd. ((() -> List["x" | 'a] -> 'b & 'd) -> (forall 'c, 'd, 'a0, 'e. ('e
//│   where
//│     'c <: List['a0]
//│     'd <: () -> List["x" | 'a0] -> 'e))
//│   where
//│     'c <: List['a])))) -> (() -> (forall 'b, 'c. (List['b] & 'c) -> (forall 'b, 'c, 'a, 'd. ((() -> List["x" | 'a] -> 'b & 'd) -> (forall 'c, 'd, 'a0, 'e. ('e
//│   where
//│     'c <: List['a0]
//│     'd <: () -> List["x" | 'a0] -> 'e))
//│   where
//│     'c <: List['a])))) -> (() -> List[string] -> () -> (forall 'b, 'f. (List['b] & 'f) -> (forall 'b, 'f, 'a1. ((() -> List['a1 | string] -> 'b & 'b) -> (forall 'b, 'f, 'a2, 'g. ('g
//│   where
//│     'f <: List['a2]
//│     'b <: () -> List['a2 | string] -> 'g))
//│   where
//│     'f <: List['a1])))) -> 'b & () -> List["x"] -> 'b & 'h) -> (forall 'b, 'h. ('i
//│   where
//│     'h <: () -> List["x"] -> 'b & () -> List["x"] -> (() -> (forall 'b, 'c. (List['b] & 'c) -> (forall 'b, 'c, 'a, 'd. ((() -> List["x" | 'a] -> 'b & 'd) -> (forall 'c, 'd, 'a0, 'e. ('e
//│   where
//│     'c <: List['a0]
//│     'd <: () -> List["x" | 'a0] -> 'e))
//│   where
//│     'c <: List['a])))) -> (() -> (forall 'b, 'c. (List['b] & 'c) -> (forall 'b, 'c, 'a, 'd. ((() -> List["x" | 'a] -> 'b & 'd) -> (forall 'c, 'd, 'a0, 'e. ('e
//│   where
//│     'c <: List['a0]
//│     'd <: () -> List["x" | 'a0] -> 'e))
//│   where
//│     'c <: List['a])))) -> (() -> List[string] -> () -> (forall 'b, 'f. (List['b] & 'f) -> (forall 'b, 'f, 'a1. ((() -> List['a1 | string] -> 'b & 'b) -> (forall 'b, 'f, 'a2, 'g. ('g
//│   where
//│     'f <: List['a2]
//│     'b <: () -> List['a2 | string] -> 'g))
//│   where
//│     'f <: List['a1])))) -> 'i))

// (* If the token is used twice, we must reveive two arguments *)
def g t1 t2 = (s x x t1 x (s x t2 x e) e)
//│ g: (() -> List["x"] -> (() -> (forall 'b. (List['c] & 'b) -> (forall 'c, 'b, 'a, 'd. ((() -> List["x" | 'a] -> 'c & 'd) -> (forall 'b, 'd, 'a0, 'e. ('e
//│   where
//│     'b <: List['a0]
//│     'd <: () -> List["x" | 'a0] -> 'e))
//│   where
//│     'b <: List['a])))) -> nothing -> (() -> List[string] -> () -> (forall 'f. (List['c] & 'f) -> (forall 'c, 'f, 'a1, 'g. ((() -> List['a1 | string] -> 'c & 'g) -> (forall 'f, 'g, 'a2, 'h. ('h
//│   where
//│     'f <: List['a2]
//│     'g <: () -> List['a2 | string] -> 'h))
//│   where
//│     'f <: List['a1])))) -> 'c & () -> List["x"] -> 'c & 'i) -> (forall 'c, 'i. ((() -> List["x"] -> (() -> (forall 'b. (List['c] & 'b) -> (forall 'c, 'b, 'a, 'd. ((() -> List["x" | 'a] -> 'c & 'd) -> (forall 'b, 'd, 'a0, 'e. ('e
//│   where
//│     'b <: List['a0]
//│     'd <: () -> List["x" | 'a0] -> 'e))
//│   where
//│     'b <: List['a])))) -> (() -> List[string] -> () -> (forall 'f. (List['c] & 'f) -> (forall 'c, 'f, 'a1, 'g. ((() -> List['a1 | string] -> 'c & 'g) -> (forall 'f, 'g, 'a2, 'h. ('h
//│   where
//│     'f <: List['a2]
//│     'g <: () -> List['a2 | string] -> 'h))
//│   where
//│     'f <: List['a1])))) -> 'j & () -> List["x"] -> 'c & 'c) -> (forall 'c, 'i. ('k
//│   where
//│     'i <: () -> List["x"] -> 'c & () -> List["x"] -> (() -> (forall 'b. (List['c] & 'b) -> (forall 'c, 'b, 'a, 'd. ((() -> List["x" | 'a] -> 'c & 'd) -> (forall 'b, 'd, 'a0, 'e. ('e
//│   where
//│     'b <: List['a0]
//│     'd <: () -> List["x" | 'a0] -> 'e))
//│   where
//│     'b <: List['a])))) -> 'l -> (() -> List[string] -> () -> (forall 'f. (List['c] & 'f) -> (forall 'c, 'f, 'a1, 'g. ((() -> List['a1 | string] -> 'c & 'g) -> (forall 'f, 'g, 'a2, 'h. ('h
//│   where
//│     'f <: List['a2]
//│     'g <: () -> List['a2 | string] -> 'h))
//│   where
//│     'f <: List['a1])))) -> 'k
//│     'c <: () -> List["x"] -> 'c & () -> List["x"] -> (() -> (forall 'b. (List['c] & 'b) -> (forall 'c, 'b, 'a, 'd. ((() -> List["x" | 'a] -> 'c & 'd) -> (forall 'b, 'd, 'a0, 'e. ('e
//│   where
//│     'b <: List['a0]
//│     'd <: () -> List["x" | 'a0] -> 'e))
//│   where
//│     'b <: List['a])))) -> (() -> List[string] -> () -> (forall 'f. (List['c] & 'f) -> (forall 'c, 'f, 'a1, 'g. ((() -> List['a1 | string] -> 'c & 'g) -> (forall 'f, 'g, 'a2, 'h. ('h
//│   where
//│     'f <: List['a2]
//│     'g <: () -> List['a2 | string] -> 'h))
//│   where
//│     'f <: List['a1])))) -> 'l))
//│   where
//│     'i <: () -> List["x"] -> 'c & () -> List["x"] -> (() -> (forall 'b. (List['c] & 'b) -> (forall 'c, 'b, 'a, 'd. ((() -> List["x" | 'a] -> 'c & 'd) -> (forall 'b, 'd, 'a0, 'e. ('e
//│   where
//│     'b <: List['a0]
//│     'd <: () -> List["x" | 'a0] -> 'e))
//│   where
//│     'b <: List['a])))) -> 'j -> (() -> List[string] -> () -> (forall 'f. (List['c] & 'f) -> (forall 'c, 'f, 'a1, 'g. ((() -> List['a1 | string] -> 'c & 'g) -> (forall 'f, 'g, 'a2, 'h. ('h
//│   where
//│     'f <: List['a2]
//│     'g <: () -> List['a2 | string] -> 'h))
//│   where
//│     'f <: List['a1])))) -> 'c))

// (* This does not type. It requires first-class polymorphism. *)
def h t = g t t
//│ h: (() -> List["x"] -> (() -> (forall 'b, 'c. (List['b] & 'c) -> (forall 'b, 'c, 'a, 'd. ((() -> List["x" | 'a] -> 'b & 'd) -> (forall 'c, 'd, 'a0, 'e. ('e
//│   where
//│     'c <: List['a0]
//│     'd <: () -> List["x" | 'a0] -> 'e))
//│   where
//│     'c <: List['a])))) -> nothing -> (() -> List[string] -> () -> (forall 'b, 'f. (List['b] & 'f) -> (forall 'b, 'f, 'a1. ((() -> List['a1 | string] -> 'b & 'b) -> (forall 'b, 'f, 'a2, 'g. ('g
//│   where
//│     'f <: List['a2]
//│     'b <: () -> List['a2 | string] -> 'g))
//│   where
//│     'f <: List['a1])))) -> 'b & () -> List["x"] -> 'b & () -> List["x"] -> (() -> (forall 'b, 'c. (List['b] & 'c) -> (forall 'b, 'c, 'a, 'd. ((() -> List["x" | 'a] -> 'b & 'd) -> (forall 'c, 'd, 'a0, 'e. ('e
//│   where
//│     'c <: List['a0]
//│     'd <: () -> List["x" | 'a0] -> 'e))
//│   where
//│     'c <: List['a])))) -> 'h -> (() -> List[string] -> () -> (forall 'b, 'f. (List['b] & 'f) -> (forall 'b, 'f, 'a1. ((() -> List['a1 | string] -> 'b & 'b) -> (forall 'b, 'f, 'a2, 'g. ('g
//│   where
//│     'f <: List['a2]
//│     'b <: () -> List['a2 | string] -> 'g))
//│   where
//│     'f <: List['a1])))) -> 'b & () -> List["x"] -> (() -> (forall 'b, 'c. (List['b] & 'c) -> (forall 'b, 'c, 'a, 'd. ((() -> List["x" | 'a] -> 'b & 'd) -> (forall 'c, 'd, 'a0, 'e. ('e
//│   where
//│     'c <: List['a0]
//│     'd <: () -> List["x" | 'a0] -> 'e))
//│   where
//│     'c <: List['a])))) -> (() -> List[string] -> () -> (forall 'b, 'f. (List['b] & 'f) -> (forall 'b, 'f, 'a1. ((() -> List['a1 | string] -> 'b & 'b) -> (forall 'b, 'f, 'a2, 'g. ('g
//│   where
//│     'f <: List['a2]
//│     'b <: () -> List['a2 | string] -> 'g))
//│   where
//│     'f <: List['a1])))) -> 'h & 'i) -> (forall 'b, 'i, 'j, 'k. ('l
//│   where
//│     'j <: () -> List["x"] -> 'b & () -> List["x"] -> (() -> (forall 'b, 'c. (List['b] & 'c) -> (forall 'b, 'c, 'a, 'd. ((() -> List["x" | 'a] -> 'b & 'd) -> (forall 'c, 'd, 'a0, 'e. ('e
//│   where
//│     'c <: List['a0]
//│     'd <: () -> List["x" | 'a0] -> 'e))
//│   where
//│     'c <: List['a])))) -> 'm -> (() -> List[string] -> () -> (forall 'b, 'f. (List['b] & 'f) -> (forall 'b, 'f, 'a1. ((() -> List['a1 | string] -> 'b & 'b) -> (forall 'b, 'f, 'a2, 'g. ('g
//│   where
//│     'f <: List['a2]
//│     'b <: () -> List['a2 | string] -> 'g))
//│   where
//│     'f <: List['a1])))) -> 'l
//│     'k <: () -> List["x"] -> 'b & () -> List["x"] -> (() -> (forall 'b, 'c. (List['b] & 'c) -> (forall 'b, 'c, 'a, 'd. ((() -> List["x" | 'a] -> 'b & 'd) -> (forall 'c, 'd, 'a0, 'e. ('e
//│   where
//│     'c <: List['a0]
//│     'd <: () -> List["x" | 'a0] -> 'e))
//│   where
//│     'c <: List['a])))) -> (() -> List[string] -> () -> (forall 'b, 'f. (List['b] & 'f) -> (forall 'b, 'f, 'a1. ((() -> List['a1 | string] -> 'b & 'b) -> (forall 'b, 'f, 'a2, 'g. ('g
//│   where
//│     'f <: List['a2]
//│     'b <: () -> List['a2 | string] -> 'g))
//│   where
//│     'f <: List['a1])))) -> 'm
//│     'i <: () -> List["x"] -> (() -> (forall 'b, 'c. (List['b] & 'c) -> (forall 'b, 'c, 'a, 'd. ((() -> List["x" | 'a] -> 'b & 'd) -> (forall 'c, 'd, 'a0, 'e. ('e
//│   where
//│     'c <: List['a0]
//│     'd <: () -> List["x" | 'a0] -> 'e))
//│   where
//│     'c <: List['a])))) -> nothing -> (() -> List[string] -> () -> (forall 'b, 'f. (List['b] & 'f) -> (forall 'b, 'f, 'a1. ((() -> List['a1 | string] -> 'b & 'b) -> (forall 'b, 'f, 'a2, 'g. ('g
//│   where
//│     'f <: List['a2]
//│     'b <: () -> List['a2 | string] -> 'g))
//│   where
//│     'f <: List['a1])))) -> 'b & () -> List["x"] -> 'b & () -> List["x"] -> (() -> (forall 'b, 'c. (List['b] & 'c) -> (forall 'b, 'c, 'a, 'd. ((() -> List["x" | 'a] -> 'b & 'd) -> (forall 'c, 'd, 'a0, 'e. ('e
//│   where
//│     'c <: List['a0]
//│     'd <: () -> List["x" | 'a0] -> 'e))
//│   where
//│     'c <: List['a])))) -> 'n -> (() -> List[string] -> () -> (forall 'b, 'f. (List['b] & 'f) -> (forall 'b, 'f, 'a1. ((() -> List['a1 | string] -> 'b & 'b) -> (forall 'b, 'f, 'a2, 'g. ('g
//│   where
//│     'f <: List['a2]
//│     'b <: () -> List['a2 | string] -> 'g))
//│   where
//│     'f <: List['a1])))) -> 'b & () -> List["x"] -> (() -> (forall 'b, 'c. (List['b] & 'c) -> (forall 'b, 'c, 'a, 'd. ((() -> List["x" | 'a] -> 'b & 'd) -> (forall 'c, 'd, 'a0, 'e. ('e
//│   where
//│     'c <: List['a0]
//│     'd <: () -> List["x" | 'a0] -> 'e))
//│   where
//│     'c <: List['a])))) -> (() -> List[string] -> () -> (forall 'b, 'f. (List['b] & 'f) -> (forall 'b, 'f, 'a1. ((() -> List['a1 | string] -> 'b & 'b) -> (forall 'b, 'f, 'a2, 'g. ('g
//│   where
//│     'f <: List['a2]
//│     'b <: () -> List['a2 | string] -> 'g))
//│   where
//│     'f <: List['a1])))) -> 'n))

