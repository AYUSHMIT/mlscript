
class Person: { name: string; age: int }
def Person = fun n -> fun a -> Person { name = n; age = a }
//│ Defined class Person
//│ Person: 'a & string -> 'b & int -> (person & {age: int, name: string}) & {age: 'b, name: 'a}

class Animal: {}
//│ Defined class Animal

def test = fun x -> case x of
  { Person -> x.age
  | Animal -> 0
  }
//│ test: ((person & {age: 'a}) | ((animal & anything) & ~person)) -> 'a | 0

// TODO simplify type to : test: Person & {age: 'a} | Animal -> 'a | 0

test: Person & {age: 'a} | Animal -> 'a | 0
//│ res: ((Person & {age: nothing | 0}) | (Animal -> nothing | 0)) | 0

test: (Person & {age: int} | Animal) -> int
//│ res: ((Person & {age: int}) | Animal) -> int

def a = Animal{}
//│ a: animal & {}

a: {}
//│ res: anything

def p = Person "Bob" 42
//│ p: (person & {age: int, name: string}) & {age: 42, name: "Bob"}

p: { age: int }
//│ res: {age: int}

test a
//│ res: nothing | 0

test p
//│ res: (int & 42) | 0

1: int
//│ res: int

