// Automatically generated by funtypes.EnumeratePrograms — DO NOT EDIT

:AllowTypeErrors


0
//│ res: 0

add
//│ res: int -> int -> int

(0 0)
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.12: 	(0 0)
//│       	 ^^^
//│ res: ⊥

(0 add)
//│ /!\ Type error: cannot constrain 0 <: (int -> int -> int) -> 'a
//│ l.18: 	(0 add)
//│       	 ^^^^^
//│ res: ⊥

(0 {u: 0})
//│ /!\ Type error: cannot constrain 0 <: {u: 0} -> 'a
//│ l.24: 	(0 {u: 0})
//│       	 ^^^^^^^^
//│ res: ⊥

(0 {u: add})
//│ /!\ Type error: cannot constrain 0 <: {u: int -> int -> int} -> 'a
//│ l.30: 	(0 {u: add})
//│       	 ^^^^^^^^^^
//│ res: ⊥

(add 0)
//│ res: int -> int

(add add)
//│ /!\ Type error: cannot constrain int -> int -> int <: int
//│ l.39: 	(add add)
//│       	 ^^^^^^^
//│ res: int -> int

(add 0.u)
//│ /!\ Type error: cannot constrain 0 <: {u: 'a}
//│ l.45: 	(add 0.u)
//│       	      ^^
//│ res: int -> int

(add add.u)
//│ /!\ Type error: cannot constrain int -> int -> int <: {u: 'a}
//│ l.51: 	(add add.u)
//│       	        ^^
//│ res: int -> int

(add 0.v)
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.57: 	(add 0.v)
//│       	      ^^
//│ res: int -> int

(add add.v)
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.63: 	(add add.v)
//│       	        ^^
//│ res: int -> int

(add {v: 0})
//│ /!\ Type error: cannot constrain {v: 0} <: int
//│ l.69: 	(add {v: 0})
//│       	 ^^^^^^^^^^
//│ res: int -> int

(add {v: add})
//│ /!\ Type error: cannot constrain {v: int -> int -> int} <: int
//│ l.75: 	(add {v: add})
//│       	 ^^^^^^^^^^^^
//│ res: int -> int

(add {v: 0.v})
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.81: 	(add {v: 0.v})
//│       	          ^^
//│ /!\ Type error: cannot constrain {v: 'a} <: int
//│ l.81: 	(add {v: 0.v})
//│       	 ^^^^^^^^^^^^
//│ res: int -> int

(add {v: add.v})
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.90: 	(add {v: add.v})
//│       	            ^^
//│ /!\ Type error: cannot constrain {v: 'a} <: int
//│ l.90: 	(add {v: add.v})
//│       	 ^^^^^^^^^^^^^^
//│ res: int -> int

((x => 0) 0)
//│ res: 0

((x => 0) add)
//│ res: 0

((x => 0) {u: 0})
//│ res: 0

((x => 0) {u: 0, v: 0})
//│ res: 0

((x => 0) {u: 0, v: add})
//│ res: 0

((x => 0) {u: add})
//│ res: 0

((x => add) 0)
//│ res: int -> int -> int

((x => add) add)
//│ res: int -> int -> int

((x => add) 0.u)
//│ /!\ Type error: cannot constrain 0 <: {u: 'a}
//│ l.123: 	((x => add) 0.u)
//│        	             ^^
//│ res: int -> int -> int

((x => add) add.u)
//│ /!\ Type error: cannot constrain int -> int -> int <: {u: 'a}
//│ l.129: 	((x => add) add.u)
//│        	               ^^
//│ res: int -> int -> int

((x => add) {u: 0})
//│ res: int -> int -> int

((x => add) {u: add})
//│ res: int -> int -> int

((x => add) {u: add, v: 0})
//│ res: int -> int -> int

((x => add) {u: add, v: add})
//│ res: int -> int -> int

((x => add) {u: 0.u})
//│ /!\ Type error: cannot constrain 0 <: {u: 'a}
//│ l.147: 	((x => add) {u: 0.u})
//│        	                 ^^
//│ res: int -> int -> int

((x => add) {u: add.u})
//│ /!\ Type error: cannot constrain int -> int -> int <: {u: 'a}
//│ l.153: 	((x => add) {u: add.u})
//│        	                   ^^
//│ res: int -> int -> int

((x => add) 0.v)
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.159: 	((x => add) 0.v)
//│        	             ^^
//│ res: int -> int -> int

((x => add) add.v)
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.165: 	((x => add) add.v)
//│        	               ^^
//│ res: int -> int -> int

((let x = 0; add) 0)
//│ res: int -> int

((let x = 0; add) add)
//│ /!\ Type error: cannot constrain int -> int -> int <: int
//│ l.174: 	((let x = 0; add) add)
//│        	 ^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let x = 0; add) (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.180: 	((let x = 0; add) (0 0))
//│        	                   ^^^
//│ res: int -> int

((let x = 0; add) (0 add))
//│ /!\ Type error: cannot constrain 0 <: (int -> int -> int) -> 'a
//│ l.186: 	((let x = 0; add) (0 add))
//│        	                   ^^^^^
//│ res: int -> int

((let x = 0; add) (x => 0))
//│ /!\ Type error: cannot constrain 'a -> 0 <: int
//│ l.192: 	((let x = 0; add) (x => 0))
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let x = 0; add) (let x = 0; 0))
//│ res: int -> int

((let x = 0; add) (let x = add; 0))
//│ res: int -> int

((let x = 0; add) (let rec x = x; 0))
//│ res: int -> int

((let x = 0; add) (let x = 0.u; 0))
//│ /!\ Type error: cannot constrain 0 <: {u: 'a}
//│ l.207: 	((let x = 0; add) (let x = 0.u; 0))
//│        	                            ^^
//│ res: int -> int

((let x = 0; add) (let x = add.u; 0))
//│ /!\ Type error: cannot constrain int -> int -> int <: {u: 'a}
//│ l.213: 	((let x = 0; add) (let x = add.u; 0))
//│        	                              ^^
//│ res: int -> int

((let x = 0; add) (let rec x = x.u; 0))
//│ res: int -> int

((let x = 0; add) (x => add))
//│ /!\ Type error: cannot constrain 'a -> int -> int -> int <: int
//│ l.222: 	((let x = 0; add) (x => add))
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let x = 0; add) (x => x))
//│ /!\ Type error: cannot constrain 'a -> 'a <: int
//│ l.228: 	((let x = 0; add) (x => x))
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let x = 0; add) (let x = 0; x))
//│ res: int -> int

((let x = 0; add) (let x = add; x))
//│ /!\ Type error: cannot constrain int -> int -> int <: int
//│ l.237: 	((let x = 0; add) (let x = add; x))
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let x = 0; add) (let rec x = x; x))
//│ res: int -> int

((let x = 0; add) 0.u)
//│ /!\ Type error: cannot constrain 0 <: {u: 'a}
//│ l.246: 	((let x = 0; add) 0.u)
//│        	                   ^^
//│ res: int -> int

((let x = 0; add) add.u)
//│ /!\ Type error: cannot constrain int -> int -> int <: {u: 'a}
//│ l.252: 	((let x = 0; add) add.u)
//│        	                     ^^
//│ res: int -> int

((let x = 0; add) {u: 0})
//│ /!\ Type error: cannot constrain {u: 0} <: int
//│ l.258: 	((let x = 0; add) {u: 0})
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let x = 0; add) {u: add})
//│ /!\ Type error: cannot constrain {u: int -> int -> int} <: int
//│ l.264: 	((let x = 0; add) {u: add})
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let x = 0; add) {v: 0})
//│ /!\ Type error: cannot constrain {v: 0} <: int
//│ l.270: 	((let x = 0; add) {v: 0})
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let x = 0; add) {v: add})
//│ /!\ Type error: cannot constrain {v: int -> int -> int} <: int
//│ l.276: 	((let x = 0; add) {v: add})
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let x = add; add) 0)
//│ res: int -> int

((let x = add; add) add)
//│ /!\ Type error: cannot constrain int -> int -> int <: int
//│ l.285: 	((let x = add; add) add)
//│        	 ^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let x = add; add) (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.291: 	((let x = add; add) (0 0))
//│        	                     ^^^
//│ res: int -> int

((let x = add; add) (0 add))
//│ /!\ Type error: cannot constrain 0 <: (int -> int -> int) -> 'a
//│ l.297: 	((let x = add; add) (0 add))
//│        	                     ^^^^^
//│ res: int -> int

((let x = add; add) (0 {u: 0}))
//│ /!\ Type error: cannot constrain 0 <: {u: 0} -> 'a
//│ l.303: 	((let x = add; add) (0 {u: 0}))
//│        	                     ^^^^^^^^
//│ res: int -> int

((let x = add; add) (0 {u: add}))
//│ /!\ Type error: cannot constrain 0 <: {u: int -> int -> int} -> 'a
//│ l.309: 	((let x = add; add) (0 {u: add}))
//│        	                     ^^^^^^^^^^
//│ res: int -> int

((let x = add; add) ((0 add) 0))
//│ /!\ Type error: cannot constrain 0 <: (int -> int -> int) -> 'a
//│ l.315: 	((let x = add; add) ((0 add) 0))
//│        	                      ^^^^^
//│ res: int -> int

((let x = add; add) ((0 add) add))
//│ /!\ Type error: cannot constrain 0 <: (int -> int -> int) -> 'a
//│ l.321: 	((let x = add; add) ((0 add) add))
//│        	                      ^^^^^
//│ res: int -> int

((let x = add; add) (x => 0))
//│ /!\ Type error: cannot constrain 'a -> 0 <: int
//│ l.327: 	((let x = add; add) (x => 0))
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let x = add; add) (let x = 0; 0))
//│ res: int -> int

((let x = add; add) (let x = add; 0))
//│ res: int -> int

((let x = add; add) (let rec x = x; 0))
//│ res: int -> int

((let x = add; add) (x => add))
//│ /!\ Type error: cannot constrain 'a -> int -> int -> int <: int
//│ l.342: 	((let x = add; add) (x => add))
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let x = add; add) (let x = 0; add))
//│ /!\ Type error: cannot constrain int -> int -> int <: int
//│ l.348: 	((let x = add; add) (let x = 0; add))
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let x = add; add) (let x = add; add))
//│ /!\ Type error: cannot constrain int -> int -> int <: int
//│ l.354: 	((let x = add; add) (let x = add; add))
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let x = add; add) (let rec x = x; add))
//│ /!\ Type error: cannot constrain int -> int -> int <: int
//│ l.360: 	((let x = add; add) (let rec x = x; add))
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let x = add; add) (x => x))
//│ /!\ Type error: cannot constrain 'a -> 'a <: int
//│ l.366: 	((let x = add; add) (x => x))
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let rec x = x; add) 0)
//│ res: int -> int

((let rec x = x; add) add)
//│ /!\ Type error: cannot constrain int -> int -> int <: int
//│ l.375: 	((let rec x = x; add) add)
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let rec x = x; add) 0.u)
//│ /!\ Type error: cannot constrain 0 <: {u: 'a}
//│ l.381: 	((let rec x = x; add) 0.u)
//│        	                       ^^
//│ res: int -> int

((let rec x = x; add) add.u)
//│ /!\ Type error: cannot constrain int -> int -> int <: {u: 'a}
//│ l.387: 	((let rec x = x; add) add.u)
//│        	                         ^^
//│ res: int -> int

((let rec x = x; add) {u: 0}.u)
//│ res: int -> int

((let rec x = x; add) {u: add}.u)
//│ /!\ Type error: cannot constrain int -> int -> int <: int
//│ l.396: 	((let rec x = x; add) {u: add}.u)
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let rec x = x; add) {v: 0})
//│ /!\ Type error: cannot constrain {v: 0} <: int
//│ l.402: 	((let rec x = x; add) {v: 0})
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let rec x = x; add) {v: add})
//│ /!\ Type error: cannot constrain {v: int -> int -> int} <: int
//│ l.408: 	((let rec x = x; add) {v: add})
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let rec x = x; add) {v: 0.u})
//│ /!\ Type error: cannot constrain 0 <: {u: 'a}
//│ l.414: 	((let rec x = x; add) {v: 0.u})
//│        	                           ^^
//│ /!\ Type error: cannot constrain {v: 'a} <: int
//│ l.414: 	((let rec x = x; add) {v: 0.u})
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let rec x = x; add) {v: add.u})
//│ /!\ Type error: cannot constrain int -> int -> int <: {u: 'a}
//│ l.423: 	((let rec x = x; add) {v: add.u})
//│        	                             ^^
//│ /!\ Type error: cannot constrain {v: 'a} <: int
//│ l.423: 	((let rec x = x; add) {v: add.u})
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let x = {v: 0}; add) 0)
//│ res: int -> int

((let x = {v: 0}; add) add)
//│ /!\ Type error: cannot constrain int -> int -> int <: int
//│ l.435: 	((let x = {v: 0}; add) add)
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let x = {v: 0}; add) (add 0))
//│ /!\ Type error: cannot constrain int -> int <: int
//│ l.441: 	((let x = {v: 0}; add) (add 0))
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let x = {v: 0}; add) (add add))
//│ /!\ Type error: cannot constrain int -> int -> int <: int
//│ l.447: 	((let x = {v: 0}; add) (add add))
//│        	                        ^^^^^^^
//│ /!\ Type error: cannot constrain int -> int <: int
//│ l.447: 	((let x = {v: 0}; add) (add add))
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let x = {v: 0}; add) (x => 0))
//│ /!\ Type error: cannot constrain 'a -> 0 <: int
//│ l.456: 	((let x = {v: 0}; add) (x => 0))
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let x = {v: 0}; add) (let x = 0; 0))
//│ res: int -> int

((let x = {v: 0}; add) (let x = add; 0))
//│ res: int -> int

((let x = {v: 0}; add) (let rec x = x; 0))
//│ res: int -> int

((let x = {v: 0}; add) (x => add))
//│ /!\ Type error: cannot constrain 'a -> int -> int -> int <: int
//│ l.471: 	((let x = {v: 0}; add) (x => add))
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let x = {v: 0}; add) (let x = 0; add))
//│ /!\ Type error: cannot constrain int -> int -> int <: int
//│ l.477: 	((let x = {v: 0}; add) (let x = 0; add))
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let x = {v: 0}; add) (let x = add; add))
//│ /!\ Type error: cannot constrain int -> int -> int <: int
//│ l.483: 	((let x = {v: 0}; add) (let x = add; add))
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let x = {v: 0}; add) (let rec x = x; add))
//│ /!\ Type error: cannot constrain int -> int -> int <: int
//│ l.489: 	((let x = {v: 0}; add) (let rec x = x; add))
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let x = {v: 0}; add) (x => x))
//│ /!\ Type error: cannot constrain 'a -> 'a <: int
//│ l.495: 	((let x = {v: 0}; add) (x => x))
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let x = {v: 0}; add) 0.v)
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.501: 	((let x = {v: 0}; add) 0.v)
//│        	                        ^^
//│ res: int -> int

((let x = {v: 0}; add) add.v)
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.507: 	((let x = {v: 0}; add) add.v)
//│        	                          ^^
//│ res: int -> int

((let x = {v: 0}; add) (x => 0).v)
//│ /!\ Type error: cannot constrain 'a -> 0 <: {v: 'a}
//│ l.513: 	((let x = {v: 0}; add) (x => 0).v)
//│        	                               ^^
//│ res: int -> int

((let x = {v: 0}; add) (x => add).v)
//│ /!\ Type error: cannot constrain 'a -> int -> int -> int <: {v: 'a}
//│ l.519: 	((let x = {v: 0}; add) (x => add).v)
//│        	                                 ^^
//│ res: int -> int

((let x = {v: 0}; add) (x => x).v)
//│ /!\ Type error: cannot constrain 'a -> 'a <: {v: 'a}
//│ l.525: 	((let x = {v: 0}; add) (x => x).v)
//│        	                               ^^
//│ res: int -> int

((let x = {v: add}; add) 0)
//│ res: int -> int

((let x = {v: add}; add) add)
//│ /!\ Type error: cannot constrain int -> int -> int <: int
//│ l.534: 	((let x = {v: add}; add) add)
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let x = {v: add}; add) {v: 0})
//│ /!\ Type error: cannot constrain {v: 0} <: int
//│ l.540: 	((let x = {v: add}; add) {v: 0})
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let x = {v: add}; add) {v: add})
//│ /!\ Type error: cannot constrain {v: int -> int -> int} <: int
//│ l.546: 	((let x = {v: add}; add) {v: add})
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((let rec x = {v: x}; add) 0)
//│ res: int -> int

((let rec x = {v: x}; add) add)
//│ /!\ Type error: cannot constrain int -> int -> int <: int
//│ l.555: 	((let rec x = {v: x}; add) add)
//│        	 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int -> int

((x => x) 0)
//│ res: 0

((x => x) add)
//│ res: int -> int -> int

((x => x) (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.567: 	((x => x) (0 0))
//│        	           ^^^
//│ res: ⊥

((x => x) (0 add))
//│ /!\ Type error: cannot constrain 0 <: (int -> int -> int) -> 'a
//│ l.573: 	((x => x) (0 add))
//│        	           ^^^^^
//│ res: ⊥

((x => x) (0 (x => 0)))
//│ /!\ Type error: cannot constrain 0 <: ('a -> 0) -> 'b
//│ l.579: 	((x => x) (0 (x => 0)))
//│        	           ^^^^^^^^^^
//│ res: ⊥

((x => x) (0 (x => add)))
//│ /!\ Type error: cannot constrain 0 <: ('a -> int -> int -> int) -> 'b
//│ l.585: 	((x => x) (0 (x => add)))
//│        	           ^^^^^^^^^^^^
//│ res: ⊥

((x => x) (0 (x => x)))
//│ /!\ Type error: cannot constrain 0 <: ('a -> 'a) -> 'b
//│ l.591: 	((x => x) (0 (x => x)))
//│        	           ^^^^^^^^^^
//│ res: ⊥

((x => x) {v: 0})
//│ res: {v: 0}

((x => x) {v: add})
//│ res: {v: int -> int -> int}

((x => 0.u) 0)
//│ /!\ Type error: cannot constrain 0 <: {u: 'a}
//│ l.603: 	((x => 0.u) 0)
//│        	        ^^
//│ res: ⊥

((x => 0.u) add)
//│ /!\ Type error: cannot constrain 0 <: {u: 'a}
//│ l.609: 	((x => 0.u) add)
//│        	        ^^
//│ res: ⊥

((x => add.u) 0)
//│ /!\ Type error: cannot constrain int -> int -> int <: {u: 'a}
//│ l.615: 	((x => add.u) 0)
//│        	          ^^
//│ res: ⊥

((x => add.u) add)
//│ /!\ Type error: cannot constrain int -> int -> int <: {u: 'a}
//│ l.621: 	((x => add.u) add)
//│        	          ^^
//│ res: ⊥

((x => add.u) 0.u)
//│ /!\ Type error: cannot constrain int -> int -> int <: {u: 'a}
//│ l.627: 	((x => add.u) 0.u)
//│        	          ^^
//│ /!\ Type error: cannot constrain 0 <: {u: 'a}
//│ l.627: 	((x => add.u) 0.u)
//│        	               ^^
//│ res: ⊥

((x => add.u) add.u)
//│ /!\ Type error: cannot constrain int -> int -> int <: {u: 'a}
//│ l.636: 	((x => add.u) add.u)
//│        	          ^^
//│ /!\ Type error: cannot constrain int -> int -> int <: {u: 'a}
//│ l.636: 	((x => add.u) add.u)
//│        	                 ^^
//│ res: ⊥

((x => x.u) 0)
//│ /!\ Type error: cannot constrain 0 <: {u: 'a}
//│ l.645: 	((x => x.u) 0)
//│        	 ^^^^^^^^^^^^
//│ res: ⊥

((x => x.u) add)
//│ /!\ Type error: cannot constrain int -> int -> int <: {u: 'a}
//│ l.651: 	((x => x.u) add)
//│        	 ^^^^^^^^^^^^^^
//│ res: ⊥

((x => x.u) 0.u)
//│ /!\ Type error: cannot constrain 0 <: {u: 'a}
//│ l.657: 	((x => x.u) 0.u)
//│        	             ^^
//│ res: ⊥

((x => x.u) add.u)
//│ /!\ Type error: cannot constrain int -> int -> int <: {u: 'a}
//│ l.663: 	((x => x.u) add.u)
//│        	               ^^
//│ res: ⊥

((x => x.u) {u: 0}.u)
//│ /!\ Type error: cannot constrain 0 <: {u: 'a}
//│ l.669: 	((x => x.u) {u: 0}.u)
//│        	 ^^^^^^^^^^^^^^^^^^^
//│ res: ⊥

((x => x.u) {u: add}.u)
//│ /!\ Type error: cannot constrain int -> int -> int <: {u: 'a}
//│ l.675: 	((x => x.u) {u: add}.u)
//│        	 ^^^^^^^^^^^^^^^^^^^^^
//│ res: ⊥

(x => 0)
//│ res: ⊤ -> 0

(let x = 0; 0)
//│ res: 0

(let x = add; 0)
//│ res: 0

(let rec x = x; 0)
//│ res: 0

(let x = 0.u; 0)
//│ /!\ Type error: cannot constrain 0 <: {u: 'a}
//│ l.693: 	(let x = 0.u; 0)
//│        	          ^^
//│ res: 0

(let x = add.u; 0)
//│ /!\ Type error: cannot constrain int -> int -> int <: {u: 'a}
//│ l.699: 	(let x = add.u; 0)
//│        	            ^^
//│ res: 0

(let rec x = x.u; 0)
//│ res: 0

(x => add)
//│ res: ⊤ -> int -> int -> int

(let x = 0; add)
//│ res: int -> int -> int

(let x = add; add)
//│ res: int -> int -> int

(let rec x = x; add)
//│ res: int -> int -> int

(let x = 0.v; add)
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.720: 	(let x = 0.v; add)
//│        	          ^^
//│ res: int -> int -> int

(let x = add.v; add)
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.726: 	(let x = add.v; add)
//│        	            ^^
//│ res: int -> int -> int

(let rec x = x.v; add)
//│ res: int -> int -> int

(x => x)
//│ res: 'a -> 'a

(let x = 0; x)
//│ res: 0

(let x = add; x)
//│ res: int -> int -> int

(let rec x = x; x)
//│ res: ⊥

(let x = (0 0); x)
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.747: 	(let x = (0 0); x)
//│        	          ^^^
//│ res: ⊥

(let x = (0 add); x)
//│ /!\ Type error: cannot constrain 0 <: (int -> int -> int) -> 'a
//│ l.753: 	(let x = (0 add); x)
//│        	          ^^^^^
//│ res: ⊥

(let rec x = (0 x); x)
//│ /!\ Type error: cannot constrain 0 <: 'a -> 'b
//│ l.759: 	(let rec x = (0 x); x)
//│        	              ^^^
//│ res: ⊥

(let x = 0.u; x)
//│ /!\ Type error: cannot constrain 0 <: {u: 'a}
//│ l.765: 	(let x = 0.u; x)
//│        	          ^^
//│ res: ⊥

(let x = add.u; x)
//│ /!\ Type error: cannot constrain int -> int -> int <: {u: 'a}
//│ l.771: 	(let x = add.u; x)
//│        	            ^^
//│ res: ⊥

(let rec x = x.u; x)
//│ res: ⊥

(let x = {v: 0}.u; x)
//│ /!\ Type error: missing field: u in {v: 0}
//│ l.780: 	(let x = {v: 0}.u; x)
//│        	               ^^
//│ res: ⊥

(let x = {v: add}.u; x)
//│ /!\ Type error: missing field: u in {v: int -> int -> int}
//│ l.786: 	(let x = {v: add}.u; x)
//│        	                 ^^
//│ res: ⊥

(let rec x = {v: x}.u; x)
//│ /!\ Type error: missing field: u in {v: 'a}
//│ l.792: 	(let rec x = {v: x}.u; x)
//│        	                   ^^
//│ res: ⊥

(let x = {u: 0}; x)
//│ res: {u: 0}

(let x = {u: 0, v: 0}; x)
//│ res: {u: 0, v: 0}

(let x = {u: 0, v: add}; x)
//│ res: {u: 0, v: int -> int -> int}

(let rec x = {u: 0, v: x}; x)
//│ res: {u: 0, v: 'a} as 'a

(let x = {u: 0, v: 0.v}; x)
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.810: 	(let x = {u: 0, v: 0.v}; x)
//│        	                    ^^
//│ res: {u: 0, v: ⊥}

(let x = {u: 0, v: add.v}; x)
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.816: 	(let x = {u: 0, v: add.v}; x)
//│        	                      ^^
//│ res: {u: 0, v: ⊥}

(let rec x = {u: 0, v: x.v}; x)
//│ res: {u: 0, v: ⊥}

(let x = {u: add}; x)
//│ res: {u: int -> int -> int}

(let rec x = {u: x}; x)
//│ res: {u: 'a} as 'a

(x => (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.831: 	(x => (0 0))
//│        	       ^^^
//│ res: ⊤ -> ⊥

(let x = 0; (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.837: 	(let x = 0; (0 0))
//│        	             ^^^
//│ res: ⊥

(let x = add; (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.843: 	(let x = add; (0 0))
//│        	               ^^^
//│ res: ⊥

(let rec x = x; (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.849: 	(let rec x = x; (0 0))
//│        	                 ^^^
//│ res: ⊥

(let x = (0 0); (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.855: 	(let x = (0 0); (0 0))
//│        	          ^^^
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.855: 	(let x = (0 0); (0 0))
//│        	                 ^^^
//│ res: ⊥

(let x = (0 add); (0 0))
//│ /!\ Type error: cannot constrain 0 <: (int -> int -> int) -> 'a
//│ l.864: 	(let x = (0 add); (0 0))
//│        	          ^^^^^
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.864: 	(let x = (0 add); (0 0))
//│        	                   ^^^
//│ res: ⊥

(let rec x = (0 x); (0 0))
//│ /!\ Type error: cannot constrain 0 <: 'a -> 'b
//│ l.873: 	(let rec x = (0 x); (0 0))
//│        	              ^^^
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.873: 	(let rec x = (0 x); (0 0))
//│        	                     ^^^
//│ res: ⊥

(let x = (y => 0); (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.882: 	(let x = (y => 0); (0 0))
//│        	                    ^^^
//│ res: ⊥

(let x = (y => add); (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.888: 	(let x = (y => add); (0 0))
//│        	                      ^^^
//│ res: ⊥

(let x = (y => y); (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.894: 	(let x = (y => y); (0 0))
//│        	                    ^^^
//│ res: ⊥

(let x = (let y = 0; y); (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.900: 	(let x = (let y = 0; y); (0 0))
//│        	                          ^^^
//│ res: ⊥

(let x = (let y = add; y); (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.906: 	(let x = (let y = add; y); (0 0))
//│        	                            ^^^
//│ res: ⊥

(let x = (let rec y = y; y); (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.912: 	(let x = (let rec y = y; y); (0 0))
//│        	                              ^^^
//│ res: ⊥

(let rec x = (let y = x; y); (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.918: 	(let rec x = (let y = x; y); (0 0))
//│        	                              ^^^
//│ res: ⊥

(let rec x = (y => x); (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.924: 	(let rec x = (y => x); (0 0))
//│        	                        ^^^
//│ res: ⊥

(let rec x = (let y = 0; x); (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.930: 	(let rec x = (let y = 0; x); (0 0))
//│        	                              ^^^
//│ res: ⊥

(let rec x = (let y = add; x); (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.936: 	(let rec x = (let y = add; x); (0 0))
//│        	                                ^^^
//│ res: ⊥

(let rec x = (let rec y = y; x); (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.942: 	(let rec x = (let rec y = y; x); (0 0))
//│        	                                  ^^^
//│ res: ⊥

(let rec x = (let y = x; x); (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.948: 	(let rec x = (let y = x; x); (0 0))
//│        	                              ^^^
//│ res: ⊥

(let x = (y => (z => 0)); (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.954: 	(let x = (y => (z => 0)); (0 0))
//│        	                           ^^^
//│ res: ⊥

(let x = (y => (z => add)); (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.960: 	(let x = (y => (z => add)); (0 0))
//│        	                             ^^^
//│ res: ⊥

(let x = (y => (z => z)); (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.966: 	(let x = (y => (z => z)); (0 0))
//│        	                           ^^^
//│ res: ⊥

(let x = (y => (z => y)); (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.972: 	(let x = (y => (z => y)); (0 0))
//│        	                           ^^^
//│ res: ⊥

(let x = (let y = 0; (z => y)); (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.978: 	(let x = (let y = 0; (z => y)); (0 0))
//│        	                                 ^^^
//│ res: ⊥

(let x = (let y = add; (z => y)); (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.984: 	(let x = (let y = add; (z => y)); (0 0))
//│        	                                   ^^^
//│ res: ⊥

(let x = (let rec y = y; (z => y)); (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.990: 	(let x = (let rec y = y; (z => y)); (0 0))
//│        	                                     ^^^
//│ res: ⊥

(let rec x = (let y = x; (z => y)); (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.996: 	(let rec x = (let y = x; (z => y)); (0 0))
//│        	                                     ^^^
//│ res: ⊥

(let rec x = (y => (z => x)); (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.1002: 	(let rec x = (y => (z => x)); (0 0))
//│         	                               ^^^
//│ res: ⊥

(let rec x = (let y = 0; (z => x)); (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.1008: 	(let rec x = (let y = 0; (z => x)); (0 0))
//│         	                                     ^^^
//│ res: ⊥

(let rec x = (let y = add; (z => x)); (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.1014: 	(let rec x = (let y = add; (z => x)); (0 0))
//│         	                                       ^^^
//│ res: ⊥

(let rec x = (let rec y = y; (z => x)); (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.1020: 	(let rec x = (let rec y = y; (z => x)); (0 0))
//│         	                                         ^^^
//│ res: ⊥

(let rec x = (let y = x; (z => x)); (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.1026: 	(let rec x = (let y = x; (z => x)); (0 0))
//│         	                                     ^^^
//│ res: ⊥

(let x = {u: 0}; (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.1032: 	(let x = {u: 0}; (0 0))
//│         	                  ^^^
//│ res: ⊥

(let x = {u: add}; (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.1038: 	(let x = {u: add}; (0 0))
//│         	                    ^^^
//│ res: ⊥

(let rec x = {u: x}; (0 0))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.1044: 	(let rec x = {u: x}; (0 0))
//│         	                      ^^^
//│ res: ⊥

(x => (0 add))
//│ /!\ Type error: cannot constrain 0 <: (int -> int -> int) -> 'a
//│ l.1050: 	(x => (0 add))
//│         	       ^^^^^
//│ res: ⊤ -> ⊥

(let x = 0; (0 add))
//│ /!\ Type error: cannot constrain 0 <: (int -> int -> int) -> 'a
//│ l.1056: 	(let x = 0; (0 add))
//│         	             ^^^^^
//│ res: ⊥

(let x = add; (0 add))
//│ /!\ Type error: cannot constrain 0 <: (int -> int -> int) -> 'a
//│ l.1062: 	(let x = add; (0 add))
//│         	               ^^^^^
//│ res: ⊥

(let rec x = x; (0 add))
//│ /!\ Type error: cannot constrain 0 <: (int -> int -> int) -> 'a
//│ l.1068: 	(let rec x = x; (0 add))
//│         	                 ^^^^^
//│ res: ⊥

(let x = 0.v; (0 add))
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.1074: 	(let x = 0.v; (0 add))
//│         	          ^^
//│ /!\ Type error: cannot constrain 0 <: (int -> int -> int) -> 'a
//│ l.1074: 	(let x = 0.v; (0 add))
//│         	               ^^^^^
//│ res: ⊥

(let x = add.v; (0 add))
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.1083: 	(let x = add.v; (0 add))
//│         	            ^^
//│ /!\ Type error: cannot constrain 0 <: (int -> int -> int) -> 'a
//│ l.1083: 	(let x = add.v; (0 add))
//│         	                 ^^^^^
//│ res: ⊥

(let rec x = x.v; (0 add))
//│ /!\ Type error: cannot constrain 0 <: (int -> int -> int) -> 'a
//│ l.1092: 	(let rec x = x.v; (0 add))
//│         	                   ^^^^^
//│ res: ⊥

(x => (0 x))
//│ /!\ Type error: cannot constrain 0 <: 'a -> 'b
//│ l.1098: 	(x => (0 x))
//│         	       ^^^
//│ res: ⊤ -> ⊥

(let x = 0; (0 x))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.1104: 	(let x = 0; (0 x))
//│         	             ^^^
//│ res: ⊥

(let x = add; (0 x))
//│ /!\ Type error: cannot constrain 0 <: (int -> int -> int) -> 'a
//│ l.1110: 	(let x = add; (0 x))
//│         	               ^^^
//│ res: ⊥

(let rec x = x; (0 x))
//│ /!\ Type error: cannot constrain 0 <: 'a -> 'b
//│ l.1116: 	(let rec x = x; (0 x))
//│         	                 ^^^
//│ res: ⊥

(let x = (0 0); (0 x))
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.1122: 	(let x = (0 0); (0 x))
//│         	          ^^^
//│ /!\ Type error: cannot constrain 0 <: 'a -> 'b
//│ l.1122: 	(let x = (0 0); (0 x))
//│         	                 ^^^
//│ res: ⊥

(let x = (0 add); (0 x))
//│ /!\ Type error: cannot constrain 0 <: (int -> int -> int) -> 'a
//│ l.1131: 	(let x = (0 add); (0 x))
//│         	          ^^^^^
//│ /!\ Type error: cannot constrain 0 <: 'a -> 'b
//│ l.1131: 	(let x = (0 add); (0 x))
//│         	                   ^^^
//│ res: ⊥

(let rec x = (0 x); (0 x))
//│ /!\ Type error: cannot constrain 0 <: 'a -> 'b
//│ l.1140: 	(let rec x = (0 x); (0 x))
//│         	              ^^^
//│ /!\ Type error: cannot constrain 0 <: 'a -> 'b
//│ l.1140: 	(let rec x = (0 x); (0 x))
//│         	                     ^^^
//│ res: ⊥

(let x = (add 0); (0 x))
//│ /!\ Type error: cannot constrain 0 <: 'a -> 'b
//│ l.1149: 	(let x = (add 0); (0 x))
//│         	                   ^^^
//│ res: ⊥

(let x = (add add); (0 x))
//│ /!\ Type error: cannot constrain int -> int -> int <: int
//│ l.1155: 	(let x = (add add); (0 x))
//│         	          ^^^^^^^
//│ /!\ Type error: cannot constrain 0 <: 'a -> 'b
//│ l.1155: 	(let x = (add add); (0 x))
//│         	                     ^^^
//│ res: ⊥

(let rec x = (add x); (0 x))
//│ /!\ Type error: cannot constrain int -> int <: int
//│ l.1164: 	(let rec x = (add x); (0 x))
//│         	             ^^^^^^^
//│ /!\ Type error: cannot constrain 0 <: 'a ∧ int -> 'b
//│ l.1164: 	(let rec x = (add x); (0 x))
//│         	                       ^^^
//│ res: ⊥

(let rec x = (x 0); (0 x))
//│ /!\ Type error: cannot constrain 0 <: ('b ∧ (0 -> 'c ∧ 'a)) as 'a -> 'd
//│ l.1173: 	(let rec x = (x 0); (0 x))
//│         	                     ^^^
//│ res: ⊥

(let rec x = (x add); (0 x))
//│ /!\ Type error: cannot constrain 0 <: ('b ∧ ((int -> int -> int) -> 'c ∧ 'a)) as 'a -> 'd
//│ l.1179: 	(let rec x = (x add); (0 x))
//│         	                       ^^^
//│ res: ⊥

(let rec x = (x x); (0 x))
//│ /!\ Type error: cannot constrain 0 <: ('b ∧ ('b -> 'c ∧ 'a)) as 'a -> 'd
//│ l.1185: 	(let rec x = (x x); (0 x))
//│         	                     ^^^
//│ res: ⊥

(let x = (y => 0); (0 x))
//│ /!\ Type error: cannot constrain 0 <: ('a -> 0) -> 'b
//│ l.1191: 	(let x = (y => 0); (0 x))
//│         	                    ^^^
//│ res: ⊥

(let x = (y => add); (0 x))
//│ /!\ Type error: cannot constrain 0 <: ('a -> int -> int -> int) -> 'b
//│ l.1197: 	(let x = (y => add); (0 x))
//│         	                      ^^^
//│ res: ⊥

(let x = (y => y); (0 x))
//│ /!\ Type error: cannot constrain 0 <: ('a -> 'a) -> 'b
//│ l.1203: 	(let x = (y => y); (0 x))
//│         	                    ^^^
//│ res: ⊥

(let rec x = (y => x); (0 x))
//│ /!\ Type error: cannot constrain 0 <: 'a -> 'b
//│ l.1209: 	(let rec x = (y => x); (0 x))
//│         	                        ^^^
//│ res: ⊥

(let rec x = (let y = 0; x); (0 x))
//│ /!\ Type error: cannot constrain 0 <: 'a -> 'b
//│ l.1215: 	(let rec x = (let y = 0; x); (0 x))
//│         	                              ^^^
//│ res: ⊥

(let rec x = (let y = add; x); (0 x))
//│ /!\ Type error: cannot constrain 0 <: 'a -> 'b
//│ l.1221: 	(let rec x = (let y = add; x); (0 x))
//│         	                                ^^^
//│ res: ⊥

(let rec x = (let rec y = y; x); (0 x))
//│ /!\ Type error: cannot constrain 0 <: 'a -> 'b
//│ l.1227: 	(let rec x = (let rec y = y; x); (0 x))
//│         	                                  ^^^
//│ res: ⊥

(let rec x = (let y = x; x); (0 x))
//│ /!\ Type error: cannot constrain 0 <: 'a -> 'b
//│ l.1233: 	(let rec x = (let y = x; x); (0 x))
//│         	                              ^^^
//│ res: ⊥

(let x = {u: 0}; (0 x))
//│ /!\ Type error: cannot constrain 0 <: {u: 0} -> 'a
//│ l.1239: 	(let x = {u: 0}; (0 x))
//│         	                  ^^^
//│ res: ⊥

(let x = {u: add}; (0 x))
//│ /!\ Type error: cannot constrain 0 <: {u: int -> int -> int} -> 'a
//│ l.1245: 	(let x = {u: add}; (0 x))
//│         	                    ^^^
//│ res: ⊥

(let x = {u: add, v: 0}; (0 x))
//│ /!\ Type error: cannot constrain 0 <: {u: int -> int -> int, v: 0} -> 'a
//│ l.1251: 	(let x = {u: add, v: 0}; (0 x))
//│         	                          ^^^
//│ res: ⊥

(let x = {u: add, v: add}; (0 x))
//│ /!\ Type error: cannot constrain 0 <: {u: int -> int -> int, v: int -> int -> int} -> 'a
//│ l.1257: 	(let x = {u: add, v: add}; (0 x))
//│         	                            ^^^
//│ res: ⊥

(let rec x = {u: add, v: x}; (0 x))
//│ /!\ Type error: cannot constrain 0 <: 'a -> 'b
//│ l.1263: 	(let rec x = {u: add, v: x}; (0 x))
//│         	                              ^^^
//│ res: ⊥

(let rec x = {u: x}; (0 x))
//│ /!\ Type error: cannot constrain 0 <: 'a -> 'b
//│ l.1269: 	(let rec x = {u: x}; (0 x))
//│         	                      ^^^
//│ res: ⊥

(let x = 0.v; (0 x))
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.1275: 	(let x = 0.v; (0 x))
//│         	          ^^
//│ /!\ Type error: cannot constrain 0 <: 'a -> 'b
//│ l.1275: 	(let x = 0.v; (0 x))
//│         	               ^^^
//│ res: ⊥

(let x = add.v; (0 x))
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.1284: 	(let x = add.v; (0 x))
//│         	            ^^
//│ /!\ Type error: cannot constrain 0 <: 'a -> 'b
//│ l.1284: 	(let x = add.v; (0 x))
//│         	                 ^^^
//│ res: ⊥

(let rec x = x.v; (0 x))
//│ /!\ Type error: cannot constrain 0 <: ('b ∧ {v: 'c ∧ 'a}) as 'a -> 'd
//│ l.1293: 	(let rec x = x.v; (0 x))
//│         	                   ^^^
//│ res: ⊥

(let x = {v: 0}; (0 x))
//│ /!\ Type error: cannot constrain 0 <: {v: 0} -> 'a
//│ l.1299: 	(let x = {v: 0}; (0 x))
//│         	                  ^^^
//│ res: ⊥

(let x = {v: add}; (0 x))
//│ /!\ Type error: cannot constrain 0 <: {v: int -> int -> int} -> 'a
//│ l.1305: 	(let x = {v: add}; (0 x))
//│         	                    ^^^
//│ res: ⊥

(let rec x = {v: x}; (0 x))
//│ /!\ Type error: cannot constrain 0 <: 'a -> 'b
//│ l.1311: 	(let rec x = {v: x}; (0 x))
//│         	                      ^^^
//│ res: ⊥

(x => {u: 0})
//│ res: ⊤ -> {u: 0}

(let x = 0; {u: 0})
//│ res: {u: 0}

(let x = add; {u: 0})
//│ res: {u: 0}

(let rec x = x; {u: 0})
//│ res: {u: 0}

(let x = (0 0); {u: 0})
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.1329: 	(let x = (0 0); {u: 0})
//│         	          ^^^
//│ res: {u: 0}

(let x = (0 add); {u: 0})
//│ /!\ Type error: cannot constrain 0 <: (int -> int -> int) -> 'a
//│ l.1335: 	(let x = (0 add); {u: 0})
//│         	          ^^^^^
//│ res: {u: 0}

(let rec x = (0 x); {u: 0})
//│ /!\ Type error: cannot constrain 0 <: 'a -> 'b
//│ l.1341: 	(let rec x = (0 x); {u: 0})
//│         	              ^^^
//│ res: {u: 0}

(let x = (0 {v: 0}); {u: 0})
//│ /!\ Type error: cannot constrain 0 <: {v: 0} -> 'a
//│ l.1347: 	(let x = (0 {v: 0}); {u: 0})
//│         	          ^^^^^^^^
//│ res: {u: 0}

(let x = (0 {v: add}); {u: 0})
//│ /!\ Type error: cannot constrain 0 <: {v: int -> int -> int} -> 'a
//│ l.1353: 	(let x = (0 {v: add}); {u: 0})
//│         	          ^^^^^^^^^^
//│ res: {u: 0}

(let rec x = (0 {v: x}); {u: 0})
//│ /!\ Type error: cannot constrain 0 <: {v: 'a} -> 'b
//│ l.1359: 	(let rec x = (0 {v: x}); {u: 0})
//│         	              ^^^^^^^^
//│ res: {u: 0}

(let x = 0.u; {u: 0})
//│ /!\ Type error: cannot constrain 0 <: {u: 'a}
//│ l.1365: 	(let x = 0.u; {u: 0})
//│         	          ^^
//│ res: {u: 0}

(let x = add.u; {u: 0})
//│ /!\ Type error: cannot constrain int -> int -> int <: {u: 'a}
//│ l.1371: 	(let x = add.u; {u: 0})
//│         	            ^^
//│ res: {u: 0}

(let rec x = x.u; {u: 0})
//│ res: {u: 0}

(let x = 0.u.u; {u: 0})
//│ /!\ Type error: cannot constrain 0 <: {u: 'a}
//│ l.1380: 	(let x = 0.u.u; {u: 0})
//│         	            ^^
//│ res: {u: 0}

(let x = add.u.u; {u: 0})
//│ /!\ Type error: cannot constrain int -> int -> int <: {u: 'a}
//│ l.1386: 	(let x = add.u.u; {u: 0})
//│         	              ^^
//│ res: {u: 0}

(let rec x = x.u.u; {u: 0})
//│ res: {u: 0}

(x => {u: 0, v: 0})
//│ res: ⊤ -> {u: 0, v: 0}

(let x = 0; {u: 0, v: 0})
//│ res: {u: 0, v: 0}

(let x = add; {u: 0, v: 0})
//│ res: {u: 0, v: 0}

(let rec x = x; {u: 0, v: 0})
//│ res: {u: 0, v: 0}

(let x = (add 0); {u: 0, v: 0})
//│ res: {u: 0, v: 0}

(let x = (add add); {u: 0, v: 0})
//│ /!\ Type error: cannot constrain int -> int -> int <: int
//│ l.1410: 	(let x = (add add); {u: 0, v: 0})
//│         	          ^^^^^^^
//│ res: {u: 0, v: 0}

(let rec x = (add x); {u: 0, v: 0})
//│ /!\ Type error: cannot constrain int -> int <: int
//│ l.1416: 	(let rec x = (add x); {u: 0, v: 0})
//│         	             ^^^^^^^
//│ res: {u: 0, v: 0}

(let x = 0.u; {u: 0, v: 0})
//│ /!\ Type error: cannot constrain 0 <: {u: 'a}
//│ l.1422: 	(let x = 0.u; {u: 0, v: 0})
//│         	          ^^
//│ res: {u: 0, v: 0}

(let x = add.u; {u: 0, v: 0})
//│ /!\ Type error: cannot constrain int -> int -> int <: {u: 'a}
//│ l.1428: 	(let x = add.u; {u: 0, v: 0})
//│         	            ^^
//│ res: {u: 0, v: 0}

(let rec x = x.u; {u: 0, v: 0})
//│ res: {u: 0, v: 0}

(x => {u: 0, v: add})
//│ res: ⊤ -> {u: 0, v: int -> int -> int}

(let x = 0; {u: 0, v: add})
//│ res: {u: 0, v: int -> int -> int}

(let x = add; {u: 0, v: add})
//│ res: {u: 0, v: int -> int -> int}

(let rec x = x; {u: 0, v: add})
//│ res: {u: 0, v: int -> int -> int}

(x => {u: 0, v: x})
//│ res: 'a -> {u: 0, v: 'a}

(let x = 0; {u: 0, v: x})
//│ res: {u: 0, v: 0}

(let x = add; {u: 0, v: x})
//│ res: {u: 0, v: int -> int -> int}

(let rec x = x; {u: 0, v: x})
//│ res: {u: 0, v: ⊥}

(let rec x = (x 0); {u: 0, v: x})
//│ res: {u: 0, v: ⊥}

(let rec x = (x add); {u: 0, v: x})
//│ res: {u: 0, v: ⊥}

(let rec x = (x x); {u: 0, v: x})
//│ res: {u: 0, v: ⊥}

(x => {u: add})
//│ res: ⊤ -> {u: int -> int -> int}

(let x = 0; {u: add})
//│ res: {u: int -> int -> int}

(let x = add; {u: add})
//│ res: {u: int -> int -> int}

(let rec x = x; {u: add})
//│ res: {u: int -> int -> int}

(let x = (y => 0); {u: add})
//│ res: {u: int -> int -> int}

(let x = (let y = 0; 0); {u: add})
//│ res: {u: int -> int -> int}

(let x = (let y = add; 0); {u: add})
//│ res: {u: int -> int -> int}

(let x = (let rec y = y; 0); {u: add})
//│ res: {u: int -> int -> int}

(let rec x = (let y = x; 0); {u: add})
//│ res: {u: int -> int -> int}

(let x = (y => add); {u: add})
//│ res: {u: int -> int -> int}

(let x = (y => y); {u: add})
//│ res: {u: int -> int -> int}

(let rec x = (y => x); {u: add})
//│ res: {u: int -> int -> int}

(let x = 0.v; {u: add})
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.1506: 	(let x = 0.v; {u: add})
//│         	          ^^
//│ res: {u: int -> int -> int}

(let x = add.v; {u: add})
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.1512: 	(let x = add.v; {u: add})
//│         	            ^^
//│ res: {u: int -> int -> int}

(let rec x = x.v; {u: add})
//│ res: {u: int -> int -> int}

(let x = {v: 0}; {u: add})
//│ res: {u: int -> int -> int}

(let x = {v: add}; {u: add})
//│ res: {u: int -> int -> int}

(let rec x = {v: x}; {u: add})
//│ res: {u: int -> int -> int}

(x => {u: x})
//│ res: 'a -> {u: 'a}

(let x = 0; {u: x})
//│ res: {u: 0}

(let x = add; {u: x})
//│ res: {u: int -> int -> int}

(let rec x = x; {u: x})
//│ res: {u: ⊥}

(let x = {v: 0}; {u: x})
//│ res: {u: {v: 0}}

(let x = {v: add}; {u: x})
//│ res: {u: {v: int -> int -> int}}

(let rec x = {v: x}; {u: x})
//│ res: {u: {v: 'a} as 'a}

(x => {u: x, v: 0})
//│ res: 'a -> {u: 'a, v: 0}

(let x = 0; {u: x, v: 0})
//│ res: {u: 0, v: 0}

(let x = add; {u: x, v: 0})
//│ res: {u: int -> int -> int, v: 0}

(let rec x = x; {u: x, v: 0})
//│ res: {u: ⊥, v: 0}

(let x = 0.v; {u: x, v: 0})
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.1563: 	(let x = 0.v; {u: x, v: 0})
//│         	          ^^
//│ res: {u: ⊥, v: 0}

(let x = add.v; {u: x, v: 0})
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.1569: 	(let x = add.v; {u: x, v: 0})
//│         	            ^^
//│ res: {u: ⊥, v: 0}

(let rec x = x.v; {u: x, v: 0})
//│ res: {u: ⊥, v: 0}

(x => {u: x, v: add})
//│ res: 'a -> {u: 'a, v: int -> int -> int}

(let x = 0; {u: x, v: add})
//│ res: {u: 0, v: int -> int -> int}

(let x = add; {u: x, v: add})
//│ res: {u: int -> int -> int, v: int -> int -> int}

(let rec x = x; {u: x, v: add})
//│ res: {u: ⊥, v: int -> int -> int}

(let x = 0.u; {u: x, v: add})
//│ /!\ Type error: cannot constrain 0 <: {u: 'a}
//│ l.1590: 	(let x = 0.u; {u: x, v: add})
//│         	          ^^
//│ res: {u: ⊥, v: int -> int -> int}

(let x = add.u; {u: x, v: add})
//│ /!\ Type error: cannot constrain int -> int -> int <: {u: 'a}
//│ l.1596: 	(let x = add.u; {u: x, v: add})
//│         	            ^^
//│ res: {u: ⊥, v: int -> int -> int}

(let rec x = x.u; {u: x, v: add})
//│ res: {u: ⊥, v: int -> int -> int}

(let x = 0.v; {u: x, v: add})
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.1605: 	(let x = 0.v; {u: x, v: add})
//│         	          ^^
//│ res: {u: ⊥, v: int -> int -> int}

(let x = add.v; {u: x, v: add})
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.1611: 	(let x = add.v; {u: x, v: add})
//│         	            ^^
//│ res: {u: ⊥, v: int -> int -> int}

(let rec x = x.v; {u: x, v: add})
//│ res: {u: ⊥, v: int -> int -> int}

(x => {u: x, v: x})
//│ res: 'a -> {u: 'a, v: 'a}

(let x = 0; {u: x, v: x})
//│ res: {u: 0, v: 0}

(let x = add; {u: x, v: x})
//│ res: {u: int -> int -> int, v: int -> int -> int}

(let rec x = x; {u: x, v: x})
//│ res: {u: ⊥, v: ⊥}

(let x = {u: 0}; {u: x, v: x})
//│ res: {u: {u: 0}, v: {u: 0}}

(let x = {u: add}; {u: x, v: x})
//│ res: {u: {u: int -> int -> int}, v: {u: int -> int -> int}}

(let rec x = {u: x}; {u: x, v: x})
//│ res: {u: {u: 'a} as 'a, v: {u: 'b} as 'b}

(let rec x = {u: x, v: 0}; {u: x, v: x})
//│ res: {u: {u: 'a, v: 0} as 'a, v: {u: 'b, v: 0} as 'b}

(let rec x = {u: x, v: add}; {u: x, v: x})
//│ res: {u: {u: 'a, v: int -> int -> int} as 'a, v: {u: 'b, v: int -> int -> int} as 'b}

(let rec x = {u: x, v: x}; {u: x, v: x})
//│ res: {u: {u: 'a, v: 'a} as 'a, v: {u: 'b, v: 'b} as 'b}

(let x = {v: 0}; {u: x, v: x})
//│ res: {u: {v: 0}, v: {v: 0}}

(let x = {v: add}; {u: x, v: x})
//│ res: {u: {v: int -> int -> int}, v: {v: int -> int -> int}}

(let rec x = {v: x}; {u: x, v: x})
//│ res: {u: {v: 'a} as 'a, v: {v: 'b} as 'b}

(x => {u: 0.v})
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.1659: 	(x => {u: 0.v})
//│         	           ^^
//│ res: ⊤ -> {u: ⊥}

(let x = 0; {u: 0.v})
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.1665: 	(let x = 0; {u: 0.v})
//│         	                 ^^
//│ res: {u: ⊥}

(let x = add; {u: 0.v})
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.1671: 	(let x = add; {u: 0.v})
//│         	                   ^^
//│ res: {u: ⊥}

(let rec x = x; {u: 0.v})
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.1677: 	(let rec x = x; {u: 0.v})
//│         	                     ^^
//│ res: {u: ⊥}

(x => {u: add.v})
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.1683: 	(x => {u: add.v})
//│         	             ^^
//│ res: ⊤ -> {u: ⊥}

(let x = 0; {u: add.v})
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.1689: 	(let x = 0; {u: add.v})
//│         	                   ^^
//│ res: {u: ⊥}

(let x = add; {u: add.v})
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.1695: 	(let x = add; {u: add.v})
//│         	                     ^^
//│ res: {u: ⊥}

(let rec x = x; {u: add.v})
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.1701: 	(let rec x = x; {u: add.v})
//│         	                       ^^
//│ res: {u: ⊥}

(x => {u: x.v})
//│ res: {v: 'a} -> {u: 'a}

(let x = 0; {u: x.v})
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.1710: 	(let x = 0; {u: x.v})
//│         	                 ^^
//│ res: {u: ⊥}

(let x = add; {u: x.v})
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.1716: 	(let x = add; {u: x.v})
//│         	                   ^^
//│ res: {u: ⊥}

(let rec x = x; {u: x.v})
//│ res: {u: ⊥}

(let x = 0.v; {u: x.v})
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.1725: 	(let x = 0.v; {u: x.v})
//│         	          ^^
//│ res: {u: ⊥}

(let x = add.v; {u: x.v})
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.1731: 	(let x = add.v; {u: x.v})
//│         	            ^^
//│ res: {u: ⊥}

(let rec x = x.v; {u: x.v})
//│ res: {u: ⊥}

(let x = {v: 0}; {u: x.v})
//│ res: {u: 0}

(let x = {v: add}; {u: x.v})
//│ res: {u: int -> int -> int}

(let rec x = {v: x}; {u: x.v})
//│ res: {u: {v: 'a} as 'a}

(let x = {v: (y => 0)}; {u: x.v})
//│ res: {u: ⊤ -> 0}

(let x = {v: (y => add)}; {u: x.v})
//│ res: {u: ⊤ -> int -> int -> int}

(let x = {v: (y => y)}; {u: x.v})
//│ res: {u: 'a -> 'a}

(let rec x = {v: (y => x)}; {u: x.v})
//│ res: {u: (⊤ -> {v: 'a}) as 'a}

(x => 0.v)
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.1761: 	(x => 0.v)
//│         	       ^^
//│ res: ⊤ -> ⊥

(let x = 0; 0.v)
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.1767: 	(let x = 0; 0.v)
//│         	             ^^
//│ res: ⊥

(let x = add; 0.v)
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.1773: 	(let x = add; 0.v)
//│         	               ^^
//│ res: ⊥

(let rec x = x; 0.v)
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.1779: 	(let rec x = x; 0.v)
//│         	                 ^^
//│ res: ⊥

(let x = 0.u; 0.v)
//│ /!\ Type error: cannot constrain 0 <: {u: 'a}
//│ l.1785: 	(let x = 0.u; 0.v)
//│         	          ^^
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.1785: 	(let x = 0.u; 0.v)
//│         	               ^^
//│ res: ⊥

(let x = add.u; 0.v)
//│ /!\ Type error: cannot constrain int -> int -> int <: {u: 'a}
//│ l.1794: 	(let x = add.u; 0.v)
//│         	            ^^
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.1794: 	(let x = add.u; 0.v)
//│         	                 ^^
//│ res: ⊥

(let rec x = x.u; 0.v)
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.1803: 	(let rec x = x.u; 0.v)
//│         	                   ^^
//│ res: ⊥

(let x = 0.v; 0.v)
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.1809: 	(let x = 0.v; 0.v)
//│         	          ^^
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.1809: 	(let x = 0.v; 0.v)
//│         	               ^^
//│ res: ⊥

(let x = add.v; 0.v)
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.1818: 	(let x = add.v; 0.v)
//│         	            ^^
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.1818: 	(let x = add.v; 0.v)
//│         	                 ^^
//│ res: ⊥

(let rec x = x.v; 0.v)
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.1827: 	(let rec x = x.v; 0.v)
//│         	                   ^^
//│ res: ⊥

(let x = {v: 0}; 0.v)
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.1833: 	(let x = {v: 0}; 0.v)
//│         	                  ^^
//│ res: ⊥

(let x = {v: add}; 0.v)
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.1839: 	(let x = {v: add}; 0.v)
//│         	                    ^^
//│ res: ⊥

(let rec x = {v: x}; 0.v)
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.1845: 	(let rec x = {v: x}; 0.v)
//│         	                      ^^
//│ res: ⊥

(let x = {v: 0.v}; 0.v)
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.1851: 	(let x = {v: 0.v}; 0.v)
//│         	              ^^
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.1851: 	(let x = {v: 0.v}; 0.v)
//│         	                    ^^
//│ res: ⊥

(let x = {v: add.v}; 0.v)
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.1860: 	(let x = {v: add.v}; 0.v)
//│         	                ^^
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.1860: 	(let x = {v: add.v}; 0.v)
//│         	                      ^^
//│ res: ⊥

(let rec x = {v: x.v}; 0.v)
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.1869: 	(let rec x = {v: x.v}; 0.v)
//│         	                        ^^
//│ res: ⊥

(x => add.v)
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.1875: 	(x => add.v)
//│         	         ^^
//│ res: ⊤ -> ⊥

(let x = 0; add.v)
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.1881: 	(let x = 0; add.v)
//│         	               ^^
//│ res: ⊥

(let x = add; add.v)
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.1887: 	(let x = add; add.v)
//│         	                 ^^
//│ res: ⊥

(let rec x = x; add.v)
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.1893: 	(let rec x = x; add.v)
//│         	                   ^^
//│ res: ⊥

(let x = {u: 0}; add.v)
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.1899: 	(let x = {u: 0}; add.v)
//│         	                    ^^
//│ res: ⊥

(let x = {u: add}; add.v)
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.1905: 	(let x = {u: add}; add.v)
//│         	                      ^^
//│ res: ⊥

(let rec x = {u: x}; add.v)
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.1911: 	(let rec x = {u: x}; add.v)
//│         	                        ^^
//│ res: ⊥

(let x = {u: {v: 0}}; add.v)
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.1917: 	(let x = {u: {v: 0}}; add.v)
//│         	                         ^^
//│ res: ⊥

(let x = {u: {v: add}}; add.v)
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.1923: 	(let x = {u: {v: add}}; add.v)
//│         	                           ^^
//│ res: ⊥

(let rec x = {u: {v: x}}; add.v)
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.1929: 	(let rec x = {u: {v: x}}; add.v)
//│         	                             ^^
//│ res: ⊥

(let x = 0.v; add.v)
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.1935: 	(let x = 0.v; add.v)
//│         	          ^^
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.1935: 	(let x = 0.v; add.v)
//│         	                 ^^
//│ res: ⊥

(let x = add.v; add.v)
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.1944: 	(let x = add.v; add.v)
//│         	            ^^
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.1944: 	(let x = add.v; add.v)
//│         	                   ^^
//│ res: ⊥

(let rec x = x.v; add.v)
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.1953: 	(let rec x = x.v; add.v)
//│         	                     ^^
//│ res: ⊥

(x => x.v)
//│ res: {v: 'a} -> 'a

(let x = 0; x.v)
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.1962: 	(let x = 0; x.v)
//│         	             ^^
//│ res: ⊥

(let x = add; x.v)
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.1968: 	(let x = add; x.v)
//│         	               ^^
//│ res: ⊥

(let rec x = x; x.v)
//│ res: ⊥

(let x = {v: 0}; x.v)
//│ res: 0

(let x = {v: add}; x.v)
//│ res: int -> int -> int

(let rec x = {v: x}; x.v)
//│ res: {v: 'a} as 'a

(let x = {v: {v: 0}}; x.v)
//│ res: {v: 0}

(let x = {v: {v: add}}; x.v)
//│ res: {v: int -> int -> int}

(let rec x = {v: {v: x}}; x.v)
//│ res: {v: {v: 'a}} as 'a

0.u
//│ /!\ Type error: cannot constrain 0 <: {u: 'a}
//│ l.1995: 	0.u
//│         	 ^^
//│ res: ⊥

add.u
//│ /!\ Type error: cannot constrain int -> int -> int <: {u: 'a}
//│ l.2001: 	add.u
//│         	   ^^
//│ res: ⊥

0.v.u
//│ /!\ Type error: cannot constrain 0 <: {u: 'a}
//│ l.2007: 	0.v.u
//│         	   ^^
//│ res: ⊥

add.v.u
//│ /!\ Type error: cannot constrain int -> int -> int <: {u: 'a}
//│ l.2013: 	add.v.u
//│         	     ^^
//│ res: ⊥

{v: 0}.u
//│ /!\ Type error: missing field: u in {v: 0}
//│ l.2019: 	{v: 0}.u
//│         	      ^^
//│ res: ⊥

{v: add}.u
//│ /!\ Type error: missing field: u in {v: int -> int -> int}
//│ l.2025: 	{v: add}.u
//│         	        ^^
//│ res: ⊥

{u: 0}
//│ res: {u: 0}

{u: 0, v: 0}
//│ res: {u: 0, v: 0}

{u: 0, v: add}
//│ res: {u: 0, v: int -> int -> int}

{u: 0, v: (x => 0)}
//│ res: {u: 0, v: ⊤ -> 0}

{u: 0, v: (let x = 0; 0)}
//│ res: {u: 0, v: 0}

{u: 0, v: (let x = add; 0)}
//│ res: {u: 0, v: 0}

{u: 0, v: (let rec x = x; 0)}
//│ res: {u: 0, v: 0}

{u: 0, v: (let x = 0.u; 0)}
//│ /!\ Type error: cannot constrain 0 <: {u: 'a}
//│ l.2052: 	{u: 0, v: (let x = 0.u; 0)}
//│         	                    ^^
//│ res: {u: 0, v: 0}

{u: 0, v: (let x = add.u; 0)}
//│ /!\ Type error: cannot constrain int -> int -> int <: {u: 'a}
//│ l.2058: 	{u: 0, v: (let x = add.u; 0)}
//│         	                      ^^
//│ res: {u: 0, v: 0}

{u: 0, v: (let rec x = x.u; 0)}
//│ res: {u: 0, v: 0}

{u: 0, v: (x => add)}
//│ res: {u: 0, v: ⊤ -> int -> int -> int}

{u: 0, v: (x => x)}
//│ res: {u: 0, v: 'a -> 'a}

{u: 0, v: {u: 0}}
//│ res: {u: 0, v: {u: 0}}

{u: 0, v: {u: 0, v: 0}}
//│ res: {u: 0, v: {u: 0, v: 0}}

{u: 0, v: {u: 0, v: add}}
//│ res: {u: 0, v: {u: 0, v: int -> int -> int}}

{u: 0, v: {u: add}}
//│ res: {u: 0, v: {u: int -> int -> int}}

{u: 0, v: {v: 0}}
//│ res: {u: 0, v: {v: 0}}

{u: 0, v: {v: add}}
//│ res: {u: 0, v: {v: int -> int -> int}}

{u: add}
//│ res: {u: int -> int -> int}

{u: add, v: 0}
//│ res: {u: int -> int -> int, v: 0}

{u: add, v: add}
//│ res: {u: int -> int -> int, v: int -> int -> int}

{u: add, v: {u: 0}}
//│ res: {u: int -> int -> int, v: {u: 0}}

{u: add, v: {u: add}}
//│ res: {u: int -> int -> int, v: {u: int -> int -> int}}

{u: add, v: {u: add, v: 0}}
//│ res: {u: int -> int -> int, v: {u: int -> int -> int, v: 0}}

{u: add, v: {u: add, v: add}}
//│ res: {u: int -> int -> int, v: {u: int -> int -> int, v: int -> int -> int}}

{u: add, v: {u: (x => 0)}}
//│ res: {u: int -> int -> int, v: {u: ⊤ -> 0}}

{u: add, v: {u: (x => add)}}
//│ res: {u: int -> int -> int, v: {u: ⊤ -> int -> int -> int}}

{u: add, v: {u: (x => add), v: 0}}
//│ res: {u: int -> int -> int, v: {u: ⊤ -> int -> int -> int, v: 0}}

{u: add, v: {u: (x => add), v: add}}
//│ res: {u: int -> int -> int, v: {u: ⊤ -> int -> int -> int, v: int -> int -> int}}

{u: add, v: {u: (x => x)}}
//│ res: {u: int -> int -> int, v: {u: 'a -> 'a}}

{u: add, v: {u: {v: 0}}}
//│ res: {u: int -> int -> int, v: {u: {v: 0}}}

{u: add, v: {u: {v: add}}}
//│ res: {u: int -> int -> int, v: {u: {v: int -> int -> int}}}

{u: add, v: 0.v}
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.2133: 	{u: add, v: 0.v}
//│         	             ^^
//│ res: {u: int -> int -> int, v: ⊥}

{u: add, v: add.v}
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.2139: 	{u: add, v: add.v}
//│         	               ^^
//│ res: {u: int -> int -> int, v: ⊥}

{u: add, v: (x => 0).v}
//│ /!\ Type error: cannot constrain 'a -> 0 <: {v: 'a}
//│ l.2145: 	{u: add, v: (x => 0).v}
//│         	                    ^^
//│ res: {u: int -> int -> int, v: ⊥}

{u: add, v: (x => add).v}
//│ /!\ Type error: cannot constrain 'a -> int -> int -> int <: {v: 'a}
//│ l.2151: 	{u: add, v: (x => add).v}
//│         	                      ^^
//│ res: {u: int -> int -> int, v: ⊥}

{u: add, v: (x => x).v}
//│ /!\ Type error: cannot constrain 'a -> 'a <: {v: 'a}
//│ l.2157: 	{u: add, v: (x => x).v}
//│         	                    ^^
//│ res: {u: int -> int -> int, v: ⊥}

{u: add, v: {u: 0}.v}
//│ /!\ Type error: missing field: v in {u: 0}
//│ l.2163: 	{u: add, v: {u: 0}.v}
//│         	                  ^^
//│ res: {u: int -> int -> int, v: ⊥}

{u: add, v: {u: add}.v}
//│ /!\ Type error: missing field: v in {u: int -> int -> int}
//│ l.2169: 	{u: add, v: {u: add}.v}
//│         	                    ^^
//│ res: {u: int -> int -> int, v: ⊥}

{u: add, v: {v: 0}}
//│ res: {u: int -> int -> int, v: {v: 0}}

{u: add, v: {v: add}}
//│ res: {u: int -> int -> int, v: {v: int -> int -> int}}

{u: {u: 0}}
//│ res: {u: {u: 0}}

{u: {u: 0}, v: 0}
//│ res: {u: {u: 0}, v: 0}

{u: {u: 0}, v: add}
//│ res: {u: {u: 0}, v: int -> int -> int}

{u: {u: 0}, v: (add 0)}
//│ res: {u: {u: 0}, v: int -> int}

{u: {u: 0}, v: (add add)}
//│ /!\ Type error: cannot constrain int -> int -> int <: int
//│ l.2193: 	{u: {u: 0}, v: (add add)}
//│         	                ^^^^^^^
//│ res: {u: {u: 0}, v: int -> int}

{u: {u: 0}, v: (add {v: 0})}
//│ /!\ Type error: cannot constrain {v: 0} <: int
//│ l.2199: 	{u: {u: 0}, v: (add {v: 0})}
//│         	                ^^^^^^^^^^
//│ res: {u: {u: 0}, v: int -> int}

{u: {u: 0}, v: (add {v: add})}
//│ /!\ Type error: cannot constrain {v: int -> int -> int} <: int
//│ l.2205: 	{u: {u: 0}, v: (add {v: add})}
//│         	                ^^^^^^^^^^^^
//│ res: {u: {u: 0}, v: int -> int}

{u: {u: 0}, v: (x => 0)}
//│ res: {u: {u: 0}, v: ⊤ -> 0}

{u: {u: 0}, v: (x => add)}
//│ res: {u: {u: 0}, v: ⊤ -> int -> int -> int}

{u: {u: 0}, v: (x => x)}
//│ res: {u: {u: 0}, v: 'a -> 'a}

{u: {u: 0}, v: (x => 0.u)}
//│ /!\ Type error: cannot constrain 0 <: {u: 'a}
//│ l.2220: 	{u: {u: 0}, v: (x => 0.u)}
//│         	                      ^^
//│ res: {u: {u: 0}, v: ⊤ -> ⊥}

{u: {u: 0}, v: (let x = 0; 0.u)}
//│ /!\ Type error: cannot constrain 0 <: {u: 'a}
//│ l.2226: 	{u: {u: 0}, v: (let x = 0; 0.u)}
//│         	                            ^^
//│ res: {u: {u: 0}, v: ⊥}

{u: {u: 0}, v: (let x = add; 0.u)}
//│ /!\ Type error: cannot constrain 0 <: {u: 'a}
//│ l.2232: 	{u: {u: 0}, v: (let x = add; 0.u)}
//│         	                              ^^
//│ res: {u: {u: 0}, v: ⊥}

{u: {u: 0}, v: (let rec x = x; 0.u)}
//│ /!\ Type error: cannot constrain 0 <: {u: 'a}
//│ l.2238: 	{u: {u: 0}, v: (let rec x = x; 0.u)}
//│         	                                ^^
//│ res: {u: {u: 0}, v: ⊥}

{u: {u: 0}, v: (x => add.u)}
//│ /!\ Type error: cannot constrain int -> int -> int <: {u: 'a}
//│ l.2244: 	{u: {u: 0}, v: (x => add.u)}
//│         	                        ^^
//│ res: {u: {u: 0}, v: ⊤ -> ⊥}

{u: {u: 0}, v: (x => x.u)}
//│ res: {u: {u: 0}, v: {u: 'a} -> 'a}

{u: {u: 0}, v: 0.v}
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.2253: 	{u: {u: 0}, v: 0.v}
//│         	                ^^
//│ res: {u: {u: 0}, v: ⊥}

{u: {u: 0}, v: add.v}
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.2259: 	{u: {u: 0}, v: add.v}
//│         	                  ^^
//│ res: {u: {u: 0}, v: ⊥}

{u: {u: add}}
//│ res: {u: {u: int -> int -> int}}

{u: {u: add}, v: 0}
//│ res: {u: {u: int -> int -> int}, v: 0}

{u: {u: add}, v: add}
//│ res: {u: {u: int -> int -> int}, v: int -> int -> int}

{u: {u: add}, v: (x => 0)}
//│ res: {u: {u: int -> int -> int}, v: ⊤ -> 0}

{u: {u: add}, v: (x => add)}
//│ res: {u: {u: int -> int -> int}, v: ⊤ -> int -> int -> int}

{u: {u: add}, v: (let x = 0; add)}
//│ res: {u: {u: int -> int -> int}, v: int -> int -> int}

{u: {u: add}, v: (let x = add; add)}
//│ res: {u: {u: int -> int -> int}, v: int -> int -> int}

{u: {u: add}, v: (let rec x = x; add)}
//│ res: {u: {u: int -> int -> int}, v: int -> int -> int}

{u: {u: add}, v: (x => x)}
//│ res: {u: {u: int -> int -> int}, v: 'a -> 'a}

{u: {v: 0}}
//│ res: {u: {v: 0}}

{u: {v: 0}, v: 0}
//│ res: {u: {v: 0}, v: 0}

{u: {v: 0}, v: add}
//│ res: {u: {v: 0}, v: int -> int -> int}

{u: {v: 0}, v: (0 0)}
//│ /!\ Type error: cannot constrain 0 <: 0 -> 'a
//│ l.2301: 	{u: {v: 0}, v: (0 0)}
//│         	                ^^^
//│ res: {u: {v: 0}, v: ⊥}

{u: {v: 0}, v: (0 add)}
//│ /!\ Type error: cannot constrain 0 <: (int -> int -> int) -> 'a
//│ l.2307: 	{u: {v: 0}, v: (0 add)}
//│         	                ^^^^^
//│ res: {u: {v: 0}, v: ⊥}

{u: {v: 0}, v: (x => 0)}
//│ res: {u: {v: 0}, v: ⊤ -> 0}

{u: {v: 0}, v: (let x = 0; 0)}
//│ res: {u: {v: 0}, v: 0}

{u: {v: 0}, v: (let x = add; 0)}
//│ res: {u: {v: 0}, v: 0}

{u: {v: 0}, v: (let rec x = x; 0)}
//│ res: {u: {v: 0}, v: 0}

{u: {v: 0}, v: (x => add)}
//│ res: {u: {v: 0}, v: ⊤ -> int -> int -> int}

{u: {v: 0}, v: (let x = 0; add)}
//│ res: {u: {v: 0}, v: int -> int -> int}

{u: {v: 0}, v: (let x = add; add)}
//│ res: {u: {v: 0}, v: int -> int -> int}

{u: {v: 0}, v: (let rec x = x; add)}
//│ res: {u: {v: 0}, v: int -> int -> int}

{u: {v: 0}, v: (x => x)}
//│ res: {u: {v: 0}, v: 'a -> 'a}

{u: {v: add}}
//│ res: {u: {v: int -> int -> int}}

{u: {v: add}, v: 0}
//│ res: {u: {v: int -> int -> int}, v: 0}

{u: {v: add}, v: add}
//│ res: {u: {v: int -> int -> int}, v: int -> int -> int}

{u: {v: add}, v: 0.u}
//│ /!\ Type error: cannot constrain 0 <: {u: 'a}
//│ l.2349: 	{u: {v: add}, v: 0.u}
//│         	                  ^^
//│ res: {u: {v: int -> int -> int}, v: ⊥}

{u: {v: add}, v: add.u}
//│ /!\ Type error: cannot constrain int -> int -> int <: {u: 'a}
//│ l.2355: 	{u: {v: add}, v: add.u}
//│         	                    ^^
//│ res: {u: {v: int -> int -> int}, v: ⊥}

{u: {v: add}, v: 0.v}
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.2361: 	{u: {v: add}, v: 0.v}
//│         	                  ^^
//│ res: {u: {v: int -> int -> int}, v: ⊥}

{u: {v: add}, v: add.v}
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.2367: 	{u: {v: add}, v: add.v}
//│         	                    ^^
//│ res: {u: {v: int -> int -> int}, v: ⊥}

{u: {v: add}, v: {v: 0}}
//│ res: {u: {v: int -> int -> int}, v: {v: 0}}

{u: {v: add}, v: {v: add}}
//│ res: {u: {v: int -> int -> int}, v: {v: int -> int -> int}}

0.v
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.2379: 	0.v
//│         	 ^^
//│ res: ⊥

add.v
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.2385: 	add.v
//│         	   ^^
//│ res: ⊥

{v: 0}
//│ res: {v: 0}

{v: add}
//│ res: {v: int -> int -> int}

{v: 0.u}
//│ /!\ Type error: cannot constrain 0 <: {u: 'a}
//│ l.2397: 	{v: 0.u}
//│         	     ^^
//│ res: {v: ⊥}

{v: add.u}
//│ /!\ Type error: cannot constrain int -> int -> int <: {u: 'a}
//│ l.2403: 	{v: add.u}
//│         	       ^^
//│ res: {v: ⊥}

{v: 0.v}
//│ /!\ Type error: cannot constrain 0 <: {v: 'a}
//│ l.2409: 	{v: 0.v}
//│         	     ^^
//│ res: {v: ⊥}

{v: add.v}
//│ /!\ Type error: cannot constrain int -> int -> int <: {v: 'a}
//│ l.2415: 	{v: add.v}
//│         	       ^^
//│ res: {v: ⊥}

{v: {v: 0}}
//│ res: {v: {v: 0}}

{v: {v: add}}
//│ res: {v: {v: int -> int -> int}}


// Number of expressions generated: 499

// Program sizes:
//   1: 2
//   2: 8
//   3: 34
//   4: 62
//   5: 123
//   6: 128
//   7: 99
//   8: 22
//   9: 21

