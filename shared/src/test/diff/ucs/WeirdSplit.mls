:NewParser

class A()
class B()
//│ Defined class A
//│ Defined class B
//│ A: () -> A
//│  = [Function: A1]
//│ B: () -> B
//│  = [Function: B1]

fun f(x) =
  if x
    is
      A then 0
      B then 1
//│ ╔══[WARNING] old desugarer used
//│ ║  l.13: 	  if x
//│ ║        	     ^
//│ ║  l.14: 	    is
//│ ║        	^^^^^^
//│ ║  l.15: 	      A then 0
//│ ║        	^^^^^^^^^^^^^^
//│ ║  l.16: 	      B then 1
//│ ╙──      	^^^^^^^^^^^^^^
//│ TEST CASE FAILURE: There was an unexpected warning
//│ f: (A | B) -> (0 | 1)
//│  = [Function: f]

// Precedence problem: should we restruct terms when push them to the stack?
:e
fun f(x) =
  if x ==
    1
      + 2 then 0
      + _ then 1
//│ ╔══[WARNING] old desugarer used
//│ ║  l.33: 	  if x ==
//│ ║        	     ^^^^
//│ ║  l.34: 	    1
//│ ║        	^^^^^^
//│ ║  l.35: 	      + 2 then 0
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.36: 	      + _ then 1
//│ ╙──      	^^^^^^^^^^^^^^^^
//│ TEST CASE FAILURE: There was an unexpected warning
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.33: 	  if x ==
//│ ║        	     ^^^^
//│ ║  l.34: 	    1
//│ ║        	^^^^^^
//│ ║  l.35: 	      + 2 then 0
//│ ║        	^^^^^^^
//│ ╟── operator application of type `bool` is not an instance of type `int`
//│ ║  l.33: 	  if x ==
//│ ║        	     ^^^^
//│ ║  l.34: 	    1
//│ ╙──      	^^^^^^
//│ f: number -> (0 | 1)
//│  = [Function: f1]

fun f(x, s, t) =
  if x
    is A()
      and t then 0
      and s then 0
    is _ then 1
//│ ╔══[WARNING] old desugarer used
//│ ║  l.63: 	  if x
//│ ║        	     ^
//│ ║  l.64: 	    is A()
//│ ║        	^^^^^^^^^^
//│ ║  l.65: 	      and t then 0
//│ ║        	^^^^^^^^^^^^^^^^^^
//│ ║  l.66: 	      and s then 0
//│ ║        	^^^^^^^^^^^^^^^^^^
//│ ║  l.67: 	    is _ then 1
//│ ╙──      	^^^^^^^^^^^^^^^
//│ TEST CASE FAILURE: There was an unexpected warning
//│ f: (anything, anything, anything,) -> (0 | 1)
//│  = [Function: f2]
