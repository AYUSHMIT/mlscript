:NewParser
:NewDefs



fun f(x, y) = if x ==
    0 then true
    1 then false
  else if y ==
    0 then true
    1 then false
  else false
//│ fun f: (number, number,) -> bool

fun f(x, y) = if x ==
    0 then true
    1 then false
  else if y ==
    0 then true
    _ then false
//│ fun f: (number, number,) -> bool



// TODO use real booleans
module True
module False
//│ module True()
//│ module False()


:e
:ge
fun f(x, y) = if x is
    True and y is True then true
    False and y is False then false
//│ ╔══[ERROR] The match is not exhaustive.
//│ ║  l.35: 	    True and y is True then true
//│ ║        	             ^^^^^^^^^
//│ ╟── The scrutinee at this position misses 1 case.
//│ ║  l.35: 	    True and y is True then true
//│ ║        	             ^
//│ ╙── [Missing Case 1/1] `False`
//│ fun f: (anything, anything,) -> error
//│ Code generation encountered an error:
//│   if expression was not desugared

fun f(x, y) = if x is
    True and y is True then true
    False and y is False then false
    True and y is False then true
    False and y is True then true
//│ fun f: (False | True, False | True,) -> bool

// FIXME
fun f(x, y) = if x is
    True and y is True then true
    False and y is False then false
    _ and y is
      True then true
      False then false
//│ ╔══[ERROR] The match is not exhaustive.
//│ ║  l.57: 	    True and y is True then true
//│ ║        	             ^^^^^^^^^
//│ ╟── The scrutinee at this position misses 1 case.
//│ ║  l.57: 	    True and y is True then true
//│ ║        	             ^
//│ ╙── [Missing Case 1/1] `False`
//│ fun f: (anything, anything,) -> error
//│ Code generation encountered an error:
//│   if expression was not desugared

// TODO support `else if`
fun f(x, y) = if x is
    True and y is True then true
    False and y is False then false
  else if y is
    True then true
    False then false
//│ fun f: (anything, False | True,) -> bool

// TODO support `else if`
fun f(x, y) = if x is
    True and y is True then true
    False and y is False then false
  else if y is
    True and x is False then true
    False and x is True then false
//│ ╔══[ERROR] The match is not exhaustive.
//│ ║  l.87: 	    True and x is False then true
//│ ║        	             ^^^^^^^^^^
//│ ╟── The scrutinee at this position misses 1 case.
//│ ║  l.87: 	    True and x is False then true
//│ ║        	             ^
//│ ╙── [Missing Case 1/1] `True`
//│ ╔══[ERROR] The match is not exhaustive.
//│ ║  l.87: 	    True and x is False then true
//│ ║        	             ^^^^^^^^^^
//│ ╟── The scrutinee at this position misses 1 case.
//│ ║  l.87: 	    True and x is False then true
//│ ║        	             ^
//│ ╙── [Missing Case 1/1] `True`
//│ ╔══[ERROR] The match is not exhaustive.
//│ ║  l.87: 	    True and x is False then true
//│ ║        	             ^^^^^^^^^^
//│ ╟── The scrutinee at this position misses 1 case.
//│ ║  l.87: 	    True and x is False then true
//│ ║        	             ^
//│ ╙── [Missing Case 1/1] `True`
//│ fun f: (anything, anything,) -> (error | false | true)
//│ Code generation encountered an error:
//│   if expression was not desugared



