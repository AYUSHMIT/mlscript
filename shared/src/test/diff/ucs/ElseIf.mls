:PreTyper



fun f(x, y) = if x ===
    0 then true
    1 then false
  else if y ===
    0 then true
    1 then false
  else false
//│ fun f: (Eql[0 | 1], Eql[0 | 1]) -> Bool

fun f(x, y) = if x ===
    0 then true
    1 then false
  else if y ===
    0 then true
    _ then false
//│ fun f: (Eql[0 | 1], Eql[0]) -> Bool

module Tru
module Fals
//│ module Tru
//│ module Fals

:e
fun f(x, y) = if x is
    Tru and y is Tru then true
    Fals and y is Fals then false
//│ ╔══[ERROR] When scrutinee `x` is `Tru`
//│ ║  l.29: 	    Tru and y is Tru then true
//│ ║        	    ^^^
//│ ╟── Scrutinee `y` has 1 missing case
//│ ║  l.29: 	    Tru and y is Tru then true
//│ ║        	            ^
//│ ╟── It can be module `Fals`
//│ ║  l.30: 	    Fals and y is Fals then false
//│ ╙──      	                  ^^^^
//│ ╔══[ERROR] When scrutinee `x` is `Fals`
//│ ║  l.30: 	    Fals and y is Fals then false
//│ ║        	    ^^^^
//│ ╟── Scrutinee `y` has 1 missing case
//│ ║  l.30: 	    Fals and y is Fals then false
//│ ║        	             ^
//│ ╟── It can be module `Tru`
//│ ║  l.29: 	    Tru and y is Tru then true
//│ ╙──      	                 ^^^
//│ fun f: (Fals | Tru, nothing) -> Bool

// The base case.
fun f(x, y) = if x is
    Tru and y is Tru then true
    Fals and y is Fals then false
    Tru and y is Fals then true
    Fals and y is Tru then true
//│ fun f: (Fals | Tru, Fals | Tru) -> Bool

// Replace the `x is Fals` with `_`
fun f(x, y) = if x is
    Tru and y is Tru then true
    Fals and y is Fals then false
    _ and y is
      Tru then true
      Fals then false
//│ fun f: (Object, Fals | Tru) -> Bool

f(Tru, Tru)
f(Tru, Fals)
f(Fals, Tru)
f(Fals, Fals)
//│ Bool
//│ res
//│     = true
//│ res
//│     = false
//│ res
//│     = true
//│ res
//│     = false

// Test with real booleans
fun g(x, y) = if x is
  true and y is true then true
  false and y is false then false
  _ and y is
    true then true
    false then false
//│ ╙──
//│ fun g: (Object, Bool) -> Bool

// Chained UCS terms
fun f(x, y) = if x is
    Tru and y is Tru then true
    Fals and y is Fals then false
  else if y is
    Tru then true
    Fals then false
//│ fun f: (Object, Fals | Tru) -> Bool

:e
fun f(x, y) = if x is
    Tru and y is Tru then true
    Fals and y is Fals then false
  else if y is
    Tru and x is Fals then true
    Fals and x is Tru then false
//│ ╔══[ERROR] When scrutinee `y` is `Tru`
//│ ║  l.106: 	    Tru and x is Fals then true
//│ ║         	    ^^^
//│ ╟── Scrutinee `x` has 1 missing case
//│ ║  l.106: 	    Tru and x is Fals then true
//│ ║         	            ^
//│ ╟── It can be module `Tru`
//│ ║  l.107: 	    Fals and x is Tru then false
//│ ╙──       	                  ^^^
//│ ╔══[ERROR] When scrutinee `y` is `Fals`
//│ ║  l.107: 	    Fals and x is Tru then false
//│ ║         	    ^^^^
//│ ╟── Scrutinee `x` has 1 missing case
//│ ║  l.107: 	    Fals and x is Tru then false
//│ ║         	             ^
//│ ╟── It can be module `Fals`
//│ ║  l.106: 	    Tru and x is Fals then true
//│ ╙──       	                 ^^^^
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.106: 	    Tru and x is Fals then true
//│ ║         	            ^^^^^^^^^^^^^^^^^^^
//│ ╟── class pattern of type `Tru` is not an instance of type `Fals`
//│ ║  l.103: 	    Tru and y is Tru then true
//│ ║         	    ^^^
//│ ╟── but it flows into reference with expected type `Fals`
//│ ║  l.106: 	    Tru and x is Fals then true
//│ ║         	            ^
//│ ╟── Note: constraint arises from class pattern:
//│ ║  l.106: 	    Tru and x is Fals then true
//│ ╙──       	                 ^^^^
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.107: 	    Fals and x is Tru then false
//│ ║         	             ^^^^^^^^^^^^^^^^^^^
//│ ╟── class pattern of type `Fals` is not an instance of type `Tru`
//│ ║  l.104: 	    Fals and y is Fals then false
//│ ║         	    ^^^^
//│ ╟── but it flows into reference with expected type `Tru`
//│ ║  l.107: 	    Fals and x is Tru then false
//│ ║         	             ^
//│ ╟── Note: constraint arises from class pattern:
//│ ║  l.107: 	    Fals and x is Tru then false
//│ ╙──       	                  ^^^
//│ fun f: (Fals | Tru, Fals | Tru) -> Bool

fun h(x, y, p) = if
  x and p(x) then 0
  y is
    Tru then 1
    Fals then 2
//│ fun h: forall 'a. ('a & Bool, Fals | Tru, 'a -> Bool) -> (0 | 1 | 2)
