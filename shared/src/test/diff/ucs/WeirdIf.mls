:PreTyper

:w
if
  _ then 0
  else 0
else 1
//│ ╔══[WARNING] unreachable case
//│ ║  l.5: 	  _ then 0
//│ ╙──     	         ^
//│ ╔══[WARNING] unreachable case
//│ ║  l.5: 	  _ then 0
//│ ╙──     	         ^
//│ 0
//│ res
//│     = 0

:w
if else 0 else 1
//│ ╔══[WARNING] unreachable case
//│ ║  l.19: 	if else 0 else 1
//│ ╙──      	        ^
//│ 0
//│ res
//│     = 0

:w
fun f(x) = if x is else 0 else 1
//│ ╔══[WARNING] the case is unreachable
//│ ║  l.28: 	fun f(x) = if x is else 0 else 1
//│ ║        	                               ^
//│ ╟── because this branch covers the case
//│ ║  l.28: 	fun f(x) = if x is else 0 else 1
//│ ╙──      	                        ^
//│ fun f: anything -> 0

fun f(x) = if x is else 0 
//│ fun f: anything -> 0

:e
if true
  then 0
//│ ╔══[ERROR] missing else branch
//│ ║  l.42: 	  then 0
//│ ╙──      	       ^
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.42: 	  then 0
//│ ║        	       ^
//│ ╙── expression of type `Bool` is not an instance of type `true`
//│ 0
//│ res
//│     = 0

// This cannot be parsed. But the next one works.
:pe
:e
fun f(x) =
  if x ===
    else "bruh"
//│ ╔══[PARSE ERROR] Unexpected indented block in expression position
//│ ║  l.59: 	    else "bruh"
//│ ╙──      	^^^^
//│ ╔══[PARSE ERROR] Unexpected end of indented block; an expression was expected here
//│ ║  l.59: 	    else "bruh"
//│ ╙──      	    ^
//│ ╔══[PARSE ERROR] Expected 'then'/'else' clause after 'if'; found operator application instead
//│ ║  l.58: 	  if x ===
//│ ║        	     ^^^^^
//│ ║  l.59: 	    else "bruh"
//│ ║        	^^^^
//│ ╟── Note: 'if' expression starts here:
//│ ║  l.58: 	  if x ===
//│ ╙──      	  ^^
//│ ╔══[ERROR] missing else branch
//│ ║  l.59: 	    else "bruh"
//│ ╙──      	    ^
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.59: 	    else "bruh"
//│ ║        	    ^
//│ ╙── expression of type `Bool` is not an instance of type `true`
//│ fun f: Eql[()] -> ()

// But this works.
fun f(x) =
  if x ===
    _ then "bruh"
//│ fun f: anything -> "bruh"

fun boolToStr(x) =
  if x is
    true then "yah"
    false then "nah"
//│ ╙──
//│ ╙──
//│ fun boolToStr: Bool -> ("nah" | "yah")

boolToStr of true
boolToStr of false
//│ "nah" | "yah"
//│ res
//│     = 'yah'
//│ res
//│     = 'nah'
